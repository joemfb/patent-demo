<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08626813-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08626813</doc-number>
<kind>B1</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>13964479</doc-number>
<date>20130812</date>
</document-id>
</application-reference>
<us-application-series-code>13</us-application-series-code>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>7</main-group>
<subgroup>38</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>708501</main-classification>
</classification-national>
<invention-title id="d2e43">Dual-path fused floating-point two-term dot product unit</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>6332186</doc-number>
<kind>B1</kind>
<name>Elwood et al.</name>
<date>20011200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>711217</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>6487575</doc-number>
<kind>B1</kind>
<name>Oberman</name>
<date>20021100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>708504</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>6842765</doc-number>
<kind>B2</kind>
<name>Enenkel et al.</name>
<date>20050100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>708501</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>8037118</doc-number>
<kind>B2</kind>
<name>Quinnell et al.</name>
<date>20111000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>8078660</doc-number>
<kind>B2</kind>
<name>Quinnell et al.</name>
<date>20111200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>8161090</doc-number>
<kind>B2</kind>
<name>Swartzlander, Jr. et al.</name>
<date>20120400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>8166091</doc-number>
<kind>B2</kind>
<name>Swartzlander, Jr. et al.</name>
<date>20120400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>2002/0107900</doc-number>
<kind>A1</kind>
<name>Enenkel et al.</name>
<date>20020800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>708501</main-classification></classification-national>
</us-citation>
<us-citation>
<nplcit num="00009">
<othercit>Sohn et al., Improved Architectures for a Floating-Point Fused Dot Product Unit, 2013 IEEE 21st Symposium on Computer Arithmetic, pp. 41-48, Apr. 7-10, 2013.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00010">
<othercit>Min et al., &#x201c;Fused Floating-Point Two-Term Sum-of-Squares Unit,&#x201d; 24th IEEE International Conference on Application-Specific Systems, Architectures and Processors, Jun. 5-7, 2013.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00011">
<othercit>Sohn et al., &#x201c;Improved Architectures for a Fused Floating-Point Add-Subtract Unit,&#x201d; IEEE Transactions on Circuits and Systems-1: Regular Papers, vol. 59, pp. 2285-2291, Apr. 12, 2012.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00012">
<othercit>Min et al., &#x201c;A Low-Power Dual-Path Floating-Path Fused Add-Subtract Unit,&#x201d; 46th Asilomar Conference on Signals, Systems and Computers, pp. 998-1002, Nov. 4-7, 2012.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00013">
<othercit>Saleh et al., &#x201c;A Floating-Point Fused Add-Subtract Unit,&#x201d; 2008 IEEE Midwest Symposium on Circuits and Systems, pp. 519-522, Aug. 10-13, 2008.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00014">
<othercit>Saleh et al., &#x201c;A Floating-Point Fused Dot-Product Unit,&#x201d; XXVI IEEE International Conference on Computer Design, pp. 427-431, Oct. 12-15, 2008.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00015">
<othercit>Quinnell et al., &#x201c;Bridge Floating-Point Fused Multiply-Add Design,&#x201d; IEEE Transactions on Very Large Scale Integration (VLSI) Systems, vol. 16, pp. 1726-1730, Nov. 19, 2008.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00016">
<othercit>Swartzlander, Jr., et al., &#x201c;Fused Floating-Point Arithmetic for DSP,&#x201d; 42th Asilomar Conference on Signals, Systems and Computers, pp. 767-771, Oct. 26-29, 2008.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00017">
<othercit>Swartzlander, Jr., et al., &#x201c;FFT Implementation with Fused Floating-Point Operations,&#x201d; IEEE Transactions on Computers, vol. 61, pp. 284-288, Dec. 9, 2010.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00018">
<othercit>Swartzlander, Jr., et al., &#x201c;Floating-Point Implementation of Complex Multiplication,&#x201d; 43rd Asilomar Conference on Signals, Systems and Computers, pp. 926-929, Nov. 2-4, 2009.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00019">
<othercit>Ji et al., &#x201c;Comments on Leading-One Prediction with Concurrent Position Correct,&#x201d; IEEE Transactions on Computers, vol. 58, No. 12, Mar. 5, 2009.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00020">
<othercit>Kornerup et al., &#x201c;Correcting the Normalization Shift of Redundant Binary Representations,&#x201d; IEEE Transactions on Computers, vol. 58, No. 10, Feb. 25, 2009.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00021">
<othercit>Bruguera et al., &#x201c;Leading-One Prediction with Concurrent Position Correct,&#x201d; IEEE Transactions on Computers, vol. 48, No. 10, Oct. 1999.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00022">
<othercit>Lang et al., &#x201c;Floating-Point Multiply-Add-Fused with Reduced Latency,&#x201d; IEEE Transactions on Computers, vol. 53, No. 8, Aug. 2004.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00023">
<othercit>Hokenek et al., &#x201c;Second-Generation RISC Floating Point with Multiply-Add Fused,&#x201d; IEEE Journal of Solid-State Circuits, vol. 25, No. 5, Oct. 1990.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00024">
<othercit>Montoye et al., &#x201c;Design of the IBM RISC System/6000 Floating-Point Execution Unit,&#x201d; IBM J. Res. Develop., vol. 34, No. 1, Jan. 1990.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00025">
<othercit>&#x201c;IEEE Standard for Floating-Point Arithmetic,&#x201d; Aug. 29, 2008.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>19</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>708501</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>708523-524</main-classification>
<additional-info>unstructured</additional-info>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>12</number-of-drawing-sheets>
<number-of-figures>13</number-of-figures>
</figures>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only" applicant-authority-category="assignee">
<addressbook>
<orgname>Board of Regents, The University of Texas System</orgname>
<address>
<city>Austin</city>
<state>TX</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Swartzlander</last-name>
<first-name>Earl E.</first-name>
<address>
<city>Austin</city>
<state>TX</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Sohn</last-name>
<first-name>Jongwook</first-name>
<address>
<city>Austin</city>
<state>TX</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<last-name>Voigt, Jr.</last-name>
<first-name>Robert A.</first-name>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
<agent sequence="02" rep-type="attorney">
<addressbook>
<orgname>Winstead, P.C.</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>Board of Regents, The University of Texas System</orgname>
<role>02</role>
<address>
<city>Austin</city>
<state>TX</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Mai</last-name>
<first-name>Tan V.</first-name>
<department>2193</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">A fused floating-point dot product unit. The fused dot product unit includes an improved alignment scheme that generates smaller significand pairs compared to the traditional alignment due to the reduced shift amount and sticky logic. Furthermore, the fused dot product unit implements early normalization and a fast rounding scheme. By normalizing the significands prior to the significand addition, the length of the adder can be reduced and the round logic can be performed in parallel. Additionally, the fused dot product unit implements a four-input leading zero anticipation unit thereby reducing the overhead of the reduction tree by encoding the four inputs at once. The fused floating-point dot product unit may also employ a dual-path (a far path and a close path) algorithm to improve performance. Pipelining may also be applied to the dual-path fused dot product unit to increase the throughput.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="240.28mm" wi="189.91mm" file="US08626813-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="231.99mm" wi="172.30mm" orientation="landscape" file="US08626813-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="247.73mm" wi="193.38mm" file="US08626813-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="246.80mm" wi="188.81mm" file="US08626813-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="241.81mm" wi="189.82mm" file="US08626813-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="240.88mm" wi="143.68mm" file="US08626813-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="239.52mm" wi="171.37mm" file="US08626813-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="140.38mm" wi="162.73mm" file="US08626813-20140107-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00008" num="00008">
<img id="EMI-D00008" he="246.13mm" wi="192.79mm" file="US08626813-20140107-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00009" num="00009">
<img id="EMI-D00009" he="211.50mm" wi="175.60mm" file="US08626813-20140107-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00010" num="00010">
<img id="EMI-D00010" he="203.62mm" wi="184.83mm" file="US08626813-20140107-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00011" num="00011">
<img id="EMI-D00011" he="236.22mm" wi="160.10mm" file="US08626813-20140107-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00012" num="00012">
<img id="EMI-D00012" he="222.08mm" wi="200.32mm" file="US08626813-20140107-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">TECHNICAL FIELD</heading>
<p id="p-0002" num="0001">The present invention relates generally to floating-point fused dot-product units, and more particularly to a fused floating-point two-term dot product unit whose performance is improved and area and power consumption is reduced by fusing two multiply and one add operation as well as using a two-path addition algorithm.</p>
<heading id="h-0002" level="1">BACKGROUND</heading>
<p id="p-0003" num="0002">Floating-point operations are widely used for advanced applications, such as 3D graphics, signal processing and scientific computations. These computations require a wide dynamic range of values. Fixed-point arithmetic is not sufficient for representing such a wide range of values, but floating-point arithmetic, such as that which is specified in the IEEE-754 standard for floating-point arithmetic, can represent a wide range of numbers from tiny fractional numbers to nearly infinitely huge numbers so that overflow and underflow are avoided. However, the floating-point operations require complex processes, such as alignment, normalization and rounding, which significantly increases the area, power consumption and latency. One solution is to merge or &#x201c;fuse&#x201d; several operations in one floating-point unit to reduce the area, power and latency by sharing the common logic of the operations. In order to improve the floating-point units, several fused units have been introduced: fused multiply-add, fused add-subtract, and fused dot product.</p>
<p id="p-0004" num="0003">Unfortunately, despite these improvements to the floating-point units, such as the fused dot product unit, the current floating-point dot product unit is still expensive in terms of silicon area, power consumption and latency.</p>
<heading id="h-0003" level="1">BRIEF SUMMARY</heading>
<p id="p-0005" num="0004">In one embodiment of the present invention, a floating-point fused dot product unit comprises a first multiplier tree adapted to multiply a first and second significand operands to produce a first significand pair. The floating-point fused dot product unit further comprises a second multiplier tree adapted to multiply a third and fourth significand operands to produce a second significand pair. Additionally, the floating-point fused dot product unit comprises a first multiplexer coupled to the first and second multiplier trees, where the first mulitplexer is configured to select a smaller significand pair of the first and second significand pairs. Furthermore, the floating-point fused dot product unit comprises a second multiplexer coupled to the first and second multiplier trees, where the second multiplexer is configured to select a greater significand pair of the first and second significand pairs. The floating-point fused dot product unit additionally comprises an alignment and sticky unit coupled to the first multiplexer, where the alignment and sticky unit is configured to align the smaller significand pair and perform sticky logic on the smaller significand pair to generate a first sticky bit. In addition, the floating-point fused dot product unit comprises a sticky unit coupled to the second multiplexer, where the sticky unit is configured to perform sticky logic on the greater significand pair to generate a second sticky bit. The least significant bits under the first and second sticky bits are discarded to thereby reduce a length of the first and second significand pairs.</p>
<p id="p-0006" num="0005">In another embodiment of the present invention, a floating-point fused dot product unit comprises a first multiplier tree adapted to multiply a first and a second significand of a first and a second operand, respectively, to produce a first significand pair. The floating-point fused dot product unit further comprises a second multiplier tree adapted to multiply a third and a fourth significand of a third and a fourth operand, respectively, to produce a second significand pair. Furthermore, the floating-point fused dot product comprises a far path comprising a first multiplexer configured to select a smaller significand pair of the first and second significand pairs. The far path additionally comprises a second multiplexer configured to select a greater significand pair of the first and second significand pairs. Additionally, the far path comprises a first alignment and sticky unit coupled to the first multiplexer, where the first alignment and sticky unit is configured to align the smaller significand pair and perform sticky logic for the smaller significand pair. Furthermore, the far path comprises a first inverter coupled to the first alignment and sticky unit, where the first inverter is configured to invert the aligned significand pair in response to an operation being a subtraction. In addition, the far path comprises a sticky unit coupled to the second multiplexer, where the sticky unit is configured to perform sticky logic for the greater significand pair. The far path further comprises a first four-to-two carry save adder coupled to the first inverter and the sticky unit, where the first four-to-two carry save adder is configured to receive the inverted aligned significand pair and the greater significand pair to produce a first two significands. The floating-point fused dot product unit comprises a close path comprising a second alignment unit configured to align the first and second significand pairs. The close path further comprises a second inverter coupled to the second alignment unit, where the second inverter is configured to invert the aligned first significand pair. Furthermore, the close path comprises a third inverter coupled to the second alignment unit, where the third inverter is configured to invert the aligned second significand pair. Additionally, the close path comprises a second four-to-two carry save adder coupled to the second inverter and the second alignment unit, where the second four-to-two carry save adder is configured to receive the inverted aligned first significand pair and the aligned second significand pair to produce a second two significands. In addition, the close path comprises a third four-to-two carry save adder coupled to the third inverter and the second alignment unit, where the third four-to-two carry save adder is configured to receive the inverted aligned second significand pair and the aligned first significand pair to produce a third two significands. Furthermore, the close path comprises a comparison unit configured to compare the second two significands and a result of the comparison selects one of the second and third two significands to not be complemented after significand addition. Additionally, the close path comprises a normalization unit configured to normalized the selected one of the second and third two significands.</p>
<p id="p-0007" num="0006">The foregoing has outlined rather generally the features and technical advantages of one or more embodiments of the present invention in order that the detailed description of the present invention that follows may be better understood. Additional features and advantages of the present invention will be described hereinafter which may form the subject of the claims of the present invention.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE SEVERAL VIEWS OF THE DRAWINGS</heading>
<p id="p-0008" num="0007">A better understanding of the present invention can be obtained when the following detailed description is considered in conjunction with the following drawings, in which:</p>
<p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. 1</figref> illustrates a hardware configuration of a computer system configured in accordance with an embodiment of the present invention;</p>
<p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. 2</figref> illustrates a traditional floating-point fused dot product unit;</p>
<p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. 3</figref> illustrates an enhanced floating-point fused dot product unit in accordance with an embodiment of the present invention;</p>
<p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. 4A</figref> illustrates the traditional floating-point fused dot product unit performing the significand alignment on a single side significand pair;</p>
<p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. 4B</figref> illustrates the alignment method of the enhanced floating-point fused dot product unit of <figref idref="DRAWINGS">FIG. 3</figref> swapping the significands to shift the smaller significand pair so that the shift amount is reduced in accordance with an embodiment of the present invention;</p>
<p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. 5</figref> illustrates the early normalization and sticky logic in accordance with an embodiment of the present invention;</p>
<p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. 6</figref> is a table showing the pre-encoding patterns that terminate the leading zeros and the corresponding leading zeros for W&#x3e;0 in accordance with an embodiment of the present invention;</p>
<p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. 7</figref> illustrates a dual-path floating-point fused dot product unit consisting of a far path and a close path in accordance with an embodiment of the present invention;</p>
<p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. 8</figref> illustrates the far path logic for the dual-path floating-point fused dot product unit of <figref idref="DRAWINGS">FIG. 7</figref> in accordance with an embodiment of the present invention;</p>
<p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. 9</figref> illustrates the close path logic for the dual-path floating-point fused dot product unit of <figref idref="DRAWINGS">FIG. 7</figref> in accordance with an embodiment of the present invention;</p>
<p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. 10</figref> illustrates the exponent compare and path select logic in accordance with an embodiment of the present invention;</p>
<p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. 11</figref> illustrates the exponent adjust and selection logic in accordance with an embodiment of the present invention; and</p>
<p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. 12</figref> illustrates the data flow and critical path of the dual-path floating-point fused dot product unit of <figref idref="DRAWINGS">FIG. 7</figref> in accordance with an embodiment of the present invention.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0005" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0022" num="0021">In the following description, numerous specific details are set forth to provide a thorough understanding of the present invention. However, it will be apparent to those skilled in the art that the present invention may be practiced without such specific details. In other instances, well-known circuits have been shown in block diagram form in order not to obscure the present invention in unnecessary detail. For the most part, details considering timing considerations and the like have been omitted inasmuch as such details are not necessary to obtain a complete understanding of the present invention and are within the skills of persons of ordinary skill in the relevant art.</p>
<p id="p-0023" num="0022">Referring now to the Figures in detail, <figref idref="DRAWINGS">FIG. 1</figref> illustrates a hardware configuration of a computer system <b>100</b> which is representative of a hardware environment for practicing the present invention. Computer system <b>100</b> has a processor <b>101</b> coupled to various other components by system bus <b>102</b>. A more detailed description of processor <b>101</b>, specifically, the floating-point fused dot-product unit of processor <b>101</b>, is described further below in connection with <figref idref="DRAWINGS">FIGS. 2-12</figref>.</p>
<p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. 1</figref> further illustrates an operating system <b>103</b> that runs on processor <b>101</b> and provides control and coordinates the functions of the various components of <figref idref="DRAWINGS">FIG. 1</figref>. An application <b>104</b> in accordance with the principles of the present invention runs in conjunction with operating system <b>103</b> and provides calls to operating system <b>103</b> where the calls implement the various functions or services to be performed by application <b>104</b>.</p>
<p id="p-0025" num="0024">Referring again to <figref idref="DRAWINGS">FIG. 1</figref>, read-only memory (&#x201c;ROM&#x201d;) <b>105</b> is coupled to system bus <b>102</b> and includes a basic input/output system (&#x201c;BIOS&#x201d;) that controls certain basic functions of computer system <b>100</b>. Random access memory (&#x201c;RAM&#x201d;) <b>106</b> and disk adapter <b>107</b> are also coupled to system bus <b>102</b>. It should be noted that software components including operating system <b>103</b> and application <b>104</b> may be loaded into RAM <b>106</b>, which may be computer system's <b>100</b> main memory for execution. Disk adapter <b>107</b> may be an integrated drive electronics (&#x201c;IDE&#x201d;) adapter that communicates with a disk unit <b>108</b>, e.g., disk drive.</p>
<p id="p-0026" num="0025">Computer system <b>100</b> may further include a communications adapter <b>109</b> coupled to bus <b>102</b>. Communications adapter <b>109</b> interconnects bus <b>102</b> with an outside network thereby enabling computer system <b>100</b> to communicate with other such systems.</p>
<p id="p-0027" num="0026">I/O devices may also be connected to computer system <b>100</b> via a user interface adapter <b>110</b> and a display adapter <b>111</b>. Keyboard <b>112</b>, mouse <b>113</b> and speaker <b>114</b> may all be interconnected to bus <b>102</b> through user interface adapter <b>110</b>. A display monitor <b>115</b> may be connected to system bus <b>102</b> by display adapter <b>111</b>. In this manner, a user is capable of inputting to computer system <b>100</b> through keyboard <b>112</b> or mouse <b>113</b> and receiving output from computer system <b>100</b> via display <b>115</b> or speaker <b>114</b>.</p>
<p id="p-0028" num="0027">As will be appreciated by one skilled in the art, aspects of the present invention may be embodied as a system, method or computer program product. Accordingly, aspects of the present invention may take the form of an entirely hardware embodiment, an entirely software embodiment (including firmware, resident software, micro-code, etc.) or an embodiment combining software and hardware aspects that may all generally be referred to herein as a &#x201c;circuit,&#x201d; &#x2018;module&#x201d; or &#x201c;system.&#x201d; Furthermore, aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium(s) having computer readable program code embodied thereon.</p>
<p id="p-0029" num="0028">As stated in the Background section, floating-point operations are widely used for advanced applications, such as 3D graphics, signal processing and scientific computations. These computations require a wide dynamic range of values. Fixed-point arithmetic is not sufficient for representing such a wide range of values, but floating-point arithmetic, such as that which is specified in the IEEE-754 standard for floating-point arithmetic, can represent a wide range of numbers from tiny fractional numbers to nearly infinitely huge numbers so that the overflow and underflow are avoided. However, the floating-point operations require complex processes, such as alignment, normalization and rounding, which significantly increase the area, power consumption and latency. One solution is to merge or &#x201c;fuse&#x201d; several operations in one floating-point unit to reduce the area, power and latency by sharing the common logic of the operations. In order to improve the floating-point units, several fused units have been introduced: fused multiply-add, fused add-subtract, and fused dot product. Unfortunately, despite these improvements to the floating-point units, such as the fused dot product unit, the current floating-point dot product unit is still expensive in terms of silicon area, power consumption and latency.</p>
<p id="p-0030" num="0029">The principles of the present invention provide a floating-point fused dot product unit whose area and power consumption is reduced and performance is improved by fusing two multiply and one add operation as well as using a two-path addition algorithm as discussed below in connection with <figref idref="DRAWINGS">FIGS. 2-12</figref>. In particular, the floating-point fused two-term dot product unit takes four normalized operands and computes the sum or difference of the two products as shown in the following equation (EQ 1):
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>P=AB&#xb1;CD</i>&#x2003;&#x2003;(1)<?in-line-formulae description="In-line Formulae" end="tail"?>
</p>
<p id="p-0031" num="0030">The floating-point fused two-term dot product unit of the present invention supports all five rounding modes specified in the IEEE-754 standard. Several techniques are employed not only to improve the performance but also to reduce the area and power consumption:</p>
<p id="p-0032" num="0031">(1) For fast alignment, a new alignment scheme is proposed. By swapping the significands and shifting only the smaller significands, the shift amount is reduced so that the area and latency are reduced.</p>
<p id="p-0033" num="0032">(2) Early normalization is applied, which was proposed to reduce the latency of the fused multiply-add unit. By performing the normalization prior to the addition, the length of the significands can be reduced using the sticky logic, reducing the addition size by half. The sign is also determined prior to the addition so that the addition and rounding can be performed together, which significantly reduces the latency.</p>
<p id="p-0034" num="0033">(3) Since the normalization is performed prior to the addition, the Leading Zero Anticipation (LZA) and normalization shift are on the critical path. In order to reduce the latency, a four-input LZA is proposed.</p>
<p id="p-0035" num="0034">(4) The dual-path algorithm is employed to improve the performance. The dual-path logic consists of a far path and a close path. Based on the exponent difference, one of the paths is selected. In the far path logic, massive cancellation does not occur so that LZA and normalization are unnecessary. In the close path logic, only a two bit significand alignment is required so that the large significand shifter is unnecessary. By removing the unnecessary logic in each path, the latency is reduced.</p>
<p id="p-0036" num="0035">(5) In order to increase the throughput, pipelining can be applied. Based on the data flow analysis, the proposed dual-path floating-point fused dot product unit is split into three stages. Since the latencies of the three stages are relatively well balanced, the throughput is improved.</p>
<p id="p-0037" num="0036">The floating-point dot product unit can be simply implemented by using two floating-point multipliers and a floating-point adder. However, such a discrete version requires large area, power consumption and latency. Moreover, since rounding is performed three times (after each of the multiplications and after the addition), the accuracy is decreased. In order to reduce the area and latency, and increase the accuracy, the floating-point fused dot product unit is introduced as shown in <figref idref="DRAWINGS">FIG. 2</figref>.</p>
<p id="p-0038" num="0037"><figref idref="DRAWINGS">FIG. 2</figref> illustrates a traditional floating-point fused dot product unit <b>200</b>. Referring to <figref idref="DRAWINGS">FIG. 2</figref>, floating-point fused dot-product unit <b>200</b> includes a first multiplier tree <b>201</b> and a second multiplier tree <b>202</b>. First multiplier tree <b>201</b> includes a first input <b>203</b> and a second input <b>204</b> to receive first and second operands (A and B). Second multiplier tree <b>202</b> includes a third input <b>205</b> and a fourth input <b>206</b> to receive third and fourth operands (C and D). In a particular embodiment, the first, second, third, and fourth floating-point numbers (A, B, C, and D) are 32-bit floating-point numbers. The first and second multiplier trees <b>201</b>, <b>202</b> are configured to each generate significand pairs related to operands A and B, and C and D, respectively.</p>
<p id="p-0039" num="0038">Floating-point fused dot-product unit <b>200</b> further includes an exponent compare unit <b>207</b> that is coupled to the first, second, third, and fourth inputs <b>203</b>, <b>204</b>, <b>205</b>, <b>206</b> to compare the exponents of the operands and to produce an exponent different signal (identified as &#x201c;exp_diff&#x201d; in <figref idref="DRAWINGS">FIG. 2</figref>) and an exponent compare signal (identified as &#x201c;exp_comp&#x201d; in <figref idref="DRAWINGS">FIG. 2</figref>) to align and sticky component <b>208</b>, which is coupled to the first multiplier tree <b>201</b> to receive a significand pair produced by multiplier tree <b>201</b>. Align and sticky component <b>208</b> is adapted to selectively shift/align the significand pair according to the exponent different signal and the exponent compare signal as well as to perform the sticky logic for the received significand pair (i.e., produce a sticky bit). The aligned significand pair is inputted to an invert block <b>209</b> that provides the inverted aligned significand pair to a four-to-two (4:2) carry save adder (CSA) component <b>210</b>, where the operation of invert block <b>209</b> is selected by a signal (identified as &#x201c;op_sel&#x201d; in <figref idref="DRAWINGS">FIG. 2</figref>) outputted by op select component <b>211</b> that receives the first, second, third, and fourth inputs <b>203</b>, <b>204</b>, <b>205</b>, <b>206</b> to select one of the four operands.</p>
<p id="p-0040" num="0039">As stated above, second multiplier tree <b>202</b> is adapted to produce a significand pair related to the third and fourth floating-point numbers (C and D) and to provide the significand pair to sticky component <b>212</b> to perform the sticky logic for the significand pair which is then inputted to 4:2 CSA component <b>210</b>.</p>
<p id="p-0041" num="0040">4:2 CSA component <b>210</b> receives the inverted aligned significand pair from invert <b>209</b> and the non-inverted significand pair from sticky component <b>212</b> and generates two terms (two significands), which are provided to an adder <b>213</b> and to a Leading Zero Anticipator (LZA) <b>214</b>. Adder <b>213</b> produces a sum of the outputs of 4:2 CSA component <b>210</b> and provides the sum to a complement module <b>215</b>. Complement module <b>215</b> receives the sum from adder <b>213</b> and an indicator <b>216</b> (identified as &#x201c;cout&#x201d; in <figref idref="DRAWINGS">FIG. 2</figref>) from adder <b>213</b> regarding whether or not to complement the sum. Complement module <b>215</b> selectively complements the sum, based on indicator <b>216</b> from adder <b>213</b>, and provides an output to normalize module <b>217</b>. LZA <b>214</b> determines a likely number of leading zeros in the final dot-product based on the values from the 4:2 CSA <b>210</b>, and provides a signal (identified as &#x201c;norm_shift&#x201d; in <figref idref="DRAWINGS">FIG. 2</figref>) to normalize unit <b>217</b> indicative of predicted leading zero information.</p>
<p id="p-0042" num="0041">Normalize module <b>217</b> applies a normalization operation to the output. Normalize module <b>217</b> provides the normalized output to a round module <b>218</b>. Round module <b>218</b> rounds the output based on a signal (identified as &#x201c;sign&#x201d; in <figref idref="DRAWINGS">FIG. 2</figref>) received from sign logic <b>219</b> to produce a result inputted to post-norm module <b>220</b>. Sign logic <b>219</b> generates the sign signal based on the following inputs: outputs of op select <b>211</b>, the exponent compare signal and the significant compare signal (identified as &#x201c;signif_compar&#x201d; in <figref idref="DRAWINGS">FIG. 2</figref> corresponding to the &#x201c;cout&#x201d; signal). The post-norm module <b>220</b> generates the significand of the floating-point number.</p>
<p id="p-0043" num="0042">Furthermore, floating-point fused dot product unit <b>200</b> generates the exponent of the floating-point number from the output of exponent adjust module <b>221</b>, which receives the exponent output (identified as &#x201c;exp&#x201d; in <figref idref="DRAWINGS">FIG. 2</figref>) of exponent compare unit <b>207</b>, the operation select output (identified as &#x201c;op_sel&#x201d; in <figref idref="DRAWINGS">FIG. 2</figref>), the output of adder <b>213</b> (identified as &#x201c;increment&#x201d; in <figref idref="DRAWINGS">FIG. 2</figref>) and the output of LZA <b>214</b> (identified as &#x201c;norm shift&#x201d; in <figref idref="DRAWINGS">FIG. 2</figref>). Exponent adjust module <b>221</b> further outputs exceptions.</p>
<p id="p-0044" num="0043">Additionally, as stated above, sign logic <b>219</b> generates a sign. The sign generated by sign logic <b>219</b>, together with the exponent generated by exponent adjust module <b>221</b> and the significand generated by post-norm module <b>220</b> produce a dot-product result <b>222</b>.</p>
<p id="p-0045" num="0044">As illustrated in <figref idref="DRAWINGS">FIG. 2</figref>, floating-point fused dot product unit <b>200</b> shares the common logic, such as exponent compare, significand addition, exponent adjust and sign logic so that the area, power consumption and latency are reduced. Also, floating-point fused dot product unit <b>200</b> performs only a single rounding so that the accuracy increases.</p>
<p id="p-0046" num="0045">The traditional floating-point fused dot product unit <b>200</b> is based on the floating-point fused multiply-add unit as shown in <figref idref="DRAWINGS">FIG. 2</figref>. The steps to execute the floating-point fused dot product are as follows:</p>
<p id="p-0047" num="0046">(1) Four floating-point numbers are unpacked into their signs, exponents and significands.</p>
<p id="p-0048" num="0047">(2) Two multiplier trees <b>201</b>, <b>202</b> are used to produce two pairs of sums and carries (a total of four numbers). In parallel, two sums of exponents are computed and compared to determine the greater product and the difference is computed. Also, the operation (addition or subtraction) is selected using the sign bits and op code.</p>
<p id="p-0049" num="0048">(3) One sum and carry pair is aligned by align and sticky component <b>208</b> based on the exponent difference result and inverted by invert <b>209</b> if the operation is subtraction. The two pairs of significands are passed to 4:2 reduction tree <b>210</b>. Carry save adders are used to form the reduction tree, which reduces the four significands to two.</p>
<p id="p-0050" num="0049">(4) The two significands are summed and complemented by adder <b>213</b> and complement module <b>215</b> if the sum is negative. LZA <b>214</b> is performed for fast normalization. The significand comparison result is passed to sign logic <b>219</b> so that the sign is determined.</p>
<p id="p-0051" num="0050">(5) Since some of the rounding modes specified in the IEEE-754 standard require the sign (i.e., round to positive and negative infinity), sign logic <b>219</b> must be performed prior to round logic <b>218</b>.</p>
<p id="p-0052" num="0051">(6) The normalized significands are rounded by round module <b>217</b> and post-normalized by post-norm module <b>220</b>. The exponent is adjusted by exponent adjust module <b>221</b> with the addition carry out and the normalization shift amount.</p>
<p id="p-0053" num="0052">The traditional floating-point fused dot product unit <b>200</b> reduces the area, latency and power consumption compared to the discrete floating-point dot product unit. However, it is an initial design so that more optimizations can be applied to improve the performance as discussed below. Specifically, several optimizations are proposed to improve the floating-point fused dot product unit <b>200</b>: 1) a new alignment scheme, 2) early normalization and fast rounding, and 3) a four-input LZA. Such an enhanced floating-point fused dot product unit <b>300</b> is shown in <figref idref="DRAWINGS">FIG. 3</figref>.</p>
<p id="p-0054" num="0053"><figref idref="DRAWINGS">FIG. 3</figref> illustrates an enhanced floating-point fused dot product unit <b>300</b> in accordance with an embodiment of the present invention. Similar components used in the enhanced floating-point fused dot product unit <b>300</b> that were also used in the traditional floating-point fused dot product unit <b>200</b> have the same reference numerals for ease of understanding.</p>
<p id="p-0055" num="0054">Referring to <figref idref="DRAWINGS">FIG. 3</figref>, in comparison to <figref idref="DRAWINGS">FIG. 2</figref>, enhanced floating-point fused dot product unit <b>300</b> includes a significand swap and alignment section <b>301</b>, a partial addition and normalization section <b>302</b> as well as a compound addition and rounding section <b>303</b> which differ from traditional floating-point fused dot product unit <b>200</b>.</p>
<p id="p-0056" num="0055">Significand swap and alignment section <b>301</b> includes two 2:1 multiplexers <b>304</b>A-<b>304</b>B receiving the two significand pairs (pairs of the sum and carry bits) from multiplier trees <b>201</b>, <b>202</b>. The output of multiplexers <b>304</b>A-<b>304</b>B is selected based on the exp_comp signal generated from exponent compare unit <b>207</b>. Multiplexer <b>304</b>A outputs the smaller significand pair of the two significand pairs generated by multiplier trees <b>201</b>, <b>202</b>, whereas, multiplexer <b>304</b>B outputs the greater significand pair of the two significand pairs generated by multiplier trees <b>201</b>, <b>202</b>.</p>
<p id="p-0057" num="0056">The smaller significand pair selected by multiplexer <b>304</b>A is inputted to align and sticky component <b>208</b>, which receives the exponent different signal from exponent compare unit <b>207</b>, to align the smaller significand pair as well as to perform sticky logic for the smaller significand pair. The greater significand pair selected by multiplexer <b>304</b>B is inputted to sticky unit <b>305</b> to perform the sticky logic for the greater significand pair.</p>
<p id="p-0058" num="0057">Partial addition and normalization section <b>302</b> includes invert block <b>306</b>A, <b>306</b>B. Invert block <b>306</b>A receives the output (aligned smaller significand pair) of align and sticky component <b>208</b>; whereas, invert block <b>306</b>B receives the output (greater significand pair) of sticky unit <b>305</b>.</p>
<p id="p-0059" num="0058">Partial addition and normalization section <b>302</b> further includes two four-to-two (4:2) carry save adder (CSA) components <b>307</b>A, <b>307</b>B. 4:2 CSA component <b>307</b>A receives the inverted aligned significand pair and the greater significand pair to produce two significands. Furthermore, CSA component <b>307</b>B receives the inverted greater significand pair and the aligned significand pair to produce two significands. The two significand pairs produced by 4:2 CSA components <b>307</b>A, <b>307</b>B are inputted to a 2:1 multiplexer <b>308</b>, which selects one of these significand pairs based on the &#x201c;signif_comp&#x201d; signal outputted from a significand compare unit <b>309</b>. Significand compare unit <b>309</b> receives as its inputs, the significand pair produced by 4:2 CSA component <b>307</b>A.</p>
<p id="p-0060" num="0059">Furthermore, partial addition and normalization section <b>302</b> includes a Leading Zero Anticipator (LZA) <b>310</b> which receives the aligned smaller significand pair and the greater significand pair from align and sticky component <b>208</b> and sticky unit <b>305</b>. Leading Zero Anticipator (LZA) <b>310</b> obtains a count of the leading zeros which is a shift amount of a normalization (identified as &#x201c;norm_shift&#x201d; in <figref idref="DRAWINGS">FIG. 3</figref>), which is inputted to normalize unit <b>311</b>.</p>
<p id="p-0061" num="0060">Compound addition and rounding section <b>303</b> includes an adder <b>312</b> coupled to normalize unit <b>311</b>, where adder <b>312</b> is configured to add the most significant bits of the normalized significands. Furthermore, compound addition and rounding section <b>303</b> includes a sticky and round module <b>313</b> coupled to normalize unit <b>311</b>, where sticky and round module <b>313</b> is configured to generate round, guard and sticky bits using the least significant bits of the normalized significands. Adder <b>312</b> outputs the sum and sum+1 bits to the round select unit <b>314</b> (identified as &#x201c;Rnd Select&#x201d; in <figref idref="DRAWINGS">FIG. 3</figref>), whose output is selected from the output of sticky and round module <b>313</b> (identified as &#x201c;md_up&#x201d;) which is provided to post-norm module <b>220</b>. Adder <b>312</b> further outputs the carry-out bit to exponent adjust module <b>221</b>.</p>
<p id="p-0062" num="0061">The operation of the significand swap and alignment section <b>301</b>, the partial addition and normalization section <b>302</b> as well as the operation of the compound addition and rounding section <b>303</b> will now be discussed below.</p>
<p id="p-0063" num="0062">As discussed above, one of the optimizations to improve the floating-point fused dot product unit <b>200</b> (<figref idref="DRAWINGS">FIG. 2</figref>) is a new alignment scheme. The traditional floating-point fused dot product unit <b>200</b> performs the significand alignment on a single side significand pair (sum and carry) as shown in <figref idref="DRAWINGS">FIG. 4A</figref>. The one way alignment requires a large shift amount, which increases the latency of the critical path. In order to reduce the latency of the alignment, the new alignment method of enhanced floating-point fused dot product unit <b>300</b> (<figref idref="DRAWINGS">FIG. 3</figref>) swaps the significands to shift the smaller significand pair (align and sticky component <b>208</b>) so that the shift amount is reduced as shown in <figref idref="DRAWINGS">FIG. 4B</figref> in accordance with an embodiment of the present invention. Also, the sticky logic (align and sticky component <b>208</b>, sticky unit <b>305</b>) is performed to generate the round, guard and sticky bits. If the exponent difference is larger than 2, massive cancellation does not occur so that the discarded bits are not affected by the normalization. If the exponent difference is 2 or less, the shifted bits are maintained by the round, guard and sticky bits. For larger shifts, the LSBs under the sticky bit can be discarded so that the length of the significand pairs is reduced. Due to the reduced shift amount and sticky logic, smaller significand pairs are generated compared to the traditional alignment, resulting in reduced area and power consumption for the following logic.</p>
<p id="p-0064" num="0063">Referring again to <figref idref="DRAWINGS">FIG. 3</figref>, in conjunction with <figref idref="DRAWINGS">FIG. 2</figref>, as also discussed above, another optimization to improve the floating-point fused dot product unit <b>200</b> is through early normalization and fast rounding. If the operation is subtraction, the significand pairs are inverted by inverters <b>306</b>A, <b>306</b>B. The inverted and non-inverted significand pairs are passed to each reduction tree (4:2 CSA components <b>307</b>A, <b>307</b>B) and reduced to two significands. The two significands are compared by significand compare unit <b>309</b> and the comparison result (&#x201c;signif_comp&#x201d;) selects the one that is not to be complemented after the significand addition. Also, the significand comparison result is used in sign logic <b>219</b>.</p>
<p id="p-0065" num="0064">The reduced significand pair is passed to normalization unit <b>311</b>. The traditional floating-point fused dot product unit <b>200</b> performs the normalization after the significand addition, which requires a large adder and compliment followed by the round logic. For fast significand addition and rounding, early normalization is applied. By normalizing the significands prior to the significand addition, the length of the adder can be reduced up to the length of the final significand and the round logic can be performed in parallel. <figref idref="DRAWINGS">FIG. 5</figref> shows the early normalization and sticky logic in accordance with an embodiment of the present invention.</p>
<p id="p-0066" num="0065">Referring to <figref idref="DRAWINGS">FIG. 5</figref>, in conjunction with <figref idref="DRAWINGS">FIGS. 2-3</figref>, the MSBs of the normalized significands are passed to adder <b>312</b> and the LSBs are passed to sticky and round logic <b>313</b>. The sticky logic is performed again to generate round, guard and sticky bits. The 1<sup>st </sup>and 2<sup>nd </sup>bits under the LSB become the guard and round bits and the sticky bit is set if at least one bit of the rest of the LSBs is 1, which can be implemented with OR trees. The four bits including the LSB, guard, round and sticky bits are used for the round logic to simplify the round logic and the rest of the LSBs are discarded.</p>
<p id="p-0067" num="0066">Since some of the round modes specified in the IEEE-754 standard require knowing the sign (i.e., round to positive and negative infinity), sign logic <b>219</b> must be performed prior to the round logic. The significand comparison result (signif_comp) from the partial addition is used for sign logic <b>219</b>, if the exponent difference is zero. The sign bit is passed to the final result as well as to round module <b>313</b>. For fast rounding, compound addition is used, which produces the rounded and unrounded sums together and round logic <b>314</b> selects the correct result. By performing the significand addition and rounding together, the latency is significantly reduced.</p>
<p id="p-0068" num="0067">As further discussed above, another optimization to improve the floating-point fused dot product unit <b>200</b> is by having a four-input LZA <b>310</b> in the partial addition and normalization section <b>302</b>.</p>
<p id="p-0069" num="0068">Since the normalization is performed prior to the significand addition, LZA <b>310</b> and normalization is placed on the critical path. To use the traditional two-input LZA <b>214</b> for the floating-point fused dot product unit <b>200</b>, a 4:2 reduction tree is required prior to LZA <b>214</b>. The four-input LZA <b>310</b> of enhanced floating-point fused dot product unit <b>300</b>, however, reduces the overhead of the reduction tree by encoding the four inputs at once.</p>
<p id="p-0070" num="0069">Four-input LZA <b>310</b> can be implemented by extending the traditional two-input LZA <b>214</b>. In order to encode four inputs, the W vector is generated with bitwise operations as shown in Equation (EQ 2):
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>W=A+B&#x2212;C&#x2212;D w</i><sub>i</sub><i>=a</i><sub>i</sub><i>+b</i><sub>i</sub><i>&#x2212;c</i><sub>i</sub><i>&#x2212;d</i><sub>i</sub><i>,w</i><sub>i</sub><i>E</i>(&#x2212;2,&#x2212;1,0,1,2),&#x2003;&#x2003;(2)<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
where a<sub>i</sub>, b<sub>i</sub>, c<sub>i</sub>, d<sub>i </sub>are the i<sup>th </sup>bits of the four significands. The W vector can be represented by one of the five elements, <o ostyle="single">2</o><sub>i</sub>, <o ostyle="single">1</o><sub>i</sub>, 0<sub>i</sub>, 1<sub>i </sub>and 2<sub>i </sub>indicating w<sub>i </sub>equals to &#x2212;2, &#x2212;1, 0, 1 and 2, respectively. The W vector is pre-encoded into three symbols, g, e and s as shown in Equation (EQ 3):
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>g</i><sub>i</sub>=1 if <i>w</i><sub>i</sub>=1<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>e</i><sub>i</sub>=1 if <i>w</i><sub>i</sub>=0<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>s</i><sub>i</sub>=1 if <i>w</i><sub>i</sub>= <o ostyle="single">1</o>&#x2003;&#x2003;(3)<?in-line-formulae description="In-line Formulae" end="tail"?>
</p>
<p id="p-0071" num="0070">To handle the cases of &#x2212;2 and 2, two consecutive bits are involved for pre-encoding. For example, the bit pattern 0<sub>i</sub>2<sub>i+1 </sub>and are considered as 1<sub>i</sub> <o ostyle="single">2</o><sub>i+1 </sub>are considered as 1<sub>i</sub>0<sub>i+1 </sub>and 0<sub>i</sub>0<sub>i+1</sub>, respectively. Thus, the three symbols are represented as shown in Equation (EQ 4):
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>g</i><sub>i</sub>=2<sub>i</sub>(2<sub>i+1</sub>= <o ostyle="single">2</o><sub>i+1</sub>)+1<sub>i</sub>(1<sub>i+1</sub>+0<sub>i+1</sub>+ <o ostyle="single">1</o><sub>i+1</sub>)+0<sub>i</sub>2<sub>i+1 </sub><?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>e</i><sub>i</sub>=2<sub>i</sub>(1<sub>i+1</sub>+0<sub>i+1</sub>+ <o ostyle="single">1</o><sub>i+1</sub>)+1<sub>i</sub>(2<sub>i+1</sub>+ <o ostyle="single">2</o><sub>i+1</sub>)+0<sub>i</sub>(1<sub>i+1</sub>+0<sub>i+1</sub>+ <o ostyle="single">1</o><sub>i+1</sub>)+ <o ostyle="single">1</o><sub>i</sub>(2<sub>i+1</sub>+ <o ostyle="single">2</o><sub>i+1</sub>)+ <o ostyle="single">2</o><sub>i</sub>(1<sub>i+1</sub>+0<sub>i+1</sub>+ <o ostyle="single">1</o><sub>i+1</sub>)<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>s</i><sub>i</sub>=0<sub>i</sub> <o ostyle="single">2</o><sub>i+1</sub>+ <o ostyle="single">1</o><sub>i</sub>(1<sub>i+1</sub>+0<sub>i+1</sub>+ <o ostyle="single">1</o><sub>i+1</sub>)+ <o ostyle="single">2</o><sub>i</sub>(2<sub>i+1</sub>+ <o ostyle="single">2</o><sub>i+1</sub>)&#x2003;&#x2003;(4)<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
The pre-encoding patterns that terminate the leading zeros and the corresponding leading zeros for W&#x3e;0 are shown in the table of <figref idref="DRAWINGS">FIG. 6</figref> in accordance with an embodiment of the present invention. Referring to <figref idref="DRAWINGS">FIG. 6</figref>, in conjunction with <figref idref="DRAWINGS">FIGS. 2-3</figref>, the number of leading zeros is computed with the three symbols as shown in Equation (EQ 5):
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>f</i><sub>i</sub>(pos)=<i>e</i><sub>i&#x2212;1</sub><i>g</i><sub>i</sub><i> <o ostyle="single">s</o></i><sub>i+1</sub><i>+&#x113;</i><sub>i&#x2212;1</sub><i>s</i><sub>i</sub><i> <o ostyle="single">s</o></i><sub>i+1 </sub>for <i>W&#x3e;</i>0.&#x2003;&#x2003;(5)<?in-line-formulae description="In-line Formulae" end="tail"?>
</p>
<p id="p-0072" num="0071">Similarly, for the bit patterns when W&#x3c;0,
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>f</i><sub>i</sub>(neg)=<i>e</i><sub>i&#x2212;1</sub><i>s</i><sub>i</sub><i> <o ostyle="single">g</o></i><sub>i+1</sub><i>+&#x113;</i><sub>i&#x2212;1</sub><i>g</i><sub>i</sub><i> <o ostyle="single">g</o></i><sub>i+1 </sub>for <i>W&#x3c;</i>0.&#x2003;&#x2003;(6)<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
Combining two equations, the F vector is generated as
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>f</i><sub>i</sub><i>=s</i><sub>i&#x2212;1</sub>(<i>g</i><sub>i</sub><i> <o ostyle="single">s</o></i><sub>i+1</sub><i>+s</i><sub>i</sub><i> <o ostyle="single">g</o></i><sub>i+1</sub>)+<i>&#x113;</i><sub>i&#x2212;1</sub>(<i>s</i><sub>i</sub><i> <o ostyle="single">s</o></i><sub>i+1</sub><i>+g</i><sub>i</sub><i> <o ostyle="single">g</o></i><sub>i+1</sub>).&#x2003;&#x2003;(7)<?in-line-formulae description="In-line Formulae" end="tail"?>
</p>
<p id="p-0073" num="0072">This is essentially the same equation as that of the traditional two-input LZA <b>214</b>. The F vector is encoded with the Leading Zero Detector (LZD) to obtain the number of leading zeros, which is the shift amount of the normalization. For fast normalization, the MSBs of the shift amount are generated so that the LZD tree and the normalization shifter are overlapped.</p>
<p id="p-0074" num="0073">Like most of the two-input LZAs that are inexact due to a possible 1 bit error, the proposed four-input LZA <b>310</b> also requires correction logic. For fast error detection and correction, concurrent error correction logic can be used. In the cases of the bit patterns<sup>1 </sup>0<sup>k</sup>10<sup>l</sup> <o ostyle="single">1</o> and 0<sup>k</sup>1 <o ostyle="single">1</o>0<sup>l</sup> <o ostyle="single">1</o> for W&#x3e;0 and 0<sup>k</sup> <o ostyle="single">1</o>0<sup>l</sup>1 and 0<sup>k</sup> <o ostyle="single">1</o>10<sup>l</sup>1 for W&#x3c;0, correction is performed by adding 1. <sup>1 </sup>The notation x<sup>k </sup>denotes a bit string of k consecutive bits, where x&#x3b5;( <o ostyle="single">1</o>, 0, 1) and k&#x2267;0.</p>
<p id="p-0075" num="0074">In order to achieve a high speed floating-point fused dot product unit, the dual-path approach is employed as discussed below. The dual-path floating-point fused dot product unit <b>700</b> consists of a far path and a close path as shown in <figref idref="DRAWINGS">FIG. 7</figref> in accordance with an embodiment of the present invention. Referring to <figref idref="DRAWINGS">FIG. 7</figref>, in comparison to <figref idref="DRAWINGS">FIG. 3</figref>, dual-path floating-point fused dot product unit <b>700</b> includes a far path <b>701</b> and a close path <b>702</b>, where far path <b>701</b> includes the following operations: significand swapping <b>703</b>, align and sticky <b>704</b> and invert and reduction tree <b>705</b> (shown in <figref idref="DRAWINGS">FIG. 8</figref>) performed by a 4:2 CSA <b>706</b> as discussed in further detail below in connection with <figref idref="DRAWINGS">FIG. 8</figref>. Furthermore, close path <b>702</b> includes the following operations: significand alignment <b>707</b> and a reduction tree and normalization <b>708</b> as discussed in further detail below in connection with <figref idref="DRAWINGS">FIG. 9</figref>.</p>
<p id="p-0076" num="0075">The outputs of far path <b>701</b> and close path <b>702</b> are inputted to a path select module <b>709</b> which selects the path (far path or close path) based on a signal (identified as &#x201c;path_set&#x201d; in <figref idref="DRAWINGS">FIG. 7</figref>) from exponent compare unit <b>207</b>. The path_set signal is further inputted to exponent adjust module <b>221</b>. Adder <b>312</b> is coupled to path select module <b>709</b> and adds the most significant bits of either the normalized significands (produced by normalize unit <b>311</b>) or the significands produced by 4:2 CSA <b>706</b>. Furthermore, sticky and round module <b>313</b> is coupled to path select module <b>709</b> and generates the round, ground and sticky bits using the least significant bits of either the normalized significands (produced by normalize unit <b>311</b>) or the significands produced by 4:2 CSA <b>706</b>.</p>
<p id="p-0077" num="0076">As illustrated in <figref idref="DRAWINGS">FIG. 7</figref>, the path is determined based on the exponent difference (exp_diff). Far path <b>701</b> skips the LZA and normalization and close path <b>702</b> skips the significand swap and alignment. Since these two processes are the bottlenecks of the traditional floating-point fused dot product unit, the two path process improves the performance.</p>
<p id="p-0078" num="0077">A description of the far path logic <b>701</b> will now be discussed in connection with <figref idref="DRAWINGS">FIG. 8</figref>. <figref idref="DRAWINGS">FIG. 8</figref> illustrates far path logic <b>701</b> for dual-path floating-point fused dot product unit <b>700</b> in accordance with an embodiment of the present invention.</p>
<p id="p-0079" num="0078">Referring to <figref idref="DRAWINGS">FIG. 8</figref>, in conjunction with <figref idref="DRAWINGS">FIG. 7</figref>, far path logic <b>701</b> for the dual-path floating-point fused dot product unit <b>700</b> can be implemented as the significand swap and alignment part <b>301</b> of the enhanced floating-point fused dot product unit <b>300</b> as shown in <figref idref="DRAWINGS">FIG. 8</figref>. Far path <b>701</b> is selected if the exponent difference is larger than 2 or the operation is addition. Since the addition of four significands generates a carry out of up to 3, the exponent difference margin for far path <b>701</b> is two bits, which is 1 bit larger than that of the general dual-path floating-point adder. In this case, massive cancellation during the subtraction does not occur so that the LZA and normalization are unnecessary. Two multiplexers <b>304</b>A, <b>304</b>B are used to swap the significand pairs so that only the smaller significand pair is aligned, which reduces the shift amount. The aligned significand pair is inverted by invert <b>306</b>A if the operation is subtraction. The sticky logic is performed by align and sticky component <b>208</b> and sticky unit <b>305</b> for both significand pairs to reduce the significand length. The significand pair for far path <b>701</b> is generated by the reduction tree (4:2 CSA <b>706</b>), which reduces the four significands to two.</p>
<p id="p-0080" num="0079">A description of close path logic <b>702</b> will now be discussed in connection with <figref idref="DRAWINGS">FIG. 9</figref>. <figref idref="DRAWINGS">FIG. 9</figref> illustrates close path logic <b>702</b> for the dual-path floating-point fused dot product unit <b>700</b> in accordance with an embodiment of the present invention.</p>
<p id="p-0081" num="0080">Referring to <figref idref="DRAWINGS">FIG. 9</figref>, in conjunction with <figref idref="DRAWINGS">FIG. 7</figref>, close path <b>702</b> is selected if the exponent difference is less than 3 and the operation is subtraction. In this case, only a two bit shifter is required for the significand alignment. The significand pairs are aligned by align unit <b>901</b> as</p>
<p id="p-0082" num="0081">
<maths id="MATH-US-00001" num="00001">
<math overflow="scroll">
<mtable>
  <mtr>
    <mtd>
      <mrow>
        <msub>
          <mi>AB</mi>
          <mi>aligned</mi>
        </msub>
        <mo>=</mo>
        <mrow>
          <mo>{</mo>
          <mtable>
            <mtr>
              <mtd>
                <mrow>
                  <mo>(</mo>
                  <mrow>
                    <msub>
                      <mi>AB</mi>
                      <mi>signif</mi>
                    </msub>
                    <mo>,</mo>
                    <mn>00</mn>
                  </mrow>
                  <mo>)</mo>
                </mrow>
              </mtd>
              <mtd>
                <mrow>
                  <mrow>
                    <mrow>
                      <mrow>
                        <mi>if</mi>
                        <mo>&#x2062;</mo>
                        <mstyle>
                          <mspace width="0.8em" height="0.8ex"/>
                        </mstyle>
                        <mo>&#x2062;</mo>
                        <msub>
                          <mi>AB</mi>
                          <mi>exp</mi>
                        </msub>
                      </mrow>
                      <mo>-</mo>
                      <msub>
                        <mi>CD</mi>
                        <mi>exp</mi>
                      </msub>
                    </mrow>
                    <mo>=</mo>
                    <mn>0</mn>
                  </mrow>
                  <mo>,</mo>
                  <mn>1</mn>
                  <mo>,</mo>
                  <mn>2</mn>
                </mrow>
              </mtd>
            </mtr>
            <mtr>
              <mtd>
                <mrow>
                  <mo>(</mo>
                  <mrow>
                    <mn>0</mn>
                    <mo>,</mo>
                    <msub>
                      <mi>AB</mi>
                      <mi>signif</mi>
                    </msub>
                    <mo>,</mo>
                    <mn>0</mn>
                  </mrow>
                  <mo>)</mo>
                </mrow>
              </mtd>
              <mtd>
                <mrow>
                  <mrow>
                    <mrow>
                      <mi>if</mi>
                      <mo>&#x2062;</mo>
                      <mstyle>
                        <mspace width="0.8em" height="0.8ex"/>
                      </mstyle>
                      <mo>&#x2062;</mo>
                      <msub>
                        <mi>AB</mi>
                        <mi>exp</mi>
                      </msub>
                    </mrow>
                    <mo>-</mo>
                    <msub>
                      <mi>CD</mi>
                      <mi>exp</mi>
                    </msub>
                  </mrow>
                  <mo>=</mo>
                  <mrow>
                    <mo>-</mo>
                    <mn>1</mn>
                  </mrow>
                </mrow>
              </mtd>
            </mtr>
            <mtr>
              <mtd>
                <mrow>
                  <mo>(</mo>
                  <mrow>
                    <mn>00</mn>
                    <mo>,</mo>
                    <msub>
                      <mi>AB</mi>
                      <mi>signif</mi>
                    </msub>
                  </mrow>
                  <mo>)</mo>
                </mrow>
              </mtd>
              <mtd>
                <mrow>
                  <mrow>
                    <mrow>
                      <mi>if</mi>
                      <mo>&#x2062;</mo>
                      <mstyle>
                        <mspace width="0.8em" height="0.8ex"/>
                      </mstyle>
                      <mo>&#x2062;</mo>
                      <msub>
                        <mi>AB</mi>
                        <mi>exp</mi>
                      </msub>
                    </mrow>
                    <mo>-</mo>
                    <msub>
                      <mi>CD</mi>
                      <mi>exp</mi>
                    </msub>
                  </mrow>
                  <mo>=</mo>
                  <mrow>
                    <mo>-</mo>
                    <mn>2</mn>
                  </mrow>
                </mrow>
              </mtd>
            </mtr>
          </mtable>
        </mrow>
      </mrow>
    </mtd>
    <mtd>
      <mrow>
        <mo>(</mo>
        <mn>8</mn>
        <mo>)</mo>
      </mrow>
    </mtd>
  </mtr>
  <mtr>
    <mtd>
      <mrow>
        <msub>
          <mi>CD</mi>
          <mi>aligned</mi>
        </msub>
        <mo>=</mo>
        <mrow>
          <mo>{</mo>
          <mtable>
            <mtr>
              <mtd>
                <mrow>
                  <mo>(</mo>
                  <mrow>
                    <msub>
                      <mi>CD</mi>
                      <mi>signif</mi>
                    </msub>
                    <mo>,</mo>
                    <mn>00</mn>
                  </mrow>
                  <mo>)</mo>
                </mrow>
              </mtd>
              <mtd>
                <mrow>
                  <mrow>
                    <mrow>
                      <mi>if</mi>
                      <mo>&#x2062;</mo>
                      <mstyle>
                        <mspace width="0.8em" height="0.8ex"/>
                      </mstyle>
                      <mo>&#x2062;</mo>
                      <msub>
                        <mi>AB</mi>
                        <mi>exp</mi>
                      </msub>
                    </mrow>
                    <mo>-</mo>
                    <msub>
                      <mi>CD</mi>
                      <mi>exp</mi>
                    </msub>
                  </mrow>
                  <mo>=</mo>
                  <mn>2</mn>
                </mrow>
              </mtd>
            </mtr>
            <mtr>
              <mtd>
                <mrow>
                  <mo>(</mo>
                  <mrow>
                    <mn>0</mn>
                    <mo>,</mo>
                    <msub>
                      <mi>CD</mi>
                      <mi>signif</mi>
                    </msub>
                    <mo>,</mo>
                    <mn>0</mn>
                  </mrow>
                  <mo>)</mo>
                </mrow>
              </mtd>
              <mtd>
                <mrow>
                  <mrow>
                    <mrow>
                      <mi>if</mi>
                      <mo>&#x2062;</mo>
                      <mstyle>
                        <mspace width="0.8em" height="0.8ex"/>
                      </mstyle>
                      <mo>&#x2062;</mo>
                      <msub>
                        <mi>AB</mi>
                        <mi>exp</mi>
                      </msub>
                    </mrow>
                    <mo>-</mo>
                    <msub>
                      <mi>CD</mi>
                      <mi>exp</mi>
                    </msub>
                  </mrow>
                  <mo>=</mo>
                  <mn>1</mn>
                </mrow>
              </mtd>
            </mtr>
            <mtr>
              <mtd>
                <mrow>
                  <mo>(</mo>
                  <mrow>
                    <mn>00</mn>
                    <mo>,</mo>
                    <msub>
                      <mi>CD</mi>
                      <mi>signif</mi>
                    </msub>
                  </mrow>
                  <mo>)</mo>
                </mrow>
              </mtd>
              <mtd>
                <mrow>
                  <mrow>
                    <mrow>
                      <mrow>
                        <mi>if</mi>
                        <mo>&#x2062;</mo>
                        <mstyle>
                          <mspace width="0.8em" height="0.8ex"/>
                        </mstyle>
                        <mo>&#x2062;</mo>
                        <msub>
                          <mi>AB</mi>
                          <mi>exp</mi>
                        </msub>
                      </mrow>
                      <mo>-</mo>
                      <msub>
                        <mi>CD</mi>
                        <mi>exp</mi>
                      </msub>
                    </mrow>
                    <mo>=</mo>
                    <mn>0</mn>
                  </mrow>
                  <mo>,</mo>
                  <mrow>
                    <mo>-</mo>
                    <mn>1</mn>
                  </mrow>
                  <mo>,</mo>
                  <mrow>
                    <mo>-</mo>
                    <mn>2.</mn>
                  </mrow>
                </mrow>
              </mtd>
            </mtr>
          </mtable>
        </mrow>
      </mrow>
    </mtd>
    <mtd>
      <mrow>
        <mo>(</mo>
        <mn>9</mn>
        <mo>)</mo>
      </mrow>
    </mtd>
  </mtr>
</mtable>
</math>
</maths>
<br/>
The rest of the close path logic can be implemented as the partial addition and normalization part <b>302</b> of the enhanced floating-point fused dot product unit <b>300</b> (<figref idref="DRAWINGS">FIG. 3</figref>) as shown in <figref idref="DRAWINGS">FIG. 9</figref>.
</p>
<p id="p-0083" num="0082">Referring to <figref idref="DRAWINGS">FIGS. 7-9</figref>, among the two significand pairs from far path <b>701</b> and close path <b>702</b>, a significand pair is selected based on the exponent difference and the operation. The selected significand pair is passed to the significand addition and round logic. The significand addition and round logic can be implemented similar to that of the enhanced floating-point fused dot product unit <b>300</b> which was previously discussed. The following discusses the rest of the sub-logic for the floating-point dual-path fused dot product unit <b>700</b>.</p>
<p id="p-0084" num="0083">The operation select logic generates the op_sel bit, which determines if the significands are inverted for the significand subtraction. Using the four sign bits of the operands and the input operator, the operation is selected as</p>
<p id="p-0085" num="0084">
<maths id="MATH-US-00002" num="00002">
<math overflow="scroll">
<mtable>
  <mtr>
    <mtd>
      <mrow>
        <mi>op_sel</mi>
        <mo>=</mo>
        <mrow>
          <mo>{</mo>
          <mtable>
            <mtr>
              <mtd>
                <munder>
                  <mrow>
                    <msub>
                      <mi>AB</mi>
                      <mi>sign</mi>
                    </msub>
                    <mo>&#x2295;</mo>
                    <msub>
                      <mi>CD</mi>
                      <mi>sign</mi>
                    </msub>
                  </mrow>
                  <mi>_</mi>
                </munder>
              </mtd>
              <mtd>
                <mrow>
                  <mrow>
                    <mi>if</mi>
                    <mo>&#x2062;</mo>
                    <mstyle>
                      <mspace width="0.8em" height="0.8ex"/>
                    </mstyle>
                    <mo>&#x2062;</mo>
                    <mi>op</mi>
                  </mrow>
                  <mo>=</mo>
                  <mi>add</mi>
                </mrow>
              </mtd>
            </mtr>
            <mtr>
              <mtd>
                <mrow>
                  <msub>
                    <mi>AB</mi>
                    <mi>sign</mi>
                  </msub>
                  <mo>&#x2295;</mo>
                  <msub>
                    <mi>CD</mi>
                    <mi>sign</mi>
                  </msub>
                </mrow>
              </mtd>
              <mtd>
                <mrow>
                  <mrow>
                    <mrow>
                      <mi>if</mi>
                      <mo>&#x2062;</mo>
                      <mstyle>
                        <mspace width="0.8em" height="0.8ex"/>
                      </mstyle>
                      <mo>&#x2062;</mo>
                      <mi>op</mi>
                    </mrow>
                    <mo>=</mo>
                    <mi>sub</mi>
                  </mrow>
                  <mo>,</mo>
                </mrow>
              </mtd>
            </mtr>
          </mtable>
        </mrow>
      </mrow>
    </mtd>
    <mtd>
      <mrow>
        <mo>(</mo>
        <mn>10</mn>
        <mo>)</mo>
      </mrow>
    </mtd>
  </mtr>
</mtable>
</math>
</maths>
<br/>
where AB<sub>sign </sub>is A<sub>sign</sub>&#x2295;B<sub>sign </sub>and CD<sub>sign </sub>is C<sub>sign</sub>&#x2295;D<sub>sign</sub>.
</p>
<p id="p-0086" num="0085">The exponent compare and path select logic <b>1000</b> (combination of exponent compare <b>207</b> and path select logic <b>709</b>) is shown in <figref idref="DRAWINGS">FIG. 10</figref> in accordance with an embodiment of the present invention. Referring to <figref idref="DRAWINGS">FIG. 10</figref>, in conjunction with <figref idref="DRAWINGS">FIGS. 7-9</figref>, the exponent compare and path select logic <b>1000</b> include adder <b>1001</b>A configured to receive as inputs the first and second exponents (A and B) corresponding to the first and second operands A <b>203</b> and B <b>204</b>, respectively. Furthermore, the exponent compare and path select logic <b>1000</b> includes adder <b>1001</b>B configured to receive as inputs the third and fourth exponents (C and D) corresponding to the third and fourth operands C <b>205</b> and D <b>206</b>, respectively. The sums (identified as &#x201c;AB_exp&#x201d; and &#x201c;CD_exp&#x201d; in <figref idref="DRAWINGS">FIG. 10</figref>) provided by adders <b>1001</b>A, <b>1001</b>B, respectively, are provided to subtractor <b>1002</b>. The output of subtractor <b>1002</b> (difference between the sums provided by adders <b>1001</b>A, <b>1001</b>B) is outputted to a 2:1 multiplexer <b>1003</b> to be used as its selector. Multiplexer <b>1003</b> receives the sums provided by adders <b>1001</b>A, <b>1001</b>B and selects one of the sums based on the output of subtractor <b>1002</b> which is inputted to subtractor <b>1004</b>, which outputs the difference (identified as &#x201c;exp&#x201d; in <figref idref="DRAWINGS">FIG. 10</figref>) between a bias input and the output of multiplexer <b>1003</b>. Furthermore, the output of subtractor <b>1002</b> is the &#x201c;cout&#x201d; signal becoming the &#x201c;exp_comp&#x201d; signal. Additionally, the difference output (identified as &#x201c;diff&#x201d; in <figref idref="DRAWINGS">FIG. 10</figref>) from subtractor <b>1002</b> is inputted to invert block <b>1005</b> which outputs the exponent different signal (identified as &#x201c;exp_diff&#x201d; in <figref idref="DRAWINGS">FIG. 10</figref>) using the &#x201c;cout&#x201d; signal. The exponent compare and path select logic <b>1000</b> further includes path select <b>709</b> receiving the difference output from subtractor <b>1002</b> as well as the &#x201c;op_sel&#x201d; signal to generate a signal (identified as &#x201c;path_sel&#x201d; in <figref idref="DRAWINGS">FIG. 10</figref>) selecting the path (i.e., selecting far path <b>701</b> or close path <b>702</b>). A discussion of the operation of exponent compare and path select logic <b>1000</b> is provided below.</p>
<p id="p-0087" num="0086">For the exponent process, two pairs of exponents are summed by adders <b>1001</b>A, <b>1001</b>B and a greater exponent sum is selected by multiplexer <b>1003</b>. Then, the bias is subtracted for the exponent result by subtractor <b>1004</b>. The two exponent sums are compared to determine the greater one. The exponent comparison result is used for the significand swapping and the exponent difference is used for the alignment. Also, the path selection bit is determined by path select <b>709</b> based on the exponent difference and the operation as</p>
<p id="p-0088" num="0087">
<maths id="MATH-US-00003" num="00003">
<math overflow="scroll">
<mtable>
  <mtr>
    <mtd>
      <mrow>
        <mi>path_sel</mi>
        <mo>=</mo>
        <mrow>
          <mo>{</mo>
          <mtable>
            <mtr>
              <mtd>
                <mn>1</mn>
              </mtd>
              <mtd>
                <mrow>
                  <mrow>
                    <mrow>
                      <mi>if</mi>
                      <mo>&#x2062;</mo>
                      <mstyle>
                        <mspace width="0.8em" height="0.8ex"/>
                      </mstyle>
                      <mo>&#x2062;</mo>
                      <mrow>
                        <mo>&#xf603;</mo>
                        <mrow>
                          <msub>
                            <mi>AB</mi>
                            <mi>exp</mi>
                          </msub>
                          <mo>-</mo>
                          <msub>
                            <mi>CD</mi>
                            <mi>exp</mi>
                          </msub>
                        </mrow>
                        <mo>&#xf604;</mo>
                      </mrow>
                    </mrow>
                    <mo>&#x2264;</mo>
                    <mrow>
                      <mn>2</mn>
                      <mo>&#x2062;</mo>
                      <mstyle>
                        <mspace width="0.8em" height="0.8ex"/>
                      </mstyle>
                      <mo>&#x2062;</mo>
                      <mi>or</mi>
                      <mo>&#x2062;</mo>
                      <mstyle>
                        <mspace width="0.8em" height="0.8ex"/>
                      </mstyle>
                      <mo>&#x2062;</mo>
                      <mi>op_sel</mi>
                    </mrow>
                  </mrow>
                  <mo>=</mo>
                  <mn>0</mn>
                </mrow>
              </mtd>
            </mtr>
            <mtr>
              <mtd>
                <mn>0</mn>
              </mtd>
              <mtd>
                <mrow>
                  <mi>otherwise</mi>
                  <mo>.</mo>
                </mrow>
              </mtd>
            </mtr>
          </mtable>
        </mrow>
      </mrow>
    </mtd>
    <mtd>
      <mrow>
        <mo>(</mo>
        <mn>11</mn>
        <mo>)</mo>
      </mrow>
    </mtd>
  </mtr>
</mtable>
</math>
</maths>
</p>
<p id="p-0089" num="0088">The exponent adjust and selection logic <b>1100</b> is shown in <figref idref="DRAWINGS">FIG. 11</figref> in accordance with an embodiment of the present invention. Referring to <figref idref="DRAWINGS">FIG. 11</figref>, in conjunction with <figref idref="DRAWINGS">FIGS. 7-10</figref>, exponent adjust and selection logic <b>1100</b> includes an adder <b>1101</b> receiving the &#x201c;exp&#x201d; and &#x201c;carry_out&#x201d; signals as inputs, a subtractor <b>1102</b>A receiving the &#x201c;exp&#x201d; and &#x201c;carry_out&#x201d; signals as inputs, and a subtractor <b>1102</b>B receiving the &#x201c;exp&#x201d; and &#x201c;norm_shift&#x201d; signals as inputs. The sum provided by adder <b>1101</b> and the difference provided by subtractor <b>1102</b>A are inputted to 2:1 multiplexer <b>1103</b> whose output is selected based on the &#x201c;op_sel&#x201d; signal. The output of multiplexer <b>1103</b> is inputted to another 2:1 multiplexer <b>1104</b>, which receives the difference provided by subtractor <b>1102</b>B. The output of multiplexer <b>1104</b> (identified as &#x201c;final_exp&#x201d; in <figref idref="DRAWINGS">FIG. 11</figref>) is selected based on the &#x201c;path_sel&#x201d; signal.</p>
<p id="p-0090" num="0089">Exponent adjust and selection logic <b>1100</b> further includes an exception logic unit <b>1105</b> that receives as inputs, the sum generated by adder <b>1101</b> and the differences generated by subtractors <b>1102</b>A, <b>1102</b>B, and generates exceptions based on the value of the &#x201c;op_sel&#x201d; and &#x201c;path_sel&#x201d; signals. A discussion of the operation of adjust and selection logic <b>1100</b> is provided below.</p>
<p id="p-0091" num="0090"><figref idref="DRAWINGS">FIG. 11</figref> shows the exponent adjust logic, which adjusts the exponent by adding or subtracting the carry out from the significand addition. Since the four significands generate a carry out of up to 3, two carry out bits are used for the adjustment. The normalization shift amount is subtracted in case of the massive cancellation. Using the selection bits and the carry outs from the addition and subtractions, the exceptions are detected. The three exception cases specified in the IEEE-754 standard are detected as</p>
<p id="p-0092" num="0091">
<maths id="MATH-US-00004" num="00004">
<math overflow="scroll">
<mtable>
  <mtr>
    <mtd>
      <mrow>
        <mi>overflow</mi>
        <mo>=</mo>
        <mrow>
          <mo>{</mo>
          <mtable>
            <mtr>
              <mtd>
                <mn>1</mn>
              </mtd>
              <mtd>
                <mrow>
                  <mrow>
                    <mi>if</mi>
                    <mo>&#x2062;</mo>
                    <mstyle>
                      <mspace width="0.8em" height="0.8ex"/>
                    </mstyle>
                    <mo>&#x2062;</mo>
                    <mi>exp</mi>
                  </mrow>
                  <mo>&#x2265;</mo>
                  <mi>max_exp</mi>
                </mrow>
              </mtd>
            </mtr>
            <mtr>
              <mtd>
                <mn>0</mn>
              </mtd>
              <mtd>
                <mi>otherwise</mi>
              </mtd>
            </mtr>
          </mtable>
        </mrow>
      </mrow>
    </mtd>
    <mtd>
      <mrow>
        <mo>(</mo>
        <mn>12</mn>
        <mo>)</mo>
      </mrow>
    </mtd>
  </mtr>
  <mtr>
    <mtd>
      <mrow>
        <mi>underflow</mi>
        <mo>=</mo>
        <mrow>
          <mo>{</mo>
          <mtable>
            <mtr>
              <mtd>
                <mn>1</mn>
              </mtd>
              <mtd>
                <mrow>
                  <mrow>
                    <mi>if</mi>
                    <mo>&#x2062;</mo>
                    <mstyle>
                      <mspace width="0.8em" height="0.8ex"/>
                    </mstyle>
                    <mo>&#x2062;</mo>
                    <mi>exp</mi>
                  </mrow>
                  <mo>&#x2264;</mo>
                  <mn>0</mn>
                </mrow>
              </mtd>
            </mtr>
            <mtr>
              <mtd>
                <mn>0</mn>
              </mtd>
              <mtd>
                <mi>otherwise</mi>
              </mtd>
            </mtr>
          </mtable>
        </mrow>
      </mrow>
    </mtd>
    <mtd>
      <mrow>
        <mo>(</mo>
        <mn>13</mn>
        <mo>)</mo>
      </mrow>
    </mtd>
  </mtr>
  <mtr>
    <mtd>
      <mrow>
        <mrow>
          <mi>inexact</mi>
          <mo>=</mo>
          <mrow>
            <mi>overflow</mi>
            <mo>&#x2062;</mo>
            <mrow>
              <mo>&#xf605;</mo>
              <mi>underflow</mi>
              <mo>&#xf606;</mo>
            </mrow>
            <mo>&#x2062;</mo>
            <mi>round_up</mi>
          </mrow>
        </mrow>
        <mo>,</mo>
      </mrow>
    </mtd>
    <mtd>
      <mrow>
        <mo>(</mo>
        <mn>14</mn>
        <mo>)</mo>
      </mrow>
    </mtd>
  </mtr>
</mtable>
</math>
</maths>
</p>
<p id="p-0093" num="0092">where round_up is the rounding decision of the significand result, and where &#x2225; denotes the logical OR operation (as used in Verilog). Alternatively, EQ 14 could be rewritten inexact=overflow OR underflow OR roundup.</p>
<p id="p-0094" num="0093">The sign logic determines the final sign bit that is also used in the round logic. The four sign bits of the operands, the input operator, the exponent comparison and the significand comparison are used to determine the sign bit as</p>
<p id="p-0095" num="0094">
<maths id="MATH-US-00005" num="00005">
<math overflow="scroll">
<mrow>
  <mi>sign</mi>
  <mo>=</mo>
  <mrow>
    <mo>{</mo>
    <mtable>
      <mtr>
        <mtd>
          <mrow>
            <mrow>
              <msub>
                <mi>AB</mi>
                <mi>sign</mi>
              </msub>
              <mo>&#x2062;</mo>
              <msub>
                <mi>CD</mi>
                <mi>sign</mi>
              </msub>
            </mrow>
            <mo>+</mo>
            <mrow>
              <msub>
                <mi>AB</mi>
                <mi>sign</mi>
              </msub>
              <mo>&#x2062;</mo>
              <msub>
                <mi>comp</mi>
                <mi>exp</mi>
              </msub>
            </mrow>
            <mo>+</mo>
          </mrow>
        </mtd>
        <mtd>
          <mstyle>
            <mspace width="0.3em" height="0.3ex"/>
          </mstyle>
        </mtd>
      </mtr>
      <mtr>
        <mtd>
          <mrow>
            <mrow>
              <msub>
                <mi>AB</mi>
                <mi>sign</mi>
              </msub>
              <mo>&#x2062;</mo>
              <msub>
                <mi>comp</mi>
                <mi>signif</mi>
              </msub>
            </mrow>
            <mo>+</mo>
          </mrow>
        </mtd>
        <mtd>
          <mstyle>
            <mspace width="0.3em" height="0.3ex"/>
          </mstyle>
        </mtd>
      </mtr>
      <mtr>
        <mtd>
          <mrow>
            <msub>
              <mi>CD</mi>
              <mi>sign</mi>
            </msub>
            <mo>&#x2062;</mo>
            <msub>
              <mover>
                <mi>comp</mi>
                <mi>_</mi>
              </mover>
              <mi>exp</mi>
            </msub>
            <mo>&#x2062;</mo>
            <msub>
              <mover>
                <mi>comp</mi>
                <mi>_</mi>
              </mover>
              <mi>signif</mi>
            </msub>
          </mrow>
        </mtd>
        <mtd>
          <mrow>
            <mrow>
              <mi>if</mi>
              <mo>&#x2062;</mo>
              <mstyle>
                <mspace width="0.8em" height="0.8ex"/>
              </mstyle>
              <mo>&#x2062;</mo>
              <mi>op</mi>
            </mrow>
            <mo>=</mo>
            <mi>add</mi>
          </mrow>
        </mtd>
      </mtr>
      <mtr>
        <mtd>
          <mrow>
            <mrow>
              <msub>
                <mi>AB</mi>
                <mi>sign</mi>
              </msub>
              <mo>&#x2062;</mo>
              <msub>
                <mover>
                  <mi>CD</mi>
                  <mi>_</mi>
                </mover>
                <mi>sign</mi>
              </msub>
            </mrow>
            <mo>+</mo>
            <mrow>
              <msub>
                <mi>AB</mi>
                <mi>sign</mi>
              </msub>
              <mo>&#x2062;</mo>
              <msub>
                <mi>comp</mi>
                <mi>exp</mi>
              </msub>
            </mrow>
            <mo>+</mo>
          </mrow>
        </mtd>
        <mtd>
          <mstyle>
            <mspace width="0.3em" height="0.3ex"/>
          </mstyle>
        </mtd>
      </mtr>
      <mtr>
        <mtd>
          <mrow>
            <mrow>
              <msub>
                <mi>AB</mi>
                <mi>sign</mi>
              </msub>
              <mo>&#x2062;</mo>
              <msub>
                <mi>comp</mi>
                <mi>signif</mi>
              </msub>
            </mrow>
            <mo>+</mo>
          </mrow>
        </mtd>
        <mtd>
          <mstyle>
            <mspace width="0.3em" height="0.3ex"/>
          </mstyle>
        </mtd>
      </mtr>
      <mtr>
        <mtd>
          <mrow>
            <msub>
              <mover>
                <mi>CD</mi>
                <mi>_</mi>
              </mover>
              <mi>sign</mi>
            </msub>
            <mo>&#x2062;</mo>
            <msub>
              <mover>
                <mi>comp</mi>
                <mi>_</mi>
              </mover>
              <mi>exp</mi>
            </msub>
            <mo>&#x2062;</mo>
            <msub>
              <mover>
                <mi>comp</mi>
                <mi>_</mi>
              </mover>
              <mi>signif</mi>
            </msub>
          </mrow>
        </mtd>
        <mtd>
          <mrow>
            <mrow>
              <mi>if</mi>
              <mo>&#x2062;</mo>
              <mstyle>
                <mspace width="0.8em" height="0.8ex"/>
              </mstyle>
              <mo>&#x2062;</mo>
              <mi>op</mi>
            </mrow>
            <mo>=</mo>
            <mrow>
              <mi>sub</mi>
              <mo>.</mo>
            </mrow>
          </mrow>
        </mtd>
      </mtr>
    </mtable>
  </mrow>
</mrow>
</math>
</maths>
</p>
<p id="p-0096" num="0095">As is well known, pipelining can improve the throughput of arithmetic units. In order to achieve the proper pipelining for the floating-point fused dot product unit, the arrangement of the components is investigated. <figref idref="DRAWINGS">FIG. 12</figref> shows the data flow and critical path of the dual-path floating-point fused dot product unit <b>700</b> (<figref idref="DRAWINGS">FIG. 7</figref>) in accordance with an embodiment of the present invention. Referring to <figref idref="DRAWINGS">FIG. 12</figref>, in conjunction with <figref idref="DRAWINGS">FIGS. 7-11</figref>, based on the data flow analysis, the proposed dual-path floating-point fused dot product unit <b>700</b> can be split into three stages <b>1201</b>, <b>1202</b>, <b>1203</b>. The first stage <b>1201</b> contains unpacking by unpack unit <b>1204</b>, exponent compare logic <b>207</b>, op select <b>211</b> and multiplier trees <b>201</b>, <b>202</b>. Since multiplier trees <b>201</b>, <b>202</b> have a long latency, they occupy most of the latency of the first stage <b>1201</b>. The second stage <b>1202</b> consists of the far path and close path logic <b>701</b>, <b>702</b>. Close path logic <b>702</b> takes a larger latency than far path logic <b>701</b> so that it becomes the critical path. The third stage <b>1203</b> contains the path selection <b>709</b>, sign logic <b>219</b>, significand addition <b>312</b>, rounding <b>313</b>, <b>314</b>, and exponent adjust logic <b>221</b>. In each pipeline stage, several logic components are performed in parallel and the path that takes the largest latency becomes the critical path. The critical paths of the three stages are</p>
<p id="p-0097" num="0096">First stage: Unpack&#x2192;Multipliers Trees</p>
<p id="p-0098" num="0097">Second stage: Close Path Significand alignment&#x2192;LZA&#x2192;Normalization</p>
<p id="p-0099" num="0098">Third stage: Path Select&#x2192;Significand Addition&#x2192;Exponent Adjust.</p>
<p id="p-0100" num="0099">Second stage <b>1202</b> takes the largest latency among the three pipeline stages so that the latency of second stage <b>1202</b> becomes the effective latency, which determines the throughput. Due to the latches and control signals between the pipeline stages <b>1201</b>, <b>1202</b>, <b>1203</b>, the total latency of the pipelined dual-path floating-point fused dot product unit <b>700</b> is three times the latency of second stage <b>1202</b>. However, the latencies of the three pipeline stages <b>1201</b>, <b>1202</b>, <b>1203</b> are fairly well balanced so that the throughput is significantly increased compared to the non-pipelined dual-path design.</p>
<p id="p-0101" num="0100">The descriptions of the various embodiments of the present invention have been presented for purposes of illustration, but are not intended to be exhaustive or limited to the embodiments disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the described embodiments. The terminology used herein was chosen to best explain the principles of the embodiments, the practical application or technical improvement over technologies found in the marketplace, or to enable others of ordinary skill in the art to understand the embodiments disclosed herein.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-math idrefs="MATH-US-00001" nb-file="US08626813-20140107-M00001.NB">
<img id="EMI-M00001" he="26.08mm" wi="76.20mm" file="US08626813-20140107-M00001.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00002" nb-file="US08626813-20140107-M00002.NB">
<img id="EMI-M00002" he="8.47mm" wi="76.20mm" file="US08626813-20140107-M00002.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00003" nb-file="US08626813-20140107-M00003.NB">
<img id="EMI-M00003" he="7.79mm" wi="76.20mm" file="US08626813-20140107-M00003.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00004" nb-file="US08626813-20140107-M00004.NB">
<img id="EMI-M00004" he="21.17mm" wi="76.20mm" file="US08626813-20140107-M00004.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00005" nb-file="US08626813-20140107-M00005.NB">
<img id="EMI-M00005" he="26.50mm" wi="76.20mm" file="US08626813-20140107-M00005.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-claim-statement>The invention claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A floating-point fused dot product unit, comprising:
<claim-text>a first multiplier tree adapted to multiply a first and second significand operands to produce a first significand pair;</claim-text>
<claim-text>a second multiplier tree adapted to multiply a third and fourth significand operands to produce a second significand pair;</claim-text>
<claim-text>a first multiplexer coupled to said first and second multiplier trees, wherein said first multiplexer is configured to select a smaller significand pair of said first and second significand pairs;</claim-text>
<claim-text>a second multiplexer coupled to said first and second multiplier trees, wherein said second multiplexer is configured to select a greater significand pair of said first and second significand pairs;</claim-text>
<claim-text>an alignment and sticky unit coupled to said first multiplexer, wherein said alignment and sticky unit is configured to align said smaller significand pair and perform sticky logic on said smaller significand pair to generate a first sticky bit; and</claim-text>
<claim-text>a sticky unit coupled to said second multiplexer, wherein said sticky unit is configured to perform sticky logic on said greater significand pair to generate a second sticky bit;</claim-text>
<claim-text>wherein least significant bits under said first and second sticky bits are discarded to thereby reduce a length of said first and second significand pairs.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The floating-point fused dot product unit as recited in <claim-ref idref="CLM-00001">claim 1</claim-ref> further comprising:
<claim-text>a first inverter coupled to said alignment and sticky unit, wherein said first inverter is configured to invert said aligned significand pair;</claim-text>
<claim-text>a second inverter coupled to said sticky unit, wherein said second inverter is configured to invert said greater significand pair.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The floating-point fused dot product unit as recited in <claim-ref idref="CLM-00002">claim 2</claim-ref> further comprising:
<claim-text>a first four-to-two carry save adder coupled to said first inverter and said sticky unit, wherein said first four-to-two carry save adder is configured to receive said inverted aligned significand pair and said greater significand pair to produce a first two significands.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The floating-point fused dot product unit as recited in <claim-ref idref="CLM-00003">claim 3</claim-ref> further comprising:
<claim-text>a second four-to-two carry save adder coupled to said second inverter and said alignment and sticky unit, wherein said second four-to-two carry save adder is configured to receive said inverted greater significand pair and said aligned significand pair to produce a second two significands.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The floating-point fused dot product unit as recited in <claim-ref idref="CLM-00004">claim 4</claim-ref> further comprising:
<claim-text>a comparison unit configured to compare said first two significands and a result of said comparison selects one of said first and second two significands to not be complemented after significand addition.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The floating-point fused dot product unit as recited in <claim-ref idref="CLM-00005">claim 5</claim-ref> further comprising:
<claim-text>a normalization unit configured to normalize said selected one of said first and second two significands.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The floating-point fused dot product unit as recited in <claim-ref idref="CLM-00006">claim 6</claim-ref> further comprising:
<claim-text>an adder coupled to said normalization unit, wherein said adder is configured to add most significant bits of said normalized significands.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The floating-point fused dot product unit as recited in <claim-ref idref="CLM-00006">claim 6</claim-ref> further comprising:
<claim-text>a sticky and round unit coupled to said normalization unit, wherein said sticky and round unit is configured to generate round, guard and sticky bits using least significant bits of said normalized significands.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The floating-point fused dot product unit as recited in <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein a first and a second bit of said least significant bits correspond to said guard and round bits, wherein said sticky bit is set in response to at least one of a remaining of said least significant bits equaling a logical value of one.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The floating-point fused dot product unit as recited in <claim-ref idref="CLM-00002">claim 2</claim-ref> further comprising:
<claim-text>a four-input leading zero anticipation unit configured to receive four significands from said alignment and sticky unit and said sticky unit to obtain a count of leading zeros which is a shift amount of a normalization.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. A floating-point fused dot product unit, comprising:
<claim-text>a first multiplier tree adapted to multiply a first and a second significand of a first and a second operand, respectively, to produce a first significand pair;</claim-text>
<claim-text>a second multiplier tree adapted to multiply a third and a fourth significand of a third and a fourth operand, respectively, to produce a second significand pair;</claim-text>
<claim-text>a far path comprising:
<claim-text>a first multiplexer configured to select a smaller significand pair of said first and second significand pairs;</claim-text>
<claim-text>a second multiplexer configured to select a greater significand pair of said first and second significand pairs;</claim-text>
<claim-text>a first alignment and sticky unit coupled to said first multiplexer, wherein said first alignment and sticky unit is configured to align said smaller significand pair and to perform sticky logic for said smaller significand pair;</claim-text>
<claim-text>a first inverter coupled to said first alignment and sticky unit, wherein said first inverter is configured to invert said aligned significand pair in response to an operation being a subtraction;</claim-text>
<claim-text>a sticky unit coupled to said second multiplexer, wherein said sticky unit is configured to perform sticky logic for said greater significand pair; and</claim-text>
<claim-text>a first four-to-two carry save adder coupled to said first inverter and said sticky unit, wherein said first four-to-two carry save adder is configured to receive said inverted aligned significand pair and said greater significand pair to produce a first two significands; and</claim-text>
</claim-text>
<claim-text>a close path comprising:
<claim-text>a second alignment unit configured to align said first and second significand pairs;</claim-text>
<claim-text>a second inverter coupled to said second alignment unit, wherein said second inverter is configured to invert said aligned first significand pair;</claim-text>
<claim-text>a third inverter coupled to said second alignment unit, wherein said third inverter is configured to invert said aligned second significand pair;</claim-text>
<claim-text>a second four-to-two carry save adder coupled to said second inverter and said second alignment unit, wherein said second four-to-two carry save adder is configured to receive said inverted aligned first significand pair and said aligned second significand pair to produce a second two significands;</claim-text>
<claim-text>a third four-to-two carry save adder coupled to said third inverter and said second alignment unit, wherein said third four-to-two carry save adder is configured to receive said inverted aligned second significand pair and said aligned first significand pair to produce a third two significands;</claim-text>
<claim-text>a comparison unit configured to compare said second two significands and a result of said comparison selects one of said second and third two significands to not be complemented after significand addition; and</claim-text>
<claim-text>a normalization unit configured to normalized said selected one of said second and third two significands.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The floating-point fused dot product unit as recited in <claim-ref idref="CLM-00011">claim 11</claim-ref> further comprising:
<claim-text>a path select logic unit coupled to said far path and said close path, wherein said path select unit is configured to select one of said far path and said close path.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The floating-point fused dot product unit as recited in <claim-ref idref="CLM-00012">claim 12</claim-ref> further comprising:
<claim-text>an adder coupled to said path select logic unit, wherein said adder is configured to add most significant bits of either said normalized significands or said first two significands.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The floating-point fused dot product unit as recited in <claim-ref idref="CLM-00013">claim 13</claim-ref> further comprising:
<claim-text>a sticky and round unit coupled to said path select logic, wherein said sticky and round unit is configured to generate round, guard and sticky bits using least significant bits of either said normalized significands or said first two significands.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The floating-point fused dot product unit as recited in <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein a first and a second bit of said least significant bits correspond to said guard and round bits, wherein said sticky bit is set in response to at least one of a remaining of said least significant bits equaling a logical value of one.</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The floating-point fused dot product unit as recited in <claim-ref idref="CLM-00015">claim 15</claim-ref> further comprising:
<claim-text>a sign logic unit configured to generate a sign configured to determine a final sign bit that is used in round logic of said sticky and round unit; and</claim-text>
<claim-text>an exponent adjust unit configured to adjust an exponent by adding or subtracting a carry out from said significand addition;</claim-text>
<claim-text>wherein a third stage of said floating-point dot fused dot product unit contains said path select logic unit, said sign logic unit, said adder, said sticky and round unit and said exponent adjust unit.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The floating-point fused dot product unit as recited in <claim-ref idref="CLM-00011">claim 11</claim-ref> further comprising:
<claim-text>a four-input leading zero anticipation unit configured to receive four significands from said second alignment unit to obtain a count of leading zeros which is a shift amount of a normalization.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The floating-point dot fused dot product unit as recited in <claim-ref idref="CLM-00011">claim 11</claim-ref> further comprising:
<claim-text>an exponent compare unit configured to compare exponents of said first, second, third and fourth operands; and</claim-text>
<claim-text>an operand select unit configured to select one of said first, second, third and fourth operands;</claim-text>
<claim-text>wherein a first stage of said floating-point dot fused dot product unit contains said exponent compare unit, said operand select unit and said first and second multiplier trees.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. The floating-point dot fused dot product unit as recited in <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein a second stage of said floating-point dot fused dot product unit contains said far path and said close path logic.</claim-text>
</claim>
</claims>
</us-patent-grant>

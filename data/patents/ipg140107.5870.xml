<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08626979-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08626979</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>12975613</doc-number>
<date>20101222</date>
</document-id>
</application-reference>
<us-application-series-code>12</us-application-series-code>
<us-term-of-grant>
<us-term-extension>470</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>13</main-group>
<subgroup>36</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>710315</main-classification>
<further-classification>709230</further-classification>
</classification-national>
<invention-title id="d2e53">Common protocol engine interface for a controller interface</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>6973516</doc-number>
<kind>B1</kind>
<name>Athanas et al.</name>
<date>20051200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>8112507</doc-number>
<kind>B2</kind>
<name>Chang et al.</name>
<date>20120200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709223</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>8335883</doc-number>
<kind>B2</kind>
<name>Tateyama et al.</name>
<date>20121200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>710315</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>2003/0229748</doc-number>
<kind>A1</kind>
<name>Brewer et al.</name>
<date>20031200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>2009/0113064</doc-number>
<kind>A1</kind>
<name>Yamaki</name>
<date>20090400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>2009/0157916</doc-number>
<kind>A1</kind>
<name>Chilukoor et al.</name>
<date>20090600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00007">
<othercit>Search Report dated Sep. 18, 2012.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>21</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>710305-306</main-classification>
<additional-info>unstructured</additional-info>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>710311-315</main-classification>
<additional-info>unstructured</additional-info>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>710 62- 64</main-classification>
<additional-info>unstructured</additional-info>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709230</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>9</number-of-drawing-sheets>
<number-of-figures>9</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20120166692</doc-number>
<kind>A1</kind>
<date>20120628</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Wang</last-name>
<first-name>Jennifer C.</first-name>
<address>
<city>Tempe</city>
<state>AZ</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Chang</last-name>
<first-name>Nai-Chih</first-name>
<address>
<city>Chandler</city>
<state>AZ</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="003" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Lenero</last-name>
<first-name>Beracoecha Alejandro</first-name>
<address>
<city>Phoenix</city>
<state>AZ</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="004" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Wong</last-name>
<first-name>Yew-Kee E.</first-name>
<address>
<city>Gilbert</city>
<state>AZ</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Wang</last-name>
<first-name>Jennifer C.</first-name>
<address>
<city>Tempe</city>
<state>AZ</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Chang</last-name>
<first-name>Nai-Chih</first-name>
<address>
<city>Chandler</city>
<state>AZ</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="003" designation="us-only">
<addressbook>
<last-name>Lenero</last-name>
<first-name>Beracoecha Alejandro</first-name>
<address>
<city>Phoenix</city>
<state>AZ</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="004" designation="us-only">
<addressbook>
<last-name>Wong</last-name>
<first-name>Yew-Kee E.</first-name>
<address>
<city>Gilbert</city>
<state>AZ</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>KED &#x26; Associates LLP</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>Intel Corporation</orgname>
<role>02</role>
<address>
<city>Santa Clara</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Knoll</last-name>
<first-name>Clifford</first-name>
<department>2111</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">A signal transmission system includes a controller interface, a protocol engine to convert data based on at least one protocol, and a common protocol interface coupled between the controller interface and the protocol engine. The controller interface includes or is coupled to a common dispatcher, and the data is to be transmitted between the controller interface and protocol engine through the common protocol interface and common dispatcher. The same protocol engine may convert data into different protocols, with all of the converted data be transmitted to or received from the controller interface through the common dispatcher and common protocol interface.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="253.24mm" wi="181.36mm" file="US08626979-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="253.41mm" wi="200.66mm" orientation="landscape" file="US08626979-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="230.12mm" wi="97.62mm" orientation="landscape" file="US08626979-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="254.00mm" wi="180.42mm" file="US08626979-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="251.80mm" wi="138.94mm" file="US08626979-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="260.77mm" wi="170.26mm" orientation="landscape" file="US08626979-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="254.17mm" wi="166.96mm" orientation="landscape" file="US08626979-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="220.39mm" wi="161.97mm" orientation="landscape" file="US08626979-20140107-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00008" num="00008">
<img id="EMI-D00008" he="244.52mm" wi="157.40mm" orientation="landscape" file="US08626979-20140107-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00009" num="00009">
<img id="EMI-D00009" he="222.93mm" wi="174.67mm" file="US08626979-20140107-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">FIELD</heading>
<p id="p-0002" num="0001">One or more embodiments described herein relate to controlling signal transmission.</p>
<heading id="h-0002" level="1">BACKGROUND</heading>
<p id="p-0003" num="0002">Different communication protocols have been developed in an attempt to standardize the transmission of data between host and peripheral devices. These protocols include the Universal Serial Bus (USB) protocol and the Firewire protocol, as well as others. As newer versions of these standards are developed, existing interface circuits will be unable to operate or must be updated or modified to include customized circuitry and software. This increases cost and complexity and limits usefulness.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0004" num="0003"><figref idref="DRAWINGS">FIG. 1</figref> shows one embodiment of a signal transmission system.</p>
<p id="p-0005" num="0004"><figref idref="DRAWINGS">FIG. 2</figref> shows one embodiment of a common signal interface in the system.</p>
<p id="p-0006" num="0005"><figref idref="DRAWINGS">FIG. 3</figref> shows one embodiment of a data-transfer operation in the system.</p>
<p id="p-0007" num="0006"><figref idref="DRAWINGS">FIG. 4</figref> shows operations included in one embodiment of a method for performing a data transfer operation in a signal transmission system.</p>
<p id="p-0008" num="0007"><figref idref="DRAWINGS">FIG. 5</figref> shows a first timing diagram for performing a data transfer operation.</p>
<p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. 6</figref> shows a second timing diagram for performing a data transfer operation.</p>
<p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. 7</figref> shows a third timing diagram for processing a Port Status Event.</p>
<p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. 8</figref> shows another embodiment of a signal transmission system.</p>
<p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. 9</figref> shows one embodiment of a host device that includes a host controller and host controller interface.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0004" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. 1</figref> shows a first embodiment of a signal transmission system <b>100</b> which includes a common protocol interface <b>10</b> coupled between a host controller interface <b>20</b> and a protocol engine <b>30</b>. The host controller interface <b>20</b> may be found within or connected to any one of a number of electronic devices including but not limited to notebook or desktop computers, smart phones, personal digital assistants, music or media players, internet terminals, televisions, monitors, cameras, digital picture frames, and any other device which is to receive and/or transmit signals.</p>
<p id="p-0014" num="0013">In terms of structure and function, the host controller interface <b>20</b> may be controlled by software and/or hardware circuits that controls the timing, format, and flow of signals to be received from and transmitted to the protocol engine through the common protocol interface. The software may be stored, for example, in a host operating system or other memory device included within or coupled to the host controller interface. The host controller interface may be managed by a host controller which executes the software. (While the controller interface is <figref idref="DRAWINGS">FIG. 1</figref> is described as a host controller, in other embodiments the controller interface may be included in a peripheral or other device, e.g., one coupled to a host device or another device).</p>
<p id="p-0015" num="0014">As shown in <figref idref="DRAWINGS">FIG. 1</figref>, the host controller interface includes an event ring <b>21</b>, a command ring <b>22</b>, and a transfer ring <b>23</b>. These rings are circular queues of data structures that are used to perform various control and data transfer operations.</p>
<p id="p-0016" num="0015">The event ring <b>21</b> performs the function of reporting various types of information to system software including data transfer and command completion status, root hub port status changes, and other host-controller-related events. The functions of the event ring may be defined in an event ring segment table maintained by the host controller and may operate with one or more enqueue and/or dequeue pointer registers located, for example, in the runtime registers of the controller operating system.</p>
<p id="p-0017" num="0016">The command ring <b>22</b> performs the functions of issuing commands to for performing various control and data transfer operations through protocol engine, configuring the host controller to support peripheral devices coupled to the protocol engine, and coordinating virtualization features. The command ring may be managed based on information in one or more command ring registers included in operational registers of the system.</p>
<p id="p-0018" num="0017">The transfer ring <b>23</b> performs the function of transferring data between system memory buffers and device endpoints. The transfers are performed to and from the endpoint of a peripheral device <b>50</b> using a transfer descriptor, which includes one or more transfer request blocks. Transfer descriptors are managed through the transfer ring, which may reside in the memory of the host controller. The peripheral device is coupled to the protocol engine through a cable <b>40</b>.</p>
<p id="p-0019" num="0018">In performing the aforementioned functions, the transfer ring may operate based on enqueue and dequeue pointers which define the logical beginning and end of valid entries in the ring. The transfer ring, therefore, may define transfers of transfer descriptors (work items) relating to data between the host controller (coupled to or containing the host controller interface) and the peripheral device endpoint (which may include or be coupled to the protocol engine).</p>
<p id="p-0020" num="0019">The host computer interface also includes a prefetch buffer <b>24</b> which stores a data payload to be transferred to or received from the peripheral device coupled to the protocol engine through the cable. The data transfers are performed based on control operations of the transfer, command, and event rings, all of which are coupled to the common dispatcher <b>25</b>.</p>
<p id="p-0021" num="0020">In some designs, different dispatchers are used for specific protocol engines, for example, ones that operate according to different USB specifications and/or speeds. These protocol engines are directly connected to the different rings and prefetch buffer of the host controller interface, and are also connected to different dispatchers included in the interface that operate in accordance with each specific protocols. This architecture increases cost and complexity and limits the host device to transmitting and receiving data only to peripheral devices that comport with those specific protocols.</p>
<p id="p-0022" num="0021">In the embodiment of <figref idref="DRAWINGS">FIG. 1</figref>, host controller interface <b>20</b> has only one dispatcher (labeled a common dispatcher) <b>25</b> which can accept commands and transfer and receive data according to multiple protocol standards. The use of one single dispatcher adaptable to a variety of protocol standards is made possible by the common protocol interface <b>10</b> and the functions performed by the protocol engine.</p>
<p id="p-0023" num="0022">The protocol engine <b>30</b> may perform the function of packetizing data payloads to multiple specific protocols, so that peripheral devices operating according to different transmission standards can connect to the host device. The common protocol interface <b>10</b> carries control signals for those different protocols to enable data transfers between the host and peripheral devices.</p>
<p id="p-0024" num="0023">More specifically, the common protocol interface allows the protocol engine to connect to peripheral devices operating according to different standards, including, for example, a Universal Serial Bus (USB) standard and/or a Firewire standard. (In another embodiment, the common protocol interface may allow the protocol engine to connect to peripheral devices operating using a single predetermined protocol. The same is true with the common dispatcher, i.e., in alternative embodiments the common dispatcher may operate according to a single predetermined protocol).</p>
<p id="p-0025" num="0024">The USB protocol has gained increased popularity in recent times. Therefore, for illustrative purposes, the embodiments described herein will described using one or more protocol engines that operate using two or more of a USB 3.0 super speed standard, a USB 2.0 high speed standard, or a USB 2.0 full speed/low speed standard. As such, the host controller interface may be referred to as an eXtensible Host Controller Interface (xHCI). (In other embodiments, instead of a ring structure, the host controller interface may include a plurality of queues or registers. Moreover, while the example of an xHCI controller interface is given, other embodiments may cover other types of controller interfaces to be implemented in the host and/or in the device coupled to the host).</p>
<p id="p-0026" num="0025">The combination of the common dispatcher, common protocol interface, and protocol engine(s) allow data transfers to take place without requiring the command, transfer, and event rings and prefetch buffer in the host controller interface to directly interact with protocol engine. Instead, the command, transfer, and event rings operate according to a common set of instructions irrespective of the protocol engine transmission standard, and only one common dispatcher <b>25</b> is required. As a result, data transfers take place between host and peripheral devices transparently from the standpoint of the host controller interface, thereby reducing cost and complexity.</p>
<p id="p-0027" num="0026">More specifically, the common dispatcher allows different types of protocol engines (e.g., USB 2.0, USB 3.0, Serial Advanced Technology Attachment (SATA), etc.) to connect to the host controller interface without the need to use specially dedicated dispatchers. For example, use of common dispatcher <b>25</b> may allow the same protocol engine to operate as a host device, a peripheral device, or USB On-The-Go (USB OTG) device without having to modify connections between the protocol engine, dispatcher, command, transfer, event rings and the prefetch buffer. Instead, the common dispatcher allows a single interface to be used which is compatible with protocol engines of different standards.</p>
<p id="p-0028" num="0027">The common dispatcher further allows information between the protocol engine and host controller interface to pass through a single common protocol interface <b>10</b>, which operates to perforin duplex (bidirectional) data transfers and to support different priority of transfers. As will be described in greater detail below, using the common protocol interface will allow, for example, a high-speed USB protocol engine or a super-speed USB protocol engine to interface to the common dispatcher only without any system performance penalty.</p>
<p id="p-0029" num="0028">Accordance with one embodiment, as shown in <figref idref="DRAWINGS">FIG. 2</figref>, the common protocol interface <b>10</b> includes a first bus <b>11</b> in the form of an xHCI-to-protocol engine command/event (x2p_ce) bus, a second bus <b>14</b> in the form of an xHCI-to-protocol engine data (x2p_data) bus, a third bus <b>15</b> in the form of a protocol engine-to-xHCI command/event (p2x_ce) bus, and a fourth bus <b>17</b> in the form of a protocol engine-to-xHCI data (p2x_data) bus.</p>
<p id="p-0030" num="0029">The common protocol interface may also include a number of other signals lines, including an xHCI-to-protocol engine command/event valid (x2p_ce_vld) bus <b>12</b>, an xHCI-to-protocol engine data valid (x2p_data_vld) bus <b>13</b>, a protocol engine-to-xHCI command/event valid (p2x_ce_vld) bus <b>16</b>, and a protocol engine-to-xHCI data valid (p2x_data_vld) bus <b>18</b>.</p>
<p id="p-0031" num="0030">As shown, the common protocol interface supports duplex operation, as buses <b>11</b> through <b>14</b> transmit control signals and data in one direction (from the common dispatcher to the protocol engine) and buses <b>15</b> through <b>18</b> transmit signals and data in the opposite direction (from the protocol engine to the common dispatcher). The command/event and data valid buses carry control signals for enabling data transfer and the data bus lines carry the data.</p>
<p id="p-0032" num="0031">The common protocol interface <b>10</b> may include a number of other signal lines including, for example, a line for transmitting data attributes such as USB packets, packet class identifiers, packet identifiers, or protocol identifiers. The embodiments described herein are not to be limited to these aforementioned signal lines or data attributes or even to an xHCI implementation. Rather, alternative embodiments may be drawn to other types of protocols or controller interface architectures, and thusly the common protocol interface corresponding to these alternative embodiments may have a different arrangement of bus lines.</p>
<p id="p-0033" num="0032"><figref idref="DRAWINGS">FIG. 3</figref> shows a cable <b>400</b> which carries data between a host device <b>200</b> and a peripheral device <b>300</b>. The host and peripheral devices the same or similar configuration in its front-end circuits, and each may operate in accordance with features of the embodiment in <figref idref="DRAWINGS">FIGS. 1 and 2</figref>.</p>
<p id="p-0034" num="0033">More specifically, the host device <b>200</b> includes a host interface controller <b>220</b> that includes event, command, and transfer rings <b>221</b>, <b>222</b>, and <b>223</b>, a prefetch buffer <b>224</b>, and a common dispatcher <b>225</b>. The common dispatcher is coupled to protocol engine <b>230</b> through common protocol interface <b>210</b>. The peripheral device includes event, command, and transfer rings <b>321</b>, <b>322</b>, and <b>323</b>, a prefetch buffer <b>334</b>, and a common dispatcher <b>325</b>. The common dispatcher is coupled to protocol engine <b>330</b> through common protocol interface <b>310</b>. In this embodiment, each of the protocol engines <b>230</b> and <b>330</b> support USB 3.0 super speed and USB 2.0 high speed/full speed standards. Accordingly, cable <b>400</b> is a compatible USB cable.</p>
<p id="p-0035" num="0034">In <figref idref="DRAWINGS">FIG. 3</figref>, signal flow is explained for the transfer of data from peripheral device <b>300</b> to host device <b>200</b>, and operations for performing this signal flow are shown in <figref idref="DRAWINGS">FIG. 4</figref>. Initially, the common dispatcher <b>225</b> generates and sends a request signal (e.g., IN token) to protocol engine <b>230</b> through common protocol interface <b>210</b>, as shown by signal flow {circle around (<b>1</b>)}. (Block <b>410</b>). The IN token may be generated in accordance with the transfer ring triggered, for example, by a doorbell after connection of USB cable <b>400</b> between the host and peripheral devices and after an enumeration process is completed. Alternatively, the IN token may be generated in response to a command to receive data performed by an operating system of the host device, for example, in response to a user request.</p>
<p id="p-0036" num="0035">Next, protocol engine <b>230</b> converts the IN token into or otherwise generates a control signal that is compatible with the USB 2.0 standard. (Block <b>420</b>). The protocol engine may generate this standard-compatible control signal, for example, based on an instruction from the host controller interface. That is, the host controller interface may instruct the protocol engine to initiate a USB 2.0 (or other standard in alternative embodiments) transfer.</p>
<p id="p-0037" num="0036">As a non-limiting example, the cable <b>400</b> may be attached and a polling and/or attachment detection process may be performed to determine the speed of the peripheral device. This may be performed using a port status register. Because there is a direct correlation between the speed and a specific standard, the result of the polling process is used to determine the operations of the protocol engine. The foregoing example is provided for a USB 2.0 standard and hence similar terminology may be used. However, other standards may be used in alternative embodiments.</p>
<p id="p-0038" num="0037">Returning to <figref idref="DRAWINGS">FIG. 4</figref>, the IN token signal is transmitted in its converted form to the peripheral device through the cable (Block <b>430</b>), where it is received by protocol engine <b>330</b> and sent to common dispatcher <b>325</b> (Block <b>440</b>). Upon receiving the IN token, the common dispatcher of the peripheral controller interface <b>320</b> requests output of data from the prefetch buffer <b>324</b> in accordance with operations performed by event ring <b>321</b>, transfer ring <b>322</b>, and command ring <b>323</b>. (Block <b>450</b>).</p>
<p id="p-0039" num="0038">The requested data is transferred from the prefetch buffer to the protocol engine <b>330</b> through the common dispatcher <b>325</b> and common protocol interface <b>310</b>, as shown by {circle around (<b>2</b>)} signal flow. (Block <b>460</b>). The protocol engine <b>330</b> then transmits the data on cable <b>400</b> to protocol engine <b>230</b> (Block <b>470</b>). When the data is received, a confirmation signal (e.g., handshake token) is sent from the protocol engine to the common dispatcher <b>225</b> of the host controller interface <b>220</b>, as shown by signal flow {circle around (<b>3</b>)} (Block <b>480</b>).</p>
<p id="p-0040" num="0039">Finally, in response to the confirmation signal, the data received by the protocol engine is transferred into the prefetch buffer <b>224</b> through the common protocol interface <b>210</b> and common dispatcher. (Block <b>490</b>). This operation may be performed based on the creation of an event in event ring <b>221</b>, a command in the command ring <b>222</b>, and a transfer work item in the transfer ring <b>223</b>, the latter of which instructs the common dispatcher to receive the data from the protocol engine for storage in the prefetch buffer.</p>
<p id="p-0041" num="0040">The foregoing operations may be performed in the case where the data transfer occurs in accordance with a USB 2.0 standard. For a USB 3.0 data transfer, similar operations are performed except that the IN token and handshake token are replaced with respective acknowledgement (ACK) transaction packets. Irrespective of which standard is used, the timing diagrams used to control the signal flow through common protocol interfaces <b>210</b> and <b>310</b> may be the same.</p>
<p id="p-0042" num="0041"><figref idref="DRAWINGS">FIG. 5</figref> shows a timing diagram for performing data transfer operations in the host device, relating to <figref idref="DRAWINGS">FIGS. 3 and 4</figref>. As shown, to start the data transfer cycle, the common dispatcher <b>225</b> of the host device asserts the x2p_ce_vld signal <b>501</b> high for one clock cycle. When this signal is asserted, the command/event type is designated as a host device-to-protocol device transfer. In this example, the command type may corresponds to a DIN_C signal <b>502</b> and the current IN transaction target device may correspond to the x2p_data_bus signal <b>503</b>.</p>
<p id="p-0043" num="0042">At this time, the protocol engine <b>230</b> of the host device will acknowledge this transfer by asserting the p2x_ce_vld signal <b>504</b> high for one clock cycle in the next clock cycle based on acknowledge command <b>505</b>, ACK_C, on the p2x_ce line. The target device information corresponds to the p2x_data_bus signal <b>506</b>. Protocol engine <b>230</b> will use an IN token from USB 2.0 or an ACK packet for USB 3.0 to control downstream of data to the USB peripheral device.</p>
<p id="p-0044" num="0043"><figref idref="DRAWINGS">FIG. 6</figref> shows a timing diagram for controlling operations in the peripheral device in connection with the data transfer in <figref idref="DRAWINGS">FIG. 5</figref>. As shown in <figref idref="DRAWINGS">FIG. 6</figref>, when the protocol engine of the peripheral device receives the IN token, it will assert the p2x_ce_vld signal <b>510</b> high for one clock cycle. When this signal is high, the command DREQ_C (Data request) <b>511</b> is generated and end point information <b>512</b> is asserted in the p2x_data_bus.</p>
<p id="p-0045" num="0044">In <figref idref="DRAWINGS">FIG. 6</figref>, period T<b>3</b> corresponds to a latency time for common dispatcher <b>325</b> in the peripheral device to process command information and access data payload information in prefetch buffer <b>324</b>. When the data is ready to be output from the buffer, common dispatcher <b>325</b> will assert the x2P_ce_vld signal <b>513</b> high for one clock cycle. Also, an XRDY_E event signal <b>514</b> is asserted in the x2p_ce bus and end point information is placed on the x2p_data_bus <b>515</b>. One clock cycle later, the common dispatcher <b>325</b> of the peripheral device asserts the x2p_data_vld signal <b>516</b> high and the data <b>517</b> is transferred on the x2p_data_bus.</p>
<p id="p-0046" num="0045">The protocol engine <b>330</b> throttles the data transfer rate by de-asserting p2x_data_vld signal <b>518</b> to high to stop the data transfer for a certain period of time (indicated by the arrows), in order for the data to be properly received. The p2x_data_vld signal may then be de-asserted to transmit remaining packets of the data. The protocol engine <b>330</b> will continue to send the data back to the host device along the cable until the end of the data payload (indicated by ENDx_E event <b>519</b>) is generated by the common dispatcher <b>325</b> on the x2p_ce bus. This marks the end of the data transfer operation. During a period T<b>4</b>, other operations may be performed such as, for example, a pre-fill operation. (In another embodiment, the data transfer rate may be throttled by the protocol engine by requesting a smaller packet size, e.g., by a partial data transaction).</p>
<p id="p-0047" num="0046">Referring back to <figref idref="DRAWINGS">FIG. 5</figref>, period T<b>0</b> is a latency time between when the IN token is issued to protocol engine <b>230</b> of the host device and when the protocol engine of the host device actually receives the data payload from the peripheral device through the USB cable. After T<b>0</b>, the protocol engine <b>230</b> of the host device asserts the p2x_ce_vld signal <b>530</b> high for one clock cycle, and a DINE event <b>531</b> is asserted in the x2p_ce along with target information <b>532</b> on the p2x_data_bus.</p>
<p id="p-0048" num="0047">Period T<b>1</b> is a latency time for common dispatcher <b>225</b> of the host device to process the DIN_E event and allow the protocol engine <b>230</b> to start writing to prefetch buffer <b>224</b>. After T<b>1</b>, common dispatcher <b>225</b> asserts an x2p_ce_vld signal <b>533</b> high for one clock cycle and an XRDY_E event <b>534</b> is sent to the common dispatcher. The protocol engine of the host device will then assert the p2x_data_vld signal <b>535</b> high to enable data <b>536</b> to be transferred to the common dispatcher along the p2x_data_bus.</p>
<p id="p-0049" num="0048">At the end of the data transfer, the protocol engine will assert an ENDx_E event <b>537</b> and the common dispatcher of the host device will then generate an ACK_C signal <b>538</b> to acknowledge the ENDx_E event, which indicates whether x is either good or bad. Then, the protocol engine of the host device will send a handshake token <b>539</b> based on the ENDx_E. For USB2.0, ENDG_E will generate an ACK token and an ENDB_E event will generate a NACK token. For USB 3.0, ENDG_E will generate an ACK signal, an ENDB_E event will generate a Retry packet. Assuming that the device receives a successful handshake token, an ACK_E event (signal <b>540</b> in <figref idref="DRAWINGS">FIG. 6</figref>) will be generated in the common protocol interface to signal the end of the IN transfer.</p>
<p id="p-0050" num="0049">For an OUT transfer, the timing for the common protocol interface for the host device is similar to the IN transfer. The host device will initiate the start of an OUT transfer by asserting the x2p_ce_vld signal high for one clock cycle and issue a DOUT_C command on the x2p_ce and target device information on the x2p_data_bus. The protocol engine of the host device will generate an ACK_C event to acknowledge this OUT token request. When the protocol engine is ready, it will assert the p2x_ce_vld signal high for one clock cycle and issue a DREQ_C command on the x2p_ce bus and the target device information on the x2p_data_bus.</p>
<p id="p-0051" num="0050">After the DRE_C command, all the data transfer time will be similar to the device IN data transfer timing. When the protocol engine of the peripheral device receives the OUT token and the data payload, it will assert the p2x_ce_vld signal high for one clock cycle and issue a DIN_E event on the p2x_ce bus and endpoint information on the p2x_data_bus. After the DINE event, the device timing will follow the Host IN data transfer timing diagram.</p>
<p id="p-0052" num="0051"><figref idref="DRAWINGS">FIG. 7</figref> shows a timing diagram for an embodiment where the protocol engine reports a port state change (e.g., disconnect or low power state entering/exiting). In this case, the protocol engine asserts a p2x_ce_vld signal <b>701</b> high for one clock cycle. When the p2x_ce_vld signal goes high, the command/event type (PRTST_E) <b>702</b> is the p2x_ce. In this example, the event type is a port status Event and current port state information <b>703</b> is placed on the p2x_data_bus. The common dispatcher will acknowledge this transfer by asserting the x2p_ce_vld signal <b>704</b> high for one clock cycle in the next clock cycle, and the acknowledge command <b>705</b> (ACK_C) and the acknowledge type as a Port status Event <b>706</b>. The common dispatcher will notify appropriate blocks (event ring, transfer ring, and command ring) to enable this operation to be performed in the host controller interface.</p>
<p id="p-0053" num="0052">Numerous other commands (C) and events (E) may be performed by the common protocol signal interface of the aforementioned embodiments. These command and events include:
<ul id="ul0001" list-style="none">
    <li id="ul0001-0001" num="0000">
    <ul id="ul0002" list-style="none">
        <li id="ul0002-0001" num="0053">SETUP_E</li>
        <li id="ul0002-0002" num="0054">SETUP_C</li>
        <li id="ul0002-0003" num="0055">STATUS_IN_E</li>
        <li id="ul0002-0004" num="0056">STATUS_OUT_E</li>
        <li id="ul0002-0005" num="0057">STATUS_IN_C</li>
        <li id="ul0002-0006" num="0058">STATUS_OUT_C</li>
        <li id="ul0002-0007" num="0059">PING_C</li>
        <li id="ul0002-0008" num="0060">NYET_C</li>
        <li id="ul0002-0009" num="0061">XRDY+E</li>
        <li id="ul0002-0010" num="0062">TIMEOUT_E</li>
        <li id="ul0002-0011" num="0063">STALL_E</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0054" num="0064"><figref idref="DRAWINGS">FIG. 8</figref> shows another embodiment of a signal transmission system <b>800</b> which is similar in construction to the embodiment in <figref idref="DRAWINGS">FIGS. 1 and 3</figref> except that the <figref idref="DRAWINGS">FIG. 8</figref> embodiment uses two common dispatchers, namely a first common dispatcher <b>801</b> and a second common dispatcher <b>802</b>. These dispatchers are coupled to respective first and second protocol engines <b>805</b> and <b>806</b> through corresponding first and second common protocol interfaces <b>803</b> and <b>804</b>. Protocol engine <b>805</b> is a USB 2.0 high speed/full speed engine and protocol engine <b>806</b> is a USB 3.0 super speed engine. Different peripheral devices may be coupled to the protocol engines using separate USB cables to perform data transfer operations.</p>
<p id="p-0055" num="0065">The common dispatchers, common protocol interfaces and protocol engines operate independently from one another and in a similar manner as the embodiments of <figref idref="DRAWINGS">FIGS. 1 and 3</figref>, with one exception. In addition to the command, transfer, and event rings and a prefetch buffer, the host controller interface <b>810</b> (e.g., an xHCI) includes one or more door bell arrays <b>820</b> which operate to set a work available flag for respective ones of the common dispatchers, to enable/activate a dispatcher to send or receive data to a peripheral device connected to a corresponding one of the protocol engines.</p>
<p id="p-0056" num="0066"><figref idref="DRAWINGS">FIG. 9</figref> shows an example of a signal transmission system <b>900</b> which includes a software and hardware implementation of a USB xHCI driver <b>910</b> for driving operations of an xHCI host controller interface <b>920</b> in accordance with any one of the embodiments of the signal transmission systems described herein. In the system of <figref idref="DRAWINGS">FIG. 9</figref>, the xHCI software drivers manage and control operations of the host controller interface in transferring data to and receiving data from a peripheral device <b>930</b>, which is either directly connected to the host device or connected to the host device though a hub arrangement or network.</p>
<p id="p-0057" num="0067">As indicated, the signal transmission systems described herein may be controlled by a combination of software and hardware. Accordingly, a computer-readable medium may be provided to store instructions for controlling performance of a data transfer operation. The medium may be included within or coupled to the host controller interface or host controller, and/or may be included as part of an operating system of the host device.</p>
<p id="p-0058" num="0068">In one embodiment, the instructions may include a first set of instructions to initiate transfer of data from a host device to a peripheral device and a second set of instructions to transfer data from a prefetch buffer to the common protocol interface. The data to be transferred from the prefetch buffer to the common protocol interface is passed through a common dispatcher included within or coupled to the host controller interface.</p>
<p id="p-0059" num="0069">Additionally, the second set of instructions control the data to be transferred to the peripheral device through a protocol engine coupled to the common protocol interface, with the protocol engine converting the data into one of a plurality of protocol standards. The protocol standards may be different USB protocol standards and/or may cause the data to be transferred at different speeds.</p>
<p id="p-0060" num="0070">Additionally, a third set of instructions may be included to control sending of control signals between the common dispatcher and at least one of a control ring, transfer ring, or command ring included in the host controller interface. The control signals may control transfer of the data from the prefetch buffer to the common dispatcher.</p>
<p id="p-0061" num="0071">In the foregoing embodiments, the term protocol engine is specifically used. However, this feature is intended to cover any circuit, software, or combination therefore that performs a data conversion function as described herein.</p>
<p id="p-0062" num="0072">While the aforementioned embodiments have been described for USB 2.0 and USB 3.0 standards, the embodiments should not be limited to these standards. At the same time, the common protocol engine in the foregoing embodiments allows USB 2.0 and USB 3.0 data transfers to be transparent to the host controller interface (xHCI). All the underlying protocols are handled in the protocol engines, and the responsibility of the common dispatcher is to process the transfer request blocks, including the commands sent to the host controller, events generated by the host controller, and transactions performed by the USB endpoints. The common protocol may also allow a peripheral device, host device, or on-the-go device protocol engine to interface with the common dispatcher without changing interface signals.</p>
<p id="p-0063" num="0073">Any reference in this specification to an &#x201c;embodiment&#x201d; means that a particular feature, structure, or characteristic described in connection with the embodiment is included in at least one embodiment of the invention. The appearances of such phrases in various places in the specification are not necessarily all referring to the same embodiment. Further, when a particular feature, structure, or characteristic is described in connection with any embodiment, it is submitted that it is within the purview of one skilled in the art to effect such feature, structure, or characteristic in connection with other ones of the embodiments.</p>
<p id="p-0064" num="0074">Furthermore, for ease of understanding, certain functional blocks may have been delineated as separate blocks; however, these separately delineated blocks should not necessarily be construed as being in the order in which they are discussed or otherwise presented herein. For example, some blocks may be able to be performed in an alternative ordering, simultaneously, etc.</p>
<p id="p-0065" num="0075">Although the present invention has been described herein with reference to a number of illustrative embodiments, it should be understood that numerous other modifications and embodiments can be devised by those skilled in the art that will fall within the spirit and scope of the principles of this invention. More particularly, reasonable variations and modifications are possible in the component parts and/or arrangements of the subject combination arrangement within the scope of the foregoing disclosure, the drawings and the appended claims without departing from the spirit of the invention. In addition to variations and modifications in the component parts and/or arrangements, alternative uses will also be apparent to those skilled in the art.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>We claim:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A signal transmission system, comprising:
<claim-text>a controller interface;</claim-text>
<claim-text>a common protocol interface;</claim-text>
<claim-text>a protocol engine to convert data based on at least one protocol; and</claim-text>
<claim-text>a common dispatcher to accept commands, and to transfer and receive data according to any one of a plurality of communication protocols standards, the common protocol interface to couple between the common dispatcher and the protocol engine, wherein the data is to be transmitted between the controller interface and the protocol engine through the common protocol interface and through the common dispatcher such that data is to be provided from the common protocol interface to the common dispatcher.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the protocol engine is to convert the data into one of the plurality of communication protocol standards.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The system of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the protocol engine is to convert the data into a Universal Serial Bus (USB) standard.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The system of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the data is to be transmitted across the common protocol interface between the controller interface and the protocol engine irrespective of which communication protocol standard corresponds to the data.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The system of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the plurality of communication protocol standards are different Universal Serial Bus (USB) protocol standards.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The system of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the plurality of communication protocol standards are to transmit the data at different speeds.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the controller interface includes:
<claim-text>a prefetch buffer,</claim-text>
<claim-text>wherein the data from the common protocol interface is to be transmitted for storage into the prefetch buffer through the common dispatcher.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein controller interface includes:
<claim-text>an event ring, a transfer ring, and a command ring,</claim-text>
<claim-text>wherein control signals to control transmission of the data are to pass between the common protocol interface and one or more of the event ring, the transfer ring, or the command ring, and the control signals are to pass through the common dispatcher,</claim-text>
<claim-text>wherein control signals to control transmission of the data are to pass between the common protocol interface and one or more of the event ring, the transfer ring, or the command ring, and the control signals are to pass through the common dispatcher.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the common protocol interface includes:
<claim-text>a first signal line to transfer the data from the common dispatcher to the protocol engine;</claim-text>
<claim-text>a second signal line to transfer additional data from the protocol engine to the common dispatcher; and</claim-text>
<claim-text>at least one control signal line to control data transfers on the first and second signal lines.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the controller interface is an extensible host controller.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. A signal transmission system, comprising:
<claim-text>a controller interface;</claim-text>
<claim-text>a first protocol engine to convert first data based on a first protocol;</claim-text>
<claim-text>a second protocol engine to convert second data based on a second protocol;</claim-text>
<claim-text>a first protocol interface;</claim-text>
<claim-text>a second protocol interface;</claim-text>
<claim-text>a first common dispatcher; and</claim-text>
<claim-text>a second common dispatcher, the first protocol interface to couple between the first common dispatcher and the first protocol engine, and the second protocol interface to couple between the second common dispatcher and the second protocol engine, wherein the first data is to be transmitted between the controller interface and the first protocol engine through the first protocol interface and the first common dispatcher such that data is provided from the first protocol interface to the first common dispatcher, and the second data is to be transmitted between the controller interface and the second protocol engine through the second protocol interface and the second common dispatcher such that data is provided from the second protocol interface to the second common dispatcher.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The system of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the first and second protocols are different Universal Serial Bus (USB) protocol standards.</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The system of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the first and second protocols are to perform data transfers at different speeds.</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The system of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the first common dispatcher and the first protocol interface are to operate independently from the second common dispatcher and the second protocol interface to perform different data transfer operations for the first and second data respectively.</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The system of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the controller interface includes:
<claim-text>a prefetch buffer,</claim-text>
<claim-text>wherein the first data from the first protocol interface is to be transmitted for storage into the prefetch buffer through the first common dispatcher, and the second data from the second protocol interface is to be transmitted for storage into the prefetch buffer through the second common dispatcher, the first and second common dispatchers to operate independently from one another to perform data transfer operations based on the first and second data respectively.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The system of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the controller interface includes:
<claim-text>an event ring, a transfer ring, and a command ring,</claim-text>
<claim-text>wherein control signals to control transmission of the first data are to pass between the first protocol interface and one or more of the event ring, the transfer ring, or the command ring through the first common dispatcher, and wherein control signals to control transmission of the second data are to pass between the second protocol interface and one or more of the event ring, the transfer ring or the command ring through the second common dispatcher.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. A computer-readable medium to store instructions for controlling performance of a data transfer operation, the instructions including:
<claim-text>a first set of instructions to initiate transfer of data from a host device to a peripheral device, the host device to include a host controller interface, a common protocol interface and a protocol engine, the host controller interface to include a common dispatcher, the common protocol interface to couple between the common dispatcher and the protocol engine, and the data is to be transferred between the controller interface and the protocol engine through the common protocol interface and the common dispatcher such that data is provided from the common dispatcher to the common protocol interface; and</claim-text>
<claim-text>a second set of instructions to transfer data from a prefetch buffer to the common protocol interface, the data to be transferred from the prefetch buffer to the common protocol interface through the common dispatcher.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The computer-readable medium of <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein the second set of instructions are to control the data to be transferred to the peripheral device through a protocol engine, the protocol engine converting the data into one of a plurality of protocol standards.</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. The computer-readable medium of <claim-ref idref="CLM-00018">claim 18</claim-ref>, wherein the protocol standards are different USB protocol standards.</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. The computer-readable medium of <claim-ref idref="CLM-00018">claim 18</claim-ref>, wherein the protocol standards are to cause the data to be transferred at different speeds.</claim-text>
</claim>
<claim id="CLM-00021" num="00021">
<claim-text>21. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the common dispatcher is to be provided at the controller interface to receive data from the common protocol interface, and the common dispatcher to provide data away from the controller interface to the common protocol interface. </claim-text>
</claim>
</claims>
</us-patent-grant>

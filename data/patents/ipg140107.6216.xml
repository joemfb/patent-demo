<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08627340-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08627340</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>13166947</doc-number>
<date>20110623</date>
</document-id>
</application-reference>
<us-application-series-code>13</us-application-series-code>
<us-term-of-grant>
<us-term-extension>201</us-term-extension>
<disclaimer>
<text>This patent is subject to a terminal disclaimer.</text>
</disclaimer>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>9</main-group>
<subgroup>54</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>719318</main-classification>
</classification-national>
<invention-title id="d2e55">Managing events generated from business objects</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>6363435</doc-number>
<kind>B1</kind>
<name>Fernando et al.</name>
<date>20020300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>7590640</doc-number>
<kind>B2</kind>
<name>Wolber et al.</name>
<date>20090900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>2002/0077929</doc-number>
<kind>A1</kind>
<name>Knorr et al.</name>
<date>20020600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>705 26</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>2006/0070083</doc-number>
<kind>A1</kind>
<name>Brunswig et al.</name>
<date>20060300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>719318</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>2007/0288891</doc-number>
<kind>A1</kind>
<name>Aakolk et al.</name>
<date>20071200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>2008/0046259</doc-number>
<kind>A1</kind>
<name>Johnston</name>
<date>20080200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>2008/0065443</doc-number>
<kind>A1</kind>
<name>Gorur et al.</name>
<date>20080300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>2008/0184266</doc-number>
<kind>A1</kind>
<name>Bornhoved et al.</name>
<date>20080700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>2009/0007146</doc-number>
<kind>A1</kind>
<name>Hunsinger et al.</name>
<date>20090100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>719318</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>2009/0059941</doc-number>
<kind>A1</kind>
<name>Callaway et al.</name>
<date>20090300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>370412</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>2009/0138294</doc-number>
<kind>A1</kind>
<name>Kumaran et al.</name>
<date>20090500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>2010/0023339</doc-number>
<kind>A1</kind>
<name>Baeuerle et al.</name>
<date>20100100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00013">
<document-id>
<country>US</country>
<doc-number>2010/0122270</doc-number>
<kind>A1</kind>
<name>Lin</name>
<date>20100500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>719318</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00014">
<document-id>
<country>US</country>
<doc-number>2010/0161676</doc-number>
<kind>A1</kind>
<name>Kazmaier et al.</name>
<date>20100600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00015">
<document-id>
<country>US</country>
<doc-number>2010/0179847</doc-number>
<kind>A1</kind>
<name>Cope et al.</name>
<date>20100700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00016">
<document-id>
<country>US</country>
<doc-number>2010/0251264</doc-number>
<kind>A1</kind>
<name>McGuire et al.</name>
<date>20100900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00017">
<document-id>
<country>US</country>
<doc-number>2011/0218927</doc-number>
<kind>A1</kind>
<name>Addala et al.</name>
<date>20110900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>705301</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00018">
<document-id>
<country>US</country>
<doc-number>2012/0124584</doc-number>
<kind>A1</kind>
<name>Addala et al.</name>
<date>20120500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>718102</main-classification></classification-national>
</us-citation>
<us-citation>
<nplcit num="00019">
<othercit>Cibr&#xe1;n, M.A.; D'Hondt, M.; Jonckers, V., &#x201c;Aspect-Oriented Programming for Connecting Business Rules,&#x201d; In Proceedings of BIS International Conference, Colorado Springs, USA, Jun. 2003, pp. 1-10.</othercit>
</nplcit>
<category>cited by examiner</category>
</us-citation>
<us-citation>
<nplcit num="00020">
<othercit>IBM et al.; &#x201c;Method to Preserve Context Associated with Business Data Property Copied Intra Business Graph&#x201d;, IPCOM000167124D, Jan. 31, 2008.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00021">
<othercit>IBM et al.; &#x201c;Method to Preserve Context Associated with Business Data Property Copied Inter Business Graph&#x201d;, IPCOM000167123D, Jan. 31, 2008.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00022">
<othercit>Decker et al.; &#x201c;A Graphical Notation for Modeling Complex Events in Business Processes&#x201d;, EDOC 11th IEEE Inter. Conf. on, Oct. 15-19, 2007, pp. 27-36.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00023">
<othercit>Buss et al.; &#x201c;Building Complex Models with LEGOs (Listener Event Graph Objects)&#x201d;, Proceedings of The Winter, Dec. 8-11, 2002, pp. 732-737.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>20</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>719318</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>6</number-of-drawing-sheets>
<number-of-figures>7</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20120331486</doc-number>
<kind>A1</kind>
<date>20121227</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Bhattacharyya</last-name>
<first-name>Anamitra</first-name>
<address>
<city>Chelmsford</city>
<state>MA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Dozortsev</last-name>
<first-name>Boris</first-name>
<address>
<city>Newton</city>
<state>MA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="003" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Sarasin</last-name>
<first-name>Thomas John</first-name>
<address>
<city>Fitchburg</city>
<state>MA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Bhattacharyya</last-name>
<first-name>Anamitra</first-name>
<address>
<city>Chelmsford</city>
<state>MA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Dozortsev</last-name>
<first-name>Boris</first-name>
<address>
<city>Newton</city>
<state>MA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="003" designation="us-only">
<addressbook>
<last-name>Sarasin</last-name>
<first-name>Thomas John</first-name>
<address>
<city>Fitchburg</city>
<state>MA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Garg Law Firm, PLLC</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
<agent sequence="02" rep-type="attorney">
<addressbook>
<last-name>Garg</last-name>
<first-name>Rakesh</first-name>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
<agent sequence="03" rep-type="attorney">
<addressbook>
<last-name>Flynn</last-name>
<first-name>John</first-name>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>International Business Machines Corporation</orgname>
<role>02</role>
<address>
<city>Armonk</city>
<state>NY</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Sough</last-name>
<first-name>H S</first-name>
<department>2194</department>
</primary-examiner>
<assistant-examiner>
<last-name>Wathen</last-name>
<first-name>Brian W</first-name>
</assistant-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">A method, system, and computer program product for managing events generated from business objects in a business transactions environment are provided in the illustrative embodiments. A first event being raised by a business object in a plurality of business objects configured in a business entity is detected. The business entity executes in the data processing system and provides a function for processing a request. A determination is made whether a second event has been detected prior to the first event and during the processing of the request. In response to the determining being affirmative, first event data associated with the first event is combined with second event data stored from the second event. The combining results in consolidated event data. The consolidated event data is published in response to the request upon completing the processing of the request.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="229.70mm" wi="170.69mm" file="US08627340-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="213.28mm" wi="174.58mm" file="US08627340-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="177.04mm" wi="150.62mm" file="US08627340-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="215.05mm" wi="173.40mm" file="US08627340-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="219.96mm" wi="116.42mm" file="US08627340-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="229.53mm" wi="169.76mm" file="US08627340-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="189.57mm" wi="126.07mm" file="US08627340-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">TECHNICAL FIELD</heading>
<p id="p-0002" num="0001">The present invention relates generally to a computer implemented method, system, and computer program product for processing business transactions. More particularly, the present invention relates to a computer implemented method, system, and computer program product for managing events generated from business objects participating in a business transaction.</p>
<heading id="h-0002" level="1">BACKGROUND</heading>
<p id="p-0003" num="0002">Software applications interact with each other in a data processing environment for processing business transactions. A business transaction is a request for performing an operation, with or without a corresponding response. Typically, such a request is for an operation relative to data maintained for a business purpose.</p>
<p id="p-0004" num="0003">For example, a purchase order entry application may send a request for getting a purchase order approved to another application that may implement a purchase order approval process. As another example, a scheduler application may send a request to begin processing the purchase orders for the day to another application that may implement a batch process for submitting and processing purchase orders.</p>
<p id="p-0005" num="0004">An application for processing a business transaction usually depends on a collection (cloud) of Business Objects (BO). A business object is a combination of code and data that provides certain functionality that is useful in processing a business transaction. Several business objects can interact with each other, such as in a cloud, to provide more complex business functions. A cloud of business objects may be configured to offer particular functions or services intended to be offered by the application.</p>
<heading id="h-0003" level="1">SUMMARY</heading>
<p id="p-0006" num="0005">The illustrative embodiments provide a method, system, and computer program product for managing events generated from business objects.</p>
<p id="p-0007" num="0006">An embodiment detects a first event, the first event being raised by a business object in a plurality of business objects configured in a business entity. The business entity executes in the data processing system and provides a function for processing a request. The embodiment determines whether a second event has been detected prior to the event and during the processing of the request. The embodiment, responsive to the determining being affirmative, combines a first event data associated with the event with a second event data stored from the second event, the combining resulting in consolidated event data. The embodiment publishes the consolidated event data responsive to the request upon completing processing of the request.</p>
<p id="p-0008" num="0007">In another embodiment, changing of transaction data due to the request gives rise to the first event, and the first event includes the transaction data in a changed state subsequent to the changing.</p>
<p id="p-0009" num="0008">In another embodiment, the detecting the first event further includes associating a listener with the business object in the business entity. The embodiment uniquely identifies the business object in the business entity to the listener.</p>
<p id="p-0010" num="0009">Another embodiment further configures the business object as an active business object, the active business object being permitted to raise events. The embodiment configures a second business object in the plurality of business objects as a passive business object, the passive business object being prevented from raising events.</p>
<p id="p-0011" num="0010">In another embodiment, the business object in the plurality of business objects is not configured to propagate the first event via a parent-child relationship with a second business object. The business object raises the first event upon detecting a change in transaction data associated with the request as a result of a processing of the request by the business object.</p>
<p id="p-0012" num="0011">In another embodiment, the determining whether a second event has been detected is performed by referring an event flag.</p>
<p id="p-0013" num="0012">In another embodiment, the event flag is maintained relative to a root business object of a hierarchy of the plurality of business objects in the business entity.</p>
<p id="p-0014" num="0013">In another embodiment, the event flag is maintained relative to a child business object in the hierarchy. In the embodiment, the event flag registers only those events that arise from those business objects that appear in a sub-graph below the child business object in the hierarchy.</p>
<p id="p-0015" num="0014">In another embodiment, the event flag is a non-persisted property of the root business object.</p>
<p id="p-0016" num="0015">In another embodiment, the combining results in merging a first change in the transaction data that caused the first event with a second change in the transaction data that caused the second event.</p>
<p id="p-0017" num="0016">In another embodiment, the business object participates in a second business entity. The embodiment further checks whether the first event is raised by the business object in the business entity. The embodiment ignores the first event and omits the combining responsive to the first event being raised by the business object in the second business entity.</p>
<p id="p-0018" num="0017">Another embodiment further categorizes the first event into one of a plurality of categories. In the embodiment, the combining results in a categorized consolidated event data by merging a first change in the transaction data that caused the first event with a second change in the transaction data that caused the second event such that the first event and the second event are in a common category.</p>
<p id="p-0019" num="0018">In another embodiment, the publishing includes publishing the categorized consolidated event data for each such category in the plurality of categories that includes at least one event during the processing of the request.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE SEVERAL VIEWS OF THE DRAWINGS</heading>
<p id="p-0020" num="0019">The novel features believed characteristic of the embodiments of the invention are set forth in the appended claims. An embodiment of the invention itself, however, as well as a preferred mode of use, further objectives and advantages thereof, will best be understood by reference to the following detailed description of an illustrative embodiment when read in conjunction with the accompanying drawings, wherein:</p>
<p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. 1</figref> pictorial representation of a network of data processing systems in which illustrative embodiments may be implemented;</p>
<p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. 2</figref> depicts a block diagram of a data processing system in which illustrative embodiments may be implemented;</p>
<p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. 3</figref> depicts a block diagram of a configuration to publish consolidated events from business objects in accordance with an illustrative embodiment;</p>
<p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. 4</figref> depicts a block diagram of an example business transaction environment configuration in which events are consolidated from multiple business objects in multiple business entities for multiple consumer applications in accordance with an illustrative embodiment;</p>
<p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. 5</figref> depicts a flowchart of a process of configuring a business transactions environment for managing events generated from business objects in accordance with an illustrative embodiment;</p>
<p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. 6</figref> depicts a flowchart of a process of managing events generated from business objects in accordance with an illustrative embodiment; and</p>
<p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. 7</figref> depicts a block diagram of an example event management application in accordance with an illustrative embodiment.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0005" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0028" num="0027">The business objects can be configured into groups or clouds by establishing relationships between the objects. A Business Entity (BE) is a logical grouping of business objects in which a business object has a relationship with another business object. For example, one object may be in a parent-child relationship with another business object and the child business object may provide additional functionality over the functionality of the parent business object, or specialize a functionality provided by the parent business object.</p>
<p id="p-0029" num="0028">A business entity represents an atomic business object for another application, such as a software application that consumes the functionality, data, or services provided by the business entity. In essence, a business entity is a virtual business object to the consumer and is represented by a graph of related business objects within the application platform. Some examples of a business entity are purchase order, a work order, an asset, or inventory, represented as a graph of relationships amongst business objects that encapsulate certain parts of the purchase order, a work order, an asset, or inventory respectively.</p>
<p id="p-0030" num="0029">For example, a Work Management business entity might include a graph of related business objects such as a work order business object, a job plan business object, planned material business object, and inventory reservations business object. Each of these example business objects is configured for providing a specific functionality within the work management business entity. Another application&#x2014;a consumer application&#x2014;may consume or use the work management business entity's work management functionality. From the point of view of the consumer application, the work management functionality appears to be provided by the work management business entity as a whole. The consumer application does not know or does not have to know the individual business objects that make up the work management business entity.</p>
<p id="p-0031" num="0030">A consumer application sends a request to a business entity or a business entity configured within another application. The embodiments of the invention recognize that a consumer application often has to be notified of changes to the business entity resulting from the request. Particularly, the consumer application is interested in listening to events from the graph of business objects in the business entity as a whole and does want to know which specific business object triggered which specific event. An event is a change in data related to the request as a result of the request.</p>
<p id="p-0032" num="0031">A business entity can be configured by selecting some business objects from a collection of business objects, and relating the selected business objects with one another in a hierarchical graph. The selection of business objects and the structure of the graph can be customized for the functionality contemplated from the business entity being designed, the business objects in the business entity cannot know in advance to which business entities or parent business objects they will belong. Often, the same business object will, simultaneously, or a different times, belong to different business entities and appear in different positions within the same or different graphs.</p>
<p id="p-0033" num="0032">Thus, the embodiments of the invention recognize that a business object cannot be designed to provide a mechanism to contact a known parent business object when the state of the data changes at the business object. In other words, when a business object triggers an event, to with, a change of state of the data being manipulated by the business object, the business object cannot communicate the event up a given hierarchy by any parent-child communication mechanism for propagating events in a business entity.</p>
<p id="p-0034" num="0033">Each business object in a business entity is a potential source of events. Sometimes, multiple instances of a common business object are present in a business entity, giving rise to the possibility that the same event will be generated by multiple instances of the business object under certain circumstances.</p>
<p id="p-0035" num="0034">When a consumer application is notified of an event, the changed data that caused the event is supplied with the notification. In case of multiple events from the same business entity, and in the case where many business objects raise the same event, the consumer application is inundated with duplicative data.</p>
<p id="p-0036" num="0035">The embodiments of the invention recognize that a typical consumer application in a business transaction processing environment is interested in a reduced number of events, and particularly in those events that communicate distinct state changes of the associated data.</p>
<p id="p-0037" num="0036">Some prior art methods address this problem, by providing triggers on the business objects. However, no easy way exists to coordinate the trigger processing when more than one business objects within a business entity initiate the event. Without a complex mechanism to manage triggers, multiple events are initiated for the business entity, giving rise to the problem of the consumer application receiving multiple events, as recognized by the embodiments of the invention.</p>
<p id="p-0038" num="0037">The illustrative embodiments used to describe the invention generally address and solve the above-described problems and other problems related to communicating events from business entities to consumer applications. The illustrative embodiments provide a method, system, and computer program product for managing events generated from business objects in a business transactions environment.</p>
<p id="p-0039" num="0038">Generally, the illustrative embodiments provide a mechanism to limit the number of events being communicated from a business entity to a consumer application by consolidating certain events together before communicating the consolidated event to the consumer application.</p>
<p id="p-0040" num="0039">In one example configuration, an event management application according to an illustrative embodiment may consolidate all events arising during the processing of a request, and communicate the single consolidated event to the consumer application that originated the request. Operating in such a configuration, the event management application of an embodiment reduces the number of events begin communicated or published to the consumer application from many to one. The reduction is effective regardless of the number of business objects in the business entity that experience a change in the state of the data they may be processing responsive to the request.</p>
<p id="p-0041" num="0040">In another example configuration, an event management application according to an embodiment may categorize the events from the various business objects in a given business entity into different categories. The example configuration may then consolidate the events of each category into a single consolidated event. The example configuration may then send the consolidated events from the various categories to the consumer application. Operating in such a configuration, the event management application of an embodiment reduces the number of events being communicated or published to the consumer application from many separate events to one consolidated event for each category of events.</p>
<p id="p-0042" num="0041">The event management application also addresses the case when an event from a single business object initiates multiple events. For example, an event generated by a business object&#x2014;a business object event&#x2014;can give rise to multiple events at the business entity level&#x2014;a business entity event&#x2014;such as when the business object participates in more than one business entity. As another example, multiple instances of the same business object, using different relationships with other objects, may exist within one business entity. Different instances of the same business object may initiate multiple events of the same type under certain circumstances.</p>
<p id="p-0043" num="0042">The event management application according to the illustrative embodiments further supports a flexible configuration option whereby an application may choose to turn on, or off, the event generation capabilities for individual business objects within the graph. For example, an administration application may designate some business objects as active and some as passive during the configuration of a business entity. An active business object or an instance thereof is a business object or an instance thereof that can generate events. A passive business object or an instance thereof is a business object or an instance thereof that is prevented from generating events.</p>
<p id="p-0044" num="0043">The illustrative embodiments are described with respect to certain data and data structures only as examples. Such descriptions are not intended to be limiting on the embodiments of the invention. For example, an illustrative embodiment described with respect to a flag can be implemented using a separate data structure in memory, a non-persisted property of an existing business object, or any other suitable structure for holding a flag value within the scope of the embodiments of the invention.</p>
<p id="p-0045" num="0044">Furthermore, the illustrative embodiments may be implemented with respect to any type of data, data source, or access to a data source over a data network. Any type of data storage device may provide the data, such as a boot image, to an embodiment of the invention, either locally at a data processing system or over a data network, within the scope of the embodiments of the invention.</p>
<p id="p-0046" num="0045">The illustrative embodiments are further described with respect to certain applications only as examples. Such descriptions are not intended to be limiting on the embodiments of the invention. An embodiment of the invention may be implemented with respect to any type of application, such as, for example, applications that are served, the instances of any type of server application, a platform application, a stand-alone application, an administration application, or a combination thereof.</p>
<p id="p-0047" num="0046">An application, including an application implementing all or part of an embodiment, may further include data objects, code objects, encapsulated instructions, application fragments, services, and other types of resources available in a data processing environment. For example, a Java&#xae; object, an Enterprise Java Bean (EJB), a servlet, or an applet may be manifestations of an application with respect to which an embodiment of the invention may be implemented. (Java and all Java-based trademarks and logos are trademarks or registered trademarks of Oracle and/or its affiliates).</p>
<p id="p-0048" num="0047">An illustrative embodiment may be implemented in hardware, software, or a combination thereof. An illustrative embodiment may further be implemented with respect to any type of data storage resource, such as a physical or virtual data storage device, that may be available in a given data processing system configuration.</p>
<p id="p-0049" num="0048">The examples in this disclosure are used only for the clarity of the description and are not limiting on the illustrative embodiments. Additional data, operations, actions, tasks, activities, and manipulations will be conceivable from this disclosure and the same are contemplated within the scope of the illustrative embodiments.</p>
<p id="p-0050" num="0049">The illustrative embodiments are described using specific code, designs, architectures, layouts, schematics, and tools only as examples and are not limiting on the illustrative embodiments. Furthermore, the illustrative embodiments are described in some instances using particular software, tools, and data processing environments only as an example for the clarity of the description. The illustrative embodiments may be used in conjunction with other comparable or similarly purposed structures, systems, applications, or architectures.</p>
<p id="p-0051" num="0050">Any advantages listed herein are only examples and are not intended to be limiting on the illustrative embodiments. Additional or different advantages may be realized by specific illustrative embodiments. Furthermore, a particular illustrative embodiment may have some, all, or none of the advantages listed above.</p>
<p id="p-0052" num="0051">With reference to the figures and in particular with reference to <figref idref="DRAWINGS">FIGS. 1 and 2</figref>, these figures are example diagrams of data processing environments in which illustrative embodiments may be implemented. <figref idref="DRAWINGS">FIGS. 1 and 2</figref> are only examples and are not intended to assert or imply any limitation with regard to the environments in which different embodiments may be implemented. A particular implementation may make many modifications to the depicted environments based on the following description.</p>
<p id="p-0053" num="0052"><figref idref="DRAWINGS">FIG. 1</figref> depicts a pictorial representation of a network of data processing systems in which illustrative embodiments may be implemented. Data processing environment <b>100</b> is a network of computers in which the illustrative embodiments may be implemented. Data processing environment <b>100</b> includes network <b>102</b>. Network <b>102</b> is the medium used to provide communications links between various devices and computers connected together within data processing environment <b>100</b>. Network <b>102</b> may include connections, such as wire, wireless communication links, or fiber optic cables. Server <b>104</b> and server <b>106</b> couple to network <b>102</b> along with storage unit <b>108</b>. Software applications may execute on any computer in data processing environment <b>100</b>.</p>
<p id="p-0054" num="0053">In addition, clients <b>110</b>, <b>112</b>, and <b>114</b> couple to network <b>102</b>. A data processing system, such as server <b>104</b> or <b>106</b>, or client <b>110</b>, <b>112</b>, or <b>114</b> may contain data and may have software applications or software tools executing thereon.</p>
<p id="p-0055" num="0054">Any data processing system, such as client <b>114</b>, may include application <b>115</b> that may act as a consumer application. Any data processing system, such as server <b>104</b>, may include an event management application, such as event management application <b>105</b>. Event management application <b>105</b> may operate in conjunction with a business entity (not shown) that may execute in any data processing system and generate the events that event management application <b>105</b> consolidates.</p>
<p id="p-0056" num="0055">Servers <b>104</b> and <b>106</b>, storage unit <b>108</b>, and clients <b>110</b>, <b>112</b>, and <b>114</b> may couple to network <b>102</b> using wired connections, wireless communication protocols, or other suitable data connectivity. Clients <b>110</b>, <b>112</b>, and <b>114</b> may be, for example, personal computers or network computers.</p>
<p id="p-0057" num="0056">In the depicted example, server <b>104</b> may provide data, such as boot files, operating system images, and applications to clients <b>110</b>, <b>112</b>, and <b>114</b>. Clients <b>110</b>, <b>112</b>, and <b>114</b> may be clients to server <b>104</b> in this example. Clients <b>110</b>, <b>112</b>, <b>114</b>, or some combination thereof, may include their own data, boot files, operating system images, and applications. Data processing environment <b>100</b> may include additional servers, clients, and other devices that are not shown.</p>
<p id="p-0058" num="0057">In the depicted example, data processing environment <b>100</b> may be the Internet. Network <b>102</b> may represent a collection of networks and gateways that use the Transmission Control Protocol/Internet Protocol (TCP/IP) and other protocols to communicate with one another. At the heart of the Internet is a backbone of data communication links between major nodes or host computers, including thousands of commercial, governmental, educational, and other computer systems that route data and messages. Of course, data processing environment <b>100</b> also may be implemented as a number of different types of networks, such as for example, an intranet, a local area network (LAN), or a wide area network (WAN). <figref idref="DRAWINGS">FIG. 1</figref> is intended as an example, and not as an architectural limitation for the different illustrative embodiments.</p>
<p id="p-0059" num="0058">Among other uses, data processing environment <b>100</b> may be used for implementing a client-server environment in which the illustrative embodiments may be implemented. A client-server environment enables software applications and data to be distributed across a network such that an application functions by using the interactivity between a client data processing system and a server data processing system. Data processing environment <b>100</b> may also employ a service oriented architecture where interoperable software components distributed across a network may be packaged together as coherent business applications.</p>
<p id="p-0060" num="0059">With reference to <figref idref="DRAWINGS">FIG. 2</figref>, this figure depicts a block diagram of a data processing system in which illustrative embodiments may be implemented. Data processing system <b>200</b> is an example of a computer, such as server <b>104</b> or client <b>110</b> in <figref idref="DRAWINGS">FIG. 1</figref>, in which computer usable program code or instructions implementing the processes of the illustrative embodiments may be located for the illustrative embodiments.</p>
<p id="p-0061" num="0060">In the depicted example, data processing system <b>200</b> employs a hub architecture including North Bridge and memory controller hub (NB/MCH) <b>202</b> and south bridge and input/output (I/O) controller hub (SB/ICH) <b>204</b>. Processing unit <b>206</b>, main memory <b>208</b>, and graphics processor <b>210</b> are coupled to north bridge and memory controller hub (NB/MCH) <b>202</b>. Processing unit <b>206</b> may contain one or more processors and may be implemented using one or more heterogeneous processor systems. Graphics processor <b>210</b> may be coupled to the NB/MCH through an accelerated graphics port (AGP) in certain implementations.</p>
<p id="p-0062" num="0061">In the depicted example, local area network (LAN) adapter <b>212</b> is coupled to south bridge and I/O controller hub (SB/ICH) <b>204</b>. Audio adapter <b>216</b>, keyboard and mouse adapter <b>220</b>, modem <b>222</b>, read only memory (ROM) <b>224</b>, universal serial bus (USB) and other ports <b>232</b>, and PCI/PCIe devices <b>234</b> are coupled to south bridge and I/O controller hub <b>204</b> through bus <b>238</b>. Hard disk drive (HDD) <b>226</b> and CD-ROM <b>230</b> are coupled to south bridge and I/O controller hub <b>204</b> through bus <b>240</b>. PCI/PCIe devices may include, for example, Ethernet adapters, add-in cards, and PC cards for notebook computers. PCI uses a card bus controller, while PCIe does not. ROM <b>224</b> may be, for example, a flash binary input/output system (BIOS). Hard disk drive <b>226</b> and CD-ROM <b>230</b> may use, for example, an integrated drive electronics (IDE) or serial advanced technology attachment (SATA) interface. A super I/O (SIO) device <b>236</b> may be coupled to south bridge and I/O controller hub (SB/ICH) <b>204</b>.</p>
<p id="p-0063" num="0062">An operating system runs on processing unit <b>206</b>. The operating system coordinates and provides control of various components within data processing system <b>200</b> in <figref idref="DRAWINGS">FIG. 2</figref>. The operating system may be a commercially available operating system such as Microsoft&#xae; Windows&#xae; (Microsoft and Windows are trademarks of Microsoft Corporation in the United States, other countries, or both), or Linux&#xae; (Linux is a trademark of Linus Torvalds in the United States, other countries, or both). An object oriented programming system, such as the Java&#x2122; programming system, may run in conjunction with the operating system and provides calls to the operating system from Java&#x2122; programs or applications executing on data processing system <b>200</b> (Java and all Java-based trademarks and logos are trademarks or registered trademarks of Oracle and/or its affiliates).</p>
<p id="p-0064" num="0063">Program instructions for the operating system, the object-oriented programming system, the processes of the illustrative embodiments, and applications or programs are located on storage devices, such as hard disk drive <b>226</b>, and may be loaded into a memory, such as, for example, main memory <b>208</b>, read only memory <b>224</b>, or one or more peripheral devices, for execution by processing unit <b>206</b>. Program instructions may also be stored permanently in non-volatile memory and either loaded from there or executed in place. For example, the synthesized program according to an embodiment can be stored in non-volatile memory and loaded from there into DRAM.</p>
<p id="p-0065" num="0064">The hardware in <figref idref="DRAWINGS">FIGS. 1-2</figref> may vary depending on the implementation. Other internal hardware or peripheral devices, such as flash memory, equivalent non-volatile memory, or optical disk drives and the like, may be used in addition to or in place of the hardware depicted in <figref idref="DRAWINGS">FIGS. 1-2</figref>. In addition, the processes of the illustrative embodiments may be applied to a multiprocessor data processing system.</p>
<p id="p-0066" num="0065">In some illustrative examples, data processing system <b>200</b> may be a personal digital assistant (PDA), which is generally configured with flash memory to provide non-volatile memory for storing operating system files and/or user-generated data. A bus system may comprise one or more buses, such as a system bus, an I/O bus, and a PCI bus. Of course, the bus system may be implemented using any type of communications fabric or architecture that provides for a transfer of data between different components or devices attached to the fabric or architecture.</p>
<p id="p-0067" num="0066">A communications unit may include one or more devices used to transmit and receive data, such as a modem or a network adapter. A memory may be, for example, main memory <b>208</b> or a cache, such as the cache found in north bridge and memory controller hub <b>202</b>. A processing unit may include one or more processors or CPUs.</p>
<p id="p-0068" num="0067">The depicted examples in <figref idref="DRAWINGS">FIGS. 1-2</figref> and above-described examples are not meant to imply architectural limitations. For example, data processing system <b>200</b> also may be a tablet computer, laptop computer, or telephone device in addition to taking the form of a PDA.</p>
<p id="p-0069" num="0068">Generally, a business entity definition establishes the business objects that are part of the business entity and the manner in which the business objects are related to each other. A business object-to-business entity is a many to many relationship. A business object is unaware of the fact that it is a part of a business entity. Only the business entity knows which business objects are included in the business entity. A business entity has a common root business object. The root business object is configured as an active business object. A business object has a name which is unique across the business object name space for a given business transactions environment. A business entity has a name which is unique across the business entity name space for a given business transactions environment. A business object is capable of generating events when created, updated, or deleted.</p>
<p id="p-0070" num="0069">There is no guaranteed order in which a business object would trigger an event compared to other business objects that are part of the same business entity. For example, in one case, a parent business object can raise an event before a child business object, and in a different situation the order might be reversed. Two Business objects may have one or more named relations between them. A relation name is unique only in the context of the two business objects it is relating. Each business object in a business entity can be reached from all other business objects in the same business entity. Business Entity Runtime, to with, the business transactions environment, includes multiple graphs of shared business objects co-existing in the application runtime space.</p>
<p id="p-0071" num="0070">With reference to <figref idref="DRAWINGS">FIG. 3</figref>, this figure depicts a block diagram of a configuration to publish consolidated events from business objects in accordance with an illustrative embodiment. Event management application <b>302</b> may be implemented as event management application <b>105</b> in <figref idref="DRAWINGS">FIG. 1</figref>. Business entity <b>304</b> may be any business entity formed in the manner described above. Root object <b>306</b>, objects <b>308</b>, <b>310</b>, <b>312</b>, and <b>314</b>, and object <b>316</b> may be business objects of any suitable type, content, or structure without limitation.</p>
<p id="p-0072" num="0071">For example, root object <b>306</b> may be a header object that forms the root of the graph formed by relationships <b>320</b>, <b>322</b>, <b>324</b>, <b>326</b>, and <b>328</b>. As an example, and without implying a limitation on the embodiments of the invention, objects <b>308</b> and <b>310</b> may be two instances of a common business object.</p>
<p id="p-0073" num="0072">Furthermore, some business objects in business entity <b>304</b> may be active and other business objects may be passive. As an example, object <b>316</b> may be a passive business object and may not generate events.</p>
<p id="p-0074" num="0073">Presently, without the benefit of event management application <b>302</b>, business objects in business entity <b>304</b> may generate and publish events independent of each other. For example, during the processing of a request, object <b>308</b> may publish an event regardless of whether object <b>310</b> is also publishing a similar event. Objects <b>312</b> and <b>314</b> may publish events irrespective of each other, the events including largely the same data with comparatively small amount of variations.</p>
<p id="p-0075" num="0074">Furthermore, in some cases, suppressing events from a business object in business entity <b>304</b> may be desirable. For example, business object <b>316</b> may be a logging object that logs the result of the processing of the request for audit purposes. A consumer application may not be interested in events that are generated as a result of logging activity. However, presently, without the benefit of the ability to set a business object as active or passive as provided by an illustrative embodiment, business entity <b>304</b> would also publish events from object <b>316</b>.</p>
<p id="p-0076" num="0075">Event management application <b>302</b> interacts with business entity <b>304</b> to consolidate the events being raised by objects <b>306</b>, <b>308</b>, <b>310</b>, <b>312</b>, and <b>314</b>. Event management application <b>302</b> also allows configuring object <b>316</b> as a passive object during the creation of business entity <b>304</b>. For example, in one embodiment, event management application <b>302</b> may configure object <b>316</b> as passive by ignoring the events raised by object <b>316</b> and not consolidating or merging those events with the events raised by other business objects in business entity <b>304</b>. In another example embodiment, event management application <b>302</b> may configure object <b>316</b> as passive by not associating an event listener with object <b>316</b>, as is described in further detail with respect to later figures.</p>
<p id="p-0077" num="0076">With reference to <figref idref="DRAWINGS">FIG. 4</figref>, this figure depicts a block diagram of an example business transaction environment configuration in which events are consolidated from multiple business objects in multiple business entities for multiple consumer applications in accordance with an illustrative embodiment. Consumer applications <b>402</b>, <b>404</b>, <b>406</b>, and <b>408</b>, labeled &#x201c;consumer <b>1</b>&#x201d;, &#x201c;consumer <b>2</b>&#x201d;, &#x201c;consumer <b>3</b>&#x201d;, and &#x201c;consumer <b>4</b>&#x201d; respectively, may each be analogous to application <b>115</b> in <figref idref="DRAWINGS">FIG. 1</figref>.</p>
<p id="p-0078" num="0077">Event management application <b>410</b>, <b>412</b>, and <b>414</b> may be one or more instances of an event management application according to an illustrative embodiment that may be configured to consolidate events from one or more business entities. One event management application is shown configured with one business entity in <figref idref="DRAWINGS">FIG. 4</figref> only as an example and not as a limitation. For example, in an implementation, event management application <b>410</b> may be configured to associate with and consolidate events published from business entity <b>416</b> as well as business entity <b>418</b> within the scope of the embodiments of the invention.</p>
<p id="p-0079" num="0078">Business entities <b>416</b>, <b>418</b>, and <b>420</b> may participate in Processing work orders. Business entity <b>416</b> may be an example &#x201c;Work Management&#x201d; business entity. Business entity <b>418</b> may be an example &#x201c;Item Inventory&#x201d; business entity. Business entity <b>420</b> may be an example &#x201c;Labor&#x201d; business entity.</p>
<p id="p-0080" num="0079">Work management business entity <b>416</b> may be configured with work order business object <b>422</b>, which many be related to work process materials business object <b>424</b> and job plan business object <b>426</b>. Business objects <b>424</b> and <b>426</b> may in turn be related to inventory reservation business object <b>428</b>.</p>
<p id="p-0081" num="0080">As described earlier, a business object may participate in more than one location in a business entity's graph, or in more than one location in more than one business entity graphs. As depicted in FIG. <b>4</b>'s example configuration, item inventory business entity <b>418</b> may be configured with item business object <b>430</b>, which may be related to inventory business object <b>432</b>. Inventory business object <b>432</b> may be related to inventory reservation business object <b>434</b> and inventory balance business object <b>436</b>. RSV business object <b>434</b> in business entity <b>418</b> may be the same business object as RSV business object <b>428</b> in business entity <b>416</b>, but may be active in business entity <b>416</b> and passive in business entity <b>418</b>.</p>
<p id="p-0082" num="0081">Similarly, labor business entity <b>420</b> may be configured with labor business object <b>438</b>, which may be related to job plan business object <b>440</b>. Job plan business object <b>440</b> in business entity <b>420</b> may be the same business object as job plan business object <b>426</b> in business entity <b>416</b>, but may be active in business entity <b>416</b> and passive in business entity <b>420</b>.</p>
<p id="p-0083" num="0082">Further features of the operation of the configuration of <figref idref="DRAWINGS">FIG. 4</figref> are described with respect to business entity <b>412</b> only for the clarity of the description. Accordingly, certain components are depicted in business entity <b>416</b> and omitted in other business entities for clarity.</p>
<p id="p-0084" num="0083">Any of consumer applications <b>402</b>-<b>408</b> may subscribe to events from any business entity. As depicted, consumer application <b>402</b> subscribes to events from business entities <b>416</b> and <b>420</b>. Consumer application <b>404</b> subscribes to events from business entities <b>416</b> and <b>418</b>. Consumer application <b>406</b> subscribes to events from business entities <b>416</b>, <b>418</b>, and <b>420</b>. Consumer application <b>408</b> subscribes to events from business entity <b>420</b>.</p>
<p id="p-0085" num="0084">Assume that event management application <b>410</b> receives a request for business entity <b>416</b> from consumer application <b>402</b>. Event management application <b>410</b> associates listener <b>452</b> with business entity <b>416</b> to listen for events raised in business entity <b>416</b>. Event management application <b>410</b> may further associate a subscriber identifier identifying consumer application <b>402</b> with listener <b>452</b>. The subscriber identifier is unique within the business transaction environment namespace.</p>
<p id="p-0086" num="0085">Event management application <b>410</b> causes Business entity <b>416</b> to in turn associate a listener with each active business object within business entity <b>416</b> and identifies them uniquely within business entity <b>416</b>. A listener associated with a business object is further associated with an object path to the business object and a relation path to the business object to uniquely identify the business object in the graph. For example, listener <b>454</b> is associated with business object <b>422</b>, listener <b>456</b> with business object <b>424</b>, listener <b>458</b> with business object <b>426</b>. Two listeners, <b>460</b> and <b>462</b>, are associated with business object <b>428</b> because business object <b>428</b> is reachable by using two relationships.</p>
<p id="p-0087" num="0086">Because a business object can participate in multiple business entities, a business object can have multiple listeners associated there with, one for each business entity and more than one for each business entity if the business object appears more than once in the business entity's graph, as is the case with business object <b>428</b> in business entity <b>416</b>. If inventory reservation business object <b>434</b> were active in business entity <b>418</b>, the inventory reservation business object across business entities <b>416</b>, <b>418</b>, and <b>420</b> would have three listeners associated therewith&#x2014;two listeners for the two relationships inventory reservation business object <b>428</b> participates in business entity <b>416</b>, and one for the participation in business entity <b>418</b>.</p>
<p id="p-0088" num="0087">Flag <b>464</b> in root business object <b>422</b> keeps track of whether an active business object in business entity <b>416</b> has raised an event during the processing of the current request. Flag <b>464</b> may be a data structure in business object <b>422</b>, a non-persisted property of business object <b>422</b>, an existing attribute of business object <b>422</b> used as a flag, a data structure separate from business object <b>422</b>'s data structure in a memory, or another suitable manner of tracking whether an event has been raised during the processing of the current request.</p>
<p id="p-0089" num="0088">During the processing of the request from consumer application <b>402</b>, event management application <b>410</b> sets flag <b>464</b> at the first event raised by any active business object in business entity <b>416</b>. Event management application <b>410</b> stores the data of the event. For each subsequent event raised by any active business object in business entity <b>416</b>, in any order, event management application <b>410</b> checks whether flag <b>464</b> is set, and if set, merges the data of the event with the stored data of previous events. When the processing of the request concludes, event management application <b>410</b> publishes the merged data of all the events that were raised in business entity <b>416</b> during the processing. The processing of the request may conclude in any manner suitable for an implementation, including but not limited to the request being completely processed, the request processing failing, the request generating a response, the request processing halting, or when the objective of the request has been accomplished.</p>
<p id="p-0090" num="0089">With reference to <figref idref="DRAWINGS">FIG. 5</figref>, this figure depicts a flowchart of a process of configuring a business transactions environment for managing events generated from business objects in accordance with an illustrative embodiment. Process <b>500</b> may be implemented in an event management application, such as event management application <b>410</b> in <figref idref="DRAWINGS">FIG. 4</figref>.</p>
<p id="p-0091" num="0090">Process <b>500</b> begins by receiving a subscription to a business entity's events (step <b>502</b>). As described with respect to <figref idref="DRAWINGS">FIG. 4</figref>, consumer application <b>402</b> may send a request to business entity <b>416</b> for processing. Sending a request for processing may be treated as one way of subscribing to the business entity's events. Those of ordinary skill in the art will be able to conceive other ways of subscribing to a business entity's events. For example, an administration application may subscribe to the events in all business entity's executing in a business transactions environment without actually sending a business transaction to any business entity.</p>
<p id="p-0092" num="0091">Process <b>500</b> associates a listener with the business entity and associates a subscriber identifier with the listener (step <b>504</b>). Process <b>500</b> associates a listener with an active business object in the business entity's graph (step <b>506</b>). Process <b>500</b> further associates suitable identifiers with the listener of step <b>506</b> to uniquely identify the business object and the business entity to whose events the listener is listening (step <b>508</b>).</p>
<p id="p-0093" num="0092">For example, process <b>500</b> may associate with the listener of a business object the subscriber identifier, an identifier of the business entity, an object path of the business object, and a relationship path of the business object. Note that these identifiers and paths are described in this disclosure as example ways of uniquely identifying a business object, business entity, or a listener. These identifiers and paths are not intended to be limiting on the embodiments of the invention. Those of ordinary skill in the art will be able to conceive many other ways of accomplishing a similar purpose, and the same are contemplated within the scope of the embodiments of the invention.</p>
<p id="p-0094" num="0093">Process <b>500</b> determines whether more active business objects remain in the business entity with which listeners have to be associated (step <b>510</b>). If more active business objects remain (&#x201c;Yes&#x201d; path of step <b>510</b>), process <b>500</b> selects an active business object with which a listener has not yet been associated (step <b>512</b>). Process <b>500</b> returns to step <b>506</b>.</p>
<p id="p-0095" num="0094">If all active business objects in the business entity have been associated with suitable number of listeners (&#x201c;No&#x201d; path of step <b>510</b>), process <b>500</b> proceeds to listen to the events being generated in the business entity (step <b>514</b>). Process <b>500</b> exits at exit point marked &#x201c;A&#x201d; to enter another process, such as process <b>600</b> in <figref idref="DRAWINGS">FIG. 6</figref>, at a corresponding entry point marked &#x201c;A&#x201d; in the other process.</p>
<p id="p-0096" num="0095">With reference to <figref idref="DRAWINGS">FIG. 6</figref>, this figure depicts a flowchart of a process of managing events generated from business objects in accordance with an illustrative embodiment. Process <b>600</b> may be implemented in an event management application, such as event management application <b>410</b> in <figref idref="DRAWINGS">FIG. 4</figref>.</p>
<p id="p-0097" num="0096">Process <b>600</b> begins by detecting an event (step <b>602</b>). Another process, such as process <b>500</b> in <figref idref="DRAWINGS">FIG. 5</figref> may enter at step <b>602</b> through entry point marked &#x201c;A&#x201d; as well. Process <b>600</b> determines whether the event is from a business object in the correct business entity (step <b>604</b>). For example, process <b>600</b> may compare the object path and the relationship path in the event with the object path and relationship path of the corresponding object in the business entity whose events are being consolidated. If the paths match, the event is from a business object in the correct business entity, otherwise not.</p>
<p id="p-0098" num="0097">If the event is not from the correct business object (&#x201c;No&#x201d; path of step <b>604</b>), process <b>600</b> ignore the event (step <b>606</b>). Process <b>600</b> proceeds to step <b>618</b> thereafter.</p>
<p id="p-0099" num="0098">If the event is from the correct business object in the correct business entity (&#x201c;Yes&#x201d; path of step <b>604</b>), process <b>600</b> may optionally categorize the event (step <b>608</b>). For example, when process <b>600</b> is being used for generating a single event for each request, step <b>608</b> may be omitted. When process <b>600</b> is being used for generating a single event per category per request, step <b>608</b> may categorize the events and consolidate them as described earlier.</p>
<p id="p-0100" num="0099">Process <b>600</b> determines whether the event flag, such as flag <b>464</b> in <figref idref="DRAWINGS">FIG. 4</figref>, is set (step <b>610</b>). If the flag is not set (&#x201c;No&#x201d; path of step <b>610</b>), process <b>600</b> stores the event by storing the data in the changed state that resulted in the event (step <b>612</b>). Process <b>600</b> sets the event flag (step <b>614</b>).</p>
<p id="p-0101" num="0100">If the event flag is set (&#x201c;Yes&#x201d; path of step <b>610</b>), process <b>600</b> merges the event with the stored event, such as by merging the changed data with the changed data resulting from the previous events (step <b>616</b>). Process <b>600</b> determines whether the processing of the request is complete (step <b>618</b>). If the processing is not complete (&#x201c;No&#x201d; path of step <b>618</b>), process <b>600</b> returns to step <b>602</b> and continues monitoring the events.</p>
<p id="p-0102" num="0101">If the processing of the request is complete (&#x201c;Yes&#x201d;&#x2019; path of step <b>618</b>), process <b>600</b> may optionally apply a rule or a condition to the consolidated event data (step <b>620</b>). For example, a consumer application may want the event notification to be treated in a specific manner based on the contents of the event data once the event data has been consolidated. The condition applied in step <b>620</b> may take any suitable form, including but not limited to code or logic, and may be provided to process <b>600</b> by any source, including but not limited to consumer applications.</p>
<p id="p-0103" num="0102">Process <b>600</b> sends or published the event notification using the consolidated event data (step <b>622</b>). Process <b>600</b> ends thereafter.</p>
<p id="p-0104" num="0103">With reference to <figref idref="DRAWINGS">FIG. 7</figref>, this figure depicts a block diagram of an example event management application in accordance with an illustrative embodiment. Event management application <b>702</b> may be used as event management application <b>410</b> in <figref idref="DRAWINGS">FIG. 4</figref>, and for implementing processes <b>500</b> and <b>600</b> in <figref idref="DRAWINGS">FIGS. 5 and 6</figref> respectively.</p>
<p id="p-0105" num="0104">Event management application <b>702</b> receives events <b>704</b> from one or more business entities being monitored. Event management application <b>702</b> includes component <b>706</b> for categorizing the events into various categories, such as for consolidation by categories of events.</p>
<p id="p-0106" num="0105">Event management application <b>702</b> further includes component <b>708</b> for setting the event flag, wherever the flag may be implemented as described earlier. In one embodiment, the flag may be associated with the entire graph of the business entity, such as at the root business object level. In another embodiment, more than one flags may be used, such as a flag at each sub-graph level, the sub-graph beginning at some business object in the graph and including all the parent-child relationships underneath.</p>
<p id="p-0107" num="0106">Event management application <b>702</b> further includes component <b>710</b> for consolidating the events per request, or consolidating events per category per request, or per sub-part of the request as handled by a sub-graph. Component <b>712</b> provides the condition processing, such as in the optional step <b>620</b> in <figref idref="DRAWINGS">FIG. 6</figref>.</p>
<p id="p-0108" num="0107">Event management application <b>702</b> publishes consolidated event notification <b>714</b> per request, per even category per request, or per sub-graph as event management application <b>702</b> may be configured. The publication may occur by any suitable means, including but not limited to data transmission over a data network. The publication may transmit the data in a changed state resulting from the request.</p>
<p id="p-0109" num="0108">The flowchart and block diagrams in the Figures illustrate the architecture, functionality, and operation of possible implementations of systems, methods, and computer program products according to various embodiments of the invention. In this regard, each block in the flowchart or block diagrams may represent a module, segment, or portion of code, which comprises one or more executable instructions for implementing the specified logical function(s). It should also be noted that, in some alternative implementations, the functions noted in the block may occur out of the order noted in the figures. For example, two blocks shown in succession may, in fact, be executed substantially concurrently, or the blocks may sometimes be executed in the reverse order, depending upon the functionality involved. It will also be noted that each block of the block diagrams and/or flowchart illustration, and combinations of blocks in the block diagrams and/or flowchart illustration, can be implemented by special purpose hardware-based systems that perform the specified functions or acts, or combinations of special purpose hardware and computer instructions.</p>
<p id="p-0110" num="0109">Thus, a computer implemented method, system, and computer program product are provided in the illustrative embodiments for managing events generated from business objects in a business transactions environment. Using an embodiment of the invention, the number of events published to consumer applications is greatly reduced in a business transactions environment. Consequently, the consumer applications do not have to receive or handle largely duplicative business data with only small amounts of changes resulting from each of the numerous events. An embodiment consolidates the changed states from the various events during the processing of a request, and sends a consolidated changed event data to the consumer applications. An embodiment thus reduces network congestion, workload on consumer applications, and code complexity to handle and evaluate each event at the consumer applications.</p>
<p id="p-0111" num="0110">As will be appreciated by one skilled in the art, aspects of the present invention may be embodied as a system, method, or computer program product. Accordingly, aspects of the present invention may take the form of an entirely hardware embodiment, an entirely software embodiment (including firmware, resident software, micro-code, etc.) or an embodiment combining software and hardware aspects that may all generally be referred to herein as a &#x201c;circuit,&#x201d; &#x201c;module&#x201d; or &#x201c;system.&#x201d; Furthermore, aspects of the present invention may take the form of a computer program product embodied in one or more computer readable storage device(s) or computer readable media having computer readable program code embodied thereon.</p>
<p id="p-0112" num="0111">Any combination of one or more computer readable storage device(s) or computer readable media may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage device may be, for example, but not limited to, an electronic, magnetic, optical, electromagnetic, infrared, or semiconductor system, apparatus, or device, or any suitable combination of the foregoing. More specific examples (a non-exhaustive list) of the computer readable storage device would include the following: an electrical connection having one or more wires, a portable computer diskette, a hard disk, a random access memory (RAM), a read-only memory (ROM), an erasable programmable read-only memory (EPROM or Flash memory), an optical fiber, a portable compact disc read-only memory (CD-ROM), an optical storage device, a magnetic storage device, or any suitable combination of the foregoing. In the context of this document, a computer readable storage device may be any tangible device or medium that can contain, or store a program for use by or in connection with an instruction execution system, apparatus, or device.</p>
<p id="p-0113" num="0112">Program code embodied on a computer readable storage device or computer readable medium may be transmitted using any appropriate medium, including but not limited to wireless, wireline, optical fiber cable, RF, etc., or any suitable combination of the foregoing.</p>
<p id="p-0114" num="0113">Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages, including an object oriented programming language such as Java, Smalltalk, C++ or the like and conventional procedural programming languages, such as the &#x201c;C&#x201d; programming language or similar programming languages. The program code may execute entirely on the user's computer, partly on the user's computer, as a stand-alone software package, partly on the user's computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario, the remote computer may be connected to the user's computer through any type of network, including a local area network (LAN) or a wide area network (WAN), or the connection may be made to an external computer (for example, through the Internet using an Internet Service Provider).</p>
<p id="p-0115" num="0114">Aspects of the present invention are described herein with reference to flowchart illustrations and/or block diagrams of methods, apparatus (systems) and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and/or block diagrams, and combinations of blocks in the flowchart illustrations and/or block diagrams, can be implemented by computer program instructions. These computer program instructions may be provided to one or more processors of one or more general purpose computers, special purpose computers, or other programmable data processing apparatuses to produce a machine, such that the instructions, which execute via the one or more processors of the computers or other programmable data processing apparatuses, create means for implementing the functions/acts specified in the flowchart and/or block diagram block or blocks.</p>
<p id="p-0116" num="0115">These computer program instructions may also be stored in one or more computer readable storage devices or computer readable that can direct one or more computers, one or more other programmable data processing apparatuses, or one or more other devices to function in a particular manner, such that the instructions stored in the one or more computer readable storage devices or computer readable medium produce an article of manufacture including instructions which implement the function/act specified in the flowchart and/or block diagram block or blocks.</p>
<p id="p-0117" num="0116">The computer program instructions may also be loaded onto one or more computers, one or more other programmable data processing apparatuses, or one or more other devices to cause a series of operational steps to be performed on the one or more computers, one or more other programmable data processing apparatuses, or one or more other devices to produce a computer implemented process such that the instructions which execute on the one or more computers, one or more other programmable data processing apparatuses, or one or more other devices provide processes for implementing the functions/acts specified in the flowchart and/or block diagram block or blocks.</p>
<p id="p-0118" num="0117">The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein, the singular forms &#x201c;a&#x201d;, &#x201c;an&#x201d; and &#x201c;the&#x201d; are intended to include the plural forms as well, unless the context clearly indicates otherwise. It will be further understood that the terms &#x201c;comprises&#x201d; and/or &#x201c;comprising,&#x201d; when used in this specification, specify the presence of stated features, integers, steps, operations, elements, and/or components, but do not preclude the presence or addition of one or more other features, integers, steps, operations, elements, components, and/or groups thereof.</p>
<p id="p-0119" num="0118">The corresponding structures, materials, acts, and equivalents of all means or step plus function elements in the claims below are intended to include any structure, material, or act for performing the function in combination with other claimed elements as specifically claimed. The description of the embodiments of the invention has been presented for purposes of illustration and description, but is not intended to be exhaustive or limited to the embodiments of the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiments were chosen and described in order to best explain the principles of the invention and the practical application, and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is: </us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A computer usable program product comprising a computer usable storage device including computer usable code for managing events generated from business objects in a data processing system, the computer usable code comprising:
<claim-text>computer usable code for detecting a first event, the first event being raised by a business object in a plurality of business objects configured in a business entity, the business entity executing in the data processing system and providing a function for processing a request;</claim-text>
<claim-text>computer usable code for determining, by referencing an event flag, whether a second event has been detected prior to the first event and during the processing of the request;</claim-text>
<claim-text>computer usable code for responsive to the determining being affirmative, combining a first event data associated with the first event with a second event data stored from the second event, the combining resulting in consolidated event data; and</claim-text>
<claim-text>computer usable code for publishing the consolidated event data responsive to the request upon completing processing of the request.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The computer usable program product of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein changing of a transaction data due to the request gives rise to the first event, the first event including the transaction data in a changed state subsequent to the changing.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The computer usable program product of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the detecting the first event comprises:
<claim-text>computer usable code for associating a listener with the business object in the business entity; and</claim-text>
<claim-text>computer usable code for uniquely identifying the business object in the business entity to the listener.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The computer usable program product of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:
<claim-text>computer usable code for configuring the business object as an active business object, the active business object being permitted to raise events;</claim-text>
<claim-text>computer usable code for configuring a second business object in the plurality of business objects as a passive business object, the passive business object being prevented from raising events.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The computer usable program product of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the business object in the plurality of business objects is not configured to propagate the first event via a parent-child relationship with a second business object, and wherein the business object raises the first event upon detecting a change in a transaction data associated with the request as a result of a processing of the request by the business object.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The computer usable program product of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the event flag is maintained relative to a root business object of a hierarchy of the plurality of business objects in the business entity.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The computer usable program product of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the event flag is maintained relative to a child business object in the hierarchy, and wherein the event flag registers only those events that arise from those business objects that appear in a sub-graph below the child business object in the hierarchy.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The computer usable program product of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the event flag is a non-persisted property of the root business object.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The computer usable program product of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the combining results in merging a first change in a first transaction data that caused the first event with a second change in a second transaction data that caused the second event.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The computer usable program product of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the business object participates in a second business entity, further comprising:
<claim-text>computer usable code for checking whether the first event is raised by the business object in the business entity;</claim-text>
<claim-text>computer usable code for ignoring the first event and omitting the combining responsive to the first event being raised by the business object in the second business entity.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The computer usable program product of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:
<claim-text>computer usable code for categorizing the first event into one of a plurality of categories, wherein the combining results in a categorized consolidated event data by merging a first change in the transaction data that caused the first event with a second change in the transaction data that caused the second event such that the first event and the second event are in a common category.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The computer usable program product of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the publishing comprises:
<claim-text>computer usable code for publishing the categorized consolidated event data for each such category in the plurality of categories that includes at least one event during the processing of the request.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The computer usable program product of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the computer usable code is stored in a data processing system, and wherein the computer usable code is transferred over a network from a remote data processing system.</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The computer usable program product of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the computer usable code is stored in a server data processing system, and wherein the computer usable code is downloaded over a network to a remote data processing system for use in a computer readable storage medium associated with the remote data processing system.</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. A data processing system for managing events generated from business objects in a data processing system, the data processing system comprising:
<claim-text>a storage device including a storage medium, wherein the storage device stores computer usable program code; and</claim-text>
<claim-text>a processor, wherein the processor executes the computer usable program code, and wherein the computer usable program code comprises:
<claim-text>computer usable code for detecting a first event, the first event being raised by a business object in a plurality of business objects configured in a business entity, the business entity executing in the data processing system and providing a function for processing a request;</claim-text>
<claim-text>computer usable code for determining, by referencing an event flag, whether a second event has been detected prior to the first event and during the processing of the request;</claim-text>
<claim-text>computer usable code for responsive to the determining being affirmative, combining a first event data associated with the first event with a second event data stored from the second event, the combining resulting in consolidated event data; and</claim-text>
<claim-text>computer usable code for publishing the consolidated event data responsive to the request upon completing processing of the request.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The data processing system of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein changing of a transaction data due to the request gives rise to the first event, the first event including the transaction data in a changed state subsequent to the changing.</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The data processing system of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the detecting the first event comprises:
<claim-text>computer usable code for associating a listener with the business object in the business entity; and</claim-text>
<claim-text>computer usable code for uniquely identifying the business object in the business entity to the listener.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The data processing system of <claim-ref idref="CLM-00015">claim 15</claim-ref>, further comprising:
<claim-text>computer usable code for configuring the business object as an active business object, the active business object being permitted to raise events;</claim-text>
<claim-text>computer usable code for configuring a second business object in the plurality of business objects as a passive business object, the passive business object being prevented from raising events.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. The data processing system of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the business object in the plurality of business objects is not configured to propagate the first event via a parent-child relationship with a second business object, and wherein the business object raises the first event upon detecting a change in a transaction data associated with the request as a result of a processing of the request by the business object.</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. The data processing system of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the event flag is maintained relative to a root business object of a hierarchy of the plurality of business objects in the business entity.</claim-text>
</claim>
</claims>
</us-patent-grant>

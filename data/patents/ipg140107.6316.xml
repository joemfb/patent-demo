<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08627471-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08627471</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>12259369</doc-number>
<date>20081028</date>
</document-id>
</application-reference>
<us-application-series-code>12</us-application-series-code>
<us-term-of-grant>
<us-term-extension>499</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>11</main-group>
<subgroup>00</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>726 23</main-classification>
<further-classification>711163</further-classification>
<further-classification>711207</further-classification>
</classification-national>
<invention-title id="d2e53">Permissions checking for data processing instructions</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>4016545</doc-number>
<kind>A</kind>
<name>Lipovski</name>
<date>19770400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>4851990</doc-number>
<kind>A</kind>
<name>Johnson et al.</name>
<date>19890700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>710100</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>5191649</doc-number>
<kind>A</kind>
<name>Cadambi</name>
<date>19930300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>5469556</doc-number>
<kind>A</kind>
<name>Clifton</name>
<date>19951100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>711163</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>5848293</doc-number>
<kind>A</kind>
<name>Gentry</name>
<date>19981200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>6219775</doc-number>
<kind>B1</kind>
<name>Wade</name>
<date>20010400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>6247064</doc-number>
<kind>B1</kind>
<name>Alferness et al.</name>
<date>20010600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>6253273</doc-number>
<kind>B1</kind>
<name>Blumenau</name>
<date>20010600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>6336178</doc-number>
<kind>B1</kind>
<name>Favor</name>
<date>20020100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>6490642</doc-number>
<kind>B1</kind>
<name>Thekkath et al.</name>
<date>20021200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>6591355</doc-number>
<kind>B2</kind>
<name>Schuster et al.</name>
<date>20030700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>6829698</doc-number>
<kind>B2</kind>
<name>Arimilli et al.</name>
<date>20041200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00013">
<document-id>
<country>US</country>
<doc-number>2004/0230836</doc-number>
<kind>A1</kind>
<name>Larsen</name>
<date>20041100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00014">
<document-id>
<country>US</country>
<doc-number>2004/0243823</doc-number>
<kind>A1</kind>
<name>Moyer et al.</name>
<date>20041200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00015">
<document-id>
<country>US</country>
<doc-number>2005/0229089</doc-number>
<kind>A1</kind>
<name>Oza et al.</name>
<date>20051000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00016">
<document-id>
<country>US</country>
<doc-number>2005/0240745</doc-number>
<kind>A1</kind>
<name>Iyer</name>
<date>20051000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00017">
<document-id>
<country>US</country>
<doc-number>2005/0257025</doc-number>
<kind>A1</kind>
<name>Spencer</name>
<date>20051100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00018">
<document-id>
<country>US</country>
<doc-number>2007/0094475</doc-number>
<kind>A1</kind>
<name>Bridges et al.</name>
<date>20070400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>711207</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00019">
<document-id>
<country>US</country>
<doc-number>2007/0150671</doc-number>
<kind>A1</kind>
<name>Kurland</name>
<date>20070600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00020">
<document-id>
<country>US</country>
<doc-number>2007/0180518</doc-number>
<kind>A1</kind>
<name>Moyer</name>
<date>20070800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00021">
<document-id>
<country>US</country>
<doc-number>2007/0266206</doc-number>
<kind>A1</kind>
<name>Kim et al.</name>
<date>20071100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00022">
<document-id>
<country>US</country>
<doc-number>2008/0229052</doc-number>
<kind>A1</kind>
<name>Ozer et al.</name>
<date>20080900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>711202</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00023">
<document-id>
<country>US</country>
<doc-number>2009/0106533</doc-number>
<kind>A1</kind>
<name>Arakawa</name>
<date>20090400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>712205</main-classification></classification-national>
</us-citation>
<us-citation>
<nplcit num="00024">
<othercit>PCT/US2009/058928 International Search Report and Written Opinion mailed Apr. 27, 2010.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00025">
<othercit>U.S. Appl. No. 12/259,368, Moyer et al, Office Action dated Nov. 10, 2011.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00026">
<othercit>U.S. Appl. No. 12/259,368, Inventor William C. Moyer, &#x201c;Data Processor for Processing a Decorated Storage Notify&#x201d;, filed Oct. 28, 2008, Office Action&#x2014;Rejection, mailed Oct. 9, 2012.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00027">
<othercit>U.S. Appl. No. 12/259,368, Moyer et al, &#x201c;Permissions Checking for Data Processing instructions&#x201d;, Office Action&#x2014;mailed Jun. 13, 2013.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>21</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>726 23</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>711163</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>711207</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>6</number-of-drawing-sheets>
<number-of-figures>9</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20100107243</doc-number>
<kind>A1</kind>
<date>20100429</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Moyer</last-name>
<first-name>William C.</first-name>
<address>
<city>Dripping Springs</city>
<state>TX</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Snyder</last-name>
<first-name>Michael D.</first-name>
<address>
<city>Cedar Park</city>
<state>TX</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="003" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Whisenhunt</last-name>
<first-name>Gary L.</first-name>
<address>
<city>Leander</city>
<state>TX</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Moyer</last-name>
<first-name>William C.</first-name>
<address>
<city>Dripping Springs</city>
<state>TX</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Snyder</last-name>
<first-name>Michael D.</first-name>
<address>
<city>Cedar Park</city>
<state>TX</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="003" designation="us-only">
<addressbook>
<last-name>Whisenhunt</last-name>
<first-name>Gary L.</first-name>
<address>
<city>Leander</city>
<state>TX</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>Freescale Semiconductor, Inc.</orgname>
<role>02</role>
<address>
<city>Austin</city>
<state>TX</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Colin</last-name>
<first-name>Carl</first-name>
<department>2493</department>
</primary-examiner>
<assistant-examiner>
<last-name>Zaidi</last-name>
<first-name>S. Ali</first-name>
</assistant-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">A data processing system having a processor and a target device processes decorated instructions (i.e. an instruction having a decoration value). A device of the data processing system such as the processor sends transactions to the target device over a system interconnect. The transactions include an indication of an instruction operation, an address associated with the instruction operation, a decoration value (i.e. a command to the target device to perform a function in addition to a primary function of the executed instruction), and access permissions associated with the address. The target device (e.g. a memory with functionality in addition to storage functionality) determines whether a decoration operation specified by the decoration value is permissible based on the received access permissions. The target device performs the decoration operation if appropriate permissions exist.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="143.76mm" wi="167.64mm" file="US08627471-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="249.77mm" wi="171.53mm" file="US08627471-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="214.71mm" wi="127.00mm" orientation="landscape" file="US08627471-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="218.95mm" wi="169.67mm" file="US08627471-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="161.80mm" wi="166.79mm" file="US08627471-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="214.63mm" wi="167.89mm" file="US08627471-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="101.43mm" wi="165.61mm" file="US08627471-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">RELATED APPLICATION</heading>
<p id="p-0002" num="0001">This application is related to our copending application entitled &#x201c;Data Processor for Processing a Decorated Storage Notify&#x201d;, U.S. Ser. No. 12/259,368, filed of even date herewith and assigned to the assignee of record herein.</p>
<heading id="h-0002" level="1">BACKGROUND</heading>
<p id="p-0003" num="0002">1. Field</p>
<p id="p-0004" num="0003">This disclosure relates generally to data processing systems, and more specifically, to access permissions of a target device in a data processing system.</p>
<p id="p-0005" num="0004">2. Related Art</p>
<p id="p-0006" num="0005">In a multiple processor or multiple core data processing system that implements a network, multiple counters are used to maintain statistics requiring a variety of functions such as increment, decrement and read-modify-write operations. Because multiple cores may attempt to update the identical counter at the same time, network delays are created and a significant amount of resources are consumed. A mechanism for performing atomic updates, i.e. un-interruptible successive updates, is typically required. Conventional atomic update mechanisms, such as using a software semaphore or a software lock, can cause system delays. To reduce system delays, a statistics accelerator may be used. However, in a single transaction enough information cannot typically be sent to a statistics accelerator to describe an atomic operation.</p>
<p id="p-0007" num="0006">Because the counter bit sizes can be larger than the size of registers within a processor, a lock variable has also been used to limit access to a counter while multiple storage accesses update sub-sections of the counter. When a core needs to gain ownership of a counter for an atomic update, a significant number of data processing cycles may pass for each lock variable. A processor must use processing cycles to obtain the lock variable, wait for the lock variable to be released if already taken by another processor, perform the counter update and release the lock variable. Thus the system speed and performance is degraded.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0008" num="0007">The present invention is illustrated by way of example and is not limited by the accompanying figures, in which like references indicate similar elements. Elements in the figures are illustrated for simplicity and clarity and have not necessarily been drawn to scale.</p>
<p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. 1</figref> illustrates in block diagram form a data processing system in accordance with one embodiment of the present invention;</p>
<p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. 2</figref> illustrates in block diagram form an exemplary processor of the data processing system of <figref idref="DRAWINGS">FIG. 1</figref> in accordance with one embodiment of the present invention;</p>
<p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. 3</figref> illustrates in block diagram form, a portion of the data processing system of <figref idref="DRAWINGS">FIG. 1</figref> illustrating the processor and an intelligent memory in accordance with one embodiment of the present invention;</p>
<p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. 4</figref> illustrates, in diagrammatic form, a data processing instruction for implementing atomic operations remote from the processor in accordance with one form of the present invention;</p>
<p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. 5</figref> illustrates, in diagrammatic form, a translation lookaside buffer (TLB) entry in accordance with one form of the present invention;</p>
<p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. 6</figref> illustrates, in diagrammatic form, a portion of the information transferred from the processor to the intelligent memory illustrated in <figref idref="DRAWINGS">FIG. 3</figref>;</p>
<p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. 7</figref> illustrates, in table form, an exemplary encoding of instruction operations used by the intelligent memory of <figref idref="DRAWINGS">FIG. 3</figref>;</p>
<p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. 8</figref> illustrates, in flow chart form, an exemplary method of processing an instruction having permissions information in accordance with the present invention; and</p>
<p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. 9</figref> illustrates, in flow chart form, an exemplary method of using information from a processor to perform permissions checking in accordance with the present invention.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0004" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0018" num="0017">There is herein described a method for operating a data processing system that has a processor and a target device which is a target or recipient of information from the processor. The processor and target device communicate via a system interconnect. The processor executes or processes an instruction. As part of the instruction execution the processor determines an instruction operation associated with the instruction and an address. A decoration value is determined by the processor that is based on the instruction. A decoration value or decoration is information that is supplied to the target device such as a memory for performing decorated storage operations. The decoration value is provided from storage in a general purpose register of the processor and is transmitted to the target device along with a translated address which indicates a target location resulting from the instruction execution. The decoration value is a command to the target device to perform a function in addition to a primary function of the executed instruction. For example, the executed instruction may be a load or a store of data from or to a target memory location, and the decoration value may be a command to increment the target location or to multiply the target location data by another operand. It should be understood that any of various additional or alternate processing functions may be implemented by the target device in response to the decoration value. The decoration value is not generally interpreted by the processor, and a given decoration value may perform different operations requiring different access permissions depending on the target location of the instruction. Note that not all load and store instructions provide decoration values. In one embodiment, separate load, store, load with decoration, and store with decoration instruction types are provided.</p>
<p id="p-0019" num="0018">As used herein, the term &#x201c;bus&#x201d; is a system interconnect and is used to refer to a plurality of signals or conductors which may be used to transfer one or more various types of information, such as data, addresses, control, or status. The conductors as discussed herein may be illustrated or described in reference to being a single conductor, a plurality of conductors, unidirectional conductors, or bidirectional conductors. However, different embodiments may vary the implementation of the conductors. For example, separate unidirectional conductors may be used rather than bidirectional conductors and vice versa. Also, a plurality of conductors may be replaced with a single conductor that transfers multiple signals serially or in a time multiplexed manner. Likewise, single conductors carrying multiple signals may be separated out into various different conductors carrying subsets of these signals. Therefore, many options exist for transferring signals.</p>
<p id="p-0020" num="0019">The terms &#x201c;assert&#x201d; or &#x201c;set&#x201d; and &#x201c;negate&#x201d; (or &#x201c;deassert&#x201d; or &#x201c;clear&#x201d;) are used herein when referring to the rendering of a signal, status bit, or similar apparatus into its logically true or logically false state, respectively. If the logically true state is a logic level one, the logically false state is a logic level zero. And if the logically true state is a logic level zero, the logically false state is a logic level one.</p>
<p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. 1</figref> illustrates, in block diagram form, a data processing system <b>10</b> in accordance with one embodiment of the present invention. Data processing system <b>10</b> includes a processor <b>12</b>, a system interconnect or system bus <b>14</b>, a memory <b>16</b> and a plurality of peripherals such as a peripheral <b>18</b>, a peripheral <b>20</b>, an intelligent memory <b>40</b> and, in some embodiments, additional peripherals as indicated by the dots in <figref idref="DRAWINGS">FIG. 1</figref> separating peripheral <b>18</b> from peripheral <b>20</b>. An intelligent memory <b>40</b> is coupled to the system bus <b>14</b> by bidirectional multiple conductors. The memory <b>16</b> is a system memory that is coupled to the system bus <b>14</b> by a bidirectional conductor that, in one form, has multiple conductors. The intelligent memory <b>40</b> is a target device of the processor <b>12</b> for certain instruction execution as will be explained below. In the illustrated form each of peripherals <b>18</b> and <b>20</b> is coupled to the system bus <b>14</b> by bidirectional multiple conductors as is the processor <b>12</b>. Note that memory <b>16</b> can be any type of memory, and peripherals <b>18</b> and <b>20</b> can each be any type of peripheral or device. In one embodiment, all of data processing system <b>10</b> is on a single integrated circuit. Alternatively, data processing system <b>10</b> can be implemented using more than one integrated circuit. In one embodiment, at least all of processor <b>12</b> is on a single integrated circuit. In another form the system bus <b>14</b> represents a wireline interconnect and the processor <b>12</b> may be physically remote from the target device such as intelligent memory <b>40</b>. In an alternate embodiment, multiple intelligent modules, such as intelligent memory <b>40</b> may be present.</p>
<p id="p-0022" num="0021">In operation, the processor <b>12</b> functions to implement a variety of data processing functions by executing a plurality of data processing instructions. Information needed by processor <b>12</b> that is not within the processor <b>12</b> is stored in memory <b>16</b> or intelligent memory <b>40</b>. In one embodiment, memory <b>16</b> and intelligent memory <b>40</b> are referred to as an external memories. Intelligent memory <b>40</b> is a memory that includes additional circuitry for performing computations as well as implementing the conventional data storage function that a memory conventionally performs. The computations that intelligent memory <b>40</b> performs in response to a memory location access are implementation-specific and may vary in various embodiments. In one form the computations are performed in an atomic fashion meaning that the computations are un-interruptible and are completed prior to allowing a subsequent access request to the memory location being modified by the computation. Examples of atomic computations include, but are not limited to, atomic increment or atomic decrement.</p>
<p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. 2</figref> illustrates in block diagram form an exemplary architecture of processor <b>12</b>. The system bus <b>14</b> is coupled to a bus interface unit (BIU) <b>34</b> via a bidirectional multiple bit conductor for communicating signals <b>15</b>. The bus interface unit <b>34</b> is coupled to a memory management unit (MMU) <b>42</b> via a bidirectional multiple bit conductor. Within the memory management unit <b>42</b> is a translation look-aside buffer (TLB) <b>50</b> having a plurality of entries such as TLB entry <b>52</b>. The bus interface unit <b>34</b> is also coupled to both an instruction fetch unit <b>26</b> and to the memory management unit (MMU) <b>42</b> via a bidirectional multiple bit conductor. The instruction fetch unit <b>26</b> is coupled to an instruction pipeline (pipe) <b>22</b> via a bidirectional multiple bit conductor. The instruction pipeline <b>22</b> is coupled to a plurality of execution units <b>24</b> via a bidirectional multiple bit conductor, and the instruction pipeline <b>22</b> is coupled to control circuitry <b>28</b> via a bidirectional multiple bit conductor. The instruction fetch unit <b>26</b> is coupled to the control circuitry <b>28</b> via a bidirectional multiple bit conductor. The memory management unit <b>42</b> is coupled to the control circuitry <b>28</b> via a bidirectional multiple bit conductor. The control circuitry <b>28</b> is coupled to the execution units <b>24</b> via a bidirectional multiple bit conductor. The bus interface unit <b>34</b> is coupled to the control circuitry <b>28</b> via a bidirectional multiple bit conductor. The memory management unit <b>42</b> is coupled to the execution units <b>24</b> via a bidirectional multiple bit conductor. The control circuitry <b>28</b> includes a machine state register <b>31</b>. Within the machine state register <b>31</b> is a register having a supervisor bit <b>29</b> designated as &#x201c;S&#x201d;. The logic state of the supervisor bit <b>29</b> determines whether the processor <b>12</b> is in a supervisor mode or a user mode. The execution units <b>24</b> are coupled to the general purpose registers <b>30</b> via a bidirectional multiple bit conductor. The general purpose registers <b>30</b> are coupled to a load/store unit <b>32</b> via a bidirectional multiple-bit conductor. The load/store unit <b>32</b> is respectively coupled to the control circuitry <b>28</b>, the memory management unit <b>42</b> and bus interface unit <b>34</b>, and the instruction pipeline <b>22</b> and execution units <b>24</b> via bidirectional multiple bit conductors.</p>
<p id="p-0024" num="0023">In operation, an instruction is received by the processor <b>12</b> via the system bus <b>14</b> and bus interface unit <b>34</b>. The instruction is fetched from the bus interface unit <b>34</b> by the instruction fetch unit <b>26</b> and coupled to the instruction pipeline <b>22</b>. The instruction pipeline <b>22</b> decodes the instruction and controls the control circuitry <b>28</b> and the execution units <b>24</b> to execute the instruction. An example of the format of a load/store instruction is illustrated in <figref idref="DRAWINGS">FIG. 4</figref> wherein an instruction <b>300</b> has various fields. A field <b>302</b> holds an instruction operation code (opcodes) which identifies what type of operation is associated with the instruction. Fields <b>304</b>, <b>306</b> and <b>308</b> are register fields for respectively holding register designators RT, RA and RB which are registers within the general purpose registers <b>30</b>. For a certain type of load/store instruction (a decorated load or a decorated store) register A (RA) holds a decoration value having a meaning and purpose that will be explained below. Register B (RB) contains a virtual address value. The virtual address is coupled by the load/store unit <b>32</b> to the translation look-aside buffer (TLB) <b>50</b> of the memory management unit <b>42</b> for translation to a physical address. Field <b>310</b> is a subopcode field which is used to further define the operation that is associated with the instruction. In one embodiment the subopcode field is used to distinguish decorated load and store instruction types from normal load and store instruction types. For a normal load or store instruction type, register RB may hold an index value to be added to the address value contained in register RA, or may not be used. For store-type instructions, register T (RT) holds data to be stored to a target device. For load-type instructions, register T (RT) indicates the destination register for holding the results of the load operation.</p>
<p id="p-0025" num="0024">An example of one form of each TLB entry is provided in <figref idref="DRAWINGS">FIG. 5</figref> wherein there is illustrated the details of the TLB entry <b>52</b>. The TLB entry <b>52</b> has a stored virtual address <b>54</b>. If the virtual address provided by the load/store unit <b>32</b> matches the virtual address <b>54</b>, the TLB entry <b>52</b> is selected by the memory management unit <b>42</b>. TLB entry <b>52</b> provides a virtual-to-physical address translation for the virtual address provided by the load/store unit <b>32</b> as well providing page attributes, and access permission values. The TLB entry <b>52</b> has an associated physical address <b>56</b> and a page size <b>58</b> which defines the memory size of the page in memory where the physical address <b>56</b> is located. A plurality of permissions <b>60</b> is included within the TLB entry <b>52</b>. A supervisor read, SR, permission will permit a read of a target device when in supervisor mode if the SR permission bit is asserted. A supervisor write, SW, permission will permit a write of a target device when in supervisor mode if the SW permission bit is asserted. A supervisor execute, SX, permission will permit execution of an instruction at an address within a target device when in supervisor mode if the SX permission bit is asserted. A user read, UR, permission will permit a read of a target device when in user mode if the UR permission bit is asserted. A user write, UW, permission will permit a write of a target device when in user mode if the UW permission bit is asserted. A user execute, UX, permission will permit execution of an instruction at an address within a target device when in user mode if the UX permission bit is asserted. The TLB entry also contains a plurality of page attributes <b>62</b>. Various attributes can be provided. As an example, the following attributes which form the acronym WIMGE are included:
<ul id="ul0001" list-style="none">
    <li id="ul0001-0001" num="0025">W write-through cache operation</li>
    <li id="ul0001-0002" num="0026">I caching inhibited operation</li>
    <li id="ul0001-0003" num="0027">M memory coherency required</li>
    <li id="ul0001-0004" num="0028">G guarded (where the access is to a volatile storage device)</li>
    <li id="ul0001-0005" num="0029">E endianness (whether big endian or little endian ordering exists).</li>
</ul>
</p>
<p id="p-0026" num="0030">It should be understood that these common attributes are provided by way of example only, and other attributes may be included in addition or in lieu of the illustrated page attributes <b>62</b>. For a normal load or store instruction, if the load/store unit <b>32</b> determines that the instruction operation type is not permitted in connection with the permissions obtained form the TLB entry <b>52</b> of TLB <b>50</b> then an exception is generated by the control circuitry <b>28</b> and exception processing is begun by processor <b>12</b>. For example, if the processor <b>12</b> is operating in a user mode, as indicated by the S bit <b>29</b> of machine state register <b>31</b> having a value of &#x201c;0&#x201d;, and the instruction is a load operation instruction, then permission bit UR (user mode read permission) from the TLB entry <b>52</b> must be set to allow for the read operation performed by the load instruction to occur. Likewise, if the instruction is a store instruction, then permission bit UW (user mode write permission) from the TLB entry <b>52</b> must be set to allow for the write operation performed by the store instruction to occur. Similar checks are performed when operating in supervisor mode (S bit <b>29</b> equals &#x201c;1&#x201d;) using the SR and SW permission bits. In the case that the required permissions for a normal load or store instruction are not present, the load or store operation will be aborted by processor <b>12</b> and no transmission of the physical address and attributes to the target device specified by the instruction occurs. As can be seen for the case of a normal load or store instruction, all permissions evaluation for the type of access is performed within processor <b>12</b> prior to allowing initiation of an access to a target device via the system interconnect <b>14</b>. In some embodiments however the normal permissions checking operation performed by load/store unit <b>32</b> are not performed for decorated load and decorated store instructions. In such embodiments, processor <b>12</b> is unaware of the actual operations which will be performed by a device receiving a decoration command via a decoration value, thus, processor <b>12</b> has no accurate mechanism to enforce access permissions using the permissions values provided by matching TLB entry <b>52</b> when the access address for the decorated load or decorated store instruction is translated. Instead, these access permissions provided by TLB entry <b>52</b> during the address translation process are provided to the target device for interpretation, and a subsequent access or operation within the target device is based on the actual permissions types required for the operation specified by the decoration value. In this case, load/store unit <b>32</b> of processor <b>12</b> does not enforce access permissions for the decorated load or decorated store instruction, but rather, provides the permissions information external to processor <b>12</b> for evaluation by the target device, as will be further illustrated in the discussion of <figref idref="DRAWINGS">FIG. 3</figref>. Note that an alternate embodiment may choose to enforce permissions both locally within processor <b>12</b>, as well as at the target device, in the case that more extensive permissions are actually needed, but cannot be determined solely within the processor <b>12</b>, since the actual operation to be performed is not completely known by the processor <b>12</b>.</p>
<p id="p-0027" num="0031">Illustrated in <figref idref="DRAWINGS">FIG. 3</figref> is further detail of one form of the direct connection of processor <b>12</b> and the intelligent memory <b>40</b> via the system bus <b>14</b>, including details of the intelligent memory <b>40</b>. The intelligent memory <b>40</b> has a memory array <b>70</b> coupled to a control unit <b>72</b> via separate single direction conductors. A decoration decode circuit <b>76</b> has a first output coupled to the control unit <b>72</b> and a second output coupled to an input of a permissions check circuit <b>74</b>. The permissions check circuit <b>74</b> has an output coupled to an input of the control unit <b>72</b>. An output of the control unit <b>72</b> provides a response back to the processor <b>12</b> via the system bus <b>14</b>.</p>
<p id="p-0028" num="0032">In operation, the processor <b>12</b> provides to the intelligent memory <b>40</b> the information <b>601</b> of <figref idref="DRAWINGS">FIG. 6</figref>. A physical address corresponding to a location within memory array <b>70</b> is provided. Attributes associated with the physical address are provided. As illustrated in <figref idref="DRAWINGS">FIG. 6</figref>, these attributes include, for example, supervisor or user attribute, a read/write (R/W) attribute, a size attribute, a cache inhibited (CI) attribute, a write-through (WT) attribute, a memory coherency required attribute, and other possible attributes, if any. It should be understood that not all of the illustrated attributes are required to be provided. Permissions information, as will be described below, is also provided to the intelligent memory <b>40</b>. For store-type instructions, store data is also provided. Additionally, decoration information is also provided to the intelligent memory <b>40</b>. In the illustrated form the intelligent memory <b>40</b> includes control unit <b>72</b> which is capable of performing various processing functions on the information that is stored in memory array <b>70</b>. Which specific predetermined processing function is dependent on the result of the decoration decode circuit <b>76</b> which decodes a provided decoration value, and in some embodiments may also be dependent on the particular physical address value and attributes provided to intelligent memory <b>40</b>. In one embodiment, a decoration attribute provided to the intelligent memory <b>40</b> is used to indicate that the memory access request is a decorated load or store operation, rather than a normal load or store operation. In an alternate embodiment, a particular predetermined decoration value may be interpreted to indicate a normal load or store operation is being requested, in which case no special operation is to be performed.</p>
<p id="p-0029" num="0033">Illustrated in <figref idref="DRAWINGS">FIG. 7</figref> is an operation table of exemplary decoration values associated with a decorated load operation and a decorated store operation when the target device is intelligent memory <b>40</b>. The operation table also correlates the permissions that are required for operation that are associated with the instruction operation. For example for a decorated load instruction, when the decoration value is 000, the decoration operation is a clear location operation which requires a Write (W) permission. The addressed location associated with the decorated load operation is to be cleared when the decoration value is 000. When the decoration value is 001 for a decorated load instruction, the decoration operation is to increment the location specified by the address associated with the decorated load operation and to provide the last value that was in the specified location. In order to perform this operation, the required permissions are both a Read (R) permission and a Write (W) permission. When the decoration value is 010 for a decorated load instruction, the decoration operation is to read the location specified by the address associated with the load operation. In order to perform this operation, the required permission is a Read (R) permission. When the decoration value is 111 for a decorated load instruction, the decoration operation is null and no operation is performed to the location specified by the address associated with the decorated load operation. In order to perform this operation, there is no specified required permission. Similarly, for a decorated store instruction, when the decoration value is 000, the decoration operation is to add a predetermined data value to the location specified by the instruction address. In order to perform this operation, the required permissions are both a Read (R) permission and a Write (W) permission. The predetermined data value may be supplied as a data value by processor <b>12</b> as is normally provided for store-type instructions, or may be determined in an alternate manner by decoration decode circuit <b>76</b> or control unit <b>72</b> of intelligent memory <b>40</b>. When the decoration value is 001, the decoration operation is to add the value from a source location in memory array <b>70</b> to the value in the location indicated by the physical address of the decorated store. The source location within memory array <b>40</b> may be indicated by the data value provided by processor <b>12</b> for the decorated store instruction. When the decoration value for a decorated store instruction is 111, the decoration operation is to multiply a predetermined value with the data in the location specified by the instruction address. In order to perform this operation, the required permission is a Write (W) permission. For a normal load or normal store instruction operation, the decoration value is ignored, and no permissions checking is required by the table entry of <figref idref="DRAWINGS">FIG. 7</figref>. For these operations, it is assumed that the required permissions have already been checked by processor <b>12</b> prior to initiation of the access to the target device. It should be understood that the encodings provided in the operation table of <figref idref="DRAWINGS">FIG. 7</figref> are provided by way of example only. Any number of bit sizes may be implemented as the decoration value and other types of instruction operation and decoration operations may be readily used. Decoration decode circuit <b>76</b> and permissions check circuit <b>74</b> of intelligent memory <b>40</b> serve to perform remote permissions checking of the received decorated load or decorated store operation. For each decoration value, the required permissions for operation are determined by decoration decode circuit <b>76</b> and are provided to permissions check circuit <b>74</b>. Permissions check circuit <b>74</b> compares the permissions values from system interconnect <b>14</b> received with the access request with the required permissions for the decoration operation as determined by decoration decode circuit <b>76</b> and determines whether sufficient permissions are present to allow the decorated load or store operation to occur. If sufficient permissions are not present, permissions check circuit <b>74</b> informs control unit <b>72</b> of intelligent memory <b>40</b> that the operation should not occur. In response, control unit <b>72</b> provides a response back to processor <b>12</b> via response signals transmitted on system interconnect <b>14</b> indicating an exception condition has occurred, and no operation is performed to memory array <b>70</b>. If the results of the checking performed by permissions check circuit <b>74</b> indicate that the required permissions for the operation performed by the received instruction operation and decoration value are satisfactory, it indicates such to control unit <b>72</b>, which may then proceed with the indicated operation(s) and provide a normal response back to processor <b>12</b> upon successful completion of the required operation.</p>
<p id="p-0030" num="0034">Illustrated in <figref idref="DRAWINGS">FIG. 8</figref> is a method <b>800</b> illustrating one form of how an instruction having permissions information to be transferred to a target device is executed. In a step <b>801</b> the instruction is fetched such as by the instruction fetch unit <b>26</b> via the bus interface unit <b>34</b> of <figref idref="DRAWINGS">FIG. 2</figref>. In a step <b>803</b> the instruction is decoded. In one form the decoding occurs in the instruction pipeline <b>22</b> of <figref idref="DRAWINGS">FIG. 2</figref>. In a step <b>805</b> a determination is made whether the fetched and decoded instruction is a decorated load/store instruction. If the decoded instruction is not a decorated load/store instruction then other processing of the instruction than described herein is performed in a step <b>806</b>. If the decoded instruction is a decorated load/store instruction, in a step <b>807</b> the load/store unit <b>32</b> gets a decoration (i.e. a decoration command) from one (register A, RA) of the general purpose registers (GPR) <b>30</b>. In a step <b>809</b> the load/store unit <b>32</b> obtains a virtual address defined by the instruction from one (register B, RB) of the general purpose registers (GPR) <b>30</b>. If the operation is a decorated store, the load/store unit <b>32</b> in a step <b>810</b> gets a store data value from one (e.g. register T, RT) of the general purpose registers (GPR) <b>30</b> of <figref idref="DRAWINGS">FIG. 3</figref>. The load/store unit <b>32</b> under control of the control circuitry <b>28</b> functions to find or lookup in the translation lookaside buffer (TLB) <b>50</b> of memory management unit (MMU) <b>42</b> the virtual address which was designated by register B in a step <b>811</b>. A match of stored virtual addresses in the MMU <b>42</b> with the virtual address from register B is identified. The matching virtual address is stored in a predetermined TLB entry of the TLB <b>50</b> such as TLB entry <b>52</b> of <figref idref="DRAWINGS">FIG. 2</figref>. In a step <b>813</b> a correlated physical address, permissions and page attributes are obtained from the TLB entry <b>52</b> and sent to the load/store unit <b>32</b>. In a step <b>815</b> the physical address, attributes, permissions and decoration are sent to a designated target device via the bus interface unit <b>34</b> and the system interconnect or system bus <b>14</b>. If the operation is a decorated store, store data is also sent to the system interconnect <b>14</b>. From the perspective of the hardware of processor <b>12</b>, this operation appears to be a conventional load or store operation and the processor <b>12</b> is not aware of the function of the decoration or its consequences.</p>
<p id="p-0031" num="0035">Illustrated in <figref idref="DRAWINGS">FIG. 9</figref> is a method illustrating one form of the processing of the sent information by the target device to perform permissions checking. In a step <b>901</b> the target device receives the physical address, attributes, the decoration and permissions from the system interconnect or system bus <b>14</b>. In a step <b>903</b> the target device checks permissions using the received decoration, attributes and physical address. In a step <b>905</b> the target device <b>905</b> determines whether the specified operation from the decoration is allowed. If the operation is not allowed, a step <b>907</b> is implemented wherein an exception is taken and device-dependent error processing is performed. If the operation is allowed, a step <b>909</b> is implemented wherein the operation that is specified by the instruction and the decoration is performed at the physical address. As part of step <b>907</b>, in one embodiment, an exception may be indicated or signaled back to the system interconnect to be provided to the initiator of the access. In an alternate embodiment, a null response or a predetermined data value, such as all zeroes may be delivered by the target device in lieu or an exception response. In one embodiment, if partial permissions are present, then a portion of the operation may be performed and other portions not performed.</p>
<p id="p-0032" num="0036">By now it should be appreciated that there has been provided a data processing system that enforces access permissions at an intelligent target device for a particular class of memory access instructions. In one form the target device is a memory with additional circuitry for performing functions additional to data storage. The target device receives a command in the form of a decoration value along with an address and permissions. The target device enforces the permissions required for the particular command (decoration value) that is to be acted upon. A normal or conventional system interconnect protocol is used and thus specialized protocol extensions are avoided. In one form the permissions are not enforced local to the processor but are instead enforced at the target device after decoding the decoration value. If the permissions check partially succeeds, the memory may proceed with the operation and return load data if the decoded instruction was a load instruction. If the permissions check fails, then the operation is aborted. In the case of the permissions check by the target device failing, a transfer error may be generated by the target device and sent back to the processor in one form and the requested operation terminated by the target device. In another form the target device may generate a default value, such as a null value of all zeros, for loading into the identified address of the target device, or for provision back to the initiator. Thus there is herein provided a permissions checking operation for a target device for a subset of data processing transactions including decorated load and decorated store transactions. Other types of decorated transactions can be implemented. In another form the processor <b>12</b> can optionally perform a first level permissions check to determine if high level permissions, such as read permissions or write permissions, exist. However, the target device performs a final confirmation of permissions, based upon the operation that is indicated by the decoration value which is not interpreted or decoded by the processor <b>12</b>. In this optional embodiment the first level permissions check will cause the processor <b>12</b> to begin exception processing and prevent the transmission of the information <b>601</b> of <figref idref="DRAWINGS">FIG. 6</figref>.</p>
<p id="p-0033" num="0037">Because the apparatus implementing the present invention is, for the most part, composed of electronic components and circuits known to those skilled in the art, circuit details has not been explained in any greater extent than that considered necessary as illustrated above, for the understanding and appreciation of the underlying concepts of the present invention and in order not to obfuscate or distract from the teachings of the present invention.</p>
<p id="p-0034" num="0038">Some of the above embodiments, as applicable, may be implemented using a variety of different information processing systems. For example, although <figref idref="DRAWINGS">FIG. 1</figref> and the discussion thereof describe an exemplary data processing architecture, this exemplary architecture is presented merely to provide a useful reference in discussing various aspects of the invention. Of course, the description of the architecture has been simplified for purposes of discussion, and it is just one of many different types of appropriate architectures that may be used in accordance with the invention. It should be understood that the boundaries between logic blocks are merely illustrative and that alternative embodiments may merge logic blocks or circuit elements or impose an alternate decomposition of functionality upon various logic blocks or circuit elements.</p>
<p id="p-0035" num="0039">Thus, it is to be understood that the architectures depicted herein are merely exemplary, and that in fact many other architectures can be implemented which achieve the same functionality. Any two components herein combined to achieve a particular functionality can be seen as &#x201c;associated with&#x201d; each other such that the desired functionality is achieved, irrespective of architectures or intermedial components. Likewise, any two components so associated can also be viewed as being &#x201c;operably connected,&#x201d; or &#x201c;operably coupled,&#x201d; to each other to achieve the desired functionality.</p>
<p id="p-0036" num="0040">Also for example, in one embodiment, the illustrated elements of data processing system <b>10</b> are circuitry located on a single integrated circuit or within a same device. Alternatively, data processing system <b>10</b> may include any number of separate integrated circuits or separate devices interconnected with each other. For example, intelligent memory <b>40</b> may be located on a same integrated circuit as processor <b>12</b> or on a separate integrated circuit or located within another peripheral or slave discretely separate from other elements of data processing system <b>10</b>. Peripherals <b>18</b> and <b>20</b> may also be located on separate integrated circuits or devices. Also for example, data processing system <b>10</b> or portions thereof may be readily transformed into software as a representation of physical circuitry or of logical representations convertible into physical circuitry. As such, data processing system <b>10</b> may be embodied in a hardware description language of any appropriate type.</p>
<p id="p-0037" num="0041">In one form there is herein provided a method for operating a data processing system, the data processing system including a processor and a target device coupled via a system interconnect. An instruction is processed by the processor, the processing including determining an instruction operation and an address. A decoration value is determined by the processor based on the instruction. Access permissions associated with the address are provided. An indication of the instruction operation, the address, the decoration value, and the access permissions associated with the address are sent in a transaction to a target device via the system interconnect. In another form determining the access permissions includes obtaining the access permissions associated with the address from a translation lookaside buffer of the processor. In yet another form a permissions check of the instruction operation based upon the access permissions is performed by the target device. The instruction operation is not performed based upon a failure of the permissions check. In another form the performing by the target device of the instruction operation is based upon the access permissions and the decoration value wherein the decoration value provides a function to be performed by the target device as part of performing the instruction operation. In another form the decoration value is determined by obtaining the decoration value from a field of the instruction. In another form the decoration value is determined by obtaining the decoration value from a register of the processor. In another form the access permissions are determined by the processor by determining a write access permission. In another form the processing further includes determining attributes of the instruction. The sending in a transaction further includes sending the attributes in the transaction. In another form the instruction operation includes one of the group consisting of a load operation and a store operation. The instruction operation is performed by the target device. In another form the target device is implemented as a memory.</p>
<p id="p-0038" num="0042">In another form there is provided a method of operating a data processing system. A target device receives a transaction via a system interconnect of the data processing system, the transaction generated by a processor of the data processing system, the transaction including an indication of an instruction operation to be performed by the target device, an address, a decoration value, and access permissions associated with the address. The target device determines whether a decoration operation specified by the decoration value is permissible based on the received access permissions. In another form the decoration operation is performed by the target device based on the decoration operation being permissible based on the determining. In another form the determining by the target device whether a decoration operation specified by the decoration value is permissible is implemented by the target device determining access permission types to be checked based on the decoration operation. The received access permissions are checked for the access permission types. A determination is made whether the decoration operation is permissible based on whether the access permission types of the received access permissions indicate that the decoration operation is permissible. In another form the target device performs the instruction operation corresponding to the address. In another form the target device is implemented as a memory wherein the instruction operation is one of the group consisting of a load operation from the memory or a store operation to the memory. In another form the decoration operation is implemented to include one of the group consisting of an add operation to a value stored at a location designated by the address, wherein the instruction operation is a store operation of a second value to the location, wherein performing the store operation and the decoration operation add the second value to the value to generate a resultant value, wherein the resultant value is stored at the location; and a clear operation of a location designated by the address, wherein the instruction operation is a load operation from the location, wherein the instruction operation is performed before the clear operation. In another form the instruction operation is not performed if the decoration operation is determined not to be permissible based on the determining. In another form the target device responds to the processor with a response, wherein the response is based on results of the determining.</p>
<p id="p-0039" num="0043">In another form there is provided a method for operating a data processing system. A first device of the data processing system generates an indication of an instruction operation, an address associated with the instruction operation, a decoration value, and access permissions associated with the address. An indication of the instruction operation, the address, the decoration value, and the access permissions associated with the address are sent in a transaction to a target device via the system interconnect. The transaction is received by the target device. The target device determines whether a decoration operation specified by the decoration value is permissible based on the received access permissions. In another form the first device is implemented as a processor and the target device is implemented as a memory, wherein the instruction operation is one of the group consisting of a load operation from the memory or a store operation to the memory. In another form the decoration operation is performed by the target device based on the decoration operation being permissible.</p>
<p id="p-0040" num="0044">Furthermore, those skilled in the art will recognize that boundaries between the functionality of the above described operations are merely illustrative. The functionality of multiple operations may be combined into a single operation, and/or the functionality of a single operation may be distributed in additional operations. Moreover, alternative embodiments may include multiple instances of a particular operation, and the order of operations may be altered in various other embodiments.</p>
<p id="p-0041" num="0045">In one embodiment, data processing system <b>10</b> is a computer system such as a personal computer system. Other embodiments may include different types of computer systems. Computer systems are information handling systems which can be designed to give independent computing power to one or more users. Computer systems may be found in many forms including but not limited to mainframes, minicomputers, servers, workstations, personal computers, notepads, personal digital assistants, electronic games, automotive and other embedded systems, cell phones and various other wireless devices. A typical computer system includes at least one processing unit, associated memory and a number of input/output (I/O) devices.</p>
<p id="p-0042" num="0046">The term &#x201c;coupled,&#x201d; as used herein, is not intended to be limited to a direct coupling or a mechanical coupling.</p>
<p id="p-0043" num="0047">Furthermore, the terms &#x201c;a&#x201d; or &#x201c;an,&#x201d; as used herein, are defined as one or more than one. Also, the use of introductory phrases such as &#x201c;at least one&#x201d; and &#x201c;one or more&#x201d; in the claims should not be construed to imply that the introduction of another claim element by the indefinite articles &#x201c;a&#x201d; or &#x201c;an&#x201d; limits any particular claim containing such introduced claim element to inventions containing only one such element, even when the same claim includes the introductory phrases &#x201c;one or more&#x201d; or &#x201c;at least one&#x201d; and indefinite articles such as &#x201c;a&#x201d; or &#x201c;an.&#x201d; The same holds true for the use of definite articles.</p>
<p id="p-0044" num="0048">Unless stated otherwise, terms such as &#x201c;first&#x201d; and &#x201c;second&#x201d; are used to arbitrarily distinguish between the elements such terms describe. Thus, these terms are not necessarily intended to indicate temporal or other prioritization of such elements.</p>
<p id="p-0045" num="0049">Although the invention is described herein with reference to specific embodiments, various modifications and changes can be made without departing from the scope of the present invention as set forth in the claims below. For example, the number of bits used in the address, attributes, permissions and decorations fields may be modified based upon system requirements. The permissions that are associated with a particular operation may vary or be modified. Accordingly, the specification and figures are to be regarded in an illustrative rather than a restrictive sense, and all such modifications are intended to be included within the scope of the present invention. Any benefits, advantages, or solutions to problems that are described herein with regard to specific embodiments are not intended to be construed as a critical, required, or essential feature or element of any or all the claims.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A method for operating a data processing system, the data processing system including a processor and a target device coupled via a system interconnect, the method comprising:
<claim-text>processing an instruction by the processor, the processing including determining an instruction operation and an address;</claim-text>
<claim-text>determining by the processor, a decoration value based on the instruction;</claim-text>
<claim-text>providing by the processor, access permissions associated with the address; and</claim-text>
<claim-text>sending in a transaction
<claim-text>an indication of the instruction operation,</claim-text>
<claim-text>the address,</claim-text>
<claim-text>the decoration value, and</claim-text>
<claim-text>the access permissions associated with the address to a target device via the system interconnect, wherein the instruction performs a first function at the address, and the decoration value performs a second function at the address.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the determining access permissions includes obtaining the access permissions associated with the address from a translation lookaside buffer of the processor.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> further comprising:
<claim-text>performing by the target device, a permissions check of the instruction operation based upon the access permissions; and</claim-text>
<claim-text>not performing the instruction operation based upon a failure of the permissions check.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method of <claim-ref idref="CLM-00003">claim 3</claim-ref> further wherein the performing by the target device of the instruction operation is based upon the access permissions and the decoration value wherein the decoration value provides a function to be performed by the target device as part of performing the instruction operation.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> further comprising determining the decoration value by obtaining the decoration value from a field of the instruction.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> further comprising determining the decoration value by obtaining the decoration value from a register of the processor.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the access permissions determined by the processor further comprise determining a write access permission.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein:
<claim-text>the processing further comprising determining attributes of the instruction; and</claim-text>
<claim-text>the sending in a transaction further comprises sending the attributes in the transaction.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the instruction operation includes one of the group consisting of a load operation and a store operation, and further comprising:
<claim-text>performing the instruction operation by the target device.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> further comprising implementing the target device as a memory.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. A method of operating a data processing system, the method comprising:
<claim-text>receiving by a target device, a transaction via a system interconnect of the data processing system, the transaction generated by a processor of the data processing system, the transaction including an indication of an instruction operation to be performed by the target device, an address, a decoration value, and access permissions associated with the address; and</claim-text>
<claim-text>determining by the target device whether a decoration operation specified by the decoration value is permissible based on the access permissions which are received, wherein the instruction performs a first function at the address, and the decoration value performs a second function at the address.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The method of <claim-ref idref="CLM-00011">claim 11</claim-ref> further comprising:
<claim-text>performing the decoration operation by the target device based on the decoration operation being permissible based on the determining.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The method of <claim-ref idref="CLM-00011">claim 11</claim-ref> wherein the determining by the target device whether a decoration operation specified by the decoration value is permissible comprises:
<claim-text>the target device determining access permission types to be checked based on the decoration operation;</claim-text>
<claim-text>checking the access permissions which are received for the access permission types; and</claim-text>
<claim-text>determining whether the decoration operation is permissible based on whether the access permission types of the access permissions which are received indicate that the decoration operation is permissible.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The method of <claim-ref idref="CLM-00013">claim 13</claim-ref> further comprising:
<claim-text>performing by the target device the instruction operation corresponding to the address.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The method of <claim-ref idref="CLM-00011">claim 11</claim-ref> further comprising implementing the target device as a memory wherein the instruction operation is one of the group consisting of a load operation from the memory or a store operation to the memory.</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The method of <claim-ref idref="CLM-00011">claim 11</claim-ref> further comprising:
<claim-text>implementing the decoration operation to include one of the group consisting of:
<claim-text>an add operation to a value stored at a location designated by the address, wherein the instruction operation is a store operation of a second value to the location, wherein performing the store operation and the decoration operation add the second value to the value to generate a resultant value, wherein the resultant value is stored at the location; and</claim-text>
<claim-text>a clear operation of a location designated by the address, wherein the instruction operation is a load operation from the location, wherein the instruction operation is performed before the clear operation.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The method of <claim-ref idref="CLM-00011">claim 11</claim-ref> further comprising:
<claim-text>not performing the instruction operation if the decoration operation is determined not to be permissible based on the determining.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The method of <claim-ref idref="CLM-00011">claim 11</claim-ref> further comprising:
<claim-text>responding by the target device to the processor with a response, wherein the response is based on results of the determining.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. A method for operating a data processing system, the method comprising:
<claim-text>generating by a first device of the data processing system, an indication of an instruction operation, an address associated with the instruction operation, a decoration value, and access permissions associated with the address;</claim-text>
<claim-text>sending in a transaction an indication of the instruction operation, the address, the decoration value, and the access permissions associated with the address to a target device via a system interconnect;</claim-text>
<claim-text>receiving by a target device the transaction; and</claim-text>
<claim-text>determining by the target device, whether a decoration operation specified by the decoration value is permissible based on the access permissions associated with the address, wherein the instruction operation performs a first function at the address, and the decoration operation performs a second function at the address.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. The method of <claim-ref idref="CLM-00019">claim 19</claim-ref> further comprising:
<claim-text>implementing the first device as a processor and the target device as a memory, wherein the instruction operation is one of the group consisting of a load operation from the memory or a store operation to the memory.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00021" num="00021">
<claim-text>21. The method of <claim-ref idref="CLM-00020">claim 20</claim-ref> further comprising:
<claim-text>performing the decoration operation by the target device based on the decoration operation being permissible.</claim-text>
</claim-text>
</claim>
</claims>
</us-patent-grant>

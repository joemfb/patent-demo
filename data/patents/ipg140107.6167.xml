<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08627291-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08627291</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>13437506</doc-number>
<date>20120402</date>
</document-id>
</application-reference>
<us-application-series-code>13</us-application-series-code>
<us-term-of-grant>
<us-term-extension>88</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>9</main-group>
<subgroup>44</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>717125</main-classification>
<further-classification>707793</further-classification>
<further-classification>707805</further-classification>
<further-classification>709203</further-classification>
<further-classification>713100</further-classification>
<further-classification>716103</further-classification>
<further-classification>717128</further-classification>
</classification-national>
<invention-title id="d2e53">Identification of localizable function calls</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>7290245</doc-number>
<kind>B2</kind>
<name>Skjolsvold</name>
<date>20071000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717125</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>7627858</doc-number>
<kind>B2</kind>
<name>Rose et al.</name>
<date>20091200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717125</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>7634537</doc-number>
<kind>B2</kind>
<name>Lu</name>
<date>20091200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709203</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>8307008</doc-number>
<kind>B2</kind>
<name>Pinkerton et al.</name>
<date>20121100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707793</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>2009/0240935</doc-number>
<kind>A1</kind>
<name>Shukla</name>
<date>20090900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>713100</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>2009/0271172</doc-number>
<kind>A1</kind>
<name>Mejdrich et al.</name>
<date>20091000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>2010/0115494</doc-number>
<kind>A1</kind>
<name>Gorton, Jr.</name>
<date>20100500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717128</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>2010/0257233</doc-number>
<kind>A1</kind>
<name>Auvray et al.</name>
<date>20101000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>2010/0287214</doc-number>
<kind>A1</kind>
<name>Narasayya et al.</name>
<date>20101100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707805</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>2011/0093836</doc-number>
<kind>A1</kind>
<name>Galicia et al.</name>
<date>20110400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>2011/0265050</doc-number>
<kind>A1</kind>
<name>Srinivasan et al.</name>
<date>20111000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>716103</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>2011/0289481</doc-number>
<kind>A1</kind>
<name>Franklin et al.</name>
<date>20111100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717125</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00013">
<document-id>
<country>EP</country>
<doc-number>2107460</doc-number>
<date>20091000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00014">
<othercit>Degui Xiao, &#x201c;Hybrid Model Predictive Control Based on Modified Particle Swarm Optimization&#x201d;, 2010, Hunan University, China, pp. 385-390, &#x3c;http://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&#x26;arnumber=5645289&#x3e;.</othercit>
</nplcit>
<category>cited by examiner</category>
</us-citation>
<us-citation>
<nplcit num="00015">
<othercit>Lei Zhao, &#x201c;Implementing Atomic Section by Using Hybrid Concurrent Control&#x201d;, 2007, University of Science &#x26; Technology of China, pp. 642-647, &#x3c;http://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&#x26;arnumber=4351558&#x3e;.</othercit>
</nplcit>
<category>cited by examiner</category>
</us-citation>
<us-citation>
<nplcit num="00016">
<othercit>Chi Cao Minh, &#x201c;STAMP: Stanford Transactional Applications for Multi-Processing&#x201d;, 2008, Computer Systems Laboratory, Stanford University, pp. 35-46, &#x3c;http://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&#x26;arnumber=4636089&#x3e;.</othercit>
</nplcit>
<category>cited by examiner</category>
</us-citation>
<us-citation>
<nplcit num="00017">
<othercit>Cheng-Lung Huang, &#x201c;A distributed PSO&#x2014;SVM hybrid system with feature selection and parameter optimization&#x201d;, 2007, Huafan University, Taipei, Taiwan, pp. 1381-1391, &#x3c;http://ac.els-cdn.com/S1568494607001299/1-s2.0-S1568494607001299-main.pdf?&#x3e;.</othercit>
</nplcit>
<category>cited by examiner</category>
</us-citation>
</us-references-cited>
<number-of-claims>8</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>None</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>6</number-of-drawing-sheets>
<number-of-figures>7</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20130263097</doc-number>
<kind>A1</kind>
<date>20131003</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Dawson</last-name>
<first-name>Michael H.</first-name>
<address>
<city>Ottawa</city>
<country>CA</country>
</address>
</addressbook>
<residence>
<country>CA</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Gao</last-name>
<first-name>Yuqing</first-name>
<address>
<city>Mount Kisco</city>
<state>NY</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="003" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Ito</last-name>
<first-name>Megumi</first-name>
<address>
<city>Kanagawa-ken</city>
<country>JP</country>
</address>
</addressbook>
<residence>
<country>JP</country>
</residence>
</us-applicant>
<us-applicant sequence="004" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Johnson</last-name>
<first-name>Graeme</first-name>
<address>
<city>Ottawa</city>
<country>CA</country>
</address>
</addressbook>
<residence>
<country>CA</country>
</residence>
</us-applicant>
<us-applicant sequence="005" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Seelam</last-name>
<first-name>Seetharami R.</first-name>
<address>
<city>Yorktown Heights</city>
<state>NY</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Dawson</last-name>
<first-name>Michael H.</first-name>
<address>
<city>Ottawa</city>
<country>CA</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Gao</last-name>
<first-name>Yuqing</first-name>
<address>
<city>Mount Kisco</city>
<state>NY</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="003" designation="us-only">
<addressbook>
<last-name>Ito</last-name>
<first-name>Megumi</first-name>
<address>
<city>Kanagawa-ken</city>
<country>JP</country>
</address>
</addressbook>
</inventor>
<inventor sequence="004" designation="us-only">
<addressbook>
<last-name>Johnson</last-name>
<first-name>Graeme</first-name>
<address>
<city>Ottawa</city>
<country>CA</country>
</address>
</addressbook>
</inventor>
<inventor sequence="005" designation="us-only">
<addressbook>
<last-name>Seelam</last-name>
<first-name>Seetharami R.</first-name>
<address>
<city>Yorktown Heights</city>
<state>NY</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Scully, Scott, Murphy &#x26; Presser, P.C.</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
<agent sequence="02" rep-type="attorney">
<addressbook>
<last-name>Percello, Esq.</last-name>
<first-name>Louis J.</first-name>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>International Business Machines Corporation</orgname>
<role>02</role>
<address>
<city>Armonk</city>
<state>NY</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Dao</last-name>
<first-name>Thuy</first-name>
<department>2192</department>
</primary-examiner>
<assistant-examiner>
<last-name>Dang</last-name>
<first-name>Khanh</first-name>
</assistant-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">Detecting localizable native methods may include statically analyzing a native binary file of a native method. For each function call invoked in the native binary, it is checked whether resources accessed through the function call is locally available or not. If all resources accessed though the native method is locally available, the method is annotated as localizable.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="199.05mm" wi="200.58mm" file="US08627291-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="181.61mm" wi="168.74mm" file="US08627291-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="197.95mm" wi="203.37mm" file="US08627291-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="246.38mm" wi="185.76mm" orientation="landscape" file="US08627291-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="177.21mm" wi="186.35mm" file="US08627291-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="255.52mm" wi="153.67mm" file="US08627291-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="146.73mm" wi="195.16mm" file="US08627291-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">FIELD</heading>
<p id="p-0002" num="0001">The present application relates generally to computers, and computer applications, computer systems with heterogeneous platforms and more particularly to identifying localizable function calls in computer systems.</p>
<heading id="h-0002" level="1">BACKGROUND</heading>
<p id="p-0003" num="0002">Java&#xae; Virtual Machine (JVM) implementations support the Java&#xae; Native Interface (JNI) as a mechanism which allows Java&#xae; code to call methods written in C and C++ (native code) and vice versa. Traditionally both the code written in Java&#x2122; and the native code is executed in the same process and by the same thread as execution transitions between the two.</p>
<p id="p-0004" num="0003">It is possible, however, to construct a JVM such that the native code is run in one or more Remote Execution Containers which may be hosted in separate processes on the same or different machines from where the Java&#xae; code is executed such that the native code is unaware that it is executing separately from the JVM. This separation prevents misbehaved native code from destabilizing the JVM and enables running the native code in a different environment (e.g., security context, bit width) than the main JVM.</p>
<p id="p-0005" num="0004">In a split JVM the cost of the calls between Java&#xae; and native code have much greater overhead and latency resulting in the need to reduce round-trips where possible. With the standardized Java Native Interface (JNI) an application often has to make multiple calls to get the information needed to complete an action.</p>
<p id="p-0006" num="0005">In a traditional JVM the overhead for a JNI to Java call is low enough to be acceptable. In the case of a distributed JVM, however, the latency of making a cross-process/cross-machine call may be magnitudes of order greater than required to run the method called. Because the Java Native Interface is standardized and all existing code needs to run in the Distributed JVM without modification, the option of changing the API to allow the application to request the data in a more efficient manner is not available. Therefore, the present disclosure recognizes that the number of round trips should be reduced to the minimum possible in a way that is transparent to the existing applications.</p>
<p id="p-0007" num="0006">The distributed JVM concept is relevant in hybrid systems. Hybrid system in the present disclosure refers to a heterogeneous distributed system that contains both general and special-purpose computing platforms. One example is the zEnterprise system, which has system Z, X86 and Power7 blades, from International Business Machines Corporation (IBM&#xae;), Armonk, N.Y. Since hybrid systems could serve as a flexible platform for optimizing workload in terms of performance, more and more applications could benefit from running in hybrid systems.</p>
<p id="p-0008" num="0007">JVM Proxy can accelerate Java&#xae; applications on hybrid systems by running a proxy JVM on a separate accelerator, which makes all Java&#xae; methods run on the accelerator and native methods run on the main machine. To improve application performance on JVM proxy, the present disclosure recognizes that native methods should be localized to run on accelerator, because a remote native method call initiated from a Java&#xae; method running on accelerator requires additional network round-trip overhead compared to the single system case. However, not all native methods can be localized. Checking if a native method can be localized by reading the source code manually requires much human cost. If a native method created newly or modified, such check needs to be made again.</p>
<heading id="h-0003" level="1">BRIEF SUMMARY</heading>
<p id="p-0009" num="0008">A method for detecting localizable native methods, in one aspect, may include analyzing a binary file of a native method to identify one or more function calls invoked within the binary file. The method may also include, for each of the identified one or more function calls, determining whether the function call accesses a resource locally unavailable on a selected machine. The method may further include, if it is determined that none of the one or more function calls access a resource locally unavailable on the selected machine, annotating the native method as localizable. The method may also include, if it is determined that at least one of the one or more function calls accesses a resource locally unavailable on the selected machine, annotating the native method as not localizable.</p>
<p id="p-0010" num="0009">A system for detecting localizable native methods, in one aspect, may include an analytic module operable to analyze a binary file of a native method to identify one or more function calls invoked within the binary file. The analytic module may be further operable to, for each of the identified one or more function calls, determine automatically, whether the function call accesses a resource locally unavailable on a selected machine, and if it is determined that none of the one or more function calls access a resource locally unavailable on the selected machine, annotate the native method as localizable, and if it is determined that at least one of the one or more function calls accesses a resource locally unavailable on the selected machine, annotate the native method as not localizable.</p>
<p id="p-0011" num="0010">A computer readable storage medium storing a program of instructions executable by a machine to perform one or more methods described herein also may be provided.</p>
<p id="p-0012" num="0011">Further features as well as the structure and operation of various embodiments are described in detail below with reference to the accompanying drawings. In the drawings, like reference numbers indicate identical or functionally similar elements.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE SEVERAL VIEWS OF THE DRAWINGS</heading>
<p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. 1</figref> shows an example of a main processor and a separate accelerator of a hybrid system in one embodiment of the present disclosure.</p>
<p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. 2</figref> is a flow diagram illustrating a method of determining whether a function is localizable in one embodiment of the present disclosure.</p>
<p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. 3</figref> illustrates an example x86 native methods.</p>
<p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. 4</figref> illustrates an example of a call graph created for a native method in one embodiment of the present disclosure.</p>
<p id="p-0017" num="0016"><figref idref="DRAWINGS">FIGS. 5A and 5B</figref> illustrate virtual machine schema in one embodiment of the present disclosure.</p>
<p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. 6</figref> illustrates a schematic of an example computer or processing system that may implement the localizable function identifier system in one embodiment of the present disclosure.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0005" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0019" num="0018">Methodologies for identifying localizable function or method calls are disclosed. <figref idref="DRAWINGS">FIG. 1</figref> shows an example of a main server <b>102</b> and a separate accelerator (a processing core) <b>104</b> of a hybrid system <b>100</b>. A proxy <b>106</b>, such as JVM Proxy, can accelerate applications, e.g., Java&#xae; applications, on the hybrid system <b>100</b> by running a proxy JVM <b>108</b> on the separate accelerator <b>104</b>. For example, proxy JVM <b>106</b> on the main server <b>102</b> may intercept application calls and sends the calls to the accelerator <b>104</b>, for proxy JVM <b>108</b> to run the application calls <b>110</b>. In one embodiment of the present disclosure, a methodology automatically identifies which applications calls can be localized at the accelerator <b>104</b>, for example, so that the proxy JVM <b>106</b> on the main server <b>102</b> can send those applications calls to the proxy JVM <b>108</b>. Those application calls (local native method <b>112</b>) that do not use remote resources (e.g., <b>114</b>) or only uses local resources (<b>116</b>) can be identified as being localizable on the accelerator in one embodiment of the present disclosure. Native methods <b>118</b> that access resources outside the accelerator may be left to run on the main server <b>102</b> or another processor. While <figref idref="DRAWINGS">FIG. 1</figref> shows JVM and Java&#xae; methods, it should be understood that the embodiments of the present disclosure may apply to any other hybrid systems.</p>
<p id="p-0020" num="0019">To ensure that all native resources a native method accesses should be available on the accelerator, a methodology of the present disclosure in one embodiment automatically and statically checks the localizability of native methods.</p>
<p id="p-0021" num="0020">Native methods refer to computer code that is machine dependent once the code is compiled, e.g., depends on the fixed characteristics of the machine for which the codes is compiled. Native methods are usually compiled in platform-specific compiler, e.g., C or C++, or other computer programming language compilers. Native resources refer to hardware and/or processing components attached to a particular machine, e.g., network cards, memory resources, encryption/decryption functionality of the machine or processor, data stored locally, and/or others.</p>
<p id="p-0022" num="0021">In one embodiment of the present disclosure, library calls such as glibc calls in a native method may be detected and the local availability of resources they access is determined. For instance, accesses to resources by native method may be determined statically by analyzing a compiled code, e.g., local &#x201c;.so&#x201d; binary files, and creating a call graph for a native method. If there is no standard library call within the native method and within all its callee functions, the native method is marked as localizable. In the native methods not marked localizable in the previous step, if there is a native method which calls one or more standard library calls within the method or its callee functions, and all native resources accessed by them are locally available on the local platform (e.g., an accelerator), the native method is marked as localizable. For native methods not marked localizable in the previous steps, mark them as no-localizable. Statically analyzing the compiled code may be performed off-line, e.g., without having to run the code.</p>
<p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. 2</figref> is a flow diagram illustrating a method of determining whether a function is localizable, for instance, to ensure all native resources a native method uses are locally available. Generally, methods or functions access native resources via standard library functions. Referring to <figref idref="DRAWINGS">FIG. 2</figref>, at <b>202</b>, the compiled code, e.g., binary files, is analyzed and a call graph for every native method may be created. A call graph lays out a sequence of functions or methods the native method calls, and functions or methods those functions and methods in turn may call, and so on; a node in a call graph represents a function call. Traversing a call graph created for a native method, at <b>204</b>, it is determined whether there is an un-resolved function call, e.g., a library call or another function call. If there are no un-resolved function calls, at <b>206</b>, the native method is determined to be localizable. If there are function calls to further analyze in the native method (e.g., determined via the call graph), the called function is searched from a program compiler library or user native library at <b>208</b>. For instance, the logic of the present disclosure in one embodiment may first search JVM and user library. If the sequence of function calls of a native method stays in the library, it means the native method does not require external resources, so the logic of the present disclosure in one embodiment can determine that the native method is localizable. If the function is found in the program compiler or user native library, the logic continues to <b>204</b>. Otherwise at <b>210</b>, it is determined whether the function call is a standard library call. If not, at <b>212</b>, the native method is determined to be not localizable, e.g., because the function call is not found locally. If at <b>210</b>, it is determined that the function call is a standard library call, the logic continues to <b>214</b>. At <b>214</b>, it is determined whether the function which is a standard library call is accessing a resource that is available locally. This may be done by looking up a database table or the like of the library calls <b>216</b>. The table <b>216</b> for instance may include information as to which resources the library calls are accessing. If the function is accessing a resource that is available locally, the logic continues to <b>204</b>, where another call graph node is checked. Otherwise, the native method is determined to be not localizable at <b>212</b>.</p>
<p id="p-0024" num="0023">An embodiment of the present disclosure presents a library function table <b>216</b> (an example shown below for glibc standard library), which contains standard library function information on native resources and local availability. Such library function table <b>216</b> may be utilized to check native resources accessed by a standard library function and its local availability. An example below shows such a table for glibc standard library. However, the present disclosure does not limit the table to only glibc standard library. If there is a system call directly invoked from a native method or its callee functions without calling a standard library function, an embodiment of the present disclosure may use a system call table, which contains its accessing resources and local availability, similar to the standard library function table.</p>
<p id="p-0025" num="0024">
<tables id="TABLE-US-00001" num="00001">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217pt" align="center"/>
<thead>
<row>
<entry namest="1" nameend="1" rowsep="1">TABLE 1</entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
<row>
<entry>glibc function table.</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="4">
<colspec colname="1" colwidth="14pt" align="left"/>
<colspec colname="2" colwidth="56pt" align="center"/>
<colspec colname="3" colwidth="63pt" align="center"/>
<colspec colname="4" colwidth="84pt" align="center"/>
<tbody valign="top">
<row>
<entry/>
<entry>&#x3c;Function Name&#x3e;</entry>
<entry>&#x3c;Native Resource&#x3e;</entry>
<entry>&#x3c;Local Availability&#x3e;</entry>
</row>
<row>
<entry namest="1" nameend="4" align="center" rowsep="1"/>
</row>
<row>
<entry/>
<entry>Func1</entry>
<entry>Socket</entry>
<entry>Locally available</entry>
</row>
<row>
<entry/>
<entry>Func2</entry>
<entry>File</entry>
<entry>Not available</entry>
</row>
<row>
<entry/>
<entry>Func3</entry>
<entry>None</entry>
<entry/>
</row>
<row>
<entry/>
<entry>. . .</entry>
</row>
<row>
<entry namest="1" nameend="4" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. 3</figref> illustrates two exemplary native methods from a typical x86 binary compiled in instruction set architecture of Intel&#xae; <b>8086</b> central processing unit (CPU). In this example, the compiled binary may include two native methods &#x201c;methodA&#x201d; <b>302</b>, and &#x201c;methodE&#x201d; <b>306</b>. In addition, it includes &#x201c;functionB&#x201d; <b>304</b> and &#x201c;functionC&#x201d; <b>308</b>, &#x201c;functionD&#x201d; <b>310</b>. <figref idref="DRAWINGS">FIG. 4</figref> illustrates an example call graph for this example. A call graph for this example may include nodes representing &#x201c;methodA&#x201d; <b>402</b>, &#x201c;functionB&#x201d; <b>414</b>, and &#x201c;methodE&#x201d; <b>412</b>. &#x201c;methodA&#x201d; <b>402</b> has child nodes &#x201c;functionB&#x201d; <b>404</b>, &#x201c;functionC&#x201d; <b>406</b>, and &#x201c;functionD&#x201d; <b>408</b>. Further, &#x201c;functionD&#x201d; <b>408</b> call graph may include &#x201c;callE&#x201d; <b>410</b> as the child node. Native &#x201c;methodE&#x201d; <b>412</b> contains no child so its call graph has no children.</p>
<p id="p-0027" num="0026">In this example, the methodology of the present disclosure evaluates native MethodE <b>306</b> and determines that it is localizable since there are no other function calls in this method. With respect to &#x201c;methodA&#x201d; <b>302</b>, that method has calls to three functions, &#x201c;functionB&#x201d;, &#x201c;functionC&#x201d;, and &#x201c;functionD.&#x201d; &#x201c;functionB&#x201d; <b>304</b> is an internal function in this example and it has no children. &#x201c;functionC&#x201d; <b>308</b> is an external function in this example referring to an external library. This means &#x201c;functionC&#x201d; is a library external function in libB.so. Both libA.so and libB.so are JVM or user library in this example. If &#x201c;methodA&#x201d; does not call &#x201c;functionD&#x201d;, &#x201c;methodA&#x201d; can be localized. &#x201c;functionD&#x201d; <b>310</b> is a standard library function in this example. The methodology of the present disclosure in one embodiment evaluates &#x201c;functionB&#x201d; <b>304</b> and determines that it is an internal function, which does not have any other function calls. The methodology of the present disclosure in one embodiment evaluates &#x201c;functionC&#x201d; <b>308</b> and determines that it is an external function so its corresponding library will be analyzed accordingly. In this case, the function is checked whether is has function calls, as in the same way as library internal functions. If functions in the same name as &#x201c;functionC&#x201d; exist in multiple libraries, the methodology of the present disclosure in one embodiment may find a library to check by the system link parameter or others. If the library to be checked cannot be determined, all the functions in the same name as &#x201c;functionC&#x201d; may be checked and determined whether they are localizable in order to determine whether &#x201c;functionC&#x201d; can be localized.</p>
<p id="p-0028" num="0027">The methodology of the present disclosure in one embodiment evaluates &#x201c;functionD&#x201d; <b>310</b> and determines that it is a call to a standard library that invokes a system call &#x201c;callE&#x201d;. A check is made then to determine whether this system call (in this example, &#x201c;callE&#x201d;) accesses a native resource or resource that is outside the local machine (in this example, x86 CPU). If so, &#x201c;methodA&#x201d; <b>302</b> is determined to be localizable.</p>
<p id="p-0029" num="0028">In one embodiment of the present disclosure, those methods determined not as &#x201c;localizable&#x201d; may be further classified as &#x201c;may be localizable&#x201d; or &#x201c;non-localizable&#x201d;. If a native method is determined or classified as localizable, that method is deemed to have affinity with the local machine for which the native method was compiled to run on. Otherwise, that method is deemed to have affinity with a remote machine. A table or database of affinity may be created accordingly and this table may be updated and changed based on external circumstances such as resources being added to a local machine and/or remote machine, the native method being modified, and others.</p>
<p id="p-0030" num="0029"><figref idref="DRAWINGS">FIGS. 5A and 5B</figref> illustrate virtual machine processes and threads schema. In a traditional Java&#xae; Virtual Machine, a single Java&#xae; process may execute Java&#xae; code and native code as shown at <b>502</b>. In distributed Java&#xae; Virtual Machines, a native code may run in remote execution container <b>504</b> separate from a process <b>506</b> that runs Java&#xae; code. The methodology of the present disclosure in one embodiment may identify the native methods <b>508</b> that are localizable in the remote execution container, so as to reduce the cross-machine/cross-process calls.</p>
<p id="p-0031" num="0030"><figref idref="DRAWINGS">FIG. 6</figref> illustrates a schematic of an example computer or processing system that may implement the localizable function identifier system in one embodiment of the present disclosure. The computer system is only one example of a suitable processing system and is not intended to suggest any limitation as to the scope of use or functionality of embodiments of the methodology described herein. The processing system shown may be operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well-known computing systems, environments, and/or configurations that may be suitable for use with the processing system shown in <figref idref="DRAWINGS">FIG. 6</figref> may include, but are not limited to, personal computer systems, server computer systems, thin clients, thick clients, handheld or laptop devices, multiprocessor systems, microprocessor-based systems, set top boxes, programmable consumer electronics, network PCs, minicomputer systems, mainframe computer systems, and distributed cloud computing environments that include any of the above systems or devices, and the like.</p>
<p id="p-0032" num="0031">The computer system may be described in the general context of computer system executable instructions, such as program modules, being executed by a computer system. Generally, program modules may include routines, programs, objects, components, logic, data structures, and so on that perform particular tasks or implement particular abstract data types. The computer system may be practiced in distributed cloud computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed cloud computing environment, program modules may be located in both local and remote computer system storage media including memory storage devices.</p>
<p id="p-0033" num="0032">The components of computer system may include, but are not limited to, one or more processors or processing units <b>12</b>, a system memory <b>16</b>, and a bus <b>14</b> that couples various system components including system memory <b>16</b> to processor <b>12</b>. The processor <b>12</b> may include a localizable function identifier module <b>10</b> that performs the methods described herein. The module <b>10</b> may be programmed into the integrated circuits of the processor <b>12</b>, or loaded from memory <b>16</b>, storage device <b>18</b>, or network <b>24</b> or combinations thereof.</p>
<p id="p-0034" num="0033">Bus <b>14</b> may represent one or more of any of several types of bus structures, including a memory bus or memory controller, a peripheral bus, an accelerated graphics port, and a processor or local bus using any of a variety of bus architectures. By way of example, and not limitation, such architectures include Industry Standard Architecture (ISA) bus, Micro Channel Architecture (MCA) bus, Enhanced ISA (EISA) bus, Video Electronics Standards Association (VESA) local bus, and Peripheral Component Interconnects (PCI) bus.</p>
<p id="p-0035" num="0034">Computer system may include a variety of computer system readable media. Such media may be any available media that is accessible by computer system, and it may include both volatile and non-volatile media, removable and non-removable media.</p>
<p id="p-0036" num="0035">System memory <b>16</b> can include computer system readable media in the form of volatile memory, such as random access memory (RAM) and/or cache memory or others. Computer system may further include other removable/non-removable, volatile/non-volatile computer system storage media. By way of example only, storage system <b>18</b> can be provided for reading from and writing to a non-removable, non-volatile magnetic media (e.g., a &#x201c;hard drive&#x201d;). Although not shown, a magnetic disk drive for reading from and writing to a removable, non-volatile magnetic disk (e.g., a &#x201c;floppy disk&#x201d;), and an optical disk drive for reading from or writing to a removable, non-volatile optical disk such as a CD-ROM, DVD-ROM or other optical media can be provided. In such instances, each can be connected to bus <b>14</b> by one or more data media interfaces.</p>
<p id="p-0037" num="0036">Computer system may also communicate with one or more external devices <b>26</b> such as a keyboard, a pointing device, a display <b>28</b>, etc.; one or more devices that enable a user to interact with computer system; and/or any devices (e.g., network card, modem, etc.) that enable computer system to communicate with one or more other computing devices. Such communication can occur via Input/Output (I/O) interfaces <b>20</b>.</p>
<p id="p-0038" num="0037">Still yet, computer system can communicate with one or more networks <b>24</b> such as a local area network (LAN), a general wide area network (WAN), and/or a public network (e.g., the Internet) via network adapter <b>22</b>. As depicted, network adapter <b>22</b> communicates with the other components of computer system via bus <b>14</b>. It should be understood that although not shown, other hardware and/or software components could be used in conjunction with computer system. Examples include, but are not limited to: microcode, device drivers, redundant processing units, external disk drive arrays, RAID systems, tape drives, and data archival storage systems, etc.</p>
<p id="p-0039" num="0038">As will be appreciated by one skilled in the art, aspects of the present invention may be embodied as a system, method or computer program product. Accordingly, aspects of the present invention may take the form of an entirely hardware embodiment, an entirely software embodiment (including firmware, resident software, micro-code, etc.) or an embodiment combining software and hardware aspects that may all generally be referred to herein as a &#x201c;circuit,&#x201d; &#x201c;module&#x201d; or &#x201c;system.&#x201d; Furthermore, aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium(s) having computer readable program code embodied thereon.</p>
<p id="p-0040" num="0039">Any combination of one or more computer readable medium(s) may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be, for example, but not limited to, an electronic, magnetic, optical, electromagnetic, infrared, or semiconductor system, apparatus, or device, or any suitable combination of the foregoing. More specific examples (a non-exhaustive list) of the computer readable storage medium would include the following: an electrical connection having one or more wires, a portable computer diskette, a hard disk, a random access memory (RAM), a read-only memory (ROM), an erasable programmable read-only memory (EPROM or Flash memory), an optical fiber, a portable compact disc read-only memory (CD-ROM), an optical storage device, a magnetic storage device, or any suitable combination of the foregoing. In the context of this document, a computer readable storage medium may be any tangible medium that can contain, or store a program for use by or in connection with an instruction execution system, apparatus, or device.</p>
<p id="p-0041" num="0040">A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein, for example, in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms, including, but not limited to, electro-magnetic, optical, or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate, propagate, or transport a program for use by or in connection with an instruction execution system, apparatus, or device.</p>
<p id="p-0042" num="0041">Program code embodied on a computer readable medium may be transmitted using any appropriate medium, including but not limited to wireless, wireline, optical fiber cable, RF, etc., or any suitable combination of the foregoing.</p>
<p id="p-0043" num="0042">Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages, including an object oriented programming language such as Java, Smalltalk, C++ or the like and conventional procedural programming languages, such as the &#x201c;C&#x201d; programming language or similar programming languages, a scripting language such as Perl, VBS or similar languages, and/or functional languages such as Lisp and ML and logic-oriented languages such as Prolog. The program code may execute entirely on the user's computer, partly on the user's computer, as a stand-alone software package, partly on the user's computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario, the remote computer may be connected to the user's computer through any type of network, including a local area network (LAN) or a wide area network (WAN), or the connection may be made to an external computer (for example, through the Internet using an Internet Service Provider).</p>
<p id="p-0044" num="0043">Aspects of the present invention are described with reference to flowchart illustrations and/or block diagrams of methods, apparatus (systems) and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and/or block diagrams, and combinations of blocks in the flowchart illustrations and/or block diagrams, can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer, special purpose computer, or other programmable data processing apparatus to produce a machine, such that the instructions, which execute via the processor of the computer or other programmable data processing apparatus, create means for implementing the functions/acts specified in the flowchart and/or block diagram block or blocks.</p>
<p id="p-0045" num="0044">These computer program instructions may also be stored in a computer readable medium that can direct a computer, other programmable data processing apparatus, or other devices to function in a particular manner, such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function/act specified in the flowchart and/or block diagram block or blocks.</p>
<p id="p-0046" num="0045">The computer program instructions may also be loaded onto a computer, other programmable data processing apparatus, or other devices to cause a series of operational steps to be performed on the computer, other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions/acts specified in the flowchart and/or block diagram block or blocks.</p>
<p id="p-0047" num="0046">The flowchart and block diagrams in the figures illustrate the architecture, functionality, and operation of possible implementations of systems, methods and computer program products according to various embodiments of the present invention. In this regard, each block in the flowchart or block diagrams may represent a module, segment, or portion of code, which comprises one or more executable instructions for implementing the specified logical function(s). It should also be noted that, in some alternative implementations, the functions noted in the block may occur out of the order noted in the figures. For example, two blocks shown in succession may, in fact, be executed substantially concurrently, or the blocks may sometimes be executed in the reverse order, depending upon the functionality involved. It will also be noted that each block of the block diagrams and/or flowchart illustration, and combinations of blocks in the block diagrams and/or flowchart illustration, can be implemented by special purpose hardware-based systems that perform the specified functions or acts, or combinations of special purpose hardware and computer instructions.</p>
<p id="p-0048" num="0047">The computer program product may comprise all the respective features enabling the implementation of the methodology described herein, and which&#x2014;when loaded in a computer system&#x2014;is able to carry out the methods. Computer program, software program, program, or software, in the present context means any expression, in any language, code or notation, of a set of instructions intended to cause a system having an information processing capability to perform a particular function either directly or after either or both of the following: (a) conversion to another language, code or notation; and/or (b) reproduction in a different material form.</p>
<p id="p-0049" num="0048">The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein, the singular forms &#x201c;a&#x201d;, &#x201c;an&#x201d; and &#x201c;the&#x201d; are intended to include the plural forms as well, unless the context clearly indicates otherwise. It will be further understood that the terms &#x201c;comprises&#x201d; and/or &#x201c;comprising,&#x201d; when used in this specification, specify the presence of stated features, integers, steps, operations, elements, and/or components, but do not preclude the presence or addition of one or more other features, integers, steps, operations, elements, components, and/or groups thereof.</p>
<p id="p-0050" num="0049">The corresponding structures, materials, acts, and equivalents of all means or step plus function elements, if any, in the claims below are intended to include any structure, material, or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present invention has been presented for purposes of illustration and description, but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiment was chosen and described in order to best explain the principles of the invention and the practical application, and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.</p>
<p id="p-0051" num="0050">Various aspects of the present disclosure may be embodied as a program, software, or computer instructions embodied in a computer or machine usable or readable medium, which causes the computer or machine to perform the steps of the method when executed on the computer, processor, and/or machine. A program storage device readable by a machine, tangibly embodying a program of instructions executable by the machine to perform various functionalities and methods described in the present disclosure is also provided.</p>
<p id="p-0052" num="0051">The system and method of the present disclosure may be implemented and run on a general-purpose computer or special-purpose computer system. The terms &#x201c;computer system&#x201d; and &#x201c;computer network&#x201d; as may be used in the present application may include a variety of combinations of fixed and/or portable computer hardware, software, peripherals, and storage devices. The computer system may include a plurality of individual components that are networked or otherwise linked to perform collaboratively, or may include one or more stand-alone components. The hardware and software components of the computer system of the present application may include and may be included within fixed and portable devices such as desktop, laptop, and/or server. A module may be a component of a device, software, program, or system that implements some &#x201c;functionality&#x201d;, which can be embodied as software, hardware, firmware, electronic circuitry, or etc.</p>
<p id="p-0053" num="0052">The embodiments described above are illustrative examples and it should not be construed that the present invention is limited to these particular embodiments. Thus, various changes and modifications may be effected by one skilled in the art without departing from the spirit or scope of the invention as defined in the appended claims.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>We claim:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A method for detecting localizable native methods, comprising: analyzing, by a processor, a binary file of a native method to identify one or more function calls invoked within the binary file;
<claim-text>for each of the identified one or more function calls, determining, by the processor automatically, whether said function call accesses a resource locally unavailable on a selected machine;</claim-text>
<claim-text>if it is determined that none of said one or more function calls access a resource locally unavailable on the selected machine, annotating, by the processor automatically, said native method as localizable; and</claim-text>
<claim-text>if it is determined that at least one of said one or more function calls accesses a resource locally unavailable on the selected machine, annotating, by the processor automatically, said native method as not localizable.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein said analyzing is performed statically.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further including creating a call graph associated with the native method, the call graph including nodes respectively representing said one or more function calls, and the step of determining includes traversing said call graph.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method of <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein the step of determining further includes determining whether the function call represented by a node of the call graph is a library function call, and if the function call is a library function call, looking up a library function table to determine whether the library function call accesses a resource locally unavailable on the selected machine.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method of <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein the step of determining further includes determining whether the function call represented by a node of the call graph is a system call, and if the function call is a system call, looking up a system call table to determine whether the system call accesses a resource locally unavailable on the selected machine.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further including annotating which function calls in said binary file is accessing a resource that is not available on the selected machine.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, the method further including measuring affinity of said native method to the selected machine based on whether the native method is determined to be localizable.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The method of <claim-ref idref="CLM-00007">claim 7</claim-ref>, further including recording said affinity measure. </claim-text>
</claim>
</claims>
</us-patent-grant>

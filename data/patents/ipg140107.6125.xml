<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08627249-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08627249</doc-number>
<kind>B1</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>13159085</doc-number>
<date>20110613</date>
</document-id>
</application-reference>
<us-application-series-code>13</us-application-series-code>
<us-term-of-grant>
<disclaimer>
<text>This patent is subject to a terminal disclaimer.</text>
</disclaimer>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>17</main-group>
<subgroup>50</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>716108</main-classification>
</classification-national>
<invention-title id="d2e51">Method and system for generating design constraints</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>5638290</doc-number>
<kind>A</kind>
<name>Ginetti et al.</name>
<date>19970600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>716108</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>6691301</doc-number>
<kind>B2</kind>
<name>Bowen</name>
<date>20040200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717114</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>6877139</doc-number>
<kind>B2</kind>
<name>Daga</name>
<date>20050400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>7124386</doc-number>
<kind>B2</kind>
<name>Smith et al.</name>
<date>20061000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>7152215</doc-number>
<kind>B2</kind>
<name>Smith et al.</name>
<date>20061200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>7174520</doc-number>
<kind>B2</kind>
<name>White et al.</name>
<date>20070200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>7243316</doc-number>
<kind>B2</kind>
<name>White et al.</name>
<date>20070700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>7325206</doc-number>
<kind>B2</kind>
<name>White et al.</name>
<date>20080100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>7353475</doc-number>
<kind>B2</kind>
<name>White et al.</name>
<date>20080400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>7356783</doc-number>
<kind>B2</kind>
<name>Smith et al.</name>
<date>20080400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>7360179</doc-number>
<kind>B2</kind>
<name>Smith et al.</name>
<date>20080400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>7363099</doc-number>
<kind>B2</kind>
<name>Smith et al.</name>
<date>20080400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00013">
<document-id>
<country>US</country>
<doc-number>7363598</doc-number>
<kind>B2</kind>
<name>Smith et al.</name>
<date>20080400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00014">
<document-id>
<country>US</country>
<doc-number>7367008</doc-number>
<kind>B2</kind>
<name>White et al.</name>
<date>20080400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00015">
<document-id>
<country>US</country>
<doc-number>7380220</doc-number>
<kind>B2</kind>
<name>Smith et al.</name>
<date>20080500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00016">
<document-id>
<country>US</country>
<doc-number>7383521</doc-number>
<kind>B2</kind>
<name>Smith et al.</name>
<date>20080600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00017">
<document-id>
<country>US</country>
<doc-number>7393755</doc-number>
<kind>B2</kind>
<name>Smith et al.</name>
<date>20080700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00018">
<document-id>
<country>US</country>
<doc-number>7962886</doc-number>
<kind>B1</kind>
<name>Pandey et al.</name>
<date>20110600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>716136</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00019">
<document-id>
<country>US</country>
<doc-number>2003/0093765</doc-number>
<kind>A1</kind>
<name>Lam et al.</name>
<date>20030500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>716 18</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00020">
<document-id>
<country>US</country>
<doc-number>2003/0177463</doc-number>
<kind>A1</kind>
<name>Daga</name>
<date>20030900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>716  6</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00021">
<document-id>
<country>US</country>
<doc-number>2005/0037522</doc-number>
<kind>A1</kind>
<name>Smith et al.</name>
<date>20050200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00022">
<document-id>
<country>US</country>
<doc-number>2005/0051809</doc-number>
<kind>A1</kind>
<name>Smith et al.</name>
<date>20050300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00023">
<document-id>
<country>US</country>
<doc-number>2005/0132306</doc-number>
<kind>A1</kind>
<name>Smith et al.</name>
<date>20050600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00024">
<document-id>
<country>US</country>
<doc-number>2005/0196964</doc-number>
<kind>A1</kind>
<name>Smith et al.</name>
<date>20050900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00025">
<document-id>
<country>US</country>
<doc-number>2005/0235246</doc-number>
<kind>A1</kind>
<name>Smith et al.</name>
<date>20051000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00026">
<document-id>
<country>US</country>
<doc-number>2005/0251780</doc-number>
<kind>A1</kind>
<name>Nakashiba</name>
<date>20051100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>716 18</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00027">
<document-id>
<country>US</country>
<doc-number>2006/0123370</doc-number>
<kind>A1</kind>
<name>Vergara-Escobar</name>
<date>20060600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>716  6</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00028">
<document-id>
<country>US</country>
<doc-number>2007/0101305</doc-number>
<kind>A1</kind>
<name>Smith et al.</name>
<date>20070500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00029">
<document-id>
<country>US</country>
<doc-number>2007/0256039</doc-number>
<kind>A1</kind>
<name>White</name>
<date>20071100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00030">
<document-id>
<country>US</country>
<doc-number>2008/0027698</doc-number>
<kind>A1</kind>
<name>White</name>
<date>20080100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00031">
<document-id>
<country>US</country>
<doc-number>2008/0114813</doc-number>
<kind>A1</kind>
<name>Leonard et al.</name>
<date>20080500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707200</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00032">
<document-id>
<country>US</country>
<doc-number>2008/0160646</doc-number>
<kind>A1</kind>
<name>White et al.</name>
<date>20080700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00033">
<document-id>
<country>US</country>
<doc-number>2008/0162103</doc-number>
<kind>A1</kind>
<name>White et al.</name>
<date>20080700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00034">
<document-id>
<country>US</country>
<doc-number>2008/0163139</doc-number>
<kind>A1</kind>
<name>Scheffer et al.</name>
<date>20080700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00035">
<document-id>
<country>US</country>
<doc-number>2008/0163141</doc-number>
<kind>A1</kind>
<name>Scheffer et al.</name>
<date>20080700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00036">
<document-id>
<country>US</country>
<doc-number>2008/0163142</doc-number>
<kind>A1</kind>
<name>White et al.</name>
<date>20080700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00037">
<document-id>
<country>US</country>
<doc-number>2008/0163148</doc-number>
<kind>A1</kind>
<name>Scheffer et al.</name>
<date>20080700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00038">
<document-id>
<country>US</country>
<doc-number>2008/0163150</doc-number>
<kind>A1</kind>
<name>White et al.</name>
<date>20080700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00039">
<document-id>
<country>US</country>
<doc-number>2008/0216027</doc-number>
<kind>A1</kind>
<name>White et al.</name>
<date>20080900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00040">
<document-id>
<country>US</country>
<doc-number>2009/0031261</doc-number>
<kind>A1</kind>
<name>Smith et al.</name>
<date>20090100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00041">
<document-id>
<country>US</country>
<doc-number>2009/0031271</doc-number>
<kind>A1</kind>
<name>White et al.</name>
<date>20090100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00042">
<othercit>Non Final Office Action Mailed on Aug. 31, 2010 for U.S. Appl. No. 11/952,795.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00043">
<othercit>Notice of Allowance Mailed on Feb. 3, 2011 for U.S. Appl. No. 11/952,795.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>20</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>716100-139</main-classification>
<additional-info>unstructured</additional-info>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>9</number-of-drawing-sheets>
<number-of-figures>9</number-of-figures>
</figures>
<us-related-documents>
<continuation>
<relation>
<parent-doc>
<document-id>
<country>US</country>
<doc-number>11952798</doc-number>
<date>20071207</date>
</document-id>
<parent-grant-document>
<document-id>
<country>US</country>
<doc-number>7962886</doc-number>
</document-id>
</parent-grant-document>
</parent-doc>
<child-doc>
<document-id>
<country>US</country>
<doc-number>13159085</doc-number>
</document-id>
</child-doc>
</relation>
</continuation>
<us-provisional-application>
<document-id>
<country>US</country>
<doc-number>60873886</doc-number>
<date>20061208</date>
</document-id>
</us-provisional-application>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Pandey</last-name>
<first-name>Manish</first-name>
<address>
<city>San Jose</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Glusman</last-name>
<first-name>Marcalo</first-name>
<address>
<city>San Jose</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="003" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Krstic</last-name>
<first-name>Angela</first-name>
<address>
<city>San Diego</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="004" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Hsieh</last-name>
<first-name>Yee-Wing</first-name>
<address>
<city>Pleasanton</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="005" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Lin</last-name>
<first-name>Andy</first-name>
<address>
<city>Saratoga</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Pandey</last-name>
<first-name>Manish</first-name>
<address>
<city>San Jose</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Glusman</last-name>
<first-name>Marcalo</first-name>
<address>
<city>San Jose</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="003" designation="us-only">
<addressbook>
<last-name>Krstic</last-name>
<first-name>Angela</first-name>
<address>
<city>San Diego</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="004" designation="us-only">
<addressbook>
<last-name>Hsieh</last-name>
<first-name>Yee-Wing</first-name>
<address>
<city>Pleasanton</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="005" designation="us-only">
<addressbook>
<last-name>Lin</last-name>
<first-name>Andy</first-name>
<address>
<city>Saratoga</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Vista IP Law Group, LLP</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>Cadence Design Systems, Inc.</orgname>
<role>02</role>
<address>
<city>San Jose</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Siek</last-name>
<first-name>Vuthe</first-name>
<department>2825</department>
</primary-examiner>
<assistant-examiner>
<last-name>Lin</last-name>
<first-name>Aric</first-name>
</assistant-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">A method and system for generating design constraints for an electronic circuit design is disclosed. The method and system include reading a design description and an existing design constraint file, configuring design constraint integration rules, writing a new design constraint file, evaluating results of the new design constraint file, and replacing existing design constraint file with the new design constraint file.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="124.46mm" wi="142.83mm" file="US08627249-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="157.23mm" wi="147.40mm" file="US08627249-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="229.36mm" wi="166.37mm" file="US08627249-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="219.29mm" wi="101.26mm" file="US08627249-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="106.17mm" wi="117.52mm" file="US08627249-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="165.10mm" wi="138.09mm" orientation="landscape" file="US08627249-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="80.43mm" wi="99.91mm" file="US08627249-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="201.00mm" wi="170.35mm" orientation="landscape" file="US08627249-20140107-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00008" num="00008">
<img id="EMI-D00008" he="151.38mm" wi="148.76mm" file="US08627249-20140107-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00009" num="00009">
<img id="EMI-D00009" he="229.28mm" wi="148.67mm" orientation="landscape" file="US08627249-20140107-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?RELAPP description="Other Patent Relations" end="lead"?>
<heading id="h-0001" level="1">CROSS-REFERENCE TO RELATED APPLICATIONS</heading>
<p id="p-0002" num="0001">This application is a continuation of U.S. application Ser. No. 11/952,798, now U.S. Pat. No. 7,962,886, filed on Dec. 7, 2007, which claims the benefit of U.S. Provisional Application No. 60/873,886 filed on Dec. 8, 2006, both of the above applications are hereby incorporated by reference in their entireties for all purposes.</p>
<?RELAPP description="Other Patent Relations" end="tail"?>
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0002" level="1">BACKGROUND</heading>
<p id="p-0003" num="0002">1. Field</p>
<p id="p-0004" num="0003">The field of the present invention relates to electronic circuit design and, in particular, to generating design constraints for electronic circuit designs.</p>
<p id="p-0005" num="0004">2. Description of Related Art</p>
<p id="p-0006" num="0005">Typically, a design flow at various levels of design abstraction involves specifying design constraints while different synthesis tools optimize the design around these constraints. In case of timing constraints, after synthesis, a static timing analysis is used to verify whether a design is meeting the timing budget. If this is not the case, the static timing analysis produces a critical path report. Typically, static timing analysis ignores the logic function of the gates in the design. Therefore, certain critical paths may turn out to be not sensitizable. The designer may analyze all the critical paths to determine whether a critical path is a false path or a multi-cycle path. Since false paths may not be sensitized, they should not be considered in static timing analysis. For multi-cycle paths, the timing budget may be extended to multiple clock cycles. Therefore, if such paths are found, the design constraints are modified accordingly. Otherwise, the design is modified to meet the design specification. This process continues until there are no remaining timing violations in the design.</p>
<p id="p-0007" num="0006">There are many challenges in this design process. First, the design constraints are developed manually and therefore are susceptible to errors. Second, as the complexity of the designs increases, the design may be partitioned into multiple blocks. As a result, the design constraints also need to be partitioned accordingly. Maintaining correctness and consistency in the design constraints between block boundaries and between block constraints and the top-level, full-chip constraints become a challenge. For that matter, integrating block level design constraints for various IP cores developed at the block level by block owners, into top-level, full-chip design constraints for global timing analysis and synthesis, also becomes a challenge. This is a task that is usually done manually or with the aid of ad-hoc scripts. It may also be useful after the physical partitioning phase. Moreover, there might be bugs in the design which cause inconsistencies between functional behavior of a design and a design constraint specification given in a format, such as Cadence Common Timing Engine (CTE) Design Constraint Format, Synopsys Design Constraint (SDC) Format, and/or various other design constraint specifications).</p>
<heading id="h-0003" level="1">SUMMARY</heading>
<p id="p-0008" num="0007">Some embodiments of the invention relate to electronic circuit design and to generating design constraints for electronic circuit designs. Design constraints may include timing constraints, such as clock characterization, delay specifications, and timing exceptions, such as false path and multi-cycle path exceptions.</p>
<p id="p-0009" num="0008">In one embodiment, a method for generating design constraints includes reading a design description and an existing design constraint file, configuring design constraint integration rules, writing a new design constraint file, evaluating results of the new design constraint file, and replacing existing design constraint file with the new design constraint file.</p>
<p id="p-0010" num="0009">In one embodiment, timing constraint methodology presented herein addresses the above-mentioned challenges of the prior art by automating the tedious and error prone manual process of constraint creation and by eliminating constraint correctness and consistency issues. As will be described herein, an improved set of constraints will allow synthesis to produce better results in less runtime.</p>
<p id="p-0011" num="0010">Previous work in timing exception generation has been based solely on RTL designs and may involve designers to specify clocks in the design. Furthermore, it generated timing exceptions for the entire design without considering the exception's impact on the quality of the results downstream.</p>
<p id="p-0012" num="0011">In one embodiment, an approach is a flexible and integrated approach that supports RTL designs and gate-level designs. Timing exceptions are extracted directly from the design with techniques that ensure positive impact on the quality of the results downstream in the design process. A validation engine may be included and may be independent of the validation methodologies. For example, multiple validation methodologies may be supported, such as combinational and sequential timing exception, static and dynamic timing analysis, and timing exception candidate filtering.</p>
<p id="p-0013" num="0012">Design constraints, including timing constraints such as clock characterization, delay specifications, and timing exceptions such as false path and multi-cycle path exceptions, constitute an important part of the overall design process. These constraints are used in every design phase, including RTL synthesis and physical placement and routing. Unfortunately, in some instances, the constraints are developed manually. With increasing design size and complexity, these design constraints also increase in number and complexity. Incorrect and/or incomplete constraints may lead to sub-optimal designs, in terms of area, timing and/or power, or even worse, may lead to silicon failures.</p>
<p id="p-0014" num="0013">In one embodiment, a comprehensive integrated methodology for automatic creation of timing exceptions is disclosed. Structural analysis and formal validation techniques may be employed to provide an automated solution to the constraint creation problem. The two key components of constraint creation methodology may include design constraint integration techniques used for creation of top-level constraints though automated promotion and integration of sub-block constraints and timing exception generation techniques that use automated design exploration for selecting a small set of potential candidates for false path and multi-cycle-path exceptions which are then validated using formal validation engines.</p>
<p id="p-0015" num="0014">In one embodiment, methodology discussed herein may support the generation of constraints for both RTL and gate-level designs and may generate combinational as well as sequential timing constraints. In one aspect, while techniques may create constraints by analyzing the design with minimal mode constraints and the timing exceptions may be generated for the entire design, they are also flexible to allow for additional user information to generate a small number of exceptions with the highest positive impact on the design flow (e.g., generating exceptions for specific regions of the design or by only considering long timing paths, etc).</p>
<p id="p-0016" num="0015">In one embodiment, generated timing exceptions may be written out in a compressed or uncompressed design constraint format.</p>
<p id="p-0017" num="0016">These and other objects and advantages of the present teachings will become more fully apparent from the following description taken in conjunction with the accompanying drawings.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0004" level="1">BRIEF DESCRIPTION OF DRAWINGS</heading>
<p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. 1</figref> shows one embodiment of a high-level constraint creation flow.</p>
<p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. 2A</figref> shows one embodiment of a design constraint integration method.</p>
<p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. 2B</figref> shows one embodiment of an integration method.</p>
<p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. 3</figref> shows one embodiment of a false path due to reconvergent signals.</p>
<p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. 4</figref> shows one embodiment of a functional false path.</p>
<p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. 5</figref> shows one embodiment of a clock domain crossing false path.</p>
<p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. 6</figref> shows one embodiment of a multi-cycle path.</p>
<p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. 7</figref> shows one embodiment of a timing exception generation flow.</p>
<p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. 8</figref> shows one embodiment of a computer system with which embodiments of the invention may be implemented.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0005" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0027" num="0026">Various embodiments of the present invention are described hereinafter with reference to the drawings. It should be noted that the drawings are not drawn to scale and that elements of similar structures or functions are represented by like reference numerals throughout the drawings.</p>
<p id="p-0028" num="0027">In one embodiment, timing constraint creation methodology provides a comprehensive automated constraint creation flow that generates timing constraints that are proven correct and consistent. One contribution of this methodology includes a new design constraint integration technique that provides methodical means for integrating sub-block constraints so as to maintain correctness and consistency of top-level constraints. Another contribution of this methodology includes techniques for automatic design exploration and use of formal verification methods to generate and prove timing constraints by systematic means.</p>
<p id="p-0029" num="0028">In greater detail herein, topics that will be discussed include design constraint integration aspects of constraint creation, automated constraint creation, timing exception generation and design constraint integration.</p>
<p id="p-0030" num="0029">Integration of block level constraints into a full-chip constraint set is a delicate task, because the constraints taken from a block, and in particular the timing exceptions, may take on an unexpected meaning at the top-level. It is of particular importance to avoid manipulating constraints purely at the textual level. In one aspect of the invention, the meaning of the constraints is propagated to top-level entities, and then written out as new commands that may or may not resemble the original ones.</p>
<p id="p-0031" num="0030">In one embodiment, design constraint integration allows the user to specify an initial, partial chip-level design constraint file whose contents are considered &#x201c;golden&#x201d;. This set of constraints is enhanced by promoting individual timing constraints (including clock and delay attributes, constants and timing exceptions) from the block design constraint files, and the result is written out as a new design constraint file.</p>
<p id="p-0032" num="0031">It is important not to promote all the constraints at once. For example, it is impossible to properly analyze constant propagation and the reach of clock trees before the correct constants are set on the design. Therefore, design constraint integration allows the integration of constraints in phases. As will be described in greater detail herein, a first phase is the promotion of set_case_analysis commands, a second phase covers the clocks, and so on. After each phase, the resulting constraints are regarded as the new partial top-level design constraint file. When promoting design constraints, it is necessary to perform structural checks and apply customer-driven policies and methodologies. Methodology discussed herein is flexible by providing a reasonable level of configurability while keeping the interface easy to use.</p>
<p id="p-0033" num="0032">In one embodiment, design constraint integration methodology is rule based, wherein each integration rule is dedicated to a particular type of design constraint. A rule may be instantiated any number of times. The user may define instances from scratch, or a default configuration file provided by the tool may be used. A rule instance includes a condition and one or more actions and action options. A condition includes one or more predicates that are used to establish whether a rule instance matches a given constraint that is being considered to be promoted. The actions may stipulate whether the constraint should be promoted or not, and how it should be promoted. They may also provide the user with pertinent messages.</p>
<p id="p-0034" num="0033">In one embodiment, rule instances have numerical priorities that may be used to decide conflicts between multiple rule instances that match the same constraint but stipulate contradicting outcomes.</p>
<p id="p-0035" num="0034">Each time new constraints are created, some embodiments of methods and systems of the invention perform hierarchical consistency checks, which allow the user to identify any problems before proceeding to a next phase. The user is involved in the process, but manual work is shifted from tedious manipulation of design constraint commands to the (more productive) analysis of results and refinement of the integration configuration. In a resulting design constraint file, newly written commands are accompanied by a clear annotation of the source commands of the attributes they convey. In addition, there is an annotation of the name of the rule instance that caused each constraint to be promoted.</p>
<p id="p-0036" num="0035">To generate timing exceptions, some embodiments of methodology of the invention select a set of candidates by structural analysis of the design. In one aspect, the methodology may generate constraints for the entire design or it may take into account any user specified input about the specific regions of the design or about the delays of the paths to be considered. For example, some embodiments may utilize critical path information to partition the design for timing exception generation.</p>
<p id="p-0037" num="0036">Some embodiments of methodology of the invention make use of formal verification engines to verify the behavior of the selected candidates for timing exceptions. In one aspect, each of the specified false path or multi-cycle path candidates are analyzed and path sensitization conditions and holding conditions are extracted. For false paths, the methodology proves that these paths may not be sensitized by any input pattern. For multi-cycle paths, the methodology verifies that the source of multi-cycle paths holds for previous n&#x2212;1 cycles when the multi-cycle paths are sensitized. The generated timing exceptions may be written out in a compressed or uncompressed form. In one aspect, the output of the methodology is a set of timing constraints that may be used by synthesis and timing analysis tools to verify that the design meets the timing specifications.</p>
<p id="p-0038" num="0037">In addition to using the methodology to support generation of timing exceptions, the formal validation technique may also be used to verify any user specified timing exceptions (false paths or multi-cycle paths) or for validating critical paths from timing reports generated by timing analysis tools. If any of the critical paths are verified to be false paths, then the corresponding design constraint false path timing exceptions are generated and integrated into the original design constraint specification. The modified design constraints may then help achieve a more optimized design through resynthesis.</p>
<p id="p-0039" num="0038">In one aspect, generating a large number of constraints does not necessarily benefit the synthesis tools since it slows them down and may make their job harder. Therefore, after generating the timing constraints, the methodology performs compression to group similar constraints into single design constraint statement and reduces or minimizes the size of the generated design constraint.</p>
<p id="p-0040" num="0039">To ensure the generated constraints have positive impact downstream, the methodology analyzes the critical paths in the design to determine whether any of the paths with timing violations are false paths. If any of these paths are false paths, the methodology generates false path exceptions by performing structural analysis and eliminates redundant through points. In one aspect, removing redundant through points may give synthesis tools and implementation tools more freedom in optimization and provide better quality of results. This type of false path generation may be referred to as critical path generation.</p>
<p id="p-0041" num="0040">Another aspect of using critical path for false path generation is to partition the design into regions with timing violations and to perform analysis only for these regions. This type of false path generation may be referred to as directed false path generation. An alternative to critical path report is to prune the design by estimating path length and partition the design such that analysis is only performed on long paths. By partitioning the design with timing violations, performance may be improved both in terms of memory and CPU time, but more importantly, the methodology generates constraints that will most likely have positive impact downstream from synthesis down to physical implementation such as place and route.</p>
<p id="p-0042" num="0041">Besides functional timing constraints, the methodology may also automatically extract clock domain crossing false paths and asynchronous set/reset false paths. For clock domain crossing false paths, automatic partitioning of clock domains by extracting clock domain crossing synchronizers is provided in the design. For synchronous set/reset false paths, analysis is performed to identify common asynchronous set/reset signals to minimize the number of constraints generated. Clock domain crossing false paths and asynchronous set/reset false paths are usually specified in RTL synthesis, where they are handled separately during implementation stage.</p>
<p id="p-0043" num="0042"><figref idref="DRAWINGS">FIG. 1</figref> shows one embodiment of a high-level process flow <b>100</b> of an automatic constraint generation process. As shown, inputs <b>110</b>, <b>112</b>, <b>114</b> to process <b>100</b> are received from an RTL or a gate-level design, existing design constraint specifications (if any), and/or timing reports (if they exist). Given the RTL or gate level design, the design constraint process <b>100</b> collects information about path statistics, such as a number of paths in the design, a path distribution by delays, a number of logic levels, etc., and outputs an design constraint file <b>130</b>. Further scope and function related to automatic constraint generation process <b>100</b> including design constraint integration <b>120</b>, design constraint exception generation <b>122</b> and generated design constraint files will be described in greater detail herein.</p>
<p id="p-0044" num="0043">One aspect of methodology of the invention is to automatically extract clock candidates from the design by tracing the clock tree and applying reconvergence analysis to identify common points for clock and generated clocks. This feature may be referred to as a clock advisor. Any mode signals automatically extracted from the design or specified by the user are used to prune the clock candidates.</p>
<p id="p-0045" num="0044">Another aspect of methodology of the invention is to automatically extract mode signals in the design by analyzing multiplexer (MUX) structures in the design and taking into account clock signals automatically extracted or specified by the user. This feature may be referred to as a mode advisor. Since clock and mode signals extraction are interdependent, any changes in clock and mode signal extraction automatically update the candidates in one or the other.</p>
<p id="p-0046" num="0045">Yet another aspect of methodology of the invention is to partition the design for exception generation by estimating critical regions in the design in the absence of critical path reports. The partition is achieved by identifying long paths in the design with path length analysis. This feature may be referred to as path statistics.</p>
<p id="p-0047" num="0046">Abstractions reduce the complexity of the problem by reducing the model size. In order to be useful, an abstraction should only add extra circuit behavior. That way, in one aspect, if a path is found to be sensitizable on the abstract model, the method may guarantee that it is sensitizable on the original design as well. On the other hand, if a path is found to be unsensitizable (i.e., no pattern exists that may sensitize it) in the abstract model, its sensitization needs to be further validated on the original design.</p>
<p id="p-0048" num="0047">In one embodiment, to simplify the exception generation/validation process, automatic logic abstractions may be performed. Moreover, an embodiment of a technique of the invention may take specifications of manual abstractions into account as well. It should be appreciated that logic abstraction enables the methodology to support efficient exception generation for RTL design as well as gate-level designs.</p>
<p id="p-0049" num="0048">In one aspect, the outcome of the exception generation and design constraint integration process are new or revised design constraint specifications that may be used to further optimize the design.</p>
<p id="p-0050" num="0049"><figref idref="DRAWINGS">FIG. 2A</figref> is a block diagram describing one embodiment of a method <b>200</b> for design constraint integration and design constraint integration usage flow.</p>
<p id="p-0051" num="0050">In <b>210</b>, the process <b>200</b> begins by reading a library and design for an electronic circuit.</p>
<p id="p-0052" num="0051">In <b>212</b>, sub-designs within the electronic circuit design are specified.</p>
<p id="p-0053" num="0052">In <b>214</b>, a design constraint format for the sub-designs (sub-blocks) is read from the electronic circuit design. In one embodiment, this may include defining all sub-designs or sub-blocks and reading all the design constraint files for the top-level module and the blocks, as well as any existing partial full-chip design constraint files.</p>
<p id="p-0054" num="0053">In <b>220</b>, a partial full-chip design constraint file for the electronic circuit design is read.</p>
<p id="p-0055" num="0054">In <b>222</b>, design constraint integration rules for the electronic circuit design are configured. In one embodiment, configuration of design constraint integration rules may be accomplished at any stage before integration in <b>226</b>. This may involve the creation of rule instances that target each particular attribute to be ignored, reported, and/or promoted. <b>222</b> may be achieved by loading a default configuration file, or this may be completely user-specific, or this may be a combination of both.</p>
<p id="p-0056" num="0055">In <b>226</b>, the design constraint integration rules are used to integrate design constraints from the sub-designs of the electronic circuit design by writing a new design constraint file for the electronic circuit design. In one embodiment, <b>226</b> may include activating an integration mechanism for one or more types of constraints, such as clocks, external delays, timing exceptions, etc.</p>
<p id="p-0057" num="0056">In <b>228</b>, hierarchical checks of the new design constraint file for the electronic circuit design are performed to verify consistency of the generated design constraints with the provided constraints of the sub-designs specified within the electronic circuit design.</p>
<p id="p-0058" num="0057">In <b>230</b>, messages, such as error messages and various other types of verification messages, are evaluated and diagnosed by the user. If the diagnosis or evaluation encounters problems or conflicts, such as errors or various other types of integration issues, then <b>222</b> through <b>230</b> are repeated to correct encountered problems or conflicts. Otherwise, if the diagnosis or evaluation does not encounter problems or conflicts, then <b>200</b> proceeds to <b>240</b>.</p>
<p id="p-0059" num="0058">In <b>240</b>, the partial full-chip design constraint is replaced with the newly written design constraint, and <b>200</b> terminates.</p>
<p id="p-0060" num="0059">In one embodiment, <b>220</b> thru <b>240</b> of <b>200</b> may be repeated <b>250</b> for each type of constraint, such as clock timing, input/output delays, timing exceptions, etc. These may be repeated for the same type of constraints when the results of the diagnosis or evaluation of <b>230</b> are not satisfactory and/or acceptable to a user. Following <b>240</b>, <b>220</b> thru <b>240</b> may be applied to each type of constraint.</p>
<p id="p-0061" num="0060">This method <b>200</b> for design constraint integration usage flow creates, applies and checks new top-level design constraints and writes a new design constraint file. Integration rule instances and hierarchical checks report messages to a user. Analysis, evaluation and diagnosis of these messages may lead the user to modify the configuration of the integration rules for improved performance, integrity and reliability of the electronic circuit design.</p>
<p id="p-0062" num="0061"><figref idref="DRAWINGS">FIG. 2B</figref> is a block diagram of one embodiment of a method <b>260</b> for integrating rules in a new design constraint file. In one aspect, the following is a description of <b>226</b> of method <b>200</b> taken during each activation of the integration mechanism after configuration and all the input data has been provided.</p>
<p id="p-0063" num="0062"><b>260</b> begins in <b>270</b>, wherein for each type of constraint specified by the user, such as clocks, external delays, timing exceptions, etc., <b>270</b> finds the constraints of that type in all the sub-designs or sub-blocks to be integrated.</p>
<p id="p-0064" num="0063">In <b>272</b>, each constraint is submitted to an integration rule relevant to the current constraint type.</p>
<p id="p-0065" num="0064">In <b>274</b>, the integration rule applies all existing rule instances to all existing constraints.</p>
<p id="p-0066" num="0065">In <b>276</b>, each instance, when applied to a constraint, checks whether the configured condition is satisfied and, in <b>278</b>, performs the configured action or actions, such as a request to promote, a request not to promote and/or a request to produce a message.</p>
<p id="p-0067" num="0066">In <b>280</b>, conflicts between requests to promote and requests not to promote are resolved based on rule instance priority. In one aspect, constraints are promoted as requested by matching instances.</p>
<p id="p-0068" num="0067">In <b>282</b>, hierarchical checks may be applied before continuing to the next type of constraint. In one aspect, some hierarchical checks available may include (a) inconsistent set_case_analysis in a block vs. top-level, (b) exactly one top-level clock tree propagates to a block's clock port, (c) input/output delays set on block ports correspond to the clock domains of paths that traverse those ports, and/or (d) paths within each block are affected by the same timing exceptions as their corresponding top-level paths.</p>
<p id="p-0069" num="0068">In <b>284</b>, a file containing all full-chip constraints is written, and in <b>286</b>, ignored constraints are listed separately (or as a comment within the same file). After <b>286</b>, <b>260</b> terminates.</p>
<p id="p-0070" num="0069">Timing exceptions are false paths or multi-cycle paths. False paths are defined as paths that may not affect the design timing. This is because they may not be sensitized by any input pattern. Therefore, false paths do not need to be considered when checking if the design is meeting the timing specifications (i.e., during static timing analysis). Also, in case the design is not meeting the specifications, the knowledge about false paths may be used in the resynthesis process to help optimize the design.</p>
<p id="p-0071" num="0070">One reason for a design to have false paths are signal correlations and dependencies introduced by reconvergent fan-outs. False paths may also exist due to unreachable states or design redundancies (e.g., redundant stuck-at faults). <figref idref="DRAWINGS">FIG. 3</figref> shows a false path <b>300</b> between registers B and Z. In one aspect, this false path is a result of logical signal dependencies between the control inputs of the two MUXs in <figref idref="DRAWINGS">FIG. 3</figref> (both control inputs originate from the same signal en). <figref idref="DRAWINGS">FIG. 4</figref> shows a false path <b>400</b> due to unreachable states. In this circuit, since the controller generates one-hot signals S<b>1</b> and S<b>2</b>, the path from register A to register Z is not a sensitizable path.</p>
<p id="p-0072" num="0071">In addition to these functional false paths, clock domain crossing paths are also considered to be false paths. For example, <figref idref="DRAWINGS">FIG. 5</figref> shows a clock-domain crossing false path <b>500</b> between registers X and Y. In this case, clocks clk<b>1</b> and clk<b>2</b> are asynchronous clocks. For signals in different clock domains, it is difficult to identify the order in which they will be arriving and special clock domain crossing synchronization is necessary to make sure the signals are stable before they may be accessed. In one aspect, to generate clock domain crossing false paths, clock domains are propagated with respect to created clocks, generated clocks, virtual clocks and clock domain associations. If the source and the destination of a candidate false path are from two different clock domains, then the false path check is considered as a pass. Paths to asynchronous set/reset inputs of sequential elements, as well as paths passing through signals tied to constant values do not need to be timed by timing analysis tools and therefore, are also considered as false paths. Generation of these non-functional false path constraints is simple, and in this work, the methodology may focus on generating functional false path constraints.</p>
<p id="p-0073" num="0072">In one aspect, multi-cycle paths are paths driven by inputs which need to hold their value for n cycles before the results may be read. <figref idref="DRAWINGS">FIG. 6</figref> shows an example of a MUX-based multi-cycle path <b>600</b>. Here holding logic may be in the form of feed back path from the output of flip-flop back to the input of the flip-flop. This may be referred to as data-path holding logic. Another form of holding logic is to disable the clock input of the flip-flop. This may be referred to as clock-path holding logic or as gated clocks. In our approach, the methodology supports multiple multi-cycle path modeling and multiple multi-cycle path properties.</p>
<p id="p-0074" num="0073">In one embodiment, timing exception generation process <b>700</b> of the invention comprises three main phases <b>710</b>, <b>720</b>, <b>730</b>. As shown in <figref idref="DRAWINGS">FIG. 7</figref>, a first phase <b>710</b> comprises a phase of identifying and filtering potential candidates for false paths, a second phase <b>720</b> comprises a phase of validating candidates, and a third phase <b>730</b> comprises constraint compression. Each of these phases will be discussed in greater detail herein.</p>
<p id="p-0075" num="0074">Phase (1) <b>710</b> of <figref idref="DRAWINGS">FIG. 7</figref> comprises timing exception candidate identification and filtering. In one embodiment, identifying timing exception candidates includes the use of one or more critical path reports to identify candidates in critical regions. Alternately, in another embodiment, identifying timing exception candidates includes the use of path length information to filter exception candidates.</p>
<p id="p-0076" num="0075">It should be appreciated that several methods may be used to identify false path candidates. One method considers all possible pairs of PIs, POs, and registers as potential candidates. Other methods to limit the number of candidates include analyzing paths through control signals extracted from RTL, analyzing paths through control signals from FSMs, analyzing paths with MUX structures, and/or identifying candidates through reconvergent region analysis.</p>
<p id="p-0077" num="0076">In one aspect, false path generation flow analyzes the design with minimal mode constraints and generates constraints for the entire design. However, one objective of timing exception generation is generating a small number of exceptions that includes a positive impact downstream, such as better quality of result (QoR) in timing and/or faster synthesis and timing analysis runs. Therefore, several path pruning techniques are applied to generate possible candidates. These may include limiting the search region to a user specified region (from/to/through), using path statistics to guide the search, and/or limiting the search to paths with delays exceeding a given threshold (or a given number of logic levels in the absence of delay information).</p>
<p id="p-0078" num="0077">In one embodiment, methodology of the invention may also make use of timing reports provided by timing analysis tools to generate false paths. Using the reports, false paths may be generated either by validating the specified critical paths and augmenting the existing set of design constraint exceptions or by using information about critical paths to define critical path design regions to direct our false path generation to search these regions. This filtering mechanism is especially useful given the fact that the most useful false path constraints in resynthesis and timing analysis are long (critical) false paths.</p>
<p id="p-0079" num="0078">For multi-cycle paths, an exception candidate pruning technique is exactly the same as for pruning false path candidates. However, additional pruning of candidates may be achieved by filtering out false path in the design and identifying holding structures in the design either from data-path or clock path. Further pruning of candidates may be achieved by symbolic simulation and FSM extraction. Finally, the remaining candidates are validated using formal methods.</p>
<p id="p-0080" num="0079">Phase (2) <b>720</b> of <figref idref="DRAWINGS">FIG. 7</figref> comprises timing exception candidate validation. In one embodiment, formal methods are used to validate timing exceptions. However, this timing exception generation approach is independent of validation approaches. In one aspect, a fast validation engine supports multiple validation methodologies including combinational and sequential false path, static and dynamic analysis. However, multiple embodiments of validation engines may exist.</p>
<p id="p-0081" num="0080">Several methods may be used to identify false path candidates. One method considers all possible pairs of PIs, POs, and registers as potential candidates. Other methods to limit the number of candidates include analyzing paths through control signals extracted from RTL, analyzing paths through control signals from FSMs, analyzing paths with MUX structures, and/or identifying candidates through reconvergent region analysis.</p>
<p id="p-0082" num="0081">For multi-cycle path checks, the methodology analyzes and extracts a path enabling condition (PE) as well as a source hold enabling condition (HE) for the specified multi-cycle path. Next, formal proof engines verify that, if PE is 1, then HE is 1 for the previous n&#x2212;1 clock cycles for all times. For example, in the circuit shown in <figref idref="DRAWINGS">FIG. 6</figref>, PE is 1 if (en2=1) and HE is 1 if (en1=0).</p>
<p id="p-0083" num="0082">In one aspect, if PE is 0 for all times, then the multi-cycle path may not be sensitized. If a multi-cycle path can be sensitized and HE is 1 for previous n&#x2212;1 clock cycle, whenever PE is 1, then multi-cycle path check passes. Otherwise, the multi-cycle path check fails. In this case, a counter-example is provided showing how path may be sensitized when the path's source had not held constant for n&#x2212;1 cycles.</p>
<p id="p-0084" num="0083">Phase (3) <b>730</b> of <figref idref="DRAWINGS">FIG. 7</figref> comprises timing exception compression. In one aspect, to reduce the size of the generated design constraint after generation, some embodiments of the methodology perform exception compression. In compression, a set of constraints are grouped into a single design constraint statement. In one aspect, this compression is not based on the structural analysis of the design. Rather, it compares the generated exceptions by comparing their key points. Some embodiments of the methodology use a greedy algorithm that iteratively performs compression by picking the largest number of statements to compress.</p>
<p id="p-0085" num="0084">Conventional methodology for timing exception generation is typically limited to RTL design. However, some embodiments of the methodology described herein support RTL and gate-level designs. Conventional methodology involves a user to specify clocks in the design. However, some embodiments of the methodology described herein extract clock and mode signals from the design itself.</p>
<p id="p-0086" num="0085">Moreover, conventional methodology generates constraints for the entire design, which could overwhelm timing analysis, synthesis and physical implementation tools. Generating too many constraints often leads to inferior implementation with poor quality of results downstream.</p>
<p id="p-0087" num="0086">In contrast, some embodiments of the methodology of the invention described herein utilize various methods including critical path information to prune the search space and efficiently generate timing exceptions with positive quality of result impact downstream from timing analysis and synthesis to physical implementation such as placement and routing.</p>
<p id="p-0088" num="0087">Conventional methodology in design constraint integration is mostly manual work by designers, which is error prone.</p>
<p id="p-0089" num="0088">In contrast, some embodiments of the methodology described herein incorporate flexible rule based methodology where the block level constraints are propagated to top-level constraints.</p>
<p id="p-0090" num="0089"><figref idref="DRAWINGS">FIG. 8</figref> shows an example of an embodiment of a block diagram of a computer system <b>800</b> that may be used to implement embodiments of the invention described herein. In particular, the computer system <b>800</b> stores and executes a computer software program for performing any of the functions or steps described herein. The computer system <b>800</b> includes a bus <b>802</b> or other communication mechanism for communicating information, and a processor <b>804</b> coupled with the bus <b>802</b> for processing information. The computer system <b>800</b> also includes a main memory <b>806</b>, such as a random access memory (RAM) or other dynamic storage device, coupled to the bus <b>802</b> for storing information and instructions to be executed by the processor <b>804</b>. The main memory <b>806</b> also may be used for storing temporary variables or other intermediate information during execution of instructions to be executed by the processor <b>804</b>. The computer system <b>800</b> further includes a read only memory (ROM) <b>808</b> or other static storage device coupled to the bus <b>802</b> for storing static information and instructions for the processor <b>804</b>. A data storage device <b>810</b>, such as a magnetic disk or optical disk, is provided and coupled to the bus <b>802</b> for storing information and instructions.</p>
<p id="p-0091" num="0090">The computer system <b>800</b> may be coupled via the bus <b>802</b> to a display <b>812</b>, such as a cathode ray tube (CRT), for displaying information to a user. An input device <b>814</b>, including alphanumeric and other keys, is coupled to the bus <b>802</b> for communicating information and command selections to processor <b>804</b>. Another type of user input device is cursor control <b>816</b>, such as a mouse, a trackball, or cursor direction keys for communicating direction information and command selections to processor <b>804</b> and for controlling cursor movement on display <b>812</b>. This input device typically has two degrees of freedom in two axes, a first axis (e.g., x) and a second axis (e.g., y), that allows the device to specify positions in a plane.</p>
<p id="p-0092" num="0091">Embodiments of the invention are related to the use of computer system <b>800</b> for generating design constraints. According to one embodiment of the invention, such use is provided by computer system <b>800</b> in response to processor <b>804</b> executing one or more sequences of one or more instructions contained in the main memory <b>806</b>. Such instructions may be read into the main memory <b>806</b> from another computer-readable medium, such as storage device <b>810</b>. Execution of the sequences of instructions contained in the main memory <b>806</b> causes the processor <b>804</b> to perform the process described herein. One or more processors in a multi-processing arrangement may also be employed to execute the sequences of instructions contained in the main memory <b>806</b>. In alternative embodiments, hard-wired circuitry may be used in place of or in combination with software instructions to implement some embodiments of the invention. Thus, embodiments of the invention are not limited to any specific combination of hardware circuitry and software.</p>
<p id="p-0093" num="0092">The term &#x201c;computer-readable medium&#x201d; as used herein refers to any medium that participates in providing instructions to the processor <b>804</b> for execution. Such a medium may take many forms, including but not limited to, non-volatile media, volatile media, and transmission media. Non-volatile media includes, for example, optical or magnetic disks, such as the storage device <b>810</b>. Volatile media includes dynamic memory, such as the main memory <b>806</b>. Transmission media includes coaxial cables, copper wire and fiber optics, including the wires that comprise the bus <b>802</b>. Transmission media may also take the form of acoustic or light waves, such as those generated during radio wave and infrared data communications.</p>
<p id="p-0094" num="0093">Common forms of computer-readable media include, for example, a floppy disk, a flexible disk, hard disk, magnetic tape, or any other magnetic medium, a CD-ROM, any other optical medium, punch cards, paper tape, any other physical medium with patterns of holes, a RAM, a PROM, and EPROM, a FLASH-EPROM, any other memory chip or cartridge, a carrier wave as described hereinafter, or any other medium from which a computer may read.</p>
<p id="p-0095" num="0094">Various forms of computer-readable media may be involved in carrying one or more sequences of one or more instructions to the processor <b>804</b> for execution. For example, the instructions may initially be carried on a magnetic disk of a remote computer. The remote computer may load the instructions into its dynamic memory and send the instructions over a telephone line using a modem. A modem local to the computer system <b>800</b> may receive the data on the telephone line and use an infrared transmitter to convert the data to an infrared signal. An infrared detector coupled to the bus <b>802</b> may receive the data carried in the infrared signal and place the data on the bus <b>802</b>. The bus <b>802</b> carries the data to the main memory <b>806</b>, from which the processor <b>804</b> retrieves and executes the instructions. The instructions received by the main memory <b>806</b> may optionally be stored on the storage device <b>810</b> either before or after execution by the processor <b>804</b>.</p>
<p id="p-0096" num="0095">The computer system <b>800</b> also includes a communication interface <b>818</b> coupled to the bus <b>802</b>. The communication interface <b>818</b> provides a two-way data communication coupling to a network link <b>820</b> that is connected to a local network <b>822</b>. For example, the communication interface <b>818</b> may be an integrated services digital network (ISDN) card or a modem to provide a data communication connection to a corresponding type of telephone line. As another example, the communication interface <b>818</b> may be a local area network (LAN) card to provide a data communication connection to a compatible LAN. Wireless links may also be implemented. In any such implementation, the communication interface <b>818</b> sends and receives electrical, electromagnetic or optical signals that carry data streams representing various types of information.</p>
<p id="p-0097" num="0096">The network link <b>820</b> typically provides data communication through one or more networks to other devices. For example, the network link <b>820</b> may provide a connection through local network <b>822</b> to a host computer <b>824</b> or to another equipment <b>826</b>. The data streams transported over the network link <b>820</b> may comprise electrical, electromagnetic or optical signals. The signals through the various networks and the signals on the network link <b>820</b> and through the communication interface <b>818</b>, which carry data to and from the computer system <b>800</b>, are exemplary forms of carrier waves transporting the information. The computer system <b>800</b> may send messages and receive data, including program code, through the network(s), the network link <b>820</b>, and the communication interface <b>818</b>.</p>
<p id="p-0098" num="0097">In various aspects, methodology of the invention provides many advantages. Clock signal candidates are automatically extracted by analyzing clock trees in the design and taking into account mode signals either specified by the user via set_case_analysis in the design constraint file or extracted through mode extraction. Mode signal candidates are automatically extracted by analyzing MUX in the design and taking into account clock signals in the design either specified by the user via create_clock in the design constraint or extracted through clock extraction. Critical path information is used to validate false paths and generate false paths timing constraints with positive quality of result impact downstream from synthesis to physical implementation, such as place and route. Critical path information is used to direct false path generation to perform analysis only on the regions with timing violations and thus generate false path constraints with positive impact downstream from synthesis to physical implementation such as place and route. Path length analysis is used to estimate critical region in the design (in the absence of critical path information from timing analysis tools or synthesis tools) to perform false path analysis. False paths are generated through automatic partitioning of clock domains by extracting of synchronizers in the design. Delay independent static/dynamic transition analysis is used to maintain consistent timing exceptions with different technology mapping and different level of abstractions. Rule-based integration of block level constraints to top level constraints is used. Rules are configured by use of rule instances that combine predefined conditions and actions. An incremental integration process is supported. Integration with hierarchical consistency rule checks is used. Embedded structural consistency analysis tools are available for use through rule configuration. Prioritization of rule instances is used to resolve conflicts. Integration with extensive rule reporting and diagnosis GUI tool to report inconsistencies during integration are used. Support for rule configuration based on Tcl variables is used Annotation of the resulting promoted design constraint commands with both the source design constraint file and line number from the block design constraint, as well as with the name of the rule instance that generated that promoted constraint are used. The GUI-based design constraint source code browser turns these annotations into hyper-links that open the source design constraint file on the relevant line, and the rule configuration window on the pertinent rule instance.</p>
<p id="p-0099" num="0098">In reference to design constraint integration, some embodiments of methodology of the invention may be described/implemented using different terms that are not necessarily identical to &#x201c;rules&#x201d;, &#x201c;rule configuration parameters&#x201d; and &#x201c;rule instances&#x201d;. These terms are just one possible choice of terminology. In one aspect, the user has a language that provides, on the one hand, a set of primitives that enable the analysis of all the design constraints and the interactions among them and between them and the design, and on the other hand, a means to combine those primitives and identify those combinations in a meaningful and manageable manner. This language is higher-level than a multi-purpose programming language. By combining a few building blocks specially designed for the integration task, the users may tailor an integration setup that will suit their own design methodology.</p>
<p id="p-0100" num="0099">In one aspect, it should be appreciated that our methodology may be applied at more than one level of design hierarchy. If a design hierarchy is not flat, e.g., if a block is in turn partitioned into sub-blocks, then the integration methodology described here may be used to integrate constraints of sub-blocks into a single constraint set for the block. Later, all the block constraints may be integrated into a full-chip constraint set. In no way should this method be seen as restricted to top-level integration only. For clarity, we described the methodology as applied when integrating the top-level blocks, but lower-level integration is done in exactly the same way.</p>
<p id="p-0101" num="0100">Although particular embodiments of the present inventions have been shown and described, it will be understood that it is not intended to limit the present inventions to the preferred embodiments, and it will be obvious to those skilled in the art that various changes and modifications may be made without departing from the spirit and scope of the present inventions. The specification and drawings are, accordingly, to be regarded in an illustrative rather than restrictive sense. The present inventions are intended to cover alternatives, modifications, and equivalents, which may be included within the spirit and scope of the present inventions as defined by the claims.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A method for generating design constraints, comprising:
<claim-text>reading a design description of a design and an existing design constraint file;</claim-text>
<claim-text>generating, by using at least one processor, a timing exception, which is to be ignored in an analysis that determines whether the design description meets a design requirement, by at least verifying behavior of at least some of one or more false paths that are determined from one or more paths based at least in part upon an analysis on the one or more paths;</claim-text>
<claim-text>configuring design constraint integration rules, wherein the act of configuring design constraint integration rules includes creating rule instances that target at least one attribute of the design;</claim-text>
<claim-text>writing a new design constraint file based at least in part upon the timing exception and the design constraint integration rules based at least in part upon resolution of a conflict between a first request to promote and a second request not to promote according to at least a rule instance priority;</claim-text>
<claim-text>evaluating results of the new design constraint file; and</claim-text>
<claim-text>replacing the existing design constraint file with the new design constraint file.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein reading a design description includes reading a hardware description language for the design.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising specifying at least one sub-design in the design.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising reading a design constraint format for at least one sub-design in the design.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method of <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein reading a design constraint format for at least one sub-design includes defining the at least one sub-design in the design and reading design constraint files for the at least one sub-design.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising reading a partial full-chip design constraint file for the design.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the design constraint integration rules are used to integrate design constraints by writing the new design constraint file for the design.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The method of <claim-ref idref="CLM-00007">claim 7</claim-ref>, further comprising activating an integration mechanism for one or more types of constraints including at least one of clocks, external delays, and timing exceptions.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising performing hierarchical checks of the new design constraint file for the design to verify consistency of the new design constraint file.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein evaluating results of the new design constraint file includes evaluating messages including at least one of error messages and verification messages.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein if evaluating results of the new design constraint file encounters problems or conflicts, then at least a portion of the method is repeated to correct encountered problems or conflicts.</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein one or more portions of the method are repeated for one or more constraints including at least one of clock timing, input/output delays, and timing exceptions.</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein writing a new design constraint file includes integrating the design constraint integration rules in the new design constraint file.</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The method of <claim-ref idref="CLM-00013">claim 13</claim-ref>, further comprising writing a design constraint file having one or more full-chip constraints and one or more ignored constraints are listed separately or as a comment within the design constraint file.</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. A system for generating design constraints comprising:
<claim-text>a processor that is at least to:</claim-text>
<claim-text>read a design description of a design and an existing design constraint file;</claim-text>
<claim-text>generate a timing exception, which is to be ignored in an analysis that determines whether the design description meets a design requirement, by at least verifying behavior of at least some of one or more false paths that are determined from one or more paths based at least in part upon an analysis on the one or more paths;</claim-text>
<claim-text>configure design constraint integration rules, wherein the act of configuring design constraint integration rules includes creating rule instances that target at least one attribute of the design;</claim-text>
<claim-text>write a new design constraint file based at least in part upon the timing exception and the design constraint integration rule based at least in part upon resolution of a conflict between a first request to promote and a second request not to promote according to at least a rule instance priority;</claim-text>
<claim-text>evaluate results of the new design constraint file; and</claim-text>
<claim-text>replace the existing design constraint file with the new design constraint file.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The system of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the design constraint integration rules are used to integrate design constraints by writing the new design constraint file for the design.</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The system of <claim-ref idref="CLM-00016">claim 16</claim-ref>, in which the processor activates an integration mechanism for one or more types of constraints including at least one of clocks, external delays, and timing exceptions.</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. A computer program product that includes a non-transitory computer-readable medium having a sequence of instructions which, when executed by a processor, causes the processor to execute a process for generating design constraints, the process comprising:
<claim-text>reading a design description of a design and an existing design constraint file;</claim-text>
<claim-text>generating a timing exception, which is to be ignored in an analysis that determines whether the design description meets a design requirement, by at least verifying behavior of at least some of one or more false paths that are determined from one or more paths based at least in part upon an analysis on the one or more paths;</claim-text>
<claim-text>configuring design constraint integration rules, wherein the act of configuring design constraint integration rules includes creating rule instances that target at least one attribute of the design;</claim-text>
<claim-text>writing a new design constraint file based at least in part upon the timing exception and the design constraint integration rule based at least in part upon resolution of a conflict between a first request to promote and a second request not to promote according to at least a rule instance priority;</claim-text>
<claim-text>evaluating results of the new design constraint file; and</claim-text>
<claim-text>replacing the existing design constraint file with the new design constraint file.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. The computer program product of <claim-ref idref="CLM-00018">claim 18</claim-ref>, wherein the design constraint integration rules are used to integrate design constraints by writing the new design constraint file for the design.</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. The computer program product of <claim-ref idref="CLM-00019">claim 19</claim-ref>, further comprising activating an integration mechanism for one or more types of constraints including at least one of clocks, external delays, and timing exceptions.</claim-text>
</claim>
</claims>
</us-patent-grant>

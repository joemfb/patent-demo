<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08627458-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08627458</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>10755450</doc-number>
<date>20040113</date>
</document-id>
</application-reference>
<us-application-series-code>10</us-application-series-code>
<us-term-of-grant>
<us-term-extension>2199</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>H</section>
<class>04</class>
<subclass>L</subclass>
<main-group>29</main-group>
<subgroup>06</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>726 22</main-classification>
<further-classification>726 24</further-classification>
</classification-national>
<invention-title id="d2e53">Detecting malicious computer program activity using external program calls with dynamic rule sets</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>5987610</doc-number>
<kind>A</kind>
<name>Franczek et al.</name>
<date>19991100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>6073142</doc-number>
<kind>A</kind>
<name>Geiger et al.</name>
<date>20000600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>6460050</doc-number>
<kind>B1</kind>
<name>Pace et al.</name>
<date>20021000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>7013395</doc-number>
<kind>B1</kind>
<name>Swiler et al.</name>
<date>20060300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>726 25</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>7093239</doc-number>
<kind>B1</kind>
<name>van der Made</name>
<date>20060800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717135</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>7096498</doc-number>
<kind>B2</kind>
<name>Judge</name>
<date>20060800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>726 22</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>7162741</doc-number>
<kind>B2</kind>
<name>Eskin et al.</name>
<date>20070100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>726 25</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>7337155</doc-number>
<kind>B2</kind>
<name>Yoshida</name>
<date>20080200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>706 15</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>7506155</doc-number>
<kind>B1</kind>
<name>Stewart et al.</name>
<date>20090300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>2002/0138755</doc-number>
<kind>A1</kind>
<name>Ko</name>
<date>20020900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>713201</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>2004/0064736</doc-number>
<kind>A1</kind>
<name>Obrecht et al.</name>
<date>20040400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>713201</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>2005/0108562</doc-number>
<kind>A1</kind>
<name>Khazan et al.</name>
<date>20050500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>713200</main-classification></classification-national>
</us-citation>
<us-citation>
<nplcit num="00013">
<othercit>Warrender, &#x201c;Detecting Intrusions Using System Calls: Alternative Data Models&#x201d;, Dept. of Computer Science, University of New Mexico, 1999, p. 133-145.</othercit>
</nplcit>
<category>cited by examiner</category>
</us-citation>
<us-citation>
<nplcit num="00014">
<othercit>Hofmeyr, &#x201c;Intrusion Detection using Sequence of System Calls&#x201d;, Dept. of Computer Science, University of New Mexico, 1998, p. 1-25.</othercit>
</nplcit>
<category>cited by examiner</category>
</us-citation>
</us-references-cited>
<number-of-claims>47</number-of-claims>
<us-exemplary-claim>31</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>None</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>5</number-of-drawing-sheets>
<number-of-figures>5</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20050154900</doc-number>
<kind>A1</kind>
<date>20050714</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Muttik</last-name>
<first-name>Igor Garrievich</first-name>
<address>
<city>Berkhamsted</city>
<country>GB</country>
</address>
</addressbook>
<residence>
<country>GB</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Muttik</last-name>
<first-name>Igor Garrievich</first-name>
<address>
<city>Berkhamsted</city>
<country>GB</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Patent Capital Group</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>McAfee, Inc.</orgname>
<role>02</role>
<address>
<city>Santa Clara</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Lanier</last-name>
<first-name>Benjamin</first-name>
<department>2432</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">A stream <b>14</b> of external computer program calls made from an application program <b>2</b> to an operating system <b>4</b> is logged by an anti-malware layer <b>8</b>. This stream <b>14</b> is examined for a primary set XYZ of external program calls known to be associated with malicious computer program activity. When such a primary set XYZ of external computer program calls is identified, the malicious activity is blocked and the logged stream <b>14</b> is examined to determine one or more secondary sets of external program calls which are now added to the set of rules <b>10</b> against which the logged stream <b>14</b> of external program calls is tested. In this way the set of rules <b>10</b> is dynamically adapted so as to more rapidly and proactively identify malicious computer program activity.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="215.90mm" wi="164.25mm" file="US08627458-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="131.49mm" wi="140.72mm" file="US08627458-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="192.70mm" wi="136.14mm" file="US08627458-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="199.56mm" wi="158.07mm" file="US08627458-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="179.83mm" wi="139.78mm" file="US08627458-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="152.06mm" wi="141.56mm" file="US08627458-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">BACKGROUND OF THE INVENTION</heading>
<p id="p-0002" num="0001">1. Field of the Invention</p>
<p id="p-0003" num="0002">This invention relates to the field of data processing systems. More particularly, this invention relates to the detection of malicious computer program activity, such as, for example, as the result of computer viruses, worms, Trojans and the like, using detected characteristics of external program calls.</p>
<p id="p-0004" num="0003">2. Description of the Prior Art</p>
<p id="p-0005" num="0004">It is known to provide anti-virus systems which examine computer files to be accessed to determine characteristics of those computer files known to be indicative of malware, such as computer viruses, worms, Trojans and the like. Such techniques are necessarily reactive in that a new piece of malware must first be released and identified before the characteristics of that new piece of malware can be determined such that the detection mechanisms can be updated to detect that new piece of malware. An alternative type of anti-virus system uses heuristic methods in which the computer file is examined to identify types of activity it is controlling and, if these match known suspicious types of activity, then an anti-malware response may be triggered. Whilst such an approach can provide some protection against newly released malware, it does suffer from requiring a disadvantageously high processing overhead.</p>
<p id="p-0006" num="0005">It is also known to provide anti-virus systems which examine the behaviour of a computer system at the level of external program calls being made to the operating system. It has been found that certain sequences of external program calls, or combinations of external program calls with certain characteristics, are indicative of malicious computer program activity and may be used to trigger anti-malware responses. A problem with this behavioural analysis approach is that the malicious activity against which a defense is being sought is allowed to occur prior to it being detected. Accordingly, some damage may already have been inflicted upon the computer system concerned by the malicious computer program activity, e.g. the malicious computer program may already have managed to replicate itself and infect further machines.</p>
<heading id="h-0002" level="1">SUMMARY OF THE INVENTION</heading>
<p id="p-0007" num="0006">Viewed from one aspect the present invention provides a computer program product operable to detect malicious computer program activity, comprising:
<ul id="ul0001" list-style="none">
    <li id="ul0001-0001" num="0000">
    <ul id="ul0002" list-style="none">
        <li id="ul0002-0001" num="0007">logging code operable to log a stream of external program calls;</li>
        <li id="ul0002-0002" num="0008">primary set identifying code operable to identify, within said stream of external program calls, a primary set of one or more external program calls matching one or more rules indicative of malicious computer program activity from among a set of rules;</li>
        <li id="ul0002-0003" num="0009">secondary set identifying code operable to identify, within said stream, at least one secondary set of one or more external program calls associated with said primary set of one or more external program calls; and
        <ul id="ul0003" list-style="none">
            <li id="ul0003-0001" num="0010">modifying code operable to modify said set of rules such that said at least one secondary set of one or more external program calls are more strongly associated with malicious computer program activity.</li>
        </ul>
        </li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0008" num="0011">The present technique recognises that external program calls logged in association with the primary set of external program calls known to correspond to malicious computer program activity may themselves subsequently be used as an indicator for malicious computer program activity. The secondary sets of external program calls are &#x201c;tainted&#x201d; by their association with the primary set of external program calls and the set of rules may be modified to be more sensitive to the secondary set of external program calls. In this way, the set of rules associated with malicious computer program activity may be extended and the detection made potentially more sensitive, reliable and proactive. It will be appreciated that in the context of the present technique, external program calls also encompasses calls to the standard libraries within the same program.</p>
<p id="p-0009" num="0012">It will be appreciated that the secondary set of one or more external program calls could take any relative temporal location compared to the primary set of external program calls providing it is associated therewith, e.g. originates from the same computer program, memory region, thread etc, but in preferred embodiments the secondary set of one or more external program calls precedes the primary set of one or more external program calls within the stream of execution. In this way, the modified/new rules added to this set of rules are able to detect malicious computer program activity earlier and possibly reduce or prevent damage caused by the malicious computer program activity.</p>
<p id="p-0010" num="0013">It will be appreciated that the external computer program calls may take a variety of different forms, but these are preferably application program interface calls to an operating system. Such calls are clearly defined and accessible within a computer system. This makes them relatively easy to intercept and analyse. It will be appreciated that the computer calls being made can in themselves be analysed as well as the results returned from those external program calls. The characteristics indicative of malicious computer activity may be characteristics of the returned results associated with the external program calls rather than the external program calls themselves or both.</p>
<p id="p-0011" num="0014">The characteristics of the external program calls which may be analysed can vary considerably. In preferred embodiments these characteristics include at least one of a call name, a return address and one or more parameter values either outbound or inbound.</p>
<p id="p-0012" num="0015">The rules against which the logged external program calls can be compared can take a wide variety of different forms, as will be familiar to those in the anti-malware field. A particularly convenient way of structuring this rule set is to use score values associated with certain characteristics or combinations of characteristics of external program calls. In this way, a logged stream may be analysed and when the total score value associated with that logged stream exceeds a threshold value, an anti-malware response may be triggered. Pattern matching or regular expressions are other convenient ways of storing rules.</p>
<p id="p-0013" num="0016">In the context of such a rule set using score values, a particularly convenient way of modifying the rule set make it more sensitive to the secondary sets of external program calls is to increase the score values associated with such secondary sets of external program calls.</p>
<p id="p-0014" num="0017">It will be appreciated that the rule set or rule sets being used may advantageously be responsive in desired circumstances to the particular ordering of external program calls. It may be that with one ordering a set of external program calls has no malicious result whereas in another specific ordering a malicious result is highly indicated.</p>
<p id="p-0015" num="0018">The modification of the rule set can be seen effectively to perform a dynamic adaption of the set of rules in response to the detected stream of external program calls. Such a dynamic adaption provides a flexible approach to malware protection and also provides the computer system with a degree of auto immunity whereby it may respond without programmer intervention in a manner which makes it more resistant to malware attack.</p>
<p id="p-0016" num="0019">The modified set of rules may be kept locally and applied locally after its modification and also may be advantageously transmitted to one or more remote computers and/or a rule supplier such that other users may also benefit from the modified rules.</p>
<p id="p-0017" num="0020">It will be appreciated that the external program calls may be logged as they are executed, but in a higher security system it may be desirable to emulate execution of a computer program to determine its external program calls which may then be logged and examined against the set of rules.</p>
<p id="p-0018" num="0021">The modification of these set of rules can take a variety of different forms, such as the above mentioned adjusting of the score values associated with certain sets and sequences of external program calls. In addition, new rules may be added to the existing set of rules as part of the modification of the set of rules.</p>
<p id="p-0019" num="0022">In determining the secondary set of external program calls which may be associated with the primary set of external program calls for which malicious computer program activity has been detected, it is advantageous to identify a starting point of the malicious computer program activity from which external program calls may be logged and examined. Such starting points may correspond to the start of execution of a particular computer file, or a switch of memory region from which program instructions are being executed (e.g. a context switch).</p>
<p id="p-0020" num="0023">In determining the validity and/or quality of the secondary set it is advantageous to check if the modifications have positive effect. This can be decided either internally (by applying some higher-level rules to the set modifications) or by external signal(s). An example of such an external signal could be a report that modified rule(s) decrease the malicious network traffic or slowdown the malware propagation. As an example, after a modified set is transmitted to other computers some network sensors detect the effect (e.g., decrease of traffic) and send a &#x201c;positive&#x201d; signal back. That raises the score or promotes a rule from &#x201c;temporary&#x201d; into &#x201c;permanent&#x201d; set.</p>
<p id="p-0021" num="0024">Viewed from a further aspect a method of detecting malicious computer program activity, said method comprising the steps of:
<ul id="ul0004" list-style="none">
    <li id="ul0004-0001" num="0000">
    <ul id="ul0005" list-style="none">
        <li id="ul0005-0001" num="0025">logging a stream of external program calls;</li>
        <li id="ul0005-0002" num="0026">identifying within said stream of external program calls a primary set of one or more external program calls matching one or more rules indicative of malicious computer program activity from among a set of rules;</li>
        <li id="ul0005-0003" num="0027">identifying within said stream at least one secondary set of one or more external program calls associated with said primary set of one or more external program calls; and</li>
        <li id="ul0005-0004" num="0028">modifying said set of rules such that said at least one secondary set of one or more external program calls are more strongly associated with malicious computer program activity.</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0022" num="0029">Viewed from a still further aspect a data processing apparatus operable to detect malicious computer program activity, said apparatus comprising:
<ul id="ul0006" list-style="none">
    <li id="ul0006-0001" num="0000">
    <ul id="ul0007" list-style="none">
        <li id="ul0007-0001" num="0030">logging logic operable to log a stream of external program calls;</li>
        <li id="ul0007-0002" num="0031">primary set identifying logic operable to identify, within said stream of external program calls, a primary set of one or more external program calls matching one or more rules indicative of malicious computer program activity from among a set of rules;</li>
        <li id="ul0007-0003" num="0032">secondary set identifying logic operable to identify, within said stream, at least one secondary set of one or more external program calls associated with said primary set of one or more external program calls; and</li>
        <li id="ul0007-0004" num="0033">modifying logic operable to modify said set of rules such that said at least one secondary set of one or more external program calls are more strongly associated with malicious computer program activity.</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0023" num="0034">The above, and other objects, features and advantages of this invention will be apparent from the following detailed description of illustrative embodiments which is to be read in connection with the accompanying drawings.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0024" num="0035"><figref idref="DRAWINGS">FIG. 1</figref> schematically illustrates a malware detecting system;</p>
<p id="p-0025" num="0036"><figref idref="DRAWINGS">FIG. 2</figref> schematically illustrates the logging of a stream of external program calls and the examination of that stream to determine new detection rules;</p>
<p id="p-0026" num="0037"><figref idref="DRAWINGS">FIG. 3</figref> is a flow diagram schematically illustrating processing steps associated with the examination of a stream of external program calls and the dynamic adaption of a set of rules for detecting malicious activity associated with that stream of external program calls;</p>
<p id="p-0027" num="0038"><figref idref="DRAWINGS">FIG. 4</figref> schematically illustrates a modification to a set of rules; and</p>
<p id="p-0028" num="0039"><figref idref="DRAWINGS">FIG. 5</figref> schematically illustrates the architecture of a general purpose computer which may be used to implement the above described techniques.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0004" level="1">DESCRIPTION OF THE PREFERRED EMBODIMENTS</heading>
<p id="p-0029" num="0040"><figref idref="DRAWINGS">FIG. 1</figref> illustrates a system for detecting malicious computer program activity. An application program <b>2</b> executes in association with an operating system <b>4</b>. The application program <b>2</b> issues external program calls, API calls, to the operating system <b>4</b> as is known and conventional in the computer programming field. These external calls result in desired processing operations being performed on behalf of the application program <b>2</b> and in some cases determined results are returned to the application program <b>2</b>. The application program <b>2</b> may also communicate with a computer network <b>6</b> with which it may exchange data, messages, programs and the like.</p>
<p id="p-0030" num="0041">As shown in <figref idref="DRAWINGS">FIG. 1</figref>, an anti-malware layer <b>8</b> is provided between the application program <b>2</b> and the operating system <b>4</b>. The anti-malware layer <b>8</b> serves to intercept external program calls issued by the application program <b>2</b> to the operating system <b>4</b> and subject these external program calls to checking by a set of rules <b>10</b>. This checking is performed by external program call blocking code <b>12</b> which includes within its functionality the logging of a stream of external program calls, the identification of a primary set of program instruction calls found to match a rule or set of rules within the rules <b>10</b> and corresponding to malicious computer program activity, and thereafter identify associated secondary sets of external program calls within the log stream which should now be more strongly associated with malicious computer program activity. If the anti-malware layer <b>8</b> does not detect malicious computer program activity associated within the stream of external program calls, then these program calls are passed to the operating system <b>4</b> where they are serviced and the results, where applicable, returned back through the anti-malware layer <b>8</b> to the application program <b>2</b>. The results associated with a particular external program call may also be examined and form part of the rule comparisons performed by the blocker code <b>12</b> in determining whether a particular external program call or set of external program calls matches one of the rules for identifying malicious computer program activity.</p>
<p id="p-0031" num="0042"><figref idref="DRAWINGS">FIG. 2</figref> illustrates a stream of external program calls <b>14</b> which are logged by the anti-malware layer <b>8</b>. A primary set of external program calls XYZ within this stream <b>14</b> is identified by one or more of the rules <b>10</b> as corresponding to malicious activity and will in its own right trigger an anti-malware response. As well as triggering such an anti-malware response, the anti-malware layer <b>8</b> also determines associated secondary sets of external program calls which are associated with the primary set XYZ. As will be seen, some of these secondary sets of external program calls precede the primary set XYZ and some succeed the primary set XYZ.</p>
<p id="p-0032" num="0043">The secondary sets of external program calls which are selected to be used as potential new rules are selected from the preceding and succeeding external program calls as those external program calls known to be of most potential significance and assistance in discriminating and identifying malicious computer activity. Some types of external program calls are common in both normal and malicious activity and accordingly of little use in selectively detecting malicious activity. However, other types of external program calls are unusual to an extent that when they occur having the particular characteristics of those external program calls logged as preceding or succeeding the known malicious primary set of external program calls XYZ, then these are in themselves highly indicative of malicious computer program activity.</p>
<p id="p-0033" num="0044">As illustrated in <figref idref="DRAWINGS">FIG. 2</figref>, when the secondary sets of external program calls have been so selected, new rules may be determined based upon them. These rules can require a certain ordering or spacing between specific external program calls or alternatively may detect the external program calls in any order providing they are within a certain distance of one another. The more highly specific the combination of external program calls identified in a new rule and known to be associated with the malicious activity XYZ, the higher is made a score value to be associated with that new rule. A score value is used when a stream of external program calls is examined to determine whether or not a threshold value has been exceeded and anti-malware activity should be triggered.</p>
<p id="p-0034" num="0045">In the example illustrated it will be seen that the primary set of external program calls XYZ which is detected as malicious activity results in the generation of plurality of new rules which serve to more strongly associate the secondary sets of external program calls with malicious activity. The secondary sets themselves may not be sufficient to trigger the anti-malware response, but their score values are increased such that when they occur in combination with other detected behavioural characteristics an anti-malware response will now be triggered. The rules in themselves may not be new, it may rather be that the score values associated with a particular secondary set of external program calls is increased due to its now known association with the primary set XYZ of external program calls which is malicious.</p>
<p id="p-0035" num="0046"><figref idref="DRAWINGS">FIG. 3</figref> is a flow diagram schematically illustrating the type of operation discussed in relation to <figref idref="DRAWINGS">FIG. 2</figref>. At step <b>20</b> the anti-malware layer <b>8</b> waits for an API call to be received. At step <b>22</b> a received API call is added to a log. At step <b>24</b> the logged API calls (optionally in combination with their associated returned results) are compared to a set of rules <b>10</b>. If the result of the comparison with the rules <b>10</b> indicates malicious activity at step <b>26</b>, then processing proceeds to step <b>28</b> where the API call concerned is blocked and an anti-malware action triggered. In case of a blocked API call(s) subsequent replies may be simulated to enable &#x2018;as-normal&#x2019; further execution of the program. At step <b>30</b> the future stream of external program calls subsequent to the malicious activity is also logged (e.g. through emulation), such that these can be associated within the set of rules with the malicious activity as well as the already logged proceeding external program calls. At step <b>32</b>, the logged external program calls are examined to determine secondary sets of external program calls which are to be subject to the generation of new rules or the modification of existing rules. In this review of the logged external program calls a starting point associated with the malicious computer activity is identified and used as a cut off proceeding which external program calls are not examined. Examples of such a starting point are the detected start of execution of a particular computer program and/or a context switch detected by a change in the memory region from which a computer program instructions are being fetched.</p>
<p id="p-0036" num="0047">Once the secondary sets of external program calls to have new or modified rules associated with them have been identified at step <b>32</b>, the new rules concerned are generated at step <b>34</b> and updated into the set of rules <b>10</b> at step <b>36</b>. The new rules or the complete new set of rules are then transmitted to a central rules supplier and optionally other remote computers at step <b>38</b> (via a network link <b>6</b>), such that the supplier and the remote computers can benefit from the dynamic adaptation of the rules <b>10</b> which has occurred. Processing then returns to step <b>20</b>.</p>
<p id="p-0037" num="0048">If the determination at step <b>26</b> was that malicious activity was not associated with the newly-received external program call, then processing proceeds to step <b>40</b> at which that external program call is passed to the operating system <b>4</b> in the normal way.</p>
<p id="p-0038" num="0049"><figref idref="DRAWINGS">FIG. 4</figref> schematically illustrates a set of rules <b>10</b> and a modified set of rules <b>10</b>&#x2032;. As illustrated, both the original set of rules <b>10</b> and the modified set of rules <b>10</b>&#x2032; include a rule identifying the primary set of external program calls XYZ with a score value of 110. This is above the threshold value of 100 taken in this example to be indicative of malicious computer program activity. In the modified set of rules <b>10</b>&#x2032;, the sequences of secondary sets of external program calls illustrated in <figref idref="DRAWINGS">FIG. 2</figref> have been added together with their associated score values. The secondary set of external program calls AB was already present within the original set of rules <b>10</b>, but in this case has had its score value increased from 50 to 70. New rules associated with the other four examples given in <figref idref="DRAWINGS">FIG. 2</figref> have been appended to the end of the modified set of rules <b>10</b>&#x2032; and will in future be applied in detecting malicious computer activity by examining the logged stream of external program calls.</p>
<p id="p-0039" num="0050"><figref idref="DRAWINGS">FIG. 5</figref> schematically illustrates a general purpose computer <b>200</b> of the type that may be used to implement the above described techniques. The general purpose computer <b>200</b> includes a central processing unit <b>202</b>, a random access memory <b>204</b>, a read only memory <b>206</b>, a network interface card <b>208</b>, a hard disk drive <b>210</b>, a display driver <b>212</b> and monitor <b>214</b> and a user input/output circuit <b>216</b> with a keyboard <b>218</b> and mouse <b>220</b> all connected via a common bus <b>222</b>. In operation the central processing unit <b>202</b> will execute computer program instructions that may be stored in one or more of the random access memory <b>204</b>, the read only memory <b>206</b> and the hard disk drive <b>210</b> or dynamically downloaded via the network interface card <b>208</b>. The results of the processing performed may be displayed to a user via the display driver <b>212</b> and the monitor <b>214</b>. User inputs for controlling the operation of the general purpose computer <b>200</b> may be received via the user input output circuit <b>216</b> from the keyboard <b>218</b> or the mouse <b>220</b>. It will be appreciated that the computer program could be written in a variety of different computer languages. The computer program may be stored and distributed on a recording medium or dynamically downloaded to the general purpose computer <b>200</b>. When operating under control of an appropriate computer program, the general purpose computer <b>200</b> can perform the above described techniques and can be considered to form an apparatus for performing the above described technique. The architecture of the general purpose computer <b>200</b> could vary considerably and <figref idref="DRAWINGS">FIG. 6</figref> is only one example.</p>
<p id="p-0040" num="0051">Although illustrative embodiments of the invention have been described in detail herein with reference to the accompanying drawings, it is to be understood that the invention is not limited to those precise embodiments, and that various changes and modifications can be effected therein by one skilled in the art without departing from the scope and spirit of the invention as defined by the appended claims.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>I claim:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A computer program product embodied on a non-transitory tangible computer readable medium and provided on a computer that includes a central processing unit (CPU) and an operating system, the computer program product, comprising:
<claim-text>logging code operable to log a stream of external program calls during an execution of a computer program;</claim-text>
<claim-text>primary set identifying code operable to identify, within said stream of external program calls, a primary set of one or more external program calls matching one or more rules indicative of malicious computer program activity from among a set of rules;</claim-text>
<claim-text>secondary set identifying code operable to identify, within said stream, at least one secondary set of one or more external program calls associated with said primary set of one or more external program calls, wherein one of said at least one secondary set of one or more external program calls (2) precedes or succeeds said primary set of one or more external program calls within said stream of external program calls and (2) originates from the same computer program, memory region, or thread of the primary set of external program calls;</claim-text>
<claim-text>modifying code operable to modify said set of rules such that said at least one secondary set of one or more external program calls are more strongly associated with malicious computer program activity than said primary set of said one or more external program calls by increasing a score value associated with the secondary set of one or more external program for use in triggering an anti-malware response;</claim-text>
<claim-text>wherein said set of rules is modified to include a new rule corresponding to said secondary set of one or more external program calls, said new rule thereafter being used in addition to other rules within said set of rules.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. A computer program product as claimed in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein said external program calls are application program interface calls to an operating system.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. A computer program product as claimed in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein each of said external program calls has one or more characteristics compared against said set of rules.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. A computer program product as claimed in <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein said one or more characteristics include:
<claim-text>a call name;</claim-text>
<claim-text>a return address;</claim-text>
<claim-text>one or more parameter values;</claim-text>
<claim-text>and one or more returned results.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. A computer program product as claimed in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein rules within said set of rules specify score values of external program calls having predetermined characteristics and a set of one or more external program calls is identified as corresponding to malicious computer program activity if said set of one or more external program calls has a combined score value exceeding a threshold level.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. A computer program product as claimed in <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein score values within a set of rules associated with said secondary set of one or more external program calls are increased to more strongly associate said secondary set of external program calls with malicious computer program activity than said primary set of said one or more external program calls.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. A computer program product as claimed in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein said set of rules include at least one of:
<claim-text>one or more pattern matching rules; and</claim-text>
<claim-text>one or more regular expression rules.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. A computer program product as claimed in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein said set of rules are responsive to ordering of external program calls.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. A computer program product as claimed in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein said modifying code dynamically adapts said set of rules in response to detected streams of external program calls performing malicious computer program activity.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. A computer program product as claimed in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein at least changes within said set of rules are transmitted to one or more remote computers such that said one or more remote computers can use said modified set of rules without having to suffer said malicious computer program activity.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. A computer program product as claimed in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein changes within said set of rules are transmitted to a rule supplier.</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. A computer program product as claimed in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein said stream of external program calls are logged following emulation of execution of a computer program.</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. A computer program product as claimed in <claim-ref idref="CLM-00001">claim 1</claim-ref>, comprising starting point identifying code operable to identify a starting point of malicious computer program activity within said stream of external program calls.</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. A computer program product as claimed in <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein said starting point corresponds to one of:
<claim-text>starting execution of a computer file; and</claim-text>
<claim-text>a switch of memory address region from which program instructions are executed.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. A computer program product as claimed in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein said set of rules is subject to a validity check after modification to determine if said set of rules is more effectively detecting malicious computer program activity.</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. A method of detecting malicious computer program activity using a processor and a memory of a computer, comprising:
<claim-text>logging a stream of external program calls during an execution of a computer program;</claim-text>
<claim-text>identifying within said stream of external program calls a primary set of one or more external program calls matching one or more rules indicative of malicious computer program activity from among a set of rules;</claim-text>
<claim-text>identifying within said stream at least one secondary set of one or more external program calls associated with said primary set of one or more external program calls, wherein one of said at least one secondary set of one or more external program calls (1) precedes or succeeds said primary set of one or more external program calls within said stream of external program calls and (2) originates from the same computer program, memory region, or thread of the primary set of external program calls;</claim-text>
<claim-text>modifying said set of rules such that said at least one secondary set of one or more external program calls are more strongly associated with malicious computer program activity than said primary set of said one or more external program calls by increasing a score value associated with the secondary set of one or more external program for use in triggering an anti-malware response;</claim-text>
<claim-text>wherein said set of rules is modified to include a new rule corresponding to said secondary set of one or more external program calls, said new rule thereafter being used in addition to other rules within said set of rules.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. A method as claimed in <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein said external program calls are application program interface calls to an operating system.</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. A method as claimed in <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein each of said external program calls has one or more characteristics compared against said set of rules.</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. A method as claimed in <claim-ref idref="CLM-00018">claim 18</claim-ref>, wherein said one or more characteristics include:
<claim-text>a call name;</claim-text>
<claim-text>a return address;</claim-text>
<claim-text>one or more parameter values; and</claim-text>
<claim-text>one or more returned results.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. A method as claimed in <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein rules within said set of rules specify score values of external program calls having predetermined characteristics and a set of one or more external program calls is identified as corresponding to malicious computer program activity if said set of one or more external program calls has a combined score value exceeding a threshold level.</claim-text>
</claim>
<claim id="CLM-00021" num="00021">
<claim-text>21. A method as claimed in <claim-ref idref="CLM-00020">claim 20</claim-ref>, wherein score values within a set of rules associated with said secondary set of one or more external program calls are increased to more strongly associate said secondary set of external program calls with malicious computer program activity than said primary set of said one or more external program calls.</claim-text>
</claim>
<claim id="CLM-00022" num="00022">
<claim-text>22. A method as claimed in <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein said set of rules include at least one of:
<claim-text>one or more pattern matching rules; and</claim-text>
<claim-text>one or more regular expression rules.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00023" num="00023">
<claim-text>23. A method as claimed in <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein said set of rules are responsive to ordering of external program calls.</claim-text>
</claim>
<claim id="CLM-00024" num="00024">
<claim-text>24. A method as claimed in <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein said step of modifying said set of rules dynamically adapts said set of rules in response to detected streams of external program calls performing malicious computer program activity.</claim-text>
</claim>
<claim id="CLM-00025" num="00025">
<claim-text>25. A method as claimed in <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein at least changes within said set of rules are transmitted to one or more remote computers such that said one or more remote computers can use said modified set of rules without having to suffer said malicious computer program activity.</claim-text>
</claim>
<claim id="CLM-00026" num="00026">
<claim-text>26. A method as claimed in <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein changes within said set of rules are transmitted to a rule supplier.</claim-text>
</claim>
<claim id="CLM-00027" num="00027">
<claim-text>27. A method as claimed in <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein said stream of external program calls are logged following emulation of execution of a computer program.</claim-text>
</claim>
<claim id="CLM-00028" num="00028">
<claim-text>28. A method as claimed in <claim-ref idref="CLM-00016">claim 16</claim-ref>, comprising identifying a starting point of malicious computer program activity within said stream of external program calls.</claim-text>
</claim>
<claim id="CLM-00029" num="00029">
<claim-text>29. A method as claimed in <claim-ref idref="CLM-00028">claim 28</claim-ref>, wherein said starting point corresponds to one of: starting execution of a computer file; and
<claim-text>a switch of memory address region from which program instructions are executed.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00030" num="00030">
<claim-text>30. A method as claimed in <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein said set of rules is subject to a validity check after modification to determine if said set of rules is more effectively detecting malicious computer program activity.</claim-text>
</claim>
<claim id="CLM-00031" num="00031">
<claim-text>31. A data processing apparatus operable to detect malicious computer program activity, said apparatus comprising:
<claim-text>a central processing unit (CPU);</claim-text>
<claim-text>an operating system;</claim-text>
<claim-text>logging code operable to log a stream of external program calls during an execution of a computer program;</claim-text>
<claim-text>primary set identifying code operable to identify, within said stream of external program calls, a primary set of one or more external program calls matching one or more rules indicative of malicious computer program activity from among a set of rules;</claim-text>
<claim-text>secondary set identifying code operable to identify, within said stream, at least one secondary set of one or more external program calls associated with said primary set of one or more external program calls, wherein one of said at least one secondary set of one or more external program calls (1) precedes or succeeds said primary set of one or more external program calls within said stream of external program calls and (2) originates from the same computer program, memory region, or thread of the primary set of external program calls;</claim-text>
<claim-text>modifying code operable to modify said set of rules such that said at least one secondary set of one or more external program calls are more strongly associated with malicious computer program activity than said primary set of said one or more external program calls by increasing a score value associated with the secondary set of one or more external program for use in triggering an anti-malware response;</claim-text>
<claim-text>wherein said set of rules is modified to include a new rule corresponding to said secondary set of one or more external program calls, said new rule thereafter being used in addition to other rules within said set of rules.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00032" num="00032">
<claim-text>32. An apparatus as claimed in <claim-ref idref="CLM-00031">claim 31</claim-ref>, wherein said external program calls are application program interface calls to an operating system.</claim-text>
</claim>
<claim id="CLM-00033" num="00033">
<claim-text>33. An apparatus as claimed in <claim-ref idref="CLM-00031">claim 31</claim-ref>, wherein each of said external program calls has one or more characteristics compared against said set of rules.</claim-text>
</claim>
<claim id="CLM-00034" num="00034">
<claim-text>34. An apparatus as claimed in <claim-ref idref="CLM-00033">claim 33</claim-ref>, wherein said one or more characteristics include:
<claim-text>a call name;</claim-text>
<claim-text>a return address;</claim-text>
<claim-text>one or more parameter values; and</claim-text>
<claim-text>one or more returned results.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00035" num="00035">
<claim-text>35. An apparatus as claimed in <claim-ref idref="CLM-00031">claim 31</claim-ref>, wherein rules within said set of rules specify score values of external program calls having predetermined characteristics and a set of one or more external program calls is identified as corresponding to malicious computer program activity if said set of one or more external program calls has a combined score value exceeding a threshold level.</claim-text>
</claim>
<claim id="CLM-00036" num="00036">
<claim-text>36. An apparatus as claimed in <claim-ref idref="CLM-00035">claim 35</claim-ref>, wherein score values within a set of rules associated with said secondary set of one or more external program calls are increased to more strongly associate said secondary set of external program calls with malicious computer program activity than said primary set of said one or more external program calls.</claim-text>
</claim>
<claim id="CLM-00037" num="00037">
<claim-text>37. An apparatus as claimed in <claim-ref idref="CLM-00031">claim 31</claim-ref>, wherein said set of rules include at least one of:
<claim-text>one or more pattern matching rules; and</claim-text>
<claim-text>one or more regular expression rules.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00038" num="00038">
<claim-text>38. An apparatus as claimed in <claim-ref idref="CLM-00031">claim 31</claim-ref>, wherein said set of rules are responsive to ordering of external program calls.</claim-text>
</claim>
<claim id="CLM-00039" num="00039">
<claim-text>39. An apparatus as claimed in <claim-ref idref="CLM-00031">claim 31</claim-ref> wherein said modifying logic dynamically adapts said set of rules in response to detected streams of external program calls performing malicious computer program activity.</claim-text>
</claim>
<claim id="CLM-00040" num="00040">
<claim-text>40. An apparatus as claimed in <claim-ref idref="CLM-00031">claim 31</claim-ref>, wherein at least changes within said set of rules are transmitted to one or more remote computers such that said one or more remote computers can use said modified set of rules without having to suffer said malicious computer program activity.</claim-text>
</claim>
<claim id="CLM-00041" num="00041">
<claim-text>41. An apparatus as claimed in <claim-ref idref="CLM-00031">claim 31</claim-ref>, wherein changes within said set of rules are transmitted to a rule supplier.</claim-text>
</claim>
<claim id="CLM-00042" num="00042">
<claim-text>42. An apparatus as claimed in <claim-ref idref="CLM-00031">claim 31</claim-ref>, wherein said stream of external program calls are logged following emulation of execution of a computer program.</claim-text>
</claim>
<claim id="CLM-00043" num="00043">
<claim-text>43. An apparatus as claimed in <claim-ref idref="CLM-00031">claim 31</claim-ref>, comprising starting point identifying logic operable to identify a starting point of malicious computer program activity within said stream of external program calls.</claim-text>
</claim>
<claim id="CLM-00044" num="00044">
<claim-text>44. An apparatus as claimed in <claim-ref idref="CLM-00043">claim 43</claim-ref>, wherein said starting point corresponds to one of: starting execution of a computer file; and
<claim-text>a switch of memory address region from which program instructions are executed.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00045" num="00045">
<claim-text>45. An apparatus as claimed in <claim-ref idref="CLM-00031">claim 31</claim-ref>, wherein said set of rules is subject to a validity check after modification to determine if said set of rules is more effectively detecting malicious computer program activity.</claim-text>
</claim>
<claim id="CLM-00046" num="00046">
<claim-text>46. A computer program product as claimed in <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising applying high level rules to said modified set of rules, and promoting said modified set of rules from said temporary set to said permanent set based on the application of the high level rules to said modified set of rules.</claim-text>
</claim>
<claim id="CLM-00047" num="00047">
<claim-text>47. A computer program product as claimed in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein one or more other rules are applied to said modified set of rules to determine if said modified set of rules is more effectively detecting malicious computer program activity after modification.</claim-text>
</claim>
</claims>
</us-patent-grant>

<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08627106-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08627106</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>13153906</doc-number>
<date>20110606</date>
</document-id>
</application-reference>
<us-application-series-code>13</us-application-series-code>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>H</section>
<class>04</class>
<subclass>L</subclass>
<main-group>29</main-group>
<subgroup>06</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>713189</main-classification>
</classification-national>
<invention-title id="d2e43">System and method for biometrically secured, transparent encryption and decryption</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>6079018</doc-number>
<kind>A</kind>
<name>Hardy et al.</name>
<date>20000600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>713170</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>7111173</doc-number>
<kind>B1</kind>
<name>Scheidt</name>
<date>20060900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>2004/0123127</doc-number>
<kind>A1</kind>
<name>Teicher et al.</name>
<date>20040600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>713193</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>2005/0015596</doc-number>
<kind>A1</kind>
<name>Bowers</name>
<date>20050100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>713170</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>2007/0250718</doc-number>
<kind>A1</kind>
<name>Lee et al.</name>
<date>20071000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>713186</main-classification></classification-national>
</us-citation>
</us-references-cited>
<number-of-claims>8</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>713189</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>726 17</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>6</number-of-drawing-sheets>
<number-of-figures>9</number-of-figures>
</figures>
<us-related-documents>
<continuation>
<relation>
<parent-doc>
<document-id>
<country>US</country>
<doc-number>11380810</doc-number>
<date>20060428</date>
</document-id>
<parent-grant-document>
<document-id>
<country>US</country>
<doc-number>7962755</doc-number>
</document-id>
</parent-grant-document>
</parent-doc>
<child-doc>
<document-id>
<country>US</country>
<doc-number>13153906</doc-number>
</document-id>
</child-doc>
</relation>
</continuation>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20110258460</doc-number>
<kind>A1</kind>
<date>20111020</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Pizano</last-name>
<first-name>Erix</first-name>
<address>
<city>Tampa</city>
<state>FL</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Rohatgi</last-name>
<first-name>Ryan</first-name>
<address>
<city>Lutz</city>
<state>FL</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Pizano</last-name>
<first-name>Erix</first-name>
<address>
<city>Tampa</city>
<state>FL</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Rohatgi</last-name>
<first-name>Ryan</first-name>
<address>
<city>Lutz</city>
<state>FL</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Erise IP, P.A.</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>Ceelox Patents, LLC</orgname>
<role>02</role>
<address>
<city>Overland Park</city>
<state>KS</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Gee</last-name>
<first-name>Jason</first-name>
<department>2495</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">A computer program for enabling biometrically secured, transparent encryption and decryption provides a user interface that allows a user to drag and drop files into and out of a secure repository, wherein the program automatically encrypts files transferred into the repository and automatically decrypts files transferred out of the repository. The user can transfer file folders into the repository, wherein the program encrypts all of the files within the folder and retains the original file/folder structure, such that individual files can be moved within the repository, moved out of the repository, and opened or executed directly from the repository. The program requires the user to submit biometric data and grants access to the secure repository only if the biometric data is authenticated. The program generates an encryption key based at least in part on biometric data received from the user.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="218.44mm" wi="188.64mm" file="US08627106-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="225.98mm" wi="193.63mm" file="US08627106-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="188.04mm" wi="162.73mm" file="US08627106-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="199.39mm" wi="187.88mm" file="US08627106-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="245.36mm" wi="194.73mm" file="US08627106-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="205.32mm" wi="172.21mm" file="US08627106-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="252.65mm" wi="166.54mm" file="US08627106-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?RELAPP description="Other Patent Relations" end="lead"?>
<heading id="h-0001" level="1">RELATED APPLICATION</heading>
<p id="p-0002" num="0001">This application is a continuation, and claims priority benefit with regard to all common subject matter, of U.S. patent application Ser. No. 11/380,810, filed Apr. 28, 2006, now U.S. Pat. No. 7,962,755, issued Jun. 14, 2011. The above-referenced patent is hereby incorporated by reference in its entirety into the present application.</p>
<?RELAPP description="Other Patent Relations" end="tail"?>
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0002" level="1">BACKGROUND OF THE INVENTION</heading>
<p id="p-0003" num="0002">1. Field of the Invention</p>
<p id="p-0004" num="0003">The present invention relates to the field of data encryption and user authentication. More particularly, the present invention involves a system and method for transparently encrypting and decrypting digital data, wherein the encryption and decryption is managed in a biometrically secured process.</p>
<p id="p-0005" num="0004">2. Description of Prior Art</p>
<p id="p-0006" num="0005">Protecting sensitive computer data such as personal financial information, social security numbers, etcetera, is of the utmost importance to individuals, businesses, and the government. Sensitive data may be protected, in part, by isolating data storage devices, such as computer hard drives, from computer networks so that users at remote locations cannot &#x201c;hack&#x201d; into the sensitive data. Isolation does not protect the data, however, in the event such storage devices are physically stolen or directly accessed on-sight by a malefactor. Furthermore, in some situations it is impractical or impossible to isolate data from computer networks or to maintain it in a single, physically secure location.</p>
<p id="p-0007" num="0006">An alternative method of protecting digital data is by use of encryption, which is the process of encoding information in such a way that only a person (or computer) with a proper key can decode it. Thus, even if an unauthorized person gains access to sensitive data, the data is safe so long as the person does not have the key. Most encryption schemes fall into one of two categories: symmetric and asymmetric.</p>
<p id="p-0008" num="0007">In symmetric encryption schemes, each computer has a secret key, or code, that it uses to encrypt a packet of information before the packet is stored on a data storage device or is sent over a network connection to another computer. Each computer uses the key to decrypt a packet of information encrypted using the same key, even if the packet was encrypted and sent by another computer. Symmetric encryption requires each computer to have a copy of a shared private key, and therefore requires users to be aware of which computers will be communicating to ensure that each computer has a copy of the key. If the shared key is communicated via a network medium, it may be intercepted by a third party who is then able to use the key to decrypt encrypted data and information.</p>
<p id="p-0009" num="0008">Asymmetric encryption schemes use both a publically-accessible key and a private key, and eliminate the need for a shared private key to ever be communicated between computers. An example is a system wherein two computers each have a public key and a private key. Each computer is able to generate an identical shared private key using its private key, its public key, and the other computer's public key.</p>
<p id="p-0010" num="0009">Unfortunately, encryption suffers from various problems and limitations that render it unsatisfactory in many circumstances. Encryption software, for example, is time consuming to use and is often difficult to learn. Consequently, users may encrypt only a portion of the sensitive data they would otherwise protect&#x2014;or may forego data encryption altogether&#x2014;in order to avoid spending time using, or learning how to use, the software.</p>
<p id="p-0011" num="0010">Furthermore, encrypting data in a portable device is susceptible to circumvention because the key is hidden on a data storage element on the device itself. Thus, a person who discovers the key has access to the encrypted data stored on the device.</p>
<p id="p-0012" num="0011">Accordingly, there is a need for an improved system of encryption and decryption that does not suffer from the problems and limitations of the prior art.</p>
<heading id="h-0003" level="1">SUMMARY OF THE INVENTION</heading>
<p id="p-0013" num="0012">The present invention provides an improved encryption system that does not suffer from the problems and limitations of the prior art. Particularly, the present invention provides a system and method for transparently encrypting and decrypting data that requires virtually no user effort, wherein the encryption and decryption is managed in a biometrically secured process.</p>
<p id="p-0014" num="0013">A first embodiment of the invention is a computer program for enabling a secure storage system, wherein at least a portion of the program is stored on a computer-usable medium. The computer program comprises a code segment for encrypting a file designated by a user and storing the file in a secure repository, wherein the program encrypts and stores the file in response to the user selecting the file and selecting the repository and with no further action from the user. The program further comprises a code segment for decrypting the file and storing the file in a location external to the repository, wherein the program decrypts and stores the file in response to the user selecting the file from the repository and selecting the external location and with no further action from the user.</p>
<p id="p-0015" num="0014">According to a second embodiment of the invention, the program receives biometric data from a user, creates an encryption key based at least in part on the biometric data, encrypts a data file using the encryption key, and decrypts the data file using the encryption key.</p>
<p id="p-0016" num="0015">A third embodiment of the invention is a system for managing a secure data repository. The system comprises a computer processor, a data storage medium for maintaining the secure repository and for storing a computer program for enabling the computer processor to manage the secure repository, and a biometric scanner for sensing biometric data associated with a person and communicating the biometric data to the computer processor.</p>
<p id="p-0017" num="0016">The computer program comprises various code segments, including code segments for receiving biometric data from a user via the biometric sensor; granting the user access to the secure repository only if the biometric data received from the user corresponds to biometric data stored in a database; creating an encryption key based at least in part on at least a portion of the biometric data; encrypting a data file using the encryption key; and decrypting the data file using the encryption key.</p>
<p id="p-0018" num="0017">In a third embodiment of the invention, the program encrypts and stores a file in response to the user selecting the file, selecting the repository, and performing only minimal first additional action; and decrypts and stores a file in response to the user selecting the file from the repository, selecting the external location, and performing only minimal second additional action.</p>
<p id="p-0019" num="0018">These and other important aspects of the present invention are described more fully in the detailed description below.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0020" num="0019">An embodiment of the present invention is described in detail below with reference to the attached drawing figures, wherein:</p>
<p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. 1</figref> is a schematic diagram of an exemplary system for implementing a computer program in accordance with an embodiment of the present invention, wherein the program implements a method of secure, transparent data encryption and decryption;</p>
<p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. 2</figref> is a flow diagram of certain steps performed by the computer program when the program is first launched;</p>
<p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. 3</figref> is an exemplary user interface associated with the computer program for enabling the user to transfer files into and out of a secure repository;</p>
<p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. 4</figref> illustrates an alternative layout of the user interface of <figref idref="DRAWINGS">FIG. 3</figref>;</p>
<p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. 5</figref> is an exemplary user interface associated with the computer program for enabling a user to manage a synchronization function of the program;</p>
<p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. 6</figref> is an exemplary list of folder pairs whose contents are synchronized by the synchronization function of the computer program;</p>
<p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. 7</figref> is an exemplary user interface associated with the computer program for enabling a user to select various preferences associated with the secure repository;</p>
<p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. 8</figref> is an exemplary user interface associated with the computer program for enabling a user to manage a plurality of secure repositories; and</p>
<p id="p-0029" num="0028"><figref idref="DRAWINGS">FIG. 9</figref> is an exemplary graphical user interface of a computer operating environment including an icon associated with the secure repository.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0005" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0030" num="0029">The present invention relates to a system and method of transparently encrypting and decrypting data via a biometrically secure process. The method of the present invention is especially well-suited for implementation on a computer or computer network, such as the computer <b>10</b> illustrated in <figref idref="DRAWINGS">FIG. 1</figref> that includes a keyboard <b>12</b>, a processor console <b>14</b>, a display <b>16</b>, and one or more peripheral devices <b>18</b>,<b>38</b>, such as an external data storage device, biometric data sensor, scanner, or printer. The computer <b>10</b> may be a part of a computer network, such as the computer network <b>20</b> that includes one or more client computers <b>10</b>,<b>22</b> and one or more server computers <b>24</b>,<b>26</b> and interconnected via a communications system <b>28</b>. The present invention may also be implemented, in whole or in part, on a wireless communications system including, for example, a network-based wireless transmitter <b>30</b> and one or more wireless receiving devices, such as a hand-held computing device <b>32</b> with wireless communication capabilities. The present invention will thus be generally described herein as a computer program. It will be appreciated, however, that the principles of the present invention are useful independently of a particular implementation, and that one or more of the steps described herein may be implemented without the assistance of a computing device.</p>
<p id="p-0031" num="0030">The present invention can be implemented in hardware, software, firmware, or a combination thereof. In a preferred embodiment, however, the invention is implemented with a computer program. The computer program and equipment described herein are merely examples of a program and equipment that may be used to implement the present invention and may be replaced with other software and computer equipment without departing from the scope of the present invention.</p>
<p id="p-0032" num="0031">The computer program of the present invention is stored in or on a computer-useable medium, such as a computer-readable medium, residing on or accessible by a host computer for instructing the host computer to implement the method of the present invention as described herein. The host computer may be a server computer, such as server computer <b>24</b>, or a network client computer, such as computer <b>10</b>. The computer program preferably comprises an ordered listing of executable instructions for implementing logical functions in the host computer and other computing devices coupled with the host computer. The computer program can be embodied in any computer useable medium, such as a computer-readable medium, for use by or in connection with an instruction execution system, apparatus, or device, such as a computer-based system, processor-containing system, or other system that can fetch the instructions from the instruction execution system, apparatus, or device, and execute the instructions.</p>
<p id="p-0033" num="0032">The ordered listing of executable instructions comprising the computer program of the present invention will hereinafter be referred to simply as &#x201c;the program&#x201d; or &#x201c;the computer program.&#x201d; It will be understood by those skilled in the art that the program may comprise a single list of executable instructions or two or more separate lists, and may be stored on a single computer-useable medium or multiple distinct media. The program will also be described as comprising various &#x201c;code segments,&#x201d; which may include one or more lists, or portions of lists, of executable instructions. Code segments may include overlapping lists of executable instructions, that is, a first code segment may include instruction lists A and B, and a second code segment may include instruction lists B and C.</p>
<p id="p-0034" num="0033">In the context of this application, a &#x201c;computer-useable medium&#x201d; can be any means that can contain, store, communicate, propagate or transport the program for use by or in connection with the instruction execution system, apparatus, or device. The computer-useable medium can be, for example, but not limited to, an electronic, magnetic, optical, electro-magnetic, infrared, or semi-conductor system, apparatus, device, or propagation medium. More specific, although not inclusive, examples of computer-useable media would include the following: an electrical connection having one or more wires, a portable computer diskette, a random access memory (RAM), a read-only memory (ROM), an erasable, programmable, read-only memory (EPROM or Flash memory), an optical fiber, and a portable compact disk read-only memory (CDROM). The computer-useable medium could even be paper or another suitable medium upon which the program is printed, as the program can be electronically captured, via for instance, optical scanning of the paper or other medium, then compiled, interpreted, or otherwise processed in a suitable manner, if necessary, and then stored in a computer memory.</p>
<p id="p-0035" num="0034">The computer program of the present invention transparently encrypts data and stores the data in a secure repository by way of a biometrically secure process. A particular secure repository is referred to herein as a &#x201c;vault.&#x201d; As used in this document, a &#x201c;vault&#x201d; includes any computer-useable medium&#x2014;as described above&#x2014;that is operable to store data, such as a computer hard drive or other magnetic storage medium. The program automatically encrypts data moved into the vault and decrypts data moved out of the vault so that users can quickly and easily secure sensitive data. The vault is protected by an authentication system that requires biometric data, a password, or both, to gain access to the vault.</p>
<p id="p-0036" num="0035">Referring to <figref idref="DRAWINGS">FIG. 2</figref>, a flow diagram of steps involved in launching the program is illustrated. The program is first launched in a conventional manner, as depicted in block <b>40</b>. When the program is launched, it first determines whether there are any existing vaults, as depicted in block <b>42</b>. There may be existing vaults if the program was previously run and created vaults that were saved to a storage device. If the program discovers existing vaults, it presents a vault manager interface (<figref idref="DRAWINGS">FIG. 5</figref>), as depicted in block <b>44</b>. The vault manager is described in detail below.</p>
<p id="p-0037" num="0036">If the program does not discover an existing vault, the program begins the process of creating a new vault by enrolling primary biometric data that will be associated with the new vault, as depicted in block <b>48</b>. The primary biometric data is associated with a primary user, or the user who creates the vault. If the biometric data used by the program is fingerprint data, enrolling the primary data includes scanning a first fingerprint, creating a first primary biometric (fingerprint) template from the first fingerprint, scanning a second fingerprint, and creating a second primary biometric (fingerprint) template from the second fingerprint.</p>
<p id="p-0038" num="0037">The computer <b>10</b> receives biometric data from a user via a standalone biometric sensor <b>38</b>, such as a standalone fingerprint scanner, or via a biometric sensor <b>36</b> that is housed in another device <b>18</b>, such as a fingerprint scanner that is built into a hard drive enclosure, sometimes referred to as a &#x201c;bio drive.&#x201d;</p>
<p id="p-0039" num="0038">The program encodes the two biometric templates using, for example, a hashing algorithm that involves fragmenting template data, resorting the fragmented data, and storing the resorted data in a database. The program uses a different hashing algorithm for each vault to ensure that no two vaults have the same hashed template data, even if both vaults were created by the same user. The program destroys the first and second (unhashed) primary biometric templates so that only the hashed template data is stored in a database. The program decodes (unhashes) the encoded template data only if it authenticates a user, as explained below.</p>
<p id="p-0040" num="0039">The program creates an encryption key using the first and second primary biometric templates and thus must decode the encoded template data to create the encryption key. The encryption key is based at least in part on the templates, and preferably is further based on one or more other elements such as, for example, biometric data received from the user and not included in the templates and/or the unique hashing algorithm associated with the vault. After an encryption or decryption operation, the program destroys the key and the biometric templates, preserving only the encoded template data.</p>
<p id="p-0041" num="0040">The biometric sensor <b>18</b> as illustrated and described herein is a fingerprint scanner for capturing fingerprint data, but it will be appreciated that substantially any biometric data may be used without departing from the scope of the claimed invention including, but not limited to, voice print data, retinal scan data, iris scan data, facial characteristics, and behavioral characteristics, such as signature data. Such biometric data may be captured and analyzed using conventional hardware and processes known in the art. Furthermore, the biometric data used by the claimed invention may be any combination of one or more types of such biometric data.</p>
<p id="p-0042" num="0041">The program may alternatively receive and use a password in lieu of the biometric data where, for example, the program is installed on a computer that does not have an associated biometric sensor. When using only a password, the program associates the vault with the password and may use the password to create the encryption key. The program may create an artificial biometric template and use the artificial biometric template as if it were an actual biometric template described above, and may supplement the template with, for example, information taken or derived from the password to create the encryption key. Alternatively, the program may use both biometric data and a password, and may supplement the biometric template with information taken or derived from the password to create the encryption key. In yet another alternative, the program may require the user to submit either biometric information or a password as the user wishes. The program will generally be described below as using biometric data with the understanding that a password may be used in lieu of, or in combination with, the biometric data.</p>
<p id="p-0043" num="0042">Once the program enrolls the primary biometric data (or password) associated with the vault, the program receives the name of the vault from the user, as depicted in block <b>50</b>. With the primary biometric data and the name of the vault, the program creates the vault associated with the primary biometric data, as depicted in block <b>52</b>, and presents a vault interface, as depicted in block <b>54</b>. The user can then move data files into and out of the vault using the vault interface (<figref idref="DRAWINGS">FIG. 3</figref>), as explained in greater detail below.</p>
<p id="p-0044" num="0043">At any time during use of the program, the user can choose to enroll secondary biometric data (or a secondary password) to be associated with the vault, wherein the secondary biometric data (or password) is from a second user. The process of enrolling the secondary biometric data may be substantially similar to the process of enrolling the primary biometric data, except that the secondary biometric data is not used to create the encryption key. In enrolling the secondary biometric data, the program receives biometric information from the user, creates one or more biometric templates, and encodes biometric template data. Thereafter, the secondary user is authenticated when he or she submits the biometric data, the program encodes the biometric data and matches the encoded biometric data with encoded biometric data stored in the database. Any number of secondary users may submit secondary data to enable them to gain access to the vault.</p>
<p id="p-0045" num="0044">An exemplary vault interface <b>56</b> is illustrated in <figref idref="DRAWINGS">FIG. 3</figref>. The interface <b>56</b> is a graphical user interface with various interface elements for managing the transfer of files into and out of the vault, as well as for managing interface preferences. The illustrated interface <b>56</b> presents a first window <b>58</b> and a second window <b>60</b>. The first window <b>58</b> lists various drives, folders, sub-folders, and files stored on mediums generally accessible by the computer <b>10</b>. The second window <b>60</b> lists various folders, sub-folders, and files stored in the vault.</p>
<p id="p-0046" num="0045">To move a file into the vault, the user selects the file from the first window <b>58</b> and selects the second window <b>60</b> or a specific location within the second window <b>60</b>. In response to the user selecting the file and selecting the second window <b>60</b>, the program retrieves the selected file, encrypts the file using the encryption key created from the biometric data, and stores the encrypted file in the vault. Once the file has been stored in the vault, the program lists the file name in the second window <b>60</b>, according to the location of the file relative to other files and folders in the vault.</p>
<p id="p-0047" num="0046">The program is operable to encrypt and store the file in response to the user selecting the file and selecting the second window <b>60</b> and with no further action from the user, or with no other action by the user intermediate the acts of selecting the file and selecting the repository. By way of example, the user may select a file by positioning a display pointer over the file using a computer mouse, depressing a mouse button, dragging the file to the second window <b>60</b> by moving the mouse, and releasing the mouse button so that the file &#x201c;drops&#x201d; into the second window <b>60</b>. The user sees the file copied or moved to the second window <b>60</b>, but does not have to request or prompt the program to encrypt the file&#x2014;the program automatically encrypts the file before storing it in the vault.</p>
<p id="p-0048" num="0047">Alternatively, the program may encrypt and store the file in response to the user selecting the file, selecting the repository, and performing only minimal additional action, such as responding to a confirmation request generated by the program. Such minimal additional action may include one or more user actions but does not substantially extend the time or effort required by the user beyond that required by the act of selecting the file and selecting the repository.</p>
<p id="p-0049" num="0048">To move a file from the vault to a storage location external to the vault, the user selects a file listed in the second window <b>60</b> and selects a location listed in the first window <b>58</b>. In response to the user selecting the file and selecting the location, the program decrypts the file and stores it at the user-selected location.</p>
<p id="p-0050" num="0049">The program is operable to decrypt and store the file in the selected location in response to the user selecting the file and selecting the location and with no further action from the user, or with no other action by the user intermediate the acts of selecting the file and selecting the location. By way of example, the user may select a file from the second window <b>60</b> by positioning a display pointer over the file using a computer mouse, depressing a mouse button, dragging the file to a particular location listed in the first window <b>58</b> by moving the mouse, and releasing the mouse button so that the file &#x201c;drops&#x201d; into the location listed in first window <b>58</b>. The user sees the file copied or moved to the first window <b>58</b>, but does not have to request or prompt the program to decrypt the file&#x2014;the program automatically decrypts the file before storing it at the selected location.</p>
<p id="p-0051" num="0050">Alternatively, the program may decrypt and store the file in response to the user selecting the file, selecting the location, and performing only minimal additional action, such as responding to a confirmation request generated by the program. Such minimal additional action may include one or more user actions but does not substantially extend the time or effort required by the user beyond that required by the act of selecting the file and selecting the target location.</p>
<p id="p-0052" num="0051">The program is also operable to move file folders into and out of the vault in the manner described above, wherein a folder contains one or more files, subfolders, or both. When moving folders into the vault, the program retains the folder/subfolder/file structure by encrypting each file separately from other files stored in the folder, creating folders and subfolders in the vault corresponding to the folders and subfolders selected by the user, and storing the encrypted files in the folders and subfolders of the vault according to the original structure of the selected files. Once a folder has been created in the vault the user can place files into the folder, including files moved into the vault from an external location and files already stored in the vault but not in the folder. Furthermore, with one or more folders in the vault, as illustrated in the second window <b>60</b> of the interface <b>56</b>, the user may place a file in the vault by selecting the second window <b>60</b> generally or by selecting a particular location within the second window <b>60</b>.</p>
<p id="p-0053" num="0052">As illustrated in <figref idref="DRAWINGS">FIG. 3</figref>, the second window <b>60</b> illustrates a plurality of folders <b>62</b>, subfolders <b>64</b>, and files <b>66</b> stored in the secured vault. Folders listed in the second window <b>60</b> may be expanded to reveal subfolders and files contained therein, and may be condensed to hide the subfolders and files. If a user selects a folder from the first window <b>58</b> and moves the folder into the vault, the folder will appear in the second window <b>60</b> substantially identically as it appeared in the first window <b>58</b>, including the subfolder/file structure.</p>
<p id="p-0054" num="0053">The program enables users to access files directly from the second window <b>60</b> of the vault interface <b>56</b>. In other words, users can view or launch encrypted files listed in the second window <b>60</b> without first requesting that the program decrypt the files. By way of example, if the user positions a display pointer over the file labeled &#x201c;notes.txt&#x201d; in the second window <b>60</b> using a computer mouse and double clicks a mouse button, the program responds by automatically decrypting the file, launching an external application that is compatible with the file (such as a text editor), and displaying the file in a user interface generated by the application. If the user selects an executable file in a similar manner, the program automatically decrypts the executable file and executes code associated with the file.</p>
<p id="p-0055" num="0054">The vault interface <b>56</b> includes a toolbar <b>68</b> with various icons representing selectable functions associated with the vault. Selecting a preferences icon <b>70</b> invokes a preferences window <b>102</b> illustrated in <figref idref="DRAWINGS">FIG. 7</figref> and described below in greater detail.</p>
<p id="p-0056" num="0055">Selecting a layout view icon <b>74</b> modifies the manner in which the program presents information contained in the first window <b>58</b> and the second window <b>60</b>. The vault interface <b>56</b> may toggle between a vertical layout view (<figref idref="DRAWINGS">FIG. 3</figref>) and a horizontal layout view (<figref idref="DRAWINGS">FIG. 4</figref>), wherein the horizontal layout view presents the first window <b>58</b> above the second window <b>60</b>.</p>
<p id="p-0057" num="0056">Selecting an add finger icon <b>76</b> causes the program to enroll secondary biometric data, including the steps of receiving the data from a user and associating the data with the vault, as explained above. Selecting a remove finger icon <b>78</b> causes the program to disassociate secondary biometric data from the vault so that the user associated with the biometric data is no longer granted access to the vault. When a user selects the remove finger icon <b>78</b>, the program prompts the user associated with the biometric data to be removed to submit anew the biometric data, thus preventing a first user from disassociating a second user's biometric data from the vault without the second user's consent.</p>
<p id="p-0058" num="0057">Selecting a vault manager icon <b>80</b> causes the program to present a vault manager interface illustrated in <figref idref="DRAWINGS">FIG. 8</figref> and discussed below. Selecting a sync icon <b>82</b> presents a synchronization manager interface <b>84</b> illustrated in <figref idref="DRAWINGS">FIG. 5</figref>. The synchronization manager interface <b>84</b> enables the user to set up and manage synchronization pairs. Synchronization involves comparing the contents of two folders and updating the contents of either or both folders so that each folder contains the most recent version of each file contained in the other folder.</p>
<p id="p-0059" num="0058">More specifically, a synchronization pair consists of two folders, a first folder that is inside the vault called the vault folder, and a second folder that is outside the vault called the host computer folder. The program synchronizes the two folders by first updating the host computer folder. It does this by determining which files in the vault folder do not exist in the host computer folder, decrypting those files, and placing a copy of each decrypted file in the host computer folder. The program then compares the ages of the files in the vault folder with the ages of matching files in the host computer folder and replaces older files in the host computer folder with matching newer files in the vault folder. The program then updates the vault folder in the way it updated the host computer folder, except that files that are moved from the host computer folder to the vault folder are encrypted.</p>
<p id="p-0060" num="0059">A group of synchronization pairs is illustrated in <figref idref="DRAWINGS">FIG. 6</figref>. A first pair named &#x201c;FlashPics&#x201d; includes a folder labeled &#x201c;MyPics&#x201d; stored on a flash drive; a second pair named &#x201c;LaptopPics&#x201d; includes a folder labeled &#x201c;MyPics&#x201d; stored on a laptop computer hard drive; and a third pair named &#x201c;NetworkPics&#x201d; includes a folder labeled &#x201c;MyPics&#x201d; stored on a network drive. Synchronization occurs alphabetically according to pair name. For example, files in the flash drive folder &#x201c;MyPics&#x201d; are first synchronized with files in the vault folder &#x201c;FlashPics.&#x201d; Then, files in the laptop folder &#x201c;MyPics&#x201d; are synchronized with files in the vault folder &#x201c;LaptopPics.&#x201d; Finally, files in the network drive folder &#x201c;MyPics&#x201d; are synchronized with files in the vault folder &#x201c;NetworkPics.&#x201d;</p>
<p id="p-0061" num="0060">The synchronization manager interface <b>84</b> includes an add button <b>86</b> for creating a synchronization pair; a remove button <b>88</b> for deleting a synchronization pair; a rename button <b>90</b> for renaming a synchronization pair; an enable button <b>92</b> for enabling a synchronization pair that was previously disabled; and a disable button <b>94</b> for disabling a synchronization pair. When a synchronization pair is disabled, the program retains an association between the folders of the pair but does not synchronize the contents of the folders. When a user selects the enable button <b>92</b>, the program begins performing synchronization of the folders.</p>
<p id="p-0062" num="0061">A synchronization pair window <b>96</b> presents a list of existing synchronization pairs. Automatic synchronization on/off radio buttons <b>98</b> enable a user to turn automatic synchronization on and off, and a time interval selector <b>100</b> enables the user to select a time interval between each automatic synchronization. Such intervals may be one minute, two minutes, five minutes, ten minutes, fifteen minutes, twenty minutes, thirty minutes, sixty minutes, or virtually any other time interval expressed in seconds, minutes, hours, days, etcetera.</p>
<p id="p-0063" num="0062">The program identifies a particular drive associated with each host computer folder to ensure that the program can distinguish between host computer folders that have the same path name. This may arise, for example, where a user has a folder on a work computer with the path &#x201c;c:\pics&#x201d; and a folder on a home computer with the same path name, and has created a synchronization pair involving the &#x201c;pics&#x201d; folder on the home computer. The program identifies the drive on the home computer containing the &#x201c;pics&#x201d; folder according to a drive serial number and a drive volume label, which are different than the serial number and volume label of the drive on the work computer. Thus, the program does not synchronize a folder pair unless it can verify that the drive associated with a host computer folder is the same drive that was associated with the host computer folder when the synchronization pair was created.</p>
<p id="p-0064" num="0063">An exemplary vault preferences interface <b>102</b> is illustrated in <figref idref="DRAWINGS">FIG. 7</figref> and enables users to change various program settings. A first drop-down menu <b>104</b> enables the user to determine how often the program requires user authentication. Authentication includes submitting biometric data via the biometric data sensor so that the computer can verify that the submitted biometric data corresponds to enrolled biometric data. Options available via the menu <b>104</b> may include &#x201c;once&#x201d; and &#x201c;always.&#x201d; If &#x201c;once&#x201d; is selected, the program requires authentication only when the vault is opened, if &#x201c;always&#x201d; is selected, the program requires authentication each time a user attempts to perform an action in or to the vault, including adding an item to the vault, removing an item from the vault, enrolling secondary biometric data, and changing preferences.</p>
<p id="p-0065" num="0064">A second drop-down menu <b>106</b> provides options associated with actions the program takes upon the occurrence of a timeout. Timeout occurs when a predetermined time has passed during which no user has interacted with the program. Options available via the menu <b>106</b> may include &#x201c;reduced view,&#x201d; &#x201c;exit the application,&#x201d; and &#x201c;none.&#x201d; The &#x201c;reduced view&#x201d; setting will cause the program to go into a reduced view mode, which involves generating an icon that is generally smaller in size than other user interfaces associated with the program. The &#x201c;exit the application&#x201d; setting will cause the program to exit upon occurrence of timeout. Selecting the &#x201c;none&#x201d; option essentially disables timeout.</p>
<p id="p-0066" num="0065">An exemplary reduced view icon <b>108</b> is illustrated in <figref idref="DRAWINGS">FIG. 9</figref>, wherein the icon <b>108</b> is illustrated as part of an interface associated with a computer operating environment that also displays one or more icons <b>110</b> associated with executable program code as well as one or more icons <b>112</b> associated with files or file folders. A progress bar <b>114</b> may also be associated with the icon <b>108</b> and indicate, for example, a percentage completion of an encryption or decryption process.</p>
<p id="p-0067" num="0066">In a particular implementation, the program generates an icon for a WINDOWS&#x2122; desktop interface. In the reduced view, users can drag files from a location external to the program icon, such as from the WINDOWS&#x2122; desktop or from the WINDOWS EXPLORER&#x2122; program, to the program icon, wherein the program encrypts the files and stores them in the vault.</p>
<p id="p-0068" num="0067">A third drop-down menu <b>116</b> enables users to determine the length of time that passes without interaction from the user before timeout occurs. The options available via the menu <b>116</b> include one, two, three, four, five, ten, fifteen, twenty, twenty-five, thirty, forty-five, and sixty minutes. These values are exemplary in nature and virtually any length of time may be included in the drop-down menu <b>116</b>.</p>
<p id="p-0069" num="0068">A fourth drop-down menu <b>118</b> provides drag-and-drop action options. These options include &#x201c;copy,&#x201d; &#x201c;move,&#x201d; and &#x201c;prompt.&#x201d; When the &#x201c;copy&#x201d; option is selected, dragging and dropping a file into or out of a vault copies the file so that the original remains. When the &#x201c;move&#x201d; option is selected, dragging and dropping a file into or out of a vault moves the file so that the original is deleted. When the &#x201c;prompt&#x201d; option is selected, the program prompts the user to select copy or move each time the user uses the drag and drop function.</p>
<p id="p-0070" num="0069">A fifth drop-down menu <b>120</b> provides drag and drop target options associated with the reduced view and includes &#x201c;root&#x201d; and &#x201c;select&#x201d; options. When the &#x201c;root&#x201d; option is selected, the program places files in the root (top level) of the vault. When the &#x201c;select&#x201d; option is selected, the program allows the user to select a particular folder or subfolder in the vault as the target folder.</p>
<p id="p-0071" num="0070">A sixth drop-down menu <b>122</b> enables users to select a type of progress bar used in the vault interface <b>56</b>. The progress bar associated with the vault interface <b>56</b> provides an indication of task progress in a conventional manner. Such tasks may include encryption, decryption, deletion, import, export, and so forth. Options provided in the drop-down menu <b>122</b> include &#x201c;individual file progress&#x201d; and &#x201c;total file progress.&#x201d; When the &#x201c;individual file progress&#x201d; option is selected the program provides an indication of the progress of each file individually via the progress bar. This is used, for example, where a user selects a folder with multiple files, or selects multiple files. When the &#x201c;total file progress&#x201d; option is selected, the program provides an indication of the progress of the entire group of files.</p>
<p id="p-0072" num="0071">A seventh drop-down menu <b>124</b> provides options relating to the type of user interface the program presents at startup. The options provided by the drop-down menu <b>124</b> include &#x201c;reduced view&#x201d; and &#x201c;full view.&#x201d; A reduced view icon <b>108</b> is illustrated in <figref idref="DRAWINGS">FIG. 9</figref>, as explained above. The full view is either the vault manager interface (<figref idref="DRAWINGS">FIG. 8</figref>) or the vault interface <b>56</b>, depending on whether the program discovers a preexisting vault at startup.</p>
<p id="p-0073" num="0072">An eighth drop-down menu <b>126</b> provides synchronization options including &#x201c;disabled,&#x201d; &#x201c;delayed,&#x201d; and &#x201c;immediate.&#x201d; When the &#x201c;disabled&#x201d; option is selected, synchronization never initiates automatically but must be manually started by a user. When the &#x201c;delayed&#x201d; option is selected, synchronization occurs automatically a pre-determined time period after startup. When the &#x201c;immediate&#x201d; option is selected, the program automatically synchronizes all folder pairs immediately upon startup.</p>
<p id="p-0074" num="0073">A ninth drop-down menu <b>128</b> enables users to determine whether a visible countdown will precede a synchronization. A tenth drop-down menu <b>130</b> provides authentication mode options. When a &#x201c;fingerprint&#x201d; option is selected, the program requires a fingerprint only to authenticate a user. When a &#x201c;password&#x201d; option is selected, the program requires a password only to authenticate. When a &#x201c;fingerprint or password&#x201d; option is selected, the program requires a fingerprint or password to authenticate. When a &#x201c;fingerprint and password&#x201d; option is selected, the program requires both a fingerprint and a password to authenticate a user.</p>
<p id="p-0075" num="0074">An exemplary vault manager interface <b>132</b> is illustrated in <figref idref="DRAWINGS">FIG. 8</figref>. The vault manager interface <b>132</b> presents a list <b>134</b> of vaults and a toolbar <b>136</b> for managing the vaults. An add button <b>138</b> enables the user to create a new vault. When the user selects the add button <b>138</b> the program enrolls primary biometric data, receives a name of the vault, and creates a vault associated with the primary biometric data, as explained above. The new vault is then presented in the list <b>134</b>. The user may create as many new vaults as he or she wishes.</p>
<p id="p-0076" num="0075">A rename button <b>140</b> enables the user to rename an existing vault, the program may require authentication for this action. An open button <b>142</b> enables the user to open a vault selected from the list <b>134</b> of vaults in order to view and manage the contents of the vault. The program requires the user to submit biometric data before opening the vault, and only opens the vault if the submitted biometric data matches the primary biometric data or secondary biometric data. A delete button <b>144</b> enables the user to delete a selected vault, and the program may require authentication before performing the delete operation, and may prompt the user to confirm his or her desire to delete the vault. Alternatively, the program may require the user to submit a password in addition to or in lieu of the biometric data before opening a vault.</p>
<p id="p-0077" num="0076">An import button <b>146</b> enables the user to associate an existing vault with the vault manager interface <b>132</b>, such as where the vault was previously exported. When a user selects the import button <b>146</b>, the program presents a list of drives and folders from which the user may select an exported vault. An export button <b>148</b> enables the user to save a copy of a vault included in the list <b>134</b>. The user first selects a vault from the list <b>134</b>, then selects the export button <b>148</b>, and selects an export location in a conventional manner via, for example, a list of storage locations generated by the program. When the user selects the vault and the location, the program creates a copy of the vault and stores the copy in the designated location. The original vault remains accessible to the user via the vault manager interface <b>132</b>.</p>
<p id="p-0078" num="0077">The program may be stored entirely on, and may be executed from, the external storage device <b>18</b> with built-in biometric sensor <b>36</b> without the need to install the program on the computer <b>10</b>. The device <b>18</b> may be connected to the computer <b>10</b> via a hot-swapable connection standard such as the Universal Serial Bus (USB), wherein the drive <b>18</b> may be connected to and removed from the computer <b>10</b> while the computer <b>10</b> is running. Furthermore, each vault associated with the program may be stored on the external hard drive <b>18</b>, so that the program, biometric sensor <b>36</b>, and encrypted data are bound in a single package that can be moved from a first computer <b>10</b> to a second computer <b>22</b> simply by unplugging the drive <b>18</b> from the first computer <b>10</b> and plugging it into the second computer <b>22</b>. Alternatively, the program and associated vaults may be stored entirely on an internal storage device of the computer <b>10</b>.</p>
<p id="p-0079" num="0078">The user may be allowed to choose from various options at the time of purchase of the program, during use of the program, or both. For example, the user may choose a type of encryption to be used by the program including, for example, AES256, Blowfish 448, and 3DES, among others. Furthermore, the user may be allowed to choose what type of information, if any, the program requires before granting access to a secure repository. The user may set up the program to require biometric data only, a password only, either biometric data or a password, or both biometric data and a password.</p>
<p id="p-0080" num="0079">When the program is set up to require only a password, the program generates or uses an artificial biometric template, as explained above, and creates an encryption key in a manner similar to that explained above using the biometric data. When using only a password to authenticate a user, however, the program may supplement the artificial biometric template with information taken or derived from the password. The program may authenticate the password by comparing the password with a copy of the password stored in a database before granting access to the secure repository.</p>
<p id="p-0081" num="0080">Although the invention has been described with reference to the preferred embodiments illustrated in the attached drawings, it is noted that equivalents may be employed and substitutions made herein without departing from the scope of the invention as recited in the claims. It will be appreciated, for example, that invention may be implemented entirely on a portable wireless device <b>32</b>, such as a laptop or notebook computer, or a handheld device approximately the size of a user's hand such as a wireless telephone, portable digital assistant, or similar device, wherein the device includes an attachable or built-in biometric data sensor <b>34</b>.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>Having thus described a preferred embodiment of the invention, what is claimed as new and desired to be protected by Letters Patent includes the following:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A non-transitory computer-readable storage medium with an executable program stored thereon for enabling a storage system having a secure repository for storage of files, wherein the secure repository is associated with information indicative of a security template of a user for authentication of the user's identity, wherein the program instructs the at least one computer to perform the following steps:
<claim-text>receiving information indicative of a request by the user to access the secure repository during a session;</claim-text>
<claim-text>receiving information indicative of an authentication template of the user to access the secure repository;</claim-text>
<claim-text>comparing the information indicative of the authentication template with the information indicative of the security template;</claim-text>
<claim-text>upon the information indicative of the authentication template correlating with the information indicative of the security template, generating a key at least partially based on at least one of the security or authentication templates,</claim-text>
<claim-text>wherein the key is used for encrypting at least one file stored within the secure repository or decrypting at least one file removed from the secure repository during the session,</claim-text>
<claim-text>wherein the key is further at least partially based on ancillary biometric data received from the user, and the received ancillary biometric data is not associated with either of the security or authentication templates; and</claim-text>
<claim-text>encrypting or decrypting at least one file using said key during said session.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The non-transitory computer-readable storage medium of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further including the following steps:
<claim-text>terminating the session upon an event; and</claim-text>
<claim-text>destroying the key upon termination of the session, such that only the information indicative of the security template is preserved.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The non-transitory computer-readable storage medium of <claim-ref idref="CLM-00002">claim 2</claim-ref>,
<claim-text>further including the step of applying a hashing algorithm to the security template commensurate with association with the secure repository so as to obtain an encoded security template, and</claim-text>
<claim-text>wherein the key is further at least partially based on the hashing algorithm.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The non-transitory computer-readable storage medium of <claim-ref idref="CLM-00003">claim 3</claim-ref>, further including the following step:
<claim-text>destroying the information indicative of the authentication template, and the information indicative of the security template upon termination of the session, such that only the encoded security template is preserved.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. A non-transitory computer-readable storage medium with an executable program stored thereon for enabling a storage system having a secure repository for storage of files, wherein the secure repository is associated with information associated with a security template of a user for authentication of the user's identity, wherein the program instructs the at least one computer to perform the following steps:
<claim-text>receiving information indicative of a request by the user to access the secure repository;</claim-text>
<claim-text>authenticating the user's identity by confirming that the information associated with the security template statistically matches with information received from the user and associated with an authentication template of the user;</claim-text>
<claim-text>upon authenticating the user's identity, generating a key at least partially based on at least one of the security or authentication templates,</claim-text>
<claim-text>wherein the key is used for encrypting at least one file stored within the secure repository or decrypting at least on file removed from the secure repository during a session,</claim-text>
<claim-text>wherein the key is further at least partially based on ancillary biometric data received from the user, and the received ancillary biometric data is not associated with either of the security or authentication templates; and</claim-text>
<claim-text>encrypting or decrypting at least one file using said key during said session.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The non-transitory computer-readable storage medium of <claim-ref idref="CLM-00005">claim 5</claim-ref>, further including the following steps:
<claim-text>terminating the session upon an event; and</claim-text>
<claim-text>destroying the key upon termination of the session, such that only the information indicative of the security template is preserved.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The non-transitory computer-readable storage medium of <claim-ref idref="CLM-00006">claim 6</claim-ref>,
<claim-text>further including the step of applying a hashing algorithm to the security template so as to obtain an encoded security template, and</claim-text>
<claim-text>wherein the key is further at least partially based on the hashing algorithm.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The non-transitory computer-readable storage medium of <claim-ref idref="CLM-00007">claim 7</claim-ref>, further including the following steps:
<claim-text>destroying the information indicative of the authentication template, and the information indicative of the security template upon termination of the session, such that only the encoded security template is preserved. </claim-text>
</claim-text>
</claim>
</claims>
</us-patent-grant>

<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08627490-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08627490</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>11383159</doc-number>
<date>20060512</date>
</document-id>
</application-reference>
<us-application-series-code>11</us-application-series-code>
<us-term-of-grant>
<us-term-extension>1206</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>17</main-group>
<subgroup>30</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>726 27</main-classification>
<further-classification>726  1</further-classification>
<further-classification>726  2</further-classification>
<further-classification>726 26</further-classification>
<further-classification>726 29</further-classification>
</classification-national>
<invention-title id="d2e53">Enforcing document control in an information management system</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>4633430</doc-number>
<kind>A</kind>
<name>Cooper</name>
<date>19861200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>5564016</doc-number>
<kind>A</kind>
<name>Korenshtein</name>
<date>19961000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>5629980</doc-number>
<kind>A</kind>
<name>Stefik et al.</name>
<date>19970500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>5634012</doc-number>
<kind>A</kind>
<name>Stefik et al.</name>
<date>19970500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>5638443</doc-number>
<kind>A</kind>
<name>Stefik et al.</name>
<date>19970600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>5715403</doc-number>
<kind>A</kind>
<name>Stefik</name>
<date>19980200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>5987611</doc-number>
<kind>A</kind>
<name>Freund</name>
<date>19991100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>6236971</doc-number>
<kind>B1</kind>
<name>Stefik et al.</name>
<date>20010500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>6430549</doc-number>
<kind>B1</kind>
<name>Gershfield et al.</name>
<date>20020800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>6529985</doc-number>
<kind>B1</kind>
<name>Deianov et al.</name>
<date>20030300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>6578029</doc-number>
<kind>B2</kind>
<name>Gershfield et al.</name>
<date>20030600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>6594661</doc-number>
<kind>B1</kind>
<name>Tagg</name>
<date>20030700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00013">
<document-id>
<country>US</country>
<doc-number>6647388</doc-number>
<kind>B2</kind>
<name>Numao et al.</name>
<date>20031100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00014">
<document-id>
<country>US</country>
<doc-number>6701342</doc-number>
<kind>B1</kind>
<name>Bartz et al.</name>
<date>20040300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00015">
<document-id>
<country>US</country>
<doc-number>6763467</doc-number>
<kind>B1</kind>
<name>Radatti et al.</name>
<date>20040700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00016">
<document-id>
<country>US</country>
<doc-number>6823460</doc-number>
<kind>B1</kind>
<name>Hollander et al.</name>
<date>20041100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00017">
<document-id>
<country>US</country>
<doc-number>6839843</doc-number>
<kind>B1</kind>
<name>Bacha et al.</name>
<date>20050100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00018">
<document-id>
<country>US</country>
<doc-number>6941465</doc-number>
<kind>B1</kind>
<name>Palekar et al.</name>
<date>20050900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00019">
<document-id>
<country>US</country>
<doc-number>6948070</doc-number>
<kind>B1</kind>
<name>Ginter et al.</name>
<date>20050900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00020">
<document-id>
<country>US</country>
<doc-number>6948122</doc-number>
<kind>B2</kind>
<name>Matsumoto</name>
<date>20050900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00021">
<document-id>
<country>US</country>
<doc-number>6950943</doc-number>
<kind>B1</kind>
<name>Bacha et al.</name>
<date>20050900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00022">
<document-id>
<country>US</country>
<doc-number>6961762</doc-number>
<kind>B1</kind>
<name>Yeap et al.</name>
<date>20051100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00023">
<document-id>
<country>US</country>
<doc-number>7069451</doc-number>
<kind>B1</kind>
<name>Ginter et al.</name>
<date>20060600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00024">
<document-id>
<country>US</country>
<doc-number>7100199</doc-number>
<kind>B2</kind>
<name>Ginter et al.</name>
<date>20060800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00025">
<document-id>
<country>US</country>
<doc-number>7143288</doc-number>
<kind>B2</kind>
<name>Pham et al.</name>
<date>20061100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00026">
<document-id>
<country>US</country>
<doc-number>7185073</doc-number>
<kind>B1</kind>
<name>Gai et al.</name>
<date>20070200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00027">
<document-id>
<country>US</country>
<doc-number>7272625</doc-number>
<kind>B1</kind>
<name>Hannel et al.</name>
<date>20070900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00028">
<document-id>
<country>US</country>
<doc-number>7434048</doc-number>
<kind>B1</kind>
<name>Shapiro et al.</name>
<date>20081000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>713165</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00029">
<document-id>
<country>US</country>
<doc-number>2001/0003819</doc-number>
<kind>A1</kind>
<name>Matsumoto</name>
<date>20010600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00030">
<document-id>
<country>US</country>
<doc-number>2001/0023421</doc-number>
<kind>A1</kind>
<name>Numao et al.</name>
<date>20010900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00031">
<document-id>
<country>US</country>
<doc-number>2002/0095432</doc-number>
<kind>A1</kind>
<name>Shimomura et al.</name>
<date>20020700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00032">
<document-id>
<country>US</country>
<doc-number>2002/0099952</doc-number>
<kind>A1</kind>
<name>Lambert et al.</name>
<date>20020700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00033">
<document-id>
<country>US</country>
<doc-number>2002/0147734</doc-number>
<kind>A1</kind>
<name>Shoup et al.</name>
<date>20021000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707200</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00034">
<document-id>
<country>US</country>
<doc-number>2003/0004734</doc-number>
<kind>A1</kind>
<name>Adler et al.</name>
<date>20030100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00035">
<document-id>
<country>US</country>
<doc-number>2003/0014418</doc-number>
<kind>A1</kind>
<name>Adler et al.</name>
<date>20030100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00036">
<document-id>
<country>US</country>
<doc-number>2003/0014654</doc-number>
<kind>A1</kind>
<name>Adler et al.</name>
<date>20030100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00037">
<document-id>
<country>US</country>
<doc-number>2003/0055994</doc-number>
<kind>A1</kind>
<name>Herrmann et al.</name>
<date>20030300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00038">
<document-id>
<country>US</country>
<doc-number>2003/0115344</doc-number>
<kind>A1</kind>
<name>Tang et al.</name>
<date>20030600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00039">
<document-id>
<country>US</country>
<doc-number>2003/0177389</doc-number>
<kind>A1</kind>
<name>Albert et al.</name>
<date>20030900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00040">
<document-id>
<country>US</country>
<doc-number>2003/0182583</doc-number>
<kind>A1</kind>
<name>Turco</name>
<date>20030900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00041">
<document-id>
<country>US</country>
<doc-number>2003/0202518</doc-number>
<kind>A1</kind>
<name>Canali et al.</name>
<date>20031000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00042">
<document-id>
<country>US</country>
<doc-number>2004/0019807</doc-number>
<kind>A1</kind>
<name>Freund</name>
<date>20040100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00043">
<document-id>
<country>US</country>
<doc-number>2004/0078434</doc-number>
<kind>A1</kind>
<name>Parker et al.</name>
<date>20040400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00044">
<document-id>
<country>US</country>
<doc-number>2004/0078591</doc-number>
<kind>A1</kind>
<name>Teixeira et al.</name>
<date>20040400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00045">
<document-id>
<country>US</country>
<doc-number>2004/0107360</doc-number>
<kind>A1</kind>
<name>Herrmann et al.</name>
<date>20040600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00046">
<document-id>
<country>US</country>
<doc-number>2004/0117655</doc-number>
<kind>A1</kind>
<name>Someshwar</name>
<date>20040600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>713201</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00047">
<document-id>
<country>US</country>
<doc-number>2004/0133777</doc-number>
<kind>A1</kind>
<name>Kiriansky et al.</name>
<date>20040700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00048">
<document-id>
<country>US</country>
<doc-number>2004/0167984</doc-number>
<kind>A1</kind>
<name>Herrmann</name>
<date>20040800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00049">
<document-id>
<country>US</country>
<doc-number>2004/0225727</doc-number>
<kind>A1</kind>
<name>Koops et al.</name>
<date>20041100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00050">
<document-id>
<country>US</country>
<doc-number>2005/0008163</doc-number>
<kind>A1</kind>
<name>Leser et al.</name>
<date>20050100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00051">
<document-id>
<country>US</country>
<doc-number>2005/0097061</doc-number>
<kind>A1</kind>
<name>Shapiro</name>
<date>20050500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00052">
<document-id>
<country>US</country>
<doc-number>2005/0125688</doc-number>
<kind>A1</kind>
<name>Ogawa et al.</name>
<date>20050600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00053">
<document-id>
<country>US</country>
<doc-number>2005/0193145</doc-number>
<kind>A1</kind>
<name>Brown et al.</name>
<date>20050900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709238</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00054">
<document-id>
<country>US</country>
<doc-number>2005/0210035</doc-number>
<kind>A1</kind>
<name>Kester et al.</name>
<date>20050900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00055">
<document-id>
<country>US</country>
<doc-number>2005/0235204</doc-number>
<kind>A1</kind>
<name>Matsumoto</name>
<date>20051000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00056">
<document-id>
<country>US</country>
<doc-number>2005/0273857</doc-number>
<kind>A1</kind>
<name>Freund</name>
<date>20051200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00057">
<document-id>
<country>US</country>
<doc-number>2006/0047731</doc-number>
<kind>A1</kind>
<name>Matsui</name>
<date>20060300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00058">
<document-id>
<country>US</country>
<doc-number>2006/0120526</doc-number>
<kind>A1</kind>
<name>Boucher et al.</name>
<date>20060600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>380247</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00059">
<document-id>
<country>US</country>
<doc-number>2006/0137016</doc-number>
<kind>A1</kind>
<name>Margalit et al.</name>
<date>20060600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00060">
<document-id>
<country>US</country>
<doc-number>2006/0174334</doc-number>
<kind>A1</kind>
<name>Perlin et al.</name>
<date>20060800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00061">
<document-id>
<country>US</country>
<doc-number>2006/0179432</doc-number>
<kind>A1</kind>
<name>Walinga et al.</name>
<date>20060800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00062">
<document-id>
<country>US</country>
<doc-number>2006/0277185</doc-number>
<kind>A1</kind>
<name>Sato et al.</name>
<date>20061200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00063">
<document-id>
<country>US</country>
<doc-number>2006/0277409</doc-number>
<kind>A1</kind>
<name>Galwas</name>
<date>20061200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00064">
<othercit>Tim Moses et al. eXtensible Access Control Markup Language (XACML) Version 2.0 OASIS Standard Feb. 1, 2005 OASIS Open. (Source: http://docs.oasis-open.org/xacml/2.0/access<sub>&#x2014;</sub>control-xacml-2.0-core-spec-os.pdf see also http://www.oasis-open.org/committees/tc<sub>&#x2014;</sub>home.php?wg<sub>&#x2014;</sub>abbrev=xacml#XACML20).</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00065">
<othercit>Scott Cantor et al. Assertions and Protocols for the OASIS Security Assertion Markup Language (SAML) V2.0 OASIS Standard Mar. 15, 2005 OASIS Open. (Source: http://docs.oasis-open.org/security/saml/v2.0/saml-core-2.0-os.pdf; see also http://www.oasis-open.org/committees/tc<sub>&#x2014;</sub>home.php?wg<sub>&#x2014;</sub>abbrev=security).</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00066">
<othercit>Kelvin Lawrence et al. Web Services Security: SOAP Message Security 1.1 (WS-Security 2004) OASIS Standard Specification Feb. 1, 2006 OASIS Open. (Source: http://www.oasis-open.org/committees/download.php/16790/wss-v1.1-spec-os-SOAPMessageSecurity.pdf; see also http://www.oasis-open.org/committees/tc<sub>&#x2014;</sub>home.php?wg<sub>&#x2014;</sub>abbrev=wss).</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00067">
<othercit>Kelvin Lawrence et al. Web Services Security Rights Expression Language (REL) Token Profile 1.1 OASIS Standard Feb. 1, 2006 OASIS Open. (Source: http://www.oasis-open.org/committees/download.php/16687/oasis-wss-rel-token-profile-1.1.pdf; see also http://www.oasis-open.org/committees/tc<sub>&#x2014;</sub>home.php?wg<sub>&#x2014;</sub>abbrev=wss).</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00068">
<othercit>Paul Ashley Satoshi Hada G&#xfc;nter Karjoth Calvin Powers Matthias Schunter Enterprise Privacy Authorization Language (EPAL 1.1) Oct. 1, 2003 IBM Research mts at zurich.ibm.com. (Source: http://www.zurich.ibm.com/security/enterprise-privacy/epal/Specification/).</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00069">
<othercit>Paul Ashley Satoshi Hada G&#xfc;nter Karjoth Calvin Powers Matthias Schunter The Enterprise Privacy Authorization Language (EPAL)&#x2014;How to Enforce Privacy throughout an Enterprise IBM Research mts@zurich.ibm.com. (Source: http://www.w3.org/2003/p3p-ws/pp/ibm3.html).</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00070">
<othercit>Prateek Mishra et al. Security Services Markup Language Draft Version 0.8a Jan. 8, 2001 OASIS Open. (Source: http://www.oasis-open.org/committees/security/docs/draft-s2ml-v08a.pdf; see also ).</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00071">
<othercit>Portable Document Rights Language (PDRL) Specification Version 7.2 Jul. 2006 Adobe Systems Incorporated. (Source: http://www.adobe.com/devnet/livecycle/policyserver/articles/pdrl.pdf; see also http://www.adobe.com/devnet/livecycle/security.html).</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00072">
<othercit>John S. Erickson OpenDRM: A Standards Framework for Digital Rights Expression Messaging and Enforcement Revised Sep. 2002 Hewlett-Packard Laboratories. (Source: http://xml.coverpages.org/EricksonOpenDRM20020902.pdf).</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00073">
<othercit>Renato Iannella Karen Henricksen and Ricky Robinson A Policy Oriented Architecture for the Web: New Infrastructure and New Opportunities Oct. 2006 W3C Workshop on Languages for Privacy Policy Negotiation and Semantics-Driven Enforcement (Source: http://www.w3.org/2006/07/privacy-ws/presentations/05-iannella-policy-oriented-architecture.pdf).</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00074">
<othercit>Paul Ashley Satoshi Hada G&#xfc;nter Karjoth Calvin Powers Matthias Schunter The Enterprise Privacy Authorization Language (EPAL)&#x2014;How to Enforce Privacy throughout an Enterprise, 2003, IBM Research mts@zurich.ibm.com. (Source: http://www.w3.org/2003/p3p-ws/pp/ibm3.html).</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00075">
<othercit>U.S. Appl. No. 11/383,161 Prosecution History, filed May 12, 2006.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00076">
<othercit>U.S. Appl. No. 11,383,164 Prosecution History, filed May 12, 2006.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>40</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>726  1</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>726  2</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>726 27</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>726 26</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>726 29</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>707  1</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>707  5</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>707  9</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>707783</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709225</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>32</number-of-drawing-sheets>
<number-of-figures>32</number-of-figures>
</figures>
<us-related-documents>
<us-provisional-application>
<document-id>
<country>US</country>
<doc-number>60755019</doc-number>
<date>20051229</date>
</document-id>
</us-provisional-application>
<us-provisional-application>
<document-id>
<country>US</country>
<doc-number>60766039</doc-number>
<date>20051229</date>
</document-id>
</us-provisional-application>
<us-provisional-application>
<document-id>
<country>US</country>
<doc-number>60743121</doc-number>
<date>20060111</date>
</document-id>
</us-provisional-application>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20070162749</doc-number>
<kind>A1</kind>
<date>20070712</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Lim</last-name>
<first-name>Keng</first-name>
<address>
<city>Atherton</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Lim</last-name>
<first-name>Keng</first-name>
<address>
<city>Atherton</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Aka Chan LLP</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>NextLabs, Inc.</orgname>
<role>02</role>
<address>
<city>San Mateo</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Zee</last-name>
<first-name>Edward</first-name>
<department>2435</department>
</primary-examiner>
<assistant-examiner>
<last-name>To</last-name>
<first-name>Baotran N</first-name>
</assistant-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">A method and apparatus for controlling document access and application usage using centrally managed rules. The rules are stored and manipulated in a central rule database via a rule server. Policy enforcers are installed on client systems and/or on servers and perform document access and application usage control for both direct user document accesses and application usage, and application program document accesses by evaluating the rules sent to the policy enforcer. The rule server decides which rules are required by each policy enforcer. A policy enforcer can also perform obligation and remediation operations as a part of rule evaluation. Policy enforcers on client systems and servers can operate autonomously, evaluating policies that have been received, when communications have been discontinued with the rule server.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="162.39mm" wi="166.54mm" file="US08627490-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="221.40mm" wi="165.52mm" file="US08627490-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="210.06mm" wi="170.43mm" file="US08627490-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="221.15mm" wi="180.17mm" file="US08627490-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="112.61mm" wi="150.71mm" file="US08627490-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="106.76mm" wi="170.43mm" file="US08627490-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="158.07mm" wi="159.00mm" file="US08627490-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="213.44mm" wi="170.69mm" file="US08627490-20140107-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00008" num="00008">
<img id="EMI-D00008" he="176.28mm" wi="172.89mm" file="US08627490-20140107-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00009" num="00009">
<img id="EMI-D00009" he="118.45mm" wi="170.94mm" file="US08627490-20140107-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00010" num="00010">
<img id="EMI-D00010" he="221.06mm" wi="158.67mm" file="US08627490-20140107-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00011" num="00011">
<img id="EMI-D00011" he="182.46mm" wi="162.98mm" file="US08627490-20140107-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00012" num="00012">
<img id="EMI-D00012" he="206.42mm" wi="176.28mm" file="US08627490-20140107-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00013" num="00013">
<img id="EMI-D00013" he="204.55mm" wi="177.21mm" file="US08627490-20140107-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00014" num="00014">
<img id="EMI-D00014" he="192.87mm" wi="171.62mm" file="US08627490-20140107-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00015" num="00015">
<img id="EMI-D00015" he="159.34mm" wi="169.16mm" file="US08627490-20140107-D00015.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00016" num="00016">
<img id="EMI-D00016" he="203.37mm" wi="158.16mm" file="US08627490-20140107-D00016.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00017" num="00017">
<img id="EMI-D00017" he="201.17mm" wi="161.80mm" file="US08627490-20140107-D00017.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00018" num="00018">
<img id="EMI-D00018" he="154.43mm" wi="164.00mm" file="US08627490-20140107-D00018.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00019" num="00019">
<img id="EMI-D00019" he="187.28mm" wi="166.12mm" file="US08627490-20140107-D00019.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00020" num="00020">
<img id="EMI-D00020" he="143.00mm" wi="155.96mm" file="US08627490-20140107-D00020.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00021" num="00021">
<img id="EMI-D00021" he="145.80mm" wi="162.73mm" file="US08627490-20140107-D00021.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00022" num="00022">
<img id="EMI-D00022" he="165.18mm" wi="171.03mm" file="US08627490-20140107-D00022.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00023" num="00023">
<img id="EMI-D00023" he="203.54mm" wi="173.74mm" file="US08627490-20140107-D00023.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00024" num="00024">
<img id="EMI-D00024" he="148.59mm" wi="153.25mm" file="US08627490-20140107-D00024.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00025" num="00025">
<img id="EMI-D00025" he="143.93mm" wi="166.12mm" file="US08627490-20140107-D00025.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00026" num="00026">
<img id="EMI-D00026" he="195.33mm" wi="177.80mm" file="US08627490-20140107-D00026.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00027" num="00027">
<img id="EMI-D00027" he="215.14mm" wi="170.01mm" file="US08627490-20140107-D00027.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00028" num="00028">
<img id="EMI-D00028" he="197.78mm" wi="172.30mm" file="US08627490-20140107-D00028.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00029" num="00029">
<img id="EMI-D00029" he="195.66mm" wi="172.55mm" file="US08627490-20140107-D00029.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00030" num="00030">
<img id="EMI-D00030" he="196.85mm" wi="174.07mm" file="US08627490-20140107-D00030.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00031" num="00031">
<img id="EMI-D00031" he="212.85mm" wi="174.75mm" file="US08627490-20140107-D00031.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00032" num="00032">
<img id="EMI-D00032" he="158.75mm" wi="98.55mm" orientation="landscape" file="US08627490-20140107-D00032.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?RELAPP description="Other Patent Relations" end="lead"?>
<heading id="h-0001" level="1">CROSS-REFERENCE TO RELATED APPLICATIONS</heading>
<p id="p-0002" num="0001">This application claims the benefit of U.S. provisional patent applications 60/755,019, filed Dec. 29, 2005; 60/766,036, filed Dec. 29, 2005; and 60/743,121, filed Jan. 11, 2006. These applications along with other cited references in this application are incorporated by reference.</p>
<?RELAPP description="Other Patent Relations" end="tail"?>
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0002" level="1">BACKGROUND OF THE INVENTION</heading>
<p id="p-0003" num="0002">The present invention generally relates to the access and usage control and management of information stored in a computer environment. The invention relates more specifically to a method and apparatus for controlling access to and usage of electronic information using centrally managed rules in a computer environment.</p>
<p id="p-0004" num="0003">The approaches described in this section could be pursued, but are not necessarily approaches that have been previously conceived or pursued. Therefore, unless otherwise indicated herein, the approaches described in this section are not prior art to the claims in this application and are not admitted to be prior art by inclusion in this section.</p>
<p id="p-0005" num="0004">Networked computer systems have evolved over the years from simple serially connected computer systems to massively networked computer systems connected via large intranets and the Internet. During this evolution, many different concepts were developed to manage how users are granted access to electronic files stored in the computer systems. How a computer system determines if a user permission to access a file has been a complex problem to solve.</p>
<p id="p-0006" num="0005">Some operating systems use a simple approach to determining whether a user has permission to access a file. For example the Unix operating system gives a system administrator or file owner the ability to attach access permissions to directories and files. There are three types of access permissions that the system administrator or file owner can select from. The permissions are: read, write, and execute. These permissions can then be limited to three types of users: the owner of the file; the group that the owner belongs to; and other users. Each permission and user type has two states: allowed or denied.</p>
<p id="p-0007" num="0006">Whenever a user accesses a file, the Unix operating system first checks the permissions set for a file against the user's type. The operating system checks if the user falls into any of the three user types. If the user is a member of any of the user types and the user type has been specified as allowed, then the operating system checks which of the permissions are set as allowed. The user is then allowed to perform any access that falls under an allowed permission.</p>
<p id="p-0008" num="0007">This approach does not offer much flexibility to the system administrator. The system administrator cannot specify particular users other than the owner or particular groups. The permissions are limited to directories and files within the file system and do not cover nonfile system objects such as e-mails and Web pages. Further, the operating system checks permissions for file accesses based only on user and it does not restrict file accesses based on application programs.</p>
<p id="p-0009" num="0008">A more advanced approach that is commonly used is called Access Control Lists (ACL). ACL uses a language that allows the system administrator or file owner to set read, write, and execute permissions for specific users and groups of users for accesses to files. In some approaches, each set of ACLs for a particular directory reside in a file stored in that directory. The ACLs apply to files that are contained within that directory. When a user attempts to access a file in a directory, the operating system loads the ACL file and reads the ACL rules that were created by the system administrator or user. The operating system determines if the user is allowed to access the file by parsing the ACL rule. In other approaches, a set of ACLs associated with a file is stored as one or more extended file system attributes of the file. In another implementation, access control and auditing ACLs are stored in a security descriptor associated with a file or a directory.</p>
<p id="p-0010" num="0009">There are many drawbacks to the ACL approach. ACL only applies to files within a file system and does not apply to nonfile system objects. The ACL support is built into the operating system kernel and cannot be extended. ACL is not very portable because it is file system specific and is therefore not universal which means that not all file systems support the same ACL and not all operating systems have the same interpretation of an ACL. When a file is copied from one file system to another (or from one operating system to another), some of the control information may be lost due to compatibility issues. Further, ACL is difficult to apply to users outside of a company's file system (e.g., a customer). Finally, as with the operating system example above, ACL is capable of controlling file accesses by a user but is not capable of controlling file accesses by a particular application program or at a particular time or location.</p>
<p id="p-0011" num="0010">Applications such as document management systems require a user to check a document in and out of a library system. Once the document has been checked out, it can be distributed and modified in any manner. This means that there is no control over how a document is used once the document leaves the document management system.</p>
<heading id="h-0003" level="1">BRIEF SUMMARY OF THE INVENTION</heading>
<p id="p-0012" num="0011">A method and apparatus for controlling document access and application usage using centrally managed rules. The rules are stored and manipulated in a central rule database via a rule server. Policy enforcers are installed on client systems and/or on servers and perform document access and application usage control for both direct user document accesses and application usage, and application program document accesses by evaluating the rules sent to the policy enforcer. The rule server decides which rules are required by each policy enforcer. A policy enforcer can also perform obligation and remediation operations as a part of rule evaluation. Policy enforcers on client systems and servers can operate autonomously, evaluating policies that have been received, when communications have been discontinued with the rule server.</p>
<p id="p-0013" num="0012">In an embodiment, the invention is a method of controlling document access using centrally managed rules, the method including the computer-implemented steps of: receiving a number of rules at a client system from a central rule database, where the rules contain at least one expression used by the client system to perform access control for documents accessed by the client system. Further, the steps include detecting a document access operation attempted by an application program on the client system; and evaluating at least one rule from the number of rules that pertains to the document being accessed, where the evaluating step allows access to the document based on the evaluated at least one rule pertaining to the document.</p>
<p id="p-0014" num="0013">In another embodiment, the invention is a method of controlling document access using centrally managed rules, the method including the computer-implemented steps of: receiving a number of rules at a server from a central rule database, where the rules contain at least one expression used by the server to perform access control for documents stored on the server. Further, the steps include detecting, on the server, a document access operation for a document on the server by an application program on a client system; and evaluating at least one rule from the number of rules that pertains to the document being accessed, where the evaluating step allows access to the document based on the evaluated at least one rule pertaining to the document.</p>
<p id="p-0015" num="0014">In another embodiment, the invention is a method of controlling document access using centrally managed rules, the method including the computer-implemented steps of: distributing a first number of rules to a client system from a central rule database, where the first number of rules distributed to the client system contain at least one expression used by the client system to perform access control for documents accessed by the client system, and the client system rule distributing step dynamically selects the first number of rules for the client system. Further, the steps include distributing a second number of rules to a server from the central rule database, where the second number of rules distributed to the server contain at least one expression used by the server to perform access control for documents stored on the server, the server rule distributing step dynamically selects the second number of rules for the server, and rules in the central rule database are maintained by a central rule server.</p>
<p id="p-0016" num="0015">In another embodiment, the invention is an apparatus for controlling document access using centrally managed rules, including: a module for receiving a number of rules at a client system from a central rule database, where the rules contain at least one expression used by the client system to perform access control for documents accessed by the client system. Further, the apparatus includes a module for detecting a document access operation attempted by an application program on the client system; and a module for evaluating at least one rule from the number of rules that pertains to the document being accessed, where the evaluating module allows access to the document based on the evaluated at least one rule pertaining to the document.</p>
<p id="p-0017" num="0016">In another embodiment, the invention is an apparatus for controlling document access using centrally managed rules, including: a module for receiving a number of rules at a server from a central rule database, where the rules contain at least one expression used by the server to perform access control for documents stored on the server. Further, the apparatus includes a module for detecting, on the server, a document access operation for a document on the server by an application program on a client system; and a module for evaluating at least one rule from the number of rules that pertains to the document being accessed, where the evaluating module allows access to the document based on the evaluated at least one rule pertaining to the document.</p>
<p id="p-0018" num="0017">Other objects, features, and advantages of the present invention will become apparent upon consideration of the following detailed description and the accompanying drawings, in which like reference designations represent like features throughout the figures.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0019" num="0018">The present invention is illustrated by way of example, and not by way of limitation, in the figures of the accompanying drawings and in which like reference numerals refer to similar elements and in which:</p>
<p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. 1</figref> is a block diagram that illustrates a policy server that centrally manages policies that are used by workstations and servers according to the invention;</p>
<p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. 2</figref> is a block diagram that illustrates minimal embodiments that utilize a number of workstations each with policy enforcers installed or a number of document servers each with policy enforcers installed according to the invention;</p>
<p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. 3</figref> is a block diagram that illustrates a number of workstations and document servers with policy enforcers installed and coexist within a system according to the invention;</p>
<p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. 4</figref> is a block diagram that illustrates internal components of a policy server according to the invention;</p>
<p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. 5</figref> is a block diagram that illustrates internal components of an intelligence server according to the invention;</p>
<p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. 6</figref><i>a </i>is a block diagram that illustrates an interceptor and a consequence applicator in a Policy Enforcement Point (PEP) module according to the invention;</p>
<p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. 6</figref><i>b </i>is a block diagram that illustrates a policy enforcer that implements interception and enforcement functions using a PEP plug-in architecture according to the invention;</p>
<p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. 6</figref><i>c </i>is a block diagram that illustrates a policy engine running in a process separate from a policy enforcer according to the invention;</p>
<p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. 7</figref> is a block diagram that illustrates a policy engine module's policy input and evaluation output according to the invention;</p>
<p id="p-0029" num="0028"><figref idref="DRAWINGS">FIG. 8</figref> is a block diagram that illustrates a policy enforcer installed on a workstation that controls access to files on the workstation according to the invention;</p>
<p id="p-0030" num="0029"><figref idref="DRAWINGS">FIG. 9</figref> is a block diagram that illustrates a policy enforcer on a client computer that controls the client computer's access to files on a file server according to the invention;</p>
<p id="p-0031" num="0030"><figref idref="DRAWINGS">FIG. 10</figref><i>a </i>is a block diagram that illustrates a policy enforcer on a file server implemented in operating system kernel that controls access to files on the file server according to the invention;</p>
<p id="p-0032" num="0031"><figref idref="DRAWINGS">FIG. 10</figref><i>b </i>is a block diagram that illustrates a policy enforcer on a file server that controls access to files on the file server according to the invention;</p>
<p id="p-0033" num="0032"><figref idref="DRAWINGS">FIG. 10</figref><i>c </i>is a block diagram that illustrates a policy enforcer on a file server with a policy engine running on a separate computer that controls access to files on the file server according to the invention;</p>
<p id="p-0034" num="0033"><figref idref="DRAWINGS">FIG. 11</figref> is a block diagram that illustrates a policy enforcer on a workstation enforcing access control to a nonfile system object according to the invention;</p>
<p id="p-0035" num="0034"><figref idref="DRAWINGS">FIG. 12</figref> is a block diagram that illustrates a policy enforcer on a workstation applying an obligation action for a file access operation according to the invention;</p>
<p id="p-0036" num="0035"><figref idref="DRAWINGS">FIG. 13</figref> is a block diagram that illustrates a policy enforcer on a workstation applying a remediation action for a file access operation according to the invention;</p>
<p id="p-0037" num="0036"><figref idref="DRAWINGS">FIG. 14</figref> is a diagram that illustrates a policy enforcer on a virtual file server that controls a client computer's access to files on a file server or a network attached storage device behind a virtual file server according to the invention;</p>
<p id="p-0038" num="0037"><figref idref="DRAWINGS">FIG. 15</figref> is a diagram that illustrates a policy enforcer on a file gateway that controls the client computer's access to files on a file server or a network attached storage device across the wide area network according to the invention;</p>
<p id="p-0039" num="0038"><figref idref="DRAWINGS">FIG. 16</figref> is a block diagram that illustrates a policy enforcer on a workstation that controls application usage on the workstation according to the invention;</p>
<p id="p-0040" num="0039"><figref idref="DRAWINGS">FIG. 17</figref> is a block diagram that illustrates a policy enforcer on a workstation that controls application usage on the workstation according to the invention;</p>
<p id="p-0041" num="0040"><figref idref="DRAWINGS">FIG. 18</figref> is a block diagram that illustrates a policy enforcer on a workstation that controls application usage on nonfile system objects at the workstation according to the invention;</p>
<p id="p-0042" num="0041"><figref idref="DRAWINGS">FIG. 19</figref> is a block diagram that illustrates a policy enforcer on a workstation that combines application usage and document access control on files at the workstation according to the invention;</p>
<p id="p-0043" num="0042"><figref idref="DRAWINGS">FIG. 20</figref> is a block diagram that illustrates a policy enforcer on a workstation that uses an obligation to implement a regulatory compliance requirement according to the invention;</p>
<p id="p-0044" num="0043"><figref idref="DRAWINGS">FIG. 21</figref> is a block diagram that illustrates a policy enforcer on a workstation that controls application usage on nonfile system objects at the workstation according to the invention;</p>
<p id="p-0045" num="0044"><figref idref="DRAWINGS">FIG. 22</figref><i>a </i>is a block diagram that illustrates a document server policy specifying information to be obtained from a point-of-use policy enforcer during policy evaluation according to the invention;</p>
<p id="p-0046" num="0045"><figref idref="DRAWINGS">FIG. 22</figref><i>b </i>is a block diagram that illustrates a workstation policy enforcer transmitting information obtained at a point-of-use to a document server policy enforcer according to the invention;</p>
<p id="p-0047" num="0046"><figref idref="DRAWINGS">FIG. 23</figref> is a block diagram that illustrates a file server policy enforcer allows access to a file only if a workstation policy enforcer is detected on a client computer that requested the file according to the invention;</p>
<p id="p-0048" num="0047"><figref idref="DRAWINGS">FIG. 24</figref> is a block diagram that illustrates an embodiment where a copy operation is performed from a file server to a destination file server and the destination file server does not have a policy enforcer which results in a denial of the operation according to the invention;</p>
<p id="p-0049" num="0048"><figref idref="DRAWINGS">FIG. 25</figref> is a block diagram that illustrates a workstation policy engine needing information about a recipient of a message that is unavailable at its location and the workstation policy engine delegating evaluation of the policy to a policy decision server according to the invention;</p>
<p id="p-0050" num="0049"><figref idref="DRAWINGS">FIG. 26</figref> is a block diagram that illustrates a document server policy that requires copies of a file on all workstations be deleted when the master copy on a document server is deleted according to the invention; and</p>
<p id="p-0051" num="0050"><figref idref="DRAWINGS">FIG. 27</figref> is a block diagram that illustrates a computer system upon which an embodiment may be implemented.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0005" level="1">DETAILED DESCRIPTION OF THE INVENTION</heading>
<p id="p-0052" num="0051">A method and apparatus for the distributed control of document access and application usage uses centrally managed rules. In the following description, for the purposes of explanation, numerous specific details are set forth in order to provide a thorough understanding of the present invention. It will be apparent, however, to one skilled in the art that the present invention may be practiced without these specific details. In other instances, well-known structures and devices are shown in block diagram form in order to avoid unnecessarily obscuring the present invention.</p>
<p id="p-0053" num="0052">Embodiments are described in this application according to the following outline:</p>
<p id="p-0054" num="0053">
<tables id="TABLE-US-00001" num="00001">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="1" colwidth="49pt" align="char"/>
<colspec colname="2" colwidth="168pt" align="left"/>
<thead>
<row>
<entry namest="1" nameend="2" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry>1.0</entry>
<entry>General Overview</entry>
</row>
<row>
<entry>2.0</entry>
<entry>Structural and Functional Description</entry>
</row>
<row>
<entry>2.1</entry>
<entry>A Centrally Managed Policy System</entry>
</row>
<row>
<entry>2.2</entry>
<entry>Policy Creation and Management</entry>
</row>
<row>
<entry>2.21</entry>
<entry>Policy Server</entry>
</row>
<row>
<entry>2.22</entry>
<entry>Intelligence Server</entry>
</row>
<row>
<entry>2.3</entry>
<entry>Policy Enforcers</entry>
</row>
<row>
<entry>2.4</entry>
<entry>Example Scenarios</entry>
</row>
<row>
<entry>3.0</entry>
<entry>Implementation Mechanisms-Hardware Overview</entry>
</row>
<row>
<entry>4.0</entry>
<entry>Extensions and Alternatives</entry>
</row>
<row>
<entry namest="1" nameend="2" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0055" num="0054">1.0 General Overview</p>
<p id="p-0056" num="0055">Based on the foregoing, there is a clear need for a system that provides for the control of access to files at both the user and application program levels. Additionally, the system would allow a system administrator to centrally manage access policies for files in workstations and file servers. There is a further need for a system that provides for the control of access to nonfile system objects.</p>
<p id="p-0057" num="0056">An embodiment of the invention centrally manages policies (or rules) pertaining to the control of access to documents and usage of application data and functions. The policies are stored and manipulated by a policy administrator or user in the policy database via a policy server. The policy server is an intelligent system that has the ability to decide if a single or multiple policies or subset of policies are required by each policy enforcer. The policy server distributes the policies to each policy enforcer.</p>
<p id="p-0058" num="0057">Policy enforcers are installed on client systems at the operating system level or in application programs (e.g., application programs such as Microsoft Word, Microsoft Excel, SAP Frontend, enterprise resource planning client applications, customer relationship management client applications, Internet Explorer, Mozilla Firefox, Windows Explorer, Notepad, Windows Messenger, Yahoo Messenger, Microsoft Outlook, Windows Media Player, Remote Assistance, FTP client, Java JVM, DOS command shell, DOS programs, and other third party system utilities) on the client system to provide document access and application usage control at the point-of-use. They can also be installed on servers at the operating system level or in an application program on the server to provide protection to the documents on the server.</p>
<p id="p-0059" num="0058">Policy enforcers are able to perform document access and application usage control for both direct user document accesses and application usage, and application program document accesses and data usage. A document includes any of: a file, a Web page, an e-mail message, a discussion thread, an on-line report, results of a database query, an on-line form, a bitmap, a file system object, a data object managed by a document management system, a data object managed by a content management server, a data object in a product life cycle management system, a source code file or a code fragment managed by a source code management system, a data object managed by a configuration management system, a data object managed by a project management system, a data object in an enterprise resource planning system, a data object in a customer relationship management system, a data object managed and/or served by a portal server, a data object served by a Web server, a data object managed and/or served by any application server, or any unit of information content stored on volatile or nonvolatile memory.</p>
<p id="p-0060" num="0059">The client systems and servers can operate autonomously, evaluating policies that have been previously received, when communications have been discontinued with the policy server. For example, a policy enforcer installed on a laptop computer continues to enforce policies installed on or distributed to the laptop computer while the laptop computer is not connected to a network, or the laptop computer is connected to a network but cannot communicate with a policy server. In another example, a policy enforcer installed on a document server continues to enforce policies installed on or distributed to the document server while communication to a policy server is interrupted.</p>
<p id="p-0061" num="0060">A client system can be a desktop computer, laptop computer, personal digital assistant (PDA), smart phone, thin clients (e.g., HP Consolidated Client Infrastructure clients and Wyse terminals), an instance of client operating environment running on a terminal server (e.g., Microsoft Terminal Server or Citrix MetaFrame), a guest operating system running on a virtual machine (e.g., VMWare Workstation or Microsoft Virtual Server), a server making document access or application usage request (acting as a client in the context of the request), information kiosk, Internet kiosk, and any computing device and computing environment from which a document access or application usage request originates, etc. A server can be a file server, network attached storage (NAS), virtual NAS device (e.g., a NAS switch such as Acopia Adaptive Resource Switch, NeoPath File Director, or Rainfinity RainStorage), edge file gateway (e.g., a wide area file service (WAFS) device such as Cisco File Engine series appliances, Tacit IShared products, or Riverbed Steelhead appliances), Web server, e-mail server, document management system, content management system, portal server, database server, or any other document repository.</p>
<p id="p-0062" num="0061">In addition to providing control or protection, a policy enforcer can also perform obligation and remediation operations as a result of a document access or application usage attempt (whether successful or not) as dictated by the active policy.</p>
<p id="p-0063" num="0062">The policies are evaluated when an action is taken by a user or an application to access a document, invoke a function in an application program, or operate on application data object or fragment. The action is intercepted (or detected) and relevant policies are applied before the action is allowed to be carried out. The policies that a policy enforcer can handle can be defined based on the type of action, user, user group, user attribute (e.g., department, role, project or status&#x2014;full-time, part-time, or consultant, user's business function), computer, type of computer (e.g., a laptop or smart phone), group of computers (e.g., &#x201c;finance department computers&#x201d;), application program (e.g., Word or Outlook), type of application program (e.g., spreadsheet), application module (e.g., SAP CRM module or Oracle Finance accounting module), location (e.g., New York office vs. London office), connectivity (including access mechanism and bandwidth; e.g., LAN, WLAN, VPN, Bluetooth, Internet, DSL, ISDN, dialup, Remote Desktop Protocol (RDP), Virtual Network Computing (VNC) protocol, latency, secure point-to-point, 56 k, broadband, 100 Mb and 1 Gb), time of day, day of the week, file path, file name, file size, file timestamp, file owner, file properties, document type (e.g., file or e-mail), document format (e.g., xls file or pdf file), document identifier, document classification, document characteristics (e.g., a document contains a watermark), document content, database query, database query result set, database query result set properties, metadata, and more. A policy enforcer can interpret any combination of parameters.</p>
<p id="p-0064" num="0063">In other aspects, the invention encompasses a computer apparatus and a computer-readable medium configured to carry out the foregoing steps.</p>
<p id="p-0065" num="0064">2.0 Structural and Functional Description</p>
<p id="p-0066" num="0065">2.1 A Centrally Managed Policy System</p>
<p id="p-0067" num="0066">An embodiment of the invention centrally manages policies (or rules) pertaining to the controlling of access to documents and usage of application data and functions. Documents can be file system or nonfile system objects. For example, a file system object may be an Excel spreadsheet. A nonfile system object may be an e-mail message or data delivered to an SAP Frontend client application (e.g., information about an employee) by an SAP human resource module running on a server. A document encompasses objects such as a file, an e-mail message, a Web page, an on-line report, an on-line form, a discussion thread, a result set generated by a database query, a bitmap, a file system object, a data object managed by a document management system, a data object managed by a content management server, a data object in a product life cycle management system, a source code file or a code fragment managed by a source code management system, a data object managed by a configuration management system, a data object managed by a project management system, a data object in a enterprise resource planning system, a data object in a customer relationship management system, a data object managed and/or served by a portal server, a data object served by a Web server, a data object managed and/or served by any application server, or any unit of information content stored on volatile or nonvolatile memory. The policies allow policy enforcers (also referred to as agents) to make decisions on whether to allow or deny access to a particular document, execute a particular application function, or operate on a particular application data object or fragment. The policy enforcers perform document access and application usage control for operations performed in response to direct user action and execution of application program logic.</p>
<p id="p-0068" num="0067">Referring to <figref idref="DRAWINGS">FIG. 1</figref>, policies are created and managed by a policy server <b>101</b>. As discussed below, a policy may define to whom and under what condition(s) access to a document is granted or denied. The policies are stored and manipulated by the policy author and policy administrator in the policy repository <b>102</b>. Policies and/or subsets of policies are transmitted to workstations <b>103</b> and document servers <b>105</b> to control local and remote document accesses and application usage. A workstation can be a desktop computer, laptop computer, personal digital assistant (PDA), smart phone, thin clients (e.g., HP Consolidated Client Infrastructure clients and Wyse terminals), an instance of client operating environment running on a terminal server (e.g., Microsoft Terminal Server or Citrix MetaFrame), a guest operating system running on a virtual machine (e.g., VMWare Workstation or Microsoft Virtual Server), a server making document access or application usage requests (acting as a client in the context of the request), information kiosk, Internet kiosk, and any computing device and computing environment from which a document access or application usage request originates. A document server can be a file server, network attached storage (NAS), virtual NAS device (e.g., a NAS switch device such as Acopia Adaptive Resource Switch, NeoPath File Director, or Rainfinity RainStorage), edge file gateway (e.g., a wide area file service (WAFS) device such as Cisco File Engine series appliances, Tacit IShared products, or Riverbed Steelhead appliances), Web server, e-mail server, document management system, content management server, portal server, database server, or any other document repository.</p>
<p id="p-0069" num="0068">A policy enforcer can be installed on a workstation <b>103</b> to provide document access and application usage control at the point-of-use. The policies can be stored locally on the workstation. Point-of-use control prevents unauthorized access to documents anywhere on the network and prevents unauthorized application usage and operations on application data or usage of application functions. One may think of point-of-use access control as building a firewall around a user.</p>
<p id="p-0070" num="0069">Similarly, a policy enforcer can be installed on a document server <b>105</b> (e.g., a file server or e-mail server) to provide protection to the documents on (accessible by or managed by) the document server. Server-based protection prevents unauthorized access to documents in a particular repository (or on a server) from any computer on a network, in other words, building a firewall around a server. Besides, an application server policy enforcer such as Microsoft Exchange policy enforcer can also control usage of application data and application functions (e.g., copying an e-mail message, deleting a contact or modifying a calendar entry).</p>
<p id="p-0071" num="0070">The control and protection functions can be achieved either through one policy or multiple policies defined centrally. The policy server <b>101</b> is an intelligent system that has the ability to decide if a single, multiple policies, or a subset of policies are applicable to each policy enforcer. At least a subset of all policies defined is distributed to each policy enforcer.</p>
<p id="p-0072" num="0071">Controlling document access can have different meanings when operating on different document types. For example, if a document type is a file, then document accesses are file accesses that includes: opening/reading a file, reading a file when connected using VPN, opening a file at a particular time of a day, writing/saving a file, deleting a file, reading a file's permission (or security setting), changing a file's permission, reading a file's attribute, or changing a file's attribute. Another example is when a document type is an e-mail message on a mail server then document access refers to application program internal operations that can include: opening an e-mail, deleting an e-mail, reading an e-mail's attribute, or changing an e-mail's attribute.</p>
<p id="p-0073" num="0072">Controlling application usage can have different meanings when applied to different applications. For example, if an application is a word processor, then application usage includes: creating a file, opening a file, saving a file, saving a document as a different file, exporting or converting a file to a different format, printing a file, sending a file to a recipient via e-mail, publishing a file in a shared folder, cutting data to a clipboard, pasting data from a clipboard, performing a drag-and-drop operation, adding a macro or a script to a document, or modifying a macro or a script in a document. In another example, if an application is a mail client, then application usage includes: creating an e-mail, opening an e-mail, copying an e-mail, moving an e-mail, archiving an e-mail, saving an e-mail to a file, deleting an e-mail, sending an e-mail, forwarding an e-mail, attaching a file to an e-mail, cutting data to a clipboard, pasting data from a clipboard, performing a drag-and-drop operation, or changing e-mail attributes.</p>
<p id="p-0074" num="0073">In yet another example, if an application is an enterprise resource planning (ERP) application, application usage includes: creating a quote, converting a quote to an order, viewing customer information, viewing an order, viewing product pricing and discounts, viewing sales data, viewing reports, or viewing employee information.</p>
<p id="p-0075" num="0074">To control document access and application usage, a policy enforcer may control user interface elements such as visual and input elements of an application program, commands and functionalities of an application program, and information presented to a user. For example, a visual element of an application program includes any of: a menu, a menu item, a button, a list box, a list item, a check box, a tab, a scroll bar, a slider, an icon, an image or a hypertext link. An input element of an application program includes any of: a key event handler, a mouse event handler, or any event handler associated with a visual element.</p>
<p id="p-0076" num="0075">An application program may support a large number of commands. A command can be invoked by selecting a menu item, pressing a button (shown on a screen), pressing one or more keys, or pressing one or more mouse buttons. A command can also be invoked by a macro or script, or invoked by a code module that calls a function (or method) in an application program interface (API) library. For example, a command can perform a task such as opening a file, sending an e-mail message, editing a cell in a spreadsheet, editing a macro, changing text format, or more.</p>
<p id="p-0077" num="0076">A function of an application program generally maps to a function or method in a high level programming language. For example, a function in an application program may correspond to a command such as saving a file, sending an e-mail message, or editing a cell formula in a spreadsheet. A function may also represent an internal application program operation such as a call to operating system library function fopen( ).</p>
<p id="p-0078" num="0077">If information to be displayed contains personal information such as a social security number, personal identification number (PIN) or account balance, then controlling application usage includes: filtering out or obscuring the personal information.</p>
<p id="p-0079" num="0078">If information to be displayed contains actionable data or objects such as a button, a hypertext link, or a clickable image, then controlling application usage includes: disabling the button, removing the hypertext link, or removing the link associated with the image.</p>
<p id="p-0080" num="0079">In addition to providing control or protection, a policy enforcer can also perform obligation and remediation operations (described below) as a result of a document access or application usage attempt (whether successful or not) as dictated by the active policy, or policies.</p>
<p id="p-0081" num="0080">Different levels of control and protection are achieved by distributing policy enforcers to workstations and/or document servers. For example, by using workstation policy enforcers only, such as on workstation <b>103</b>, one can achieve document access and application usage control that covers access to documents on local disks <b>104</b> (i.e., local files), access to documents on a protected document server <b>105</b> (i.e., protected by a document server policy enforcer), access to documents on an unprotected document server <b>106</b>, and application program functions for applications running on the workstation <b>103</b>.</p>
<p id="p-0082" num="0081">When only document server policy enforcers are used, such as on document server <b>105</b>, one can achieve document access protection and application usage control for documents on protected servers when the documents are accessed from workstations with a workstation policy enforcer installed <b>103</b> and workstations without a workstation policy enforcer installed <b>107</b>.</p>
<p id="p-0083" num="0082">When both workstation policy enforcers and document server policy enforcers are installed, the combined benefit of both installations as described above is achieved.</p>
<p id="p-0084" num="0083">The policy server <b>101</b> allows policies to be centrally managed and automatically distributed and updated to policy enforcers. Distribution is achieved through pushing policies to policy enforcers and/or pulling policies from the policy server <b>101</b> by policy enforcers. Policies are not tied to (or stored with) documents. The policies are evaluated when an action is taken by a user (or an application) to access a document or operate on application data. The action is intercepted and relevant policies are applied before the action is allowed to be carried out.</p>
<p id="p-0085" num="0084">The policies that a policy enforcer can handle can be defined based on the type of action, user, user group, user attribute (e.g., department, role, project or status (e.g., full-time, part-time, or consultant), user's business function), host, group of computers (e.g., &#x201c;finance department computers&#x201d;), type of computer (e.g., laptop or smart phone), application program (e.g., Word or Outlook), type of application program (e.g., word processor or spreadsheet), application module (e.g., SAP CRM module or Oracle Finance accounting module), location (e.g., New York office vs. London office), connectivity (including access mechanism and bandwidth; e.g., LAN, WLAN, VPN, Bluetooth, Internet, DSL, ISDN, dialup, Remote Desktop Protocol (RDP), Virtual Network Computing (VNC) protocol, latency, secure point-to-point, 56 k, broadband, 100 Mb and 1 Gb), time of day, day of the week, file path, file name, document size, document timestamp, document owner, document properties, document type (e.g., file and e-mail), document format (e.g., XLS, PDF, or HTML format), document identifier, document classification (e.g., a confidential document or a financial report), document characteristics (e.g., a document contains a watermark), document content (e.g., a document contains a social security number), database query, database query result set, database query result set properties, metadata, and more. Not all of these parameters are required. A policy enforcer can interpret almost any combination.</p>
<p id="p-0086" num="0085">2.2 Policy Creation and Management</p>
<p id="p-0087" num="0086">Referring to <figref idref="DRAWINGS">FIG. 2</figref>, minimal embodiments are shown that utilize a number of workstations <b>204</b> each with policy enforcers <b>205</b> installed or a number of document servers <b>206</b> each with policy enforcers installed <b>207</b>. The authoring and administration module <b>201</b> is a client application running on a workstation. It provides the user interface to create, test, publish, modify, delete, and deploy policies, manage system configuration, monitor system health, and view document access activity, application usage activity and policy enforcement activity. The authoring and administration module <b>201</b> is connected to the control center <b>202</b> which is responsible for policy life cycle management, system management, log data management and maintaining a central policy and log repository <b>203</b>.</p>
<p id="p-0088" num="0087">The policy builder <b>208</b> acts as an interface to the policy server <b>211</b> and makes it simple for the policy author and policy administrator to create, test, publish, and deploy policy rule statements. The main tasks that can be performed with policy builder <b>208</b> are policy authoring and policy administration. Policy authoring functions include creating a policy, modifying a policy, testing a policy, publishing a policy (i.e., making a new policy available for deployment and modifications on an existing policy available for redeployment), and retiring a policy. Policy administration functions include maintaining policy related configurations and deploying policies to policy enforcers.</p>
<p id="p-0089" num="0088">The management console <b>209</b> acts as an interface to management server <b>212</b> and is a user interface for managing system configuration and monitoring the health of the system.</p>
<p id="p-0090" num="0089">The policy server <b>211</b> transfers policies to the policy enforcers <b>205</b>, <b>207</b> through a push and/or pull mechanism. The policy server <b>211</b> determines what policies are to be delivered to the policy enforcers <b>205</b>, <b>207</b> and when policies are to be updated on the policy enforcers <b>205</b>, <b>207</b>. The policy enforcers <b>205</b>, <b>207</b> report status logs to the log server <b>213</b> such as what documents were accessed or application program functions were used and by whom (described below) and what enforcement actions have been taken.</p>
<p id="p-0091" num="0090">The reporting module <b>210</b> is a user interface element that interacts with the log server <b>213</b> to provide report generation and data analysis functions. The policy author and policy administrator can use the reporting module to view document access activity, application usage activity and policy enforcement activity and investigate cases of potential information misuse or effectiveness of a policy.</p>
<p id="p-0092" num="0091">Referring to <figref idref="DRAWINGS">FIG. 3</figref>, a more complex embodiment is shown where a number of workstations <b>204</b> and document servers <b>206</b> have policy enforcers <b>205</b>, <b>207</b> installed and coexist within the system. The interaction between the policy builder <b>208</b>, the policy server <b>211</b>, and the policy repository <b>303</b> have been described above.</p>
<p id="p-0093" num="0092">The reporting and analysis module <b>307</b> acts as a user interface to the intelligence server <b>308</b> for displaying reports and results from data analysis functions. The reporting module <b>210</b> allows the policy author and policy administrator to query and view document access activity, application usage activity and policy enforcement activity. The analysis tool <b>312</b> interacts with the intelligence server <b>308</b> to perform data analysis which includes event correlation and trend analysis. The policy author and policy administrator can use the capabilities offered by the reporting and analysis module <b>307</b> to analyze effectiveness of a policy, document access and application usage activity on a document or on a server, policy enforcement activity, and investigate cases of potential information misuse. The intelligence server <b>308</b> provides three functions: log services, integration with external data sources, and data analysis.</p>
<p id="p-0094" num="0093">The log and intelligence repository <b>309</b> is used by the intelligence server <b>308</b> to store log data coming from the policy enforcers <b>205</b>, <b>207</b>, data from external sources that support event correlation, and data generated by the data analysis services. The log and intelligence repository <b>309</b> is normally implemented as one or more relational databases or sets of log files.</p>
<p id="p-0095" num="0094">The Light Weight Directory Access Protocol (LDAP) server <b>305</b> and LDAP repository <b>306</b> provide user, user group and host information to the policy server <b>211</b> to assist in composing policy and assembling policy subsets and provide information to intelligence server <b>308</b> to support report generation and data analysis. Note that LDAP servers are normally deployed in organizations to provide authentication service and are not critical for the operation of the embodiment.</p>
<p id="p-0096" num="0095">A management server <b>212</b> is responsible for system configuration (not policy configuration), system health monitoring, and system control. It provides centralized management of all the components in the system. The management server <b>212</b> provides a single location to view system status, modify system configurations, and manage policy author and policy administrator user accounts. The management console <b>209</b> is a user interface for system management via the management server <b>212</b>.</p>
<p id="p-0097" num="0096">The management server <b>212</b> provides services such as: monitoring all other system components including policy servers, intelligence servers, communication servers and policy enforcers; displaying the status of each component; registering new policy enforcers; maintaining a registry of all policy enforcers; managing the configuration for all servers; and managing configuration profiles for policy enforcers.</p>
<p id="p-0098" num="0097">The communication server <b>304</b> is responsible for directing traffic among the policy server <b>211</b>, intelligence server <b>308</b>, management server <b>212</b> and all policy enforcers <b>205</b>, <b>207</b>. The communication server <b>304</b> brokers communications between policy enforcers <b>205</b>, <b>207</b>, and other servers, including distribution of configuration profiles, policy deployments, and the transfer of log data to the intelligence server <b>308</b>. The communication server <b>304</b> provides a scalable communication service such that the system can support a large number of workstations <b>204</b> and document servers <b>206</b>.</p>
<p id="p-0099" num="0098">2.21 Policy Server</p>
<p id="p-0100" num="0099">Referring to <figref idref="DRAWINGS">FIG. 4</figref>, the internal components of the policy server <b>401</b> are shown. The policy server <b>401</b> is responsible for policy management, including policy authoring, life cycle, and deployment. The policy server <b>401</b> maintains a policy repository <b>203</b>, <b>303</b> for storing policies. A system typically has at least one policy server <b>401</b> and can contain multiple policy servers in order to support a large number of policy builders <b>208</b> and policy enforcers <b>205</b>, <b>207</b>. The policy server <b>401</b> provides the following functions: policy authoring; policy access control; policy life cycle management; policy management; and policy deployment.</p>
<p id="p-0101" num="0100">Policy authors and policy administrators access the policy server <b>401</b> through the policy builder application <b>208</b> which provides a graphical user interface to author policies and manage the policy life cycle from creation through retirement. Authored policies are stored in a central policy repository <b>203</b>, <b>303</b>.</p>
<p id="p-0102" num="0101">The policy life cycle module <b>402</b> provides policy life cycle support that covers policy development, deployment and management. For example, policy development uses information about users, user groups, roles of users, user's business functions, actions, hosts, applications, and document resources being supported to compose or update a policy. An environment is also provided to support editing (composition), staging (testing) and deployment of policies.</p>
<p id="p-0103" num="0102">The policy engine <b>403</b> is responsible for policy evaluation (or execution). It helps validate a policy and it is part of the staging environment. Additionally, the policy engine <b>403</b> can be set up to support proxy policy evaluation. A proxy policy evaluation request may be generated by a policy enforcer under two situations:</p>
<p id="p-0104" num="0103">(1) A workstation policy enforcer <b>205</b> (or document server policy enforcer <b>207</b>) does not have a policy engine. A policy engine proxy in the policy enforcer relays policy evaluation requests from policy enforcers to a remote policy engine <b>403</b> in a policy server <b>401</b> or policy decision server (dedicated to make policy decisions) that offers policy evaluation services.</p>
<p id="p-0105" num="0104">(2) A workstation policy enforcer <b>205</b> (or document server policy enforcer <b>207</b>) does have a policy engine, but the local policy engine decides that the local policy subset is not sufficient to make a policy decision and should delegate policy evaluation to a policy engine that has access to a wider policy scope, or access to relevant data. A proxy policy evaluation request is made by a local policy engine to a remote policy engine <b>403</b> in the policy server <b>401</b> or a policy decision server to complete the policy evaluation.</p>
<p id="p-0106" num="0105">A policy optimizer <b>404</b> is responsible for optimizing the run-time performance of policies. It can be used to optimize policies prior to deploying to a policy enforcer <b>205</b>, <b>207</b>. The policy optimizer <b>404</b> is not required for a minimal system to operate.</p>
<p id="p-0107" num="0106">The policy deployment module <b>405</b> handles deployment of policies to policy enforcers <b>205</b>, <b>207</b>, policy decision servers (not shown) and the location where a policy engine resides. During policy deployment, the policy deployment module may invoke a policy optimizer <b>404</b> to optimize a set of polices (the set of policies can be a full set or subset of policies on the policy server). The deployment function may be initiated by a policy server (e.g., via a push operation) or a policy enforcer or target (e.g., via a pull operation). In either operational mode, a full set or a subset of policies is transmitted to a target.</p>
<p id="p-0108" num="0107">In a policy system architecture that distributes full sets of policies to all policy enforcers, the policy deployment module <b>405</b> takes a complete set of policies and sends it to a policy enforcer <b>205</b>, <b>207</b>.</p>
<p id="p-0109" num="0108">In a policy system architecture that organizes policies based on the policy enforcer <b>205</b>, <b>207</b> that the policies target, the policy deployment module <b>405</b> receives or locates a policy enforcer's information and delivers the set of policies defined for that policy enforcer <b>205</b>, <b>207</b>.</p>
<p id="p-0110" num="0109">The deployment module can deploy policies in different forms depending on the capability of a policy engine at a target. For example, the set of policies that are transmitted from a policy server to a policy enforcer (or target) may comprise of combinations of the following forms:</p>
<p id="p-0111" num="0110">(1) ASCII text.</p>
<p id="p-0112" num="0111">(2) Binary (e.g., code or data).</p>
<p id="p-0113" num="0112">(3) XML (e.g., in Extensible Access Control Markup Language&#x2014;XACML format).</p>
<p id="p-0114" num="0113">(4) Translated and/or compiled form including policies represented in binary form, polices translated into tables (in binary or text form) or policies translated into programming language (such as XML, Java, C#, Perl or Python in source code format or compiled binaries).</p>
<p id="p-0115" num="0114">2.22 Intelligence Server</p>
<p id="p-0116" num="0115">Referring to <figref idref="DRAWINGS">FIG. 5</figref>, the internal components of the intelligence server <b>501</b> are shown. The intelligence server <b>501</b> provides summary, trend, and detailed analysis of document access activity, application usage activity and policy enforcement activity. The intelligence server is accessed using the reporting and analysis <b>307</b> software tool that allows business users to create graphical reports to demonstrate compliance, understand application usage, and investigate cases of information misuse. The intelligence server <b>501</b> analyzes comprehensive log data captured in a centralized repository, thereby providing insight and accountability for information handling. Policy authors can use data captured by the intelligence server <b>501</b> to analyze the effectiveness of a policy. Policy enforcers can utilize the log data and information derived from the log data to support policy evaluation.</p>
<p id="p-0117" num="0116">The log services module <b>502</b> is responsible for collecting and managing log data coming from policy enforcers <b>205</b>, <b>207</b>. Log data is normally generated or collected by a policy enforcer or explicitly by a policy via a log handler (an obligation handler) in a policy enforcer <b>205</b>, <b>207</b>.</p>
<p id="p-0118" num="0117">The integration services module <b>503</b> is responsible for capturing events that occur outside of the system and providing access to an external data sources when needed. It may collect data produced by other application programs outside of the system or import data stored outside the system into a log and intelligence repository <b>309</b>. The integration services module can also export log and analysis data to application program or repository outside of the system. It allows the data analysis module <b>505</b> to correlate document access activities, application usage activities and policy enforcement activities with events that occur externally to the system.</p>
<p id="p-0119" num="0118">The reporting module <b>504</b> is responsible for providing support to the reporting and analysis tool <b>307</b>. Its main function is report generation.</p>
<p id="p-0120" num="0119">The data analysis module <b>505</b> provides data analysis functions such as event (or log) correlation. For example, one of the functions of the event correlation engine in the data analysis module <b>505</b> is to correlate separate events that occur within a policy enforcer <b>205</b>, <b>207</b> or across multiple policy enforcers <b>205</b>, <b>207</b> to identify trends, repetitions, frauds, hacking attempts and other attacks, bad policy designs, and bad practices by users. The data analysis module <b>505</b> can provide several types of analyses:</p>
<p id="p-0121" num="0120">Summary Analysis&#x2014;document access activity, application usage activity or policy enforcement activity summarized by user, document, host, policy, location, time (e.g., day or week), organization, and more.</p>
<p id="p-0122" num="0121">Trend Analysis&#x2014;document access activity, application usage activity or policy enforcement activity for a given period of time.</p>
<p id="p-0123" num="0122">Detailed Event Forensics&#x2014;detailed listing of activities for specific user actions or policy enforcement actions. Detailed reports showing event-level details for document access activity, application usage activity or policy enforcement activity. Compliance officers can use event forensics to investigate specific incidents of information misuse.</p>
<p id="p-0124" num="0123">2.3 Policy Enforcers</p>
<p id="p-0125" num="0124">A policy enforcer provides three key functions: interception (or detection), decision, and enforcement.</p>
<p id="p-0126" num="0125">Interception refers to a function of detecting certain operations (e.g., carried out through altering normal code execution that implements the operation) in an existing application program or operating system to allow the operations to be examined by a policy enforcer before the operation is carried out. Alternatively, interception may refer to a function in an application program or operating system (e.g., the logic is implemented at development time) where the function affects examination of an operation by a policy enforcer before the operation is carried out. For example, the function in an application program is a procedure call to a policy enforcer application program interface (API) library.</p>
<p id="p-0127" num="0126">Decision refers to a process of evaluating zero or more policies (or rules) relevant to an intercepted (or detected) operation and determine if the operation should be carried out, and if additional action(s) need to be performed.</p>
<p id="p-0128" num="0127">The enforcement function is responsible for implementing the outcome (sometimes called a policy effect) produced by the decision function. For example, if a policy effect is DENY, an operation is blocked.</p>
<p id="p-0129" num="0128">Interception and enforcement are normally functions of a Policy Enforcement Point (PEP) and decision is a function of a policy engine (described below). Both the PEP and policy engine are components of a policy enforcer. In addition, a policy enforcer can carry out audit (or log) functions, and obligation and remediation tasks (described below).</p>
<p id="p-0130" num="0129">There can be at least two types of policy enforcers that can exist in a system to provide a multi-layer approach to information control and compliance enforcement, such as: document server policy enforcers and workstation policy enforcers. Document server policy enforcers are designed to control access to and usage of documents on document servers. While workstation policy enforcers are designed to control end-user access to and usage of documents on workstations and document servers and application usage by end-users at a workstation. Combining both types of policy enforcers in an embodiment provides control over document accesses from a workstation controlled by a policy enforcer, from a workstation not controlled by a policy enforcer, to a document server controlled by a policy enforcer, to a document server not controlled by a policy enforcer, and control the usage of information by organization personnel.</p>
<p id="p-0131" num="0130">Policy enforcers are responsible for both enforcing policy and collecting audit information (document access activities, application usage activities and policy enforcement activities) for their respective host systems. The policy enforcers intercept end-user or system events (or actions) or application usage (e.g., invoking a function in an application program and operating on data in an application) that may be subject to document access or application usage control policies. The context of each of these events is provided by a PEP to a policy engine that is responsible for evaluating policies relevant to the context of an event. The consequence determined by a policy evaluation is communicated back to the PEP which contains application-specific or system-specific logic to carry out the enforcement function. If the policy evaluation results in the requested event being denied, the PEP typically terminates the request and returns an error status that indicates access is denied or the requested action cannot be performed.</p>
<p id="p-0132" num="0131">Since policy enforcers have access to information regarding document access and application usage, such activity information (or audit information) can be logged by a policy enforcer to a local or central database. The activity data collected by one or more policy enforcers can be correlated, analyzed, and applied to many applications including: 1) auditing or compliance; 2) investigation; 3) detecting information fraud; 4) detecting information misuse; 5) detecting anomalies; 6) understanding and optimizing resource utilization; and 7) understanding and improving workforce productivity.</p>
<p id="p-0133" num="0132">The data that is collected by a policy enforcer typically includes a combination of: event(s) (or action(s)), attributes associated with the event, resources associated with the event, identification of the application in which the event occurred (or operation being invoked), under which user account the activity is being carried out, the host computer this event occurred on, and so forth.</p>
<p id="p-0134" num="0133">Policy Enforcers for Document Servers</p>
<p id="p-0135" num="0134">Document server policy enforcers are server (e.g., a file server) or server application program (e.g., a mail server) specific policy enforcers. For example, a file server policy enforcer (discussed below) is designed to protect file resources on (or managed by) the file server. In another example, an e-mail server policy enforcer, such as a Microsoft Exchange Server policy enforcer, controls access to and usage of e-mail and other Microsoft Exchange Server application objects on the server. In yet another example, a Document Management System (DMS) policy enforcer controls access to and usage of documents stored in a DMS repository and other DMS-specific application objects.</p>
<p id="p-0136" num="0135">A document server policy enforcer is installed on a server computer (e.g., a file server) or on the computer where a server application program (e.g., a mail server) is installed. Alternatively, some policy enforcer functions including the policy engine can be distributed to a separate computer. The interception function carried out by a PEP is server and server application program specific and can occur inside a server application program or at the operating system level.</p>
<p id="p-0137" num="0136">Policy Enforcers for File Servers</p>
<p id="p-0138" num="0137">A file server policy enforcer is a type of document server policy enforcer. The file server policy enforcer controls access to and usage of (e.g., copy and print) files on file servers. It is installed on a file server machine and enforces document access and/or application usage policies as organization personnel interact with the file server. Document access policies control whether users or application programs are allowed to access files and folders on (or managed by) a file server including: create, read, write, delete, copy, move, and rename files; create, open, delete, and rename folders; access and change file or folder attributes; and create, access, change, rename, and delete links or shortcuts associate with files or folders. The policy enforcers also log accesses to files and folders, and information about each enforcement event.</p>
<p id="p-0139" num="0138">The file server policy enforcer monitors network requests for files and also monitors file system requests. This architecture allows the policy enforcer to evaluate policies based on the greatest amount of context for each request, since it can use both network-level and file system-level information. Certain file access operations can also be intercepted inside a server application program (e.g., a NFS server) and at the operating system level.</p>
<p id="p-0140" num="0139">In a specific file system implementation, both a file server policy enforcer and a workstation policy enforcer (described below) are typically needed to provide thorough protection to the resources managed by the file system. For example, Andrew File System (AFS) uses a client application program to cache file system objects on a workstation. With only an AFS server policy enforcer, file system objects cached on a workstation are not protected. In that case, a workstation policy enforcer can be combined with an AFS server policy enforcer to provide complete file system resource protection.</p>
<p id="p-0141" num="0140">The file server policy enforcer is self-monitoring and self-protecting. When it is running, no user or process can modify, delete, or access the policy enforcer system files including the binaries, configuration files, log files, and policy files. If the policy enforcer is stopped unexpectedly, it is automatically restarted.</p>
<p id="p-0142" num="0141">Policy enforcers can be installed on some or all file servers within an enterprise, depending on which file servers contain documents that the organization wants to enforce document access and/or application usage policies on. A file server policy enforcer affects only the file server where it is installed. Alternatively, the policy engine in a policy enforcer can run on a computer different from the server being managed.</p>
<p id="p-0143" num="0142">The file server policy enforcer is responsible for controlling accesses to and usage of files stored on (or managed by) a file server. It can control accesses to and usage of files on a file server by workstations that are controlled or not controlled by policy enforcers.</p>
<p id="p-0144" num="0143">Policy Enforcers for Workstations</p>
<p id="p-0145" num="0144">The workstation policy enforcer controls end-user usage of documents on workstations. The policy enforcer is installed on a workstation and controls access to and usage of documents, whether those documents are stored on the workstation or remotely. The policy enforcer detects (or intercept) document access and application usage activity for each application running on the workstation. Detection can occur inside an application program or at the operating system level.</p>
<p id="p-0146" num="0145">Usage policies control whether users of that workstation are allowed to perform various actions such as sending, printing, or copying documents. Usage policies can also apply to application data to control cut-and-paste, drag-and-drop, allowing only a particular group of users to modify a particular spreadsheet formula, restricting edits to macros or scripts by a user, restricting edits to a specific region in a document by a user, restricting certain application functions based on the type of connectivity (such as VPN), restricting a particular type of edit to a document based on time, and restricting screen capture functions to control any misappropriation of data in a document.</p>
<p id="p-0147" num="0146">Policy enforcers also collect information about each enforcement event for an activity journal or report. The policy enforcer is self-monitoring and self-protecting. When it is running, no user or process can modify, delete, or access the policy enforcer's system files, including the binaries, configuration files, log files, and policy files.</p>
<p id="p-0148" num="0147">Policy enforcers can be installed on any number of workstations within an enterprise. Each policy enforcer affects only the workstation where it is installed. Policy enforcers may be embedded into a computing device like PDA or smart phone. The policy enforcer can also be installed on a terminal server (e.g., Microsoft Terminal Server or Citrix MetaFrame Server) to control document access and application usage in each client session.</p>
<p id="p-0149" num="0148">The workstation policy enforcer is responsible for document access and application usage control at the point-of-use. It has the ability to control application usage and access to documents stored locally on the workstation and remotely on document servers. The document servers may or may not be controlled by policy enforcers. The workstation policy enforcer can also control usage of information at a workstation.</p>
<p id="p-0150" num="0149">Information Exchange</p>
<p id="p-0151" num="0150">Policy enforcers have the ability to interact with one another and exchange information in order to perform document access and application usage control at their local levels. Information exchange refers to a first policy enforcer obtaining or collecting information gathered by a second policy enforcer to assist the first policy enforcer in performing a policy evaluation.</p>
<p id="p-0152" num="0151">Collaborative policy evaluation through information exchange is a way for a policy enforcer to expand the pool of information available to it beyond its execution environment when it evaluates policies. Without the ability to exchange information with a second policy enforcer (or multiple policy enforcers), a first policy enforcer can only evaluate policies based on information available at the first policy enforcer's execution environment. Normally, the information at the execution environment is information collected at the time of interception, configuration parameters, and external information within the immediate operating environment (i.e., information obtainable from the operating system and other application programs).</p>
<p id="p-0153" num="0152">For example, a server policy enforcer typically has no visibility to application usage information that is available at a client computer. The server policy enforcer may request the client policy enforcer to provide specific application usage information so the server policy enforcer can make its decision using that information.</p>
<p id="p-0154" num="0153">A policy enforcer may have to implement a policy based on information available at another policy enforcer that is normally not available to the policy enforcer itself. With the information exchange capability, a policy enforcer can evaluate policies based on information available at other policy enforcers.</p>
<p id="p-0155" num="0154">A policy enforcer's capabilities can be expanded significantly by working with other policy enforcers that can provide the information that the policy enforcer needs to complete a particular policy evaluation.</p>
<p id="p-0156" num="0155">The following is a more detailed example illustrating how a file server policy enforcer implements point-of-use policies.</p>
<p id="p-0157" num="0156">(1) A file server policy enforcer intercepts a file open operation on a file on the file server:
<ul id="ul0001" list-style="none">
    <li id="ul0001-0001" num="0000">
    <ul id="ul0002" list-style="none">
        <li id="ul0002-0001" num="0157">a) PROBLEM: The file server policy enforcer normally sees only low level file operations such as open, read, and write. It cannot derive from the intercepted data what a user intends to do with the file. In this case, the file server policy enforcer intercepts a network file operation. The file server policy enforcer identifies a request to open a file but has no idea whether a user opened the file for viewing, printing, editing, copying, or archiving.</li>
        <li id="ul0002-0002" num="0158">b) SOLUTION A: During policy evaluation, if a user's intended action is communicated to the file server policy enforcer, the file server policy enforcer can process policies specifying point-of-use actions such as COPY and PRINT. The ability to enforce point-of-use action-specific policies enables a document server policy enforcer to guarantee universal protection of its managed resources.</li>
        <li id="ul0002-0003" num="0159">c) SOLUTION B: A point-of-use policy enforcer provides a user's intended action to the file server policy enforcer prior to policy evaluation at the file server. With the information provided, the file server policy enforcer can evaluate policies that specify a point-of-use action such as COPY or PRINT. If a point-of-use action is not available at the file server during policy evaluation (e.g., the point-of-use has no policy enforcer), the file server policy enforcer may take a default action such as blocking the file open operation or evaluating a different set of policies to determine a policy effect.</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0158" num="0160">For example, a document server may enforce an application usage policy such as &#x201c;no printing of highly sensitive documents&#x201d; by using a policy executed on the document server. The document server policy enforcer, during policy evaluation, can obtain application usage information from the workstation policy enforcer that initiated the operation that the document server intercepted. Alternatively, application usage information can be attached to a request that is intercepted by the document server policy enforcer so that application usage information is available to the document server policy enforcer during policy evaluation. Note that application usage information is normally unavailable to a document server policy enforcer because it is typically physically separate from the point-of-use. The application usage information is available only at the point-of-use.</p>
<p id="p-0159" num="0161">In one implementation of information exchange, a document server policy enforcer requests application usage information from another policy enforcer located at the workstation that initiated the operation that was intercepted by the document server policy enforcer. In the case where a policy enforcer is installed on the workstation, the workstation policy enforcer responds with the application usage information related to the operation. In the case where a policy enforcer is not installed on the workstation or the document server policy enforcer fails to communicate with a policy enforcer on the workstation, policy evaluation at the document server policy enforcer may produce one of: a default effect, evaluating additional policy or policies, or evaluating a different set of policies.</p>
<p id="p-0160" num="0162">In an implementation of information exchange, a policy enforcer stores information regarding whether another computer has a policy enforcer installed.</p>
<p id="p-0161" num="0163">In another implementation of information exchange, a policy enforcer queries a server to determine if another computer has a policy enforcer installed.</p>
<p id="p-0162" num="0164">In yet another implementation of information exchange, a point-of-use policy enforcer attaches application usage information associated with an operation to one or more messages (or network packets) destined to a document server that implements the operation. For example, the message can be a network protocol message (e.g., TCP or UDP).</p>
<p id="p-0163" num="0165">In another example, the message is a network file share protocol message (e.g., CIFS or NFS). In yet another example, the message is an application protocol message or is encapsulated in an application programming interface (e.g., HTTP, SOAP, Microsoft Windows Messaging API (MAPI) or Java Messaging Service (JMS)). When a document server policy enforcer detects the existence of the application usage information attached to the one or more messages, it extracts the application usage information and applies it to a policy evaluation when appropriate.</p>
<p id="p-0164" num="0166">The application usage information can be:</p>
<p id="p-0165" num="0167">(1) attached to a message as one or more message headers;</p>
<p id="p-0166" num="0168">(2) attached to the end of a message;</p>
<p id="p-0167" num="0169">(3) stored in one or more custom fields (or custom record or custom entry) in a message; or</p>
<p id="p-0168" num="0170">(4) stored in the data as one or more comments in a message.</p>
<p id="p-0169" num="0171">Transfer of Control</p>
<p id="p-0170" num="0172">When a user copies a document from a document server to a location outside the document server, the source document server loses control of the &#x201c;copy&#x201d; of a document. To avoid losing control of important document content after a document is copied a document server policy can block all copy operations unless a policy enforcer at the destination can be detected. What this means is that a document server allows the copying of a controlled document only if it is sure the control can be maintained after the document is copied to another location. A document server policy enforcer can further require that a destination policy enforcer provide certain types of protection and enforce certain set(s) and/or version of policies before the document server policy enforcer transfers control of a document.</p>
<p id="p-0171" num="0173">Transfer of control refers to a policy enforcer in charge of protecting certain information does not relinquish control of the information (or a copy of it) until the policy enforcer is sure that there is a policy enforcer at the receiving end and that the receiving policy enforcer has sufficient capabilities to continue to protect such information.</p>
<p id="p-0172" num="0174">To implement transfer of control policies, the following should be in place:</p>
<p id="p-0173" num="0175">(1) One or more directives or expressions in a policy to indicate that a policy enforcer will need to successfully implement the directives or expressions to satisfy the policy condition.</p>
<p id="p-0174" num="0176">(2) At least one policy enforcer that is capable of implementing such a transfer of control directives.</p>
<p id="p-0175" num="0177">(3) Facilities for policy enforcers to communicate so that a policy enforcer can detect the existence of another policy enforcer and exchange information when needed.</p>
<p id="p-0176" num="0178">In order to implement such policy, a document server policy enforcer must be able to detect if a policy enforcer is running on the destination workstation (or document server). Note that the destination of a copy operation does not need to be the workstation that issues the command, it can be another computer including a workstation and document server. Communication between a policy enforcer at the source and a policy enforcer at the destination can be direct or indirect through a communication server.</p>
<p id="p-0177" num="0179">For example, a user attempts to copy a sensitive document from his/her company's protected server to a laptop computer. Without a collaborative policy enforcer on the laptop computer, a document server policy enforcer that implements a transfer of control policy will have to block all copy operations to the laptop computer under all circumstances.</p>
<p id="p-0178" num="0180">One approach used by document management systems allows any user who has access to a protected document to copy (or checkout) a document knowing that the system will lose control of the information once the document is checked out. It is important to note that at the point that a document is released from a document management system, document control no longer exists.</p>
<p id="p-0179" num="0181">In this example, the server policy enforcer will not allow a file to be copied to a laptop unless there is a workstation policy enforcer running on the laptop. In a more elaborate implementation, the server policy enforcer may ask the workstation policy enforcer for its capability list and policy version number to make sure the workstation policy enforcer has the right capabilities to protect the information.</p>
<p id="p-0180" num="0182">A similar example can be applied to the viewing of documents. For example, once a document is opened in a word processing software on a laptop, a user may be able to save it to another file, cut-and-paste part of the document, or make a screen capture of the document. A policy enforcer can disable such functions if they are not desirable.</p>
<p id="p-0181" num="0183">Delegation</p>
<p id="p-0182" num="0184">Delegation can occur in three ways:</p>
<p id="p-0183" num="0185">(1) A decision point delegates policy evaluation to one or more decision points at different locations.</p>
<p id="p-0184" num="0186">(2) A decision point instructs one or more policy enforcers at other locations to carry out a consequence produced by its current policy evaluation.</p>
<p id="p-0185" num="0187">(3) A decision point posts an event to one or more decision points that causes a policy evaluation at the target locations.</p>
<p id="p-0186" num="0188">The decision point is a location where a policy engine is installed. For example, a policy engine can be located in a policy enforcer, a policy server, or a policy decision server (dedicated to making policy decisions). The delegation of a policy evaluation is initiated from a policy engine and the target may be the same policy engine (i.e., local delegation) or another policy engine (i.e., remote delegation). However, the delegation of a consequence application is carried out by a policy enforcer.</p>
<p id="p-0187" num="0189">There are situations where the information required to support the evaluation of a certain policy is not available to a decision point at a particular location or a consequence produced by a policy evaluation needs to be carried out at one or more locations different from where the decision point is located.</p>
<p id="p-0188" num="0190">For example, a decision point can delegate a policy evaluation to a decision point that has access to the proper information required to complete the policy evaluation so it can address the information availability issue. Note that in some situations, information availability issues can also be addressed using the information exchange technique described above.</p>
<p id="p-0189" num="0191">When a policy consequence needs to be carried out at different location(s), it can be handled using the policy consequence delegation technique (2). Alternatively, the post event technique (3) can be used to implement the delegation of a policy consequence.</p>
<p id="p-0190" num="0192">Delegation is a way for one decision point to ask another decision point to execute a policy on its behalf&#x2014;one policy engine asks another policy engine to execute a set of policies. A policy engine does not need to be running inside a policy enforcer. It may be one of the policy engines in a policy decision server.</p>
<p id="p-0191" num="0193">(1) Policy evaluation: In the case where information that is available to other decision point(s) is required to complete a policy evaluation, there are two approaches that can be used: 1) use the information exchange technique to obtain the needed information to complete the policy evaluation; or 2) delegate the policy evaluation (complete or partial) to a decision point that has access to the information needed to complete the policy evaluation.</p>
<p id="p-0192" num="0194">(2) Consequence application: In the case that a consequence of a policy needs to be applied at one or more locations different from where the decision point is located, a decision point can complete the evaluation of a policy and delegate the consequence application to one or more policy enforcers. Delegation of a consequence application can be made synchronously (waiting from the helper policy enforcer to complete the consequence application) or asynchronously.</p>
<p id="p-0193" num="0195">(3) Posting an event: A decision point can post an event to one or more target decision point. A posted event is similar to an intercepted operation except the action specified is often an internal event rather than an intercepted action. For example, an intercepted action may be OPEN, SEND and COPY. An internal event may be user defined and can include: APPLY-DELETE, FLUSH-BROWSER-CACHE, or DISABLE-INSTANT-MESSENGER. The posted event becomes an action for the target decision point and the parameters submitted with the event become the resource, subject, and context attributes of the event (or request). The consequence application function discussed throughout can also be carried out using the event posting technique. In addition to the consequence application function, event posting can be used to trigger a policy evaluation at any number of decision points. The event posting operation can be made synchronous or asynchronous. An event to be posted is normally specified in the consequence portion of a policy. When posted, such an event will trigger a policy evaluation at the target location. Additional data is normally posted along with the event and may include: source action, context, resource, and subject information.</p>
<p id="p-0194" num="0196">For example, in the case of delegating a policy evaluation, when a workstation policy enforcer does not have the information needed to complete the evaluation of a policy, it can delegate the policy evaluation to a server policy enforcer that has access to the information required to complete the policy evaluation. The consequence of a policy evaluation produced by the server policy enforcer is returned to the workstation policy enforcer so the policy consequence can be applied at the workstation.</p>
<p id="p-0195" num="0197">In another example of delegated policy evaluation, a master decision point can delegate the evaluation of policies to more than one helper decision point. A master decision point can be a policy engine in the workstation policy enforcers or document server policy enforcers or a policy engine in a policy decision server (a centralize cluster of policy engines dedicated to perform policy evaluation). A helper decision point can be any one of the policy engines listed above other than the master policy engine. The master decision point can combine the consequences collected from the helper decision points and apply the combined consequences.</p>
<p id="p-0196" num="0198">A master decision point (especially a policy enforcer) may not have the visibility to certain information that is required to evaluate a particular policy. By delegating the evaluation of that particular policy at a location where the required information is available or accessible, the master decision point and helper decision point(s) can operate collaboratively to process complex policies. The master decision point queries helper decision points to find out if the helper decision point exists and also whether the helper decision point has the ability to evaluate and/or enforce the policy.</p>
<p id="p-0197" num="0199">A master decision point (especially a policy decision server) can act as a coordinator that coordinates policy evaluation at multiple locations. This type of function is often found in maintenance policies where a master policy executed at a central location distributes policy evaluation tasks to decision points at remote locations. For example, a master decision point may instruct policy enforcers on all mobile devices to implement a set of policies that clean up sensitive information on such devices.</p>
<p id="p-0198" num="0200">In an example of delegating a consequence application, a document server policy enforcer evaluates a policy that controls deletion of a document by a manager on a document server. The policy requires that when the master copy of a document (i.e., the one that sits on a document server) is deleted, all copies of the same document distributed (or copied) to workstations must also be deleted. This document server policy requires distributed consequence application support to carry out document deletion at the workstations.</p>
<p id="p-0199" num="0201">Policy Enforcer Software Architecture</p>
<p id="p-0200" num="0202">Referring to <figref idref="DRAWINGS">FIGS. 6</figref><i>a</i>-<i>c</i>, policy enforcers <b>601</b> for document servers and workstations have a similar architecture. An interceptor <b>610</b> is responsible for intercepting (or detecting) application usage and document access operations (or actions), collecting information about an intercepted operation (e.g., type of action, document(s) associated with the action, and information about the application or module where interception occurred), and forwarding the data collected to a policy engine <b>603</b> for performing policy evaluation. The consequence of a policy evaluation is returned by a policy engine <b>603</b> to a consequence applicator <b>611</b>. A consequence applicator <b>611</b> is responsible for applying any consequences of a policy evaluation that includes a policy effect and additional tasks.</p>
<p id="p-0201" num="0203"><figref idref="DRAWINGS">FIG. 6</figref><i>a </i>illustrates an embodiment where an interceptor <b>610</b> and a consequence applicator <b>611</b> are components of a Policy Enforcement Point (PEP) <b>602</b> module and the policy enforcer <b>601</b> consists of at least one PEP <b>602</b> and one policy engine <b>603</b>.</p>
<p id="p-0202" num="0204"><figref idref="DRAWINGS">FIG. 6</figref><i>b </i>illustrates an embodiment where a policy enforcer <b>601</b> implements interception and enforcement functions using a PEP plug-in architecture. The policy enforcer consists of one PEP <b>602</b> and at least one PEP Plug-in module <b>613</b>. Both interceptor <b>610</b> and consequence applicator <b>611</b> are components of a PEP Plug-in module <b>613</b>.</p>
<p id="p-0203" num="0205"><figref idref="DRAWINGS">FIG. 6</figref><i>c </i>illustrates an embodiment where a policy engine <b>603</b> runs in a process separate from a policy enforcer <b>601</b>. The policy decision process <b>614</b> and policy enforcer <b>601</b> can run on the same computer or on separate computers.</p>
<p id="p-0204" num="0206">The interceptor <b>610</b> and consequence applicators <b>611</b> are functional entities where the implementation of the two functions varies from operating system to operating system and application to application. In some cases, the interceptor <b>610</b> and consequence applicator <b>611</b> functionalities are combined into one code module. In other cases, the interceptor <b>610</b> and consequence applicator <b>611</b> reside in separate code modules.</p>
<p id="p-0205" num="0207">The interceptors <b>610</b> and consequence applicators <b>611</b> may function at the application program level or the operating system level in order to carry out the interception and consequence applicator functions. Application program level interceptors and consequence applicators are application program specific code modules which can be implemented as add-ins, plug-ins, scripts, macros, libraries and extension programs. Operating system level interceptors and consequence applicators are operating system specific code modules that can be implemented as libraries, filters and device drivers.</p>
<p id="p-0206" num="0208">To control application usage, a policy enforcer effects control on application program operations (e.g., blocking an application program operation) and/or filters results generated by the application program operations (e.g., remove text or disable actionable object in the result). Using interceptors and consequence applicators, an application program operation is intercepted (or detected) and information about the application program operation is provided to a policy engine to make a policy decision, and if the policy decision specifies an enforcement action, the enforcement action is carried out effecting control on the application program operation or filtering of results generated by the application program operation.</p>
<p id="p-0207" num="0209">A policy enforcer may use one or more methods to implement application usage control. The methods include: (a) blocking or altering an application program operating after it is invoked directly or indirectly by a user but before the application program operation is carried out; (b) disabling or hiding a user interface element responsible for invoking an application program operation so that a user cannot invoke the application program operation through the user interface element; and (c) removing, altering or obscuring a part or all of the result generated by an application program operation making certain information not available to a user. Note that the user interface element described in (b) may be an element of an application program (e.g., a menu item or a button) or an element of the result generated by an application program operation (e.g., a hypertext link, a check box or a list box).</p>
<p id="p-0208" num="0210">In a graphical user interface environment, an application program operation may correspond to an operation associated with a user interface element. If a user interface element is a menu item, a corresponding application program operation is an operation that will be carried out when the menu item is selected (e.g., printing a document). If a user interface element is a hypertext link (such as a clickable word or phrase on a Web page), a corresponding application program operation is an operation that will be carried out when the hypertext link is clicked (e.g., loading a new Web page or jumping to another position on a Web page). Other common user interface elements include a: menu, button, list box, list item, check box, scroll bar, key (on the keyboard), and mouse button. An application program operation may also correspond to a command or function that is invoked by a user indirectly (e.g., through a macro or script) or by another application program.</p>
<p id="p-0209" num="0211">To filter results generated by an application program operation, a consequence applicator may alter, substitute, remove, hide or obscure one or more portions (or all) of the result to be presented to a user. The consequence applicator may also alter, substitute, remove, hide, disable or obscure one or more actionable objects or fragments of text (e.g., menu, tab, buttons, check boxes, list boxes, or hypertext links).</p>
<p id="p-0210" num="0212">To control document access, a policy enforcer effects control on document access operations. Common document access operations include: read (or open), write (or save), execute (for binary file or script), delete, read permission (or security setting), and change permission. Many document repositories (especially document management systems) support additional document access operations.</p>
<p id="p-0211" num="0213">Typically, interceptors and consequence applicators intercept (or detect) a document access operation and information about the document access operation is provided to a policy engine to make a policy decision, and if the policy decision specifies an enforcement action, the enforcement action is carried out effecting control on the document access operation. Alternatively, the interceptors and consequence applicators may also integrate with an existing access control system provided by a document repository (e.g., document management system).</p>
<p id="p-0212" num="0214">Interceptors and consequence applicators that control document access are document repository dependent. They may be installed in a document server application program (e.g., HTTP server, IBM Lotus Notes Server, Microsoft Exchange Server, or Microsoft Sharepoint Portal Server), at an application program interface (e.g., MAPI, JMS, ODBC, JDBC and Oracle SQL*NET), at an application protocol interface, or act as a application protocol proxy between a client and a server (e.g., HTTP, FTP or SOAP), at file system libraries, at network file share protocol driver (e.g., CIFS or NFS), or at file system device driver.</p>
<p id="p-0213" num="0215">Some common document repositories include: file servers, mail servers, document management server, content management server, HTTP or Web servers, FTP servers, WebDAV servers, and database servers.</p>
<p id="p-0214" num="0216">In one implementation of a policy enforcer, interceptors and consequence applications are installed in an existing application program or operating system to implement interception (or detection) and enforcement functions. The interceptors and consequence applicators are not native elements of the application program or operating system.</p>
<p id="p-0215" num="0217">In another implementation of a policy enforcer, interceptors and consequence applicators are native elements of an application program or operating system. Interception and enforcement may be implemented through one or more calls to a policy enforcer application program interface (API). For example, a policy enforcer API is provided in the form of a software development kit (SDK).</p>
<p id="p-0216" num="0218">A workstation policy enforcer installs a number of application program interceptors <b>610</b> and consequence applicators <b>611</b> to monitor document access and application usage operations (or actions) inside individual application programs and to apply enforcement actions. In addition, a workstation policy enforcer also installs operating system interceptors <b>610</b> and consequence applicators <b>611</b> to monitor file accesses from application programs and to apply enforcement actions. The operating system interceptors <b>610</b> can intercept operations from application programs that are or are not monitored by application program interceptors on the workstation.</p>
<p id="p-0217" num="0219">Interceptors <b>610</b> and consequence applicators <b>611</b> can be setup during program installation time or anytime during a program's life cycle. One method that can be used to setup an interceptor is to perform code analysis on an application program or library module and then modify the stored program code. Another method that can be used to setup an interceptor is through code injection at program startup time. Yet another method that can be used to setup an interceptor is to perform code injection after the program has been started. Code injection includes any method that modifies existing program code and/or inserts new code into an existing program code to implement an additional function. The existing program code can reside in volatile or nonvolatile memory.</p>
<p id="p-0218" num="0220">The consequence applicator <b>611</b> implements the consequence (or outcome) called for by the policy engine <b>603</b>. The consequence includes an effect of policy evaluation and optionally obligation and remediation tasks (described below) to be carried out. An effect includes whether an operation should be allowed or denied; querying a user for input; evaluating another set(s) of policies; and calling a custom effect handler (described below).</p>
<p id="p-0219" num="0221">The local policy repository <b>604</b> holds a copy of policies applicable to a policy enforcer. Depending on the policy system architecture selected, the set of policies in the local policy repository <b>604</b> may be a full set of policies from the policy server or a subset. The local policy may be stored locally in a relational database, in one or more files, or in any form that convenient to the policy enforcer. By storing policies for a policy enforcer locally, a workstation policy enforcer can continue to function while the workstation is off-line and the policy server cannot be reached.</p>
<p id="p-0220" num="0222">The custom effect handler <b>612</b> is a code module that implements custom effects and is optional in the policy enforcer <b>601</b>.</p>
<p id="p-0221" num="0223">An obligation handler <b>605</b> is a code module that carries out obligations supported by the policy system architecture. An obligation is a task that is related to the intercepted action that a policy enforcer is obligated to take. The tasks may include logging an action being intercepted, sending a notification to an administrator regarding the intercepted action, and archiving or encrypting the document associated with the intercepted action. For example, if a policy says &#x201c;any e-mail sent to a patient should be maintained in the patient record database; and the obligation action is to send (or &#x2018;bcc&#x2019;) a copy of the e-mail to the record management system&#x201d;. In this case, a policy enforcer automatically applies the obligation action (i.e., archive) and sends a copy of an e-mail to a record management system.</p>
<p id="p-0222" num="0224">In a second example, the obligation can be used to implement regulatory compliance requirements such as &#x201c;all e-mail communications from an executive must be archived&#x201d;. A policy can be written to capture all send and forward actions on e-mail messages and to apply an archive obligation action automatically.</p>
<p id="p-0223" num="0225">Some obligation handlers are executed inside a policy enforcer <b>601</b> process (e.g., the log handler) while others are implemented as PEP <b>602</b> components executing inside an application program (e.g., an e-mail delete handler) or an operating system. The obligation handler <b>605</b> is optional in the policy enforcer <b>601</b>.</p>
<p id="p-0224" num="0226">The remediation handler <b>606</b> is very similar in function to the obligation handler <b>605</b> except it performs different functions. Remediation means additional actions taken that are different from what is being intercepted. Such actions are introduced solely by policies defined to &#x201c;remediate.&#x201d;</p>
<p id="p-0225" num="0227">The tamper resistance module <b>609</b> is responsible for preventing, blocking, monitoring, and recovering from attempts to disable or alter the function of a policy enforcer. Many techniques can be used to protect program files and configurations from modifications and corruption. For example:</p>
<p id="p-0226" num="0228">(1) Multiple copies of files can be maintained and a missing or corrupted file can be restored from the backup copies.</p>
<p id="p-0227" num="0229">(2) Checksums or signatures can be generated on important files and stored in nonvolatile memory to enable detection of corrupted program and data files.</p>
<p id="p-0228" num="0230">(3) Access to policy enforcer program files and configurations can be restricted.</p>
<p id="p-0229" num="0231">(4) Changes to a policy enforcer's Windows registry entries can also be monitored, blocked and automatically restored.</p>
<p id="p-0230" num="0232">The communication and synchronization module <b>608</b> is responsible for maintaining connection(s) to the policy server <b>211</b> and intelligence server <b>308</b>, handling policy updates, and transferring log data to the log and intelligence repository <b>309</b>.</p>
<p id="p-0231" num="0233">The policy scheduler <b>615</b> implements maintenance policies set by the administrator or user. A maintenance policy tells the policy scheduler when to perform an action and what the action is. For example, the policy scheduler <b>615</b> can be given a maintenance policy that instructs it to perform a nightly scan of all e-mail messages and to delete any e-mail messages older than 90 days.</p>
<p id="p-0232" num="0234">A maintenance policy uses the same format as a normal policy, but rather than being evaluated in response to an action by a user or application program, the maintenance policy is evaluated at a certain specified date and/or time. The policy scheduler <b>615</b> implements any specified obligation or remediation action specified in the maintenance policy.</p>
<p id="p-0233" num="0235">Variations of implementations of a policy enforcer can take the form of:</p>
<p id="p-0234" num="0236">(1) The policy enforcer includes a policy engine <b>603</b>, a local policy repository <b>604</b> and one or more policy enforcement points <b>602</b>. The local policy repository may reside in volatile or nonvolatile memory of a host computer. The policy enforcer may optionally include any combination of: an auditor <b>607</b>, a policy scheduler <b>615</b>, obligation handlers <b>605</b>, remediation handlers <b>606</b>, or a tamper resistance module <b>609</b>.</p>
<p id="p-0235" num="0237">(2) The policy enforcer includes a policy engine <b>603</b>, a local policy repository <b>604</b>, a policy enforcement point <b>602</b> and one or more PEP Plug-ins <b>613</b>. The local policy repository may reside in volatile or nonvolatile memory of a host computer. The policy enforcer may optionally include any combination of: an auditor <b>607</b>, a policy scheduler <b>615</b>, obligation handlers <b>605</b>, remediation handlers <b>606</b>, or a tamper resistance module <b>609</b>.</p>
<p id="p-0236" num="0238">(3) The policy enforcer includes a policy engine <b>603</b>, a local policy repository <b>604</b> and an interface to policy enforcement points. The local policy repository may reside in volatile or nonvolatile memory of a host computer. The policy enforcement point interface provides a means to support additional policy enforcement points (e.g., policy enforcement points provided by a third-party). The policy enforcer may optionally include any combination of an auditor <b>607</b>, a policy scheduler <b>615</b>, obligation handlers <b>605</b>, remediation handlers <b>606</b>, or a tamper resistance module <b>609</b>.</p>
<p id="p-0237" num="0239">(4) The policy enforcer implements a policy enforcement point plug-in architecture illustrated in <figref idref="DRAWINGS">FIG. 6</figref><i>b </i>and the additional policy enforcement points are provided as PEP Plug-ins <b>613</b>.</p>
<p id="p-0238" num="0240">(5) The policy enforcer is installed on a host computer without any policies (or rules). Upon startup of the policy enforcer, the policy enforcer communicates with a policy server and the policy server transmits a set of policies to the host computer. On successful transmission of the set of policies, the policy enforcer enforces the set of policies at the host computer.</p>
<p id="p-0239" num="0241">(6) The policy enforcer provides information (e.g., host name, IP address, type of computer or operating system) to the policy server to help determine the set of policies to be transmitted. The set of policies may be a subset of policies managed by the policy server.</p>
<p id="p-0240" num="0242">(7) The policy enforcer is installed on a host computer with a set of default policies (or rules). The set of default policies is enforced by the policy enforcer until a second set of policies is received by the host computer.</p>
<p id="p-0241" num="0243">(8) A set of policies on the host computer (e.g., the set of default policies) is replaced by the second set of policies and the policy enforcer enforces the second set of policies at the host computer.</p>
<p id="p-0242" num="0244">(9) A set of policies on the host computer (e.g., the set of default policies) is combined with the second set of policies and the policy enforcer enforces the combined set of policies at the host computer.</p>
<p id="p-0243" num="0245">(10) The policy enforcer is installed on a host computer with a set of preinstalled policies (or rules). The set of preinstalled policies is enforced by the policy enforcer until a second set of policies is received by the host computer. Upon successful reception of the second set of policies, the policy enforcer enforces both the set of preinstalled policies and the second set of policies at the host computer.</p>
<p id="p-0244" num="0246">(11) A policy enforcer is installed on a host computer with a set of configurable policies (or rules) and a default policy configuration. The configurable policies are enforced by the policy enforcer at the host computer according to the default configuration until a second policy configuration is received by the host computer.</p>
<p id="p-0245" num="0247">(12) A policy configuration on the host computer (e.g., the default policy configuration) is replaced by the second policy configuration and the policy enforcer enforces the configurable policies at the host computer according to the second policy configuration.</p>
<p id="p-0246" num="0248">(13) A policy configuration on the host computer (e.g., the default policy configuration) is combined with the second policy configuration and the policy enforcer enforces the configurable policies at the host computer according to the combined policy configuration.</p>
<p id="p-0247" num="0249">Policy Engine</p>
<p id="p-0248" num="0250">A policy engine <b>603</b> is an execution unit that processes and executes rules (or policies). The policy engine <b>603</b> takes the data collected by an interceptor <b>610</b> (and any other pertinent data such as historical data from prior interceptions and configuration and environment data) and applies the policy rules supplied by the policy server to the data to produce a consequence. A consequence may include an effect (e.g., ALLOW, DENY, evaluate another policy or set(s) of policies, query user, or call a custom effect handler) and optionally one or more obligation and remediation tasks. The use of historical data in a policy evaluation is optional. As part of the policy evaluation process, a policy engine may decide that it needs to obtain input form a user before it can proceed with (or complete) policy evaluation. At that time, a policy engine can invoke user interface elements to query the user for input. For example, such input is related to classifying a document (which produces document attribute values) that is required to complete policy evaluation.</p>
<p id="p-0249" num="0251">Also, as part of the policy evaluation process, a policy engine may decide that it needs to obtain document classification information in order to complete policy evaluation. The process of obtaining document classification information may involve retrieving stored document classification data or dynamically invoking a document classification engine to classify a document.</p>
<p id="p-0250" num="0252">The policy engine <b>603</b> optionally performs a list of obligation and remediation tasks and/or invokes a custom effect handler if one is defined in a policy. An implementation of the policy engine is policy system architecture specific. Depending on what policy system architecture is selected, the implementation of the policy engine can vary significantly. The policy deployment module <b>405</b> described in this application can support different types of policy engine design, allowing the appropriate policy engine design to be selected for an individual device. For example, a smart phone policy enforcer may be limited by the device's computing power and memory available. A policy engine inside the smart phone policy enforcer can be designed to execute precompiled and preoptimized polices that exist in binary form. The policy optimization and compilation steps are performed on the policy server prior to transmitting (the subset of policies) to the smart phone policy enforcer. In this case, the smart phone policy enforcer receives and evaluates policies that exist in binary form which are a semantic equivalent of the original policies that reside on the policy server.</p>
<p id="p-0251" num="0253">A number of design options are available in the design of the policy engine <b>603</b>, the options include:</p>
<p id="p-0252" num="0254">(1) Support distribution of full sets of policies to policy enforcers.</p>
<p id="p-0253" num="0255">(2) Support preoptimized policies at the policy enforcer.</p>
<p id="p-0254" num="0256">(3) Support policies transmitted to a policy enforcer in XACML format.</p>
<p id="p-0255" num="0257">(4) Support policies transmitted to a policy enforcer in Blue Jungle's Open Policy Language (OPAL) format.</p>
<p id="p-0256" num="0258">(5) Support policies compiled into ASCII or binary format.</p>
<p id="p-0257" num="0259">(6) Support policies translated into programming language (e.g., XML, Java, C#, Perl, and Python&#x2014;in source code or binary format).</p>
<p id="p-0258" num="0260">(7) Support policies translated into lookup tables.</p>
<p id="p-0259" num="0261">(8) Support preinstalled, configurable policies and alter preinstalled policies' behavior through configuration changes.</p>
<p id="p-0260" num="0262">(9) Support built-in, configurable policies and alter built-in policies' behavior through configuration changes.</p>
<p id="p-0261" num="0263">In an implementation of a policy engine, a policy evaluation process can be invoked by an interceptor <b>610</b>, a policy scheduler <b>615</b>, an internal event generated by a policy enforcer or policy server, or an external event generated by another application program.</p>
<p id="p-0262" num="0264">An internal event is similar to an intercepted user or application program action except that it is generated by a policy engine or other components of a policy enforcement system. An internal event can provide additional information relevant to the event similar to that of intercepted action. In fact, an internal event often includes the information provided by an intercepted action which results in the generation of the internal event. An internal event may be generated as a result of a policy evaluation request or a result of an activity data analysis operation.</p>
<p id="p-0263" num="0265">An external event is an event generated by another application program outside of a policy enforcement system. This type of application program is typically a third party application integrated with a policy enforcement system (e.g., through a software development kit). Third-party application integration can be extremely useful because in a specific implementation where policy enforcers are deployed company-wide, managing all types of information, the management system has access to information in a distributed environment without having to go through additional authentication and authorization processes. For example, a customer relationship management (CRM) application may instruct a policy enforcement system through an external event to archive all documents related to a customer on the closing of an account. The handling of such an external event may include rolling up: files on file servers and desktop and laptop computers, e-mail messages on mail servers and all mail clients, and documents in document management systems.</p>
<p id="p-0264" num="0266">Referring to <figref idref="DRAWINGS">FIG. 7</figref>, the policy engine <b>701</b> can evaluate policies received <b>702</b> from the policy server using the following steps:</p>
<p id="p-0265" num="0267">Step <b>1</b>: Receive data collected by an interceptor <b>703</b> or provided by an integrated application program module. The data collected by an interceptor may include an action (or operation) being intercepted, information on the document(s) that is associated with the action (this is optional because some actions like cut-and-paste do not involve a document), information on the thread, process, and application within which the action was taken, and other information which may be useful in policy evaluation.</p>
<p id="p-0266" num="0268">Step <b>2</b>: Inspect data provided by the interceptor or the integrated application program module and select policies that are applicable. The selection may be based on the type of action, who is the user, what is the application, and so on. In some policy system architectures, this policy selection step may not be necessary. In that case, all policies or a predefined set of policies will be evaluated.</p>
<p id="p-0267" num="0269">Step <b>3</b>: Based on the policies selected and data provided by an interceptor or an integrated application program module, obtain additional information that is needed to complete policy evaluation. The additional information may include configuration setting and environment data <b>704</b>.</p>
<p id="p-0268" num="0270">Step <b>4</b>: Pass the selected policies and data collected through policy evaluation logic to produce a consequence <b>705</b> (or outcome). The consequence includes one of the valid policy effects (e.g., ALLOW, DENY, evaluate another set(s) of policies, query user, and call a custom effect handler), and perform any obligation and remediation tasks.</p>
<p id="p-0269" num="0271">Step <b>5</b>: If the policy evaluation consequence <b>705</b> includes any obligation or remediation tasks, call the corresponding obligation or remediation handlers to carry out the obligations and/or remediation tasks.</p>
<p id="p-0270" num="0272">Step <b>6</b>: If the policy evaluation consequence <b>705</b> includes a custom effect, call the corresponding custom effect handler to generate or apply an effect.</p>
<p id="p-0271" num="0273">The policy engine <b>701</b> can reside in a policy enforcer <b>205</b>, <b>207</b>, a policy server <b>211</b>, a dedicated policy decision server, or any process or server that is assigned the policy decision function. Note that the policy engine <b>603</b> is an optional module in the policy enforcer <b>601</b> (refer to <figref idref="DRAWINGS">FIG. 6</figref><i>c</i>).</p>
<p id="p-0272" num="0274">In an embodiment of the invention, the policy engine <b>701</b> can evaluate policies received <b>702</b> from the policy server, data provided by a scheduler <b>615</b> associated with a scheduled event, data associated with an internal event generated by a policy enforcer or a policy server, or data accompanying an external event generated by a different application program.</p>
<p id="p-0273" num="0275">2.4 Example Scenarios</p>
<p id="p-0274" num="0276">In the following scenarios, a pseudo language is used to define the parameters of a policy rule. The basic language structure is: Policy=premise+consequence. Any language that support the above structure can be used, e.g., the OASIS eXtensible Access Control Markup Language (XACML) and Blue Jungle's Open Policy Language (OPAL). The policy rule format used in the text below is:</p>
<p id="p-0275" num="0277">
<tables id="TABLE-US-00002" num="00002">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="203pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>policy :=</entry>
</row>
<row>
<entry/>
<entry>&#x2002;FOR &#x3c;resource expression&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x2002;ON &#x3c;event expression&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x2002;BY &#x3c;subject expression&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x2002;WHERE &#x3c;context expression&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x2002;DO &#x3c;positive consequence&#x3e; OTHERS &#x3c;negative consequence&#x3e;</entry>
</row>
<row>
<entry/>
<entry>positive consequence := effect AND &#x3c;obligation tasks&#x3e; AND</entry>
</row>
<row>
<entry/>
<entry>&#x3c;remediation tasks&#x3e;</entry>
</row>
<row>
<entry/>
<entry>negative consequence := effect AND &#x3c;obligation tasks&#x3e; AND</entry>
</row>
<row>
<entry/>
<entry>&#x3c;remediation tasks&#x3e;</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0276" num="0278">The policy rule format includes a number of elements. The FOR element (or resource element) in the policy rule format specifies a logical expression that describes one or more document attributes and corresponding matching patterns (e.g., &#x2018;document.category=&#x201c;Confidential&#x201d; AND document.name=&#x201c;//server1/user/**&#x201d;&#x2019;, or &#x2018;message.from=NOT Employee OR message.to &#x3c; &#x3e;&#x201c;*@partner-company.com&#x201d;&#x2019;).</p>
<p id="p-0277" num="0279">The ON element (or action element) specifies a list of document access and/or application usage actions that this policy applies to (e.g., OPEN, SAVE, SEND, and ATTACH).</p>
<p id="p-0278" num="0280">The BY element (or subject element) specifies a logical expression that describes one or more: users, user groups, the role of a user, a user's business function, computers (or hosts), groups of computers (e.g., &#x201c;file server&#x201d; or &#x201c;finance department&#x201d;), types of computers (e.g., laptop or PDA), application programs (e.g., &#x201c;Microsoft Word&#x201d;), groups of application programs (e.g., &#x201c;Microsoft Office&#x201d;), types of application programs (e.g., spreadsheet), and more.</p>
<p id="p-0279" num="0281">The WHERE element (or context element) is a logical expression (or context expression) that describes the context this policy applies to. The context expression can compose of any logical combination of: resource elements, action elements, subject elements, time (e.g., point in time, time of day, or day in the week), location (e.g., &#x201c;Main Office&#x201d;, &#x201c;London Office&#x201d;, &#x201c;Building H&#x201d; or &#x201c;Home&#x201d;), connectivity (including access mechanism and bandwidth; e.g., WLAN, LAN, VPN, ISDN, Internet, DSL, Bluetooth, dialup, Remote Desktop Protocol (RDP), Virtual Network Computing (VNC) protocol, latency, 56 k, broadband, 100 Mb, and 1 Gb), policy directive (e.g., POLICY-ENFORCER-AT-POU or MSEXCHANGE-5.5), historical data, statistical data, data produced by analyzing events, data provided by an external data source, and more.</p>
<p id="p-0280" num="0282">A context element describes a circumstance that a policy is intended for (or a positive policy consequence (described below) should apply). It works in conjunction with a resource element, action element, and subject element to define a policy premise (or condition). For example, a context element may describe a time period in which a policy should be applied (i.e., adopting a positive policy consequence when other logical policy elements are evaluated to true). In another example, a context element describes a policy that should be applied only if a workstation accesses a server through a virtual private network (VPN).</p>
<p id="p-0281" num="0283">In a more complex example, a context element describes the logical combination of: (1) a user who is an employee; (2) a workstation connected to a network at a branch office; (3) the user is using a browser to access a secure server via secure sockets layer (SSL) VPN; (4) the access occurs during office hours; (5) the access occurs within a silent period before his (or her) company's quarterly financial results are published; and (6) there is at most three users connected to the secure server. This example illustrates that a context element can be used to describe a complicated circumstance. In some cases, a context element may specify one or more policy engine directives including POLICY-ENFORCER-AT-DESTINATION.</p>
<p id="p-0282" num="0284">A positive consequence element (or DO element) consists of a positive consequence statement. A positive consequence statement contains a policy effect (e.g., ALLOW, DENY, query user, custom effect handler, or DELEGATE), optionally one or more obligation tasks, and optionally one or more remediation tasks. A positive consequence is adopted during policy evaluation when a policy's premise is satisfied.</p>
<p id="p-0283" num="0285">A negative consequence element (or OTHERS element) consists of a negative consequence statement. A negative consequence element has the same structure as the positive consequence statement. A negative consequence is adopted during a policy evaluation when a policy's premise is not satisfied. A negative consequence is optional in a policy. When a negative consequence is not specified, a default negative consequence is used which contains a policy effect that is the negation of the positive policy effect found in the policy.</p>
<p id="p-0284" num="0286">In addition, a policy rule can also contain directives that provide instructions to a policy engine (e.g., a policy engine in a policy enforcer or a policy engine in a policy decision server) to assist in policy evaluation, and provide instructions to policy deployment module (typically a part of a policy server) to assist in policy deployment. Policy directives can appear in any one of the policy elements described above. For example, a policy can contain one or more collaborative directives (e.g., POU:&#x3c;action&#x3e; which describes action information available at a point-of-use policy enforcer associated with a policy evaluation request, or POLICY-ENFORCER-AT-DESTINATION).</p>
<p id="p-0285" num="0287">For the purpose of illustration, the following examples show the evaluation of only one policy in the policy evaluation step (by a policy engine). In practice, a policy engine can select one or more policies relevant to an intercepted action or integrated application program module and the policy evaluation may involve more than one policy. When more than one policy is evaluated by a policy engine in response to an intercepted action or integrated application program module, the policy consequences in the evaluated policies must be combined to form one final policy consequence using one or more combining algorithms (e.g., deny override or permit override). The final policy consequence is then returned to an interceptor and consequence applicator or an authorization process that invokes policy evaluation. This final policy consequence normally contains a policy effect and optionally one or more obligation tasks and remediation tasks.</p>
<p id="p-0286" num="0288">The policy evaluation steps outlined in this application are provided for illustrative purposes only. Different policy evaluation techniques may be applied to achieve the same or other results.</p>
<p id="p-0287" num="0289"><figref idref="DRAWINGS">FIG. 8</figref> illustrates an example embodiment of a policy enforcer <b>815</b> is installed on a workstation <b>801</b> where a user's (or application's) OPEN action triggers a file operation (e.g., open( )) on a local disk file. Note that file system objects are handled differently from other documents that are nonfile system objects which are illustrated below. The policy definition is:</p>
<p id="p-0288" num="0290">
<tables id="TABLE-US-00003" num="00003">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="56pt" align="left"/>
<colspec colname="1" colwidth="161pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>FOR document.name = &#x201c;*.doc&#x201d;</entry>
</row>
<row>
<entry/>
<entry>ON OPEN</entry>
</row>
<row>
<entry/>
<entry>BY user = NOT Employees</entry>
</row>
<row>
<entry/>
<entry>DO DENY</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0289" num="0291">The following describes a normal (i.e., ALLOW) execution path when a user accesses a file and the policy engine <b>802</b> interprets, and the interceptor and consequence applicator <b>809</b> implements the above rule. Note that, as shown in <figref idref="DRAWINGS">FIG. 6</figref>, the policy enforcer <b>815</b> is comprised of several components. For the ease of explanation, the policy enforcer is not illustrated in full in the following examples. In this example, the policy engine <b>802</b> and the interceptor and consequence applicator <b>809</b> components of the policy enforcer <b>815</b> are described.</p>
<p id="p-0290" num="0292">Step <b>1</b> (<b>804</b>): A user or application program <b>803</b> performs an action. An action can include opening a file, saving a file, moving a file, deleting a file, renaming a file and so forth. In this case, the action is OPEN.</p>
<p id="p-0291" num="0293">Step <b>2</b> (<b>805</b>): The user or application action causes some application code to be executed which results in calls to operating system libraries to manipulate a file. For action OPEN, the system call that application code makes includes open( ), fopen( ), FileOpen( ), OpenFile( ) and CreateFile( ).</p>
<p id="p-0292" num="0294">Step <b>3</b> (<b>807</b>): The workstation policy enforcer <b>815</b> is capable of intercepting calls to operating system libraries. The file operation calls (e.g., open( ), fopen( ), etc.) are intercepted. The interceptor and consequence applicator <b>809</b> that intercepts a system call collects information about the file operation, calling application, and user, and forwards that information to the policy engine <b>802</b> for further processing. The information collection may include the file name, directory, file path, application's process id, and program name.</p>
<p id="p-0293" num="0295">Step <b>4</b> (<b>808</b>): The policy engine <b>802</b> takes the information received from the interceptor and consequence applicator <b>809</b> and other configuration and environment data, and applies relevant rules distributed to it by a policy server. Note that depending on what policy language is used, one or more rules can be relevant to a current action. The policy evaluation can result in an ALLOW, DENY, or DELEGATE policy effect and it may also introduce obligation and/or remediation actions. Delegation is when the policy engine <b>802</b> evaluates another policy or another set of policies locally or remotely.</p>
<p id="p-0294" num="0296">(1) An obligation action refers to additional action(s) that is related to the intercepted action that a workstation policy enforcer <b>815</b> is obliged to perform when certain condition(s) is met. For example, an obligation action includes logging an action or sending a notification message to an administrator. An obligation can depend (or not depend) on the ALLOW and DENY state.</p>
<p id="p-0295" num="0297">(2) A remediation action refers to additional action(s) that is unrelated to the intercepted action that a workstation policy enforcer <b>815</b> must take when certain condition(s) is met. Remediation actions may include deleting a copy of a backup file because only one copy of a particular file is allowed or cleaning up a user's home directory because the user's assigned privilege has changed due to a recent job change.</p>
<p id="p-0296" num="0298">Step <b>5</b> (<b>810</b>): The policy evaluation decision (i.e., effect) is returned to the interceptor and consequence applicator <b>809</b> (in this case, the interceptor is also acting as a consequence applicator). The interceptor and consequence applicator <b>809</b> takes appropriate enforcement action. In some cases, the interceptor and the consequence applicator can be separate code modules (e.g., when communication between the Policy Engine and PEP is asynchronous). <figref idref="DRAWINGS">FIG. 8</figref> shows the execution path of an ALLOW effect. In the case where the policy evaluation effect is DENY, then steps <b>6</b>-<b>8</b> should be eliminated. For the action OPEN, if the effect is DENY, then the interceptor and consequence applicator <b>809</b> terminates the open( ) call immediately with an error status.</p>
<p id="p-0297" num="0299">Step <b>6</b> (<b>811</b>): The interceptor and consequence applicator <b>809</b> forwards the system call made by the application code to an appropriate operating system library and the normal operation is carried out.</p>
<p id="p-0298" num="0300">Steps <b>7</b>-<b>8</b> (<b>812</b>, <b>813</b>): Depending on what system called is made it may involve a file system device driver and access to physical disk <b>814</b>.</p>
<p id="p-0299" num="0301"><figref idref="DRAWINGS">FIG. 9</figref> illustrates an embodiment where a policy enforcer on a client computer controls access to files on a file server. The policy definition is:</p>
<p id="p-0300" num="0302">
<tables id="TABLE-US-00004" num="00004">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="35pt" align="left"/>
<colspec colname="1" colwidth="182pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>FOR document.name = &#x201c;//server1/docs/**&#x201d;</entry>
</row>
<row>
<entry/>
<entry>ON OPEN</entry>
</row>
<row>
<entry/>
<entry>BY user = Employees</entry>
</row>
<row>
<entry/>
<entry>WHERE (CURRENT_TIME &#x3e; &#x201c;8:00 AM&#x201d; AND</entry>
</row>
<row>
<entry/>
<entry>CURRENT_TIME &#x3c; &#x201c;6:00 PM&#x201d;)</entry>
</row>
<row>
<entry/>
<entry>DO ALLOW</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0301" num="0303">This scenario demonstrates the situation where a user (or application) action in workstation <b>901</b> triggers an operation on a file residing on a file server <b>904</b>. <figref idref="DRAWINGS">FIG. 9</figref> shows a normal (i.e., ALLOW) execution path when a workstation policy enforcer is installed.</p>
<p id="p-0302" num="0304">Processing for this scenario is very similar to the scenario of <figref idref="DRAWINGS">FIG. 8</figref>. Additional processing in this case is attributed to the policy engine <b>902</b> evaluating the time constraints attached to the rule. Since application programs use the same system call to open a file on local disk and a file on a file server, the same system call interceptor and consequence applicator <b>809</b> described above works in the same manner as the interceptor and consequence applicator <b>903</b>. Workstation policy engine <b>902</b>, while processing the intercepted data from interceptor and consequence applicator <b>903</b>, detects a file being accessed is on a server <b>904</b> and performs path normalization to avoid control being bypassed when more than one path exists to the same file. The policy rules distributed to a workstation policy enforcer can control access from the workstation to any file server. The control function is applied regardless of whether a file server is protected by a file server policy enforcer.</p>
<p id="p-0303" num="0305"><figref idref="DRAWINGS">FIGS. 10</figref><i>a</i>-<i>c </i>illustrate an embodiment where a policy enforcer on a file server protects files on a file server. The policy definition is:</p>
<p id="p-0304" num="0306">
<tables id="TABLE-US-00005" num="00005">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217pt" align="left"/>
<thead>
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry>FOR document.owner = ProjectA-Team</entry>
</row>
<row>
<entry>&#x2002;OR document.name = &#x201c;//server1/share1/docs/projectA/**&#x201d;</entry>
</row>
<row>
<entry>ON OPEN, EDIT, CREATE, RENAME</entry>
</row>
<row>
<entry>BY user = ProjectA-Team</entry>
</row>
<row>
<entry>WHERE NOT (device = LAPTOP AND location = BOSTON-OFFICE</entry>
</row>
<row>
<entry>&#x2002;AND connection &#x3c; &#x3e; VPN)</entry>
</row>
<row>
<entry>DO ALLOW</entry>
</row>
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0305" num="0307">This scenario demonstrates the situation where a user (or application) action triggers an operation on a file residing on a file server. The user or application action can be performed on any workstation including one that is controlled by a workstation policy enforcer or one that is not. <figref idref="DRAWINGS">FIGS. 10</figref><i>a</i>-<i>c </i>show a normal (i.e., ALLOW) execution path when a file server policy enforcer is installed.</p>
<p id="p-0306" num="0308">Step <b>1</b> (<b>1001</b>, <b>1002</b>): User or application initiates an action. The action triggers a file operation on a file resided on a file server <b>1033</b>. The workstation <b>1031</b>, <b>1032</b> where the action is initiated can be controlled by a workstation policy enforcer <b>1031</b> or not controlled by a workstation policy enforcer <b>1032</b>.</p>
<p id="p-0307" num="0309">Step <b>2</b> (<b>1003</b>, <b>1004</b>): Since the file of interest resides on a remote server, a file operation normally makes its way to a file share protocol client such as Common Internet File System (CIFS) or Network File System (NFS) client before reaching a network device driver on a workstation. A network device driver sends a file operation to the target file server. A network file share protocol client may be implemented as a device driver (e.g., CIFS) or an application program or combination of both.</p>
<p id="p-0308" num="0310">Step <b>3</b> (<b>1005</b>): The network device driver (not shown) on the target file server <b>1033</b> receives a file operation request and forwards it to the network file share protocol server <b>1017</b>, <b>1018</b>, <b>1019</b>. A network file share protocol server may be implemented as a device driver <b>1017</b> (e.g., CIFS) or server application program <b>1018</b> (e.g., NFS) or combination of the two (e.g., Andrew File System&#x2014;AFS). An interceptor and consequence applicator <b>1015</b> is installed on a network file share protocol server <b>1017</b>, <b>1018</b>, <b>1019</b> to intercept function calls (or messages) to the network file share protocol server <b>1017</b>, <b>1018</b>, <b>1019</b>. In the case of a Network Attached Storage (NAS) device, installing an interceptor and consequence applicator <b>1015</b> may involve the installation of one or more callback handlers. The interceptor and consequence applicator <b>1015</b> collects information about the function call (or message) being intercepted and forwards that information to a policy engine <b>1016</b> running on the file server (or in the case of a NAS, the policy engine runs on a separate computer).</p>
<p id="p-0309" num="0311">Step <b>4</b> (<b>1006</b>): Using the rules distributed by a policy server, information collected by an interceptor and consequence applicator <b>1015</b>, and other environment and configuration data, the policy engine <b>1016</b> determines if the function call (or message) should be allowed or denied. The file server policy engine <b>1016</b> will also carry out any obligation and remediation operations deemed necessary. The file server policy engine may also decide to store information to help process future function calls (or messages).</p>
<p id="p-0310" num="0312">Step <b>5</b> (<b>1007</b>): The interceptor and consequence applicator <b>1015</b> receives a return status (i.e., effect) from the policy engine <b>1016</b>. Based on the status, the interceptor and consequence applicator <b>1015</b> may allow a function call to network file share protocol server <b>1017</b>, <b>1018</b>, <b>1019</b> to proceed (or a message to be processed).</p>
<p id="p-0311" num="0313">Step <b>6</b> (<b>1008</b>): The network file share protocol server <b>1017</b>, <b>1018</b>, <b>1019</b> performs its normal processing. Depending on the type of file operation being requested and whether such operation can be completed with file data cached in network file share protocol server <b>1017</b>, <b>1018</b>, <b>1019</b>, network file share protocol server may or may not access the file system to fulfill a request.</p>
<p id="p-0312" num="0314">Step <b>7</b> (<b>1009</b>): In case the file system access is required to complete the processing of a request, a network file share protocol server <b>1017</b>, <b>1018</b> will perform one of the steps described here depending on its implementation:</p>
<p id="p-0313" num="0315">(1) For a network file share protocol driver <b>1017</b> implementation (referring to <figref idref="DRAWINGS">FIG. 10</figref><i>a</i>), a network file share protocol driver <b>1017</b> makes calls into a file system device driver <b>1020</b>. In this case, an interceptor and consequence applicator <b>1021</b> is installed to intercept calls into the file system device driver <b>1020</b>. Information is collected by the interceptor and consequence applicator <b>1021</b> and forwarded to a policy engine <b>1016</b> on the same file server <b>1033</b>.</p>
<p id="p-0314" num="0316">(2) For network file share protocol server program <b>1018</b> implementation (referring to <figref idref="DRAWINGS">FIG. 10</figref><i>b</i>), a server program <b>1018</b> makes operating system file operation calls to access a file. Similar to client side operating system libraries interceptor and consequence applicator, such file operation system calls are intercepted <b>1011</b> and reported to a policy engine <b>1016</b> on the file server <b>1033</b>.</p>
<p id="p-0315" num="0317">Note that interception is performed at both network file share protocol driver <b>1017</b> and file system device driver <b>1020</b> (or network file share protocol server program <b>1018</b> and operating system libraries <b>1022</b>). Interception at network file share protocol driver <b>1017</b> (or network file share protocol server program <b>1018</b>) provides high-level file operation information and avoids problems created by caching (i.e., the file system is not accessed to complete a request because file data is in cache). Interception at the file system device driver <b>1020</b> (or operating system libraries <b>1022</b>) provides complete protection to files on a file server. If file system access is generated indirectly through some complex protocol driver <b>1017</b> (or server program <b>1018</b>) logic, it may not be appropriate to enforce policy at protocol driver interceptor and consequence applicator (or server program interceptor and consequence applicator) <b>1015</b>. An interceptor and consequence applicator <b>1021</b>, <b>1023</b> at file system device driver <b>1020</b> (or operating system library <b>1022</b>) level ensures all file operations are intercepted and the above situation can be handled. Interception at both the protocol driver <b>1017</b> (or server program <b>1018</b>) and the file system device driver <b>1020</b> (or operating system library <b>1022</b>) can function collaboratively to assist policy evaluation.</p>
<p id="p-0316" num="0318">Step <b>8</b> (<b>1010</b>): Processing in step <b>8</b> is similar to step <b>4</b> (in the description of <figref idref="DRAWINGS">FIGS. 10</figref><i>a </i>and <b>10</b><i>b</i>). The policy engine <b>1016</b> may use information collected from previous interception(s) <b>1005</b> in policy evaluation.</p>
<p id="p-0317" num="0319">Step <b>9</b> (<b>1011</b>): Using the return status from step <b>8</b>, an interceptor and consequence applicator <b>1021</b>, <b>1023</b> can either allow or deny the requested file operation.</p>
<p id="p-0318" num="0320">Step <b>10</b>-<b>12</b> (<b>1012</b>-<b>1014</b>): Normal processing steps similar to those described in the other scenarios above.</p>
<p id="p-0319" num="0321">In a common CIFS server implementation, a file access operation may come in through a network device driver, then a CIFS driver, then optionally a Distribute File System (DFS) server, followed by a Server Message Block (SMB) server and finally a file system device driver. In current Microsoft implementations, all the above operations are performed in kernel mode.</p>
<p id="p-0320" num="0322">In a common NFS server implementation, a file operation comes through a network device driver to a NFS server program. The NFS server program then accesses local files through operating system libraries which may in turn access file system device driver. The NFS server is normally a user mode application, but there also exists kernel model implementations.</p>
<p id="p-0321" num="0323">In a Network Attached Storage (NAS) implementation, a policy engine may run on a separate computer rather than the NAS operating system. It is common to find on a NAS operating system, a network-based callback interface which provides similar functions to other file server interceptor and consequence applicators. Note that this type of callback solution is not limited to NAS devices. The policy engine can leverage similar techniques that are also available in different server application software.</p>
<p id="p-0322" num="0324">Referring to <figref idref="DRAWINGS">FIG. 10</figref><i>a</i>, another design option that may be added is one where a network file share protocol driver interceptor and consequence applicator <b>1015</b> communicates with a file system device driver interceptor and consequence applicator <b>1021</b> directly. Depending on the implementation, a network file share protocol driver interceptor and consequence applicator <b>1015</b> may or may not need to communicate with the policy engine <b>1016</b>. Similarly (referring to <figref idref="DRAWINGS">FIG. 10</figref><i>b</i>), a network file share protocol server program interceptor and consequence applicator <b>1015</b> can also communicate with an operating system library interceptor and consequence applicator <b>1023</b> and it may or may not communicate with the policy engine <b>1016</b>. What this means is that information collected at a high-level interception <b>1015</b> can be used to assist in interpreting what is happening at a lower-level <b>1021</b>, <b>1023</b>. Such an interpretation can occur inside a low-level interceptor and consequence applicator <b>1021</b>, <b>1023</b> or policy engine <b>1016</b> depending on how the software is designed.</p>
<p id="p-0323" num="0325"><figref idref="DRAWINGS">FIG. 11</figref> illustrates an embodiment where access control to a nonfile system object (e.g., e-mail) is being enforced on a workstation. The policy definition is:</p>
<p id="p-0324" num="0326">
<tables id="TABLE-US-00006" num="00006">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217pt" align="left"/>
<thead>
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry>FOR message.from = Legal AND message.createDate &#x3c; TODAY &#x2212; 90</entry>
</row>
<row>
<entry>ON OPEN</entry>
</row>
<row>
<entry>DO DENY</entry>
</row>
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0325" num="0327">Since a nonfile system object (or document) access is application specific, interception is typically performed inside an application, at an application program interface (API), or at a communication protocol interface, instead of being performed in operating system libraries or device drivers. In addition, interception of communication protocol can also be performed using a proxy (or gateway) application that is placed between a client application and a server. An example of an application program interface includes Microsoft Messaging API, Oracle SQL*NET or Java Message Service (JMS). An example of a communication protocol includes HTTP, FTP, WebDAV, SMTP, POP3 or IMAP4.</p>
<p id="p-0326" num="0328">The processing steps are basically the same as illustrated in <figref idref="DRAWINGS">FIGS. 8 and 9</figref>, except that interception and enforcement are performed differently. There are two methods for handling the interceptor and consequence applicator on nonfile system objects. In the first method, a policy enforcement point (PEP) containing the interceptor and consequence applicator functions is built into an application program. With this approach, interceptor and consequence applicator functions are provided as an integral part of an application program and the application program provides means to communicate with an external policy engine.</p>
<p id="p-0327" num="0329">The second method requires a PEP to be installed by instrumenting an existing application program to provide interceptor and consequence applicator functions. This second method allows application programs that are not released with document access and application usage control capabilities to be retrofitted to provide such capabilities. Besides interceptor and consequence applicator functions, a PEP may also implement obligation and remediation task handling capabilities.</p>
<p id="p-0328" num="0330">Adapting an application program to provide interceptor and consequence applicator functionalities requires application of one or more instrumentation techniques. The following are a few exemplary instrumentation techniques available for retrofitting application programs to provide document access and application usage control capabilities:</p>
<p id="p-0329" num="0331">(1) Using application program interfaces (APIs) available to implement interceptor and consequence applicator functionalities.</p>
<p id="p-0330" num="0332">(2) Implementing interceptors and consequence applicators in an in-process add-on (or plug-in) module or extension library.</p>
<p id="p-0331" num="0333">(3) Implementing interceptors and consequence applicators in a callback module.</p>
<p id="p-0332" num="0334">(4) Implementing interceptors and consequence applicators in a device driver.</p>
<p id="p-0333" num="0335">(5) Performing function (or method), class (or object), library, program, and device driver wrapping either statically or dynamically so that an interceptor has a chance to examine an application program operation before the actual operation is carried out.</p>
<p id="p-0334" num="0336">(6) Installing (or registering) a message filter, message hook, message handler, event filter, event hook, event handler, preprocessing callback, post-processing callback, device driver, and device driver filter at the application program installation time, application startup time, or after an application program has started up, so that an application program operation can be intercepted and examined by an interceptor.</p>
<p id="p-0335" num="0337">(7) Performing program code analysis and modifying application program code statically or dynamically to install interceptors and consequence applicators.</p>
<p id="p-0336" num="0338">A nonfile system object (or application data object) can be any data that can be uniquely identified. For example, a nonfile system object can be an e-mail message, a discussion thread, a result set created by a database query, a Web page, an electronic form, a contact object, a calendar entry, etc.</p>
<p id="p-0337" num="0339">Again, a workstation policy enforcer provides access and usage control. It controls what user can view, edit, send and so forth. The workstation policy enforcer also addresses problems created by caching and off-line operations. For example, Microsoft Outlook can cache e-mail messages on a client computer and a Microsoft Exchange Server policy enforcer cannot control accesses to those cached e-mail messages.</p>
<p id="p-0338" num="0340">The workstation policy enforcer and document server policy enforcer can individually provide different &#x201c;use&#x201d; control and access protection.</p>
<p id="p-0339" num="0341"><figref idref="DRAWINGS">FIG. 12</figref> illustrates an embodiment where a policy enforcer on a workstation <b>1200</b> applies an obligation action for a file access operation. An obligation is typically used to implement notification and log functions.</p>
<p id="p-0340" num="0342">The policy definition is:</p>
<p id="p-0341" num="0343">
<tables id="TABLE-US-00007" num="00007">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="203pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>FOR document.category = &#x201c;Highly-Sensitive&#x201d;</entry>
</row>
<row>
<entry/>
<entry>ON OPEN</entry>
</row>
<row>
<entry/>
<entry>BY user = Executives, Legal</entry>
</row>
<row>
<entry/>
<entry>DO ALLOW AND LOG</entry>
</row>
<row>
<entry/>
<entry>&#x2002;OTHERS DENY AND NOTIFY Administrator AND LOG</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0342" num="0344">The policy restricts access to documents categorized as &#x201c;Highly-Sensitive&#x201d; to users in the Executives and Legal groups. In addition, the document administrator is notified when a user (or application) is denied access to one of these documents and the action is logged every time a user (or application) attempts to open one of these documents.</p>
<p id="p-0343" num="0345">Step <b>1</b> (<b>1201</b>): A user who is a member of the Executives group, opens an M&#x26;A document categorized as &#x201c;Highly Sensitive&#x201d; using Microsoft Word.</p>
<p id="p-0344" num="0346">Step <b>2</b> (<b>1202</b>): The file open operation is intercepted. The interceptor and consequence applicator <b>1216</b> collects information about the action, document, and application and forwards that information to a policy engine <b>1214</b>.</p>
<p id="p-0345" num="0347">Step <b>3</b> (<b>1203</b>): The policy engine <b>1214</b> receives the information collected by the interceptor and consequence applicator <b>1216</b> and performs a policy evaluation. The intercepted action in this example is OPEN which matches the policy and the policy is then evaluated. In the process of evaluating the above policy, policy engine <b>1214</b> compares the document category against &#x201c;Highly-Sensitive&#x201d;, checks if the user is in the Executives group, and determines that the action should be allowed. The policy engine <b>1214</b> returns an ALLOW effect to the interceptor and consequence applicator <b>1216</b>.</p>
<p id="p-0346" num="0348">Step <b>4</b> (<b>1204</b>): The policy engine <b>1214</b> also recognizes that obligation tasks are assigned to the policy and calls the associated obligation handler <b>1215</b> to carry out the obligation tasks. The notify obligation handler <b>1215</b> is called to send a notification to the administrator. In addition, the log obligation handler <b>1215</b> is called to log the action and any associated information of interest. Note that the obligation tasks shown in this example are standard obligation tasks that are handled by obligation handlers <b>1215</b> and the obligation handlers are invoked by policy engine <b>1214</b>. A policy enforcer can also support custom obligation tasks. Custom obligation tasks can be invoked by policy engine or passed to an interceptor and consequence applicator in a policy consequence along with policy effect. If a custom obligation task is passed to an interceptor and consequence applicator, the interceptor and consequence applicator is responsible for performing the custom obligation task.</p>
<p id="p-0347" num="0349">Step <b>5</b> (<b>1205</b>): The interceptor and consequence applicator <b>1216</b> receives the ALLOW effect and calls the application code that it had intercepted.</p>
<p id="p-0348" num="0350">Step <b>6</b> (<b>1206</b>): The normal file open application code is executed and results in a call to a file operation in the operating system library.</p>
<p id="p-0349" num="0351">Step <b>7</b> (<b>1207</b>): The file open operation system call is intercepted. The interceptor and consequence applicator <b>1217</b> collects information about the action, document, and application, among other information. The collected information is forwarded to policy engine <b>1214</b>.</p>
<p id="p-0350" num="0352">Step <b>8</b> (<b>1208</b>): The policy engine <b>1214</b> receives the information collected by the interceptor and consequence applicator <b>1217</b>. Before performing the policy evaluation, policy engine <b>1214</b> looks up in its cache to find the ALLOW effect produced by the evaluation of the policies on the same application operation. The policy engine <b>1214</b> returns an ALLOW effect to the interceptor and consequence applicator <b>1217</b>.</p>
<p id="p-0351" num="0353">Step <b>9</b> (<b>1209</b>): This step is not invoked because obligations have been carried out in step <b>4</b> after the policy evaluation in step <b>3</b>. The policy engine maintains sufficient information to identify that the two interceptors are related and to ensure that an obligation or remediation task is not carried out more than once.</p>
<p id="p-0352" num="0354">Step <b>10</b> (<b>1210</b>): The interceptor and consequence applicator <b>1217</b> receives an ALLOW effect from policy engine <b>1214</b> and proceeds to call the file open function in the operating system library.</p>
<p id="p-0353" num="0355">Step <b>11</b>-<b>13</b> (<b>1211</b>-<b>1213</b>): The normal file open operation is carried out.</p>
<p id="p-0354" num="0356"><figref idref="DRAWINGS">FIG. 13</figref> illustrates an embodiment where a policy enforcer on a workstation <b>1300</b> applies a remediation action for a file access operation. The policy definition is:</p>
<p id="p-0355" num="0357">
<tables id="TABLE-US-00008" num="00008">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="203pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>FOR document.name = &#x201c;C:/secure/marketing/**&#x201d;</entry>
</row>
<row>
<entry/>
<entry>ON OPEN</entry>
</row>
<row>
<entry/>
<entry>BY user = Marketing</entry>
</row>
<row>
<entry/>
<entry>DO ALLOW</entry>
</row>
<row>
<entry/>
<entry>&#x2002;OTHERS DENY AND DELETE-ALL &#x201c;C:/secure/marketing/**&#x201d;</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0356" num="0358">The policy protects data on desktop and laptop computers by deleting all sensitive files in &#x201c;C:/secure/marketing/&#x201d; the first time an unauthorized user tries to access such files. The operation that deletes sensitive files is specified as a remediation action in the policy.</p>
<p id="p-0357" num="0359">Step <b>1</b> (<b>1301</b>): A user that is a member of the Engineering group tries to open a file in &#x201c;C:/secure/marketing/&#x201d; which is left over by a previous user of a laptop computer.</p>
<p id="p-0358" num="0360">Step <b>2</b> (<b>1302</b>): A normal file open application code is executed and results in a call to a file operation in the operating system library.</p>
<p id="p-0359" num="0361">Step <b>3</b> (<b>1303</b>): The file open operation system call is intercepted by the interceptor and consequence applicator <b>1309</b>. The interceptor and consequence applicator <b>1309</b> collects information about the action, document, and application, among other information. The collected information is forwarded to the policy engine <b>1307</b>.</p>
<p id="p-0360" num="0362">Step <b>4</b> (<b>1304</b>): The policy engine <b>1307</b> receives the information collected by the interceptor and consequence applicator <b>1309</b> and performs policy evaluation. The intercepted action is OPEN which matches the policy and the policy is then evaluated. The policy engine <b>1307</b> compares the document name and path against &#x201c;C:/secure/marketing/&#x201d;, checks if the user is in the Marketing group, and determines that the action should be denied. In addition, there is a remediation task associate with the policy that the policy engine <b>1307</b> needs to carry out. The policy engine <b>1307</b> returns a DENY effect to the interceptor and consequence applicator <b>1309</b>.</p>
<p id="p-0361" num="0363">Step <b>5</b> (<b>1305</b>): The policy engine <b>1307</b> calls a delete remediation handler <b>1308</b> to carry out the remediation task specified in the policy. In this example, the delete remediation handler <b>1308</b> deletes all files under &#x201c;C:/secure/marketing/&#x201d;.</p>
<p id="p-0362" num="0364">Step <b>6</b> (<b>1306</b>): The interceptor and consequence applicator <b>1309</b> receives a DENY effect from policy engine <b>1307</b> and terminates the file open operation.</p>
<p id="p-0363" num="0365"><figref idref="DRAWINGS">FIG. 14</figref> illustrates an embodiment where a policy enforcer on a virtual file server (e.g., a virtual network attached storage (NAS) device such as Acopia Adaptive Resource Switch, NeoPath File Director, or Rainfinity RainStorage) protects files served by the virtual file server.</p>
<p id="p-0364" num="0366">The policy definition is:</p>
<p id="p-0365" num="0367">
<tables id="TABLE-US-00009" num="00009">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="203pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>FOR document.name = &#x201c;//server001/engineering/projectA/**&#x201d;</entry>
</row>
<row>
<entry/>
<entry>ON OPEN</entry>
</row>
<row>
<entry/>
<entry>BY user = ProjectA-Team</entry>
</row>
<row>
<entry/>
<entry>DO ALLOW</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0366" num="0368">This scenario demonstrates a situation where a user (or application) action triggers an operation on a file residing on a network attached storage (NAS) device <b>1407</b> and the file is accessed through a virtual file server <b>1404</b> and policy-based authorization (or policy enforcement) occurs at the virtual file server <b>1404</b>. The user or application action can be performed on any workstation including one that is controlled by a workstation policy enforcer <b>1401</b> or one that is not <b>1403</b>. <figref idref="DRAWINGS">FIG. 14</figref> illustrates a topological diagram containing two workstations <b>1401</b>, <b>1403</b>, a virtual file server <b>1404</b>, a file server <b>1406</b> and a NAS device <b>1407</b>. The workstations <b>1401</b>, <b>1403</b> access files residing on the file server <b>1406</b> and the NAS device <b>1407</b> through virtual file server <b>1404</b>.</p>
<p id="p-0367" num="0369">Step <b>1</b> (<b>1408</b>, <b>1409</b>): A user or application initiates an action. The action triggers a file operation on a file residing on the NAS device <b>1407</b>. Since the file path associated with the file operation refers to a file on virtual file server &#x201c;server001&#x201d; <b>1404</b> (even though the file is on the NAS device <b>1407</b>), a file operation request is made to virtual file server <b>1404</b>. The workstation <b>1401</b> or <b>1403</b> where the action is initiated, can be controlled by a workstation policy enforcer or not controlled by a workstation policy enforcer.</p>
<p id="p-0368" num="0370">Step <b>2</b> (<b>1410</b>): The virtual file server <b>1404</b> receives the file operation request. The request is run through an authorization process initiated by an interceptor installed on the virtual file server <b>1404</b> (where the interceptor intercepts the file operation request) or an authorization step built into the virtual file server <b>1404</b> (where interception is an integral part of the virtual file server's program logic). The authorization process involves collecting information about the file operation request and forwards that information to a policy engine running on the virtual file server <b>1404</b>.</p>
<p id="p-0369" num="0371">Using rules distributed by a policy server, information collected by the authorization process, and other environment and configuration data, the policy engine determines if the file operation request should be allowed or denied. The policy engine will also carry out any obligation and remediation operations deemed necessary. The policy engine may also decide to store information to help process future file operation requests.</p>
<p id="p-0370" num="0372">The authorization processing program logic receives a return status (i.e., effect) from the policy engine. Based on the status, the authorization processing program logic may allow a file operation request to a file on the NAS device <b>1407</b> to be processed; or deny the file operation request. If a file operation request is allowed, the virtual file server <b>1404</b> performs its normal processing and forwards the file operation request to the NAS device <b>1407</b>.</p>
<p id="p-0371" num="0373">Step <b>3</b> (<b>1411</b>): The NAS device <b>1407</b> serves the file operation request and returns a response back to the workstation <b>1401</b> through the virtual file server <b>1404</b>.</p>
<p id="p-0372" num="0374"><figref idref="DRAWINGS">FIG. 15</figref> illustrates an embodiment where a policy enforcer on a file gateway (e.g., a wide area network file services (WAFS) gateway such as Cisco File Engine series appliances or Tacit IShared products or Riverbed Steelhead appliances) protects files accessed through the file gateway.</p>
<p id="p-0373" num="0375">The policy definition is:</p>
<p id="p-0374" num="0376">
<tables id="TABLE-US-00010" num="00010">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="203pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>FOR document.name = &#x201c;//server123/marketing/products/**&#x201d;</entry>
</row>
<row>
<entry/>
<entry>ON OPEN</entry>
</row>
<row>
<entry/>
<entry>BY user = Marketing</entry>
</row>
<row>
<entry/>
<entry>DO ALLOW</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0375" num="0377">This scenario demonstrates the situation where a user (or application) action triggers an operation on a file residing on a file server that is being accessed through a file gateway <b>1502</b> and policy-based authorization (or policy enforcement) occurs at the file gateway <b>1502</b>. <figref idref="DRAWINGS">FIG. 15</figref> shows a topological diagram containing a workstation <b>1501</b>, a file gateway (e.g., a WAFS gateway) <b>1502</b>, a WAFS server <b>1504</b>, a file server <b>1505</b> and a network attached storage (NAS) device <b>1506</b>. The workstation <b>1501</b> access files residing on the file server <b>1505</b> and the NAS device <b>1506</b> through the file gateway <b>1502</b>.</p>
<p id="p-0376" num="0378">Step <b>1</b> (<b>1507</b>): User or application initiates an action. The action triggers a file operation on a file resided on a file server &#x201c;server123&#x201d; <b>1505</b>. The workstation <b>1501</b>, where the action is initiated can be controlled by a workstation policy enforcer or not controlled by a workstation policy enforcer. Since the workstation <b>1501</b> is connected to the file server <b>1505</b> through a file gateway <b>1502</b>, the file operation request first reaches the file gateway <b>1502</b>.</p>
<p id="p-0377" num="0379">Step <b>2</b> (<b>1508</b>): The file gateway <b>1502</b> receives the file operation request. The request is run through an authorization process initiated by an interceptor installed on the file gateway <b>1502</b> (where the interceptor intercepts the file operation request) or an authorization step built into the file gateway <b>1502</b> (where interception is an integral part of the file gateway's program logic). The authorization process involves collecting information about the file operation request and forwards that information to a policy engine running on the file gateway <b>1502</b>.</p>
<p id="p-0378" num="0380">Using rules distributed by a policy server, information collected by the authorization process, and other environment and configuration data, the policy engine determines if the file operation request should be allowed or denied. The policy engine will also carry out any obligation and remediation operations deemed necessary. The policy engine may also decide to store information to help process future file operation requests.</p>
<p id="p-0379" num="0381">The authorization processing program logic receives a return status (i.e., effect) from the policy engine. Based on the status, the authorization processing program logic may allow a file operation request to a file on the file server <b>1505</b> to be processed; or deny the file operation request.</p>
<p id="p-0380" num="0382">By controlling file access at file gateway <b>1502</b>, a file gateway policy enforcer protects files stored on file server <b>1505</b>, NAS device <b>1506</b>, and files cached on the file gateway <b>1502</b>.</p>
<p id="p-0381" num="0383">Steps <b>3</b>-<b>4</b> (<b>1509</b>, <b>1510</b>): If a file operation request is allowed, the file gateway <b>1502</b> performs its normal processing and forwards the file operation request to the WAFS server <b>1504</b> and finally to the file server <b>1505</b>. The file server <b>1505</b> serves the file operation request and returns a response back to the workstation <b>1501</b> through the WAFS server <b>1504</b> and the file gateway <b>1502</b>.</p>
<p id="p-0382" num="0384"><figref idref="DRAWINGS">FIG. 16</figref> illustrates an embodiment that controls application usage on a workstation. The policy definition is:</p>
<p id="p-0383" num="0385">
<tables id="TABLE-US-00011" num="00011">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="21pt" align="left"/>
<colspec colname="1" colwidth="196pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>FOR document.name = &#x201c;*.doc&#x201d;</entry>
</row>
<row>
<entry/>
<entry>ON PRINT</entry>
</row>
<row>
<entry/>
<entry>BY user = Guests AND application = &#x201c;Microsoft Word&#x201d;</entry>
</row>
<row>
<entry/>
<entry>DO DENY OTHERS ALLOW</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0384" num="0386">The policy specifies that printing a file from Microsoft Word by a user who is logged into a guest account is not allowed.</p>
<p id="p-0385" num="0387">Step <b>1</b> (<b>1601</b>): A user has a document opened in Microsoft Word. The user tries to print the document in Microsoft Word by selecting menu item &#x201c;File|Print&#x201d; or pressing a print button on a toolbar.</p>
<p id="p-0386" num="0388">Step <b>2</b> (<b>1602</b>): The user action is being intercepted by an application program interceptor and consequence applicator <b>1606</b> before reaching the code that implements the print function. Interception in Microsoft Word can be implemented as a Microsoft Office add-in module. The interceptor collects information about the action (e.g., print), the document and the application program (i.e., Microsoft Word); and forwards the information to a policy engine <b>1607</b> on the workstation.</p>
<p id="p-0387" num="0389">Step <b>3</b> (<b>1603</b>): The policy engine <b>1607</b> receives data collected by the interceptor and consequence applicator <b>1606</b> and selects policies relevant to the data received. It then evaluates the relevant policies using the data received along with any applicable configuration and environmental data. In this example, assume only the above policy is selected.</p>
<p id="p-0388" num="0390">The file name of the document to be printed is compared with the &#x201c;*.doc&#x201d; pattern in the policy. The action collected by the interceptor is compared with the &#x201c;PRINT&#x201d; specified in the action element of the policy. The application program information collected by the interceptor is compared with &#x201c;Microsoft Word&#x201d; specified in the subject element of the policy and the current user information is compared with a LDAP group, &#x201c;Guests&#x201d;, specified in the subject element of the policy.</p>
<p id="p-0389" num="0391">The outcome of the policy evaluation process is a policy consequence. The policy consequence contains a policy effect (this value is normally ALLOW or DENY) and any optional obligation and remediation tasks to be performed. If the condition specified in the above policy is satisfied, the positive policy effect specified in the policy consequence element is applied (DENY in the above policy). If the condition in a policy is not satisfied, the negative policy effect specified after the OTHERS keyword is applied. In the case where the OTHERS keyword is not specified, a negation of the positive policy effect is applied.</p>
<p id="p-0390" num="0392">Step <b>4</b> (<b>1604</b>): Policy engine returns a policy consequence to the interceptor and consequence applicator <b>1606</b> which contains a policy effect. If the policy effect is ALLOW, the consequence applicator allows the print operation to be carried out. If policy effect is DENY, the consequence applicator terminates the print operation.</p>
<p id="p-0391" num="0393">Step <b>5</b> (<b>1605</b>): When the print action is allowed, application code is called to carry out the action.</p>
<p id="p-0392" num="0394"><figref idref="DRAWINGS">FIG. 17</figref> illustrates an embodiment that controls application usage on a workstation. The policy definition is:</p>
<p id="p-0393" num="0395">
<tables id="TABLE-US-00012" num="00012">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="1" colwidth="28pt" align="left"/>
<colspec colname="2" colwidth="189pt" align="left"/>
<thead>
<row>
<entry namest="1" nameend="2" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>ON PASTE</entry>
</row>
<row>
<entry/>
<entry>BY user = Guest AND application = Instant-Messenger</entry>
</row>
<row>
<entry/>
<entry>DO DENY</entry>
</row>
<row>
<entry namest="1" nameend="2" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0394" num="0396">The above policy prevents a user that is logged in as Guest from copying data into an Instant Messenger program. The policy does not involve any file and nonfile system objects. Application usage control is applied to the paste command on application data only.</p>
<p id="p-0395" num="0397">Step <b>1</b> (<b>1701</b>): A user performs a &#x201c;Paste&#x201d; operation in Yahoo Messenger. The paste action can be invoked through &#x201c;Edit|Paste&#x201d; or accelerator keys &#x3c;Ctrl&#x3e;+V in Microsoft Windows.</p>
<p id="p-0396" num="0398">Step <b>2</b> (<b>1702</b>): An interceptor and consequence applicator <b>1706</b> installed in Yahoo Messenger intercepts the application program operation (e.g., paste). The interceptor collects information regarding the action and the application program (here, Yahoo Messenger) and forwards the data collected to a policy engine <b>1707</b> on the workstation.</p>
<p id="p-0397" num="0399">Step <b>3</b> (<b>1703</b>): The policy engine <b>1707</b> receives the data collected by the interceptor and consequence applicator <b>1706</b> and selects policies relevant to the data received. In this example, assume only the above policy is selected. If the data received contains action PASTE, the user is a member of Guests, and the application program is a member of the Instant-Messenger group, then the condition of the above policy is satisfied and the effect specified in the policy is returned in the policy consequence. In this case, the policy evaluation produces the policy effect of DENY.</p>
<p id="p-0398" num="0400">Step <b>4</b> (<b>1704</b>): The interceptor and consequence applicator <b>1706</b> receives the policy consequence returned by the policy engine. Since the policy effect contained in the policy consequence is DENY, the consequence applicator blocks the paste operation.</p>
<p id="p-0399" num="0401">Step <b>5</b> (<b>1705</b>): If the policy consequence returned in step <b>3</b> contained the policy effect ALLOW, then the application code would be executed to complete the paste operation.</p>
<p id="p-0400" num="0402"><figref idref="DRAWINGS">FIG. 18</figref> illustrates an embodiment that controls application usage on nonfile system objects at a client computer.</p>
<p id="p-0401" num="0403">The policy definition is:</p>
<p id="p-0402" num="0404">
<tables id="TABLE-US-00013" num="00013">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217pt" align="left"/>
<thead>
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry>FOR message.from = CEO AND message.to &#x3c; &#x3e; &#x201c;*@ourcompany.com&#x201d;</entry>
</row>
<row>
<entry>ON FORWARD</entry>
</row>
<row>
<entry>BY user &#x3c; &#x3e; CEO</entry>
</row>
<row>
<entry>DO DENY</entry>
</row>
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0403" num="0405">The policy above prevents the forwarding of e-mail messages from a company's CEO to anyone outside the company unless the sender is the CEO himself/herself. This policy can be evaluated at a workstation or a document server (i.e., e-mail server).</p>
<p id="p-0404" num="0406">Step <b>1</b> (<b>1801</b>): A user forwards an e-mail message in Microsoft Outlook to a friend outside the company.</p>
<p id="p-0405" num="0407">Step <b>2</b> (<b>1802</b>): An interceptor and consequence applicator <b>1812</b> installed in Microsoft Outlook intercepts the forward operation. The interceptor collects information about the action, the message and the application program (here, Microsoft Outlook) and forwards that information to a policy engine <b>1814</b> on the workstation.</p>
<p id="p-0406" num="0408">Step <b>3</b> (<b>1803</b>): The policy engine <b>1814</b> receives the data collected by the Microsoft Outlook interceptor and consequence applicator <b>1812</b> and selects policies relevant to the data received. In this example, assume only the above policy is selected. The policy engine performs the policy evaluation and performs comparisons on the action, the source of the message, the recipients, and the user. If action is FORWARD, the message is from the CEO, the user is not the CEO, and the message is sent to a person outside the company, then the policy consequence returned contains a policy effect of DENY.</p>
<p id="p-0407" num="0409">Step <b>4</b> (<b>1804</b>): The interceptor and consequence applicator <b>1812</b> receives a policy consequence containing the policy effect of DENY. The consequence applicator applies the policy effect of blocking the forward operation.</p>
<p id="p-0408" num="0410">Step <b>5</b>-<b>10</b> (<b>1805</b>-<b>1811</b>): In the case where the policy consequence returned to the interceptor and consequence applicator <b>1812</b> contains the policy effect of ALLOW, the consequence applicator will not block the forward operation. The application code that implements the forward operation is executed. The operation may be intercepted again in step <b>6</b> (<b>1806</b>) at the messaging API level <b>1813</b>. Policy evaluation occurs and in this case the policy engine returns a policy consequence with the policy effect of ALLOW. The messaging API completes delivery of the message to a mail server (i.e., Microsoft Exchange Server) which may have a policy enforcer installed <b>1815</b>, or may not have a policy enforcer installed <b>1816</b>. Once the mail reaches a mail server, the mail server will be responsible for delivering it to the final destination.</p>
<p id="p-0409" num="0411"><figref idref="DRAWINGS">FIG. 19</figref> illustrates an embodiment that combines application usage and document access control on files at a client computer.</p>
<p id="p-0410" num="0412">The policy definition is:</p>
<p id="p-0411" num="0413">
<tables id="TABLE-US-00014" num="00014">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="1" colwidth="28pt" align="left"/>
<colspec colname="2" colwidth="189pt" align="left"/>
<thead>
<row>
<entry namest="1" nameend="2" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>/* File access control */</entry>
</row>
<row>
<entry/>
<entry>FOR document.name = &#x201c;//server1/EarningReports/*&#x201d;</entry>
</row>
<row>
<entry/>
<entry>ON OPEN</entry>
</row>
<row>
<entry/>
<entry>BY user = Executives</entry>
</row>
<row>
<entry/>
<entry>DO ALLOW OTHERS DENY</entry>
</row>
<row>
<entry/>
<entry>/* Application usage control */</entry>
</row>
<row>
<entry/>
<entry>FOR document.name = &#x201c;//server1/EarningReports/*&#x201d;</entry>
</row>
<row>
<entry/>
<entry>ON PRINT, COPY</entry>
</row>
<row>
<entry/>
<entry>BY user = Audit-Committee</entry>
</row>
<row>
<entry/>
<entry>DO ALLOW OTHERS DENY</entry>
</row>
<row>
<entry namest="1" nameend="2" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0412" num="0414">The above policies are designed to implement fine-grained control on the documents residing within &#x201c;//server1/EarningReports/&#x201d; directory. The first policy is designed to implement access control allowing only executives to view these documents. The second policy controls usage that only audit committee members who are subset of executives can copy or print such documents.</p>
<p id="p-0413" num="0415"><figref idref="DRAWINGS">FIG. 19</figref> shows a typical workstation policy enforcer configuration with a policy engine, at least one application program interceptor and consequence applicator <b>1910</b>, and an operating system library interceptor and consequence applicator <b>1911</b>. The application program interceptor and consequence applicator <b>1910</b> is responsible for intercepting application program operations&#x2014;which represents usage. Usage includes copying and printing. Usage information is generally available inside an application program. For example, by intercepting copying and printing inside Windows Explorer, the system can prevent users from copying and printing a file. In addition, copy operations can also be blocked by intercepting &#x201c;Save As&#x201d; operations with file names different from the name of the currently opened file in an application program.</p>
<p id="p-0414" num="0416">The operating system library interceptor and consequence applicator <b>1911</b> intercepts all types of accesses to a file. For example, a simple text file in &#x201c;//server1/EarningReports/balancesheet.txt&#x201d; can be viewed using Microsoft Notepad, Microsoft Word, Microsoft Wordpad, DOS command &#x201c;type&#x201d; and &#x201c;edit&#x201d;, and any application program that can open a text file. A common thread among these application programs are the need to open a file before the contents of a file can be read and displayed. By intercepting file operation system calls such as open( ), fopen( ), and CreateFile( ), a policy enforcer can prevent unauthorized access from all application programs including those that are instrumented with interceptors and consequence applicators and those that are not instrumented.</p>
<p id="p-0415" num="0417">In the current example, the objective is to limit document access to a group of users and further limit usage to an even smaller group of users. Implementing such a policy requires the ability to control both access and usage. Controlling access at the operating system library level only, cannot distinguish the intended usage of an open( ) file operation call, i.e., whether the content will be viewed or printed.</p>
<p id="p-0416" num="0418">On the other hand, controlling usage at the application program level only cannot provide comprehensive access control because an interceptor in an application program has a limited ability to intercept document accesses. Further, a newly installed program without instrumentation can bypass such control.</p>
<p id="p-0417" num="0419">Operation: OPEN</p>
<p id="p-0418" num="0420">Step <b>1</b> (<b>1901</b>): A user who is designated an executive opens a file in &#x201c;//server1/EarningReports/&#x201d; using Microsoft Word.</p>
<p id="p-0419" num="0421">Step <b>2</b> (<b>1902</b>): The open operation is intercepted by a Microsoft Word interceptor and consequence applicator <b>1910</b>. The interceptor collects information about the action (OPEN), the document and the application program (here, Microsoft Word) and forwards the data collected to a policy engine <b>1912</b> on the workstation.</p>
<p id="p-0420" num="0422">Step <b>3</b> (<b>1903</b>): The policy engine <b>1912</b> receives data collected by the interceptor and consequence applicator <b>1910</b> and selects policies relevant to the data received. Since the current action is OPEN, the first policy above is selected. The second policy is not selected in this case. The policy engine evaluates the relevant policies with information provided by the interceptor and other environmental and configuration data available to the policy engine. To evaluate the first policy, the policy enforcer compares the intercepted document name and path against &#x201c;//server1/EarningReports/*&#x201d;, the action compared with OPEN, and checks if the user is in the Executives group. The action in the second policy, above, is associated with COPY and PRINT and is thus not evaluated. When a policy condition is satisfied, the policy effect (ALLOW) specified in the first policy is returned in a policy consequence. In this case, the policy effect produced by the policy engine is ALLOW.</p>
<p id="p-0421" num="0423">Step <b>4</b> (<b>1904</b>): The interceptor and consequence applicator <b>1910</b> receives the policy consequence containing policy effect ALLOW. The file open operation is allowed to continue. If the policy effect returned by policy engine <b>1912</b> was DENY, the consequence applicator blocks the file open operation.</p>
<p id="p-0422" num="0424">Step <b>5</b> (<b>1905</b>): The application code in Microsoft Word for handling the file open operation is executed and results in an open( ) file operation system call.</p>
<p id="p-0423" num="0425">Step <b>6</b> (<b>1906</b>): The open( ) call is intercepted by an operating system library interceptor and consequence applicator <b>1911</b>. The interceptor collects information regarding the intercepted operation as in step <b>2</b> (<b>1902</b>) and forwards the data collected to the policy engine <b>1912</b>.</p>
<p id="p-0424" num="0426">Step <b>7</b> (<b>1907</b>): The policy engine <b>1912</b> receives the data collected by the interceptor and performs policy selection and evaluation similar to that in step <b>3</b> (<b>1903</b>). Alternatively, as an optimization step the policy engine may determine that the interception that occurred at step <b>6</b> (<b>1906</b>) belongs to same operation intercepted recently in step <b>2</b> (<b>1902</b>) and that the same policy consequence should be returned. In either case, the policy evaluation produces an ALLOW policy effect for the first policy above.</p>
<p id="p-0425" num="0427">Step <b>8</b> (<b>1908</b>): The interceptor and consequence applicator <b>1911</b> receives a policy consequence from the policy engine <b>1912</b> containing the policy effect of ALLOW. The consequence applicator then allows the call to the open( )function in the operating system library to continue.</p>
<p id="p-0426" num="0428">Step <b>9</b> (<b>1909</b>): The operating system library code for implementing the file open operation is executed.</p>
<p id="p-0427" num="0429">Operation: PRINT</p>
<p id="p-0428" num="0430">Step <b>1</b> (<b>1901</b>): A user who is designated an executive and a member of the audit committee tries to print a file in &#x201c;//server1/EarningReports/&#x201d; using Microsoft Word.</p>
<p id="p-0429" num="0431">Step <b>2</b> (<b>1902</b>): The print operation is intercepted by a Microsoft Word interceptor and consequence applicator <b>1910</b>. The interceptor collects information about the action (PRINT), the document, and the application program (here, Microsoft Word), and forwards the data collected to a policy engine <b>1912</b> at the workstation.</p>
<p id="p-0430" num="0432">Step <b>3</b> (<b>1903</b>): The policy engine receives data collected by the interceptor and consequence applicator <b>1910</b> and selects policies relevant to the data received. Since the current action is PRINT, the second policy is selected. The policy engine evaluates the relevant policies with information provided by the interceptor and other environmental and configuration data available to the policy engine. In this case, assume a policy condition is satisfied and a policy effect of ALLOW is returned in a policy consequence.</p>
<p id="p-0431" num="0433">Step <b>4</b> (<b>1904</b>): The interceptor and consequence applicator <b>1910</b> receives the policy consequence containing a policy effect of ALLOW. The file print operation is allowed to continue. If the policy effect returned by the policy engine is DENY, the consequence applicator blocks the file print operation.</p>
<p id="p-0432" num="0434">Step <b>5</b> (<b>1905</b>): Application code in Microsoft Word for handling the file print operation is executed and the document is successfully printed. Since normal print operation in Microsoft Word does not access the file associated an open document, steps <b>6</b>-<b>9</b> (<b>1906</b>-<b>1909</b>) are not required.</p>
<p id="p-0433" num="0435">Operation: COPY</p>
<p id="p-0434" num="0436">Step <b>21</b> (<b>1921</b>): A user who is designated an executive but not a member of the audit committee tries to copy a file in &#x201c;//server1/EarningReports/&#x201d; using Windows Explorer.</p>
<p id="p-0435" num="0437">Step <b>22</b> (<b>1922</b>): The copy operation is intercepted by a Windows Explorer interceptor and consequence applicator <b>1925</b>. The interceptor collects information about the action (COPY), the document, and the application program (here, Windows Explorer), and forwards the data collected to a policy engine <b>1912</b> on the workstation.</p>
<p id="p-0436" num="0438">Step <b>23</b> (<b>1923</b>): The policy engine receives data collected by the interceptor and consequence applicator <b>1925</b> and selects policies relevant to the data received. Since the current action is COPY, the second policy is selected. The policy engine evaluates the relevant policies with information provided by the interceptor and other environmental and configuration data available to the policy engine. In this case, assume a policy condition is not satisfied and a policy effect DENY is returned in a policy consequence.</p>
<p id="p-0437" num="0439">Step <b>24</b> (<b>1924</b>): The interceptor and consequence applicator <b>1925</b> receives the policy consequence containing a policy effect DENY and the file copy operation is blocked.</p>
<p id="p-0438" num="0440"><figref idref="DRAWINGS">FIG. 20</figref> illustrates an embodiment that uses an obligation to implement a regulatory compliance requirement. The policy definition is:</p>
<p id="p-0439" num="0441">
<tables id="TABLE-US-00015" num="00015">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="1" colwidth="35pt" align="left"/>
<colspec colname="2" colwidth="182pt" align="left"/>
<thead>
<row>
<entry namest="1" nameend="2" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>FOR message.subject = &#x201c;*&#x201d;</entry>
</row>
<row>
<entry/>
<entry>ON SEND</entry>
</row>
<row>
<entry/>
<entry>BY user = Executives</entry>
</row>
<row>
<entry/>
<entry>DO ALLOW AND ARCHIVE OTHERS ALLOW</entry>
</row>
<row>
<entry namest="1" nameend="2" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0440" num="0442">The main objective of the above policy is not controlling access instead it is designed to carry out an obligation. Note that the system can have policies that apply to both control and obligation. The above policy is used to implement a regulatory compliance requirement that all e-mail messages sent by an executive in a public company must be archived for 7 years.</p>
<p id="p-0441" num="0443">Step <b>1</b> (<b>2001</b>): A user who is designated an executive sends an e-mail message using Microsoft Outlook.</p>
<p id="p-0442" num="0444">Step <b>2</b> (<b>2002</b>): An interceptor and consequence applicator <b>2007</b> installed in Microsoft Outlook intercepts the send operation. The interceptor collects information about the action (SEND), the message and the application program (here, Microsoft Outlook) and forwards the data collected to a policy engine <b>2008</b> on the workstation.</p>
<p id="p-0443" num="0445">Step <b>3</b> (<b>2003</b>): The policy engine <b>2008</b> receives the data collected by the interceptor and consequence applicator <b>2007</b> and selects policies relevant to the data received. The policy engine performs the policy evaluation on the relevant policies. In this example, assume only the above policy is selected. When the conditions of the above policy are satisfied, the policy consequence specified in the policy is adopted. In this case, the policy evaluation produces a policy effect of ALLOW and an obligation of ARCHIVE. The policy engine calls an obligation handler <b>2009</b> to implement the ARCHIVE obligation and returns the policy effect to the interceptor and consequence applicator <b>2007</b>.</p>
<p id="p-0444" num="0446">Step <b>4</b> (<b>2004</b>): An obligation handler <b>2009</b> responsible for carrying out ARCHIVE obligation is called along with the message to be sent. In this case, the archive obligation handler sends a copy of the message to a message archive server.</p>
<p id="p-0445" num="0447">Step <b>5</b> (<b>2005</b>): The interceptor and consequence applicator <b>2007</b> receives the policy consequence from the policy engine <b>2008</b> containing the policy effect of ALLOW. The consequence applicator allows the send operation to continue.</p>
<p id="p-0446" num="0448">Step <b>6</b> (<b>2006</b>): The application code in Microsoft Outlook that implements the send operation is executed.</p>
<p id="p-0447" num="0449"><figref idref="DRAWINGS">FIG. 21</figref> illustrates an embodiment that controls application usage on nonfile system objects at a client computer. The policy definition is:</p>
<p id="p-0448" num="0450">
<tables id="TABLE-US-00016" num="00016">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="1" colwidth="14pt" align="left"/>
<colspec colname="2" colwidth="203pt" align="left"/>
<thead>
<row>
<entry namest="1" nameend="2" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>FOR document.name = &#x201c;\\server3\finance\storesales-weekly.xls&#x201d;</entry>
</row>
<row>
<entry/>
<entry>ON OPEN</entry>
</row>
<row>
<entry/>
<entry>BY user = Finance-Staff AND application = Excel</entry>
</row>
<row>
<entry/>
<entry>DO ALLOW AND EXCEL:PROTECT(FORMULA)</entry>
</row>
<row>
<entry namest="1" nameend="2" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0449" num="0451">This policy implements control over application functions. In this example, a finance department manager wants to prevent unauthorized changes to formulas in a spreadsheet. The above policy is written to enable blocking of changes to spreadsheet formulas whenever a staff in the finance department opens the controlled spreadsheet. In this case, the blocking operation is implemented as a Microsoft Excel add-on module that monitors and blocks edit operations on a formula. In other cases, the protection may be implemented by simply making sure that the built-in protection feature in Microsoft Excel is turned on at the time a spreadsheet is opened.</p>
<p id="p-0450" num="0452">The steps involved in carrying out the above protection mechanism are the following:</p>
<p id="p-0451" num="0453">Step <b>1</b> (<b>2101</b>): A user in the finance department tries to open a sales report spreadsheet using Microsoft Excel.</p>
<p id="p-0452" num="0454">Step <b>2</b> (<b>2102</b>): An interceptor and consequence applicator <b>2105</b> installed in Microsoft Excel intercepts the open operation. The interceptor collects information about the action (OPEN), the document, and the application program (Microsoft Excel) and forwards the data collected to a policy engine <b>2106</b> on the workstation.</p>
<p id="p-0453" num="0455">Step <b>3</b> (<b>2103</b>): The policy engine <b>2106</b> receives the data collected by the interceptor and consequence applicator <b>2105</b> and selects policies relevant to the data received. The policy engine evaluates all relevant policies. In this example, assume only the above policy is selected. When the conditions of the above policy are satisfied, the policy consequence specified in the policy is adopted. In this case, the policy evaluation produces a policy effect of ALLOW and an obligation task of EXCEL:PROTECT. The policy consequence is returned to the interceptor and consequence applicator <b>2105</b>.</p>
<p id="p-0454" num="0456">Step <b>4</b> (<b>2104</b>): The interceptor and consequence applicator <b>2105</b> receives a policy consequence from the policy engine <b>2106</b> containing the policy effect ALLOW and the obligation task EXCEL:PROTECT. The consequence applicator first allows the open operation to be carried out. Once the spreadsheet is opened, the EXCEL:PROTECT obligation handler in the interceptor and consequence applicator <b>2105</b> is invoked with the parameter FORMULA to enable the protection function.</p>
<p id="p-0455" num="0457">Note that the obligation handling task is implemented by the interceptor and consequence applicator <b>2105</b> in this example. In other examples, standard obligation tasks such as LOG, ARCHIVE, NOTIFY and ENCRYPT are handled by the policy engine. In addition, the obligation task in this example is implemented after the application program operation is carried out. Some obligation handlers are invoked by the policy engine at the end of policy evaluation. Other obligation handlers are invoked by a consequence applicator. Also, some obligation tasks may be carried out before the application program operation while others happens afterward.</p>
<p id="p-0456" num="0458">Step <b>5</b> (<b>2105</b>): The application code in Microsoft Excel is executed to complete the open operation.</p>
<p id="p-0457" num="0459">
<tables id="TABLE-US-00017" num="00017">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="1" colwidth="14pt" align="left"/>
<colspec colname="2" colwidth="203pt" align="left"/>
<thead>
<row>
<entry namest="1" nameend="2" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>FOR document.name = &#x201c;\\server3\finance\storesales-weekly.xls&#x201d;</entry>
</row>
<row>
<entry/>
<entry>ON EDIT-FORMULA</entry>
</row>
<row>
<entry/>
<entry>BY user = Finance-Staff AND application = Excel</entry>
</row>
<row>
<entry/>
<entry>DO DENY</entry>
</row>
<row>
<entry namest="1" nameend="2" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0458" num="0460">The example described above in <figref idref="DRAWINGS">FIG. 21</figref> can also be implemented using an alternative method. The example above uses a combination of policy obligation and an add-in module that carries out the obligation of protecting formulas from being edited. The task of enabling such an obligation function is carried out every time a user opens the controlled spreadsheet. On the other hand, the policy above intercepts cell edit operations. If a user attempts to edit a formula, the above policy is evaluated which results in the operation being blocked.</p>
<p id="p-0459" num="0461">The difference between the two examples is that first does not perform policy evaluation on every edit operation while the policy above requires policy evaluation on every edit operation (or formula edit operation) being intercepted.</p>
<p id="p-0460" num="0462"><figref idref="DRAWINGS">FIG. 22</figref><i>a </i>illustrates an embodiment where a document server policy specifies information to be obtained from a point-of-use policy enforcer during policy evaluation.</p>
<p id="p-0461" num="0463">The policy definition is:</p>
<p id="p-0462" num="0464">
<tables id="TABLE-US-00018" num="00018">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="1" colwidth="42pt" align="left"/>
<colspec colname="2" colwidth="175pt" align="left"/>
<thead>
<row>
<entry namest="1" nameend="2" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>FOR document.category = &#x201c;Highly-sensitive&#x201d;</entry>
</row>
<row>
<entry/>
<entry>ON POU:COPY, POU:SEND</entry>
</row>
<row>
<entry/>
<entry>DO DENY OTHERS ALLOW</entry>
</row>
<row>
<entry namest="1" nameend="2" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0463" num="0465">The prefix &#x201c;POU:&#x201d; in POU:COPY and POU:SEND is an information exchange directive which instructs a policy engine that evaluates the policy to perform evaluation based on information (here, an action) about the operation gathered at a point-of-use. In this case, the point-of-use is a workstation that initiated the operation.</p>
<p id="p-0464" num="0466">An alternative syntax:</p>
<p id="p-0465" num="0467">
<tables id="TABLE-US-00019" num="00019">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="1" colwidth="14pt" align="left"/>
<colspec colname="2" colwidth="203pt" align="left"/>
<thead>
<row>
<entry namest="1" nameend="2" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>FOR document.category = &#x201c;Highly-sensitive&#x201d;</entry>
</row>
<row>
<entry/>
<entry>ON OPEN</entry>
</row>
<row>
<entry/>
<entry>WHERE NOT POLICY-ENFORCER-AT-POU</entry>
</row>
<row>
<entry/>
<entry>OR POU-POLICY-ENFORCER(ACTION = {COPY, SEND})</entry>
</row>
<row>
<entry/>
<entry>DO DENY OTHERS ALLOW</entry>
</row>
<row>
<entry namest="1" nameend="2" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0466" num="0468">The above policy specification uses information exchanges directives to instruct a policy engine evaluating the policy to perform two prescribed functions. The first directive POLICY-ENFORCER-AT-POU instructs a policy engine to check if there is a policy enforcer at a point-of-use where the point-of-use being a workstation that initiated the operation being intercepted at a document server where the policy is being evaluated. If a document server policy enforcer detects the presence of a policy enforcer at the point-of-use, the directive evaluates to true, and otherwise false. The second directive POU-POLICY-ENFORCER instructs a policy engine to check if an action associated with the operation is associated with action COPY or SEND at the point-of-use. Point-of-use action information is normally collected by a workstation policy enforcer.</p>
<p id="p-0467" num="0469">Another alternative syntax:</p>
<p id="p-0468" num="0470">
<tables id="TABLE-US-00020" num="00020">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="1" colwidth="35pt" align="left"/>
<colspec colname="2" colwidth="182pt" align="left"/>
<thead>
<row>
<entry namest="1" nameend="2" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>FOR document.category = &#x201c;Highly-sensitive&#x201d;</entry>
</row>
<row>
<entry/>
<entry>ON OPEN</entry>
</row>
<row>
<entry/>
<entry>WHERE NOT pou.hasPolicyEnforcer</entry>
</row>
<row>
<entry/>
<entry>OR pou.policyEnforcer.action = {COPY, SEND}</entry>
</row>
<row>
<entry/>
<entry>DO DENY OTHERS ALLOW</entry>
</row>
<row>
<entry namest="1" nameend="2" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0469" num="0471">The information exchange directives pou.hasPolicyEnforcer and pou.policyenforcer.action in the above policy are functional equivalents of the directives POLICY-ENFORCER-AT-POU and POU-POLICY-ENFORCER discussed above.</p>
<p id="p-0470" num="0472">This example illustrates a collaborative policy evaluation that relies on information exchange between two policy enforcers. It shows a file server policy enforcer trying to enforce a policy that requires user action information captured at a point-of-use (by a workstation policy enforcer). In order to evaluate such a policy, a file server policy enforcer initiates a conversation with a workstation policy enforcer (on the workstation that initiates the file request). If the file server policy enforcer cannot find a policy enforcer on the workstation that makes the file request, the file server policy evaluates to an effect of DENY. If workstation policy enforcer tells the file server policy enforcer the action it intercepts is OPEN (operation for viewing a file), the file server policy evaluates to an effect of ALLOW. On the other hand, if the workstation policy enforcer tells the file server policy enforcer that the intercepted action is COPY, the document server policy will evaluate to an effect of DENY.</p>
<p id="p-0471" num="0473">The following example details a sequence of events that occur during the evaluation of a document server policy that requires information exchange.</p>
<p id="p-0472" num="0474">Step <b>1</b> (<b>2201</b>): A user at a workstation <b>2218</b> tries to open a file for viewing.</p>
<p id="p-0473" num="0475">Step <b>2</b> (<b>2202</b>): An application program interceptor and consequence applicator <b>2220</b> on the workstation intercepts the file open operation. The interceptor collects information about the interception which includes the action (e.g., OPEN), the file name, and other application program information and sends the collected data to the policy engine <b>2219</b>.</p>
<p id="p-0474" num="0476">Step <b>3</b> (<b>2203</b>): The policy engine <b>2219</b> receives the data collected by the interceptor and consequence applicator <b>2220</b> and selects policies relevant to the intercepted action and collected data. In this example, assume only the above policy is selected. The policy engine evaluates the selected policies using the collected data along with other data available to the policy engine such as current user and operating environment data. The policy evaluation results in a consequence. Assume in this example that the policy evaluation produces the policy effect of ALLOW.</p>
<p id="p-0475" num="0477">Step <b>4</b> (<b>2204</b>): The consequence produced by the policy engine is returned to the interceptor and consequence applicator <b>2220</b>. The interceptor and consequence applicator component (I&#x26;CA) is composed of two functional parts: interceptor, and consequence applicator. The interceptor is responsible of intercepting application program actions and the consequence applicator is responsible for applying decisions (or consequences) made by the policy engine. Since the consequence produced by the policy evaluation in this example contains a policy effect of ALLOW, the operation is not blocked by the consequence applicator.</p>
<p id="p-0476" num="0478">Step <b>5</b> (<b>2205</b>): The application program logic required to carry out the file open operation is executed.</p>
<p id="p-0477" num="0479">Step <b>6</b> (<b>2206</b>): Execution of the application program logic results in a file open request at the file server <b>2221</b>.</p>
<p id="p-0478" num="0480">Step <b>7</b> (<b>2207</b>): The file open request is intercepted by a network file share protocol interceptor and consequence applicator <b>2223</b> at the file server. The interceptor collects information about the file open request and forwards the collected data to a policy engine <b>2222</b> on the file server.</p>
<p id="p-0479" num="0481">Step <b>8</b> (<b>2208</b>): The policy engine <b>2222</b> receives the data collected by the interceptor and consequence applicator <b>2223</b> and selects relevant policies based on the data received. Among the policies selected, one policy (here, the above policy <b>2227</b>) contains information exchange directives that specify information to be obtained from the point-of-use (i.e., the workstation <b>2218</b> that initiated the file open request). Note that when the POU:COPY policy syntax is used, the policy enforcer implicitly maps the POU:COPY action to a local OPEN action.</p>
<p id="p-0480" num="0482">Step <b>9</b> (<b>2209</b>): The policy engine <b>2222</b> attempts to detect the presence of a policy enforcer at the point-of-use <b>2228</b>. If a policy enforcer cannot be detected at the point-of-use or communication to the policy enforcer fails, the policy engine will produce a consequence with a policy effect of DENY according to the above policy. If a policy enforcer at the point-of-use can be contacted, the policy engine at the file server requests the originating interception data from the workstation policy enforcer. In this case, assume the policy engine <b>2222</b> has successfully connected to the policy enforcer on workstation <b>2218</b>.</p>
<p id="p-0481" num="0483">Step <b>10</b> (<b>2210</b>): The workstation policy enforcer returns the originating interception data to the file server policy engine <b>2222</b>. In this case, the action intercepted at the point-of-use is OPEN. The policy engine evaluates the relevant policies using the data collected by the local interceptor, data requested from the workstation policy enforcer, and data available to the file server policy enforcer. Assume the policy evaluation process produces a consequence that contains a policy effect of ALLOW.</p>
<p id="p-0482" num="0484">Step <b>11</b> (<b>2211</b>): The policy consequence is returned to the interceptor and consequence applicator <b>2223</b>. Since the consequence contains a policy effect of ALLOW, the consequence applicator does not block the file open request.</p>
<p id="p-0483" num="0485">Step <b>12</b> (<b>2212</b>): The file open request is processed by the network file share protocol driver <b>2224</b>.</p>
<p id="p-0484" num="0486">Steps <b>13</b>-<b>17</b> (<b>2213</b>-<b>2217</b>): The steps between step <b>13</b> and step <b>17</b> as shown in the diagram may or may not be carried out depending on policy enforcer and file server implementations. The following outlines one of the possible scenarios:</p>
<p id="p-0485" num="0487">(1) In step <b>12</b> (<b>2212</b>), the network file share protocol driver <b>2224</b> logic results in a call to the file system device driver <b>2226</b>. The call is intercepted at step <b>13</b> (<b>2213</b>) by an interceptor and consequence applicator <b>2225</b>. The interceptor collects information about the intercepted operation and forwards that data to the policy engine <b>2222</b>. Policy engine evaluates relevant policies in step <b>14</b> (<b>2214</b>) and returns a policy effect of ALLOW to the interceptor and consequence applicator <b>2225</b>. In step <b>15</b> (<b>2215</b>), the interceptor and consequence applicator allows the call to be carried out. In step <b>16</b> and <b>17</b> (<b>2216</b>, <b>2217</b>), file system device driver logic is executed to serve the file open request which involves accessing data on a local disk.</p>
<p id="p-0486" num="0488"><figref idref="DRAWINGS">FIG. 22</figref><i>b </i>illustrates an embodiment where a workstation policy enforcer transmits information obtained at a workstation to a file server policy enforcer to support policy evaluation at the file server policy enforcer.</p>
<p id="p-0487" num="0489">The definition of the policy of interest that is evaluated at the file server is:</p>
<p id="p-0488" num="0490">
<tables id="TABLE-US-00021" num="00021">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="1" colwidth="56pt" align="left"/>
<colspec colname="2" colwidth="161pt" align="left"/>
<thead>
<row>
<entry namest="1" nameend="2" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>FOR document.category = &#x201c;Private&#x201d;</entry>
</row>
<row>
<entry/>
<entry>ON POU:COPY</entry>
</row>
<row>
<entry/>
<entry>DO DENY OTHERS ALLOW</entry>
</row>
<row>
<entry namest="1" nameend="2" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0489" num="0491">The prefix &#x201c;POU:&#x201d; in POU:COPY is an information exchange directive that instructs a policy engine that evaluates the policy to perform an evaluation based on information (here, an action) related to the operation gathered at a point-of-use. In this case, the point-of-use is a workstation that initiated the operation.</p>
<p id="p-0490" num="0492">An alternative syntax is:</p>
<p id="p-0491" num="0493">
<tables id="TABLE-US-00022" num="00022">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="203pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>FOR document.category = &#x201c;Private&#x201d;</entry>
</row>
<row>
<entry/>
<entry>ON OPEN</entry>
</row>
<row>
<entry/>
<entry>WHERE POU-POLICY-ENFORCER(ACTION = {COPY})</entry>
</row>
<row>
<entry/>
<entry>DO DENY OTHERS ALLOW</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0492" num="0494">The above policy specification uses information exchange directives to instruct a policy engine that evaluates the policy to perform a prescribed function. The directive POU-POLICY-ENFORCER instructs the policy engine to check if an action intercepted at a point-of-use by a policy enforcer that is associated with the operation is COPY.</p>
<p id="p-0493" num="0495">In other words, the policy describes if a file server policy enforcer does not have information to enforce a policy on a copy action, it should acquire the information needed to enforce the policy. In this case, to examine a request message for information attached by a workstation policy enforcer that initiated the request.</p>
<p id="p-0494" num="0496">This example illustrates a collaborative policy evaluation that relies on information exchange between two policy enforcers. It shows a file server policy enforcer trying to enforce a policy that requires user action information captured at a point-of-use (by a workstation policy enforcer). In order to evaluate the policy at a file server, a workstation policy enforcer attaches information it has gathered about an operation to one or more messages it sends to the file server. A file server policy enforcer examines the messages it receives for such attached information and uses the information in policy evaluation. If a file server policy enforcer cannot find such attached information, a policy that specifies point-of-use information (such as the above policy) may evaluate to an effect DENY.</p>
<p id="p-0495" num="0497">A message where a workstation policy enforcer may attach point-of-use information includes: Internet Protocol message (e.g., User Datagram Protocol (UDP) or Transmission Control Protocol (TCP) message), network file share protocol message (e.g., CIFS or NFS message), or application protocol message (e.g., HTTP, SOAP, XML-RPC, SMTP, POP3, IMAP4, FTP or WebDAV message).</p>
<p id="p-0496" num="0498">According to the above policy, if a workstation policy enforcer tells a file server policy enforcer that an action it has intercepted was OPEN (an action OPEN intercepted at a point-of-use may correspond to a user action of viewing a file), the above policy should evaluate to a policy effect of ALLOW at the file server. On the other hand, if the workstation policy enforcer tells the file server policy enforcer that the intercepted action was COPY, the above policy should evaluate to a policy effect DENY.</p>
<p id="p-0497" num="0499">The following example details a sequence of events that occur during the evaluation of a file server policy that requires information exchange.</p>
<p id="p-0498" num="0500">Step <b>1</b> (<b>2264</b>): A user at a workstation <b>2251</b> tries to open a file for viewing.</p>
<p id="p-0499" num="0501">Step <b>2</b> (<b>2265</b>): An application program interceptor and consequence applicator <b>2254</b> on the workstation intercepts the file open operation. The interceptor collects information about the interception which includes the action (e.g., OPEN), the file name, and other application program information and sends the collected data to a policy engine <b>2253</b>.</p>
<p id="p-0500" num="0502">Step <b>3</b> (<b>2266</b>): The policy engine <b>2253</b> receives the data collected by the interceptor and consequence applicator <b>2254</b> and selects policies relevant to the intercepted action and collected data. In this example, assume only the above policy is selected. The policy engine evaluates the selected policies using the collected data along with other data available to the policy engine such as current user and operating environment data. The policy evaluation results in a consequence. Assume in this example that the policy evaluation produces a policy effect of ALLOW.</p>
<p id="p-0501" num="0503">Step <b>4</b> (<b>2267</b>): The policy engine <b>2253</b> makes available all or part of the information collected by the interceptor and consequence applicator <b>2254</b> and any additional information needed to evaluate policy at a file server (together called point-of-use information below) to the enforcer data service adaptor <b>2256</b> for transmission to the file server.</p>
<p id="p-0502" num="0504">Step <b>5</b> (<b>2268</b>): The consequence produced by the policy engine <b>2253</b> is returned to the interceptor and consequence applicator <b>2254</b>. The interceptor and consequence applicator component is composed of two functional parts: interceptor, and consequence applicator. The interceptor is responsible of intercepting application program actions and the consequence applicator is responsible for applying decisions (or consequences) made by the policy engine. Since the consequence produced by the policy evaluation in this example contains a policy effect of ALLOW, the operation is not blocked by the consequence applicator.</p>
<p id="p-0503" num="0505">Step <b>6</b> (<b>2269</b>): The application program logic required to carry out the file open operation is executed.</p>
<p id="p-0504" num="0506">Step <b>7</b> (<b>2270</b>): The file open application program logic resulted in one or more network packets being sent through a network device driver <b>2255</b>. The network packets are intercepted by the enforcer data service adaptor <b>2256</b> and the point-of-use information is placed on at least one network packets being intercepted.</p>
<p id="p-0505" num="0507">In an alternative implementation, the point-of-use information may be provided by the interceptor and consequence applicator <b>2254</b> in step <b>2</b> (<b>2265</b>). In this case, if no other information needs to be furnished by the policy engine <b>2253</b>, step <b>4</b> (<b>2267</b>) may be eliminated.</p>
<p id="p-0506" num="0508">Step <b>8</b> (<b>2271</b>): Network packets originated from the workstation found its way to a file server <b>2252</b>. The enforcer data service adaptor <b>2260</b> at the file server intercepts network packets arrived at the file server and extract the point-of-use information attached in step <b>7</b> (<b>2270</b>). The point-of-use information extracted is made available to a policy engine <b>2257</b> at the file server. The enforcer data service adaptor <b>2260</b> passes network packets to a network device driver <b>2261</b> to continue normal processing of network traffic.</p>
<p id="p-0507" num="0509">Step <b>9</b> (<b>2272</b>): For network file share protocol traffic, the network device driver <b>2261</b> at the file server passes network packets (or messages) it receives to a network file share protocol driver <b>2259</b> for further processing. Before the network packets reach the network file share protocol driver, they are intercepted by an interceptor and consequence applicator <b>2258</b> at the file server. The interceptor collects information about an operation (e.g., a file open request) and forwards the collected data to a policy engine <b>2257</b> at the file server.</p>
<p id="p-0508" num="0510">Step <b>10</b> (<b>2273</b>): The policy engine <b>2257</b> receives the data collected by the interceptor and consequence applicator <b>2258</b> and selects relevant policies based on the data received. Among the policies, one policy (here, the above policy) contains information exchange directives that specify information to be obtained from the point-of-use (i.e., the workstation <b>2251</b> that initiated the file open request).</p>
<p id="p-0509" num="0511">Note that POU:COPY policy syntax implicitly maps to a local OPEN action making the policy relevant to an OPEN operation that is intercepted locally.</p>
<p id="p-0510" num="0512">Policy engine <b>2257</b> attempts to locate point-of-use information provided by the workstation that initiated the operation. In this case, an attempt to locate point-of-use information is successful and the point-of-use information provided in step <b>8</b> (<b>2271</b>) is found. The point-of-use information contains an action OPEN. As a result, the above policy is not selected (the policy applies if an action contains in the point-of-use information is COPY).</p>
<p id="p-0511" num="0513">The policy engine determines a set of relevant policies and evaluates the relevant policies using the data collected by the local interceptor, the point-of-use information, and data available to the file server policy enforcer. In this case, assume the policy evaluation process produces a consequence that contains a policy effect of ALLOW.</p>
<p id="p-0512" num="0514">In a specific implementation, the above policy is selected even though the point-of-use action is OPEN (not COPY) and evaluation of the policy produce an effect ALLOW.</p>
<p id="p-0513" num="0515">Step <b>11</b> (<b>2274</b>): The policy consequence is returned to the interceptor and consequence applicator <b>2258</b>. Since the policy consequence contains a policy effect of ALLOW, the consequence applicator does not block the file open request.</p>
<p id="p-0514" num="0516">Step <b>12</b> (<b>2275</b>): The file open request is processed by the network file share protocol driver <b>2259</b>.</p>
<p id="p-0515" num="0517">Steps <b>13</b>-<b>17</b> (<b>2276</b>-<b>2280</b>): The steps between step <b>13</b> and step <b>17</b> as shown in the diagram may or may not be carried out depending on policy enforcer and file server implementations. The following outlines one of the possible scenarios:</p>
<p id="p-0516" num="0518">(1) In step <b>12</b> (<b>2275</b>), the network file share protocol driver logic results in a call to the file system device driver <b>2263</b>. The call is intercepted at step <b>13</b> (<b>2276</b>) by an interceptor and consequence applicator <b>2262</b>. The interceptor collects information about the intercepted operation and forwards that data to the policy engine <b>2257</b>. The policy engine evaluates relevant policies in step <b>14</b> (<b>2277</b>) and returns a policy effect of ALLOW to the interceptor and consequence applicator <b>2262</b>. In step <b>15</b> (<b>2278</b>), the interceptor and consequence applicator allows the call to be carried out. In step <b>16</b> and <b>17</b> (<b>2279</b>, <b>2280</b>), file system device driver logic is executed to serve the file open request which involves accessing data on a local disk.</p>
<p id="p-0517" num="0519">The enforcer data service adaptors <b>2256</b> and <b>2260</b> illustrated in this example are associated with network device drivers and attach data to and extract data from network packets respectively. In another implementation of information exchange, the enforcer data service adaptor <b>2256</b> at the workstation creates one or more custom data packets containing point-of-use information and sends them to the file server <b>2252</b>. These custom data packets are processed by enforcer data service adaptor <b>2260</b> at the file server which extracts point-of-use information from the custom data packets and make the point-of-use information available to the policy engine <b>2257</b>.</p>
<p id="p-0518" num="0520">In another implementation of information exchange, at workstation <b>2252</b>, an enforcer data service adaptor <b>2256</b> attaches control information to regular network packets and creates custom network packets to hold point-of-use information and sends them to a file server <b>2252</b>. At the file server, an enforcer data service adaptor <b>2260</b> extracts control information from regular network packets and extracts point-of-use information from custom data packets making the point-of-use information available to a policy engine <b>2257</b>.</p>
<p id="p-0519" num="0521">In a specific implementation, the control information attached to a regular network packet contains a flag to indicate point-of-use information is available on request and the enforcer data service adaptor <b>2260</b> at the file server sends a request to the workstation to request point-of-use information. In response to the request, the enforcer data service adaptor <b>2256</b> at the workstation sends the above custom network packets to the file server.</p>
<p id="p-0520" num="0522">In another implementation of information exchange, a first enforcer data service adaptor is associated with a network file share protocol client (e.g., CIFS or NFS client) at a workstation and a second enforcer data service adaptor is associated with a network file share protocol driver (such as <b>2259</b>) at a file server. The first enforcer data service adaptor attaches point-of-use information collected at the workstation to one or more network file share protocol messages and the second enforcer data service adaptor extracts the point-of-use information attached. The point-of-use information extracted is made available to a policy engine at a file server.</p>
<p id="p-0521" num="0523">In another implementation of information exchange, a first enforcer data service adaptor is associated with a network file share protocol client (e.g., CIFS or NFS client) at a workstation and a second enforcer data service adaptor is associated with a network file share protocol driver (such as <b>2259</b>) at a file server. The first enforcer data service adaptor sends point-of-use information collected at the workstation in one or more custom messages to the file server and the second enforcer data service adaptor extracts point-of-use information from the one or more custom messages. The point-of-use information is made available to a policy engine at the file server.</p>
<p id="p-0522" num="0524">In another implementation of information exchange, a point-of-use enforcer data service adaptor is associated with network file share protocol client (e.g., CIFS or NFS) and a file server enforcer data service adaptor is associated with a network file share protocol driver (such as <b>2259</b>). The point-of-use enforcer data service adaptor attaches information collected at the point-of-use to network files protocol messages and sends enforcer specific messages to a file server. The file server enforcer data service adaptor extracts information attached to network file share protocol messages and process enforcer specific messages sent by a point-of-use enforcer data service adaptor.</p>
<p id="p-0523" num="0525">In another implementation of information exchange, a first enforcer data service adaptor is associated with a client application program on a workstation and a second enforcer data service adaptor is associated with a server application program (e.g., HTTP server) on a document server. The first enforcer data service adaptor attaches point-of-use information collected at the workstation by inserting one or more message headers into a message (e.g., HTTP GET or POST). The second enforcer data service adaptor extracts the point-of-use information from the one or more message headers. The point-of-use information is made available to a policy engine at the document server.</p>
<p id="p-0524" num="0526"><figref idref="DRAWINGS">FIG. 23</figref> illustrates an embodiment where a file server policy enforcer allows access to a file only if a workstation policy enforcer is detected on a client computer that requested the file.</p>
<p id="p-0525" num="0527">The policy definition is:</p>
<p id="p-0526" num="0528">
<tables id="TABLE-US-00023" num="00023">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="42pt" align="left"/>
<colspec colname="1" colwidth="175pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>FOR document.name = &#x201c;//server1/legal/**&#x201d;</entry>
</row>
<row>
<entry/>
<entry>ON OPEN</entry>
</row>
<row>
<entry/>
<entry>BY user = Legal, M&#x26;A-Team</entry>
</row>
<row>
<entry/>
<entry>WHERE POLICY-ENFORCER-AT-POU</entry>
</row>
<row>
<entry/>
<entry>DO ALLOW AND OTHERS DENY</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0527" num="0529">An alternative syntax:</p>
<p id="p-0528" num="0530">
<tables id="TABLE-US-00024" num="00024">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="42pt" align="left"/>
<colspec colname="1" colwidth="175pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>FOR document.name = &#x201c;//server1/legal/**&#x201d;</entry>
</row>
<row>
<entry/>
<entry>ON OPEN</entry>
</row>
<row>
<entry/>
<entry>BY user = Legal, M&#x26;A-Team</entry>
</row>
<row>
<entry/>
<entry>WHERE pou.hasPolicyEnforcer</entry>
</row>
<row>
<entry/>
<entry>DO ALLOW AND OTHERS DENY</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0529" num="0531">The following policy includes additional information on point-of-use policy enforcer capabilities.</p>
<p id="p-0530" num="0532">
<tables id="TABLE-US-00025" num="00025">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="203pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>FOR document.name = &#x201c;//server1/legal/**&#x201d;</entry>
</row>
<row>
<entry/>
<entry>ON OPEN</entry>
</row>
<row>
<entry/>
<entry>BY user = Legal, M&#x26;A-Team</entry>
</row>
<row>
<entry/>
<entry>WHERE POLICY-ENFORCER-AT-POU AND POU-POLICY-</entry>
</row>
<row>
<entry/>
<entry>ENFORCER(</entry>
</row>
<row>
<entry/>
<entry>&#x2002;CAPABILITY = {SAVE, CUT-AND-PASTE};</entry>
</row>
<row>
<entry/>
<entry>&#x2002;POLICY-VERSION &#x3e;= {1.32})</entry>
</row>
<row>
<entry/>
<entry>DO ALLOW AND OTHERS DENY</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0531" num="0533">The transfer-of-control directives specified in the above policies instruct a policy engine to perform one or more prescribed functions. The directive POLICY-ENFORCER-AT-POU (or pou.hasPolicyEnforcer) instructs a policy engine that evaluates the policy (that specifies the directive) to check if there is a policy enforcer at a point-of-use where the point-of-use is a workstation that initiated the operation intercepted at a document server. The directive POU-POLICY-ENFORCER instructs a policy engine to verify if a policy enforcer at a point-of-use (e.g., a workstation policy enforcer) can enforce SAVE and CUT-AND-PASTE capabilities and policies being enforced at the point-of-use is at least version 1.32 or newer.</p>
<p id="p-0532" num="0534">The function of the policy is to make sure a controlled document does not become uncontrolled once the document is loaded into an application. Consider that a user in a M&#x26;A-Team opens a legal document in &#x201c;//server1/legal/&#x201d; in Microsoft Word. The operation is successful because users in M&#x26;A-Team are allowed to open such file. Now, the user performs &#x201c;File|Save As&#x201d; with a local file path. If the save operation is successful, the newly saved copy of the controlled document becomes uncontrolled unless the workstation the user is using is controlled by a workstation policy enforcer that is capable of providing equivalent level of protection to the newly created copy of the document.</p>
<p id="p-0533" num="0535">A document server policy enforcer protects (or controls) documents when a document is retrieved from a document server or a repository protected by the document server policy enforcer. Once a document server policy enforcer grants access to a document on a document server to a workstation requesting the document, it can no long control reproduction (e.g., copy or print) or distribution (e.g., send by e-mail or transfer using FTP) of the document. To prevent a controlled document from becoming uncontrolled, a document server policy enforcer only grants document access to a workstation that has the ability to continue the same level of control provided by the document server policy enforcer. Document server policy enforcer accomplishes this objective by verifying if a workstation requesting access to a document has a policy enforcer installed on it.</p>
<p id="p-0534" num="0536">For example, a user in the M&#x26;A-Team can open a file in &#x201c;//server1/legal/&#x201d; when the user is logged on to a computer with a workstation policy enforcer running. When the same user logs on to a computer that does not have a workstation policy enforcer installed, the file open operation fails.</p>
<p id="p-0535" num="0537">The following is a description of a policy enforcement process:</p>
<p id="p-0536" num="0538">Step <b>1</b> (<b>2301</b>): A user at a workstation <b>2318</b> tries to open a file for viewing.</p>
<p id="p-0537" num="0539">Step <b>2</b> (<b>2302</b>): An application program interceptor and consequence applicator component <b>2320</b> on the workstation intercepts the file open operation. The interceptor collects information about the interception which includes the action (OPEN), the file name, and other application program information, and sends the collected data to the policy engine <b>2319</b>.</p>
<p id="p-0538" num="0540">Step <b>3</b> (<b>2303</b>): The policy engine <b>2319</b> receives the data collected by the interceptor and consequence applicator <b>2320</b> and selects policies relevant to the intercepted action and collected data. In this example, assume only the above policy is selected. The policy engine evaluates the selected policies using the collected data along with other data available to the policy engine such as the current user and operating environment data. The policy evaluation results in a consequence. In this example the policy evaluation produces a policy effect of ALLOW.</p>
<p id="p-0539" num="0541">Step <b>4</b> (<b>2304</b>): The consequence produced by the policy engine <b>2319</b> is returned to the interceptor and consequence applicator. The interceptor and consequence applicator component (I&#x26;CA) is composed of two functional parts: interceptor, and consequence applicator <b>2320</b>. The interceptor is responsible of intercepting application program actions and the consequence applicator is responsible for applying decisions (or consequences) made by the policy engine. Since the consequence produced by the policy evaluation in this example contains a policy effect of ALLOW, the operation is not blocked by the consequence applicator.</p>
<p id="p-0540" num="0542">Step <b>5</b> (<b>2305</b>): The application program logic required to carry out the file open operation is executed.</p>
<p id="p-0541" num="0543">Step <b>6</b> (<b>2306</b>): Execution of the application program logic results in a file open request at the file server <b>2321</b>.</p>
<p id="p-0542" num="0544">Step <b>7</b> (<b>2307</b>): The file open request is intercepted by a network file share protocol interceptor and consequence applicator <b>2323</b> at the file server. The interceptor collects information about the file open request and forwards the collected data to a policy engine <b>2322</b> on the file server.</p>
<p id="p-0543" num="0545">Step <b>8</b> (<b>2308</b>): The policy engine <b>2322</b> receives the data collected by the interceptor and consequence applicator <b>2323</b> and selects relevant policies based on the data received. Among the policies selected, one policy (here, assume one of the above policies or <b>2327</b>) contains a transfer-of-control directive that requires the presence of a point-of-use policy enforcer (i.e., a workstation <b>2318</b> that initiates the file open request).</p>
<p id="p-0544" num="0546">Step <b>9</b> (<b>2309</b>): The policy engine <b>2322</b> attempts to detect the presence of a policy enforcer at the point-of-use. If a policy enforcer cannot be detected at the point-of-use or communication to the policy enforcer fails, the policy engine will produce a consequence with a policy effect of DENY according to the above policy. In this case, assume a policy enforcer at the point-of-use can be contacted and the policy condition is satisfied, a consequence containing a policy effect of ALLOW is created.</p>
<p id="p-0545" num="0547">Step <b>10</b> (<b>2310</b>): Optionally, if a policy enforcer at the point-of-use can be contacted and a policy containing a transfer-of-control directive (referred to as &#x201c;transfer-of-control policy&#x201d; below) requests that the point-of-use policy enforcer capabilities be communicated to the file server policy enforcer, the policy engine <b>2322</b> at the file server makes a request to the workstation policy enforcer. The workstation policy enforcer returns the requested information to the file server policy engine. If the workstation policy enforcer capabilities do not match that required by the transfer-of-control policy, the policy evaluation produces a consequence that contains a policy effect of DENY. Alternatively, the request to the workstation policy enforcer can be a query that inquires if the workstation policy enforcer supports the requested capabilities specified in the policy.</p>
<p id="p-0546" num="0548">Step <b>11</b> (<b>2311</b>): The policy consequence is returned to interceptor and consequence applicator component <b>2323</b>. Since the consequence contains the policy effect ALLOW, the consequence applicator does not block the file open request.</p>
<p id="p-0547" num="0549">Step <b>12</b> (<b>2312</b>): The file open request is processed by the network file share protocol driver <b>2324</b>.</p>
<p id="p-0548" num="0550">Steps <b>13</b>-<b>17</b> (<b>2313</b>-<b>2317</b>): The steps between step <b>13</b> and step <b>17</b> as shown in the figure may or may not be carried out depending on policy enforcer and file server implementations. The following outlines one of the possible scenarios:</p>
<p id="p-0549" num="0551">(1) In step <b>12</b> (<b>2312</b>), the network file share protocol driver <b>2324</b> logic results in a call to the file system device driver <b>2326</b>. The call is intercepted at step <b>13</b> (<b>2313</b>) by an interceptor and consequence applicator component <b>2325</b>. The interceptor collects information about the intercepted operation and forwards that data to the policy engine <b>2322</b>. Policy engine evaluates relevant policies in step <b>14</b> (<b>2314</b>) and returns a policy effect of ALLOW to the consequence applicator. In step <b>15</b> (<b>2315</b>), the interceptor and consequence applicator allows the call to be carried out. In steps <b>16</b> and <b>17</b> (<b>2316</b>, <b>2317</b>) the file system device driver logic is executed to serve the file open request which involves accessing data on a local disk.</p>
<p id="p-0550" num="0552"><figref idref="DRAWINGS">FIG. 24</figref> illustrates an embodiment where a copy operation is performed from a file server to a destination workstation and the destination workstation does not have a policy enforcer which results in a denial of the operation.</p>
<p id="p-0551" num="0553">The policy definition is:</p>
<p id="p-0552" num="0554">
<tables id="TABLE-US-00026" num="00026">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="28pt" align="left"/>
<colspec colname="1" colwidth="189pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>FOR document.name = &#x201c;//server1/legal/**&#x201d;</entry>
</row>
<row>
<entry/>
<entry>ON COPY</entry>
</row>
<row>
<entry/>
<entry>BY user = Legal</entry>
</row>
<row>
<entry/>
<entry>WHERE POLICY-ENFORCER-AT-DESTINATION</entry>
</row>
<row>
<entry/>
<entry>DO ALLOW AND OTHERS DENY</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0553" num="0555">An alternative syntax:</p>
<p id="p-0554" num="0556">
<tables id="TABLE-US-00027" num="00027">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="42pt" align="left"/>
<colspec colname="1" colwidth="175pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>FOR document.name = &#x201c;//server1/legal/**&#x201d;</entry>
</row>
<row>
<entry/>
<entry>ON COPY</entry>
</row>
<row>
<entry/>
<entry>BY user = Legal</entry>
</row>
<row>
<entry/>
<entry>WHERE destination.hasPolicyEnforcer</entry>
</row>
<row>
<entry/>
<entry>DO ALLOW AND OTHERS DENY</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0555" num="0557">Below is an alternative policy that implements the same transfer-of-control function but with an additional list of required capabilities.</p>
<p id="p-0556" num="0558">
<tables id="TABLE-US-00028" num="00028">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="203pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>FOR document.name = &#x201c;//server1/legal/**&#x201d;</entry>
</row>
<row>
<entry/>
<entry>ON COPY</entry>
</row>
<row>
<entry/>
<entry>BY user = Legal</entry>
</row>
<row>
<entry/>
<entry>WHERE POLICY-ENFORCER-AT-DESTINATION</entry>
</row>
<row>
<entry/>
<entry>&#x2002;AND DESTINATION-POLICY-ENFORCER(CAPABILITY=</entry>
</row>
<row>
<entry/>
<entry>&#x2002;{COPY,PRINT})</entry>
</row>
<row>
<entry/>
<entry>DO ALLOW AND OTHERS DENY</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0557" num="0559">The transfer-of-control directives specified in the above policies instruct a policy engine to perform one or more prescribed functions. The directive POLICY-ENFORCER-AT-DESTINATION (or destination.hasPolicyEnforcer) instructs a policy engine that evaluates the policy containing the directive to check if there is a policy enforcer at the destination of the operation. In this case, the destination is a workstation or server where the document(s) are copied to. The directive DESTINATION-POLICY-ENFORCER instructs a policy engine to verify if a destination policy enforcer (e.g., a workstation policy enforcer or a document server policy enforcer) has the capabilities and/or policies to enforce COPY and PRINT actions.</p>
<p id="p-0558" num="0560">The above policy specifies that files in &#x201c;//server1/legal/&#x201d; can be copied only to a workstation or document server with a policy enforcer running. This policy can be enforced at a document server which guarantees that protected files on the document server are not copied to unprotected workstations (or document servers). The function of this policy is to prevent a protected document from becoming unprotected once it leaves the protected environment.</p>
<p id="p-0559" num="0561">Step <b>1</b> (<b>2401</b>): A user (or an application program) takes an action to copy a file on a file server <b>2415</b> to a workstation's local disk <b>2414</b> (the following works the same if a copy is attempted between file servers and the destination of a copy operation is different from the point-of-use).</p>
<p id="p-0560" num="0562">Step <b>2</b> (<b>2402</b>): Application program code is executed on the workstation <b>2414</b> to implement the user (or application program) action mentioned in step <b>1</b>. Execution of the application program code results in a file request at the file server <b>2415</b>.</p>
<p id="p-0561" num="0563">Step <b>3</b> (<b>2403</b>): File request is intercepted at the file server's network file share protocol driver by an interceptor and consequence applicator <b>2417</b>. The interceptor collects information associated with the interception (i.e., action, document identifier, client IP address, etc.) and sends it to a policy engine <b>2416</b> running on the file server.</p>
<p id="p-0562" num="0564">Step <b>4</b> (<b>2404</b>): The policy engine <b>2416</b> takes the information collected by the interceptor and consequence applicator <b>2417</b> and selects policies relevant to the intercepted data. Among the selected policies, at least one policy (here, assume one of the above policies or <b>2421</b>) contains a transfer-of-control directive that requires a policy enforcer to be present at the destination.</p>
<p id="p-0563" num="0565">Step <b>5</b> (<b>2405</b>): The policy engine <b>2416</b> attempts to communicate with a policy enforcer at the destination <b>2414</b>. Since there is no policy enforcer at the destination, the policy containing a transfer-of-control directive (referred to as &#x201c;transfer-of-control policy&#x201d; below) produces a consequence that contains a policy effect of DENY. In the case where the copy operation's destination is a file server <b>2412</b> with a policy enforcer installed and policy conditions are satisfied, a policy effect ALLOW is produced.</p>
<p id="p-0564" num="0566">Step <b>6</b> (<b>2406</b>): If a policy enforcer at the destination can be contacted and a transfer-of-control policy requests that the destination policy enforcer capabilities be communicated to the file server policy enforcer, the policy engine <b>2416</b> at &#x201c;File Server 1&#x201d; <b>2415</b> makes a request to the policy enforcer at &#x201c;File Server 2&#x201d; <b>2412</b>. The policy enforcer at &#x201c;File Server 2&#x201d; <b>2412</b> returns the requested information to the policy engine <b>2416</b>. If the destination policy enforcer capabilities do not match those required by the transfer-of-control policy, the policy evaluation produces a consequence that contains a policy effect of DENY. Alternatively, the request to the destination policy enforcer can be a query that inquires if the destination policy enforcer supports the requested capabilities specified in the policy.</p>
<p id="p-0565" num="0567">Step <b>7</b> (<b>2407</b>): The interceptor and consequence applicator <b>2417</b> receives the consequence from the policy evaluation. The policy effect of DENY in the consequence results in blocking the file operation at the file server <b>2415</b>.</p>
<p id="p-0566" num="0568">Steps <b>8</b>-<b>11</b> (<b>2408</b>-<b>2411</b>): Depending on the policy enforcer implementation, the implementation of the policy effect in step <b>6</b> may be delayed to step <b>11</b> (<b>2411</b>). Discussions on different server interception techniques are described above (refer to descriptions for <figref idref="DRAWINGS">FIG. 10</figref>).</p>
<p id="p-0567" num="0569">(1) In a slightly different scenario, the policy engine <b>2416</b> may decide that step <b>4</b> is just an information collection step and defer the policy evaluation to step <b>10</b> and the COPY action is terminated at step <b>11</b> (<b>2411</b>) in file system device driver interceptor and consequence applicator <b>2419</b>.</p>
<p id="p-0568" num="0570">(2) In yet another embodiment, the interceptor and consequence applicator <b>2417</b> at step <b>3</b> does not communicate with the policy enforcer but communicates with the second interceptor and consequence applicator <b>2419</b> (or stores collected data in shared memory). The information collected at step <b>3</b> is made available to step <b>9</b> (<b>2409</b>). In this case, the policy evaluation is deferred to step <b>10</b> (<b>2410</b>) and the COPY action is terminated at step <b>11</b> (<b>2411</b>).</p>
<p id="p-0569" num="0571">(3) Some implementations may use only one interceptor and consequence applicator (rather than two). For example, an implementation may use only file system device driver interceptors but not network file sharing protocol interceptors.</p>
<p id="p-0570" num="0572"><figref idref="DRAWINGS">FIG. 25</figref> illustrates an embodiment where a workstation policy engine delegates evaluation of a policy to a policy decision server because the information about a recipient in a message is unavailable at the workstation.</p>
<p id="p-0571" num="0573">The definition of a delegation policy used in this example is:</p>
<p id="p-0572" num="0574">
<tables id="TABLE-US-00029" num="00029">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="203pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>FOR message.category = &#x201c;Sensitive&#x201d;</entry>
</row>
<row>
<entry/>
<entry>ON SEND</entry>
</row>
<row>
<entry/>
<entry>BY user = Employees</entry>
</row>
<row>
<entry/>
<entry>TO message.recipients &#x3c; &#x3e; Employees</entry>
</row>
<row>
<entry/>
<entry>DO DELEGATE-TO &#x201c;PDServer1&#x201d; EVALUATE ${event-data}</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0573" num="0575">A delegation directive, DELEGATE-TO, is used in the delegation policy to instruct a policy engine to perform a delegation function. The DELEGATE-TO directive may specify a delegation target (i.e., &#x201c;PDServer1&#x201d;) at which policy evaluation should be performed. In addition, an EVALUATE directive instructs a policy engine to direct a delegation target to perform policy evaluation with event data (here, ${event-data}) provided by the policy engine. The event data may include: action, resource(s), user, computer and application associated with an intercepted operation. Event data is transmitted to a delegation target as part of the delegation process.</p>
<p id="p-0574" num="0576">Definition of the delegation target policy used in this example is:</p>
<p id="p-0575" num="0577">
<tables id="TABLE-US-00030" num="00030">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="203pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>FOR message.category = &#x201c;Sensitive&#x201d;</entry>
</row>
<row>
<entry/>
<entry>ON SEND</entry>
</row>
<row>
<entry/>
<entry>BY user = Employees</entry>
</row>
<row>
<entry/>
<entry>TO message.recipients &#x3c; &#x3e; Employees</entry>
</row>
<row>
<entry/>
<entry>&#x2002;AND INVOKE CheckProjectNDAOnRecord(${recipients})</entry>
</row>
<row>
<entry/>
<entry>DO ALLOW OTHERWISE DENY</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0576" num="0578">The delegation target policy uses a special directive INVOKE to invoke a user-defined function CheckProjectNDAOnRecord( ). The user-defined function checks if all recipients (here, ${recipient} which is part of ${event-data}) of the message (this operation involve sending an e-mail message) have signed non-disclosure agreements (NDA). Since customer, vendor and partner information is not maintained by policy enforcers and policy server, a user-defined function is used to carry out the NDA validation process.</p>
<p id="p-0577" num="0579">In this example, the delegation policy is evaluated at a workstation and the delegation target policy is evaluated at a policy decision server. When policy evaluation at a workstation policy enforcer involves the delegation policy, a delegation process is trigged. The delegation process causes policy evaluation to be invoked at a policy decision server. In this case, the policy decision server is PDServer1 and the policy being evaluated at the policy decision server is the delegation target policy.</p>
<p id="p-0578" num="0580">Step <b>1</b> (<b>2501</b>): A user sends an e-mail message using Microsoft Outlook.</p>
<p id="p-0579" num="0581">Step <b>2</b> (<b>2502</b>): The send message operation is intercepted by an application program interceptor and consequence applicator <b>2511</b> installed in Microsoft Outlook. The interceptor collects information about the send operation and forwards that information to a policy engine <b>2512</b> running on the workstation <b>2510</b>.</p>
<p id="p-0580" num="0582">Step <b>3</b> (<b>2503</b>): The policy engine <b>2512</b> receives the data collected by the interceptor and consequence applicator <b>2511</b> and selects policies relevant to the data received. Among the relevant policies, there is a policy (here, assume the above workstation delegation policy) containing a delegation directive that instructs the policy engine to delegate policy evaluation to another policy engine if the conditions of the delegation policy are satisfied. Assume the policy engine proceeds with the policy evaluation and the condition in the delegation policy is satisfied. The result of the policy evaluation includes a policy effect to be produced by delegating policy evaluation to another policy engine.</p>
<p id="p-0581" num="0583">Step <b>4</b> (<b>2504</b>): The consequence portion of the delegation policy <b>2515</b> requires that the policy engine <b>2512</b> obtain a policy effect through delegating the policy execution to a policy engine <b>2514</b> on policy decision server &#x201c;PDServer1&#x201d; <b>2513</b>. The policy engine (&#x201c;master&#x201d;) <b>2512</b> on the workstation attempts to communicate with the policy engine (&#x201c;helper&#x201d;) <b>2514</b> on PDServer1. If the master policy engine fails to communicate with the helper policy engine, the policy effect of the delegation policy will be DENY.</p>
<p id="p-0582" num="0584">Step <b>5</b> (<b>2505</b>): In case communications with a helper policy engine on PDServer1 (<b>2513</b>) are successful, the helper policy engine <b>2514</b> receives the delegation policy <b>2515</b> execution request from the master policy engine <b>2512</b> along with all event data collected by the workstation policy enforcer (where the master policy engine is located). The helper policy engine selects policies relevant to the data received and evaluates the relevant policies. The consequence resulting from the policy evaluation is returned to the master policy engine. In this case, assume the above delegation target policy <b>2516</b> is selected, the recipients contained in the event data have non-disclosure agreements on record, and the policy evaluation produces a policy effect of ALLOW.</p>
<p id="p-0583" num="0585">(1) Note that the policy selection step described in step <b>5</b> (<b>2505</b>) is not required if a delegation target policy (<b>2516</b>) or a set of delegation target policies is named in the delegation policy (<b>2515</b>). In this case, the named delegation target policy (<b>2516</b>) or delegation target policy set is evaluated.</p>
<p id="p-0584" num="0586">Step <b>6</b> (<b>2506</b>): The consequence produced by the helper policy engine <b>2514</b> on PDServer1 is returned to the master policy engine <b>2512</b> on the workstation. The master policy engine returns the consequence to the interceptor and consequence applicator <b>2511</b>. In this example, which is a simplified scenario, the consequence produced by the helper policy engine is returned to the interceptor and consequence applicator. In a more complex scenario, this consequence can be combined with other policy consequences in the master policy engine using a combining algorithm to produce a final consequence that is returned to the interceptor and consequence applicator on the workstation.</p>
<p id="p-0585" num="0587">Step <b>7</b> (<b>2507</b>): The interceptor and consequence applicator <b>2511</b> receives the consequence containing a policy effect of ALLOW from by the master policy engine <b>2512</b>. The consequence applicator in the interceptor and consequence applicator <b>2511</b> applies the policy effect ALLOW which allows the send message operation to continue.</p>
<p id="p-0586" num="0588">Step <b>8</b> (<b>2508</b>): Application program code in Microsoft Outlook is executed to complete the send message operation.</p>
<p id="p-0587" num="0589"><figref idref="DRAWINGS">FIG. 26</figref> illustrates an embodiment where a document server policy requires that copies of a file on all workstations be deleted when the master copy of the same file on a document server is deleted.</p>
<p id="p-0588" num="0590">The policy definition is:</p>
<p id="p-0589" num="0591">
<tables id="TABLE-US-00031" num="00031">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="203pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>FOR document.name = &#x201c;//server1/pricing/master/price-list-0105.xls&#x201d;</entry>
</row>
<row>
<entry/>
<entry>ON DELETE</entry>
</row>
<row>
<entry/>
<entry>BY user = Managers</entry>
</row>
<row>
<entry/>
<entry>DO ALLOW AND DELEGATE-TO POU-Policy-Enforcers</entry>
</row>
<row>
<entry/>
<entry>&#x2002;DO DELETE &#x201c;**/pricing/price-list-0105.xls&#x201d;</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0590" num="0592">A delegation directive, DELEGATE-TO, is specified in the policy to instruct a policy engine to delegate policy consequence implementation to all policy enforcers belong to a POU-Policy-Enforcers group. The policy consequence to be implemented (i.e., DELETE &#x201c;**/pricing/price-list-0105.xls&#x201d;) is specified using a DO directive.</p>
<p id="p-0591" num="0593">Step <b>1</b> (<b>2601</b>): A user at a workstation <b>1</b> (<b>2616</b>) tries to delete a master price list file on a file server.</p>
<p id="p-0592" num="0594">Step <b>2</b> (<b>2602</b>): Application program code is executed on workstation <b>1</b> (<b>2616</b>) that results in a delete file request on the file server <b>2617</b>.</p>
<p id="p-0593" num="0595">Step <b>3</b> (<b>2603</b>): A network file share protocol interceptor <b>2619</b> on the file server intercepts the delete file request from workstation <b>1</b> (<b>2616</b>). The interceptor collects information about the delete file request and forwards the collected data to a policy engine <b>2618</b> on the file server.</p>
<p id="p-0594" num="0596">Step <b>4</b> (<b>2604</b>): The policy engine <b>2618</b> on the file server receives the data collected by the interceptor and consequence applicator <b>2619</b> and selects polices relevant to the data received. Among the relevant policies there is a policy (<b>2623</b>) that specifies the delegation of consequence applications to other policy enforcers (referred to as &#x201c;delegation policy&#x201d; below). The policy engine proceeds with the policy evaluation.</p>
<p id="p-0595" num="0597">Step <b>5</b> (<b>2605</b>): The conditions in the delegation policy (<b>2623</b>) are satisfied and the policy engine <b>2618</b> processes the delegation task specified in the consequence portion of the delegation policy (<b>2623</b>). The policy engine (&#x201c;master&#x201d;) <b>2618</b> on the file server attempts to communicate with the &#x201c;POU-Policy-Enforcers&#x201d; specified in the delegation policy (<b>2623</b>). For each point-of-use policy enforcer (&#x201c;helper&#x201d;) contacted, the master policy engine instructs the helper policy enforcer to carry out the portion of the consequence to be delegated.</p>
<p id="p-0596" num="0598">Steps <b>6</b><i>a </i>and <b>6</b><i>b </i>(<b>2606</b>, <b>2607</b>): The helper policy enforcer receives a consequence delegation request from the master policy engine and carries out the delegated consequence accordingly. In this case, if one or more copies of the specified price list file exist, they will be deleted from the workstation's storage devices.</p>
<p id="p-0597" num="0599">Step <b>7</b> (<b>2608</b>): The interceptor and consequence applicator <b>2619</b> receives a consequence returned from the master policy engine. In this case, the consequence contains a policy effect of ALLOW and the interceptor and consequence applicator allows the delete file request to be carried out.</p>
<p id="p-0598" num="0600">Step <b>8</b> (<b>2609</b>): The network file share protocol driver <b>2620</b> logic that implements a delete file request is executed.</p>
<p id="p-0599" num="0601">Steps <b>9</b>-<b>13</b> (<b>2610</b>-<b>2614</b>): The steps between step <b>9</b> and step <b>13</b> as shown in the figure may or may not be carried out depending on policy enforcer and file server implementations. The following outlines one of the possible scenarios:</p>
<p id="p-0600" num="0602">(1) In step <b>8</b> (<b>2609</b>), the network file share protocol driver <b>2620</b> logic results in a call to the file system device driver <b>2622</b>. The call is intercepted at step <b>9</b> (<b>2610</b>) by an interceptor and consequence applicator component <b>2621</b>. The interceptor collects information about the intercepted operation and forwards that data to the policy engine <b>2618</b>. Policy engine evaluates relevant policies in step <b>10</b> (<b>2611</b>) and returns a policy effect of ALLOW to the interceptor and consequence applicator. In step <b>11</b> (<b>2612</b>), the interceptor and consequence applicator allows the call to be carried out. In steps <b>12</b> and <b>13</b> (<b>2613</b>, <b>2614</b>) the file system device driver <b>2622</b> logic is executed to serve the file open request which involves accessing data on a local disk.</p>
<p id="p-0601" num="0603">3.0 Implementation Mechanisms&#x2014;Hardware Overview</p>
<p id="p-0602" num="0604"><figref idref="DRAWINGS">FIG. 27</figref> is a block diagram that illustrates a computer system <b>2700</b> upon which an embodiment of the invention may be implemented. Computer system <b>2700</b> includes a bus <b>2702</b> or other communication mechanism for communicating information, and a processor <b>2704</b> coupled with bus <b>2702</b> for processing information. Computer system <b>2700</b> also includes a main memory <b>2706</b>, such as a random access memory (&#x201c;RAM&#x201d;) or other dynamic storage device, coupled to bus <b>2702</b> for storing information and instructions to be executed by processor <b>2704</b>. Main memory <b>2706</b> also may be used for storing temporary variables or other intermediate information during execution of instructions to be executed by processor <b>2704</b>. Computer system <b>2700</b> further includes a read only memory (&#x201c;ROM&#x201d;) <b>2708</b> or other static storage device coupled to bus <b>2702</b> for storing static information and instructions for processor <b>2704</b>. A storage device <b>2710</b>, such as a magnetic disk or optical disk, is provided and coupled to bus <b>2702</b> for storing information and instructions.</p>
<p id="p-0603" num="0605">Computer system <b>2700</b> may be coupled via bus <b>2702</b> to a display <b>2712</b>, such as a cathode ray tube (&#x201c;CRT&#x201d;), for displaying information to a computer user. An input device <b>2714</b>, including alphanumeric and other keys, is coupled to bus <b>2702</b> for communicating information and command selections to processor <b>2704</b>. Another type of user input device is cursor control <b>2716</b>, such as a mouse, trackball, stylus, or cursor direction keys for communicating direction information and command selections to processor <b>2704</b> and for controlling cursor movement on display <b>2712</b>. This input device typically has two degrees of freedom in two axes, a first axis (e.g., x) and a second axis (e.g., y), that allows the device to specify positions in a plane.</p>
<p id="p-0604" num="0606">The invention is related to the use of computer system <b>2700</b> for controlling document access using centrally managed rules. According to one embodiment of the invention, controlling document access using centrally managed rules is provided by computer system <b>2700</b> in response to processor <b>2704</b> executing one or more sequences of one or more instructions contained in main memory <b>2706</b>. Such instructions may be read into main memory <b>2706</b> from another computer-readable medium, such as storage device <b>2710</b>. Execution of the sequences of instructions contained in main memory <b>2706</b> causes processor <b>2704</b> to perform the process steps described in this application. In alternative embodiments, hard-wired circuitry may be used in place of or in combination with software instructions to implement the invention. Thus, embodiments of the invention are not limited to any specific combination of hardware circuitry and software.</p>
<p id="p-0605" num="0607">The term &#x201c;computer-readable medium&#x201d; as used in this application refers to any medium that participates in providing instructions to processor <b>2704</b> for execution. Such a medium may take many forms, including but not limited to, nonvolatile media, volatile media, and transmission media. Nonvolatile media includes, for example, optical or magnetic disks, such as storage device <b>2710</b>. Volatile media includes dynamic memory, such as main memory <b>2706</b>. Transmission media includes coaxial cables, copper wire and fiber optics, including the wires that comprise bus <b>2702</b>. Transmission media can also take the form of acoustic or light waves, such as those generated during radio wave and infrared data communications.</p>
<p id="p-0606" num="0608">Common forms of computer-readable media include, for example, a floppy disk, a flexible disk, hard disk, magnetic tape, or any other magnetic medium, a CD-ROM, any other optical medium, punchcards, papertape, any other physical medium with patterns of holes, a RAM, a PROM, and EPROM, a FLASH-EPROM, any other memory chip or cartridge, a carrier wave as described here, or any other medium from which a computer can read.</p>
<p id="p-0607" num="0609">Various forms of computer readable media may be involved in carrying one or more sequences of one or more instructions to processor <b>2704</b> for execution. For example, the instructions may initially be carried on a magnetic disk of a remote computer. The remote computer can load the instructions into its dynamic memory and send the instructions over a telephone line using a modem. A modem local to computer system <b>2700</b> can receive the data on the telephone line and use an infrared transmitter to convert the data to an infrared signal. An infrared detector can receive the data carried in the infrared signal and appropriate circuitry can place the data on bus <b>2702</b>. Bus <b>2702</b> carries the data to main memory <b>2706</b>, from which processor <b>2704</b> retrieves and executes the instructions. The instructions received by main memory <b>2706</b> may optionally be stored on storage device <b>2710</b> either before or after execution by processor <b>2704</b>.</p>
<p id="p-0608" num="0610">Computer system <b>2700</b> also includes a communication interface <b>2718</b> coupled to bus <b>2702</b>. Communication interface <b>2718</b> provides a two-way data communication coupling to a network link <b>2720</b> that is connected to a local network <b>2722</b>. For example, communication interface <b>2718</b> may be an integrated services digital network (&#x201c;ISDN&#x201d;) card or a modem to provide a data communication connection to a corresponding type of telephone line. As another example, communication interface <b>2718</b> may be a local area network (&#x201c;LAN&#x201d;) card to provide a data communication connection to a compatible LAN. Wireless links may also be implemented. In any such implementation, communication interface <b>2718</b> sends and receives electrical, electromagnetic or optical signals that carry digital data streams representing various types of information.</p>
<p id="p-0609" num="0611">Network link <b>2720</b> typically provides data communication through one or more networks to other data devices. For example, network link <b>2720</b> may provide a connection through local network <b>2722</b> to a host computer <b>2724</b> or to data equipment operated by an Internet Service Provider (&#x201c;ISP&#x201d;) <b>2726</b>. ISP <b>2726</b> in turn provides data communication services through the world wide packet data communication network now commonly referred to as the &#x201c;Internet&#x201d; <b>2728</b>. Local network <b>2722</b> and Internet <b>2728</b> both use electrical, electromagnetic or optical signals that carry digital data streams. The signals through the various networks and the signals on network link <b>2720</b> and through communication interface <b>2718</b>, which carry the digital data to and from computer system <b>2700</b>, are exemplary forms of carrier waves transporting the information.</p>
<p id="p-0610" num="0612">Computer system <b>2700</b> can send messages and receive data, including program code, through the network(s), network link <b>2720</b> and communication interface <b>2718</b>. In the Internet example, a server <b>2730</b> might transmit a requested code for an application program through Internet <b>2728</b>, ISP <b>2726</b>, local network <b>2722</b> and communication interface <b>2718</b>. In accordance with the invention, one such downloaded application provides for controlling document access using centrally managed rules as described in this application.</p>
<p id="p-0611" num="0613">The received code may be executed by processor <b>2704</b> as it is received, and/or stored in storage device <b>2710</b>, or other nonvolatile storage for later execution. In this manner, computer system <b>2700</b> may obtain application code in the form of a carrier wave.</p>
<p id="p-0612" num="0614">4.0 Extensions and Alternatives</p>
<p id="p-0613" num="0615">In the foregoing specification, the invention has been described with reference to specific embodiments thereof. It will, however, be evident that various modifications and changes may be made thereto without departing from the broader spirit and scope of the invention. The specification and drawings are, accordingly, to be regarded in an illustrative rather than a restrictive sense.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>The invention claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A method of controlling document access using centrally managed rules, the method comprising:
<claim-text>receiving a plurality of rules at a client system from a central rule database, wherein the central rule database is stored externally to the client system and accessible to the client system via a network connection;</claim-text>
<claim-text>storing the plurality of rules in a memory of the client system, wherein the rules contain at least one expression used by the client system to perform access control for documents accessed by the client system;</claim-text>
<claim-text>after the receiving and storing the plurality of rules at the client system, detecting an attempt by an application program on the client system to access a first document on a server, wherein the first document is stored on the server using a first format;</claim-text>
<claim-text>executing an enforcement program module by the client system and installed at the client system to determine whether or not to allow access to documents at the client system, wherein the enforcement program module is separate from the application program, and the enforcement program module is already executing on the client before the application program starts executing on the client system; and</claim-text>
<claim-text>at the client system, evaluating using the enforcement program module by the client system at least one rule from the plurality of rules stored at the client system to determine whether or not to allow the access attempt of the first document on the server further comprising:</claim-text>
<claim-text>based on the access attempt, identifying at least one call to an operating system library function of an operating system executing on the client system comprising determining a translated command including the at least one call to the operating system library function;</claim-text>
<claim-text>when the at least one rule is satisfied, allowing the access attempt, wherein with the allowed access attempt the first document remains in the first format; and</claim-text>
<claim-text>when the at least one rule is not satisfied, disallowing the access attempt comprising:
<claim-text>preventing the at least one call to the operating system library function.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the allowing the access attempt comprises:
<claim-text>receiving the first document at the client system; and</claim-text>
<claim-text>storing the first document at the client system in the first format.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the allowing the access attempt comprises:
<claim-text>receiving a copy of the first document at the client system; and</claim-text>
<claim-text>storing the received copy of the first document in the first format.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the evaluating at least one rule uses information based, at least in part, on any combination of: type of computing environment, user, user group, user role, host, type of computer, group of computers, application program, type of application program, application module, geographical location, access mechanism, connectivity, bandwidth, time of day, day of the week, file path, file name, document size, document timestamp, document owner, document properties, historical data from previous or computing environments, document type, document format, document classification, document characteristics, document content, database query, database query result set, or metadata.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the client system includes any of: laptop computer, desktop computer, personal digital assistant (PDA), smart phone, thin client, an instance of a client operating environment running on a terminal server, a guest operating system running on a virtual machine, a server in the context of a request while it is making a document access request, information kiosk, Internet kiosk, or any computing device or computing environment from which a document access request is originated.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the first document includes any of: a discussion thread, an on-line report, results of a database query, an electronic form, a file system object, a data object managed by a messaging server, a data object managed by a collaboration server, a data object managed by a document management system, a data object managed by a content management system, a data object in a product life cycle management system, a data object in an enterprise resource planning system, or a data object addressable by an universal resource locator (URL) that is served by a Web server.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the first document is a file.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the first document is a Web page.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the first document is an e-mail message.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the evaluating at least one rule comprises querying a user for input to obtain information for evaluating rules pertaining to the attempt to access the first document.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> comprising after the receiving and storing the plurality of rules at the client system:
<claim-text>detecting an attempt by the application program on the client system to access a second document on the client system, wherein the second document is in the first format;</claim-text>
<claim-text>evaluating a first rule from the plurality of rules stored at the client system to determine whether or not to allow the access attempt of the second document on the client system;</claim-text>
<claim-text>when the first rule is satisfied, allowing the access attempt of the second document; and</claim-text>
<claim-text>when the first rule is not satisfied, disallowing the access attempt of the second document.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:
<claim-text>distributing a specific plurality of rules to the client system from the central rule database, wherein the distributing step dynamically selects the specific plurality of rules for the client system.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The method of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein with the disallowed access attempt of the second document, the second document remains in the first format.</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The method of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the distributing step distributes a set of default rules to the client system if no specific plurality of rules have been defined for the client system.</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein a first subset of the documents are stored at the server, a second subset of the documents are stored at the client system, and each of the first and second subsets of documents are stored in the first format.</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein with the allowed access attempt the first document is unaltered.</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the evaluating at least one rule from the plurality of rules comprises performing an action as specified in the evaluated at least one rule in response to the access attempt of the first document.</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:
<claim-text>automatically detecting if any components used in the detecting or evaluating steps have been tampered with or corrupted.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the detecting step monitors operations of a plurality of application programs on the computer system.</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein at least a subset of rules stored on the computer system is dynamically updated from a central rule database across a computer network.</claim-text>
</claim>
<claim id="CLM-00021" num="00021">
<claim-text>21. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the detecting an attempt by an application program on the client system to access a first document on a server wherein the application program is an e-mail program and the access the first document comprises sending the first document as an attachment to an e-mail.</claim-text>
</claim>
<claim id="CLM-00022" num="00022">
<claim-text>22. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein detecting an attempt by an application program on the client system to access a first document on a server wherein the access the first document comprises copying the first document from a first location to a second location, separate from the first location.</claim-text>
</claim>
<claim id="CLM-00023" num="00023">
<claim-text>23. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the rule is evaluated by the client system without maintaining a connection to the central rules database during the evaluation of the rule.</claim-text>
</claim>
<claim id="CLM-00024" num="00024">
<claim-text>24. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein each rule comprises a conditional statement having a policy abstraction and a corresponding action that will be performed when the conditional statement is satisfied, and
<claim-text>each policy abstraction has a corresponding definition statement stored separately from the rule.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00025" num="00025">
<claim-text>25. The method of <claim-ref idref="CLM-00024">claim 24</claim-ref> wherein the corresponding action comprises deleting at least one document from the client system.</claim-text>
</claim>
<claim id="CLM-00026" num="00026">
<claim-text>26. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the access attempt is a file open, and
<claim-text>the disallowing the access attempt occurs before the first document is transmitted to the client system.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00027" num="00027">
<claim-text>27. The method of <claim-ref idref="CLM-00026">claim 26</claim-ref> wherein even after the access attempt to the first document is allowed, the first document resides on the server and another client system can be allowed to access the first document.</claim-text>
</claim>
<claim id="CLM-00028" num="00028">
<claim-text>28. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the evaluating at least one rule from the plurality of rules stored at the client system to determine whether or not to allow the access attempt of the first document on the server is based on the location of the first document at the server.</claim-text>
</claim>
<claim id="CLM-00029" num="00029">
<claim-text>29. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the identifying at least one call to the operating system library function further comprises:
<claim-text>intercepting the access attempt by the application program executing at the client system to the operating system executing on the client system.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00030" num="00030">
<claim-text>30. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the operating system library function is an open operating system library function.</claim-text>
</claim>
<claim id="CLM-00031" num="00031">
<claim-text>31. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the enforcement program module includes at least one application program specific code module.</claim-text>
</claim>
<claim id="CLM-00032" num="00032">
<claim-text>32. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the enforcement program module is incorporated in an operating system executing at the client system.</claim-text>
</claim>
<claim id="CLM-00033" num="00033">
<claim-text>33. A method comprising:
<claim-text>receiving at a client a plurality of rules from a database;</claim-text>
<claim-text>storing the plurality of rules in a memory of the client, wherein the rules contain at least one expression used by the client to perform access control for documents accessed by the client;</claim-text>
<claim-text>after the receiving and storing the plurality of rules at the client, detecting an attempt by a first application program on the client to open a first document on a server,</claim-text>
<claim-text>wherein the first document is in a first format and the attempt includes at least one corresponding operating system library function based on a translated command of the attempt by the first application program to open the first document;</claim-text>
<claim-text>after the detecting the open attempt, executing a second application program on the client to evaluate a first rule of the plurality of rules stored at the client to determine whether or not to allow the open attempt of the first document on the server,</claim-text>
<claim-text>wherein the second application program is separate from the first application program;</claim-text>
<claim-text>when the first rule is satisfied, allowing the open attempt,</claim-text>
<claim-text>wherein with the allowed open attempt the first document remains in the first format; and</claim-text>
<claim-text>when the first rule is not satisfied, disallowing the open attempt comprising preventing the at least one corresponding operating system library function from executing.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00034" num="00034">
<claim-text>34. The method of <claim-ref idref="CLM-00033">claim 33</claim-ref> comprising after the receiving and storing the plurality of rules, detecting an attempt by the first application program to open a second document on the client, wherein the second document is in the first format;
<claim-text>after the detecting the attempt to open the second document, executing the second application program on the client to evaluate a second rule of the plurality of rules stored at the client to determine whether or not to allow the open attempt of the second document on the client;</claim-text>
<claim-text>when the second rule is satisfied, allowing the open attempt of the second document; and</claim-text>
<claim-text>when the second rule is not satisfied, disallowing the open attempt, wherein with the disallowed open attempt, the second document remains in the first format.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00035" num="00035">
<claim-text>35. A method of controlling document access using centrally managed rules, the method comprising:
<claim-text>receiving a plurality of rules at a policy enforcer program, executing on a client system, from a central rule database, wherein the central rule database is stored externally to the client system and accessible to the client system via a network connection;</claim-text>
<claim-text>storing the plurality of rules in a memory of the client system, wherein the rules contain at least one expression used by the client system to perform access control for documents accessed by the client system, and the rules in a memory are accessible by the policy enforcer program;</claim-text>
<claim-text>after the receiving and storing the plurality of rules at the client system, detecting an attempt by a first application program, executing on the client system, to access a first document on a server, wherein the first document is stored on the server using a first format;</claim-text>
<claim-text>using the policy enforcer program of the client system, evaluating a first rule from the plurality of rules stored at the client system to determine whether or not to allow the access attempt by the first application program to the first document on the server;</claim-text>
<claim-text>determining a translated command, wherein the translated command includes at least one operating system library function corresponding to the attempt;</claim-text>
<claim-text>when the first rule is satisfied, allowing the access attempt by the first application program, wherein with the allowed access attempt the first document remains in the first format;</claim-text>
<claim-text>when the first rule is not satisfied, disallowing the access attempt by the first application program comprising denying execution of the at least one operating system library function;</claim-text>
<claim-text>after the receiving and storing the plurality of rules at the client system, detecting an attempt by a second application program, executing on the client system, to send an e-mail from the client system;</claim-text>
<claim-text>using the policy enforcer program of the client system, evaluating a second rule from the plurality of rules stored at the client system to determine whether or not to allow the attempt by the second application program to send the e-mail from the client system; and</claim-text>
<claim-text>when the second rule is not satisfied, disallowing the sending of the e-mail by the second application program.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00036" num="00036">
<claim-text>36. The method of <claim-ref idref="CLM-00035">claim 35</claim-ref> wherein the attempt by a first application program to access a first document comprises a call to the operating system to perform a file open operation.</claim-text>
</claim>
<claim id="CLM-00037" num="00037">
<claim-text>37. The method of <claim-ref idref="CLM-00035">claim 35</claim-ref> wherein the first and second application programs are denied access to the plurality of rules.</claim-text>
</claim>
<claim id="CLM-00038" num="00038">
<claim-text>38. The method of <claim-ref idref="CLM-00035">claim 35</claim-ref> wherein the evaluating a first rule from the plurality of rules does not include connecting to the central rule database.</claim-text>
</claim>
<claim id="CLM-00039" num="00039">
<claim-text>39. The method of <claim-ref idref="CLM-00035">claim 35</claim-ref> wherein the evaluating a first rule from the plurality of rules does not transfer the first rule to the first application program.</claim-text>
</claim>
<claim id="CLM-00040" num="00040">
<claim-text>40. The method of <claim-ref idref="CLM-00035">claim 35</claim-ref> wherein the attempt by the second application program to send the e-mail from the client system does not include a document attachment.</claim-text>
</claim>
</claims>
</us-patent-grant>

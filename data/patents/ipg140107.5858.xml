<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08626967-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08626967</doc-number>
<kind>B1</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>13538056</doc-number>
<date>20120629</date>
</document-id>
</application-reference>
<us-application-series-code>13</us-application-series-code>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>13</main-group>
<subgroup>14</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>710 38</main-classification>
<further-classification>710 31</further-classification>
<further-classification>710 74</further-classification>
</classification-national>
<invention-title id="d2e43">Virtualization of a storage processor for port failover</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>6578158</doc-number>
<kind>B1</kind>
<name>Deitz et al.</name>
<date>20030600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714 11</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>6888792</doc-number>
<kind>B2</kind>
<name>Gronke</name>
<date>20050500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>370227</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>7039828</doc-number>
<kind>B1</kind>
<name>Scott</name>
<date>20060500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714  411</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>7203730</doc-number>
<kind>B1</kind>
<name>Meyer et al.</name>
<date>20070400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709213</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>7447197</doc-number>
<kind>B2</kind>
<name>Terrell et al.</name>
<date>20081100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>370360</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>7467191</doc-number>
<kind>B1</kind>
<name>Wang et al.</name>
<date>20081200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709221</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>7512832</doc-number>
<kind>B1</kind>
<name>Lent et al.</name>
<date>20090300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714  411</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>7586842</doc-number>
<kind>B2</kind>
<name>McGee et al.</name>
<date>20090900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>370218</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>7734712</doc-number>
<kind>B1</kind>
<name>Meyer et al.</name>
<date>20100600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709213</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>7734947</doc-number>
<kind>B1</kind>
<name>Frangioso et al.</name>
<date>20100600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714  41</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>7783788</doc-number>
<kind>B1</kind>
<name>Quinn et al.</name>
<date>20100800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>710  8</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>7818408</doc-number>
<kind>B1</kind>
<name>Ignatuk et al.</name>
<date>20101000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709221</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00013">
<document-id>
<country>US</country>
<doc-number>7949893</doc-number>
<kind>B1</kind>
<name>Knaus et al.</name>
<date>20110500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714  41</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00014">
<document-id>
<country>US</country>
<doc-number>8031731</doc-number>
<kind>B2</kind>
<name>Yu et al.</name>
<date>20111000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>370419</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00015">
<document-id>
<country>US</country>
<doc-number>8156561</doc-number>
<kind>B2</kind>
<name>Mimatsu et al.</name>
<date>20120400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>726 26</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00016">
<document-id>
<country>US</country>
<doc-number>8321722</doc-number>
<kind>B2</kind>
<name>Tanaka et al.</name>
<date>20121100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714  63</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00017">
<document-id>
<country>US</country>
<doc-number>8397001</doc-number>
<kind>B2</kind>
<name>Martin et al.</name>
<date>20130300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>710 38</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00018">
<document-id>
<country>US</country>
<doc-number>8397092</doc-number>
<kind>B2</kind>
<name>Karnowski</name>
<date>20130300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>713324</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00019">
<document-id>
<country>US</country>
<doc-number>2006/0117212</doc-number>
<kind>A1</kind>
<name>Meyer et al.</name>
<date>20060600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714  4</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00020">
<document-id>
<country>US</country>
<doc-number>2007/0070975</doc-number>
<kind>A1</kind>
<name>Otani et al.</name>
<date>20070300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>370351</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00021">
<document-id>
<country>US</country>
<doc-number>2007/0239944</doc-number>
<kind>A1</kind>
<name>Rupanagunta et al.</name>
<date>20071000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>711147</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00022">
<document-id>
<country>US</country>
<doc-number>2009/0228651</doc-number>
<kind>A1</kind>
<name>Sharma et al.</name>
<date>20090900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>711114</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00023">
<document-id>
<country>US</country>
<doc-number>2010/0107000</doc-number>
<kind>A1</kind>
<name>Wakelin</name>
<date>20100400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714  4</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00024">
<document-id>
<country>US</country>
<doc-number>2013/0080559</doc-number>
<kind>A1</kind>
<name>Rao et al.</name>
<date>20130300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709208</main-classification></classification-national>
</us-citation>
<us-citation>
<nplcit num="00025">
<othercit>Ninan, Anoop George, &#x201c;Port Matching for Data Storage System Port Failover&#x201d;, U.S. Appl. No. 13/538,111, filed Jun. 29, 2012.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00026">
<othercit>Naik, Dilesh, et al., &#x201c;Coordinating Processing for Request Redirection&#x201d;, U.S. Appl. No. 13/538,199, filed Jun. 29, 2012.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00027">
<othercit>Long, Matthew, et al., &#x201c;Managing a Port Failover in a Data Storage System&#x201d;, U.S. Appl. No. 13/431,264, filed Mar. 27, 2012.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00028">
<othercit>Hitachi Data Systems, &#x201c;Hitachi Adaptable Modular Storage 2000 Family&#x201d;, Oct. 2008.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>18</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>None</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>29</number-of-drawing-sheets>
<number-of-figures>31</number-of-figures>
</figures>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Naik</last-name>
<first-name>Dilesh</first-name>
<address>
<city>Shrewsbury</city>
<state>MA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Lee</last-name>
<first-name>Shuyu</first-name>
<address>
<city>Acton</city>
<state>MA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="003" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Long</last-name>
<first-name>Matthew</first-name>
<address>
<city>Uxbridge</city>
<state>MA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="004" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Ninan</last-name>
<first-name>Anoop George</first-name>
<address>
<city>Milford</city>
<state>MA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="005" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Lewis</last-name>
<first-name>Daniel B.</first-name>
<address>
<city>Newton</city>
<state>MA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Naik</last-name>
<first-name>Dilesh</first-name>
<address>
<city>Shrewsbury</city>
<state>MA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Lee</last-name>
<first-name>Shuyu</first-name>
<address>
<city>Acton</city>
<state>MA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="003" designation="us-only">
<addressbook>
<last-name>Long</last-name>
<first-name>Matthew</first-name>
<address>
<city>Uxbridge</city>
<state>MA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="004" designation="us-only">
<addressbook>
<last-name>Ninan</last-name>
<first-name>Anoop George</first-name>
<address>
<city>Milford</city>
<state>MA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="005" designation="us-only">
<addressbook>
<last-name>Lewis</last-name>
<first-name>Daniel B.</first-name>
<address>
<city>Newton</city>
<state>MA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Muirhead and Saturnelli, LLC</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>EMC Corporation</orgname>
<role>02</role>
<address>
<city>Hopkinton</city>
<state>MA</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Tseng</last-name>
<first-name>Cheng-Yuan</first-name>
<department>2184</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">Described are techniques for processing requests. A request is received at a data storage system. The request is a command to perform first processing and the request is sent from a client over a virtualized path. The virtualized path includes a virtual target port of the data storage system. The virtual target port is a first physical target port that provides a virtualized counterpart port for a second physical target port whereby requests directed to the second physical target port are routed to the first physical target port rather than the second physical target port. First processing is performed and a response to the request is generated. The response includes first information consistent with sending the request over a non-virtualized path to the second physical target port. The response is sent to the client.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="159.51mm" wi="174.75mm" file="US08626967-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="211.50mm" wi="158.50mm" file="US08626967-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="210.48mm" wi="151.47mm" file="US08626967-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="121.07mm" wi="136.65mm" file="US08626967-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="71.37mm" wi="117.60mm" file="US08626967-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="183.39mm" wi="113.71mm" file="US08626967-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="165.61mm" wi="145.97mm" file="US08626967-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="71.04mm" wi="101.18mm" file="US08626967-20140107-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00008" num="00008">
<img id="EMI-D00008" he="209.55mm" wi="153.50mm" file="US08626967-20140107-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00009" num="00009">
<img id="EMI-D00009" he="182.20mm" wi="110.41mm" file="US08626967-20140107-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00010" num="00010">
<img id="EMI-D00010" he="186.86mm" wi="114.30mm" file="US08626967-20140107-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00011" num="00011">
<img id="EMI-D00011" he="232.58mm" wi="163.66mm" orientation="landscape" file="US08626967-20140107-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00012" num="00012">
<img id="EMI-D00012" he="211.16mm" wi="169.08mm" orientation="landscape" file="US08626967-20140107-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00013" num="00013">
<img id="EMI-D00013" he="226.48mm" wi="161.63mm" orientation="landscape" file="US08626967-20140107-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00014" num="00014">
<img id="EMI-D00014" he="232.83mm" wi="167.13mm" orientation="landscape" file="US08626967-20140107-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00015" num="00015">
<img id="EMI-D00015" he="241.55mm" wi="161.88mm" orientation="landscape" file="US08626967-20140107-D00015.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00016" num="00016">
<img id="EMI-D00016" he="216.58mm" wi="175.77mm" orientation="landscape" file="US08626967-20140107-D00016.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00017" num="00017">
<img id="EMI-D00017" he="173.82mm" wi="172.72mm" orientation="landscape" file="US08626967-20140107-D00017.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00018" num="00018">
<img id="EMI-D00018" he="171.70mm" wi="173.99mm" orientation="landscape" file="US08626967-20140107-D00018.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00019" num="00019">
<img id="EMI-D00019" he="177.80mm" wi="173.06mm" orientation="landscape" file="US08626967-20140107-D00019.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00020" num="00020">
<img id="EMI-D00020" he="178.82mm" wi="173.14mm" orientation="landscape" file="US08626967-20140107-D00020.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00021" num="00021">
<img id="EMI-D00021" he="177.97mm" wi="171.87mm" orientation="landscape" file="US08626967-20140107-D00021.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00022" num="00022">
<img id="EMI-D00022" he="204.64mm" wi="179.07mm" orientation="landscape" file="US08626967-20140107-D00022.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00023" num="00023">
<img id="EMI-D00023" he="205.91mm" wi="173.06mm" orientation="landscape" file="US08626967-20140107-D00023.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00024" num="00024">
<img id="EMI-D00024" he="198.37mm" wi="173.31mm" orientation="landscape" file="US08626967-20140107-D00024.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00025" num="00025">
<img id="EMI-D00025" he="191.43mm" wi="160.87mm" orientation="landscape" file="US08626967-20140107-D00025.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00026" num="00026">
<img id="EMI-D00026" he="189.99mm" wi="162.31mm" orientation="landscape" file="US08626967-20140107-D00026.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00027" num="00027">
<img id="EMI-D00027" he="208.70mm" wi="165.35mm" orientation="landscape" file="US08626967-20140107-D00027.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00028" num="00028">
<img id="EMI-D00028" he="226.23mm" wi="165.95mm" orientation="landscape" file="US08626967-20140107-D00028.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00029" num="00029">
<img id="EMI-D00029" he="228.77mm" wi="185.93mm" orientation="landscape" file="US08626967-20140107-D00029.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">TECHNICAL FIELD</heading>
<p id="p-0002" num="0001">The present invention relates to techniques used in connection with a port failover in a data storage system.</p>
<heading id="h-0002" level="1">BACKGROUND OF THE INVENTION</heading>
<p id="p-0003" num="0002">It is known that new enterprise data centers store ever-larger amounts of critical data that must be immediately and continuously available. To ensure continued connectivity this may necessitate multiple paths between hosts and data storage arrays. For example, this may require multiple physical connections to two or more storage processors within a storage array. This may ensure continued connectivity to the storage array even if there is a failure of a single physical connection or a storage processor.</p>
<p id="p-0004" num="0003">If an array comprises two or more storage processors it is known to include host-based failover software on the attached hosts to achieve port failover in the event of a failure of a single physical connection or a storage processor. However, this approach requires each attached host to have correctly configured failover software installed. This can be expensive and extremely inconvenient.</p>
<heading id="h-0003" level="1">SUMMARY OF THE INVENTION</heading>
<p id="p-0005" num="0004">In accordance with one aspect of the invention is a method for processing requests comprising: receiving a request at a data storage system, wherein the request is a command to perform first processing and the request is sent from a client over a virtualized path, the virtualized path including a virtual target port of the data storage system, the virtual target port being a first physical target port that provides a virtualized counterpart port for a second physical target port whereby requests directed to the second physical target port are routed to the first physical target port rather than the second physical target port; performing the first processing and generating a response to the request, wherein the response includes first information consistent with sending the request over a non-virtualized path to the second physical target port; and sending the response to the client. The first processing may include determining a first data value that would be included in a generated response to the request if the request had alternatively been received by the second physical target port over a non-virtualized path. The response may include the first data value, and a generated response to the request may include a second data value different from the first data value when the request is received over a non-virtualized path including the first physical target port. A second request to perform the command may be sent from the client over a non-virtualized path including the first physical target port. The method may include sending, in response to the second request, a second response to the client, the second request including the second data value. The first physical target port may receive requests from the client directed to the first physical target port while also receiving requests directed to the second physical target port as a result of the first physical target port virtualizing the second physical target port. The second physical target port may be inoperative. The first physical target port may be associated with a first storage processor and the second physical target port may be associated with a second storage processor. The second storage processor may be inoperative. The first storage processor may virtualize the second storage processor. The first information may be consistent with the request being serviced by the second storage processor rather than the first storage processor. The first information may include first data characterizing the request as serviced by the second storage processor and may include second data characterizing the first storage processor as a peer processor of the second storage processor. The second data may indicate that the second storage processor is operative. The first information may identify the second physical target port, rather than the first physical port, as a port at which the request is received. The first physical target port may be associated with a first storage processor and the second physical target port may be associated with a second storage processor. The first information may identify the second storage processor as a storage processor associated with the port at which the request is received. The command may be an inquiry command that reports information about a target device and the first information of the response may identify the second physical target port as receiving the request and may identify a second storage processor associated with the second physical target port as servicing the request. The first physical target port may be associated with a first storage processor and the second physical target port may be associated with a second storage processor that is inoperative. The command may be a mode sense command reporting information about storage processor configuration of the data storage system, and the first information may identify the second storage processor as a target storage processor servicing the request and may identify the first storage processor as a peer storage processor of the second storage processor. The first physical target port may be associated with a first storage processor and the second physical target port may be associated with a second storage processor that is inoperative. The command may report target port group information representing a state of a target device on each of the first storage processor and the second storage processor, the first information including a first target port group descriptor providing information regarding a first group of target ports of the first storage processor and denotes the first storage processor and first group of target ports as available, and the response may also include second information comprising a second target port group descriptor providing information regarding a second group of target ports of the second storage processor and denotes the second storage processor and second group of target ports as available. The virtualized path may be generated as a result of performing port failover processing responsive to a planned unavailability or an unplanned unavailability of any of the second physical target port and a storage processor associated with the second physical target port.</p>
<p id="p-0006" num="0005">In accordance with another aspect of the invention is a computer readable medium comprising code stored thereon for processing requests, the computer readable medium comprising code for: receiving a request at a data storage system, wherein the request is a command to perform first processing and the request is sent from a client over a virtualized path, the virtualized path including a virtual target port of the data storage system, the virtual target port being a first physical target port that provides a virtualized counterpart port for a second physical target port whereby requests directed to the second physical target port are routed to the first physical target port rather than the second physical target port; performing said first processing and generating a response to the request, wherein the response includes first information consistent with sending the request over a non-virtualized path to the second physical target port; and sending the response to the client. The computer readable medium may further comprise code for determining a first data value that would be included in a generated response to the request if the request had alternatively been received by the second physical target port over a non-virtualized path. The response may include the first data value, and wherein a generated response to the request may include a second data value different from the first data value when the request is received over a non-virtualized path including the first physical target port. A second request to perform the command may be sent from the client over a non-virtualized path including the first physical target port, and the computer readable medium may further include code for sending, in response to the second request, a second response to the client, the second request including the second data value. The second physical target port may be inoperative and the first physical target port may receive requests from the client directed to the first physical target port while also receiving requests directed to the second physical target port as a result of the first physical target port virtualizing the second physical target port.</p>
<p id="p-0007" num="0006">In accordance with another aspect of the invention is a data storage system comprising: a first storage processor associated with a first set of target ports; a second storage processor associated with a second set of target ports; a computer readable medium comprising code stored thereon for: receiving a request at the data storage system, wherein the request is a command to perform first processing and the request is sent from a client over a virtualized path, the virtualized path including a virtual target port of the data storage system, the virtual target port being a first physical target port of the first set that provides a virtualized counterpart port for a second physical target port of the second set whereby requests directed to the second physical target port are routed to the first physical target port rather than the second physical target port; performing said first processing and generating a response to the request, wherein the response includes first information consistent with sending the request over a non-virtualized path to the second physical target port; and sending the response to the client.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0008" num="0007">Features and advantages of the present invention will become more apparent from the following detailed description of exemplary embodiments thereof taken in conjunction with the accompanying drawings in which:</p>
<p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. 1</figref> is a storage area network comprising a data storage system and hosts coupled to a Fibre Channel fabric switch;</p>
<p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. 2</figref> is the storage area network of <figref idref="DRAWINGS">FIG. 1</figref> showing port names and IDs;</p>
<p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. 3A</figref> is a flow diagram representing the operation of the data storage system during initialization;</p>
<p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. 3B</figref> is a flow diagram representing the operation of the switch during initialization;</p>
<p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. 4</figref> is a name table managed by name server database in the switch;</p>
<p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. 5</figref> is a flowchart summarizing the steps of a technique for use in managing port failover in the data storage system;</p>
<p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. 6A</figref> is a flow diagram representing the operation of the data storage system when virtual port IDs are implemented on the data storage system;</p>
<p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. 6B</figref> is a flow diagram representing the operation of the switch when virtual port IDs are implemented on the data storage system;</p>
<p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. 7</figref> is a name table in the switch built implementing the technique as described herein;</p>
<p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. 8</figref> is the storage area network showing port names and IDs implementing the technique as described herein;</p>
<p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. 9</figref> is a flowchart summarizing the steps of a further technique for use in managing port failover in the data storage system;</p>
<p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. 10</figref> is a flowchart summarizing the steps of a still further technique for use in managing port failover in the data storage system;</p>
<p id="p-0021" num="0020"><figref idref="DRAWINGS">FIGS. 11-15</figref> are examples used in connection with illustrating port matching techniques that may be performed in an embodiment in accordance with techniques herein;</p>
<p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. 16</figref> is a flowchart of processing steps that may be performed in connection with port matching techniques in an embodiment in accordance with techniques herein;</p>
<p id="p-0023" num="0022"><figref idref="DRAWINGS">FIGS. 17-21</figref> are examples illustrating quiescing I/Os that may be performed in connection with failback processing in an embodiment in accordance with techniques herein;</p>
<p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. 22</figref> is a flowchart of processing steps that may be performed in connection with quiescing with failback processing in an embodiment in accordance with techniques herein;</p>
<p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. 23</figref> is a flowchart of processing steps that may be performed in connection with quiescing with failover processing in an embodiment in accordance with techniques herein;</p>
<p id="p-0026" num="0025"><figref idref="DRAWINGS">FIGS. 24-28</figref> are examples used in connection with illustrating port and storage processor virtualization as may be performed in an embodiment in accordance with techniques herein; and</p>
<p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. 29</figref> is a flowchart of processing steps that may be performed in an embodiment using techniques described herein.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0005" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0028" num="0027">The techniques herein may be implemented in numerous ways, including as a process, an apparatus, a system, a computer program embodied on a computer readable storage medium, and/or a processor, such as a processor configured to execute instructions stored on and/or provided by a memory coupled to the processor. In general, the order of the steps of disclosed processes may be altered within the scope of the invention. Unless stated otherwise, a component such as a processor or a memory described as being configured to perform a task may be implemented as a general component that is temporarily configured to perform the task at a given time or a specific component that is manufactured to perform the task. As used herein, the term &#x2018;processor&#x2019; refers to one or more devices, circuits, and/or processing cores configured to process data, such as computer program instructions.</p>
<p id="p-0029" num="0028">A detailed description of one or more embodiments of the techniques herein is provided below along with accompanying figures. The techniques herein may be described in connection with such embodiments, but are not limited to any embodiment provided for exemplary and illustrative purposes. The scope of the invention is limited only by the claims and the invention encompasses numerous alternatives, modifications and equivalents. Numerous specific details are set forth in the following description in order to provide a thorough understanding of the techniques herein. These details are provided for the purpose of example and techniques herein may be practiced according to the claims without some or all of these specific details. For the purpose of clarity, technical material that is known in the technical fields related to the invention has not been described in detail so that the techniques herein are not unnecessarily obscured.</p>
<p id="p-0030" num="0029">Described below is a technique for use in managing a port failover in a data storage system. The technique as described herein can leverage the technology Fibre Channel N-Port ID Virtualization (&#x201c;NPIV&#x201d;) in a Fibre Channel switch for providing port failover capability. The storage system can dynamically move a failed port's identity to another functioning port using NPIV. This can cause the Fibre Channel switch to redirect the traffic previously destined to a port to another port. The hosts see this transition as a simple &#x201c;bounce&#x201d; of the Fibre Channel connection and are completely unaware of the redirection occurring. Conversely, similar mechanisms may be used to undo the redirection (&#x201c;port failback&#x201d;).</p>
<p id="p-0031" num="0030">Conventionally, storage systems may configure multiple paths between the hosts and the storage system. This may include multiple physical connections to two or more storage processors within the system. This may ensure continued connectivity to the storage system even if there is a failure of a single physical connection or storage processor. Furthermore, the hosts may comprise failover software to detect the failed paths and redirect I/O to the remaining good paths. An advantage of the technique described herein is that the port failover is storage system based and thus host failover software is not required to manage storage array port failover.</p>
<p id="p-0032" num="0031">Referring to <figref idref="DRAWINGS">FIG. 1</figref>, there is illustrated an example of a storage area network <b>10</b> in which the technique described herein can be implemented. The storage area network <b>10</b> employs a Fibre Channel fabric topology. It will be known by those skilled in the art that Fibre Channel is a high speed serial transport used in storage systems. The hosts <b>12</b> illustrated as <b>12</b><i>a</i>, <b>12</b><i>b</i>, <b>12</b><i>c</i>, <b>12</b><i>d </i>and <b>12</b><i>e </i>communicate with a Fibre Channel &#x201c;fabric&#x201d;. In this embodiment, the Fibre Channel &#x201c;fabric&#x201d; is a switch <b>14</b>. A data storage system <b>16</b> including a data storage area <b>17</b> communicates with the switch <b>14</b>. It will be appreciated by those skilled in the art that the terms storage system or storage array or array may be used interchangeably throughout this disclosure with the same meaning. In this embodiment, the data storage area <b>17</b> within the storage system <b>16</b> comprises disk drives <b>18</b> and the hosts <b>12</b> may communicate with the disk drives <b>18</b> via a cross-point Fibre Channel connection through the switch <b>14</b>.</p>
<p id="p-0033" num="0032">The switch <b>14</b> includes switch ports <b>20</b>. Host facing switch ports are labeled as <b>20</b><i>h</i>. Storage system or array facing switch ports are labeled as <b>20</b><i>a</i>. Host ports <b>22</b> on the hosts communicate via Fibre Channel links <b>24</b> to host-facing switch ports <b>20</b><i>h </i>on the switch <b>14</b>. Physical ports <b>26</b> on the storage system or array <b>16</b> are associated with storage processors (SPs) <b>21</b> and communicate via Fibre Channel links <b>24</b> to array-facing switch ports <b>20</b><i>a </i>on the switch <b>14</b>. The disks <b>18</b> within the storage system <b>16</b> are organized into logical units (&#x201c;LUNs&#x201d;) <b>30</b>. &#x201c;LUN&#x201d; is used to describe a logical unit of physical storage space. The LUNs are exported by the ports <b>26</b> for access by the hosts <b>12</b> via the Fibre Channel links <b>24</b> and switch <b>14</b>. As herein shown, each disk appears to be configured as a separate LUN, though it is understood that a LUN can encompass part of a disk, or parts of multiple disks, or multiple complete disks. The arrangement shown is chosen for convenience of description.</p>
<p id="p-0034" num="0033">Each Fibre Channel device including but not limited to host ports and array ports has two identifying characteristics&#x2014;a name and an address. Fibre Channel names, known as &#x201c;world wide names&#x201d;, are unique&#x2014;every Fibre Channel device has its own unique name. Each Fibre Channel device also has an address referred to in Fibre Channel parlance as an &#x201c;ID&#x201d;. The IDs are used for directing information between hosts and storage systems. Port addresses are commonly referred to as &#x201c;port IDs&#x201d;. LUN addresses are commonly referred to as &#x201c;LUN numbers&#x201d;. After initialization, the hosts <b>12</b> communicate with the ports <b>26</b> and LUNs <b>30</b> by sending messages to the appropriate port ID and LUN number.</p>
<p id="p-0035" num="0034">Referring to <figref idref="DRAWINGS">FIG. 2</figref>, there is illustrated the storage area network of <figref idref="DRAWINGS">FIG. 1</figref> showing port names and IDs. In a Fabric topology, the switch <b>14</b> assigns IDs to the ports <b>22</b> and ports <b>26</b> during initialization. IDs as described in the Fibre Channel specification are actually 24 bit quantities containing several fields. However, in this figure the names and IDs are shown symbolically with alphanumeric symbols for simplicity of explanation. The names and IDs of each port and LUN are shown as a pair (name, ID). For instance, the port <b>22</b> on the host <b>12</b><i>a </i>is shown to have a name and ID of (ha, 100). The names and IDs for the ports <b>22</b> on the hosts <b>12</b><i>b</i>-<i>e </i>are (hb, 101), (hc, 102), (hd, 103) and (he, 104). The switch ports <b>20</b><i>h </i>are shown to have names and IDs (hfa, 200), (hfb, 201), (hfc, 202), (hfd, 203), and (hfe, 204). The switch ports <b>20</b><i>a </i>are shown to have names and IDs (afa, 300) and (afb, 301). The ports <b>26</b> are shown to have names and IDs (apa, 0), and (apb, 1). It will be appreciated that the LUNs <b>30</b> will also have a name and LUN number. However, for ease of illustration, this is not shown in the figure.</p>
<p id="p-0036" num="0035">Referring to <figref idref="DRAWINGS">FIGS. 3A and 3B</figref>, there is illustrated two flow diagrams representing the operation of the data storage system and the switch, respectively, during initialization. It will be appreciated that in this embodiment the Fibre Channel switch <b>14</b> includes a name server database <b>40</b>. The name server database <b>40</b> is used by the switch <b>14</b> to assign IDs to ports <b>22</b> and ports <b>26</b> during initialization. The name server database <b>40</b> includes a name server table <b>42</b> that is used by the switch to resolve IDs to names. First, for each storage system or array port (i.e. ports <b>0</b> and <b>1</b>), the data storage system sends a port login &#x201c;FLOGI&#x201d; command to the switch <b>14</b> containing the port name (<figref idref="DRAWINGS">FIG. 3A</figref> step <b>50</b>). The port logins are received by the switch <b>14</b> (<figref idref="DRAWINGS">FIG. 3B</figref> step <b>52</b>). When the switch <b>14</b> receives a port login command, it responds by sending an acknowledgement message to the data storage system (<figref idref="DRAWINGS">FIG. 3B</figref> step <b>54</b>). This acknowledgement message contains a port ID for the port that was logged in. The acknowledgement message is received by the data storage system (<figref idref="DRAWINGS">FIG. 3A</figref> step <b>56</b>). Then, a registration process is performed by the switch <b>14</b> (<figref idref="DRAWINGS">FIG. 3A</figref> step <b>58</b>, <figref idref="DRAWINGS">FIG. 3B</figref> step <b>60</b>). During the registration process, the name server table <b>42</b> containing port names and corresponding port IDs is built and distributed to nodes registered to receive it.</p>
<p id="p-0037" num="0036">Referring to <figref idref="DRAWINGS">FIG. 4</figref>, there is illustrated an example of name table <b>42</b> managed by name server database in the switch. It will be appreciated that the figure shows only the portions of the table <b>42</b> sufficient to contribute to an understanding of the table. The table <b>42</b> includes entries <b>62</b> having a port name field <b>64</b> and a port address ID field <b>66</b>. In this embodiment, the table <b>42</b> also includes a third field <b>68</b> identifying the switch port name that received the port login &#x201c;FLOGI&#x201d; command during initialization. It is believed that the field <b>68</b> may assist in giving a better understanding of techniques described herein. It can be seen from the figure that an entry <b>62</b> in the table <b>42</b> includes the port name apa and port ID <b>0</b> and the switch port name afa that received the port login during initialization. Additionally, there is a further entry <b>62</b> in the table <b>42</b> including the port name apb and port ID <b>1</b> and the switch port name afb that received the port login during initialization. The switch <b>14</b> then sends the table <b>42</b>, or at least the entries relating to the port name and ID, to all members of the SAN <b>10</b> registered to receive state change notifications. This includes the hosts <b>12</b>. The hosts <b>12</b> now have the port IDs of the ports <b>26</b> so Fibre Channel communications between the hosts <b>12</b> and array <b>16</b> can ensue.</p>
<p id="p-0038" num="0037">It will be appreciated by those skilled in the art that now that the hosts have IDs to access the ports, they can also learn what LUNs are available. LUN names and numbers are managed at the storage system level. Each host <b>12</b> sends a query to each port <b>26</b> ID in turn requesting a list of available LUN numbers. Once the LUN numbers for a given port ID are known, the host <b>12</b> is able to query each LUN <b>30</b> by using a combination of the port ID and LUN number to access the LUNs <b>30</b>. The host <b>12</b> then queries each LUN <b>30</b> for its corresponding LUN name. Once the host has gathered all this information, it builds a directory LUN table (not shown) that relates LUN names, port IDs, and LUN numbers. During operation, hosts <b>12</b> refer to LUNs <b>30</b> by their LUN numbers. In order to access a LUN <b>30</b>, a host port <b>22</b> sends a message whose Fibre Channel address includes the port ID and LUN number. The switch <b>14</b> parses the port ID portion of the address in order to forward the message to the identified port <b>26</b>. The storage system <b>16</b> then uses the LUN number portion of the address to access the proper LUN <b>30</b> within the system <b>16</b>.</p>
<p id="p-0039" num="0038">Referring to <figref idref="DRAWINGS">FIG. 5</figref>, there is illustrated a technique <b>300</b> for use in managing a port failover in a data storage system. The storage system <b>16</b>, similar to that as described and illustrated with respect to <figref idref="DRAWINGS">FIGS. 1 and 2</figref>, comprises a first storage processor <b>21</b> and an associated first port <b>26</b> and a second storage processor <b>21</b> and an associated second port <b>26</b>. Additionally, the storage system comprises a communications channel (not shown) between the two storage processors <b>21</b> for facilitating communication between the respective processors. In this embodiment, the data storage system is also adapted to communicate with a Fibre Channel switch <b>14</b> such that read and write I/Os can be directed to the first and second ports <b>26</b>. Moreover, in the embodiment, the Fibre Channel switch <b>14</b> comprises NPIV technology such that a single physical port in the data storage system <b>16</b> may have multiple virtual ports associated therewith.</p>
<p id="p-0040" num="0039">The technique as described herein comprises providing <b>310</b> from the data storage system <b>16</b> to the Fibre Channel switch <b>14</b> a first unique name characterizing the first port <b>26</b> for facilitating registration of the first port <b>26</b> with the Fibre Channel switch <b>14</b>. The first unique name provided from the data storage system <b>16</b> to the Fibre Channel switch <b>14</b> such that the first unique name is associated with the first port <b>26</b>. For example, the data storage system <b>16</b> may send a port login &#x201c;FLOGI&#x201d; command to the switch <b>14</b> containing the port name. It will be appreciated that the first storage processor <b>21</b> associated with the first port <b>26</b> may provide or send the port login &#x201c;FLOGI&#x201d; command to the switch containing the world wide name (&#x2018;apa&#x2019;) of the first port <b>26</b>. The port login may be received by the switch <b>14</b> and the switch may respond in turn by sending to the data storage system a first port address or ID (&#x2018;0&#x2019;) for the first port such that the first unique name and the first port address are associated with the first port. It will be appreciated that a registration process may be performed by the switch <b>14</b> such that a name server table <b>42</b> can be built.</p>
<p id="p-0041" num="0040">The technique further comprises providing <b>320</b> from the data storage system <b>16</b> to the Fibre Channel switch <b>14</b> a second unique name characterizing the second port for facilitating registration of the second port with the Fibre Channel switch. The second unique name provided from the data storage system <b>16</b> to the Fibre Channel switch <b>14</b> such that the second unique name is associated with the second port. The step may be performed in a similar manner to the previous step <b>310</b> with the exception that the second storage processor <b>21</b> may provide or send a port login &#x201c;FLOGI&#x201d; command to the switch containing the world wide name (&#x2018;apb&#x2019;) of the second port. The switch may respond in turn by sending a second port address or ID (&#x2018;1&#x2019;) for the second port and registering the second port such that the second unique name and the second port address are associated with the second port. The registration process may be performed by the switch <b>14</b> such that a name server table <b>42</b>, as described above, containing port names and their corresponding port IDs may be built and distributed to nodes registered to receive it. It will be appreciated that the table may be substantially similar to the table <b>42</b> as described with respect to <figref idref="DRAWINGS">FIG. 4</figref>.</p>
<p id="p-0042" num="0041">The technique comprises detecting <b>330</b> by the data storage system <b>16</b> the operational state of the first and second storage processors <b>21</b> in the data storage system. It will be appreciated that the operational states may include an active state and a failure state. It will also be appreciated that a failure state in connection with one of the first and second storage processors <b>21</b> activates deregistration of the port associated with the failed storage processor. For example, it will be understood from the foregoing that the storage processors are connected via a reliable communication channel. If one storage processor detects that the other storage processor is not responsive it may be concluded that the other storage processor has failed. It will also be appreciated that if either of the storage processors fails the world wide name of the port associated therewith provided for registration will be deregistered from the name server table <b>42</b>. It will also be appreciated by those skilled in the art that the term &#x2018;a failure state&#x2019; includes both planned failures and unplanned failures. For example, an upgrade of a storage processor may be considered a planned failure. An unplanned failure may be considered a more serious issue in which the storage processor unexpectedly fails.</p>
<p id="p-0043" num="0042">Additionally, the technique comprises providing <b>340</b> from the data storage system <b>16</b> to the Fibre Channel switch <b>14</b> one of the first and second unique names characterizing one of the first and second ports <b>26</b> for facilitating re-registration of the one of the first and second ports with the Fibre Channel switch in response to detecting a failure state in connection with the storage processor associated with the one of the first and second ports. In accordance with the technique as described herein, the one of the first and second unique names is provided from the data storage system <b>16</b> to the Fibre Channel switch <b>14</b> for facilitating re-registration such that the one of the first and second unique names characterizing the one of the first and second ports <b>26</b> is associated with the other of the first and second ports. For example, if the first storage processor fails, the first port associated therewith may be deregistered or removed from the name server table <b>42</b> in the switch <b>14</b>. In such a scenario, the second storage processor <b>21</b> associated with the second port <b>26</b> detects that the other first storage processor has failed and provides the world wide name associated with the first port (&#x2018;apa&#x2019;) to the switch <b>14</b> for registration such that the world wide name of the first port (&#x2018;apa&#x2019;) will be associated with the second port. In this embodiment, it will be appreciated that the storage processors may exchange relevant port-related data so that if a storage processor fails the surviving storage processor may have access to all the information about the port of the failed storage processor to take the necessary action in accordance with the technique. The switch as discussed above may comprise NPIV such that a single physical port, for example, the second port may have multiple virtual ports associated therewith. The technique as described herein may leverage the NPIV technology such that a virtual first address is issued in response to providing the world wide name of the first port to the switch for re-registration of the first port with the switch <b>14</b>. The hosts are informed of the new virtual address and consequently I/O may be directed to the second port based on the second port address associated with the second world wide name and also the virtual first address associated with the first world wide name. This will be discussed in further detail below.</p>
<p id="p-0044" num="0043">Referring to <figref idref="DRAWINGS">FIGS. 6A and 6B</figref>, there is illustrated two flowcharts representing the operation of the data storage system and switch, respectively, when virtual port addresses or IDs are implemented on the data storage system. It will be appreciated in the example provided herein that the ports in the data storage system were registered during initialization as described with respect to <figref idref="DRAWINGS">FIG. 3</figref>. Furthermore, it will be appreciated that if a virtual port ID is required by an array port <b>26</b> (step <b>232</b>) a &#x201c;FDISC&#x201d; command containing port name (step <b>234</b>) is sent to the switch. For example, it will be understood that an array port may require a virtual port ID by virtue of a failure in connection with a storage processor and the consequential deregistration of the port associated therewith. The switch <b>14</b> receives the FDISC command (step <b>236</b>) and responds by sending a virtual port ID to the storage system (step <b>238</b>). It will be understood that if the FDISC command is received on a link where the port is not FLOGI-ed in, the FDISC command will be rejected. In other words, a physical port must be logged-in in order to be able to request and receive virtual port IDs. The storage system receives the virtual port ID from the switch <b>14</b><i>a </i>(step <b>240</b>). The switch <b>14</b><i>a </i>and storage system then perform the registration process to add the port name and virtual port ID to the name server table <b>42</b> (steps <b>242</b>, <b>244</b>). The FDISC command and response is repeated if further virtual ID's are required for each physical port (steps <b>232</b>-<b>244</b>).</p>
<p id="p-0045" num="0044">Referring to <figref idref="DRAWINGS">FIG. 7</figref>, there is illustrated an example of a name server table built in accordance with the technique as described herein. In this example, the first storage processor associated with the first port has failed. Because of the failure, the world wide name associated with the first port is no longer active in the switch's database. It has been deregistered. This causes the data storage system to send an &#x201c;FDISC&#x201d; command containing the port name (&#x2018;apa&#x2019;) to the switch for re-registration such that the world wide name (&#x2018;apa&#x2019;) of the first port may be associated with the second port. It will be appreciated that the second storage processor associated with the second port may provide the first unique name (&#x2018;apa&#x2019;) associated with the first port to the switch for re-registration. The switch comprising NPIV sends a virtual first port address or ID to the second port and re-registers and associates the first world wide name with the second port. In this example, the switch will direct I/O to the second port, which registered both the first and second world wide names, based on the first virtual address or ID and the second address or ID. The table <b>350</b> as illustrated includes a port name field <b>351</b> and a port address ID field <b>352</b>. The port name field includes the name of the first port &#x2018;apa&#x2019; and the second port &#x2018;apb&#x2019;. The port address ID field comprises the virtual address &#x2018;V-0&#x2019; of port name &#x2018;apa&#x2019; and the address &#x2018;1&#x2019; of port name &#x2018;apb&#x2019;. It will also be appreciated that a third field is illustrated identifying the port that received the &#x201c;FDISC&#x201d; command (steps <b>234</b> and <b>236</b>). This is included to clearly illustrate that the I/O will be directed to the storage system by the switch through switch port afb and the second port of the storage system. The switch sends the table, or at least entries relating to port name and ID, to all members of the SAN registered to receive state change notification. Accordingly, the hosts have the port addresses or IDs of the ports so Fibre Channel communications between the hosts and storage system or array can ensue.</p>
<p id="p-0046" num="0045">It will be appreciated by those skilled in the art that now that the hosts have IDs to access the ports, the hosts can determine what LUNs are available as discussed above. For example, each host <b>12</b> may send a query to each port <b>26</b> ID requesting a list of available LUN numbers. Once the LUN numbers for a given port ID are known, the host <b>12</b> may query each LUN <b>30</b> by using a combination of the port ID and LUN number to access the LUNs <b>30</b>. The host <b>12</b> may then query each LUN <b>30</b> for its corresponding LUN name. Once the host has gathered all this information, it may build a LUN table that relates LUN names, port IDs, and LUN numbers.</p>
<p id="p-0047" num="0046">Referring to <figref idref="DRAWINGS">FIG. 8</figref>, there is illustrated a representation of a storage area network implementing the technique as described herein. In this example, the first storage processor associated with the first port has failed, and the Fibre Channel link <b>24</b> between first port <b>26</b> and array-facing switch port afa, as illustrated in the figure, cannot facilitate communication between switch and storage system. Accordingly, in accordance with the technique, the second storage processor associated with the second port provides the first unique name (&#x2018;apa&#x2019;) associated with the first port to the switch for re-registration. The switch comprising NPIV sends a virtual first port address or ID to the second port and re-registers and associates the first world wide name with the second port. It can be seen from the figure that the world wide names &#x2018;apb&#x2019; and &#x2018;apa&#x2019; are both associated with the second port in accordance with the technique.</p>
<p id="p-0048" num="0047">Referring to <figref idref="DRAWINGS">FIG. 9</figref>, there is illustrated a further technique <b>400</b> for use in managing a port failover in a data storage system. The technique is substantially similar to the technique <b>300</b> as described with respect to <figref idref="DRAWINGS">FIG. 5</figref>. The steps <b>310</b> and <b>320</b> are the same as <figref idref="DRAWINGS">FIG. 5</figref> and similar comments apply to similar steps. However, the technique with respect to <figref idref="DRAWINGS">FIG. 9</figref> comprises detecting <b>410</b> the operational state of the first and second ports. A failure state in connection with one of the first and second ports activating deregistration of the unique name of the port. The technique herein differs from the previous technique in that it monitors and detects the state of the ports. For example, if the cable to the port is pulled then the technique may detect a failure state in connection with the port. The technique also comprises providing <b>420</b> from the data storage system to the Fibre Channel switch one of the first and second unique names characterizing one of the first and second ports for facilitating re-registration of the one of the first and second ports with the Fibre Channel switch in response to detecting a failure state in connection with the one of the first and second ports. The one of the first and second unique names provided from the data storage system to the Fibre Channel switch for facilitating re-registration such that the one of the first and second unique names characterizing the one of the first and second ports is associated with the other of the first and second ports. For example, if the first port fails, the first port may be deregistered by removing the name from the name server table in the switch. In such a scenario, the second storage processor associated with the second port may provide the world wide name associated with the first port to the switch for registration such that the world wide name of the first port may be associated with the second port. As discussed above, the switch may comprise NPIV such that a single physical port, for example, the second port, may have multiple virtual ports associated therewith. The technique as described herein may leverage the NPIV technology such that a virtual first address is issued in response to providing the world wide name of the first port to the switch.</p>
<p id="p-0049" num="0048">Referring to <figref idref="DRAWINGS">FIG. 10</figref>, there is illustrated a further technique <b>500</b> for use in managing a port failover in a data storage system comprising a storage processor having more than one port associated therewith. The technique as described in this figure differs from the previous techniques in that in the embodiment the data storage system comprises a first storage processor and first and second ports associated with the first storage processor. In this embodiment, the data storage system provides <b>510</b> to the Fibre Channel switch a first unique name characterizing a first port associated with the first storage processor for facilitating registration of the first associated port with the Fibre Channel switch. The first unique name is provided from the data storage system to the Fibre Channel switch such that the first unique name is associated with the first associated port. Furthermore, the data storage system provides <b>520</b> to the Fibre Channel switch a second unique name characterizing the second port associated with the first storage processor for facilitating registration of the second associated port with the Fibre Channel switch. The second unique name is provided from the data storage system to the Fibre Channel switch such that the second unique name is associated with the second associated port. Additionally, the data storage system detects <b>530</b> the operational state of the first and second ports associated with the first storage processor in the data storage system. A failure state in connection with one of the first and second associated ports activates deregistration of the port. Moreover, the data storage system provides <b>540</b> to the Fibre Channel switch one of the first and second unique names characterizing one of the first and second associated ports for facilitating re-registration of the one of the first and second associated ports with the Fibre Channel switch in response to detecting a failure state in connection with the one of the first and second associated ports. The one of the first and second unique names is provided from the data storage system to the Fibre Channel switch for facilitating re-registration such that the one of the first and second unique names characterizing the one of the first and second associated ports is associated with the other of the first and second associated ports. For example, if the first port fails, the first port may be deregistered by removing the name from the name server table in the switch. In such a scenario, the first storage processor associated with both the first and second ports may provide the world wide name associated with the first port to the switch for registration such that the world wide name of the first port may be associated with the second port. As discussed above, the switch may comprise NPIV such that a single physical port, for example, the second port, may have multiple virtual ports associated therewith. The technique as described herein may leverage the NPIV technology such that a virtual first address is issued in response to providing the world wide name of the first port to the switch for re-registration.</p>
<p id="p-0050" num="0049">While the above techniques describe port failover in a data storage system, it will be appreciated that the techniques may in some embodiments be configured for managing port failover between different data storage systems.</p>
<p id="p-0051" num="0050">It will also be understood that in certain embodiments a subset of LUNs may be visible only to one port. It will be appreciated that in these embodiments if a port were to fail the LUNs may also be visible to the virtualized port upon successful failover.</p>
<p id="p-0052" num="0051">In connection with SCSI-based storage, a path may be formed between an initiator port, such as may be included in an HBA (host bus adapter) of a host, and a target port of a data storage system, such as a target port of an SP of a data storage system. One or more LUNs may be visible and accessible to the host over one or more paths. A LUN may be visible to a host over a path if the path has been recognized by the host. However, at a point in time, the LUN may not be accessible (e.g., the host cannot issue I/Os to access data of the LUN) over a particular path although the path may be characterized as visible. Thus, the LUN may be visible over multiple paths even though data of the LUN may not be accessible over all such visible paths. In this manner, the host may discover multiple paths to the LUN before the data of the LUN is accessible over all the multiple paths. The foregoing states regarding LUN visibility and accessibility may be representing using different path states and port states.</p>
<p id="p-0053" num="0052">In the embodiment described herein, associated with each SP may be a logical entity referred to as a target port group (TPG) including the one or more target ports of the SP. A TPG of an SP may be defined to include one or more target ports of the SP over which a set of one or more LUNs is visible and may also be accessible. In some embodiments, a LUN may be visible with respect to the entire TPG rather than on a port level basis. In other words, a LUN is visible on a TPG level. If the LUN is visible or accessible on a first target port in the TPG including that first target port, then the LUN is also accessible or visible on all targets ports of the TPG. Each TPG can take on a state (e.g., online/active or offline/passive). For a given LUN, the LUN is visible on a TPG level basis (e.g. with respect to all target ports of a TPG). As noted above, the LUN may be accessible through multiple TPGs&#x2014;TPG A and TPG B&#x2014;where TPG A may be offline and TPG B may be online thereby characterizing a passive-active model (e.g., passive referring to the offline status of TPG A and active referring to the online status of TPG B). In contrast there may be an active-active model where the LUN is accessible (e.g., online) through both of the foregoing TPGs. TPG A may be on a first SP A of a data storage system and TPG B may be on a second different SP B of the same or different data storage system. When the LUN is visible and currently accessible through a first TPG that is online on a first SP, the set of paths defined for the target ports of the TPG may be deemed the active set of paths. In a similar manner, the first TPG and first SP may be characterized as &#x201c;active&#x201d;. When the LUN is visible through a second TPG of a second SP that is offline so that the LUN is not currently accessible on paths defined for the target ports of the second TPG, the set of paths may be deemed passive. In a similar manner, the second TPG and the second SP may also be characterized as &#x201c;passive&#x201d;. By providing for both active and passive paths sets for a LUN, the host is able to discover all paths to both the first and second TPGs even though the LUN may not be accessible over all such paths at a point in time.</p>
<p id="p-0054" num="0053">Consistent with description above and elsewhere herein, it should be noted that use of the term &#x201c;online&#x201d; to describe a state may also be characterized as &#x201c;active&#x201d;. Furthermore, with reference to particular defined states of the ALUA (SCSI Asymmetrical Logical Unit Access) standard, a TPG, SP, path or target port for accessing data of a LUN, and the like, having a status of active or online may have an associated ALUA state of active-optimized. Similarly, consistent with description above and elsewhere herein, it should be noted that use of the term &#x201c;offline&#x201d; to describe a state may also be characterized as &#x201c;passive&#x201d;. Furthermore, with reference to particular ALUA defined states, a TPG, SP, path or target port for accessing data of a LUN, and the like, having a status of passive or offline may have an associated ALUA state of standby or unavailable.</p>
<p id="p-0055" num="0054">Described above are techniques that may be used in connection with port failover and port failback processing. Such techniques provide for virtual relocation or virtual movement of data storage system target ports. For example, in connection with a planned unavailability of a first SP A such as due to a planned SP upgrade, ports of the first SP A may be virtually relocated to ports of its peer SP B during the upgrade time. Thus, the same physical port of SP A may be associated with two WWNs of two physical target ports through virtual port assignment. NPIV and Fibre Channel (FC) are examples of standards that may be used in connection with techniques to move an identity of one port to another port, for example, when the port fails (or is otherwise inoperative or unavailable) or when the SP including (or associated with) the port fails (or is otherwise inoperative or unavailable).</p>
<p id="p-0056" num="0055">Furthermore, when the failed SP reboots and again becomes operative for processing host requests, the failed port(s) of the SP may resume their role as the primary or physical port as a result of failback processing. In this case, the physical port may once again log into the switch to redefine an association or assignment of the physical port ID and WWN as the primary association. The association or assignment of the virtual port ID and WWN may be considered as a secondary level association whereby if the primary association exists, the switch may use the primary association to override any secondary associations that may be defined for virtual port assignments. In this manner, when the previously failed physical port logs back into the switch, the primary association between physical port ID and WWN is once again established and may be used to override any existing secondary association for the virtual port assignment (e.g., whereby the same WWN is associated/registered with a virtual port ID).</p>
<p id="p-0057" num="0056">Described herein are techniques that may be used in connection with coordinating SPs, information, and I/Os in connection with performing port failover processing and port failback processing. For example, there may be I/Os pending or &#x201c;in flight&#x201d; when an event occurs causing port failover processing or port failback processing to occur. For example, consider a case where failover processing has been performed due to a failed SP thereby causing I/Os to be directed to one or more virtual ports (e.g., registered as physical ports of the failed SP's peer). The failed SP now reboots and failback processing is performed so that I/O may be redirected from the virtualized ports back to the rebooting SP's physical ports. In accordance with techniques herein, I/Os directed to a virtual port may be quiesced prior to redirecting I/O back to the original physical port of the rebooting SP. Such techniques herein provide for coordinating takeover, for example, when SP B (previously failed) now comes back online after rebooting. As described in more detail below, coordination is needed in connection with bringing up and down different ports (e.g., switching from directing I/Os from physical to virtual port, and vice-versa). To the host, this switchover of ports may appear that a link between the data storage system and host experiences an intermittent bounce (e.g., intermittent period of unavailability). In connection with techniques herein, processing may be performed to ensure appropriate and suitable coordination of processing steps.</p>
<p id="p-0058" num="0057">Described herein is a port matching technique to determine which ports take over failed ports. Each SP may maintain current port failover data for its ports and other SPs' ports to perform port matching for port failover. Additionally, each SP generates and maintains a current view of port information for all ports in the data storage system. The port failover data (such a denoting which port protects another port and also denoting which port is protected by another port) is generated when ports come online and such information is also updated when relevant trigger events occur on any of the failover-capable ports. When port failover properties change, port matching for failover is re-evaluated. An SP that discovers relevant changes to its port failover data causes a re-evaluation of port matching for failover of its ports. Similarly, when an SP receives peer port failover data, it re-evaluates port matching for failover of its ports. With ready access to current information about ports local to an SP and ports of other SPs, each SP independently evaluates port matching for failover. An inter-SP communication channel may be used by the SPs to proactively &#x201c;push port information&#x201d; to the other SP, in an unsolicited manner. Port failover data maintained may include port information such as related to whether ports are failover capable and/or failover enabled, what network fabric each port is connected to/belongs to, whether a port is available or not, and the like. For example, after a link &#x201c;bounce&#x201d; which generates a link event, a target port of the data storage system may be rediscovered and it may determined that it is now connected to a different fabric than prior to the link &#x201c;bounce&#x201d; occurrence. The particular fabric to which the target port is connected may affect which other ports can protect this port, and vice versa. Thus, port matching techniques may be re-performed responsive to such an event to re-evaluate what ports are protected by what other ports. Similarly, changing a port's property regarding whether a failover capabilities of a port have been enabled or disabled may cause SPs to update their local copy of port information and also re-execute the port matching techniques herein.</p>
<p id="p-0059" num="0058">Also described herein are techniques for virtualization of an SP for port failover. When a port is virtualized (e.g., relocated as a virtual port to another physical port) such as when a physical port of a failed SP B is virtualized as a virtual port of SP A, processing may be performed to have SP A provide responses and behavior for requests received on the virtual port in a manner mimicking, or consistent with, the requests being received on the original physical port and serviced by SP B. Techniques are described which present a virtual identity for SP B and its virtual ports to appear to the host as if SP B and its ports still exist and are currently functional and running. For example, assume a configuration between a host and the data storage system using an active-passive model whereby SP B paths/ports are active and SP A paths/ports are passive. Failover processing may be performed (such as due to an upgrade to SP B) whereby SP B's ports are now relocated through port virtualization to SP A. In this case, SP A must respond to requests and commands as if SP B had processed the requests and commands so that host is unaware of any SP failure or outage with respect to SP B. In this manner, the host is presented with a view of behavior so that the host continues to do I/O and issue commands to SP B ports. Port failover processing and subsequent port failback processing may be performed by the data storage system rather than the host.</p>
<p id="p-0060" num="0059">In connection with performing port failback processing (whereby I/Os are redirected from the virtual port back to the original physical port), it should be noted that some switches may properly support and handle an implicit takeover of a port address whereby the physical port logs back in while its secondary virtual port assignment exists. In switches supporting the implicit takeover, the physical and virtual port assignments may overlap in terms of definition within the switch and the switch may simply perform processing to use the primary physical port association rather than the virtual port. However, some switches may not support or properly handle implicit takeovers such as when the physical port comes back online. In this manner as described in more detail below, processing may be performed to ensure that the virtual port is unregistered before the physical port comes back online/relogs-in since operation of some switches may not support such implicit port takeovers whereby the primary port logs in while there is an existing secondary virtual port association for the same primary port. Techniques herein may be used to avoid having such overlap when both the physical and virtual port assignments exist for the same target port WWN.</p>
<p id="p-0061" num="0060">In connection with techniques herein, an SP boots up and discovers its own ports and information (e.g., attributes or characteristics) about its own local ports. Such port information may include, for example, the number of ports, physical port characteristics such as speed or bandwidth capabilities (e.g. 4 gigabits/second, 2 gigabits/second), failover information including failover capabilities (e.g., whether the port can or cannot be used for failover/can assume another port's identity thereby virtualizing that port and handling I/O, commands and the like directed to the virtualized port), and what fabric or switch each port is attached to (e.g., fabric ID or switch ID). This port information and exemplary uses are described in more detail below. Each SP may also perform processing of the port matching technique described herein to establish/determine what ports of the SP will protect what other ports of the peer SP, and also what ports of the peer SP will protect ports of this SP. In this manner, each SP may determine port information about its own ports such as initially on booting.</p>
<p id="p-0062" num="0061">Additionally, each SP updates its own local attributes/information regarding ports in response to trigger events. Such trigger events may include any link event of a relevant port for the SP thereby letting the SP update its state and port information dynamically based on changes over time. For example, SP A's port A<b>0</b> may be attached to a first fabric, such as a first switch having switch ID<b>1</b>. At a later point in time, SP A's port <b>0</b> is reattached to a second different fabric such as second switch having switch ID<b>2</b>. SP A accordingly updates its local port information. The SP may share its local port information with any other interested SP such as the peer SP in the same data storage system or other SPs in a federation of multiple different data storage systems. Such information may be shared with other peer SPs in the same data storage system over an inter-SP communication channel.</p>
<p id="p-0063" num="0062">In one embodiment as described herein, an SP may push a first portion of its port information to other interested SPs. However, each SP may independently determine a second portion of port information regarding its SP and about its peer SP (as well as generally about other SPs in the system) using port matching techniques. The particular information included in the foregoing first and second portions is described in more detail below. Each SP may store first portions of port information received/pushed by other SPs and may use such received information in connection with the SP independently performing port matchup processing thereby determining the SP's remaining second portion of port information.</p>
<p id="p-0064" num="0063">In connection with the port failover technique, the data storage system may mask host initiator accessibility failures to ports, such as on an unavailable SP, by allowing other ports, such as on the peer SP, to assume the identity and behavior of the unavailable ports as virtualized ports in addition to its own physical connections. Such failover and also failback to the failed ports (once such ports again become operative) may be characterized as transparent to the host using such paths for I/O. From the host perspective, the failover and failback may appear like link events whereby ports log out and back into the switch.</p>
<p id="p-0065" num="0064">Referring to <figref idref="DRAWINGS">FIG. 11</figref>, shown is an example of peer SPs of a data storage system as may be used in connection with performing port matching techniques described herein. The example <b>2000</b> includes two SPs <b>2002</b><i>a</i>, <b>2002</b><i>b </i>which may be peer SPs of a data storage system as described elsewhere herein. Note that other components that may be included in the data storage system are omitted for simplicity in illustration of the port matching techniques. SP A <b>2002</b><i>a </i>may include two ports <b>2004</b><i>a</i>, <b>2004</b><i>b</i>. SP B <b>2002</b><i>b </i>may include two ports <b>2004</b><i>c</i>, <b>2004</b><i>d</i>. Although the port matching technique is illustrated in connection with SPs each including the same number of two ports, it should be noted that the techniques herein may generally be used in connection with any number of ports per SP, or more generally between any two sets of ports (whereby each set of ports may not be bound to the same physical SP in a configuration). Additionally, the two sets of ports, such as on the two peer SPs, for which port matching is performed between &#x201c;protected&#x201d; and &#x201c;protecting&#x201d; ports (described in more detail below) may each include a different number of ports such as illustrated in connection with another example in following paragraphs.</p>
<p id="p-0066" num="0065">In this example of port matching that will be described with reference to <figref idref="DRAWINGS">FIG. 11</figref>, the port matching entities and level of granularity is between SPs whereby ports from a first SP may failover to another SP when the first SP fails or any of its ports otherwise are unavailable. In other words, in some embodiments, it may be that either all ports of a single SP are running as physical ports or all such ports are running as virtual ports (e.g., such as hosted on another peer SP's set of physical ports). However it should be noted that other levels of granularity are possible for failover port matching. For example, with reference to <figref idref="DRAWINGS">FIG. 11</figref>, it may be that port <b>2004</b><i>a </i>of SP A is running virtualized as a virtual port of either port <b>2004</b><i>c </i>or <b>2004</b><i>d </i>of SP B while port <b>2004</b><i>b </i>of SP A is logged into the switch and running as a physical port for processing I/Os. In this manner, an embodiment using techniques herein may allow for different levels of granularity of running virtualized ports (e.g., allowing individual ports to run virtualized or not, allowing only defined groups of ports such as per-SP to run virtualized or not, and the like). Additionally, it should be noted that although examples may be presented herein where ports are virtualized on another SP but within the same data storage system, in some embodiments, a physical port of one data storage system (such as a data storage array) may run as a virtual port on a second different physical storage system (such as a different data storage array in the same federation). Such flexibility to provide for virtual ports effectively allows a first physical port to be moved or relocated as a virtual port to another second physical port for any reason such as, for example, when the first physical port or its SP has failed in an unplanned outage, when the first physical port or its SP is unavailable for planned outages such as with a hardware and/or software upgrade, when it may be desirable to move the first physical port to another data storage system to better utilize resources or otherwise provide other advantages. It will be appreciated by those skilled in the art that the foregoing and other particulars for this example should not be construed as limitations of techniques herein.</p>
<p id="p-0067" num="0066">The port matching technique may be used to determine, at one or more points in time prior to any port or SP failure, which functioning port takes over for which particular failed port. As described in more detail, the port matching technique may determine, based on one or more matching criteria, which port of SP B will be protected by (e.g., virtualized by) which port of SP A such as upon failure of SP B. The port matching technique processing may be performed on each data storage system, and more particularly in this example, may execute on each SP. In this manner, each SP may independently determine which functioning ports takeover which failed ports via port virtualization. For example, SP A may perform the port matching technique described herein using a snapshot of SP B's port information and possibly other information in performing the port matchup. Similarly, SP B may independently perform the port matching technique described herein using a snapshot of SP A's port information and possibly other information in performing the port matchup. In this manner, processing for determining a set of port matches between SP A and SP B may be performed independently by both SP A and SP B so that if either SP A or SP B failsover (e.g., becomes unavailable for planned or unplanned reasons) to the other surviving SP, the surviving SP may use the port matching information to determine which of the surviving SP's ports take over for which of the failing SP's ports. The port matching technique described herein may also be performed responsive to other event occurrences such as, for example, after an SP reboots or comes back online as well as one or more other defined event occurrences as may be included in a defined policy. The matchup technique may be performed or repeated upon the occurrence of particular events such as, for example, each time there is a FC link event including switch logins and logouts (e.g., FLOGI and FDISC switch commands).</p>
<p id="p-0068" num="0067">Referring to <figref idref="DRAWINGS">FIG. 12</figref>, shown is an example of port information as may be included on each SP for its ports as well as for ports of the peer SP in an embodiment in accordance with techniques herein. The example <b>2050</b> includes a table <b>2060</b> with an entry or row for each port identified in column <b>2062</b> having associated port information in column <b>2064</b>. In this example continuing with <figref idref="DRAWINGS">FIG. 11</figref>, there are <b>4</b> ports having WWNs A<b>0</b>, A<b>1</b>, B<b>0</b> and B<b>1</b>. Row <b>2060</b><i>a </i>of table <b>2060</b> includes port information for port WWN A<b>0</b>. Row <b>2060</b><i>b </i>of table <b>2060</b> includes port information for port WWN A<b>1</b>. Row <b>2060</b><i>c </i>of table <b>2060</b> includes port information for port WWN B<b>0</b>. Row <b>2060</b><i>d </i>of table <b>2060</b> includes port information for port WWN B<b>1</b>. For each of the foregoing ports, port information <b>2064</b> may be stored. At least some of the port information <b>2064</b> for each port may be included in criteria used in connection with performing port matching techniques.</p>
<p id="p-0069" num="0068">Element <b>2065</b> illustrates in more detail exemplary information as may be maintained for each port's information in a row of the table <b>2060</b>. Port information <b>2065</b> may be generally characterized as including port state and/or attribute or property information. Port information <b>2065</b> for each port may include one or more bits <b>2066</b> having settings denoting various state information for the port, a fabric name or identifier (ID) <b>2068</b>, a field <b>2070</b> identifying a peer port which protects this port (if any) (e.g., upon failure of this port, this port fails over to the peer port identified in <b>2070</b> thereby running as a virtualized port on the peer port of <b>2070</b>), a field <b>2072</b> identifying a peer port which this port is protecting (if any) (e.g., upon failure of the peer port, the peer port of <b>2072</b> fails over to this port thereby running as a virtualized port on this port), one or more physical characteristics <b>2074</b>, and optionally other information <b>2076</b>.</p>
<p id="p-0070" num="0069">The bits <b>2066</b> may include one or more flag bits describing the operating status of the port including a supported bit <b>2066</b><i>a</i>, enabled bit <b>2066</b><i>b</i>, protected bit <b>2066</b><i>c</i>, protecting bit <b>2066</b><i>d</i>, can_protect bit <b>2066</b><i>e </i>and virtualized bit <b>2066</b><i>f</i>. Each of the foregoing bits of <b>2066</b> may have a setting of 1 or 0. The supported bit <b>2066</b><i>a </i>indicates whether this port is capable of supporting port failover as described herein (e.g., whether the physical port can be used as virtual port for a second physical port upon failure of the second physical port). A value of 1 for <b>2066</b><i>a </i>indicates that this port is capable of supporting port failover as described herein using virtualized ports, otherwise <b>2066</b><i>a </i>is zero. The enabled bit <b>2066</b><i>b </i>indicates whether the port failover feature as described herein (e.g., whether the physical port can be used as virtual port for a second physical port upon failure of the second physical port) is supported and also enabled. A value of 1 for <b>2066</b><i>b </i>indicates that this port is capable of supporting port failover as described herein using virtualized ports and additionally that this feature is also enabled/turned on for use, otherwise <b>2066</b><i>b </i>is zero. The protected bit <b>2066</b><i>c </i>indicates whether this port is protected by another port such as on a peer SP. A value of 1 for <b>2066</b><i>c </i>indicates that if this port should fail, another second port uses port failover to failover to a virtualized port for this port on a peer SP; otherwise <b>2066</b><i>c </i>is zero. The protecting bit <b>2066</b><i>d </i>indicates whether this port is protecting another second port such as on a peer SP. A value of 1 for <b>2066</b><i>d </i>indicates that if another second port should fail, this port is providing failover protection for this second port (e.g., upon failure of the second port, the second port fails over to this port which is used as a virtualized port for the failing second port); otherwise <b>2066</b><i>d </i>is zero. The canprotect bit <b>2066</b><i>e </i>indicates whether this port has the capability to protect another port but is not necessarily protecting another port. In other words, a value of 1 for <b>2066</b><i>e </i>indicates that this port has the capabilities needed to be considered a candidate as a &#x201c;protector&#x201d; port to which another port may failover; otherwise <b>2066</b><i>e </i>is zero. The virtualized bit <b>2066</b><i>f </i>indicates whether this port is currently running on/as a virtualized port rather than a physical port. A value of 1 for <b>2066</b><i>f </i>indicates that this port is currently running as a virtualized port and a value of 0 indicates that this port is currently running as a physical port (e.g., a value of 1 for <b>2066</b><i>f </i>indicates this port is currently being virtualized by another second physical port such as due to previous failure of this port and failover to the second physical port).</p>
<p id="p-0071" num="0070">The fabric name or ID <b>2068</b> identifies the particular fabric, such as the switch, to which this target data storage system port is connected. Each switch or other component serving as the network or connection fabric to which the target port is directly connected may have a unique identifier thereby providing for differentiating between different physical switches and other components of the fabric. As described elsewhere herein, the fabric name or ID may be included in criteria used with port matching. For a first port to protect a second port upon failure of the second port (e.g., for one port to serve as a virtual port for the second should the second fail), both ports may be required to belong to the same fabric (e.g., same switch ID) as denoted by both ports having the same fabric name or ID <b>2068</b>. The foregoing may be a requirement for some embodiments such as those using fibre channel connections.</p>
<p id="p-0072" num="0071">Physical characteristics <b>2074</b> may include one or more physical attributes of the port such as related to performance capabilities of the port. For example, element <b>2074</b> may include the bandwidth or maximum data transfer rate for the port, current load/workload of the port, port-specific resources such as memory of the port, and the like. Element <b>2076</b> generally denotes that the port information <b>2065</b> may also include other information than as described herein.</p>
<p id="p-0073" num="0072">It should be noted an SP may communicate information regarding its own ports (e.g., various portions of port information <b>2065</b>) regarding its ports to the peer SP. For example, SP A may communicate to SP B a first portion of port information <b>2065</b> regarding A<b>0</b> and A<b>1</b> such as, for example, values of bits <b>2066</b><i>a,b,e </i>and <i>f</i>, and information of fields <b>2068</b> and <b>2074</b>. As described in more detail below, other portions of the port information <b>2065</b> may be independently determined by each SP using port matching techniques described herein. In an embodiment, each SP may execute the same port matching technique processing steps so that each SP may determine the same such values.</p>
<p id="p-0074" num="0073">The port matching technique described herein may include performing a first set of processing steps whereby the first SP performing the processing traverses a list of its own ports and determines which ports of the peer SP will be protected by the first SP's own ports. For example with reference back to <figref idref="DRAWINGS">FIG. 11</figref>, SP A performs such first processing to determine which port of peer SP B will be protected by port A<b>0</b> (e.g., such that this protected port fails over to port A<b>0</b> and is thereby virtualized by physical port A<b>0</b>), and which port of peer SP B will similarly be protected by port A<b>1</b>. Subsequently, a second set of processing steps may then be performed by the first SP whereby the first SP traverses a port list including ports of the peer SP and determines which ports of the peer SP will protect ports of the first SP. For example with reference back to <figref idref="DRAWINGS">FIG. 11</figref>, SP A performs such second processing to determine which port of peer SP B will protect port A<b>0</b> (e.g., such that if port A<b>0</b> fails, this port of the peer SP B virtualizes port A<b>0</b>), and which port of peer SP B will similarly protect port A<b>1</b>. The port matching technique uses one or more criteria to determine whether there is a match between two ports so that a first functioning port, such as of first SP, may protect a second port, such as a failing port of a peer SP. As such, the port matching techniques may be performed prior to the second port failure occurring so that when/if the second port fails, the first port knows that it has been assigned the role of protector port for the second port (e.g., and virtualizes the second port on the first physical port). In this manner, the second port may be virtually moved to the first physical port thereby handling I/Os from the host on behalf of the first port as well as the second port.</p>
<p id="p-0075" num="0074">In connection with one embodiment, a first port may protect a second port if both ports meet one or more port matching criteria. For example, such criteria may identify one or more pieces of data or port information that must match between the first and second ports in order for the first port to be qualified or selected to protect the second port. For example, one embodiment may specify as port matching criteria that the two ports belong to the same network or connection fabric (e.g., both ports be connected to the same switch or other component). With reference back to <figref idref="DRAWINGS">FIG. 12</figref>, port matching processing may include determining whether both ports have the same fabric name or ID <b>2068</b> in order for either the first port to protect the second, or vice versa. Additional portions of port information <b>2065</b> may be used in specifying port matching criteria. For example, an embodiment may specify the following as port matching criteria: that the two ports belong to the same fabric (e.g., matching fabric name or IDs <b>2068</b>), that the second port is not already protected by another port (e.g., the second port's protecting bit <b>2066</b><i>d=</i>0), that both the first and second ports be capable of failover protection and also enabled to provide port failover protection for another port (e.g., both have enabled bit <b>2066</b><i>b=</i>1), and that the first port providing the failover protection not already be protecting another port (e.g., first port's protecting bit <b>2066</b><i>d=</i>0 since in this example each port may only protect a single other peer port).</p>
<p id="p-0076" num="0075">For example, with reference now to <figref idref="DRAWINGS">FIG. 13</figref>, shown is an example further illustrating port matching techniques herein such as a result of SP A performing processing as described above. The example <b>2100</b> includes a table <b>2110</b> denoting the results of SP A performing the first processing noted above whereby a determination is made regarding which ports of SP A will protect which ports of the peer SP B. Table <b>2110</b> includes entry <b>2110</b><i>a </i>denoting that port A<b>0</b> of SP A will protect B<b>0</b> of SP B since processing has determined a match between first port A<b>0</b> and second port B<b>0</b> in accordance with the above-mentioned matching criteria (e.g., A<b>0</b> protects B<b>0</b>). Table <b>2110</b> includes entry <b>2110</b><i>b </i>denoting that port A<b>1</b> of SP A will protect B<b>1</b> since processing has determined a match between first port A<b>1</b> and second port B<b>1</b> in accordance with the above-mentioned matching criteria (e.g., A<b>1</b> protects B<b>1</b>). Table <b>2120</b> denotes the particular port information (e.g., as described in connection with <figref idref="DRAWINGS">FIG. 12</figref>) that may be accordingly updated as a result of the matching ports A<b>0</b> and B<b>0</b> and matching ports A<b>1</b> and B<b>1</b>. Entry <b>2120</b><i>a </i>indicates that A<b>0</b>'s protecting bit <b>2066</b><i>d </i>is set to 1 and A<b>0</b>'s protecting port field <b>2072</b> is set to port B<b>0</b>. Additionally, entry <b>2120</b><i>a </i>indicates that B<b>0</b>'s protected bit <b>2066</b><i>c </i>is set to 1 and B<b>0</b>'s protected by field <b>2070</b> is set to port A<b>0</b>. Entry <b>2120</b><i>b </i>indicates that A<b>1</b>'s protecting bit <b>2066</b><i>d </i>is set to 1 and A<b>1</b>'s protecting port field <b>2072</b> is set to port B<b>1</b>. Additionally, entry <b>2120</b><i>b </i>indicates that B<b>1</b>'s protected bit <b>2066</b><i>c </i>is set to 1 and B<b>1</b>'s protected by field <b>2070</b> is set to port A<b>1</b>.</p>
<p id="p-0077" num="0076">The example <b>2100</b> also includes a table <b>2130</b> denoting the results of SP A performing the second processing noted above whereby a determination is made regarding which ports of SP B will protect which ports of SP A. Table <b>2130</b> includes entry <b>2130</b><i>a </i>denoting that port B<b>0</b> of SP B will protect A<b>0</b> since processing has determined a match between first port B<b>0</b> and second port A<b>0</b> in accordance with the above-mentioned matching criteria. Table <b>2130</b> includes entry <b>2130</b><i>b </i>denoting that port B<b>1</b> of SP B will protect A<b>1</b> since processing has determined a match between first port B<b>1</b> and second port A<b>1</b> in accordance with the above-mentioned matching criteria. Table <b>2140</b> denotes the particular port information (e.g., as described in connection with <figref idref="DRAWINGS">FIG. 12</figref>) that may be accordingly updated as a result of the matching port B<b>0</b> as protecting A<b>0</b>, and matching port A<b>1</b> as protecting B<b>1</b>. Entry <b>2140</b><i>a </i>indicates that B<b>0</b>'s protecting bit <b>2066</b><i>d </i>is set to 1 and B<b>0</b>'s protecting port field <b>2072</b> is set to port A<b>0</b>. Additionally, entry <b>2140</b><i>a </i>indicates that A<b>0</b>'s protected bit <b>2066</b><i>c </i>is set to 1 and A<b>0</b>'s protected by field <b>2070</b> is set to port B<b>0</b>. Entry <b>2140</b><i>b </i>indicates that B<b>1</b>'s protecting bit <b>2066</b><i>d </i>is set to 1 and B<b>1</b>'s protecting port field <b>2072</b> is set to port A<b>1</b>. Additionally, entry <b>2140</b><i>b </i>indicates that A<b>1</b>'s protected bit <b>2066</b><i>c </i>is set to 1 and A<b>1</b>'s protected by field <b>2070</b> is set to port B<b>1</b>.</p>
<p id="p-0078" num="0077">Below is a pseudo-code representation of the port matching technique as described above in connection with <figref idref="DRAWINGS">FIG. 13</figref>. With reference to the representation below, SP A may be performing the processing and its ports may be included in the variable list myPortList, and SP B may be the peer SP having its ports included in the variable list PeerPortList.</p>
<p id="p-0079" num="0078">
<tables id="TABLE-US-00001" num="00001">
<table frame="none" colsep="0" rowsep="0" pgwide="1">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="273pt" align="left"/>
<thead>
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry>// NPIV port selection pseudocode</entry>
</row>
<row>
<entry>// Assumption is that this SP has information for both (all) SPs</entry>
</row>
<row>
<entry>typedef struct_NPIV_PORT_INFO // port information bit from 2065 used as matching criteria</entry>
</row>
<row>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;//in this example</entry>
</row>
<row>
<entry>{</entry>
</row>
<row>
<entry>&#x2003;HTPF_Enabled, &#x2003;&#x2003;&#x2003;&#x2003;&#x2003;// bit 2066b</entry>
</row>
<row>
<entry>&#x2003;HTPF_ProtectedByPort,&#x2003;&#x2003;// field 2070; Null = Not Protected</entry>
</row>
<row>
<entry>&#x2003;HTPF_ProtectingPort, &#x2003;&#x2003;// field 2072; Null = Not Protecting</entry>
</row>
<row>
<entry>&#x2003;HTPF_ Protecting,&#x2003;&#x2003;&#x2003;&#x2003;// bit 2066d</entry>
</row>
<row>
<entry>&#x2003;HTPF_Protected,&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;// bit 2066c</entry>
</row>
<row>
<entry>&#x2003;HTPF_Fabric_Name&#x2003;&#x2003;&#x2003;&#x2003;// field 2068</entry>
</row>
<row>
<entry>} NPIV_PORT_INFO, *PNPIV_PORT_INFO;</entry>
</row>
<row>
<entry>PNPIV_PORT_INFO SelectNPIVPorts( )</entry>
</row>
<row>
<entry>{</entry>
</row>
<row>
<entry>\\ Obtain port lists</entry>
</row>
<row>
<entry>&#x2003;AcquireLock(publicPortListLock);</entry>
</row>
<row>
<entry>&#x2003;myPortList = myPublicPortList;</entry>
</row>
<row>
<entry>&#x2003;peerPortList = peerPublicPortList;</entry>
</row>
<row>
<entry>&#x2003;ReleaseLock(publicPortListLock);</entry>
</row>
<row>
<entry>&#x2003;for port in union(myPortList, peerPortList)</entry>
</row>
<row>
<entry>&#x2003;{</entry>
</row>
<row>
<entry>&#x2003;&#x2003;port.HTPF_Protected = False; // We calculate from scratch</entry>
</row>
<row>
<entry>&#x2003;&#x2003;port.HTPF_ProtectedByPort = Null;</entry>
</row>
<row>
<entry>&#x2003;&#x2003;port.HTPF_Protecting = False; // so reset a few parameters</entry>
</row>
<row>
<entry>&#x2003;&#x2003;port.HTPF_ProtectingPort = Null;</entry>
</row>
<row>
<entry>&#x2003;}</entry>
</row>
<row>
<entry>&#x2003;CalculateNPIVPort(&#x26;myPortList, &#x26;peerPortList); // SP A determines which ports of its ports</entry>
</row>
<row>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;// protect particular matched ports of SP B</entry>
</row>
<row>
<entry>&#x2003;CalculateNPIVPort(&#x26;peerPortList, &#x26;myPortList); // SP A determines which ports of SPB</entry>
</row>
<row>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;// protect particular matched ports of SP A</entry>
</row>
<row>
<entry>&#x2003;response = union(myPortList, peerPortList);</entry>
</row>
<row>
<entry>&#x2003;return response;</entry>
</row>
<row>
<entry>}</entry>
</row>
<row>
<entry>// For each port in pMyPortList, determine which port within pPeerPortList</entry>
</row>
<row>
<entry>// will be be protected by that port. Update both lists accordingly.</entry>
</row>
<row>
<entry>// It is expected that this routine is called twice, swapping</entry>
</row>
<row>
<entry>// pMyPortList and pPeerPortList on the second call so that the reciprocal</entry>
</row>
<row>
<entry>// information in both port lists is updated.</entry>
</row>
<row>
<entry>void CalculateNPIVPorts(pMyPortList, pPeerPortList)</entry>
</row>
<row>
<entry>{</entry>
</row>
<row>
<entry>&#x2003;for thisPort in pMyPortList</entry>
</row>
<row>
<entry>&#x2003;{</entry>
</row>
<row>
<entry>&#x2003;&#x2003;if((thisPort.HTPF_Enabled) &#x26;&#x26; (!thisPort.HTPF_Protecting)) // Port matching criteria</entry>
</row>
<row>
<entry>&#x2003;&#x2003;{</entry>
</row>
<row>
<entry>&#x2003;&#x2003;&#x2003;FOUND= False;</entry>
</row>
<row>
<entry>&#x2003;&#x2003;&#x2003;for peerPort in pPeerPortList</entry>
</row>
<row>
<entry>&#x2003;&#x2003;&#x2003;{</entry>
</row>
<row>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;// Criteria for used for port matching between protector and protected ports</entry>
</row>
<row>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;if ((peerPort.FabricName == thisPort.FabricName) &#x26;&#x26;</entry>
</row>
<row>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;(!peerPort.HTPF_Protected) &#x26;&#x26;</entry>
</row>
<row>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;(peerPort.HTPF_Enabled))</entry>
</row>
<row>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;{</entry>
</row>
<row>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;peerPort.HTPF_Protected = True;</entry>
</row>
<row>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;peerPort.HTPF_ProtectedByPort= thisPort;</entry>
</row>
<row>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;thisPort.HTPF_Protecting = True</entry>
</row>
<row>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;thisPort.HTPF_ProtectingPort = peerPort;</entry>
</row>
<row>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;FOUND=True;</entry>
</row>
<row>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;}</entry>
</row>
<row>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;// Break out/terminate For loop if found a peer port to protect</entry>
</row>
<row>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;if (FOUND==TRUE) break;</entry>
</row>
<row>
<entry>&#x2003;&#x2003;&#x2003;}</entry>
</row>
<row>
<entry>&#x2003;&#x2003;}</entry>
</row>
<row>
<entry>&#x2003;}</entry>
</row>
<row>
<entry>}</entry>
</row>
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0080" num="0079">It should be noted that each SP may perform the port matching technique herein independently of the other SP so that each SP may locally determine a set of information such as illustrated in the tables of <figref idref="DRAWINGS">FIG. 13</figref>. In this manner, each SP may have its own set of information as in the tables of <figref idref="DRAWINGS">FIG. 13</figref> so that any one of the SPs may be the surviving SP and takeover a failing SP's ports using only the surviving SP's own local information (as may be determined prior to the failure by the surviving SP). A portion of port information as illustrated in <figref idref="DRAWINGS">FIG. 12</figref> may be communicated between SPs and other port information may be determined individually by each SP with respect to its own ports as well as ports of the peer SP in accordance with processing of the port matching technique.</p>
<p id="p-0081" num="0080">Although the port matching technique is illustrated in connection with SPs each including the same number of two ports, it should be noted that the techniques herein may generally be used in connection with any number of ports. Additionally, the two sets of ports, such as on the two peer SPs, for which port matching is performed (between protected and protecting ports) may each include a different number of ports such as further illustrated in connection with another example in following paragraphs.</p>
<p id="p-0082" num="0081">With reference to <figref idref="DRAWINGS">FIG. 14</figref>, shown is an example <b>2200</b> of two peer SPs that may be included in an embodiment using the port matching techniques herein. The example <b>2200</b> is similar to the example <b>2000</b> described above with the difference that SP A <b>2202</b><i>a </i>includes 3 ports <b>2204</b><i>a</i>-<i>c </i>and SP B <b>2202</b><i>b </i>includes 2 ports <b>2204</b><i>d</i>-<i>e</i>. The port matching technique processing as described above in connection with <figref idref="DRAWINGS">FIGS. 11 and 13</figref> may be performed in connection with the peer SPs having ports as in the example <b>2200</b> with the additional criteria/provision that a port may be allowed to protect more than one other peer SP port.</p>
<p id="p-0083" num="0082">With reference to <figref idref="DRAWINGS">FIG. 15</figref>, tables <b>2310</b>, <b>2320</b>, <b>2330</b> and <b>2340</b> are respectively similar to tables <b>2110</b>, <b>2120</b>, <b>2130</b> and <b>2140</b> of <figref idref="DRAWINGS">FIG. 13</figref> with the difference that table <b>2310</b> includes an additional entry <b>2310</b><i>c </i>for port A<b>2</b> of SP A, table <b>2330</b> includes an additional entry <b>2330</b><i>c</i>, and table <b>2340</b> includes an additional entry <b>2340</b><i>c</i>. Entry <b>2310</b><i>c </i>of table <b>2310</b> denotes that port A<b>2</b>, although enabled and capable of protecting another port of SP B, has not been selected as a candidate to provide such protection of another port of SP B. This is because each port of SP B is protected by a single port of SP A and both B<b>0</b> and B<b>1</b> of SP B are accordingly already protected by A<b>0</b> and A<b>1</b> (as denoted by <b>2310</b><i>a</i>-<i>b</i>). Entries <b>2330</b><i>b</i>-<i>c </i>of table <b>2330</b> denote that port B<b>1</b> of SP B protects both ports A<b>1</b> and A<b>2</b> of SP A. In this manner, the criteria mentioned above used in this exemplary embodiment may be modified to allow for possibly having a single port, such as B<b>1</b>, protect more than a single peer SP port. Entry <b>2340</b><i>c </i>of table <b>2340</b> denotes that B<b>1</b>'s protecting port field (<b>2072</b> of the example <b>2050</b>) includes both ports A<b>1</b> and A<b>2</b>, A<b>2</b>'s protected bit field <b>2066</b><i>c </i>is set to 1, and 2's protected by field <b>2070</b> identifies port B<b>1</b>.</p>
<p id="p-0084" num="0083">The foregoing provides some illustrative examples of how port matching may be performed based on a set of criteria. An embodiment may use alternative and/or additional criteria besides that as mentioned above. For example, other criteria may include data transfer limit or maximum bandwidth capabilities of the port, and/or what is the current load on the port such as the current data transfer rate of the target port (e.g., dynamic aspect/attribute that may change over time). The current data transfer rate may be characterized as a workload metric and may be measured based on current I/O requests serviced through the target port. As noted above an embodiment may consider throughput or bandwidth limits/capabilities of the port in criteria used in connection with deciding whether a first port may protect one or more other peer SP ports. For example, port A may have a maximum bandwidth or data transfer capability of 10 gigabits/second (Gb/s). The port matching technique may allow port A to protect only a single peer port which has the same maximum bandwidth or data transfer capability of 10 gigabits/second (Gb/s) as port A.</p>
<p id="p-0085" num="0084">Rather than use, or in addition to using, the maximum data transfer capabilities of the ports as just described, an embodiment may measure current workload through ports A, B and C and use such current activity levels as a gauge in whether port A's maximum data transfer capability may be able to handle the current workload of all the ports should both ports B and C failover to port A at the same time. For example, if the currently observed or measured workload (e.g., may be average or maximum such value observed for a time period) through ports A, B and C are each 2 Gb/s for a total current workload of 6 Gb/s, it may be determined that port A may protect ports B and C since port A has a maximum data transfer capability of 10 Gbs. Such calculations may allow for possible further increases in current workloads by factoring in an additional &#x201c;buffer&#x201d; amount so that the sum of the total current workload and this additional buffer amount must be less than the maximum data transfer capability of port A. Generally, an embodiment may specify criteria which is based on, for example, resources available for use with handling I/O traffic of the port (e.g., memory), port capabilities (e.g., maximum bandwidth/data transfer limits), workload (e.g., which may change over time), and the like.</p>
<p id="p-0086" num="0085">As described above, each SP may perform the same port matching technique processing to determine a portion of the port information stored locally on each SP. Even though each SP determines failover port matchup independently, both SPs may determine the same matching results since both SPs may execute code performing the same processing. In this manner, the port matching information and also updates to a portion of port state information (e.g., information of tables <b>2110</b>, <b>2120</b>, <b>2130</b> and <b>2140</b> of <figref idref="DRAWINGS">FIG. 13</figref>) as determined independently by each SP do not need to be communicated between SPs for each SP to have the same set of information available thereby obviating the need for additional peer-to-peer messages. Described previously, such as in connection with <figref idref="DRAWINGS">FIGS. 1-10</figref>, are techniques whereby functioning ports of a data storage system virtualize and take over failed ports. The port matching techniques just described may be used in connection with deciding which particular functioning port is matched with taking over for a particular failing port.</p>
<p id="p-0087" num="0086">The port matching techniques may be performed and managed on the data storage system using various port information such as described herein. Ports may be proactively evaluated to be ready for any subsequent port failover. Planned events resulting in SP and port unavailability (such as upgrading software and/or hardware of an SP) may proactively move or relocate ports of an upgraded SP using port virtualization to a functioning SP during the upgrade. Data storage system port information may be monitored to re-evaluate port matchings for failover purposes. As illustrated by the above examples, port matchings may be flexible in that any port, such as of a first SP, may be suitably matched in accordance with specified criteria with any other port, such as of a second peer SP. When a port of a data storage system fails, the system determines (based on computed port matching using the port matching techniques herein) which surviving port takes over the failed port's responsibilities. The data storage system may select candidate ports based on functional requirements for failover. For example, when using Fibre Channel, ports need to be connected to the same fabric so this may be included in the matching criteria as described above in such an environment using Fibre Channel. Additionally, candidate ports may be selected for better performance during failover using performance characteristics and information available such as related to maximum bandwidth or data transfer rate as also described above.</p>
<p id="p-0088" num="0087">An embodiment may use the port matching techniques herein at varying levels of granularity. The above-mentioned examples provide for SP-level granularity whereby ports from a first SP failover to another SP. The port matching techniques may also be applied for use with port-level failover granularity whereby there is failover from port to port (whereby both such ports may possibly be on the same SP or different SPs, or on the same data storage system or different data storage systems). Furthermore, the port matching techniques may be made with respect to sets of ports for any number of SPs across one or more data storage systems. The port matching technique may also be applied at an array-level failover whereby ports failover from a first data storage system to another data storage system such as upon failure of the first data storage system, when the first data storage system is upgraded or otherwise unavailable, and the like. The port matching technique may be automatically performed in response to one or more selected trigger event occurrences. For example, the port matching techniques herein may be performed responsive to any Fibre channel link event (e.g., any time there is a login or logout of the switch such as with an SP failure, SP boot, and the like). In this manner, port matching may be re-evaluated automatically and dynamically when ports are configured or reconfigured, based on port states (e.g., as links go up or down), and/or based on changes to port properties such as load, bandwidth, memory, and the like, for optimal performance during failover. The port matching techniques do not require active participation of a failed or failing SP so the port matching techniques may be used in connection with planned as well as unplanned SP and port outages, failures and unavailability.</p>
<p id="p-0089" num="0088">Referring to <figref idref="DRAWINGS">FIG. 16</figref>, shown is a flowchart of processing steps that may be performed in an embodiment in accordance with techniques herein. The flowchart <b>2400</b> generally summarizes processing as described above which may be performed twice by each SP upon the occurrence of a trigger condition or event causing processing for port matching to be performed.</p>
<p id="p-0090" num="0089">For example, SP A may execute the steps of <b>2400</b> a first time to determine, for each particular port of SP A, a matching port of the peer SP B that will be protected by the particular port of SP A. This first execution of the flowchart <b>2400</b> processing may result in generation of information such as described, for example, in connection with tables <b>2110</b> and <b>2120</b> of <figref idref="DRAWINGS">FIG. 13</figref>. SP A may then execute the steps of <b>2400</b> a second time to determine, for each particular port of the peer SP B, a matching port of SP A that will be protected by the particular port of SP B. This second execution of the flowchart <b>2400</b> processing may result in generation of information such as described, for example, in connection with tables <b>2130</b> and <b>2140</b> of <figref idref="DRAWINGS">FIG. 13</figref>.</p>
<p id="p-0091" num="0090">At step <b>2403</b>, current port may be assigned the next port in my port list. &#x201c;My port list&#x201d; may be a list of ports of the currently executing SP. At step <b>2404</b>, a determination is made as to whether the current port is a candidate available for protecting a peer port. Criteria used in connection with the decision of step <b>2404</b> may include, for example, the enabled bit <b>2066</b><i>b </i>and the protecting bit <b>2066</b><i>d </i>as described above where a determination is made at step <b>2404</b> with respect to port information for the current port so that step <b>2404</b> evaluates to yes/true if current port's enabled bit=1 and current port's protecting bit=0. If step <b>2404</b> evaluates to no (indicating that the current port is not available as a candidate for protecting another peer port), control proceeds to step <b>2406</b> where a determination is made as to whether all ports in my port list have been processed. If step <b>2406</b> evaluates to yes thereby indicating that all ports of the executing SP have been processed, processing stops. If step <b>2406</b> evaluates to no, control proceeds to step <b>2403</b>.</p>
<p id="p-0092" num="0091">If step <b>2404</b> evaluates to yes indicating that the current port is available to protect a peer port, control proceeds to step <b>2408</b> where peer port is assigned the next port in the peer port list. The peer port list is a list of peer SP ports. The processing loop beginning in step <b>2408</b> traverses the peer port list to try and find a peer port in the peer port list which matches the current port of the currently executing SP. At step <b>2410</b>, a determination is made as to whether the current port is a match for the peer port based on defined criteria. Step <b>2410</b> may include any suitable criteria, some examples of which are described herein, for evaluating whether the current port is a candidate for protecting the peer port in connection with port failover (e.g. upon the occurrence of the peer port failing, the peer port is virtualized by the current port thereby effectively moving or virtually relocating the peer port and its I/O traffic to the current port). If step <b>2410</b> evaluates to yes, control proceeds to step <b>2412</b> to perform processing to update port state information denoting the current port as protecting the peer port. Additionally, the peer port list is reset to the beginning (so that the next use of peer port list in step <b>2408</b> begins from the first entry of the peer port list). Control proceeds to step <b>2403</b> with the next port in my port list. If step <b>2410</b> evaluates to no, control proceeds to step <b>2414</b> where a determination is made as to whether processing of the peer port list is complete. If step <b>2414</b> evaluates no, control proceeds to step <b>2408</b> to process the next peer SP port. If step <b>2414</b> evaluates to yes, control proceeds to step <b>2416</b> whereby it is determined that no port match has been found for the current port to protect. Step <b>2416</b> includes resetting the peer port list to the beginning and control proceeds to step <b>2403</b>.</p>
<p id="p-0093" num="0092">The foregoing port matching technique may be performed in a general first step to determine which ports protect which other ports prior to the need to use such port matching information in connection with performing a port failover. It should be noted that the port matching technique may be performed multiple times in response to trigger event occurrence but is generalized here as a first step to denote determination of port matching information prior to port and/or SP failure. As a second step upon the occurrence of a port and/or SP failure, the port matching information may then be used to determine which surviving physical port provides protection for a failed physical port so that failover processing may be performed whereby the surviving physical port registers as a virtual port for the failed port. As a third step subsequent to performing port failover processing thereby having virtual ports receive host requests, processing may be performed to virtualize responses and behavior as if such responses were sent from the failed SP and its ports rather than the surviving SP and its ports. As a fourth step, the down or failed SP and its ports may reboot to again make the failed SP and its ports operative. In connection with this fourth step, the port matching technique may be re-executed. As in connection with other trigger events causing execution of the port matching technique, the state of the ports/port information associated with the newly booted SP may have changed since prior to the reboot. As such, an embodiment may re-execute the port matching processing using any updated port information for the new SP. As a fifth step, failback processing is performed to switch over or undo the prior failover processing. As a result of the fifth step, I/Os are redirected from virtual ports back to the original physical ports as prior to failover processing. As a sixth step, after completion of failback processing, host requests may be serviced in a normal or usual manner.</p>
<p id="p-0094" num="0093">In connection with transitioning into the second and fourth steps above, processing will now be described that may be performed to coordinate establishment of the specified I/O redirection (e.g., second step establishing/directing I/O from physical ports to virtual ports and the fourth step re-establishing/redirecting I/O from the virtual ports back to the original physical ports).</p>
<p id="p-0095" num="0094">As an example, consider a data storage system including two SPs&#x2014;SP A and SP B&#x2014;as described above. At the current point in time, assume the data storage system is currently operating in a virtualized mode and that failover processing has been completed in response to SP B failing whereby SP A's ports are currently operating as virtual ports for SP B's failed ports. Thus SP A's ports currently receive host requests directed to SP A's physical ports as well as the virtualized ports of SP B. Now, SP B reboots in order make SP B and its ports available and operative for receiving host requests.</p>
<p id="p-0096" num="0095">What will now be described is processing that may be performed in connection with performing the above-mentioned failback processing to redirect requests from the virtual paths and ports of SP B (currently being virtualized on physical ports and paths of SP B) back to those physical ports and paths of SP B (as prior to failover processing).</p>
<p id="p-0097" num="0096">With reference to <figref idref="DRAWINGS">FIG. 17</figref>, shown is a first step that may be performed in connection with failback processing in an embodiment in accordance with techniques herein. The example <b>2700</b> may represent a snapshot of the system and network prior to performing failback processing when SP B is commencing reboot. The example <b>2700</b> includes a host <b>2710</b> and two SP's&#x2014;SP A <b>2712</b> and SP B <b>2714</b>. Elements <b>2712</b>, <b>2714</b> are SPs of a data storage system and other components have been omitted for simplicity of illustration of such techniques. The example <b>2700</b> also includes paths <b>2716</b>, <b>2718</b>, whereby <b>2716</b> collectively represents a set of one or more physical paths between the host <b>2710</b> and SPA <b>2712</b> (e.g., paths to target ports of SP A <b>2712</b>). Elements <b>2718</b> collectively represents a set of one or more virtual paths to virtual ports for SP B which are hosted/virtualized by physical counterpart paths and ports of SP A <b>2712</b>. The dashed line for <b>2718</b> represents the aspect of the paths directed to SP A <b>2712</b> on behalf of SP B being virtual paths in contrast to the solid line <b>2716</b> for physical paths to SP A <b>2712</b>. It should also be noted that intervening network or connection fabric components, such as a switch, between the host and data storage system SPs is also omitted for simplicity but are included in an actual embodiment consistent with other details herein. Element <b>2716</b><i>a </i>may represent the data flow in connection with I/O to and from device <b>2708</b> for servicing requests received on physical paths <b>2716</b> to SP A. Element <b>2718</b><i>a </i>may represent the data flow in connection with I/O to and from device <b>2708</b> for servicing requests received on virtual paths <b>2718</b> for SP B.</p>
<p id="p-0098" num="0097">As illustrated by S<b>1</b>, SP B commences reboot and sends a message to SP A to begin processing for quiescing I/Os for performing the failback from SP A to SP B. Subsequent figures and description will illustrate additional steps in connection with this quiescing to coordinate the switchover and redirection of I/Os and requests from SP A back to SP B.</p>
<p id="p-0099" num="0098">Referring to <figref idref="DRAWINGS">FIG. 18</figref>, shown is an example illustrating a second step of the processing whereby SP A logs out of the switch all login sessions associated with ports being virtualized by SP A for SP B. This is to ensure that subsequent logins to the switch by SP B (e.g., FLOGI commands) will succeed in a subsequent step. As described elsewhere herein, not all switches may handle having both virtual and physical port logins/definitions simultaneously for the same port. To this end, techniques herein may include steps to omit such overlap and simultaneous associations of the same target port WWN with both a virtual port ID and physical port ID by having SP A perform processing to logout such sessions and unregister the virtual port association for target ports of SP B currently being virtualized on physical ports of SP A.</p>
<p id="p-0100" num="0099">Referring to <figref idref="DRAWINGS">FIG. 19</figref>, shown is an example illustrating a third step of the processing whereby SP B performs logins (e.g. FLOGI commands) to the switch for all its physical ports. Note that B may have to retry this a number of times until SP A has completed logout for all SP B's virtualized ports. Once SP B has successfully completed login for its physical ports and the switch has accordingly updated its database tables, any subsequent I/Os directed to SP B's ports are now sent over <b>2719</b> on physical paths to SP B's physical ports rather than to ports of SP A which were acting as virtualized SP B ports. For such I/Os, SP B queues the newly received I/Os (as illustrated by <b>2751</b>) and does not yet process them until signaled by SP A (in a subsequent step yet to be described) that all pending or inflight I/Os (e.g., outstanding I/Os) on SP A for virtualized SP B ports have been drained (e.g., are no longer pending due to being actively aborted or otherwise completed). To this end, <b>2718</b><i>a </i>at this point may represent such pending I/Os for virtual ports of SP B in connection with I/O requests previously received in virtual paths <b>2718</b> prior to performing the above-mentioned second step (e.g., <figref idref="DRAWINGS">FIG. 18</figref>).</p>
<p id="p-0101" num="0100">As a fourth step, processing now waits for the pending or inflight I/Os currently handled by SP A for SP B's virtualized port(s) to complete. Such inflight I/O s being handled by A on behalf of B may be dropped and/or actively canceled or aborted.</p>
<p id="p-0102" num="0101">Once all virtualized inflight I/Os being handled on SP A for SP B have been canceled or otherwise completed, in a fifth step as illustrated by <figref idref="DRAWINGS">FIG. 20</figref>, SP A sends a message S<b>5</b> to SP B (e.g., using inter-SP communication channel) signaling that there are no remaining inflight/pending I/Os for the SP B's virtualized ports (e.g., all such I/Os represented by <b>2718</b><i>a </i>have been drained).</p>
<p id="p-0103" num="0102">As a sixth step with reference to <figref idref="DRAWINGS">FIG. 21</figref>, SP B may now commence processing pending queued I/Os from <b>2751</b> and any subsequently received I/Os over physical paths <b>2719</b> to ports of SP B.</p>
<p id="p-0104" num="0103">It should be noted that with canceled or aborted write I/Os, there is no guarantee about state of write data and whether the write has completed or not. For this reason to avoid any write race conditions leading to undesirable and unexpected results, the above-mentioned quiescing queues I/Os in <b>2751</b> until all such pending I/Os for virtual paths of SP B have been drained from SP A.</p>
<p id="p-0105" num="0104">Referring to <figref idref="DRAWINGS">FIG. 22</figref>, shown is a flowchart summarizing processing steps described above to quiesce I/Os in connection with failback processing from SP B to SP A. At step <b>2802</b>, SP B commences rebooting and sends a message to SP A to begin I/O quiescing in connection with failback processing. At step <b>2804</b>, SP A performs processing to log out of the switch all virtualized SP B ports. At step <b>2806</b>, SP B performs processing to log into the switch all its physical ports. After such login has been completed by SP B, all I/Os are now directed to SP B's physical ports rather than its virtual ports (as previously virtualized by physical ports of SP A). At step <b>2808</b>, all I/O received on physical ports/paths of SP B are queued to wait for outstanding I/Os previously sent on virtual paths of SP B (virtualized on SP A) to drain. In step <b>2810</b>, once such outstanding I/Os for virtual paths of SP B have completed, SP A signals SP B regarding the completion. At step <b>2812</b>, SP B processes the pending I/Os queued in step <b>2808</b> and also any subsequently received I/Os.</p>
<p id="p-0106" num="0105">The above-mentioned processing for quiescing and redirecting I/Os may be performed in connection with failback processing as described above returning or failing back to original physical ports of the rebooting SP B (which has previously failed over to SP A whereby SP A is virtualizing ports of SP B). In a similar manner, the above-mentioned quiescing and redirecting I/Os may be performed with differences as noted below for failover processing whereby SP A is taking over I/O and command processing of SP B's ports by virtualizing SP B's ports on SP A. Consider, for example, a case of failover processing whereby SP B is failing over to SP A in connection with an upgrade to SP B or other planned outage for SP B. In response to this planned upgrade to SP B, failover processing may be performed to switchover and redirect I/Os from SP B to virtual paths/ports virtualized on physical paths/ports of SP A. The following summarizes processing that may be performed for quiescing I/Os in connection with failover processing.</p>
<p id="p-0107" num="0106">With reference now to <figref idref="DRAWINGS">FIG. 23</figref>, it should be noted that for planned outages such as SP B upgrades, SP B may signal in step <b>2902</b> SP A via interprocess communication to commence quiescing because SP B is shutting down. If unplanned outages of SP B as upon SP B failure, SP A may alternatively detect SP B's failure in step <b>2902</b> as described elsewhere herein and then commence quiescing. Thus a first step <b>2902</b> in the process may be either SP B sending a message to SP A that SP B is shutting down for planned SP B outages, or may be SP A detecting an unplanned failure of SP B.</p>
<p id="p-0108" num="0107">As a second step in <b>2904</b> for planned outages (where SP B has signaled SP A in step <b>2902</b>), SP B logs out of switch all login sessions for its physical ports (so that FDISC command from SP A for virtual port logins/registrations in a subsequent step will complete). It should be noted that step <b>2904</b> may characterized as an implicit logout of SP B's physical ports from the switch in the event that SP B has failed (e.g., existing sessions to SP B are automatically logged out/terminated as result of SP B failure). As a third step <b>2906</b>, SP A logs into/registers with the switch so that its physical ports virtualized ports of SP B (e.g., using FDISC command, register a physical port of SP A as a counterpart virtual port of SP B thereby effectively virtually relocating ports of SP B to SP A). Once SP A has successfully completed virtual port login/registration for SP B's ports and the switch has accordingly updated its database tables, any subsequent I/Os directed to SP B's ports are now sent to SP B's virtualized ports on SP A. For such I/Os in a fourth step <b>2908</b>, SP A queues the I/Os and does not yet process them until signaled by SP B that all such pending or inflight I/Os previously received on physical paths/ports of SP B have now been completed or drained. As a fifth step <b>2910</b>, once all inflight I/Os on SP B have been drained, SP B sends a message to SP A (e.g., using inter-SP communication channel) regarding the state of no remaining inflight I/Os for SP B's physical ports. As a sixth step <b>2912</b>, SP A commences processing the pending queued I/Os from step <b>4</b> and any subsequently received I/Os.</p>
<p id="p-0109" num="0108">What will now be described are techniques that may be performed in connection with virtualization of an SP for port failover. Described above are techniques for port failover processing whereby functioning data storage system ports virtualize and &#x201c;take over&#x201d; other failed data storage system ports. While this virtualizes the hosts' connectivity to a surviving port, this alone is not sufficient for port failover to be sufficiently transparent to the host. In accordance with technique herein, the failed SP that the failed port belongs to is also &#x201c;virtualized&#x201d; on the peer SP as well. In other words, the virtualized ports require a virtual SP that represents the failed SP. Such SP virtualization represents the original failed SP as the surviving SP to the host in order to avoid the host recognizing an SP/port failure and avoid having the host perform any failover processing. Rather, in accordance with techniques herein, such failover processing may be performed and managed data storage system-side rather than host-side. Such virtualization techniques provide for SCSI semantics that do report that a failed SP is down and hence I/Os will appear to be serviced by the failed (virtualized) SP, whereas in reality it is being serviced by the surviving SP. During an SP outage, the host is not be made aware of the SP failure and the host will thereby not take any corrective actions, such as moving LUN ownership to the surviving SP.</p>
<p id="p-0110" num="0109">As a starting point for such virtualization, port failover processing has completed. Without using techniques herein, when an SP, such as SP B fails, the host recognizes the failure and then performs processing to use alternative surviving paths. With techniques herein, when SP B fails, we do not want the host to recognize or be aware of any failed SP B or ports of SP B and also do not want the host to take any action responsive to such failures. In this manner it is desirable for the host to be unaware of any such failures and for the host to believe that it is continuing to communicate with SP B and ports of SP B even though the SP B and its ports are virtualized.</p>
<p id="p-0111" num="0110">Consistent with the above, the responses, behavior and the like sent by the data storage system in response to communications or requests from the host directed to SP B and its ports should be the same whether SP B and its ports are actually up and running physically, or whether SP B and its ports are virtualized by another second SP and other ports (e.g., where the second SP and other ports are receiving the requests directed to SP B and its ports and performing processing to service such requests on behalf of SP B and its ports). Thus, the second SP and its ports performing processing on behalf of SP B and its ports additionally returns responses as if such responses were sent from SP B and its ports. In this manner, the second SP and its ports virtualize SP B and its ports by emulating or reproducing responses and behavior of SP B and its ports. Thus, the host continues as if communicating with SP B even though it is not.</p>
<p id="p-0112" num="0111">Using techniques herein, the failover processing and responsibility is handled by the data storage system (rather than on the host) in a manner which may be characterized as transparent and non-disruptive to the host. SP virtualization is performed using information available to each SP (including port information of each SP, such as described elsewhere herein). In one aspect, SP virtualization includes how the SP responds to a SCSI command issued by the host to the SP on a virtualized path. For example, assume a SCSI command is issued to a virtualized port of a failed SP B. In response, the data storage system does not report that the SP B is down and rather reports that SP B (which actually is down/unavailable/failed) is alive/available and thereby the host is not alerted to the state of SP B and its ports being unavailable/failed through the SCSI command response.</p>
<p id="p-0113" num="0112">As part of port failover virtualization in accordance with techniques herein as described above, when an SP is down, the host may issue an I/O to the port A of the SP. Rather than reject the I/O when the SP is down, the I/O is redirected (through virtualization and port failover processing and described herein) to a virtualized port A at a second different physical port B of a peer SP. Similarly in response to command such as the SCSI inquiry command that may be issued by the host to a failed SP and its port A, the data storage system returns a response consistent with SP and its port A being operative thereby reproducing or emulating behavior and responses as if SP and its port A were actually performing the processing and consistent with SP and its port A having an operative, functional state. Thus, the information returned for such responses is consistent both before and after failover to a virtualized port. Further examples of such commands and responses are described below in more detail.</p>
<p id="p-0114" num="0113">Referring to <figref idref="DRAWINGS">FIG. 24</figref>, shown is an example illustrating port failover in an embodiment using techniques herein. The example <b>3000</b> includes a host <b>3002</b>, data storage system <b>3010</b> and storage for one or more LUNs <b>3012</b>. The system <b>3010</b> includes SPs <b>3006</b><i>a</i>, <b>3006</b><i>b</i>. SP A <b>3006</b><i>a </i>includes ports denoted as A<b>1</b> and A<b>0</b>. SP B <b>3006</b><i>b </i>includes ports B<b>0</b> and B<b>1</b>. Details regarding other components (e.g., such as a switch or other connection fabric) have been omitted for simplicity of illustration but are consistent with other figures and description herein.</p>
<p id="p-0115" num="0114">I/Os received on ports A<b>0</b> and A<b>1</b> directed to a LUN, such as LUN X, having storage provisioned on devices <b>3012</b> may be accessed. The example <b>3000</b> illustrates a point in time after which failover processing has been performed due to SP B <b>3006</b><i>b </i>being unavailable due to a failure or planned outage. Assume that the host <b>3002</b> recognizes four paths to LUN X from the host to each of ports A<b>0</b>, A<b>1</b>, B<b>1</b> and B<b>2</b>. After port failover processing has completed as described elsewhere herein, I/Os directed to ports B<b>0</b> and B<b>1</b> of SP B are redirected via virtual paths (denoted by dashed lines), respectively, through ports A<b>0</b> and A<b>1</b> of SP A. Port B<b>0</b> is virtualized using physical port A<b>0</b> and port B<b>1</b> is virtualized using physical port A<b>1</b>. Thus, I/Os and other commands directed to LUN X at target ports A<b>0</b> and B<b>0</b> are received at physical port A<b>0</b>, and I/Os and other commands directed to LUN X and target ports A<b>1</b> and B<b>1</b> are received at physical port A<b>1</b>. Element <b>3012</b><i>a </i>denotes the path to physical port A<b>0</b>. Element <b>3012</b><i>b </i>denotes the virtualized path to virtual port B<b>0</b>virt (virtualized by physical port A<b>0</b>). In this case, elements <b>3012</b><i>a </i>and <b>3012</b><i>b </i>may represent two logical paths to physical port A<b>0</b> which are actually over a same physical connection to port A<b>0</b>. In a similar manner, element <b>3012</b><i>c </i>denotes the path to physical port A<b>1</b>. Element <b>3012</b><i>d </i>denotes the virtualized path to virtual port B<b>1</b>virt (virtualized by physical port A<b>1</b>). In this case, elements <b>3012</b><i>c </i>and <b>3012</b><i>d </i>may represent two logical paths to physical port A<b>1</b> which are actually over a same physical connection to port A<b>1</b>.</p>
<p id="p-0116" num="0115">What will now be described are various SCSI commands reporting certain information, such as related to SPs, ports, and LUN ownership, which are affected when reporting virtualized values as a result of receiving a command directed to a virtual port whereby that virtual port is virtualized by a peer SP and its physical port. The virtual port may be associated with an SP that may also be characterized as virtualized by the peer SP. In following paragraphs and figures, it should be noted that the information illustrated as included in the response and/or commands may not be complete and is merely illustrative of portions of information that may be virtualized in connection with techniques herein. Furthermore, the commands provided here are not exhaustive and not meant to delineate a complete set of commands for which information may be virtualized. Rather, exemplary commands described herein are illustrative of the manner and type of information that may be virtualized when responding to commands received at virtualized ports on virtualized paths.</p>
<p id="p-0117" num="0116">It should be noted that the data storage system may track login sessions regarding hosts, such as host <b>3002</b>, logged into the switch and the particular paths (e.g., initiator and target port) used by the host. The login session information tracked by the data storage system may also denote a target port identifier and whether the target port identifier is associated with a virtualized port or a physical port. Additionally, login session information for a host may be associated with a session identifier. The session identifier may be included in commands from the host as forwarded by the switch to the data storage system. Thus, the data storage system receiving a command may use the session identifier to identify a set of login information including the target port to which the command is directed (whereby the target port may be a physical port identifier or a virtual port identifier as also noted by the login session information).</p>
<p id="p-0118" num="0117">The standard SCSI inquiry command may be issued by the host to obtain basic information about a target device, such as a LUN of the data storage system. The command may be directed to a particular LUN and sent by the host over a virtualized path whereby the target data storage system port is being virtualized. For example, the inquiry command may be directed to port B<b>0</b> and is thus received by the data storage system on virtual path B<b>0</b>virt <b>3012</b><i>b</i>. The command, when received on the virtualized port <b>3012</b><i>b</i>, reports virtualized information from the perspective of the original physical port B<b>0</b> and its SP B so that the data is consistent or the same as if the command were received on the actual original physical port B<b>0</b>.</p>
<p id="p-0119" num="0118">Referring to <figref idref="DRAWINGS">FIG. 25</figref>, shown is an example illustrating information returned in a SCSI standard inquiry response to the host that may be virtualized in accordance with techniques herein. The inquiry response <b>3110</b> may include a port number or ID <b>3112</b> of the receiving/target port of the data storage system, an SP ID <b>3114</b> (identifying the SP including the target port denoted by <b>3112</b>), an SP signature or serial number <b>3116</b> (which is unique to each SP and is the signature of the SP identified in <b>3114</b>), LUN ownership <b>3118</b> (a boolean value denoting whether the SP identified by <b>3114</b> is the owner of the LUN to which the inquiry command is directed), and LUN operations state <b>3120</b>. Field <b>3120</b> may be used to report abnormal or transient states affecting I/O to this LUN. In one embodiment, values for <b>3120</b> may include 1 denoting that I/O operations are currently rejected because the SP is in the process of shutting down, such as in connection with a planned SP upgrade. Otherwise, <b>3120</b> may be 0 denoting normal operations. A virtualized value of 0 will be reported when accessed through a virtual port. When an SP is in the process of shutting down, 1 will not be reported if a first port (which received the command) of the SP shutting down can be failed over to another port (e.g., the first port is protected by another port). If the first port cannot be failed over to another port (e.g. the first port is not protected), then a value of 1 is returned during SP shutdown so that the initiator can initiate a failover (e.g. host-side failover processing).</p>
<p id="p-0120" num="0119">For this example where the inquiry command is directed to LUN X over path B<b>0</b>virt <b>3012</b><i>b</i>, a response may be returned to the host identifying the port number or ID for B<b>0</b> in field <b>3112</b>, identifying SP B in field <b>3114</b>, including SP B's signature or serial number in <b>3116</b>, and denoting in <b>3118</b> whether SP B is the owner of LUN X. A virtualized value of 0 will be reported in field <b>3120</b> denoting normal processing state.</p>
<p id="p-0121" num="0120">In a data storage system such as <b>3010</b> having multiple SPs, the SPs may have a concept of ownership with respect to a particular LUN in the data storage system. An SP that is deemed an owner of a LUN is the single SP that can perform an operation or I/O against that LUN. There may also be other operations, such as administrative operations, that can only be performed on the owning SP. In the event the owning SP is unavailable, the other peer SP may take over servicing the LUN's I/Os.</p>
<p id="p-0122" num="0121">The virtualized values returned in response to the inquiry command as described above provide the host with information as if returned by the physical port B<b>0</b> and its SP B.</p>
<p id="p-0123" num="0122">Additionally, the SCSI inquiry command may return specific information that varies depending on the particular page code included in the command descriptor block. The page code may be characterized as identifying a particular class regarding the information and/or the entity about which the information is returned. For example, a SCSI inquiry vital product data page command may be issued with a page code of &#x201c;C<b>0</b>&#x201d; (unit path report page) which returns the standard inquiry information described above and information regarding the IP (internet protocol) address of the SP identified by <b>3114</b>. In a virtual path, a virtualized IP address is reported for SP B in this example. As another variation of the SCSI inquiry command, the command may be an inquiry vital product data page 0x83 (device identification page) providing additional information regarding the target port number or id and the target port group (TPG). When received on a virtual port, the target port number or id and the TPG are with respect to the virtual port B<b>0</b> in this example (e.g., so that the response includes the target port number or id of B<b>0</b> and the TPG id including B<b>0</b>).</p>
<p id="p-0124" num="0123">In connection with SCSI commands as known in the art, a Check Condition occurs when a SCSI device needs to report an error. SCSI communication takes place between an initiator, such as a host port of an HBA (host bus adapter), and a target such as a target port of an SP included in a data storage system. The initiator may send a command to the target which then returns a response to the initiator. SCSI commands are sent in a Command Descriptor Block (CDB). At the end of the command, such as an I/O command, the target returns a status code byte encoded with different values corresponding to different status conditions. For example, a status code byte of &#x201c;00&#x201d;h (in hexadecimal) may denote success, &#x201c;02&#x201d;h may denote a Check Condition or error, and &#x201c;08&#x201d;h may denote a busy status. When the target returns a Check Condition or error status in response to a command, the initiator may take further action due to the denoted error state associated with the check condition.</p>
<p id="p-0125" num="0124">An SP receiving the command may be in a state of shutting down such as, for example, in connection with a planned outage of an SP as when the SP is shutting down for an upgrade. Without use of virtualization techniques herein, the SP receiving the command may return a check condition error status denoting the &#x201c;shutting down&#x201d; state of the SP. However, in connection with virtualization of ports and SPs using techniques herein, such a check condition status is not returned. Rather, a success or normal status regarding the SP is returned in response to receiving a command such as an I/O directed to a port of the SP.</p>
<p id="p-0126" num="0125">With reference to <figref idref="DRAWINGS">FIG. 26</figref>, shown is an example <b>3150</b> of information that may be included in a response <b>3151</b> to the vendor unique SCSI command get port list. This command may return general information about available ports including a port number or ID <b>3152</b>, SP ID <b>3154</b>, Port WWN <b>3156</b>, and port properties <b>3158</b>. Port properties may include, for example some or all of the port information such as described in <b>2065</b> of <figref idref="DRAWINGS">FIG. 12</figref> (e.g., bits <b>2066</b>). Virtualized values are returned when the command is received on a virtual path/virtual port. For example, if the command is received on virtual path <b>3012</b> for virtual port B<b>0</b>, the response may include virtualized values for the virtual port B<b>0</b> and its virtualized SP B. In this case, the response may include information with respect to port B<b>0</b> and SP B (e.g., B<b>0</b>'s port number or ID in <b>3152</b>, SP B identified in <b>3154</b>, B<b>0</b>'s WWN in <b>3156</b>, port properties for B<b>0</b> in <b>3158</b>).</p>
<p id="p-0127" num="0126">The SCSI mode sense commands may be used to obtain information that varies depending on the particular page code included in the command descriptor block. The page code may be characterized as identifying a particular class regarding the information and/or the entity about which the information is returned.</p>
<p id="p-0128" num="0127">A mode sense command with a page code of 25h denotes a vendor-unique page that provides SP configuration information regarding an SP and its peer SP. This command can be issued to any port and any LUN on the data storage system. Returned is information regarding the SP (of the receiving target port to which the command is directed) and its peer SP. When not reporting virtualized values using techniques herein, values returned for the target physical port and its target SP (receiving the command) may be denoted as THIS SP and values returned for its peer SP may be denoted as PEER SP. Thus, THIS SP may denote the target SP's information to which the I/O is directed.</p>
<p id="p-0129" num="0128">In connection with techniques herein, virtualized values are returned when the mode sense command with a page code of 25h is received on a virtual path/port. For example, the command may be directed to a LUN over a virtual path with virtualized target port B<b>0</b> of SP B (wherein the physical port B<b>0</b> and SP B may be currently down/unavailable). Target port B<b>0</b> may be virtualized by physical port A<b>0</b> of SP A. Virtualized values for THIS SP may denote information regarding SP B and may include, for example, SP B's signature and its SP ID. Virtualized values for PEER SP in this case are with respect to SP A (e.g., denoting SP A and SP A's signature).</p>
<p id="p-0130" num="0129">With reference to <figref idref="DRAWINGS">FIG. 27</figref>, shown is an example <b>3200</b> illustrating information that may be included in a response to the SCSI mode sense page 25h command in accordance with reporting virtualized values with techniques herein. When reporting virtualized values in this example responsive to receiving the command on virtual path B<b>0</b>virt <b>3012</b><i>b</i>, THIS SP <b>3210</b> denotes SP B in <b>3212</b> as the target SP, THIS SP's signature <b>3214</b> as SP B's signature, and denotes the PEER SP <b>3220</b> as SP A in field <b>3222</b> and the PEER SP's signature <b>3224</b> as SP A's signature. In this manner, information about SP B is reported as if SP B is the receiving target SP having a peer SP A even though the actual receiving physical port is associated with SP A.</p>
<p id="p-0131" num="0130">There are other variations of the mode sense command with different page codes that may also report virtualized information. For example, a mode sense command with a page code of 26h (mode sense SP report) denotes a vendor-unique page that provides information about the SP of the target port including the SP ID. In a manner similar to that as described above, the command may be received on a virtual port B<b>0</b>/virtual path B<b>0</b>virt <b>3012</b><i>b</i>. The response to the command may include a virtualized SP ID denoting SP B when accessed from the virtual path <b>3012</b><i>b. </i></p>
<p id="p-0132" num="0131">As yet another example of a mode sense command, a page code of 0x2B denotes a page that provides the host with specified parameters of a specified LUN (e.g., the specified LUN may be identified in the mode sense command to which the data storage system reports a virtualized response). In particular, the response returned for the command reports on the current ownership of the LUN. The command may be issued identifying a particular LUN, such as LUN X, and may be received over a particular path/port such as path <b>3012</b><i>b </i>for virtual port B<b>0</b>. The response to the command may include virtualized LUN ownership information so that the same LUN ownership information is reported before and after port failover (e.g., the same LUN ownership information is reported whether the command is issued over a virtual path or not). The response may include a boolean value of 1 or true if the command identifies a LUN and the command is sent over a path/port of an SP that owns the LUN, otherwise the value is 0. In this example, SP A may be the SP that owns LUN X and the command may be received on a virtualized path/port for SP B (e.g., virtualized path <b>3012</b><i>b </i>or <b>3012</b><i>d</i>) and return a virtualized value of 0 since the virtual SP B does not own LUN X (thereby mirroring the response information for LUN ownership when the command is received on a non-virtualized path to the physical port B<b>0</b> or B<b>1</b> of SP B).</p>
<p id="p-0133" num="0132">Another SCSI command is the report TPG command that may be issued by the host with respect to a particular LUN over a path such as described above by issuing the command to LUN X over the virtual path <b>3012</b><i>b </i>to virtual port B<b>0</b>. The response to the report TPG may return two TPG descriptors, one for each of the SPs A and B with respect to the state of LUN X (to which the command is directed via the command parameters) on that SP. In this example, a single TPG may be defined for all ports of each SP although an embodiment may allow more TPGs to be defined per SP.</p>
<p id="p-0134" num="0133">In this example, also assume that SP A owns LUN X. If LUN is owned by a particular SP, the path to the LUN is considered optimized when issued to a port of the owning SP. It should be noted that the path may be considered optimized because the SP that owns the LUN may issue I/Os to the LUN. Thus, paths to target ports of the non-owning SP may be considered non-optimized. If an I/O is received over a non-optimized path by a non-owning SP, the I/O may be redirected or forwarded to the owning SP for processing. Thus, a path is considered optimized because processing will be faster as compared to I/O requests received over the non-optimized path due to the above-mentioned redirecting or request forwarding from the non-owning SP to the owning SP. In this example, since the command is directed to virtual port B<b>0</b>, the virtualized response data includes information as if the response was formulated and sent from SP B and physical port B<b>0</b>. Thus, LUN ownership determinations with respect to this report TPG and other commands may be with respect to the virtualized LUN owner which is SP A in this example.</p>
<p id="p-0135" num="0134">With reference to <figref idref="DRAWINGS">FIG. 28</figref>, shown is an example illustrating information that may be included in a response to the report TPG SCSI command. The example <b>3300</b> includes two TPG descriptors&#x2014;TPG descriptor <b>3310</b> for SPA and TPG descriptor <b>3320</b> for SP B.</p>
<p id="p-0136" num="0135">SP A TPG descriptor <b>3310</b> includes an Asymmetric access state <b>3312</b> (e.g., indicates one of Optimized, Non-Optimized, or Unavailable), and a list of port numbers or ID <b>3316</b> (e.g., port numbers or IDs for the TPG of SP A). Field <b>3312</b> denotes whether paths to LUN X through target ports of SP A are optimized or not. In this example, <b>3312</b> denotes that paths to ports of SP A are optimized since SP A owns the LUN (e.g. thereby indicating SP A is available and also provides an optimized path to the specified LUN of the received TPG SCSI command). Element <b>3316</b> may include a list of port numbers or IDs of ports in SP A's TPG (e.g., port numbers or IDs for ports A<b>0</b> and A<b>1</b>). It should be noted that implicit with indicating a status of optimized or non-optimized for <b>3312</b> is an indication that the SP A being characterized is also available, otherwise <b>3312</b> would have a value denoting unavailable).</p>
<p id="p-0137" num="0136">As described below, values included in SP B TPG descriptor <b>3320</b> may be virtualized. SP B TPG descriptor <b>3320</b> includes an Asymmetric access state <b>3322</b> (e.g., indicates one of Optimized, Non-Optimized, or Unavailable), and a list of port numbers or ID <b>3326</b> (e.g., port numbers or IDs for the TPG of SP B). Field <b>3322</b> denotes whether paths to LUN X through target ports of SP B are optimized or not. In this example, <b>3322</b> denotes that paths to ports of SP B are non-optimized since SP A rather than SP B owns the LUN X (e.g. thereby indicating SP B is available and also provides a non-optimized path to the specified LUN of the received TPG SCSI command). In this example, the <b>3322</b> has a value of Non-Optimized even though SP B and its physical ports are actually not available. If a value of unavailable is denoted by <b>3222</b>, the host may perform its own path failover processing. As described herein, the port failover processing from SP B to SP A due to SP B's failure or unavailability is transparent to the host and the failover processing using techniques herein are embodied in data storage system processing rather than host-side. Element <b>3326</b> may include a list of port numbers or IDs of ports in SP B's TPG (e.g., port numbers or IDs for ports B<b>0</b> and B<b>1</b>). As with the field <b>3312</b>, it should be noted that implicit with indicating a status of optimized or non-optimized for <b>3322</b> is an indication that the SP B being characterized is also available, otherwise <b>3322</b> would have a value denoting unavailable).</p>
<p id="p-0138" num="0137">With reference to <figref idref="DRAWINGS">FIG. 12</figref> and <figref idref="DRAWINGS">FIG. 28</figref>, it should be noted that the state denoted by <b>3312</b> and <b>3322</b> of the example <b>2300</b> may be determined using values of the protected bits <b>2066</b><i>c</i>. With respect to SP B and <b>3322</b>, if port information for all ports of SP B indicates that all such ports are protected (e.g., protected bits <b>2066</b><i>c=</i>1 or yes), then the status <b>3322</b> is reported as Non-Optimized (e.g. thereby indicating SP B is available and also provides a non-optimized path to the specified LUN of the received TPG SCSI command). Otherwise, the state may be reported as unavailable if all ports (e.g., ports B<b>0</b> and B<b>1</b> of SP B) are not protected and the SP B is down or otherwise shutting down. In one embodiment, it may be the case that the state <b>3322</b> denotes a state for the entire TPG in that either all ports of the SP and its TPG run as virtual ports, or not. However, as described elsewhere herein, an embodiment may alternatively provide and support availability status on a per port basis (e.g., where the collective state for the TPG may include an individual Optimized/Non-Optimized/Unavailable state per port).</p>
<p id="p-0139" num="0138">It should be noted that a LUN may be accessible over a set of paths through multiple target ports whereby a first portion of the set of paths and target ports may not be failover capable or such failover capabilities may otherwise be disabled (e.g., port information supported bit <b>2066</b><i>a=</i>0, or enabled bit <b>2066</b><i>b=</i>0) and the remaining paths and associated target ports may be failover capable and enabled. The first set of paths to the LUN may be characterized as &#x201c;mixed&#x201d; or impure with respect to that particular and the techniques herein may not be used in connection with virtualization. In other words, the techniques herein may be used when all paths to the LUN are failover capable and also enabled, and otherwise, the techniques herein may consider all paths to the LUN as not having the failover capability or otherwise having failover disabled.</p>
<p id="p-0140" num="0139">As described above, the particular commands described herein are not exhaustive but provide some examples of how an embodiment may perform techniques herein for SP virtualization in connection with port failover. From hosts' perspective, the failover and failback will appear like link events, where ports logs out then log right back in. As a result in an embodiment in accordance with techniques herein, pending host requests may be aborted, NACA conditions may be reset, Unit Attentions may be cleared, and SCSI-2 reservations may also be cleared.</p>
<p id="p-0141" num="0140">As known in the art, some devices support setting the NACA (Normal Auto Contingent Allegiance) bit to a value of one (NACA=1) in the control byte of the SCSI command. ACA is an LU-level condition that is triggered when a command (with the NACA bit set to 1) completes with CHECK CONDITION. When ACA is triggered, it prevents all commands other than those with the ACA attribute from executing until the ACA condition is cleared (e.g., such as by performing a special CLEAR ACA task management function). In connection with techniques, herein, the NACA condition may be cleared during initiator logout and additional processing/segmantics is needed in connection with virtualization techniques herein. During failover, an intiator logout causes NACA conditions to be cleared. When the initiator fails over to the surviving SP's port (as a virtual port), a unit attention may be presented to the host in response to the first I/O thereby indicating that a previous NACA condition is cleared.</p>
<p id="p-0142" num="0141">In connection with SCSI reservations, failover appears as FC link events to the affected hosts. During failover, the initiator logsout first and then will login to the surviving SP's port. No special processing is needed to handle SCSI reservation during failover. The SCSI reservation semantics prior to failover in normal processing when the initiator logs out and/or into the switch is also applicable during failover.</p>
<p id="p-0143" num="0142">SCSI-2 Reservations may be characterized as a mechanism for an initiator to reserve a logical unit via a specific path or port. On the data storage system, such SCSI-2 reservations may not be preserved across port logouts. Since failover events appear to the hosts a FC link events, SCSI-2 reservations for the failover ports does not need to be conveyed to the surviving SP. When an initiator logs in to the peer SP during failover, the first IO may receive a Jun. 29, 2000 unit attention thereby providing the host/initiator with an indication that the reservation is lost. Thus, existing SCSI-2 reservation behavior may not be affected due to port failovers.</p>
<p id="p-0144" num="0143">In an embodiment supporting SCSI persistent reservations, such persistent reservations may be characterized as a mechanism to reserve a logical unit for use by multiple initiators. These reservations are valid for all ports on an array, and may be preserved across initiator failures, hard resets, target resets, and the like. On a data storage system in one embodiment, persistent reservations may be shared across both the SP's. Hence after failover, the failed over initiators experience the same behavior as prior to failover consistent with virtualization techniques herein.</p>
<p id="p-0145" num="0144">A group reservation command may be a vendor-unique variant of presistent reservation, and provide another mechanism for hosts to reserve LUNs for use by multiple initiators. Like Persistent reservation, Group reservations are valid on all ports on a data storage system. A group reservation may be cleared on a LUN reset or SCSI bus reset. An initiator logout may result in canceling the group reservation. If a logging out initiator is the last member of the group, then the group reservation is also cleared. A failover occurrence may be handled as if the initiator logged out and then logged back in. During logout, registration may be lost and when the initiator logs in to the surviving SP's port, the initiator needs to then re-register. The first I/O after login may receive Jun. 29, 2000 unit attention thereby providing an indication to the initiator that the registration is lost/cancelled.</p>
<p id="p-0146" num="0145">Referring to <figref idref="DRAWINGS">FIG. 29</figref>, shown is a flowchart of processing steps that may be performed in an embodiment in accordance with techniques herein. The steps of flowchart <b>3400</b> summarize processing described above. At step <b>3402</b>, the data storage system receives requests from the host and returns responses. In step <b>3402</b>, the data storage system may be characterized as running in a normal operating or processing state with respect to processing received requests in that requests are routed to physical non-virtualized target ports of the data storage system. Formulation of responses to such requests do not require generating any virtualized values. No data storage system failover processing is in effect. At step <b>3404</b>, port matching processing is performed in an ongoing manner as needed in response to trigger event occurrences. Details regarding port matching processing are described, for example, in connection with <figref idref="DRAWINGS">FIGS. 11-16</figref>. At step <b>3406</b>, an event occurs causing port failover processing to be performed for one or more data storage system target ports whereby such one or more target ports are hosted as virtual ports of other protecting target ports. Details regarding step <b>3406</b> are described, for example, in connection with <figref idref="DRAWINGS">FIGS. 1-10</figref>. For example, one or more target ports or SPs of the data storage system may be unavailable due to a planned outage (e.g., upgrade) or unplanned outage (e.g., SP failure). At step <b>3408</b>, the host may send requests to the data storage system whereby at least some of the requests may be directed to virtual ports of the data storage system. The data storage system determines and returns responses to these requests and includes any necessary virtualized data. As described elsewhere herein, the virtualized data facilitates in mimicking or mirroring responses returned to the host (for requests received on virtualized paths/virtualized target ports) so the responses appear to the host as if the requests were processed by the physical ports and SPs currently being virtualized by the virtual ports. Any requests received over non-virtualized or physical paths/target ports are processed normally (e.g., without performing processing to include virtualized data in the responses to such requests). In this manner, the host receives the same response data for commands/requests whether the data storage system has failed over thereby using virtualized paths/ports, or whether the data storage system is currently running in normal mode/non-failover whereby all requests are routed to the data storage system over physical/non-virtualized paths and non-virtualized target ports. At step <b>3410</b>, the failing or unavailable target ports and associated SP(s) may perform processing to resume operation and the previously failed target port(s) and SP(s) may reboot. Step <b>3410</b> processing may include the rebooted SPs performing the port matching technique. At step <b>3412</b>, failback processing may be performed to redirect requests from virtual ports of the data storage system back to the corresponding previously failed physical ports. Failback processing may be commenced as part of the failed SP rebooting. As described elsewhere herein, failback processing may be generally characterized as processing performed to re-establishing the state of the switch and data storage system as prior to failback processing in order to route requests to the previously failed physical ports which are now operative. Failback processing may include performing steps to &#x201c;undo&#x201d; that which was caused by port failover processing of step <b>3406</b>. Additionally, it should be noted that rebooting the failed SP(s) may trigger failback processing performed by both the booting SP and its peer whereby the booting SP sends a message to its peer SP to perform failback processing as described elsewhere herein. As also described elsewhere herein, failback processing may further trigger link events causing the other SPs to also perform port matching processing. For example, failback processing includes logging out of the virtual target ports on the switch and logging into to the previously failed physical ports of the data storage system. At step <b>3414</b>, failback processing has completed and the data storage system may receive and process requests in accordance with its normal processing mode whereby requests are directed to physical/non-virtualized paths/target ports of the data storage system and do not require formulating virtualized data.</p>
<p id="p-0147" num="0146">As described herein, some embodiments operating in accordance with techniques herein may have all ports of a single SP either running non-virtualized/physical, or otherwise having all such SP ports running virtualized. Thus, such embodiments may not allow ports of a single SP or TPG to be split as to whether some are virtualized and some are also running physical (unvirtualized). However, other embodiments in accordance with techniques herein may vary the above-mentioned by allowing ports to be running virtualized or non-virtualized on a per-port basis. Thus, an embodiment may allow a finer granularity of atomicity and allow ports of a same SP to be both virtualized and running physical (e.g., a first physical port of SP A may be virtualized by a physical port of SP B and a second physical port of SP A may not be virtualized (e.g., I/Os are directed to the second physical port of SP A rather than a physical port of SP B virtualizing the second port of SP A).</p>
<p id="p-0148" num="0147">An embodiment may implement the techniques herein using code executed by a processor. For example, an embodiment may implement the techniques herein using code which is executed by a processor of the data storage system or more generally, any computer system or other component including a suitable processor. As will be appreciated by those skilled in the art, the code may be stored on the data storage system on a computer-readable storage medium having any one of a variety of different forms including volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions, data structures, program modules or other data. Computer-readable storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, DVD or other optical storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can be accessed by a processor.</p>
<p id="p-0149" num="0148">While the invention has been disclosed in connection with preferred embodiments shown and described in detail, modifications and improvements thereon will become readily apparent to those skilled in the art. Accordingly, the spirit and scope of the present invention should be limited only by the following claims.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A method for processing requests comprising:
<claim-text>receiving a request at a data storage system, wherein the request is a command to perform first processing and the request is sent from a client over a virtualized path, the virtualized path including a virtual target port of the data storage system, the virtual target port being a first physical target port that provides a virtualized counterpart port for a second physical target port whereby requests directed to the second physical target port are routed to the first physical target port rather than the second physical target port, wherein the first physical target port receives requests from the client directed to the first physical target port while also receiving requests directed to the second physical target port as a result of the first physical target port virtualizing the second physical target port;</claim-text>
<claim-text>performing said first processing and generating a response to the request, wherein the response includes first information consistent with sending the request over a non-virtualized path to the second physical target port; and</claim-text>
<claim-text>sending the response to the client.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the first processing includes:
<claim-text>determining a first data value that would be included in a generated response to the request if the request had alternatively been received by the second physical target port over a non-virtualized path, said response including the first data value, and wherein a generated response to the request includes a second data value different from the first data value when the request is received over a non-virtualized path including the first physical target port.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. A method for processing requests comprising:
<claim-text>receiving a request at a data storage system, wherein the request is a command to perform first processing and the request is sent from a client over a virtualized path, the virtualized path including a virtual target port of the data storage system, the virtual target port being a first physical target port that provides a virtualized counterpart port for a second physical target port whereby requests directed to the second physical target port are routed to the first physical target port rather than the second physical target port;</claim-text>
<claim-text>performing said first processing and generating a response to the request, wherein the response includes first information consistent with sending the request over a non-virtualized path to the second physical target port; and</claim-text>
<claim-text>sending the response to the client; and</claim-text>
</claim-text>
<claim-text>wherein the first processing includes:
<claim-text>determining a first data value that would be included in a generated response to the request if the request had alternatively been received by the second physical target port over a non-virtualized path, said response including the first data value, and wherein a generated response to the request includes a second data value different from the first data value when the request is received over a non-virtualized path including the first physical target port, and wherein a second request to perform the command is sent from the client over a non-virtualized path including the first physical target port, and wherein the method further includes:</claim-text>
<claim-text>sending, in response to the second request, a second response to the client, the second request including the second data value.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the second physical target port is inoperative.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method of <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein the first physical target port is associated with a first storage processor and the second physical target port is associated with a second storage processor, the second storage processor being inoperative, and wherein the first storage processor virtualizes the second storage processor.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method of <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein the first information is consistent with the request being serviced by the second storage processor rather than the first storage processor.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. A method for processing requests comprising:
<claim-text>receiving a request at a data storage system, wherein the request is a command to perform first processing and the request is sent from a client over a virtualized path, the virtualized path including a virtual target port of the data storage system, the virtual target port being a first physical target port that provides a virtualized counterpart port for a second physical target port whereby requests directed to the second physical target port are routed to the first physical target port rather than the second physical target port;</claim-text>
<claim-text>performing said first processing and generating a response to the request, wherein the response includes first information consistent with sending the request over a non-virtualized path to the second physical target port; and</claim-text>
<claim-text>sending the response to the client, and wherein the second physical target port is inoperative, the first physical target port is associated with a first storage processor and the second physical target port is associated with a second storage processor, the second storage processor being inoperative, and wherein the first storage processor virtualizes the second storage processor, and the first information is consistent with the request being serviced by the second storage processor rather than the first storage processor, and</claim-text>
<claim-text>wherein the first information includes first data characterizing the request as serviced by the second storage processor and includes second data characterizing the first storage processor as a peer processor of the second storage processor.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The method of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein the second data indicates that the second storage processor is operative.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the first information identifies the second physical target port, rather than the first physical port, as a port at which the request is received.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The method of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the first physical target port is associated with a first storage processor and the second physical target port is associated with a second storage processor, and wherein the first information identifies the second storage processor as a storage processor associated with the port at which the request is received.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. A method for processing requests comprising:
<claim-text>receiving a request at a data storage system, wherein the request is a command to perform first processing and the request is sent from a client over a virtualized path, the virtualized path including a virtual target port of the data storage system, the virtual target port being a first physical target port that provides a virtualized counterpart port for a second physical target port whereby requests directed to the second physical target port are routed to the first physical target port rather than the second physical target port;</claim-text>
<claim-text>performing said first processing and generating a response to the request, wherein the response includes first information consistent with sending the request over a non-virtualized path to the second physical target port; and</claim-text>
<claim-text>sending the response to the client; and wherein the command is an inquiry command that reports information about a target device and the first information of the response identifies the second physical target port as receiving the request and identifies a second storage processor associated with the second physical target port as servicing the request.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. A method for processing requests comprising:
<claim-text>receiving a request at a data storage system, wherein the request is a command to perform first processing and the request is sent from a client over a virtualized path, the virtualized path including a virtual target port of the data storage system; the virtual target port being a first physical target port that provides a virtualized counterpart port for a second physical target port whereby requests directed to the second physical target port are routed to the first physical target port rather than the second physical target port;</claim-text>
<claim-text>performing said first processing and generating a response to the request, wherein the response includes first information consistent with sending the request over a non-virtualized path to the second physical target port; and</claim-text>
<claim-text>sending the response to the client, wherein the first physical target port is associated with a first storage processor and the second physical target port is associated with a second storage processor that is inoperative, and wherein the command is any of a mode sense command reporting information about storage processor configuration of the data storage system and a second command reporting target port group information representing a state of a target device on each of the first storage processor and the second storage processor, wherein if the command is the mode sense command, the first information identifies the second storage processor as a target storage processor servicing the request and identifies the first storage processor as a peer storage processor of the second storage processor, and wherein if the command is the second command reporting target port group information, the first information includes a first target port group descriptor providing information regarding a first group of target ports of the first storage processor and denotes the first storage processor and first group of target ports as available, and the response also include second information comprising a second target port group descriptor providing information regarding a second group of target ports of the second storage processor and denotes the second storage processor and second group of target ports as available.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the virtualized path is generated as a result of performing port failover processing responsive to a planned unavailability or an unplanned unavailability of any of the second physical target port and a storage processor associated with the second physical target port.</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. A non-transitory computer readable storage medium comprising code stored thereon for processing requests, the non-transitory computer readable storage medium comprising code for:
<claim-text>receiving a request at a data storage system, wherein the request is a command to perform first processing and the request is sent from a client over a virtualized path, the virtualized path including a virtual target port of the data storage system, the virtual target port being a first physical target port that provides a virtualized counterpart port for a second physical target port whereby requests directed to the second physical target port are routed to the first physical target port rather than the second physical target port, wherein the first physical target port receives requests from the client directed to the first physical target port while also receiving requests directed to the second physical target port as a result of the first physical target port virtualizing the second physical target port;</claim-text>
<claim-text>performing said first processing and generating a response to the request, wherein the response includes first information consistent with sending the request over a non-virtualized path to the second physical target port; and</claim-text>
<claim-text>sending the response to the client.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The non-transitory computer readable storage medium of <claim-ref idref="CLM-00014">claim 14</claim-ref>, further comprising code for:
<claim-text>determining a first data value that would be included in a generated response to the request if the request had alternatively been received by the second physical target port over a non-virtualized path, said response including the first data value, and wherein a generated response to the request includes a second data value different from the first data value when the request is received over a non-virtualized path including the first physical target port.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. A non-transitory computer readable storage medium comprising code stored thereon for processing requests, the non-transitory computer readable storage medium comprising code for:
<claim-text>receiving a request at a data storage system, wherein the request is a command to perform first processing and the request is sent from a client over a virtualized path, the virtualized path including a virtual target port of the data storage system, the virtual target port being a first physical target port that provides a virtualized counterpart port for a second physical target port whereby requests directed to the second physical target port are routed to the first physical target port rather than the second physical target port;</claim-text>
<claim-text>performing said first processing and generating a response to the request, wherein the response includes first information consistent with sending the request over a non-virtualized path to the second physical target port; and</claim-text>
<claim-text>sending the response to the client; and wherein the non-transitory computer readable storage medium further comprises code for:</claim-text>
<claim-text>determining a first data value that would be included in a generated response to the request if the request had alternatively been received by the second physical target port over a non-virtualized path, said response including the first data value, and wherein a generated response to the request includes a second data value different from the first data value when the request is received over a non-virtualized path including the first physical target port; and</claim-text>
<claim-text>wherein a second request to perform the command is sent from the client over a non-virtualized path including the first physical target port, and wherein the non-transitory computer readable storage medium further includes code for:</claim-text>
<claim-text>sending, in response to the second request, a second response to the client, the second request including the second data value.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The non-transitory computer readable storage medium of <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein the second physical target port is inoperative.</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. A data storage system comprising:
<claim-text>a first storage processor associated with a first set of target ports;</claim-text>
<claim-text>a second storage processor associated with a second set of target ports;</claim-text>
<claim-text>a non-transitory computer readable storage medium comprising code stored thereon for:
<claim-text>receiving a request at the data storage system, wherein the request is a command to perform first processing and the request is sent from a client over a virtualized path, the virtualized path including a virtual target port of the data storage system, the virtual target port being a first physical target port of the first set that provides a virtualized counterpart port for a second physical target port of the second set whereby requests directed to the second physical target port are routed to the first physical target port rather than the second physical target port, wherein the first physical target port receives requests from the client directed to the first physical target port while also receiving requests directed to the second physical target port as a result of the first physical target port virtualizing the second physical target port;</claim-text>
<claim-text>performing said first processing and generating a response to the request, wherein the response includes first information consistent with sending the request over a non-virtualized path to the second physical target port; and</claim-text>
<claim-text>sending the response to the client.</claim-text>
</claim-text>
</claim-text>
</claim>
</claims>
</us-patent-grant>

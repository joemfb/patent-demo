<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08627112-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08627112</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>12749881</doc-number>
<date>20100330</date>
</document-id>
</application-reference>
<us-application-series-code>12</us-application-series-code>
<us-term-of-grant>
<us-term-extension>746</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>12</main-group>
<subgroup>14</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>713193</main-classification>
<further-classification>726  2</further-classification>
</classification-national>
<invention-title id="d2e53">Secure virtual machine memory</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>6892383</doc-number>
<kind>B1</kind>
<name>Arndt</name>
<date>20050500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>7260820</doc-number>
<kind>B1</kind>
<name>Waldspurger et al.</name>
<date>20070800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>718  1</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>2007/0106986</doc-number>
<kind>A1</kind>
<name>Worley, Jr.</name>
<date>20070500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>718  1</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>2009/0063806</doc-number>
<kind>A1</kind>
<name>Logan et al.</name>
<date>20090300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>2009/0282266</doc-number>
<kind>A1</kind>
<name>Fries et al.</name>
<date>20091100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>2009/0323941</doc-number>
<kind>A1</kind>
<name>Sahita et al.</name>
<date>20091200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>16</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>None</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>4</number-of-drawing-sheets>
<number-of-figures>4</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20110246767</doc-number>
<kind>A1</kind>
<date>20111006</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Chaturvedi</last-name>
<first-name>Pradeep Kumar</first-name>
<address>
<city>Bangalore</city>
<country>IN</country>
</address>
</addressbook>
<residence>
<country>IN</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Sudhakar</last-name>
<first-name>Gosukonda Naga Venkata Satya</first-name>
<address>
<city>Bangalore</city>
<country>IN</country>
</address>
</addressbook>
<residence>
<country>IN</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Chaturvedi</last-name>
<first-name>Pradeep Kumar</first-name>
<address>
<city>Bangalore</city>
<country>IN</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Sudhakar</last-name>
<first-name>Gosukonda Naga Venkata Satya</first-name>
<address>
<city>Bangalore</city>
<country>IN</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Schwegman Lundberg &#x26; Woessner, P.A.</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>Novell, Inc.</orgname>
<role>02</role>
<address>
<city>Provo</city>
<state>UT</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Zecher</last-name>
<first-name>Cordelia</first-name>
<department>2432</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">Apparatus, systems, and methods may operate to allocating encrypted memory locations to store encrypted information, the information to be encrypted and decrypted using a single hypervisor. Further activity may include permitting access to a designated number of the encrypted memory locations to a single application executed by an associated virtual machine (VM) subject to the hypervisor, and denying access to the designated number of the encrypted memory locations to any other application executed by the associated VM, or any other VM. In some embodiments, the operational state of the associated VM may be restored using the encrypted information. Additional apparatus, systems, and methods are disclosed.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="221.49mm" wi="170.69mm" file="US08627112-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="251.88mm" wi="170.43mm" file="US08627112-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="248.75mm" wi="172.04mm" file="US08627112-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="248.67mm" wi="190.33mm" file="US08627112-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="234.53mm" wi="189.06mm" file="US08627112-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">BACKGROUND</heading>
<p id="p-0002" num="0001">As the virtualization of information technology infrastructure increases, so does the amount of storage space that is used. This trend may accelerate with the implementation of various cloud-computing scenarios. Indeed, the ease of virtualization tends to lure administrators into creating any number of virtual machines (VMs) without careful consideration of the amount and type of disk space that might be needed. As a result, the security of access to memory that has been allocated to a particular VM may be compromised.</p>
<p id="p-0003" num="0002">For example, in a virtualized environment, VMs often manage sensitive information in main memory during the execution of software applications. Such information includes passwords, private keys, session keys, secrets, and certificates. In addition, hypervisors provide the ability to take snapshots of memory, and to clone or suspend the operation of the VM. As a result, VM memory is frequently stored on the hard disk as a file, which persists on the disk in a format that is understood by the hypervisor. Storing sensitive information on the disk in this manner may give rise to a variety of security threats. Some attempts have been made to solve this problem, but they are hardware-specific, and do not readily apply to the virtual processing environment.</p>
<heading id="h-0002" level="1">SUMMARY</heading>
<p id="p-0004" num="0003">In various embodiments, apparatus, systems, and methods that support secure access to VM memory are provided. For example, in some embodiments, access to memory is secured by allocating encrypted memory locations to store encrypted information, wherein the information is encrypted and decrypted using a single hypervisor. Access to a designated number of the encrypted memory locations can be permitted to a single application executed by an associated VM subject to the hypervisor. Access to the designated number of the encrypted memory locations can be denied to any other application executed by the associated VM, or any other VM.</p>
<p id="p-0005" num="0004">In some embodiments, access to the associated VM memory is secured by restoring the operational state of an associated VM using encrypted information stored in encrypted memory locations, the information again being encrypted and decrypted using a single hypervisor. Further activity includes providing access (and denying access) as described previously. Additional embodiments are described, and along with the foregoing examples, will be set forth in detail below.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0006" num="0005"><figref idref="DRAWINGS">FIG. 1</figref> is a flow diagram illustrating methods of securing access to virtual machine memory according to various embodiments of the invention.</p>
<p id="p-0007" num="0006"><figref idref="DRAWINGS">FIG. 2</figref> is a flow diagram illustrating additional methods of securing access to virtual machine memory according to various embodiments of the invention.</p>
<p id="p-0008" num="0007"><figref idref="DRAWINGS">FIG. 3</figref> is a block diagram of apparatus and systems according to various embodiments of the invention.</p>
<p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. 4</figref> is a block diagram of an article of manufacture, including a specific machine, according to various embodiments of the invention.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0004" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0010" num="0009">To address some of the issues raised when secure access to memory in a virtual environment is desired, it can be noted that hypervisors have the ability to maintain a file designated as non-volatile random access memory (NVRAM). This memory can be presented VMs for their use. In various embodiments, the contents of this memory will be encrypted by the hypervisor and stored in main memory, or on disk (e.g., when a VM is shut down, or when a snapshot of the VM is taken). Thus, when the information is selected for storage in the NVRAM, it is encrypted by the hypervisor prior to storage. And when the encrypted information is selected for recall by the VM or other subsidiary elements in the system (e.g., an application executing under the VM), it is decrypted by the hypervisor prior to presentation to these other elements. For example, if application A has been allocated the memory space in the range of addresses 0000H to 1000H as encrypted memory, when the application A wants to access the memory, it approaches the operating system (OS), which in turn goes to the VM, and then the VM goes to the hypervisor, which actually retrieves and decrypts the information stored in the encrypted memory.</p>
<p id="p-0011" num="0010">Thus, the OS can be modified to map the encrypted memory to a range of locations, and to grant access to these special memory locations upon request from application programs. This can be implemented by using the OS to expose the encrypted memory using an application interface (API). In this way, the API is used by the OS to access the memory. The OS can also be used to prevent any other application, other than those specifically authorized, from accessing the secure memory. The OS is visible to the VM in this case, but is also in communication with the hypervisor, which actually give the memory space to the OS to use.</p>
<p id="p-0012" num="0011">Special system calls or APIs are provided which applications running on the VMs can use to push secrets to the encrypted memory. In this way, regular memory access calls result in access to regular memory. Secure memory access requests result in access to the encrypted memory if this feature has been authorized by the OS. In essence, this is software lock that can be implemented on any physical machine&#x2014;no proprietary hardware is needed.</p>
<p id="p-0013" num="0012">The OS can also be modified to prevent debugger programs and core dump routines from accessing the encrypted memory. The OS can tell the difference between a debugger or core dump program (or programs like them, which are not allowed to access encrypted memory), and other programs that are permitted to access the encrypted memory, because the OS has knowledge of which memory locations in the encrypted memory (if any) have been allocated to each application. In this way, secure data is specific to a single application. Applications can share data in normal memory, but not normally within the encrypted locations.</p>
<p id="p-0014" num="0013">If the VM that has been permitted access to encrypted memory is migrated to a physical machine, then in most embodiments the encrypted memory locations can still be accessed as valid locations, so that applications will continue to execute, but there may not be any encryption of the information stored in those locations. This is because migration attempts to move all memory from one machine (e.g., a VM) to another (e.g., physical machine). The hypervisor access both regular and encrypted memory, decrypts the information in the encrypted memory, and assembles a memory file that comprises the content from the regular memory, and the unencrypted information from the encrypted memory. This file is then passed to the physical machine (or another hypervisor), perhaps over a secure network connection. The physical machine (or new hypervisor) can now take over management (e.g., encryption) of the unencrypted information, so that it can be processed in a secure manner by the new host.</p>
<p id="p-0015" num="0014">There are many ways of configuring the encrypted memory file. One approach is to make the VM aware of the existence of the encrypted memory configuration as a disk file. Another approach involves making the OS aware of the encrypted memory presence, without giving the VM the encrypted memory configuration.</p>
<p id="p-0016" num="0015">In the first configuration that can be used to manage encrypted memory, the encrypted memory file can be exposed as a disk to the VM by the hypervisor. The VM knows about the existence of this special disk as encrypted memory. The disk can be mounted, and the files on the disk are mapped to special memory locations (e.g., the UNIX&#xae; &#x201c;mmap&#x201d; system call can be used to establish a mapping inside the OS between the address space of a process and a file) which are designated as encrypted memory. At this point, the encrypted memory can be allocated to various applications by the OS. That is, in this first configuration option, the VM manages storing the unencrypted information to the disk, and the hypervisor gives the memory configuration to the VM (while the hypervisor keeps the encryption key). This permits the hypervisor to make the VM aware of the existence of the encrypted memory as a disk file. The VM in turn can then expose the encrypted memory as a secure disk file to various applications running on the VM. These applications include the OS, which manages the memory for the VM. In this configuration, an observer outside the VM would be able to locate the secure memory on disk by reviewing the VM configuration. However, from within the VM, it is only known that the hypervisor gives a memory block to the VM, so that while the hypervisor knows the location of the memory, the VM does not know the precise location of the encrypted memory; the memory given by the hypervisor to the VM simply appears to the VM as a disk.</p>
<p id="p-0017" num="0016">Upon pausing, suspending, or taking a snapshot of VM operations, the hypervisor can be used to restore the encrypted memory to the VM at a later time. This can be useful in many circumstances.</p>
<p id="p-0018" num="0017">For example, consider the situation where a first password is created on Monday, which is used to log into the system just prior to taking a first snapshot, and then a second password is created on Tuesday, which is used to log into the system just prior to taking a second snapshot. If the system administrator opts to restore the system state as of Monday, it is necessary to recall the password used on Monday. On the other hand, if the system administrator opts to restore the system state as of Tuesday, it is necessary to recall the password used on Tuesday. The various embodiments described herein permit this kind of operation, such that either of the passwords can be recalled in a secure fashion, vastly reducing the opportunity for unauthorized access to the passwords while they exist in a stored snapshot state. Thus, users can access any of the original states of the VM without concern for security of the files that may be exposed to hackers and other unauthorized personnel in the mean time.</p>
<p id="p-0019" num="0018">When a snapshot is taken, the hypervisor is used to take a picture of all memory, including that which is encrypted by the hypervisor&#x2014;this is the &#x201c;encrypted memory.&#x201d; An encryption key can be created when the associated VM is created (e.g., a static key that is used throughout the lifetime of the associated VM), as well as at each time a snapshot is taken (e.g., a dynamic key, that changes each time a snapshot is taken). When the snapshot memory space is restored, this includes the encrypted portion that can be accessed by the VM.</p>
<p id="p-0020" num="0019">In the second configuration that can be used to manage encrypted memory, the hypervisor manages storing the data selected for secure access, as well as the key(s) used for encryption/decryption, and the VM is not given the configuration of the encrypted memory as a disk file. Instead, the OS executing on the VM is directly aware of the existence of the encrypted memory as a set of protected memory locations (e.g., RAM or NVRAM). That is, the encrypted memory exists as agreed upon memory locations that are known to the OS and mapped by the hypervisor to, for example, an NVRAM file. As a matter of contrast with the first configuration, an observer outside the VM in this case would not know which memory on a disk is allocated to which VM. So while the first configuration may be easier to manage, it is less secure. In the second configuration, the hypervisor does not let the VM know where and how the memory is secured, which offers greater protection, but is less easy to manage.</p>
<p id="p-0021" num="0020">Thus, many embodiments of the invention may be realized, and each can be implemented in a variety of architectural platforms, along with various operating and server systems, devices, and applications. Any particular architectural layout or implementation presented herein is therefore provided for purposes of illustration and comprehension only, and is not intended to limit the various embodiments that can be realized.</p>
<p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. 1</figref> is a flow diagram illustrating methods <b>111</b> of securing access to VM memory according to various embodiments of the invention. The methods <b>111</b> are implemented in a machine-accessible and readable medium and are operational over processes within and among networks. The networks may be wired, wireless, or a combination of wired and wireless. The methods <b>111</b> may be implemented as instructions, which when executed by a specific machine, operate to perform the processing depicted in <figref idref="DRAWINGS">FIG. 1</figref>. Given this context, secure VM memory is now discussed with reference to <figref idref="DRAWINGS">FIG. 1</figref>.</p>
<p id="p-0023" num="0022">In some embodiments, a processor-implemented method <b>111</b> that can be executed on one or more processors that perform the method may operate to provide the functions described above, from the perspective of the hypervisor and/or the VM. The &#x201c;encrypted memory locations&#x201d; are defined as memory locations that have been set aside to store information that has been encrypted, which can be designated in some embodiments, as an &#x201c;NVRAM&#x201d; file in either main memory, or on disk. A single hypervisor encrypts the information just prior to storage in the encrypted memory locations. The encrypted information stored in the encrypted memory locations is decrypted by the same hypervisor to recover the original information. Decryption occurs in response to a valid request for the information (which is valid only when presented by the associated VM and a single application), prior to presenting the decrypted information to the requesting application. Thus, the method <b>111</b> may begin at block <b>121</b> with allocating encrypted memory locations to store encrypted information, where the information is to be encrypted and decrypted using a single hypervisor.</p>
<p id="p-0024" num="0023">If the first configuration described above is used to manage the encrypted memory, the associated VM operates to manage data storage according to a configuration provided to it by the hypervisor. Here, an observer of the VM might be able to locate the memory on disk, but would not be able to decrypt it, as the hypervisor has the only key(s). Thus, the method <b>111</b> may continue on to block <b>125</b> with presenting the encrypted memory locations by the hypervisor to the associated VM as a secure disk file memory configuration, wherein the associated VM is to manage storage operations associated with secure disk file memory.</p>
<p id="p-0025" num="0024">After the encrypted memory file is exposed as a disk to the VM by the hypervisor, the system may operate in a variety of ways. For example, the method <b>111</b> may continue on to block <b>129</b> with mounting a secure disk containing the secure disk file by the associated VM, mapping memory in the secure disk file to a designated number of the encrypted memory locations, and granting access to the secure disk file to a single application by the associated VM.</p>
<p id="p-0026" num="0025">At block <b>133</b>, the method <b>111</b> may comprise determining whether a request to access specific locations (e.g., a designated number of locations) in the encrypted memory has originated from the correct VM (i.e., the associated VM that received the memory configuration from the hypervisor), and the correct application (i.e., the application which was originally granted access to those specific locations by the associated VM). If the identity of the VM or the application is incorrect, the method <b>111</b> may continue on to block <b>137</b> with denying access to the designated number of the encrypted memory locations to any other application executed by the associated VM, or any other VM (i.e., any VM that is not the correct VM, and any application which is not the correct application).</p>
<p id="p-0027" num="0026">If the identity of both the VM and the application is correct, the method <b>111</b> may continue on to block <b>141</b> with permitting access to the designated number of encrypted memory locations&#x2014;to a single application executed by the associated VM, subject to the hypervisor. Such access may be permitted using memory allocation techniques known to those of ordinary skill in the art.</p>
<p id="p-0028" num="0027">The request to access secure memory should be made using a format designated by the VM, or else it can be denied. Thus, the activity at block <b>141</b> may comprise permitting access when the single application requests access using a secure memory request designated by the associated VM.</p>
<p id="p-0029" num="0028">The single application can be any one of a number of applications. These include, but are not limited to word processing applications, presentation applications, spreadsheet applications, email applications, database applications, and/or browser applications.</p>
<p id="p-0030" num="0029">As noted previously, the encrypted memory locations can be can be copied as part of a snapshot, or as a result of pause/suspend commands. In each case, the hypervisor can operate to dump the VM memory to a disk. Thus, the method <b>111</b> may include, at block <b>145</b>, storing the encrypted information in encrypted memory locations that comprise non-volatile memory locations.</p>
<p id="p-0031" num="0030">If desired, the stored state of the VM can be restored, including information stored in encrypted form, to be decrypted by the hypervisor. The information stored in the encrypted memory can also be migrated to another host, in encrypted form with a shared key (or keys); or in unencrypted form, over a secure network. Thus, the method <b>111</b> may include, at block <b>149</b>, one of transmitting the encrypted information and at least one shared key to a new hypervisor, or transmitting a decrypted version of the encrypted information to the new hypervisor over a secure network connection.</p>
<p id="p-0032" num="0031">The encrypted information can also be decrypted and migrated to a physical machine, where the VM memory locations remain valid, with or without encryption. As part of VM migration, memory can be dumped to disk and copied to another host (e.g., a new host on which another VM can be executed). When migration occurs, the old and new hosts can share the encryption/decryption key, perhaps using public and private key logic, so that the data can be sent from the old host to the new host in encrypted format. Or the data can be sent over a secured network, without key sharing between the hosts, in unencrypted format. Thus, the activity at block <b>149</b> may comprise decrypting the encrypted information to provide the information as unencrypted information, assembling a memory file comprising the content of regular memory associated with the single application and the unencrypted information, and migrating the assembled memory file to a physical machine to permit unencrypted access to the information by the physical machine. Other embodiments may be realized.</p>
<p id="p-0033" num="0032">For example, <figref idref="DRAWINGS">FIG. 2</figref> is a flow diagram illustrating additional methods <b>211</b> of securing access to virtual machine memory according to various embodiments of the invention. In this case, the methods <b>211</b> include alternative and additional activities that can be used to make up hypervisor and VM operations with respect to recovery of the VM operational state (e.g., after operation of the VM is paused or suspended).</p>
<p id="p-0034" num="0033">The methods <b>211</b> are implemented in a machine-accessible and readable medium, and are operational over processes within and among networks. The networks may be wired, wireless, or a combination of wired and wireless. The methods <b>211</b> may be implemented as instructions, which when executed by a specific machine, operate to perform the processing depicted in <figref idref="DRAWINGS">FIG. 2</figref>.</p>
<p id="p-0035" num="0034">It is therefore noted that upon request, after a pause or suspend command has been executed within the virtual environment, the hypervisor can operate to decrypt the encrypted information and use it to restore the operational state of the VM. Thus, the method <b>211</b> may begin by including, at block <b>221</b>, receiving a request to restore the operational state of the associated VM after a pause operation or a suspend operation, and then decrypting, by the hypervisor, the encrypted information to provide the unencrypted information. This information can be transmitted as needed to various system entities and used to restore the operating state of the associated VM.</p>
<p id="p-0036" num="0035">The method <b>211</b> may continue on the block <b>225</b> with restoring the operational state of the associated VM, using the encrypted information stored in the encrypted memory locations, where the information is to be encrypted and decrypted using a single hypervisor.</p>
<p id="p-0037" num="0036">If the second configuration described previously is used to manage the encrypted memory, then the hypervisor manages storage and recall from the encrypted memory locations, and the VM is not given the memory configuration. That is, the hypervisor does not let the VM know where and how the memory is secured. An observer of the VM thus would not be able to locate the secure memory on disk (as well as not being able to decrypt it even if accidentally discovering the memory location). Thus, the method <b>211</b> may continue on to include, at block <b>229</b>, granting access by the hypervisor to an OS associated with the associated VM, to a designated number of the encrypted memory locations, without transmitting the configuration of the encrypted memory locations to the associated VM.</p>
<p id="p-0038" num="0037">Decryption keys can be static&#x2014;created for the lifetime of the VM, or dynamic&#x2014;created each time a snapshot of the VM is taken. Thus, the method <b>211</b> may continue on to block <b>233</b> with creating, by the hypervisor, a decryption key associated with the information (to be stored in the encrypted memory) once for the lifetime of the VM, or for some number of times that is approximately equal to the number of snapshots taken of the VM.</p>
<p id="p-0039" num="0038">If an unknown application (e.g., a core dump application, or a debugger application) attempts to access the secure memory, it will be denied by the VM. Thus, the method <b>211</b> may continue on to block <b>237</b> with receiving a request to access the encrypted memory locations from an unknown application that is not the single application, or an unknown VM that is not associated with the single application, and when the application is unknown by the associated VM, for example, denying access to the unknown application by the associated VM at block <b>245</b>. That is, access is denied to any other application executed by the associated VM, or any other VM (that is not the associated VM).</p>
<p id="p-0040" num="0039">However, if the correct VM and application request access to the encrypted memory, then the method <b>211</b> may continue on to block <b>249</b> with permitting access to the designated number of the encrypted memory locations (but only to the single application executed by the associated VM) subject to the hypervisor.</p>
<p id="p-0041" num="0040">Once the information is provided by the application, it can be stored in the encrypted memory. Thus, the method <b>211</b> may continue on to block <b>253</b> with requesting storage of the information by the single application, encrypting the information (by the hypervisor) to provide the encrypted information, and storing the encrypted information in the encrypted memory locations by the hypervisor.</p>
<p id="p-0042" num="0041">Once the information is stored in the encrypted memory, it can be recovered by the single application. It can be shared with other applications thereafter (as permitted by the single application). Thus, when the information is to be shared between the single application and another application, the method <b>211</b> may continue on to block <b>257</b> with requesting recall of the information by the single application, decrypting of the encrypted information by the hypervisor to provide the information, and transmitting the information from the hypervisor to the single application&#x2014;where it can be released and shared with other applications.</p>
<p id="p-0043" num="0042">The methods described herein do not have to be executed in the order described, or in any particular order. Moreover, various activities described with respect to the methods identified herein can be executed in repetitive, serial, or parallel fashion. The individual activities of the methods shown in <figref idref="DRAWINGS">FIGS. 1 and 2</figref> can also be combined with each other and/or substituted, one for another, in various ways. Information, including parameters, commands, operands, and other data, can be sent and received in the form of one or more carrier waves. Thus, many other embodiments may be realized.</p>
<p id="p-0044" num="0043">The methods of secure virtual machine memory shown in <figref idref="DRAWINGS">FIGS. 1 and 2</figref> can be implemented in various devices, as well as in a computer-readable storage medium, where the methods are adapted to be executed by one or more processors. Further details of such embodiments will now be described.</p>
<p id="p-0045" num="0044"><figref idref="DRAWINGS">FIG. 3</figref> is a block diagram of apparatus <b>300</b> and systems according to various embodiments of the invention. Here it can be seen that an apparatus <b>300</b> used to secure VM memory may comprise one or more processing nodes <b>302</b>, one or more processors <b>320</b>, multiple memories <b>322</b>, and a display <b>342</b>. The apparatus <b>300</b> may comprise a client, a server, or some other networked processing node.</p>
<p id="p-0046" num="0045">The processing nodes <b>302</b> may comprise physical machines or VMs, or a mixture of both. The nodes <b>302</b> may also comprise networked entities, such as servers and/or clients. In some basic implementations, the operations described can occur entirely within a single node <b>302</b>. The apparatus <b>300</b> may thus comprise a single desktop computer or server, for example, on which the hypervisor <b>324</b> operates, or a number of networked nodes <b>302</b>.</p>
<p id="p-0047" num="0046">In some embodiments, then, an apparatus <b>300</b> may comprise a first node (e.g., NODE<sub>&#x2014;</sub>1) including encrypted memory locations <b>330</b> that have been allocated to store encrypted information <b>328</b>. The apparatus <b>300</b> may also comprise a storage supervision processor <b>320</b> executing a single hypervisor <b>324</b> (among one or more hypervisors). The processor <b>320</b> may be communicatively coupled to the first node (including residing within the node, as shown in <figref idref="DRAWINGS">FIG. 3</figref>) to permit access to a designated number of the encrypted memory locations <b>330</b> to a single application (e.g., APPLN2) executed by an associated VM (e.g., VM2), subject to the hypervisor <b>324</b>. The process <b>320</b> may be used to deny access to the designated number of the encrypted memory locations to any other application executed by the associated VM, or any other VM (e.g., APPLN1). The unencrypted information <b>326</b> may be encrypted and decrypted using the single hypervisor <b>324</b>.</p>
<p id="p-0048" num="0047">The VM (e.g., VM2) and application (e.g., APPLN2) may execute on the same node (e.g., NODE<sub>&#x2014;</sub>1) as the hypervisor <b>324</b>, or on a node different from the hypervisor (e.g., the hypervisor <b>324</b> may operate on NODE<sub>&#x2014;</sub>1, allocating the encrypted memory <b>330</b> to the VM VM1 and application APPLN1 on NODE_N.</p>
<p id="p-0049" num="0048">Considering the first configuration, discussed previously, the configuration of the encrypted memory <b>330</b> (e.g., in main memory <b>322</b> in NODE<sub>&#x2014;</sub>1, or as a disk file designated by the hypervisor, perhaps residing on a storage node <b>354</b>) can be transmitted to the VM <b>336</b> by the hypervisor <b>324</b> so that the VM <b>336</b> can manage storage and recall to a specified memory location within the encrypted memory <b>330</b>. Thus, the apparatus <b>300</b> may comprise a second node (e.g., NODE_N) to execute the single application <b>332</b>, and to request storage and recall of the information <b>326</b> using a memory configuration associated with the encrypted memory locations <b>330</b>.</p>
<p id="p-0050" num="0049">Considering the second configuration, discussed previously, the VM <b>336</b> and application <b>332</b> may also execute on the same node as the hypervisor, or on a node different from the hypervisor. In this case, the VM <b>336</b> operates without having the configuration of the secure memory <b>330</b>, so that the hypervisor alone manages storage and recall to specified memory locations within the encrypted memory <b>330</b>. Thus, the apparatus <b>300</b> may comprise a second node (e.g., NODE_N) with an associated VM (e.g., VM1) to execute the single application (e.g., APPLN1), and to request storage and recall of the information <b>326</b> without having a memory configuration associated with the encrypted memory locations <b>330</b>.</p>
<p id="p-0051" num="0050">The encrypted memory <b>330</b> may be located in one node (e.g., NODE<sub>&#x2014;</sub>1, or the storage node <b>354</b>), and the processor <b>322</b> may be located in another node. Thus, the apparatus <b>300</b> may comprise a second node (e.g., NODE_N) to house the storage supervision processor <b>320</b> (e.g., the processor <b>320</b> housed in NODE_N).</p>
<p id="p-0052" num="0051">The memory used as encrypted memory <b>330</b> may comprise physical non-volatile memory. Thus, the encrypted memory locations <b>330</b> may comprise non-volatile memory.</p>
<p id="p-0053" num="0052">Encryption keys <b>334</b> can be created for the hypervisor <b>324</b> to be used statically, or dynamically. Thus, the apparatus <b>300</b> may comprise a key generation module <b>338</b> to generate static encryption keys and/or dynamic encryption keys to be made accessible to the single hypervisor <b>324</b>. As noted previously, the static encryption key can be created once for the lifetime of the associated VM <b>336</b>, and the dynamic encryption key can be created a number of times, such as approximately equal to the number of snapshots taken of the associated VM <b>336</b>.</p>
<p id="p-0054" num="0053">A system that operates to secure VM memory may comprise multiple instances of the apparatus <b>300</b>. The system might also comprise a cluster of nodes <b>302</b>, including physical and virtual nodes. It should be noted that any of the nodes <b>302</b> may include any one or more of the elements explicitly shown in nodes NODE<sub>&#x2014;</sub>1, NODE<sub>&#x2014;</sub>2, NODE<sub>&#x2014;</sub>3, . . . , NODE_N, in any combination.</p>
<p id="p-0055" num="0054">The nodes <b>302</b> may exist as a device embedded within another structure (e.g., as an embedded device), or as a regular desktop or laptop computer that includes a display <b>342</b> to show the activities conducted while the node <b>302</b> is active. Thus, the system may also comprise a display <b>342</b> coupled to the nodes <b>302</b> to display visible indications <b>348</b> of the activities conducted at the nodes <b>302</b>.</p>
<p id="p-0056" num="0055">The apparatus <b>300</b> and system may be implemented in a machine-accessible and readable medium that is operational over one or more networks <b>316</b>. The networks <b>316</b> may be wired, wireless, or a combination of wired and wireless. The apparatus <b>300</b> and system can be used to implement, among other things, the processing associated with the methods <b>111</b> and <b>211</b> of <figref idref="DRAWINGS">FIGS. 1 and 2</figref>, respectively. Modules may comprise hardware, software, and firmware, or any combination of these. Additional embodiments may be realized.</p>
<p id="p-0057" num="0056">For example, <figref idref="DRAWINGS">FIG. 4</figref> is a block diagram of an article <b>400</b> of manufacture, including a specific machine <b>402</b>, according to various embodiments of the invention. Upon reading and comprehending the content of this disclosure, one of ordinary skill in the art will understand the manner in which a software program can be launched from a computer-readable medium in a computer-based system to execute the functions defined in the software program.</p>
<p id="p-0058" num="0057">One of ordinary skill in the art will further understand the various programming languages that may be employed to create one or more software programs designed to implement and perform the methods disclosed herein. The programs may be structured in an object-orientated format using an object-oriented language such as Java or C++. Alternatively, the programs can be structured in a procedure-orientated format using a procedural language, such as assembly or C. The software components may communicate using any of a number of mechanisms well known to those of ordinary skill in the art, such as application program interfaces or interprocess communication techniques, including remote procedure calls. The teachings of various embodiments are not limited to any particular programming language or environment. Thus, other embodiments may be realized.</p>
<p id="p-0059" num="0058">For example, an article <b>400</b> of manufacture, such as a computer, a memory system, a magnetic or optical disk, some other storage device, and/or any type of electronic device or system may include one or more processors <b>404</b> coupled to a machine-readable medium <b>408</b> such as a memory (e.g., removable storage media, as well as any memory including an electrical, optical, or electromagnetic conductor) having instructions <b>412</b> stored thereon (e.g., computer program instructions), which when executed by the one or more processors <b>404</b> result in the machine <b>402</b> performing any of the actions described with respect to the methods above.</p>
<p id="p-0060" num="0059">The machine <b>402</b> may take the form of a specific computer system having a processor <b>404</b> coupled to a number of components directly, and/or using a bus <b>416</b>. Thus, the machine <b>402</b> may be similar to or identical to the apparatus <b>300</b> or system shown in <figref idref="DRAWINGS">FIG. 3</figref>.</p>
<p id="p-0061" num="0060">Turning now to <figref idref="DRAWINGS">FIG. 4</figref>, it can be seen that the components of the machine <b>402</b> may include main memory <b>420</b>, static or non-volatile memory <b>424</b>, and mass storage <b>406</b>. Other components coupled to the processor <b>404</b> may include an input device <b>432</b>, such as a keyboard, or a cursor control device <b>436</b>, such as a mouse. An output device <b>428</b>, such as a video display, may be located apart from the machine <b>402</b> (as shown), or made as an integral part of the machine <b>402</b>.</p>
<p id="p-0062" num="0061">A network interface device <b>440</b> to couple the processor <b>404</b> and other components to a network <b>444</b> may also be coupled to the bus <b>416</b>. The instructions <b>412</b> may be transmitted or received over the network <b>444</b> via the network interface device <b>440</b> utilizing any one of a number of well-known transfer protocols (e.g., HyperText Transfer Protocol). Any of these elements coupled to the bus <b>416</b> may be absent, present singly, or present in plural numbers, depending on the specific embodiment to be realized.</p>
<p id="p-0063" num="0062">The processor <b>404</b>, the memories <b>420</b>, <b>424</b>, and the storage device <b>406</b> may each include instructions <b>412</b> which, when executed, cause the machine <b>402</b> to perform any one or more of the methods described herein. In some embodiments, the machine <b>402</b> operates as a standalone device or may be connected (e.g., networked) to other machines. In a networked environment, the machine <b>402</b> may operate in the capacity of a server or a client machine in server-client network environment, or as a peer machine in a peer-to-peer (or distributed) network environment.</p>
<p id="p-0064" num="0063">The machine <b>402</b> may comprise a personal computer (PC), a tablet PC, a set-top box (STB), a personal digital assistant (PDA), a cellular telephone, a web appliance, a network router, switch or bridge, server, client, or any specific machine capable of executing a set of instructions (sequential or otherwise) that direct actions to be taken by that machine to implement the methods and functions described herein. Further, while only a single machine <b>402</b> is illustrated, the term &#x201c;machine&#x201d; shall also be taken to include any collection of machines that individually or jointly execute a set (or multiple sets) of instructions to perform any one or more of the methodologies discussed herein.</p>
<p id="p-0065" num="0064">While the machine-readable medium <b>408</b> is shown as a single medium, the term &#x201c;machine-readable medium&#x201d; should be taken to include a single medium or multiple media (e.g., a centralized or distributed database), and/or associated caches and servers, and or a variety of storage media, such as the registers of the processor <b>404</b>, memories <b>420</b>, <b>424</b>, and the storage device <b>406</b> that store the one or more sets of instructions <b>412</b>. The term &#x201c;machine-readable medium&#x201d; shall also be taken to include any medium that is capable of storing, encoding or carrying a set of instructions for execution by the machine and that cause the machine <b>402</b> to perform any one or more of the methodologies of the present invention, or that is capable of storing, encoding or carrying data structures utilized by or associated with such a set of instructions. The terms &#x201c;machine-readable medium&#x201d; or &#x201c;computer-readable medium&#x201d; shall accordingly be taken to include tangible media, such as solid-state memories and optical and magnetic media.</p>
<p id="p-0066" num="0065">Various embodiments may be implemented as a stand-alone application (e.g., without any network capabilities), a client-server application or a peer-to-peer (or distributed) application. Embodiments may also, for example, be deployed by Software-as-a-Service (SaaS), an Application Service Provider (ASP), or utility computing providers, in addition to being sold or licensed via traditional channels.</p>
<p id="p-0067" num="0066">Implementing the apparatus, systems, and methods described herein may operate to provide new options for managing access to memory in a virtual environment. Various configurations may be employed, depending on the amount of security that is desired. More efficient allocation of processing resources, increased overall system security, and increased user satisfaction may result.</p>
<p id="p-0068" num="0067">This Detailed Description is illustrative, and not restrictive. Many other embodiments will be apparent to those of ordinary skill in the art upon reviewing this disclosure. The scope of embodiments should therefore be determined with reference to the appended claims, along with the full scope of equivalents to which such claims are entitled.</p>
<p id="p-0069" num="0068">The Abstract of the Disclosure is provided to comply with 37 C.F.R. &#xa7;1.72(b) and will allow the reader to quickly ascertain the nature of the technical disclosure. It is submitted with the understanding that it will not be used to interpret or limit the scope or meaning of the claims.</p>
<p id="p-0070" num="0069">In this Detailed Description of various embodiments, a number of features are grouped together in a single embodiment for the purpose of streamlining the disclosure. This method of disclosure is not to be interpreted as an implication that the claimed embodiments have more features than are expressly recited in each claim. Rather, as the following claims reflect, inventive subject matter lies in less than all features of a single disclosed embodiment. Thus the following claims are hereby incorporated into the Detailed Description, with each claim standing on its own as a separate embodiment.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. An apparatus, comprising:
<claim-text>a first node including encrypted memory locations that have been allocated to store encrypted information; and</claim-text>
<claim-text>a storage supervision processor executing a single hypervisor and communicatively coupled to the first node to:
<claim-text>permit access to a designated number of the encrypted memory locations to a single application executed by an associated virtual machine (VM) subject to the hypervisor, the encrypted memory locations being usable as main memory, and the single application being from a plurality of applications executing in the associated VM; and</claim-text>
<claim-text>deny access to the designated number of the encrypted memory locations to any other application executed by the associated VM, or any other VM, the information to be encrypted and decrypted using the single hypervisor and a dynamic encryption key; and</claim-text>
</claim-text>
<claim-text>a key generation module, implemented by a processor, to generate the dynamic encryption key to be made accessible to the single hypervisor, the dynamic encryption key created for each snapshot taken of the associated VM.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The apparatus of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:
<claim-text>a second node to execute the single application, and to request storage and recall of the information using a memory configuration associated with the encrypted memory locations.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The apparatus of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:
<claim-text>a second node to execute the single application, and to request storage and recall of the information without having a memory configuration associated with the encrypted memory locations.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The apparatus of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:
<claim-text>a second node to house the storage supervision processor.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The apparatus of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the encrypted memory locations comprise non-volatile memory.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. A processor-implemented method to execute on one or more processors that perform the method, comprising:
<claim-text>executing a single hypervisor;</claim-text>
<claim-text>allocating encrypted memory locations to store encrypted information, the encrypted memory locations being usable as main memory, and the information to be encrypted and decrypted using the single hypervisor and a dynamic encryption key;</claim-text>
<claim-text>permitting access to a designated number of the encrypted memory locations to a single application executed by an associated virtual machine (VM) subject to the hypervisor, the single application being from a plurality of applications executing in the associated VM; and</claim-text>
<claim-text>denying access to the designated number of the encrypted memory locations to any other application executed by the associated VM, or any other VM; and</claim-text>
<claim-text>creating, by the hypervisor, the dynamic encryption key associated with the information for each snapshot taken of the associated VM.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The method of <claim-ref idref="CLM-00006">claim 6</claim-ref>, wherein the permitting access comprises:
<claim-text>permitting access when the single application requests access using a secure memory request designated by the associated VM.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The method of <claim-ref idref="CLM-00006">claim 6</claim-ref>, wherein the single application comprises
<claim-text>one of a word processing application, a presentation application, a spreadsheet application, an email application, a database application, or a browser application.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The method of <claim-ref idref="CLM-00006">claim 6</claim-ref>, further comprising:
<claim-text>presenting the encrypted memory locations by the hypervisor to the associated VM as a secure disk file memory configuration, wherein the associated VM is to manage storage operations associated with secure disk file memory.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The method of <claim-ref idref="CLM-00009">claim 9</claim-ref>, further comprising:
<claim-text>mounting a secure disk containing the secure disk file by the associated VM;</claim-text>
<claim-text>mapping memory in the secure disk file to the designated number of the encrypted memory locations; and</claim-text>
<claim-text>granting access to the secure disk file to the single application by the associated VM.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The method of <claim-ref idref="CLM-00006">claim 6</claim-ref>, further comprising:
<claim-text>storing the encrypted information in the encrypted memory locations comprising non-volatile memory locations; and</claim-text>
<claim-text>one of transmitting the encrypted information and at least one shared key to a new hypervisor or transmitting a decrypted version of the encrypted information to the new hypervisor over a secure network connection.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The method of <claim-ref idref="CLM-00006">claim 6</claim-ref>, further comprising:
<claim-text>decrypting the encrypted information to provide the information;</claim-text>
<claim-text>assembling a memory file comprising content of regular memory associated with the single application and the information; and</claim-text>
<claim-text>migrating the memory file to a physical machine to permit unencrypted access to the information by the physical machine.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The method of <claim-ref idref="CLM-00006">claim 6</claim-ref>, further comprising:
<claim-text>granting access by the hypervisor to an operating system (OS) associated with the associated VM, to the designated number of the encrypted memory locations, without transmitting a configuration of the encrypted memory locations to the associated VM.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The method of <claim-ref idref="CLM-00006">claim 6</claim-ref>, further comprising:
<claim-text>receiving a request to access the encrypted memory locations from an unknown application that is not the single application, or an unknown VM that is not associated with the single application; and</claim-text>
<claim-text>denying access to the unknown application or the unknown VM by the associated VM.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The method of <claim-ref idref="CLM-00006">claim 6</claim-ref>, wherein the information is to be shared between the single application and another application, further comprising:
<claim-text>requesting recall of the information by the single application;</claim-text>
<claim-text>decrypting of the encrypted information by the hypervisor to provide the information; and</claim-text>
<claim-text>transmitting the information from the hypervisor to the single application.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The method of <claim-ref idref="CLM-00006">claim 6</claim-ref>, further comprising:
<claim-text>requesting storage of the information by the single application;</claim-text>
<claim-text>encrypting the information by the hypervisor to provide the encrypted information; and</claim-text>
<claim-text>storing the encrypted information in the encrypted memory locations by the hypervisor. </claim-text>
</claim-text>
</claim>
</claims>
</us-patent-grant>

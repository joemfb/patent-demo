<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08626929-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08626929</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>13026793</doc-number>
<date>20110214</date>
</document-id>
</application-reference>
<us-application-series-code>13</us-application-series-code>
<us-term-of-grant>
<disclaimer>
<text>This patent is subject to a terminal disclaimer.</text>
</disclaimer>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>15</main-group>
<subgroup>16</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>709227</main-classification>
<further-classification>709214</further-classification>
<further-classification>709215</further-classification>
<further-classification>709223</further-classification>
<further-classification>709228</further-classification>
<further-classification>711205</further-classification>
<further-classification>713153</further-classification>
<further-classification>713155</further-classification>
<further-classification>713156</further-classification>
<further-classification>713168</further-classification>
<further-classification>713182</further-classification>
<further-classification>713175</further-classification>
<further-classification>713176</further-classification>
<further-classification>713150</further-classification>
<further-classification>713170</further-classification>
<further-classification>726  4</further-classification>
<further-classification>726  5</further-classification>
<further-classification>726  6</further-classification>
<further-classification>726  8</further-classification>
<further-classification>719312</further-classification>
<further-classification>380285</further-classification>
<further-classification>370389</further-classification>
</classification-national>
<invention-title id="d2e51">Scalable session management using an encrypted session key</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>6125185</doc-number>
<kind>A</kind>
<name>Boesch</name>
<date>20000900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>380285</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>6938085</doc-number>
<kind>B1</kind>
<name>Belkin et al.</name>
<date>20050800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>6985953</doc-number>
<kind>B1</kind>
<name>Sandhu et al.</name>
<date>20060100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>7346775</doc-number>
<kind>B2</kind>
<name>Gasparinl et al.</name>
<date>20080300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>2002/0165912</doc-number>
<kind>A1</kind>
<name>Wenocur et al.</name>
<date>20021100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>2005/0027985</doc-number>
<kind>A1</kind>
<name>Sprunk et al.</name>
<date>20050200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>2005/0220095</doc-number>
<kind>A1</kind>
<name>Narayanan et al.</name>
<date>20051000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>370389</main-classification></classification-national>
</us-citation>
</us-references-cited>
<number-of-claims>18</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>713170</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>7</number-of-drawing-sheets>
<number-of-figures>7</number-of-figures>
</figures>
<us-related-documents>
<continuation>
<relation>
<parent-doc>
<document-id>
<country>US</country>
<doc-number>11084051</doc-number>
<date>20050318</date>
</document-id>
<parent-grant-document>
<document-id>
<country>US</country>
<doc-number>7890634</doc-number>
</document-id>
</parent-grant-document>
</parent-doc>
<child-doc>
<document-id>
<country>US</country>
<doc-number>13026793</doc-number>
</document-id>
</child-doc>
</relation>
</continuation>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20110138179</doc-number>
<kind>A1</kind>
<date>20110609</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Jiang</last-name>
<first-name>Wei</first-name>
<address>
<city>Redmond</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Paya</last-name>
<first-name>Ismail Cem</first-name>
<address>
<city>Seattle</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="003" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Whited</last-name>
<first-name>John D.</first-name>
<address>
<city>Duvall</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="004" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Guo</last-name>
<first-name>Wei-Quiang Michael</first-name>
<address>
<city>Bellevue</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="005" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Rouskov</last-name>
<first-name>Yordan</first-name>
<address>
<city>Kirkland</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="006" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Back</last-name>
<first-name>Adam</first-name>
<address>
<city>Borden</city>
<country>CA</country>
</address>
</addressbook>
<residence>
<country>CA</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Jiang</last-name>
<first-name>Wei</first-name>
<address>
<city>Redmond</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Paya</last-name>
<first-name>Ismail Cem</first-name>
<address>
<city>Seattle</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="003" designation="us-only">
<addressbook>
<last-name>Whited</last-name>
<first-name>John D.</first-name>
<address>
<city>Duvall</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="004" designation="us-only">
<addressbook>
<last-name>Guo</last-name>
<first-name>Wei-Quiang Michael</first-name>
<address>
<city>Bellevue</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="005" designation="us-only">
<addressbook>
<last-name>Rouskov</last-name>
<first-name>Yordan</first-name>
<address>
<city>Kirkland</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="006" designation="us-only">
<addressbook>
<last-name>Back</last-name>
<first-name>Adam</first-name>
<address>
<city>Borden</city>
<country>CA</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Lee &#x26; Hayes, PLLC</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>Microsoft Corporation</orgname>
<role>02</role>
<address>
<city>Redmond</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Flynn</last-name>
<first-name>Nathan</first-name>
<department>2431</department>
</primary-examiner>
<assistant-examiner>
<last-name>Wright</last-name>
<first-name>Bryan</first-name>
</assistant-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">Scalable session management is achieved by generating a cookie that includes an encrypted session key and encrypted cookie data. The cookie data is encrypted using the session key. The session key is then signed and encrypted using one or more public/private key pairs. The encrypted session key can be decrypted and verified using the same private/public key pair(s). Once verified, the decrypted session key can then be used to decrypt and verify the encrypted cookie data. A first server having the private/public key pair(s) may generate the cookie using a randomly generated session key. A second server having the same private/public key pair(s) may decrypt and verify the cookie even if the session key is not initially installed on the second server. A session key cache may be used to provide session key lookup to save public/private key operations on the servers.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="196.93mm" wi="167.89mm" file="US08626929-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="236.22mm" wi="178.56mm" file="US08626929-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="249.77mm" wi="193.38mm" file="US08626929-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="249.43mm" wi="191.43mm" file="US08626929-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="208.53mm" wi="179.58mm" file="US08626929-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="248.07mm" wi="195.75mm" file="US08626929-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="249.43mm" wi="185.84mm" file="US08626929-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="251.71mm" wi="191.77mm" file="US08626929-20140107-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?RELAPP description="Other Patent Relations" end="lead"?>
<heading id="h-0001" level="1">RELATED APPLICATION</heading>
<p id="p-0002" num="0001">This application is a continuation of, and claims priority to U.S. patent application Ser. No. 11/084,051 to Jiang, et al., entitled, &#x201c;Scalable Session Management&#x201d;, filed on Mar. 18, 2005 and issued under U.S. Pat. No. 7,890,634 on Feb. 15, 2011, which is incorporated herein by reference.</p>
<?RELAPP description="Other Patent Relations" end="tail"?>
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0002" level="1">TECHNICAL FIELD</heading>
<p id="p-0003" num="0002">This invention relates to session management, and more specifically, to scalable session management.</p>
<heading id="h-0003" level="1">BACKGROUND</heading>
<p id="p-0004" num="0003">When a user browses to a website, the website can return data, known as a cookie, that is stored on the user's computer, and then sent back to the server when the user later browses to the same website. The cookie can be used by the website to establish a state associated with the user. For example, with a website through which a user can make purchases, a cookie may be used to maintain a list of items that are in the user's shopping cart. For example, a user may visit the website, add things to their shopping cart, and leave the website. When the user returns to the website, the previously added items are still in the user's shopping cart, based on data stored in a cookie. Because cookies may contain sensitive and/or personal data (e.g., data for providing access to a bank account), it is important that cookies be protected. Cookies are typically signed and/or encrypted to protect the data. Furthermore, to increase security, keys that are used to sign and/or encrypt cookies should be securely stored and frequently changed.</p>
<p id="p-0005" num="0004">Many websites are implemented using a server farm environment, in which the load is balanced across multiple, independent server systems. When a user accesses a particular website that is available via the server farm, the user may actually be accessing any of the server systems that are part of the server farm. Accordingly, for cookies to be effective, each server system should be able to receive and use a cookie from a user, even if the server that receives the cookie is not the server that generated the cookie. To accomplish this, secure, frequently changed keys that can be used to decrypt and/or verify received cookies should be available across multiple, independent server systems.</p>
<p id="p-0006" num="0005">Accordingly, a need exists for a technique for automatically making symmetric keys accessible to multiple, independent server systems.</p>
<heading id="h-0004" level="1">SUMMARY</heading>
<p id="p-0007" num="0006">Scalable session management is described herein.</p>
<p id="p-0008" num="0007">The techniques described herein enable multiple severs with the same private/public key pairs to derive the same symmetric keys. Public key management, which is relatively easy to manage across multiple servers using, for example, widespread hardware support, is combined with the efficiency of symmetric cryptography, enabling an arbitrary combination of signature and encryption algorithms.</p>
<p id="p-0009" num="0008">In the described exemplary implementation, one or more private/public key pairs are installed on multiple servers in a server farm. When a cookie is generated by one of the servers for a particular client, the cookie data is encrypted using a session key, which may be randomly generated. The session key is then signed and encrypted using one or more of the private/public key pairs and transmitted to the client along with the encrypted cookie data. When the same client establishes a connection with any of the servers in the server farm and sends the cookie, the server uses the private/public key pair(s) to decrypt and verify the session key that was included with the cookie. Once verified, the session key is then used to decrypt the cookie data.</p>
<p id="p-0010" num="0009">In an exemplary implementation, the first server also applies a message authentication code (MAC) to the cookie data and the session key to generate an authentication tag that can later be used to authenticate the decrypted cookie data.</p>
<p id="p-0011" num="0010">A session key may also have an associated expiration date/time, after which the any cookie generated using the session key is no longer valid. Session keys may be cached by one or more servers in the server farm, and expired session keys may be purged from the cache periodically. For example, an expired session key may be purged from the cache when a cookie including the expired session key is received. Alternatively, the cache may be purged of expired session keys iteratively according to a configured time schedule, after a configured number of cookies have been received, and/or after a configured number of session keys have been added to the cache.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0005" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0012" num="0011">The same numbers are used throughout the drawings to reference like features and components.</p>
<p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. 1</figref> is a pictorial diagram illustrating an exemplary network environment in which scalable session management may be implemented.</p>
<p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. 2</figref> is a block diagram illustrating exemplary generation of a session cookie.</p>
<p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. 3</figref> is a block diagram illustrating decryption and verification of a received session cookie.</p>
<p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. 4</figref> is a block diagram of selected components of an exemplary server configured to enable scalable session management.</p>
<p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. 5</figref> is a flow diagram of an exemplary method for generating an encrypted session cookie.</p>
<p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. 6</figref> is a flow diagram of an exemplary method for decrypting and verifying a received cookie.</p>
<p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. 7</figref> is a pictorial/block diagram of exemplary computing systems, devices, and components in an environment in which scalable session management may be implemented.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0006" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0020" num="0019">The following discussion is directed to scalable session management. In many client-server systems, data associated with a particular session may be generated by the server and stored on the client. This data is commonly referred to as a &#x201c;cookie&#x201d;. The cookie may later be sent back to the server, for example, to enable the state of the previous session to be recreated. Because cookies may include sensitive data (e.g., a cookie may be associated with a user's bank account information), it is important that the confidentiality and integrity of cookies be maintained. Cookie confidentiality ensures that the data stored in a cookie cannot be easily determined, while cookie integrity ensures that the data stored in a cookie cannot be tampered with. In the described exemplary implementation, confidentiality is achieved by encrypting the data to be stored in the cookie; integrity is achieved by signing a key used to encrypt the cookie data and applying a message authentication code to the cookie data. In this way, the cookie data and the encryption key can both be verified.</p>
<p id="p-0021" num="0020">To enable multiple, independent server systems to be able to decrypt and/or verify received data (e.g., a cookie), an encrypted symmetric key is carried with an encrypted session token. When a server receives an encrypted token with an encrypted symmetric key, the server decrypts the encrypted symmetric key, which can then be used to decrypt the encrypted token.</p>
<p id="p-0022" num="0021">While features of scalable session management can be implemented in any number of different computing environments, they are described in the context of the following exemplary implementations.</p>
<p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. 1</figref> illustrates an exemplary network environment in which scalable session management may be implemented. In the illustrated example, server farm <b>102</b> includes multiple independent servers <b>104</b>(<b>1</b>), <b>104</b>(<b>2</b>), . . . , <b>104</b>(N). Client system <b>106</b> communicates with server farm <b>102</b> over a network <b>108</b>, such as the Internet. For example, client system <b>106</b> may utilize a web browser to access a website provided by server farm <b>102</b>. In the illustrated example, client system <b>106</b> accesses the website via server <b>104</b>(<b>1</b>), as represented by arrow <b>110</b>. Server <b>104</b>(<b>1</b>) returns an encrypted cookie, as represented by arrow <b>112</b>. At a later time, client system <b>106</b> accesses the website again, but this time via server <b>104</b>(N). As represented by arrow <b>114</b>, the cookie that was generated by server <b>104</b>(<b>1</b>) is transmitted to server <b>104</b>(N), which utilizes the data in the cookie, for example, to re-establish a website state that the user experienced in a previous interaction with the website. A network server <b>104</b> and/or client system <b>106</b> may be implemented as any form of computing or electronic device with any number and combination of differing components as described below with reference to the exemplary computing environment <b>700</b> shown in <figref idref="DRAWINGS">FIG. 7</figref>.</p>
<p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. 2</figref> illustrates exemplary processing that may be performed by a server <b>104</b> to generate a cookie. Server <b>104</b> maintains private/public key pairs, two of which are identified in <figref idref="DRAWINGS">FIG. 2</figref> by key ID<b>1</b> <b>202</b>(<b>1</b>) and key ID<b>2</b> <b>202</b>(<b>2</b>). In an exemplary implementation, server <b>104</b> may maintain one or more private/public key pairs that may be used, for example, to encrypt, decrypt, sign, and/or verify different types of data. The illustrated private/public key pairs <b>202</b>(<b>1</b>) and <b>202</b>(<b>2</b>) include private key <b>204</b>(<b>1</b>), public key <b>206</b> (<b>1</b>), private key <b>204</b>(<b>2</b>), and public key <b>206</b>(<b>2</b>).</p>
<p id="p-0025" num="0024">When client system <b>106</b> contacts server <b>104</b>, as represented by arrow <b>208</b>, server <b>104</b> generates cookie data (D) <b>210</b>. Cookie data (D) <b>210</b> includes, for example, state information associated with a session between server <b>104</b> and client system <b>106</b>. The state information may include personal settings, shopping cart contents, and the like. Server <b>104</b> also generates or identifies a session key (K) <b>212</b> that can be used as an encryption key. In an exemplary implementation, session key (K) <b>212</b> is a randomly generated value that may expire after a configurable period of time. After one session key expires, server <b>104</b> may randomly generate a new session key.</p>
<p id="p-0026" num="0025">Cookie data (D) <b>210</b> is then encrypted using session key (K) <b>212</b> to generate encrypted cookie data K(D) <b>214</b>. A message authentication code (MAC) is applied to cookie data (D) and session key (K) to generate an authentication tag MAC(D,K) <b>216</b>. Any type of message authentication code may be used to generate the authentication tag, one example being a hash function-based message authentication code (HMAC).</p>
<p id="p-0027" num="0026">In an alternate implementation, the authentication tag MAC(D,K) <b>216</b> may be generated prior to encrypting the cookie data (D). The authentication tag and the cookie data may then be encrypted together using the session key (K), to generated encrypted data K(D, MAC(D,K)).</p>
<p id="p-0028" num="0027">In another alternate implementation, the authentication tag may be generated using a MAC key that differs from the session key (K). Although the described implementation uses the session key (K) when generating the authentication tag, it is common cryptographic practice to use different keys for different purposes. As one example, a new key to be used for generating the authentication tag may be derived from the session key (K) according to any number of known key derivation techniques.</p>
<p id="p-0029" num="0028">Server <b>104</b> signs session key (K) <b>212</b> with private key <b>204</b>(<b>1</b>) to generate Sig(K) <b>218</b>. Session key (K) <b>212</b> is then combined with Sig(K) <b>218</b> and encrypted using public key <b>206</b>(<b>2</b>) to generate encrypted, signed key ESK <b>220</b>.</p>
<p id="p-0030" num="0029">A cookie <b>222</b> is then generated by combining key ID<b>1</b> <b>202</b>(<b>1</b>), key ID<b>2</b> <b>202</b>(<b>2</b>), ESK <b>220</b>, K(D) <b>214</b>, and MAC(D,K) <b>216</b>. Cookie <b>222</b> is then transmitted to client system <b>106</b>, as represented by arrow <b>224</b>. If the authentication tag is encrypted with the cookie data, the cookie may include K(D, MAC(D,K)), which could later be decrypted to reveal cookie data (D) <b>210</b> and authentication tag MAC(D,K) <b>216</b>.</p>
<p id="p-0031" num="0030">Two private/public key pairs may be used due to the size of the data that is being signed and/or encrypted. For example, the block size needed for encryption may be larger than the block size needed for signing. However, in an alternate implementation, encrypted, signed key ESK <b>220</b> may be encrypted using public key <b>206</b>(<b>1</b>), resulting in a cookie that includes key ID<b>1</b>, but does not necessarily include key ID<b>2</b>.</p>
<p id="p-0032" num="0031"><figref idref="DRAWINGS">FIG. 3</figref> illustrates exemplary processing that may be performed by a server <b>104</b> to decrypt and verify a received cookie. When server <b>104</b> receives a cookie <b>302</b> from a client system <b>106</b>, server <b>104</b> parses the cookie <b>302</b> into a key ID<b>1</b> <b>304</b>, key ID<b>2</b> <b>306</b>, an encrypted signed key (ESK) <b>308</b>, encrypted data K(D) <b>310</b>, and authentication tag MAC(D,K) <b>312</b>.</p>
<p id="p-0033" num="0032">Key ID<b>1</b> <b>304</b> is used to lookup a private/public key pair <b>314</b> that includes a private key <b>316</b> and a public key <b>318</b>. Key ID<b>2</b> <b>306</b> is used to lookup a private/public key pair <b>320</b> that includes a private key <b>322</b> and a public key <b>324</b>. Private key <b>322</b> is then used to decrypt ESK <b>308</b>, resulting in decrypted ESK <b>326</b>, which includes signed key Sig(K) <b>328</b> and session key (K) <b>330</b>. To verify that the session key in the cookie was not tampered with, Sig(K) is verified using public key <b>318</b>. If the verification failed, indicating that Sig(K) is not a valid signature of session key (K) using private key <b>316</b>, then the cookie is assumed to be invalid.</p>
<p id="p-0034" num="0033">The decrypted and verified session key (K) <b>330</b> is then used to decrypt K(D) <b>310</b> to reveal cookie data (D) <b>332</b>. As described above with reference to <figref idref="DRAWINGS">FIG. 2</figref>, in an alternate implementation, the cookie data and the authentication tag may have been encrypted together, in which case, the cookie may be parsed into a key ID<b>1</b> <b>304</b>, key ID<b>2</b> <b>306</b>, an encrypted signed key (ESK) <b>308</b>, and encrypted data and authentication tag K(D, MAC(D,K)). The encrypted data and authentication tag K(D, MAC(D,K)) can then be decrypted using the decrypted and verified session key (K) <b>330</b> to identify cookie data (D) <b>332</b> and authentication tag MAC(D,K) <b>312</b>.</p>
<p id="p-0035" num="0034">A message authentication code (MAC) is then applied to cookie data (D) <b>332</b> and session key (K) <b>330</b> to generate verification MAC(D,K) <b>334</b>. Verification MAC(D,K) <b>334</b> is then compared to MAC(D,K) <b>312</b> to verify that the cookie data (D) <b>332</b> is not corrupt.</p>
<p id="p-0036" num="0035">If verifications of Sig(K) MAC(D,K) are successful, then the cookie data is successfully decrypted and verified and can be used to customize the session between server <b>104</b> and client system <b>106</b>.</p>
<p id="p-0037" num="0036">In an exemplary implementation, session key (K) <b>330</b> may include an expiration date/time. If the received session key has expired, then the server does not use the cookie, but rather establishes a connection with client system <b>106</b> that is not based on a state of a previous connection.</p>
<p id="p-0038" num="0037">Furthermore, as described above with reference to <figref idref="DRAWINGS">FIG. 2</figref>, in an alternate implementation, the received cookie may include only one key ID, and the same private/public key pair may be used for decryption and verification of the session key and cookie data.</p>
<p id="p-0039" num="0038"><figref idref="DRAWINGS">FIG. 4</figref> illustrates select components of an exemplary server <b>104</b> configured to enable scalable session management as described herein. Server <b>104</b> may be implemented as any form of computing or electronic device with any number and combination of differing components as described below with reference to the exemplary computing environment <b>700</b> shown in <figref idref="DRAWINGS">FIG. 7</figref>.</p>
<p id="p-0040" num="0039">Server <b>104</b> includes one or more processors <b>402</b>, network interface <b>404</b>, and memory <b>406</b>. Network interface <b>404</b> enables server <b>104</b> to send and/or receive data over a network. One or more applications <b>408</b>, an operating system <b>410</b>, scalable session management module <b>412</b>, and session key cache <b>414</b> are stored in memory <b>406</b> and executed on processor(s) <b>402</b>. Application(s) <b>408</b> may include, for example, a web service <b>416</b> that enables user interaction with a website.</p>
<p id="p-0041" num="0040">Operating system <b>410</b> includes, among other components, a private/public key store <b>418</b> and cryptography module <b>420</b>. Private/public key store <b>418</b> is configured to maintain one or more private/public key pairs, each identified by a unique key ID. Cryptography module <b>420</b> is configured to perform various cryptographic functions, which may include, but are not limited to, private/public key encryption and decryption, private/public key signing and verifying, random value generation, symmetric key encryption and decryption, and authentication tag generation via a message authentication code.</p>
<p id="p-0042" num="0041">Scalable session management module <b>412</b> is configured to generate encrypted cookies and to decrypt and verify received cookies. Session key cache <b>414</b> is configured to maintain one or more session keys and an associated encrypted signed key (ESK). Session key cache <b>414</b> may also be configured to maintain an expiration date/time associated with a particular session key. In such an implementation, expired session keys may be removed from the session key cache <b>414</b> using any number of techniques. For example, if a request is received that includes an expired key, the key may then be removed from the cache. In another implementation, the cache may be purged of expired keys iteratively, after a configurable number of requests are received. In yet another implementation, the cache may be purged of expired keys iteratively, after a configurable number of sessions keys have been added to the cache.</p>
<p id="p-0043" num="0042">Methods for scalable session management may be described in the general context of computer executable instructions. Generally, computer executable instructions include routines, programs, objects, components, data structures, procedures, and the like that perform particular functions or implement particular abstract data types. The methods may also be practiced in a distributed computing environment where functions are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, computer executable instructions may be located in both local and remote computer storage media, including memory storage devices.</p>
<p id="p-0044" num="0043"><figref idref="DRAWINGS">FIGS. 5 and 6</figref> illustrate exemplary methods for implementing scalable session management. The methods illustrated in <figref idref="DRAWINGS">FIGS. 5 and 6</figref> are specific examples of scalable session management, and are not to be construed as limitations. Furthermore, it is recognized that various embodiments may implement any combination of the methods illustrated in <figref idref="DRAWINGS">FIGS. 5 and 6</figref> or any combination of portions of the methods illustrated in <figref idref="DRAWINGS">FIGS. 5 and 6</figref>.</p>
<p id="p-0045" num="0044"><figref idref="DRAWINGS">FIG. 5</figref> illustrates an exemplary method <b>500</b> for generating an encrypted data cookie. The order in which the method is described is not intended to be construed as a limitation, and any number of the described method blocks can be combined in any order to implement the method. Furthermore, the method can be implemented in any suitable hardware, software, firmware, or combination thereof.</p>
<p id="p-0046" num="0045">At block <b>502</b>, a server determines that a user has accessed the server. For example, referring to <figref idref="DRAWINGS">FIG. 4</figref>, a user may have browsed to a website hosted by the server <b>104</b> and launched web service <b>416</b>.</p>
<p id="p-0047" num="0046">At block <b>504</b>, the server generates cookie data (D) associated with the current session. For example, web service <b>416</b> may generate data that represents the user's shopping cart contents on a web commerce website.</p>
<p id="p-0048" num="0047">At block <b>506</b>, the server determines whether or not a session key (K) is available. For example, one or more session keys may be maintained in session key cache <b>414</b>. If a valid session key is available in session key cache <b>414</b> (the &#x201c;Yes&#x201d; branch from block <b>506</b>), then at block <b>516</b>, scalable session management module <b>412</b> identifies a valid session key (K) and associated encrypted signed key (ESK) (e.g., by pulling a valid record from session key cache <b>414</b>). Processing then continues as described below with reference to block <b>518</b>.</p>
<p id="p-0049" num="0048">On the other hand, if a valid session key is not currently available (the &#x201c;No&#x201d; branch from block <b>506</b>), then at block <b>508</b>, server <b>104</b> generates a new session key (K). For example, scalable session management module <b>412</b> may call a random value generator component of cryptography module <b>420</b> to obtain a random value to be used as a session key (K).</p>
<p id="p-0050" num="0049">At block <b>510</b>, the server uses a private key to sign session key (K), generating a new value Sig(K). For example, scalable session management module <b>412</b> may call a private key signature component of cryptography module <b>420</b>, specifying the session key (K) and a key ID (e.g., Key ID<b>1</b> <b>202</b>(<b>1</b>), as illustrated in <figref idref="DRAWINGS">FIG. 2</figref>) associated with a private/public key pair maintained in public/private key store <b>418</b>. Cryptography module <b>420</b> then uses the private key associated with the specified key ID to sign the session key (K), and returns the result Sig(K).</p>
<p id="p-0051" num="0050">At block <b>512</b>, the server generates an encrypted signed key (ESK) by using a public key to encrypt a combination of (K) and Sig(K). For example, scalable session management module <b>412</b> may call a public key encryption component of cryptography module <b>420</b>, specifying the session key (K), the signed session key Sig(K), and a key ID (e.g., Key ID<b>2</b> <b>202</b>(<b>2</b>), as illustrated in <figref idref="DRAWINGS">FIG. 2</figref>) associated with a public/private key pair maintained in public/private key store <b>418</b>. Cryptograhpy module <b>420</b> then uses the public key associated with the specified key ID (e.g., Key ID<b>2</b>) to encrypt (K+Sig(K)), and returns the result ESK. In an alternate implementation, the same private/public key pair may be specified for signing the session key (block <b>510</b>) and encrypting the signed session key (block <b>512</b>).</p>
<p id="p-0052" num="0051">At block <b>514</b>, the server caches session key (K) and encrypted signed key ESK. For example, scalable session management module <b>412</b> may add (K) and the associated ESK to session key cache <b>414</b>.</p>
<p id="p-0053" num="0052">At block <b>518</b>, the server encrypts cookie data (D) using session key (K). For example, scalable session management module <b>412</b> may call a symmetric key encryption component of cryptography module <b>420</b>, which returns encrypted cookie data K(D).</p>
<p id="p-0054" num="0053">At block <b>520</b>, the server generates an authentication tag MAC(D,K). For example, scalable session management module <b>412</b> may call cryptography module <b>420</b>, specifying cookie data (D) and session key (K). Cryptography module <b>420</b> then applies a message authentication code to cookie data (D) and session key (K), and returns authentication tag MAC(D,K).</p>
<p id="p-0055" num="0054">At block <b>522</b>, the server generates a cookie. For example, scalable session management module <b>412</b> combines key ID<b>1</b>, key ID<b>2</b>, ESK, K(D), and MAC(D,K). In an exemplary implementation, the generated cookie may have the format: (Key ID<b>1</b>, Key ID<b>2</b>, ESK, K(D), MAC(D,K)). In an alternate implementation in which a single private/public key pair is used to sign and encrypt the session key and the cookie data, the generated cookie may have the format: (Key ID, ESK, K(D), MAC(D,K)).</p>
<p id="p-0056" num="0055">In another alternate implementation, authentication tag MAC(D,K) may be generated (as described above with reference to block <b>520</b>) prior to encryption of the cookie data (D). The cookie data and the authentication tag may then be encrypted together using the session key (K), rather than the cookie data being encrypted alone, as described above with reference to block <b>518</b>.</p>
<p id="p-0057" num="0056">At block <b>524</b>, the server returns the generated cookie to the user. For example, web service <b>416</b> may transmit the generated cookie over a network to a client system through which a user accessed the web service.</p>
<p id="p-0058" num="0057"><figref idref="DRAWINGS">FIG. 6</figref> illustrates an exemplary method <b>600</b> for decrypting and verifying a received cookie. The order in which the method is described is not intended to be construed as a limitation, and any number of the described method blocks can be combined in any order to implement the method. Furthermore, the method can be implemented in any suitable hardware, software, firmware, or combination thereof.</p>
<p id="p-0059" num="0058">At block <b>602</b>, a server receives a cookie from a user. For example, a user may access a web service <b>416</b> from which the user previously received a cookie.</p>
<p id="p-0060" num="0059">At block <b>604</b>, the server parses the cookie into key ID<b>1</b>, key ID<b>2</b>, encrypted signed key (ESK), encrypted cookie data K(D) and authentication tag MAC(D,K). For example, scalable session management module <b>412</b> may receive the cookie from web service <b>416</b> and parse the cookie.</p>
<p id="p-0061" num="0060">At block <b>606</b>, the server determines whether or not the ESK is currently cached. For example, scalable session management module <b>412</b> performs a lookup in session key cache <b>414</b> based on the ESK value that was parsed from the cookie. In an exemplary implementation, the ESK value may be found in the cache if the server that received the cookie is the same server that generated the cookie (see block <b>514</b> of <figref idref="DRAWINGS">FIG. 5</figref>) or if the server that received the cookie has previously received another cookie that was encrypted using the same session key.</p>
<p id="p-0062" num="0061">If the ESK is found in the cache (the &#x201c;Yes&#x201d; branch from block <b>606</b>), then at block <b>608</b>, the server identifies a session key (K) from the cache based on the ESK. For example, scalable session management module <b>412</b> queries session key cache <b>414</b> using the ESK to determine the session key (K). Processing then continues as described below with reference to block <b>624</b>.</p>
<p id="p-0063" num="0062">If the ESK is not found in the cache (the &#x201c;No&#x201d; branch from block <b>606</b>), then at block <b>610</b>, the server identifies two public/private key pairs based on the key ID <b>1</b> and key ID<b>2</b> extracted from the cookie. For example, scalable session management module may query private/public key store <b>418</b> using key ID <b>1</b> and key ID<b>2</b> to identify the private/public key pairs.</p>
<p id="p-0064" num="0063">At block <b>612</b>, the server decrypts the ESK using the private key of the identified private/public key pair associated with key ID<b>2</b>. For example, scalable session management module <b>412</b> may call a private key decryption component of cryptography module <b>420</b>, specifying ESK and the private key (or key ID<b>2</b>, which can be used to lookup the private key). Cryptography module <b>420</b> uses the private key to decrypt the ESK, returning the result to scalable session management module <b>412</b>.</p>
<p id="p-0065" num="0064">At block <b>614</b>, the server (e.g., scalable session management module <b>412</b>) parses the decrypted ESK to identify session key (K) and signed session key Sig(K).</p>
<p id="p-0066" num="0065">At block <b>616</b>, the server verifies Sig(K) using the public key associated with key ID<b>1</b> found in the cookie. For example, scalable session management module <b>412</b> calls a signature component of cryptography module <b>420</b>, specifying session key (K), signature of the session key (Sign(K)) (both extracted from the decrypted ESK as described above with reference to blocks <b>612</b> and <b>614</b>) and the public key (or key ID<b>1</b>, which can be used to lookup the public key in private/public key store <b>418</b>). Cryptography module <b>420</b> verifies the signature using the specified public key.</p>
<p id="p-0067" num="0066">At block <b>618</b>, the server determines whether or not the signed session key was successfully verified. If the signature is invalid (the &#x201c;No&#x201d; branch from block <b>618</b>), then at block <b>620</b>, scalable session management module generates an error message that directs web service <b>416</b> to not accept the cookie.</p>
<p id="p-0068" num="0067">On the other hand, if the signature is valid (the &#x201c;Yes&#x201d; branch from block <b>618</b>), then at block <b>622</b>, scalable session management module caches ESK and (K) in session key cache <b>414</b>.</p>
<p id="p-0069" num="0068">At block <b>624</b>, the server decrypts K(D) using session key (K). For example, scalable session management module <b>412</b> may call a symmetric key decryption component of cryptography module <b>420</b>, specifying K(D) and (K). Cryptography module <b>420</b> decrypts K(D) using K as the key, and returns cookie data (D) to scalable session management module <b>412</b>. In an alternate implementation in which the cookie data D and the authentication tag MAC(D,K) were encrypted together, the session key is used to decrypt the combination of the cookie data and the authentication tag. The result is then parsed to identify the cookie data (D) and the authentication tag MAC(D,K).</p>
<p id="p-0070" num="0069">At block <b>626</b>, the server verifies cookie data (D) by generating a authentication tag verification MAC(D,K). For example, scalable session management module <b>412</b> may call cryptography module <b>420</b>, specifying cookie data (D) and session key (K). Cryptography module <b>420</b> then applies a message authentication code to cookie data (D) and session key (K), and returns authentication tag verification MAC(D,K).</p>
<p id="p-0071" num="0070">At block <b>628</b>, the server determines whether or not the values of MAC(D,K) and verified MAC(D,K) match. If the values do not match (the &#x201c;No&#x201d; branch from block <b>628</b>), then at block <b>620</b>, scalable session management module <b>412</b> generates an error message that directs web service <b>416</b> to not accept the cookie.</p>
<p id="p-0072" num="0071">On the other hand, if the values do match (the &#x201c;Yes&#x201d; branch from block <b>628</b>), then at block <b>630</b>, scalable session management module <b>412</b> sends cookie data (D) to web service <b>416</b>, indicating that the cookie data has been decrypted and verified.</p>
<p id="p-0073" num="0072">In an alternate implementation, the received cookie may include only one key ID, rather than key ID<b>1</b> and key ID<b>2</b>. In such an implementation, the same private/public key pair is used to decrypt and verify the session key and the cookie data.</p>
<p id="p-0074" num="0073"><figref idref="DRAWINGS">FIG. 7</figref> illustrates an exemplary computing environment <b>700</b> within which scalable session management systems and methods, as well as the computing, network, and system architectures described herein, can be either fully or partially implemented. Exemplary computing environment <b>700</b> is only one example of a computing system and is not intended to suggest any limitation as to the scope of use or functionality of the architectures. Neither should the computing environment <b>700</b> be interpreted as having any dependency or requirement relating to any one or combination of components illustrated in the exemplary computing environment <b>700</b>.</p>
<p id="p-0075" num="0074">The computer and network architectures in computing environment <b>700</b> can be implemented with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems, environments, and/or configurations that may be suitable for use include, but are not limited to, personal computers, server computers, client devices, hand-held or laptop devices, microprocessor-based systems, multiprocessor systems, set top boxes, programmable consumer electronics, network PCs, minicomputers, mainframe computers, gaming consoles, distributed computing environments that include any of the above systems or devices, and the like.</p>
<p id="p-0076" num="0075">The computing environment <b>700</b> includes a general-purpose computing system in the form of a computing device <b>702</b>. The components of computing device <b>702</b> can include, but are not limited to, one or more processors <b>704</b> (e.g., any of microprocessors, controllers, and the like), a system memory <b>706</b>, and a system bus <b>708</b> that couples the various system components. The one or more processors <b>704</b> process various computer executable instructions to control the operation of computing device <b>702</b> and to communicate with other electronic and computing devices. The system bus <b>708</b> represents any number of several types of bus structures, including a memory bus or memory controller, a peripheral bus, an accelerated graphics port, and a processor or local bus using any of a variety of bus architectures.</p>
<p id="p-0077" num="0076">Computing environment <b>700</b> includes a variety of computer readable media which can be any media that is accessible by computing device <b>702</b> and includes both volatile and non-volatile media, removable and non-removable media. The system memory <b>706</b> includes computer readable media in the form of volatile memory, such as random access memory (RAM) <b>710</b>, and/or non-volatile memory, such as read only memory (ROM) <b>712</b>. A basic input/output system (BIOS) <b>714</b> maintains the basic routines that facilitate information transfer between components within computing device <b>702</b>, such as during start-up, and is stored in ROM <b>712</b>. RAM <b>710</b> typically contains data and/or program modules that are immediately accessible to and/or presently operated on by one or more of the processors <b>704</b>.</p>
<p id="p-0078" num="0077">Computing device <b>702</b> may include other removable/non-removable, volatile/non-volatile computer storage media. By way of example, a hard disk drive <b>716</b> reads from and writes to a non-removable, non-volatile magnetic media (not shown), a magnetic disk drive <b>718</b> reads from and writes to a removable, non-volatile magnetic disk <b>720</b> (e.g., a &#x201c;floppy disk&#x201d;), and an optical disk drive <b>722</b> reads from and/or writes to a removable, non-volatile optical disk <b>724</b> such as a CD-ROM, digital versatile disk (DVD), or any other type of optical media. In this example, the hard disk drive <b>716</b>, magnetic disk drive <b>718</b>, and optical disk drive <b>722</b> are each connected to the system bus <b>708</b> by one or more data media interfaces <b>726</b>. The disk drives and associated computer readable media provide non-volatile storage of computer readable instructions, data structures, program modules, and other data for computing device <b>702</b>.</p>
<p id="p-0079" num="0078">Any number of program modules can be stored on RAM <b>710</b>, ROM <b>712</b>, hard disk <b>716</b>, magnetic disk <b>720</b>, and/or optical disk <b>724</b>, including by way of example, an operating system <b>728</b>, one or more application programs <b>730</b>, other program modules <b>732</b>, and program data <b>734</b>. Each of such operating system <b>728</b>, application program(s) <b>730</b>, other program modules <b>732</b>, program data <b>734</b>, or any combination thereof, may include one or more embodiments of the systems and methods described herein.</p>
<p id="p-0080" num="0079">Computing device <b>702</b> can include a variety of computer readable media identified as communication media. Communication media typically embodies computer readable instructions, data structures, program modules, or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term &#x201c;modulated data signal&#x201d; refers to a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation, communication media includes wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared, other wireless media, and/or any combination thereof.</p>
<p id="p-0081" num="0080">A user can interface with computing device <b>702</b> via any number of different input devices such as a keyboard <b>736</b> and pointing device <b>738</b> (e.g., a &#x201c;mouse&#x201d;). Other input devices <b>740</b> (not shown specifically) may include a microphone, joystick, game pad, controller, satellite dish, serial port, scanner, and/or the like. These and other input devices are connected to the processors <b>704</b> via input/output interfaces <b>742</b> that are coupled to the system bus <b>708</b>, but may be connected by other interface and bus structures, such as a parallel port, game port, and/or a universal serial bus (USB).</p>
<p id="p-0082" num="0081">A display device <b>744</b> (or other type of monitor) can be connected to the system bus <b>708</b> via an interface, such as a video adapter <b>746</b>. In addition to the display device <b>744</b>, other output peripheral devices can include components such as speakers (not shown) and a printer <b>748</b> which can be connected to computing device <b>702</b> via the input/output interfaces <b>742</b>.</p>
<p id="p-0083" num="0082">Computing device <b>702</b> can operate in a networked environment using logical connections to one or more remote computers, such as remote computing device <b>750</b>. By way of example, remote computing device <b>750</b> can be a personal computer, portable computer, a server, a router, a network computer, a peer device or other common network node, and the like. The remote computing device <b>750</b> is illustrated as a portable computer that can include any number and combination of the different components, elements, and features described herein relative to computing device <b>702</b>.</p>
<p id="p-0084" num="0083">Logical connections between computing device <b>702</b> and the remote computing device <b>750</b> are depicted as a local area network (LAN) <b>752</b> and a general wide area network (WAN) <b>754</b>. Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets, and the Internet. When implemented in a LAN networking environment, the computing device <b>702</b> is connected to a local network <b>752</b> via a network interface or adapter <b>756</b>. When implemented in a WAN networking environment, the computing device <b>702</b> typically includes a modem <b>758</b> or other means for establishing communications over the wide area network <b>754</b>. The modem <b>758</b> can be internal or external to computing device <b>702</b>, and can be connected to the system bus <b>708</b> via the input/output interfaces <b>742</b> or other appropriate mechanisms. The illustrated network connections are merely exemplary and other means of establishing communication link(s) between the computing devices <b>702</b> and <b>750</b> can be utilized.</p>
<p id="p-0085" num="0084">In a networked environment, such as that illustrated with computing environment <b>700</b>, program modules depicted relative to the computing device <b>702</b>, or portions thereof, may be stored in a remote memory storage device. By way of example, remote application programs <b>760</b> are maintained with a memory device of remote computing device <b>750</b>. For purposes of illustration, application programs and other executable program components, such as operating system <b>728</b>, are illustrated herein as discrete blocks, although it is recognized that such programs and components reside at various times in different storage components of the computing device <b>702</b>, and are executed by the one or more processors <b>704</b> of the computing device <b>702</b>.</p>
<p id="p-0086" num="0085">Although embodiments of scalable session management have been described in language specific to structural features and/or methods, it is to be understood that the subject of the appended claims is not necessarily limited to the specific features or methods described. Rather, the specific features and methods are disclosed as exemplary implementations of scalable session management.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>The invention claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A method comprising:
<claim-text>identifying cookie data;</claim-text>
<claim-text>encrypting the cookie data using a session key to generate encrypted cookie data;</claim-text>
<claim-text>signing the session key using a first key having a first key identifier to generate a signed session key;</claim-text>
<claim-text>encrypting the signed session key using a second key having a second key identifier to generate an encrypted signed key;</claim-text>
<claim-text>applying a message authentication code to the cookie data and the session key to generate an authentication tag; and</claim-text>
<claim-text>combining the first key identifier, the second key identifier, the encrypted signed key, the encrypted cookie data, and the authentication tag to form a cookie.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. A method as recited in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein identifying cookie data comprises generating the cookie data.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. A method as recited in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the session key is associated with an established session between a server and a client.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. A method as recited in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein:
<claim-text>signing the session key using a first key to generate a signed session key includes signing the session key using a private key to generate the signed session key; and</claim-text>
<claim-text>encrypting the signed session key using a second key to generate a signed session key includes encrypting the signed session key with a public key to generate the encrypted signed key.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. A method as recited in <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein:
<claim-text>the private key is associated with a first private/public key pair having the first key identifier; and</claim-text>
<claim-text>the public key is associated with a second private/public key pair having the second key identifier.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. A method as recited in <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising maintaining the session key in association with the encrypted signed key.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. A method comprising:
<claim-text>maintaining a store of private/public key pairs;</claim-text>
<claim-text>signing and encrypting a session key using a private/public key pair to generate an encrypted signed key; and</claim-text>
<claim-text>maintaining, in a session key cache, the session key in association with the encrypted signed key;</claim-text>
<claim-text>receiving a data cookie from a client;</claim-text>
<claim-text>parsing the data cookie to identify a key ID, a received encrypted signed key, and encrypted cookie data;</claim-text>
<claim-text>searching the session key cache for a session key based on the received encrypted signed key;</claim-text>
<claim-text>in an event that the session key based on the received encrypted signed key is found in the session key cache, decrypting the encrypted cookie data using the session key based on the received encrypted signed key, resulting in cookie data; and</claim-text>
<claim-text>in an event that the session key based on the received encrypted signed key is not found in the session key cache:
<claim-text>searching the store of private/public key pairs based on the key ID to identify a private key and a public key;</claim-text>
<claim-text>decrypting the received encrypted signed key using the private key, resulting in a received session key and a received signed session key; and</claim-text>
<claim-text>decrypting the encrypted cookie data using the received session key, resulting in the cookie data.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. A method as recited in <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein signing and encrypting the session key using a private/public key pair comprises:
<claim-text>signing the session key using a private key to generate a signed session key; and</claim-text>
<claim-text>encrypting the session key and the signed session key with a public key to generate the encrypted signed key.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. A method as recited in <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein:
<claim-text>the private key is associated with a first private/public key pair; and</claim-text>
<claim-text>the public key is associated with a second private/public key pair.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. A system comprising:
<claim-text>a memory;</claim-text>
<claim-text>a processor;</claim-text>
<claim-text>a session management module, executed on the processor, to:
<claim-text>identify a session key associated with an established session between the system and a client device;</claim-text>
<claim-text>sign the session key with a private key associated with a first private/public key pair, generating a signed session key;</claim-text>
<claim-text>encrypt the session key and the signed session key with a public key associated with a second private/public key pair, generating an encrypted signed session key;</claim-text>
<claim-text>encrypt cookie data with the session key to generate encrypted cookie data; and</claim-text>
<claim-text>generate an authentication tag by applying a message authentication code to the cookie data and the session key.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. A system as recited in <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the first private/public key pair is obtained from a private/public key store.</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. A system as recited in <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the second private/public key pair is obtained from the private/public key store.</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. A system as recited in <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the first private/public key pair and the second private/public key pair are the same private/public key pair.</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. A system as recited in <claim-ref idref="CLM-00010">claim 10</claim-ref>, further comprising a session key cache to maintain the session key in association with the encrypted signed session key.</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. A system as recited in <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the session management module is further executed on the processor to:
<claim-text>generate a cookie by combining a first key ID associated with the first private/public key pair, a second key ID associated with the second private/public key pair, the encrypted signed key, the encrypted cookie data, and the authentication tag; and</claim-text>
<claim-text>transmit the cookie from the system to the client device.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. A system as recited in <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the message authentication code is based on a hash function.</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. A method as recited in <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein encrypting the signed session key using a second key to generate a signed session key further includes encrypting the session key with the public key.</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. A method as recited in <claim-ref idref="CLM-00006">claim 6</claim-ref>, wherein maintaining the session key in association with the encrypted signed key comprises maintaining a session key cache. </claim-text>
</claim>
</claims>
</us-patent-grant>

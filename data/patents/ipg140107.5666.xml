<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08626767-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08626767</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>13909065</doc-number>
<date>20130603</date>
</document-id>
</application-reference>
<us-application-series-code>13</us-application-series-code>
<us-term-of-grant>
<disclaimer>
<text>This patent is subject to a terminal disclaimer.</text>
</disclaimer>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>7</main-group>
<subgroup>00</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>17</main-group>
<subgroup>30</subgroup>
<symbol-position>L</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>11</main-group>
<subgroup>14</subgroup>
<symbol-position>L</symbol-position>
<classification-value>N</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classifications-cpc>
<main-cpc>
<classification-cpc>
<cpc-version-indicator><date>20130101</date></cpc-version-indicator>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>17</main-group>
<subgroup>30412</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
<scheme-origination-code>C</scheme-origination-code>
</classification-cpc>
</main-cpc>
<further-cpc>
<classification-cpc>
<cpc-version-indicator><date>20130101</date></cpc-version-indicator>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>11</main-group>
<subgroup>1453</subgroup>
<symbol-position>L</symbol-position>
<classification-value>A</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
<scheme-origination-code>C</scheme-origination-code>
</classification-cpc>
<classification-cpc>
<cpc-version-indicator><date>20130101</date></cpc-version-indicator>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>17</main-group>
<subgroup>30156</subgroup>
<symbol-position>L</symbol-position>
<classification-value>A</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
<scheme-origination-code>C</scheme-origination-code>
</classification-cpc>
</further-cpc>
</classifications-cpc>
<classification-national>
<country>US</country>
<main-classification>707737</main-classification>
<further-classification>707736</further-classification>
<further-classification>707822</further-classification>
</classification-national>
<invention-title id="d2e51">Computer-implemented system and method for identifying near duplicate messages</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>5056021</doc-number>
<kind>A</kind>
<name>Ausborn</name>
<date>19911000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>5477451</doc-number>
<kind>A</kind>
<name>Brown et al.</name>
<date>19951200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>5488725</doc-number>
<kind>A</kind>
<name>Turtle et al.</name>
<date>19960100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>5732265</doc-number>
<kind>A</kind>
<name>Dewitt et al.</name>
<date>19980300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707999002</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>5799276</doc-number>
<kind>A</kind>
<name>Komissarchik et al.</name>
<date>19980800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>5867799</doc-number>
<kind>A</kind>
<name>Lang et al.</name>
<date>19990200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>5905863</doc-number>
<kind>A</kind>
<name>Knowles et al.</name>
<date>19990500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>5909677</doc-number>
<kind>A</kind>
<name>Broder et al.</name>
<date>19990600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>5950146</doc-number>
<kind>A</kind>
<name>Vapnik</name>
<date>19990900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>6026397</doc-number>
<kind>A</kind>
<name>Sheppard</name>
<date>20000200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>6119124</doc-number>
<kind>A</kind>
<name>Broder et al.</name>
<date>20000900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>6137911</doc-number>
<kind>A</kind>
<name>Zhilyaev</name>
<date>20001000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00013">
<document-id>
<country>US</country>
<doc-number>6148102</doc-number>
<kind>A</kind>
<name>Stolin</name>
<date>20001100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00014">
<document-id>
<country>US</country>
<doc-number>6173275</doc-number>
<kind>B1</kind>
<name>Caid et al.</name>
<date>20010100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00015">
<document-id>
<country>US</country>
<doc-number>6189002</doc-number>
<kind>B1</kind>
<name>Roitblat</name>
<date>20010200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00016">
<document-id>
<country>US</country>
<doc-number>6230155</doc-number>
<kind>B1</kind>
<name>Broder et al.</name>
<date>20010500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00017">
<document-id>
<country>US</country>
<doc-number>6240409</doc-number>
<kind>B1</kind>
<name>Aiken</name>
<date>20010500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707999003</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00018">
<document-id>
<country>US</country>
<doc-number>6263348</doc-number>
<kind>B1</kind>
<name>Kathrow et al.</name>
<date>20010700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707999203</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00019">
<document-id>
<country>US</country>
<doc-number>6292880</doc-number>
<kind>B1</kind>
<name>Beguelin et al.</name>
<date>20010900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00020">
<document-id>
<country>US</country>
<doc-number>6349296</doc-number>
<kind>B1</kind>
<name>Broder et al.</name>
<date>20020200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707999003</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00021">
<document-id>
<country>US</country>
<doc-number>6389433</doc-number>
<kind>B1</kind>
<name>Bolosky et al.</name>
<date>20020500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707749</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00022">
<document-id>
<country>US</country>
<doc-number>6421709</doc-number>
<kind>B1</kind>
<name>McCormick et al.</name>
<date>20020700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709206</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00023">
<document-id>
<country>US</country>
<doc-number>6446061</doc-number>
<kind>B1</kind>
<name>Doerre et al.</name>
<date>20020900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00024">
<document-id>
<country>US</country>
<doc-number>6453327</doc-number>
<kind>B1</kind>
<name>Nielsen</name>
<date>20020900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00025">
<document-id>
<country>US</country>
<doc-number>6480885</doc-number>
<kind>B1</kind>
<name>Olivier</name>
<date>20021100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709207</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00026">
<document-id>
<country>US</country>
<doc-number>6510406</doc-number>
<kind>B1</kind>
<name>Marchisio</name>
<date>20030100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00027">
<document-id>
<country>US</country>
<doc-number>6549957</doc-number>
<kind>B1</kind>
<name>Hanson et al.</name>
<date>20030400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>710  5</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00028">
<document-id>
<country>US</country>
<doc-number>6560597</doc-number>
<kind>B1</kind>
<name>Dhillon et al.</name>
<date>20030500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00029">
<document-id>
<country>US</country>
<doc-number>6598054</doc-number>
<kind>B2</kind>
<name>Schuetze et al.</name>
<date>20030700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00030">
<document-id>
<country>US</country>
<doc-number>6654739</doc-number>
<kind>B1</kind>
<name>Apte et al.</name>
<date>20031100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00031">
<document-id>
<country>US</country>
<doc-number>6658423</doc-number>
<kind>B1</kind>
<name>Pugh et al.</name>
<date>20031200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707999003</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00032">
<document-id>
<country>US</country>
<doc-number>6675159</doc-number>
<kind>B1</kind>
<name>Lin et al.</name>
<date>20040100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00033">
<document-id>
<country>US</country>
<doc-number>6678705</doc-number>
<kind>B1</kind>
<name>Berchtold et al.</name>
<date>20040100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707999204</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00034">
<document-id>
<country>US</country>
<doc-number>6701305</doc-number>
<kind>B1</kind>
<name>Holt et al.</name>
<date>20040300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00035">
<document-id>
<country>US</country>
<doc-number>6711585</doc-number>
<kind>B1</kind>
<name>Copperman et al.</name>
<date>20040300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00036">
<document-id>
<country>US</country>
<doc-number>6751628</doc-number>
<kind>B2</kind>
<name>Coady</name>
<date>20040600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00037">
<document-id>
<country>US</country>
<doc-number>6820081</doc-number>
<kind>B1</kind>
<name>Kawai et al.</name>
<date>20041100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707999007</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00038">
<document-id>
<country>US</country>
<doc-number>7003551</doc-number>
<kind>B2</kind>
<name>Malik</name>
<date>20060200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709206</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00039">
<document-id>
<country>US</country>
<doc-number>7020645</doc-number>
<kind>B2</kind>
<name>Bisbee et al.</name>
<date>20060300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00040">
<document-id>
<country>US</country>
<doc-number>7035903</doc-number>
<kind>B1</kind>
<name>Baldonado</name>
<date>20060400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709206</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00041">
<document-id>
<country>US</country>
<doc-number>2002/0065892</doc-number>
<kind>A1</kind>
<name>Malik</name>
<date>20020500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709206</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00042">
<document-id>
<country>US</country>
<doc-number>2002/0112008</doc-number>
<kind>A1</kind>
<name>Christenson et al.</name>
<date>20020800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709206</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00043">
<document-id>
<country>US</country>
<doc-number>2002/0120696</doc-number>
<kind>A1</kind>
<name>Mousseau et al.</name>
<date>20020800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709206</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00044">
<document-id>
<country>US</country>
<doc-number>2002/0122543</doc-number>
<kind>A1</kind>
<name>Rowen</name>
<date>20020900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>379 9301</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00045">
<document-id>
<country>US</country>
<doc-number>2002/0161788</doc-number>
<kind>A1</kind>
<name>McDonald</name>
<date>20021000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707203</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00046">
<document-id>
<country>US</country>
<doc-number>2002/0184193</doc-number>
<kind>A1</kind>
<name>Cohen</name>
<date>20021200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00047">
<document-id>
<country>US</country>
<doc-number>2004/0221295</doc-number>
<kind>A1</kind>
<name>Kawai et al.</name>
<date>20041100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>719313</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00048">
<document-id>
<country>US</country>
<doc-number>2005/0055359</doc-number>
<kind>A1</kind>
<name>Kawai et al.</name>
<date>20050300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707100</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00049">
<document-id>
<country>US</country>
<doc-number>2005/0148356</doc-number>
<kind>A1</kind>
<name>Ferguson et al.</name>
<date>20050700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>455502</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00050">
<document-id>
<country>US</country>
<doc-number>2006/0190493</doc-number>
<kind>A1</kind>
<name>Kawai et al.</name>
<date>20060800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>7071041</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00051">
<document-id>
<country>US</country>
<doc-number>2009/0307630</doc-number>
<kind>A1</kind>
<name>Kawai et al.</name>
<date>20091200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>715810</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00052">
<document-id>
<country>WO</country>
<doc-number>WO 2006/008733</doc-number>
<date>20030100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00053">
<othercit>D. Gourley, B. Totty, &#x201c;HTTP, The Definite Guide,&#x201d; pp. 288-299, O'Reilly and Associates, Inc., Sebastopol, CA (2002).</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00054">
<othercit>Linhui, Jiang, &#x201c;K-Mean Algorithm: Iterative Partitioning Clustering Algorithm,&#x201d;http://www.cs.regina.ca/&#x2dc;linhui/K<sub>&#x2014;</sub>mean<sub>&#x2014;</sub>algorithm.html, (2001) Computer Science Department, University of Regina, Saskatchewan, Canada.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00055">
<othercit>Kanugo et al., &#x201c;The Analysis of a Simple K-Means Clustering Algorithm,&#x201d; pp. 100-109, Proc 16th annual symposium of computational geometry (May 2000).</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00056">
<othercit>Pelleg et al., &#x201c;Accelerating Exact K-Means Algorithms With Geometric Reasoning,&#x201d; School of Computer Science, Carnegie Mellon University, Pittsburgh, Date: 1999.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00057">
<othercit>Jain et al., &#x201c;Data Clustering: A Review,&#x201d; vol. 31, No. 3, ACM Computing surveys, (Sep. 1999).</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00058">
<othercit>R. Orfali et al., &#x201c;Client/Server Survival Guide,&#x201d; Ch. 19, John Wiley &#x26; Sons, Inc. (1999 3rd ed.).</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00059">
<othercit>Christina Yip Chung et al., &#x201c;Thematic Mapping&#x2014;From Unstructured Documents to Taxonomies,&#x201d; CIKM'02, Nov. 4-9, 2002, pp. 608-610, ACM, McLean, Virginia, USA.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00060">
<othercit>Hiroyuki Kawano, &#x201c;Overview of Mondou Web Search Engine Using Text Mining and Information Visualizing Technologies,&#x201d; IEEE, 2001, pp. 234-241.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00061">
<othercit>James Osborn et al., &#x201c;JUSTICE: A Judicial Search Tool Using Intelligent Concept Extraction,&#x201d; ICAIL-99, 1999, pp. 173-181, ACM.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00062">
<othercit>Chen AN et al., &#x201c;Fuzzy Concept Graph and Application in Web Document Clustering,&#x201d; 2001, pp. 101-106, IEEE.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00063">
<othercit>&#x201c;Distribution Duplication Prevention Mechanism,&#x201d; Kenenth Mason Publications, No. 336, p. 261, Great Britain (Apr. 1992).</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>18</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>707626</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>707736</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>707737</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>707822</main-classification>
</classification-national>
<classification-cpc-text>G06F 17/30412</classification-cpc-text>
<classification-cpc-text>G06F 17/30156</classification-cpc-text>
<classification-cpc-text>G06F 11/1453</classification-cpc-text>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>22</number-of-drawing-sheets>
<number-of-figures>23</number-of-figures>
</figures>
<us-related-documents>
<continuation>
<relation>
<parent-doc>
<document-id>
<country>US</country>
<doc-number>13361900</doc-number>
<date>20120130</date>
</document-id>
<parent-grant-document>
<document-id>
<country>US</country>
<doc-number>8458183</doc-number>
</document-id>
</parent-grant-document>
</parent-doc>
<child-doc>
<document-id>
<country>US</country>
<doc-number>13909065</doc-number>
</document-id>
</child-doc>
</relation>
</continuation>
<continuation>
<relation>
<parent-doc>
<document-id>
<country>US</country>
<doc-number>12946797</doc-number>
<date>20101115</date>
</document-id>
<parent-grant-document>
<document-id>
<country>US</country>
<doc-number>8108397</doc-number>
<date>20120131</date>
</document-id>
</parent-grant-document>
</parent-doc>
<child-doc>
<document-id>
<country>US</country>
<doc-number>13361900</doc-number>
</document-id>
</child-doc>
</relation>
</continuation>
<continuation>
<relation>
<parent-doc>
<document-id>
<country>US</country>
<doc-number>12542581</doc-number>
<date>20090817</date>
</document-id>
<parent-grant-document>
<document-id>
<country>US</country>
<doc-number>7836054</doc-number>
<date>20101116</date>
</document-id>
</parent-grant-document>
</parent-doc>
<child-doc>
<document-id>
<country>US</country>
<doc-number>12946797</doc-number>
</document-id>
</child-doc>
</relation>
</continuation>
<continuation>
<relation>
<parent-doc>
<document-id>
<country>US</country>
<doc-number>11410370</doc-number>
<date>20060424</date>
</document-id>
<parent-grant-document>
<document-id>
<country>US</country>
<doc-number>7577656</doc-number>
<date>20090818</date>
</document-id>
</parent-grant-document>
</parent-doc>
<child-doc>
<document-id>
<country>US</country>
<doc-number>12542581</doc-number>
</document-id>
</child-doc>
</relation>
</continuation>
<continuation>
<relation>
<parent-doc>
<document-id>
<country>US</country>
<doc-number>10965564</doc-number>
<date>20041013</date>
</document-id>
<parent-grant-document>
<document-id>
<country>US</country>
<doc-number>7035876</doc-number>
<date>20060425</date>
</document-id>
</parent-grant-document>
</parent-doc>
<child-doc>
<document-id>
<country>US</country>
<doc-number>11410370</doc-number>
</document-id>
</child-doc>
</relation>
</continuation>
<continuation>
<relation>
<parent-doc>
<document-id>
<country>US</country>
<doc-number>10627466</doc-number>
<date>20030725</date>
</document-id>
<parent-grant-document>
<document-id>
<country>US</country>
<doc-number>6820081</doc-number>
<date>20041116</date>
</document-id>
</parent-grant-document>
</parent-doc>
<child-doc>
<document-id>
<country>US</country>
<doc-number>10965564</doc-number>
</document-id>
</child-doc>
</relation>
</continuation>
<continuation-in-part>
<relation>
<parent-doc>
<document-id>
<country>US</country>
<doc-number>09812749</doc-number>
<date>20010319</date>
</document-id>
<parent-grant-document>
<document-id>
<country>US</country>
<doc-number>6745197</doc-number>
<date>20040601</date>
</document-id>
</parent-grant-document>
</parent-doc>
<child-doc>
<document-id>
<country>US</country>
<doc-number>10627466</doc-number>
</document-id>
</child-doc>
</relation>
</continuation-in-part>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20130268610</doc-number>
<kind>A1</kind>
<date>20131010</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only" applicant-authority-category="assignee">
<addressbook>
<orgname>FTI Technology LLC</orgname>
<address>
<city>Annapolis</city>
<state>MD</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Kawai</last-name>
<first-name>Kenji</first-name>
<address>
<city>Seattle</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>McDonald</last-name>
<first-name>David T.</first-name>
<address>
<city>Seattle</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<last-name>Inouye</last-name>
<first-name>Patrick J. S.</first-name>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
<agent sequence="02" rep-type="attorney">
<addressbook>
<last-name>Wittman</last-name>
<first-name>Krista A.</first-name>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>FTI Technology LLC</orgname>
<role>02</role>
<address>
<city>Annapolis</city>
<state>MD</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Nguyen</last-name>
<first-name>Phong</first-name>
<department>2162</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">A computer-implemented system and method for identifying near duplicate messages is provided. Messages each including a content body are grouped by conversation thread. One or more of the messages also includes an attachment. The messages for each conversation thread are sorted in order of message length. At least one of the messages is selected from one of the threads and the body of the selected message is compared with the body of one such shorter message in that thread. A determination is made that the body of the shorter message is included in the body of the selected message. Hash codes of the attachments for the selected message and the shorter message are compared. The shorter message is marked as a near duplicate message of the selected message when the hash codes of the attachments match.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="142.66mm" wi="200.83mm" file="US08626767-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="221.15mm" wi="182.29mm" orientation="landscape" file="US08626767-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="239.86mm" wi="175.09mm" orientation="landscape" file="US08626767-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="214.55mm" wi="167.13mm" orientation="landscape" file="US08626767-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="231.99mm" wi="181.69mm" orientation="landscape" file="US08626767-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="183.98mm" wi="177.72mm" file="US08626767-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="233.68mm" wi="161.54mm" file="US08626767-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="250.11mm" wi="157.65mm" file="US08626767-20140107-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00008" num="00008">
<img id="EMI-D00008" he="226.74mm" wi="170.43mm" file="US08626767-20140107-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00009" num="00009">
<img id="EMI-D00009" he="250.44mm" wi="188.47mm" file="US08626767-20140107-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00010" num="00010">
<img id="EMI-D00010" he="232.33mm" wi="149.10mm" file="US08626767-20140107-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00011" num="00011">
<img id="EMI-D00011" he="246.46mm" wi="172.13mm" file="US08626767-20140107-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00012" num="00012">
<img id="EMI-D00012" he="218.52mm" wi="187.54mm" file="US08626767-20140107-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00013" num="00013">
<img id="EMI-D00013" he="192.53mm" wi="173.40mm" file="US08626767-20140107-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00014" num="00014">
<img id="EMI-D00014" he="248.50mm" wi="184.57mm" orientation="landscape" file="US08626767-20140107-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00015" num="00015">
<img id="EMI-D00015" he="243.84mm" wi="176.36mm" orientation="landscape" file="US08626767-20140107-D00015.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00016" num="00016">
<img id="EMI-D00016" he="231.65mm" wi="172.13mm" orientation="landscape" file="US08626767-20140107-D00016.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00017" num="00017">
<img id="EMI-D00017" he="219.20mm" wi="190.50mm" orientation="landscape" file="US08626767-20140107-D00017.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00018" num="00018">
<img id="EMI-D00018" he="251.46mm" wi="143.17mm" file="US08626767-20140107-D00018.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00019" num="00019">
<img id="EMI-D00019" he="254.08mm" wi="164.85mm" file="US08626767-20140107-D00019.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00020" num="00020">
<img id="EMI-D00020" he="253.07mm" wi="175.77mm" file="US08626767-20140107-D00020.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00021" num="00021">
<img id="EMI-D00021" he="241.55mm" wi="171.11mm" file="US08626767-20140107-D00021.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00022" num="00022">
<img id="EMI-D00022" he="177.38mm" wi="170.43mm" file="US08626767-20140107-D00022.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?RELAPP description="Other Patent Relations" end="lead"?>
<heading id="h-0001" level="1">CROSS-REFERENCE TO RELATED APPLICATION</heading>
<p id="p-0002" num="0001">This patent application is a continuation of U.S. patent application Ser. No. 13/361,900, filed on Jan. 30, 2012, pending; which is a continuation of U.S. Pat. No. 8,108,397, issued Jan. 31, 2012; which is a continuation of U.S. Pat. No. 7,836,054, issued Nov. 16, 2010; which is a continuation of U.S. Pat. No. 7,577,656, issued Aug. 18, 2009; which is a continuation of U.S. Pat. No. 7,035,876, issued Apr. 25, 2006; which is a continuation of U.S. Pat. No. 6,820,081, issued Nov. 16, 2004; which is a continuation-in-part of U.S. Pat. No. 6,745,197, issued Jun. 1, 2004, the priority dates of which are claimed and the disclosures of which are incorporated by reference.</p>
<heading id="h-0002" level="1">FIELD</heading>
<p id="p-0003" num="0002">The present invention relates in general to stored message categorization and, in particular, to a computer-implemented system and method for identifying near duplicate messages.</p>
<?RELAPP description="Other Patent Relations" end="tail"?>
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0003" level="1">BACKGROUND</heading>
<p id="p-0004" num="0003">Presently, electronic messaging constitutes a major form of interpersonal communications, complimentary to, and, in some respects, replacing, conventional voice-based communications. Electronic messaging includes traditional electronic mail (e-mail) and has grown to encompass scheduling, tasking, contact and project management, and an increasing number of automated workgroup activities. Electronic messaging also includes the exchange of electronic documents and multimedia content, often included as attachments. And, unlike voice mail, electronic messaging can easily be communicated to an audience ranging from a single user, a workgroup, a corporation, or even the world at large, through pre-defined message address lists.</p>
<p id="p-0005" num="0004">The basic electronic messaging architecture includes a message exchange server communicating with a plurality of individual subscribers or clients. The message exchange server acts as an electronic message custodian, which maintains, receives and distributes electronic messages from the clients using one or more message databases. Individual electronic messaging information is kept in message stores, referred to as folders or archives, identified by user account within the message databases. Generally, by policy, a corporation will archive the message databases as historical data storing during routine backup procedures.</p>
<p id="p-0006" num="0005">The information contained in archived electronic messages can provide a potentially useful chronology of historically significant events. For instance, message conversation threads present a running dialogue which can chronicle the decision making processes undertaken by individuals during the execution of their corporate responsibilities. As well, individual message store archives can corroborate the receipt and acknowledgment of certain corporate communications both locally and in distributed locations. And the archived electronic message databases create useful audit trails for tracing information flow.</p>
<p id="p-0007" num="0006">Consequently, fact seekers are increasingly turning to archived electronic message stores to locate crucial information and to gain insight into individual motivations and behaviors. In particular, electronic message stores are now almost routinely produced during the discovery phase of litigation to obtain evidence and materials useful to the litigants and the court. Discovery involves document review during which all relevant materials are read and analyzed. The document review process is time consuming and expensive, as each document must ultimately be manually read. Pre-analyzing documents to remove duplicative information can save significant time and expense by paring down the review field, particularly when dealing with the large number of individual messages stored in each of the archived electronic messages stores for a community of users.</p>
<p id="p-0008" num="0007">Typically, electronic messages maintained in archived electronic message stores are physically stored as data objects containing text or other content. Many of these objects are duplicates, at least in part, of other objects in the message store for the same user or for other users. For example, electronic messages are often duplicated through inclusion in a reply or forwarded message, or as an attachment. A chain of such recursively-included messages constitutes a conversation &#x201c;thread.&#x201d; In addition, broadcasting, multitasking and bulk electronic message &#x201c;mailings&#x201d; cause message duplication across any number of individual electronic messaging accounts.</p>
<p id="p-0009" num="0008">Although the goal of document pre-analysis is to pare down the size of the review field, the simplistic removal of wholly exact duplicate messages provides only a partial solution. On average, exactly duplicated messages constitute a small proportion of duplicated material. A much larger proportion of duplicated electronic messages are part of conversation threads that contain embedded information generated through a reply, forwarding, or attachment. The message containing the longest conversation thread is often the most pertinent message since each of the earlier messages is carried forward within the message itself. The messages comprising a conversation thread are &#x201c;near&#x201d; exact duplicate messages, which can also be of interest in showing temporal and substantive relationships, as well as revealing potentially duplicated information.</p>
<p id="p-0010" num="0009">In the prior art, electronic messaging applications provide limited tools for processing electronic messages. Electronic messaging clients, such as the Outlook product, licensed by Microsoft Corporation, Redmond, Wash., or the cc:mail product, licensed by Lotus Corporation, Cambridge, Mass., provide rudimentary facilities for sorting and grouping stored messages based on literal data occurring in each message, such as sender, recipient, subject, send date and so forth. Attachments are generally treated as separate objects and are not factored into sorting and grouping operations. However, these facilities are limited to processing only those messages stored in a single user account and are unable to handle multiple electronic message stores maintained by different message custodians. In addition, the systems only provide partial sorting and grouping capabilities and do not provide for culling out message with duplicate attachments.</p>
<p id="p-0011" num="0010">Therefore, there is a need for an approach to processing electronic messages maintained in multiple message stores for document pre-analysis. Preferably, such an approach would identify messages duplicative both in literal content, as well as with respect to attachments, independent of source, and would &#x201c;grade&#x201d; the electronic messages into categories that include unique, exact duplicate, and near duplicate messages, as well as determine conversation thread length.</p>
<p id="p-0012" num="0011">There is a further need for an approach to identifying unique messages and related duplicate and near duplicate messages maintained in multiple message stores. Preferably, such an approach would include an ability to separate unique messages and to later reaggregate selected unique messages with their related duplicate and near duplicate messages as necessary.</p>
<p id="p-0013" num="0012">There is a further need for an approach to processing electronic messages generated by Messaging Application Programming Interface (MAPI)-compliant applications.</p>
<heading id="h-0004" level="1">SUMMARY</heading>
<p id="p-0014" num="0013">The present invention provides a system and method for generating a shadow store storing messages selected from an aggregate collection of message stores. The shadow store can be used in a document review process. The shadow store is created by extracting selected information about messages from each of the individual message stores into a master array. The master array is processed to identify message topics, which occur only once in the individual message stores and to then identify the related messages as unique. The remaining non-unique messages are processed topic by topic in a topic array from which duplicate, near duplicate and unique messages are identified. In addition, thread counts are tallied. A log file indicating the nature and location of each message and the relationship of each message to other messages is generated. Substantially unique messages are copied into the shadow store for use in other processes, such as a document review process. Optionally, selected duplicate and near duplicate messages are also copied into the shadow store or any other store containing the related unique message.</p>
<p id="p-0015" num="0014">An embodiment provides a computer-implemented system and method for identifying near duplicate messages. Messages each including a content body are grouped by conversation thread. One or more of the messages also includes an attachment. The messages for each conversation thread are sorted in order of message length. At least one of the messages is selected from one of the threads and the body of the selected message is compared with the body of one such shorter message in that thread. A determination is made that the body of the shorter message is included in the body of the selected message. Hash codes of the attachments for the selected message and the shorter message are compared. The shorter message is marked as a near duplicate message of the selected message when the hash codes of the attachments match.</p>
<p id="p-0016" num="0015">Still other embodiments of the present invention will become readily apparent to those skilled in the art from the following detailed description, wherein is described embodiments of the invention by way of illustrating the best mode contemplated for carrying out the invention. As will be realized, the invention is capable of other and different embodiments and its several details are capable of modifications in various obvious respects, all without departing from the spirit and the scope of the present invention. Accordingly, the drawings and detailed description are to be regarded as illustrative in nature and not as restrictive.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0005" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. 1</figref> is a functional block diagram showing a distributed computing environment, including a system for efficiently processing messages stored in multiple message stores, in accordance with the present invention.</p>
<p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. 2</figref> is a block diagram showing the system for efficiently processing messages of <figref idref="DRAWINGS">FIG. 1</figref>.</p>
<p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. 3</figref> is a data flow diagram showing the electronic message processing followed by the system of <figref idref="DRAWINGS">FIG. 2</figref>.</p>
<p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. 4</figref> is a block diagram showing the software modules of the system of <figref idref="DRAWINGS">FIG. 2</figref>.</p>
<p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. 5</figref> shows, by way of example, an annotated electronic message.</p>
<p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. 6</figref> is a flow diagram showing a method for efficiently processing messages stored in multiple message stores, in accordance with the present invention.</p>
<p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. 7</figref> is a flow diagram showing the routine for creating a shadow store for use in the method of <figref idref="DRAWINGS">FIG. 6</figref>.</p>
<p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. 8</figref> is a flow diagram showing the routine for processing messages for use in the method of <figref idref="DRAWINGS">FIG. 6</figref>.</p>
<p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. 9</figref> is a flow diagram showing the routine for processing the master array for use in the routine of <figref idref="DRAWINGS">FIG. 8</figref>.</p>
<p id="p-0026" num="0025"><figref idref="DRAWINGS">FIGS. 10A-C</figref> are flow diagrams showing the routine for processing a topic array for use in the routine of <figref idref="DRAWINGS">FIG. 9</figref>.</p>
<p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. 11</figref> is a flow diagram showing the routine for processing a log for use in the routine of <figref idref="DRAWINGS">FIG. 8</figref>.</p>
<p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. 12</figref> is a functional block diagram showing a distributed computing environment, including a system for evaluating a structured message store for message redundancy, in accordance with a further embodiment of the present invention.</p>
<p id="p-0029" num="0028"><figref idref="DRAWINGS">FIG. 13</figref> is a block diagram showing the software modules of the production server of <figref idref="DRAWINGS">FIG. 12</figref>.</p>
<p id="p-0030" num="0029"><figref idref="DRAWINGS">FIG. 14</figref> is a data flow diagram showing the electronic message processing followed by the production server of <figref idref="DRAWINGS">FIG. 13</figref>.</p>
<p id="p-0031" num="0030"><figref idref="DRAWINGS">FIG. 15</figref> shows, by way of example, a database schema used by the production server of <figref idref="DRAWINGS">FIG. 13</figref>.</p>
<p id="p-0032" num="0031"><figref idref="DRAWINGS">FIG. 16</figref> is a flow diagram showing a method for evaluating a structured message store for message redundancy, in accordance with a further embodiment of the present invention.</p>
<p id="p-0033" num="0032"><figref idref="DRAWINGS">FIGS. 17A-B</figref> are flow diagrams showing the routine for extracting messages for use in the method of <figref idref="DRAWINGS">FIG. 16</figref>.</p>
<p id="p-0034" num="0033"><figref idref="DRAWINGS">FIGS. 18A-C</figref> are flow diagrams showing the routine for de-duping messages for use in the method of <figref idref="DRAWINGS">FIG. 16</figref>.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0006" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0035" num="0034"><figref idref="DRAWINGS">FIG. 1</figref> is a functional block diagram showing a distributed computing environment <b>10</b>, including a system for efficiently processing messages stored in multiple message stores, in accordance with the present invention. The distributed computing environment <b>10</b> includes an internetwork <b>16</b>, including the Internet, and an intranetwork <b>13</b>. The internetwork <b>16</b> and intranetwork <b>13</b> are interconnected via a router <b>17</b> or similar interconnection device, as is known in the art. Other network topologies, configurations, and components are feasible, as would be recognized by one skilled in the art.</p>
<p id="p-0036" num="0035">Electronic messages, particularly electronic mail (email), are exchanged between the various systems interconnected via the distributed computing environment <b>10</b>. Throughout this document, the terms &#x201c;electronic message&#x201d; and &#x201c;message&#x201d; are used interchangeably with the same intended meaning. In addition, message types encompass electronic mail, voice mail, images, scheduling, tasking, contact management, project management, workgroup activities, multimedia content, and other forms of electronically communicable objects, as would be recognized by one skilled in the art. These systems include a server <b>11</b> providing a message exchange service to a plurality of clients <b>12</b><i>a</i>, <b>12</b><i>b </i>interconnected via the intranetwork <b>13</b>. The clients <b>12</b><i>a</i>, <b>12</b><i>b </i>can also subscribe to a remote message exchange service provided by a remote server <b>14</b> interconnected via the internetwork <b>16</b>. Similarly, a remote client <b>15</b> can subscribe to either or both of the message exchange services from the server <b>11</b> and the remote server <b>14</b> via the internetwork <b>16</b>.</p>
<p id="p-0037" num="0036">Each of the systems is coupled to a storage device. The server <b>11</b>, clients <b>12</b><i>a</i>, <b>12</b><i>b</i>, and remote client <b>15</b> each maintain stored data in a local storage device <b>18</b>. The remote server <b>14</b> maintains stored data in a local storage device (not shown) and can also maintain stored data for remote systems in a remote storage device <b>19</b>, that is, a storage device situated remotely relative to the server <b>11</b>, clients <b>12</b><i>a</i>, <b>12</b><i>b</i>, and remote client <b>15</b>. The storage devices include conventional hard drives, removable and fixed media, CD ROM and DVD drives, and all other forms of volatile and non-volatile storage devices.</p>
<p id="p-0038" num="0037">Each of the systems also maintains a message store, either on the local storage device or remote storage device, in which electronic messages are stored or archived. Each message store constitutes an identifiable repository within which electronic messages are kept and can include an integral or separate archive message store for off-line storage. Internally, each message store can contain one or more message folders (not shown) containing groups of related messages, such as an &#x201c;Inbox&#x201d; message folder for incoming messages, an &#x201c;Outbox&#x201d; message folder for outgoing messages, and the like. For clarity of discussion, individual message folders will be treated alike, although one skilled in the art would recognize that contextually related message folders might be separately processed.</p>
<p id="p-0039" num="0038">In a workgroup-computing environment, the server <b>11</b> collectively maintains the message stores as a workgroup message store (WMS) <b>22</b> for each subscribing client <b>12</b><i>a</i>, <b>12</b><i>b </i>and remote client <b>15</b>. In a distributed computing environment, each client <b>12</b><i>a</i>, <b>12</b><i>b </i>and remote client <b>15</b> might maintain an individual message store <b>21</b> either in lieu of or in addition to a workgroup message store <b>21</b>. Similarly, the remote server <b>14</b> could maintain a workgroup message store <b>22</b> for remote clients.</p>
<p id="p-0040" num="0039">Over time, each of the message stores unavoidably accumulates duplicates, at least in part, of other electronic messages stored in the message store for the same user or for other users. These duplicate and near duplicate electronic messages should be identified and removed during document pre-analysis. Thus, the server <b>11</b> includes a message processor <b>20</b> for efficiently processing the electronic messages stored in the various message stores <b>21</b>, <b>22</b> as further described below beginning with reference to <figref idref="DRAWINGS">FIG. 2</figref>. Optionally, an individual client <b>12</b><i>a </i>could also include the message processor <b>20</b>. The actual homing of the message processor <b>20</b> is only limited by physical resource availability required to store and process individual message stores <b>21</b> and workgroup message stores <b>22</b>.</p>
<p id="p-0041" num="0040">The electronic messages are retrieved directly from the individual message stores <b>21</b>, the workgroup message stores <b>22</b>, or consolidated from these message stores into a combined message store. For document pre-analysis, the message stores can include both active &#x201c;on-line&#x201d; messages and archived &#x201c;off-line&#x201d; messages maintained in a local storage device <b>18</b> or remote storage device <b>19</b>.</p>
<p id="p-0042" num="0041">The individual computer systems including the server <b>11</b>, clients <b>12</b>, remote server <b>14</b>, and remote client <b>15</b>, are general purpose, programmed digital computing devices consisting of a central processing unit (CPU), random access memory (RAM), non-volatile secondary storage, such as a hard drive, CD ROM or DVD drive, network interfaces, and peripheral devices, including user interfacing means, such as a keyboard and display. Program code, including software programs, and data are loaded into the RAM for execution and processing by the CPU and results are generated for display, output, transmittal, or storage.</p>
<p id="p-0043" num="0042"><figref idref="DRAWINGS">FIG. 2</figref> is a block diagram showing the system for efficiently processing messages of <figref idref="DRAWINGS">FIG. 1</figref>. The system <b>30</b> includes the server <b>11</b>, storage device <b>18</b>, and one or more message stores <b>32</b>. The message stores <b>32</b> could include individual message stores <b>21</b> and workgroup message stores <b>22</b> (shown in <figref idref="DRAWINGS">FIG. 1</figref>). Alternatively, the system <b>30</b> could include a client <b>12</b><i>a </i>(not shown) instead of the server <b>11</b>.</p>
<p id="p-0044" num="0043">The server <b>11</b> includes the messages processor <b>20</b> and optionally operates a messaging application <b>31</b>. The messaging application <b>31</b> provides services with respect to electronic message exchange and information storage to individual clients <b>12</b><i>a</i>, <b>12</b><i>b</i>, remote servers <b>14</b>, and remote clients <b>15</b> (shown in <figref idref="DRAWINGS">FIG. 1</figref>). On an application side, these services include providing electronic mail, scheduling, tasking, contact and project management, and related automated workgroup activities support. On a system side, these services include message addressing storage and exchange, and interfacing to low-level electronic messaging subsystems. An example of a message exchange server <b>31</b> is the Exchange Server product, licensed by Microsoft Corporation, Redmond, Wash. Preferably, the message exchange server <b>31</b> incorporates a Messaging Application Programming Interface (MAPI)-compliant architecture, such as described in R. Orfali et al., &#x201c;Client/Server Survival Guide,&#x201d; Ch. 19, John Wiley &#x26; Sons, Inc. (1999 3d ed.), the disclosure of which is incorporated by reference. The messaging application is not a part of the present invention, but is shown to illustrate a suitable environment in which the invention may operate.</p>
<p id="p-0045" num="0044">The message processor <b>20</b> processes the message stores <b>32</b> (shown in <figref idref="DRAWINGS">FIG. 1</figref>) to efficiently pre-analyze the electronic messages, as further described below with reference to <figref idref="DRAWINGS">FIG. 3</figref>. The message stores <b>32</b> are processed to create one or more constructs stored into a &#x201c;shadow&#x201d; store <b>33</b>. A point-to-point keyed collection <b>35</b> stores cross-references between the identifier of the original message store <b>32</b> or folder in the original message store and the identifier of the newly created corresponding folder or subfolder in the shadow store <b>33</b>. During processing, the electronic messages are &#x201c;graded&#x201d; into duplicate, near duplicate and unique categories and tagged by longest conversation thread.</p>
<p id="p-0046" num="0045">The results of message processing are chronicled into a log <b>34</b> to identify unique messages <b>44</b> and to create a processing audit trail for allowing the source and ultimate disposition of any given message to be readily traced. As well, a cross-reference keyed collection <b>36</b> allows unique message identifiers to be submitted and the source location information of those messages that are duplicates or near duplicates of the unique message to be retrieved. The retrieval information allows the optional reaggregation of selected unique messages and the related duplicate and near duplicates messages at a later time, such as by inclusion into the shadow store <b>33</b> at the end of the document review process. Optionally, the duplicate and near duplicate messages can be rejoined with their related unique messages for completeness. The log <b>34</b> records not only the disposition of each message, but, in the case of duplicate and near duplicate messages, indicates the unique message with which each duplicate and near duplicate message is associated, thereby permitting specific duplicate and near duplicate messages to be located and optionally reaggregated with selected unique messages at a later time. In the described embodiment, the cross-reference keyed collection <b>36</b> is maintained as part of the log <b>34</b>, but is separately identified for purposes of clarity. The unique messages <b>44</b> are copied into the shadow store <b>33</b> for forwarding to the next stage of document review.</p>
<p id="p-0047" num="0046"><figref idref="DRAWINGS">FIG. 3</figref> is a data flow diagram <b>40</b> showing the electronic message processing cycle followed by the system <b>30</b> of <figref idref="DRAWINGS">FIG. 2</figref>. First, the various message stores <b>41</b> are opened for access. Metadata consisting of message identification information, including message source location information, and message topics (or subjects), is extracted into a &#x201c;master&#x201d; array <b>42</b>. The master array <b>42</b> is a logical collection of the topics and identification information, in the form of metadata, for all of the messages in the various message stores <b>41</b>. The metadata is manipulated in the various data structures described herein, including the master array <b>42</b>, topic array <b>43</b>, and arrays for unique messages <b>44</b>, near duplicate messages <b>45</b>, thread lengths <b>46</b>, and exact duplicate messages <b>47</b>. However, except as noted otherwise, the messages are described as being directly manipulated during processing, although one skilled in the art would recognize that metadata, messages, or any combination thereof could be used.</p>
<p id="p-0048" num="0047">The messages in the master array <b>42</b> are sorted by topic to identify unique messages and conversation threads, as reflected by ranges of multiple occurrences of the same topic. The identification information (metadata) for those messages having identical topics is extracted into a topic array <b>43</b> as each new topic is encountered within the master array <b>42</b>.</p>
<p id="p-0049" num="0048">The topic array <b>43</b> functions as a working array within which topically identical messages are processed. The identification information extracted from the master array <b>42</b> is used to copy into the topic array further information from messages sharing a common topic, including their plaintext. At any point in processing, the topic array <b>43</b> contains only those messages sharing a common topic. These topically identical messages are sorted by plaintext body and analyzed. Exact duplicate messages <b>47</b>, containing substantially duplicated content, are removed from the topic array <b>43</b>. The remaining non-exact duplicate messages in the topic array <b>43</b> are searched for thread markers indicating recursively-included content and conversation thread lengths <b>46</b> are tallied. The messages in the topic array <b>43</b> are compared and near duplicate messages <b>45</b> are identified. The unique messages <b>45</b> are marked for transfer into the shadow store <b>48</b>.</p>
<p id="p-0050" num="0049"><figref idref="DRAWINGS">FIG. 4</figref> is a block diagram showing the software modules <b>60</b> of the system <b>30</b> of <figref idref="DRAWINGS">FIG. 2</figref>. Each module is a computer program, procedure or module written as source code in a conventional programming language, such as the Visual Basic programming language, and is presented for execution by the CPU as object or byte code, as is known in the art. The various implementations of the source code and object and byte codes can be held on a computer-readable storage medium or embodied on a transmission medium in a carrier wave. The message processor <b>20</b> operates in accordance with a sequence of process steps, as further described below beginning with reference to <figref idref="DRAWINGS">FIG. 6</figref>.</p>
<p id="p-0051" num="0050">The message processor <b>20</b> includes four primary modules: exact duplicate message selector <b>61</b>, thread length selector <b>62</b>, near duplicate message selector <b>63</b>, and unique message selector <b>64</b>. Prior to processing, the message stores <b>41</b> are logically consolidated into the master array <b>42</b>. At each stage of message processing, a log entry is created (or an existing entry modified) in a log <b>34</b> to track messages and record message identification information. The exact duplicate message selector <b>61</b> identifies and removes those exact duplicate messages <b>47</b> containing substantially duplicative content from the topic array <b>43</b>. The thread length selector <b>62</b> tallies the conversation thread lengths <b>46</b> and maintains an ordering of thread lengths, preferably from shortest to longest conversation thread length. The near duplicate message selector <b>63</b> designates as near duplicate messages <b>45</b> those whose content is recursively-included in other messages, such as those messages generated through a reply or forwarding sequence, or as an attachment. The unique message selector <b>64</b> designates as unique messages <b>45</b> those messages that have been extracted out of the master array <b>42</b> as not being topically identical and those messages remaining after the exact duplicate messages <b>48</b> and near duplicate messages <b>46</b> have been identified. The unique messages <b>45</b> are forwarded to the shadow store <b>48</b> for use in subsequent document review. The unique, near duplicate, and exact duplicate messages, as well as thread counts, are regularly recorded into the log <b>34</b>, as the nature of each message is determined. As well, the location information permitting subsequent retrieval of each near duplicate message <b>45</b> and exact duplicate message <b>47</b> is regularly inserted into the cross-reference keyed collection <b>36</b> relating the message to a unique message as the relationship is determined.</p>
<p id="p-0052" num="0051"><figref idref="DRAWINGS">FIG. 5</figref> shows, by way of example, an annotated electronic message <b>70</b>. Often the message having the longest conversation thread length <b>47</b> is the most useful message to review. Each preceding message is recursively included within the message having the longest conversation thread length and therefore these near duplicate messages can be skipped in an efficient review process.</p>
<p id="p-0053" num="0052">The example message <b>70</b> includes two recursively-included messages: an original e-mail message <b>71</b> and a reply e-mail message <b>72</b>. The original e-mail message <b>71</b> was sent from a first user, user1@ aol.com, to a second user, user2@ aol.com. In reply to the original e-mail message <b>71</b>, the second user, user2@ aol.com, generated the reply e-mail message <b>72</b>, sent back to the first user, user1@ aol.com. Finally, the first user, user1@ aol.com, forwarded the reply e-mail message <b>72</b>, which also included the original e-mail message <b>71</b>, as a forwarded e-mail message <b>73</b>, to a third user, user3@ aol.com.</p>
<p id="p-0054" num="0053">Each of the e-mail messages <b>71</b>, <b>72</b>, <b>73</b> respectively includes a message body (recursively-included) <b>74</b>, <b>78</b>, <b>82</b> and a message header <b>75</b>, <b>77</b>, <b>81</b>. The original e-mail message <b>71</b> and the reply e-mail message <b>72</b> are recursively-included messages. The original e-mail message <b>71</b> is recursively included in both the reply e-mail message <b>72</b> and forwarded e-mail message <b>73</b> while the reply e-mail message <b>72</b> is recursively included only in the forwarded e-mail message <b>73</b>.</p>
<p id="p-0055" num="0054">Each successive reply, forwarding or similar operation increases the conversation thread length <b>47</b> of the message. Thread lengths <b>47</b> are indicated within the messages themselves by some form of delimiter. In the example shown, the inclusion of the original e-mail message <b>71</b> in the reply e-mail message <b>72</b> is delimited by both a separator <b>80</b> and a &#x201c;RE:&#x201d; indicator in the subject line <b>79</b>. Likewise, the inclusion of the reply e-mail message <b>72</b> is delimited by a separator <b>84</b> and a &#x201c;FW:&#x201d; indicator in the subject line <b>83</b>. The message separators <b>80</b>, <b>84</b> and subject line indicators <b>79</b>, <b>83</b> constitute thread &#x201c;markers&#x201d; that can be searched, identified and analyzed by the message processor <b>20</b> in determining thread lengths <b>47</b> and near duplicate messages <b>46</b>.</p>
<p id="p-0056" num="0055"><figref idref="DRAWINGS">FIG. 6</figref> is a flow diagram showing a method <b>100</b> for efficiently processing messages stored in multiple message stores, in accordance with the present invention. The method <b>100</b> operates in two phases: initialization (blocks <b>101</b>-<b>103</b>) and processing (blocks <b>104</b>-<b>107</b>).</p>
<p id="p-0057" num="0056">During initialization, the message stores <b>41</b> (shown in <figref idref="DRAWINGS">FIG. 3</figref>) are opened for access by the message processor <b>20</b> (block <b>101</b>) and the shadow store <b>48</b> is created (block <b>102</b>), as further described below with reference to <figref idref="DRAWINGS">FIG. 7</figref>. In the described embodiment, the message processor <b>20</b> has a finite program capacity presenting an upper bound on the maximum number of electronic messages to be processed during a single run. Consequently, multiple processing passes may be required to process all of the messages stored in the aggregate of the message stores <b>41</b>.</p>
<p id="p-0058" num="0057">In the described embodiment, assuming that the aggregate number of messages exceeds the program bounds, the processing is broken down into a series of passes n, during each of which a portion of the aggregate message stores <b>41</b> is processed. The number of passes n required to process the source message stores <b>41</b> is determined (block <b>103</b>) by an appropriate equation, such as the following equation:</p>
<p id="p-0059" num="0058"><chemistry id="CHEM-US-00001" num="00001">
<img id="EMI-C00001" he="9.91mm" wi="30.23mm" file="US08626767-20140107-C00001.TIF" alt="embedded image" img-content="chem" img-format="tif"/>
</chemistry>
<br/>
where n equals the total number of iterative passes, TotNumMessages is the total number of messages in the aggregate of the message stores <b>41</b>, and ProgMax is the maximum program message processing capacity.
</p>
<p id="p-0060" num="0059">In the described embodiment, the aggregate selection of messages from the message stores <b>41</b> is processed by overlapping partition i, preferably labeled by dividing the alphabet into partitions corresponding to the number of passes n. For example, if two passes n are required, the partitions would be &#x201c;less than M&#x201d; and &#x201c;greater than L.&#x201d; Similarly, if <b>52</b> passes n were required, the partitions would be &#x201c;less than Am&#x201d; and &#x201c;greater than Al and less than Ba.&#x201d;</p>
<p id="p-0061" num="0060">During operation, the partitions, if required, are processed in an iterative processing loop (blocks <b>104</b>-<b>106</b>). During each pass n (block <b>104</b>) the messages are processed (block <b>105</b>), as further described below beginning with reference to <figref idref="DRAWINGS">FIG. 8</figref>. Upon the completion of the processing (block <b>106</b>), the message stores <b>41</b> are closed (block <b>107</b>). As an optional operation, the exact duplicate messages <b>47</b> and the near duplicates messages <b>45</b> are reinserted into the shadow store <b>48</b> (block <b>108</b>). The method terminates upon the completion of processing.</p>
<p id="p-0062" num="0061"><figref idref="DRAWINGS">FIG. 7</figref> is a flow diagram showing the routine <b>120</b> for creating a shadow store for use in the method <b>100</b> of <figref idref="DRAWINGS">FIG. 6</figref>. The purpose of this routine is to create a holding area, called the shadow store <b>48</b> (shown in <figref idref="DRAWINGS">FIG. 3</figref>) in which unique messages <b>45</b> are stored for the next stage in document review. A message counter is maintained to count the messages in the aggregate of all message stores <b>41</b>. The message counter is initially set to zero (block <b>121</b>). Each of the source message stores <b>41</b> is then processed in a pair of nested iterative processing loops (blocks <b>122</b>-<b>128</b> and <b>124</b>-<b>129</b>), as follows.</p>
<p id="p-0063" num="0062">During the outer processing loop (blocks <b>122</b>-<b>129</b>), a folder corresponding to each source message store <b>41</b> is created in the shadow store <b>48</b> (block <b>123</b>). Next, each of the folders in the current selected source message store <b>41</b> is iteratively processed in the inner processing loop (blocks <b>124</b>-<b>128</b>) as follows. First, the message counter is incremented by the number of messages in the folder being examined in the source message store <b>41</b> (block <b>125</b>) and a corresponding folder in the shadow store <b>48</b> is created (block <b>126</b>). An entry is made in a point-to-point keyed collection <b>35</b> (block <b>127</b>) that constitutes a cross-reference between a pointer to the original message store <b>41</b> or folder in the original message store and a pointer to the newly created corresponding folder or subfolder in the shadow store <b>48</b>. When unique messages are later copied into the shadow store <b>48</b>, this keyed file allows the copying to proceed &#x201c;point-to-point,&#x201d; rather than requiring that the folders in the shadow store <b>48</b> be iteratively searched to find the correct one. Processing of each folder in the current source message store <b>41</b> continues (block <b>128</b>) for each remaining folder in the source message store. Similarly, processing of each of the source message stores themselves <b>41</b> continues (block <b>129</b>) for each remaining source message store <b>41</b>, after which the routine returns (block <b>130</b>), providing a count of all the messages in all the source message stores so that the number of passes required can be determined.</p>
<p id="p-0064" num="0063"><figref idref="DRAWINGS">FIG. 8</figref> is a flow diagram showing the routine <b>140</b> for processing messages for use in the method <b>100</b> of <figref idref="DRAWINGS">FIG. 6</figref>. The purpose of this routine is to preprocess the messages stored in the message stores <b>41</b>. Note at each stage of message processing, a log entry is implicitly entered into the log <b>34</b> (shown in <figref idref="DRAWINGS">FIG. 3</figref>) to record the categorization and disposition of each message.</p>
<p id="p-0065" num="0064">The messages are processed in a processing loop (blocks <b>141</b>-<b>144</b>). During each iteration (block <b>141</b>), each message in the selected folder is checked for membership in the current partition i of the source message stores <b>41</b> (block <b>142</b>). If the message is in the current partition i (block <b>142</b>), the message is logically transferred into the master array <b>42</b> (block <b>143</b>) by extracting the topic and location information, including message identification information and pointers to the source message store <b>41</b>, the source message folder, and to the individual message (metadata). Using metadata, rather than copying entire messages, conserves storage and memory space and facilitates faster processing. Processing continues for each message in the selected folder (block <b>144</b>).</p>
<p id="p-0066" num="0065">When all folders have been processed and the metadata for those messages found to be within the partition has been transferred into the master array, message processing begins. The messages are sorted by topic (block <b>145</b>) and the master array <b>42</b> is processed (block <b>146</b>), as further described below with reference to <figref idref="DRAWINGS">FIG. 9</figref>. Last, the log <b>49</b> is processed (block <b>147</b>), after which the routine returns.</p>
<p id="p-0067" num="0066"><figref idref="DRAWINGS">FIG. 9</figref> is a flow diagram showing the routine <b>160</b> for processing the master array <b>42</b> for use in the routine <b>140</b> of <figref idref="DRAWINGS">FIG. 8</figref>. The purpose of this routine is to identify unique messages <b>44</b> and to process topically identical messages using the topic array <b>43</b>. The routine processes the messages to identify unique and topically similar messages using an iterative processing loop (blocks <b>161</b>-<b>171</b>). During each iteration (block <b>161</b>), the topic (or subject line) of the each message in the master array <b>42</b> is compared to that of the next message in the master array <b>42</b> (block <b>162</b>). If the topics match (block <b>163</b>), the messages may be from the same conversation thread. If the message is the first message with the current topic to match the following message (block <b>164</b>), this first message in the potential thread is marked as the beginning of a topic range (block <b>165</b>) and processing continues with the next message (block <b>171</b>). Otherwise, if the message is not the first message in the conversation thread (block <b>164</b>), the message is skipped and processing continues with the next message (block <b>171</b>).</p>
<p id="p-0068" num="0067">If the topics do not match (block <b>163</b>), the preceding topic range is ending and a new topic range is starting. If the current message was not the first message with that topic (block <b>166</b>), the range of messages with the same topic (which began with the message marked at block <b>165</b>) is processed (block <b>168</b>). If the current message is the first message with the matching topic (block <b>166</b>), the message is extracted as a unique message <b>45</b> (block <b>167</b>) and processing continues with the next message (block <b>171</b>). If the topic range has ended (block <b>166</b>), each topically identical message, plus message transmission time, is logically extracted into the topic array <b>43</b> (block <b>168</b>). In the described embodiment, the messages are not physically copied into the topic array <b>43</b>; rather, each message is logically &#x201c;transferred&#x201d; using metadata into the topic array <b>43</b> to provide message source location information, which is used to add a copy of the plaintext body of the message into the topic array. The topic array <b>43</b> is sorted by plaintext body (block <b>169</b>) and processed (block <b>170</b>), as further described below with reference to <figref idref="DRAWINGS">FIGS. 10A-C</figref>. Processing continues with the next message (block <b>171</b>). The routine returns upon the processing of the last message in the master array <b>42</b>.</p>
<p id="p-0069" num="0068"><figref idref="DRAWINGS">FIGS. 10A-C</figref> are flow diagrams showing the routine <b>180</b> for processing a topic array for use in the routine <b>160</b> of <figref idref="DRAWINGS">FIG. 9</figref>. The purpose of this routine is to complete the processing of the messages, including identifying duplicate, near duplicate and unique messages, and counting thread lengths. The routine cycles through the topic array <b>43</b> (shown in <figref idref="DRAWINGS">FIG. 3</figref>) in three iterative processing loops (blocks <b>181</b>-<b>187</b>, <b>189</b>-<b>194</b> and <b>196</b>-<b>203</b>) as follows.</p>
<p id="p-0070" num="0069">During the first processing loop (blocks <b>181</b>-<b>187</b>) each message in the topic array <b>43</b> is examined. The plaintext body of the current message is compared to the plaintext body of the next message (block <b>182</b>). If the plaintext bodies match (block <b>183</b>), an exact duplicate message possibly exists, pending verification. The candidate exact duplicate is verified by comparing the header information <b>75</b>, <b>77</b>, <b>81</b> (shown in <figref idref="DRAWINGS">FIG. 5</figref>), the sender of the message (block <b>184</b>), and the transmission times of each message. If the match is verified (block <b>185</b>), the first message is marked as an exact duplicate of the second message and the identification information for the first and second messages and their relationship is saved into the log <b>49</b> (block <b>186</b>) and cross-reference keyed collection <b>36</b> (shown in <figref idref="DRAWINGS">FIG. 2</figref>). The processing of each subsequent message in the topic array <b>43</b> (block <b>187</b>) continues for the remaining messages.</p>
<p id="p-0071" num="0070">Next, the messages marked as exact duplicate messages are removed from the topic array <b>43</b> (block <b>188</b>) and the remaining non-exact duplicate messages in the topic array <b>43</b> are processed in the second processing loop (blocks <b>189</b>-<b>194</b>) as follows. First, each message is searched for thread markers, including separators <b>80</b>, <b>84</b> and subject line indicators <b>79</b>-<b>83</b> (shown in <figref idref="DRAWINGS">FIG. 5</figref>) (block <b>190</b>). If thread markers are found (block <b>191</b>), the number of thread marker occurrences m is counted and recorded (block <b>192</b>). Otherwise, the message is recorded as having zero thread markers (block <b>193</b>). In the described embodiment, the data entries having zero thread markers are included in the sorting operations. These messages have message content, but do not include other messages. Recording zero thread markers allows these &#x201c;first-in-time&#x201d; messages to be compared against messages which do have included messages. Processing continues for each of the remaining messages (block <b>194</b>), until all remaining messages in the topic array <b>43</b> have been processed.</p>
<p id="p-0072" num="0071">The topic array is next sorted in order of increasing thread markers m (block <b>195</b>) and the messages remaining in the topic array <b>43</b> are iteratively processed in the third processing loop (block <b>196</b>-<b>203</b>). During each processing loop (block <b>196</b>), the first and subsequent messages are selected (blocks <b>197</b>, <b>198</b>) and the plaintext body of the messages compared (block <b>199</b>). In the described embodiment, a text comparison function is utilized to allow large text blocks to be efficiently compared. If the plaintext body of the first selected message is included in the plaintext body of the second selected message (block <b>200</b>), the first message is marked as a near duplicate of the second message and identification information on the first and second messages and their relationship is saved into the log <b>49</b> and cross-reference keyed collection <b>36</b> (shown in <figref idref="DRAWINGS">FIG. 2</figref>) (block <b>201</b>). If the plaintext body of the first selected message is not included in the plaintext body of the second selected message and additional messages occur subsequent to the second message in the topic array <b>43</b> (block <b>202</b>), the next message is selected and compared as before (blocks <b>198</b>-<b>202</b>). Each subsequent message in the topic array is processed (block <b>203</b>) until all remaining messages have been processed, after which the routine returns.</p>
<p id="p-0073" num="0072"><figref idref="DRAWINGS">FIG. 11</figref> is a flow diagram showing the routine <b>220</b> for processing a log for use in the routine <b>140</b> of <figref idref="DRAWINGS">FIG. 8</figref>. The purpose of this routine is to finalize the log <b>34</b> for use in the review process. Processing occurs in an iterative processing loop (block <b>221</b>-<b>226</b>) as follows. Each message in the master array <b>42</b> is processed during each loop (block <b>221</b>). If the selected message is a unique message <b>45</b> (block <b>222</b>), a copy of the message is retrieved from the source folder in the source message store <b>41</b> (shown in <figref idref="DRAWINGS">FIG. 3</figref>) and placed into the corresponding folder in the corresponding message store in the shadow store <b>48</b> (block <b>223</b>) (using the cross-reference keyed collection <b>36</b> created at the time of creating the shadow store <b>34</b>), plus an entry with message source location information and identification information is created in the log <b>34</b> (block <b>224</b>). Otherwise, the message is skipped as a near duplicate message <b>45</b> or exact duplicate message <b>47</b> (block <b>225</b>) that is not forwarded into the next phase of the document review process. Processing of each subsequent message in the master array <b>42</b> continues (block <b>226</b>) for all remaining messages, after which the routine returns.</p>
<p id="p-0074" num="0073"><figref idref="DRAWINGS">FIG. 12</figref> is a functional block diagram showing a distributed computing environment <b>230</b>, including a system for evaluating a structured message store for message redundancy, in accordance with a further embodiment of the present invention. In addition to the message processor <b>20</b> executing on the server <b>11</b>, a production server <b>231</b> includes a workbench application <b>232</b> for providing a framework for acquiring, logging, culling, and preparing documents for automated review and analysis. The workbench application <b>232</b> includes a production message processor (Prod MP) <b>233</b> for efficiently processing the electronic messages stored in the individual message stores <b>21</b> and the workgroup message stores <b>22</b>, as further described below beginning with reference to <figref idref="DRAWINGS">FIG. 13</figref>.</p>
<p id="p-0075" num="0074">The production server <b>231</b> maintains an archived message store (AMS) <b>236</b> on a storage device <b>234</b> and a database <b>235</b>. The production server <b>231</b> preferably functions as an off-line message processing facility, which receives individual message stores <b>21</b> and workgroup message stores <b>22</b> for document review processing as the archived message stores <b>236</b>. The database <b>235</b> abstracts the contents of individual messages extracted from the archived message stores <b>236</b> into structured message records as a form of standardized representation for efficient processing and identification of duplicative content, including attachments, as further described below with reference to <figref idref="DRAWINGS">FIG. 15</figref>.</p>
<p id="p-0076" num="0075"><figref idref="DRAWINGS">FIG. 13</figref> is a block diagram showing the software modules of the production server <b>231</b> of <figref idref="DRAWINGS">FIG. 12</figref>. The workbench application <b>232</b> executes on the production server <b>231</b>, preferably as a stand-alone application for processing messages consolidated from the individual message stores <b>21</b> and the workgroup message stores <b>22</b> into the consolidated message store <b>236</b>. The workbench application <b>232</b> includes the production message processor <b>233</b> for identifying unique messages and culling out duplicate and near duplicate messages.</p>
<p id="p-0077" num="0076">The production message server <b>233</b> includes five primary modules: message extractor <b>241</b>, message de-duper <b>242</b>, parser <b>243</b>, digester <b>244</b>, and comparer <b>245</b>. Prior to processing, the production message processor <b>233</b> logically assembles the archived message stores <b>236</b> by first importing each individual message store <b>21</b> and workgroup message store <b>22</b> from the physical storage media upon which the message store <b>21</b>, <b>22</b> is maintained. The archived message stores <b>236</b> provide a normalized electronic storage structure independent of physical storage media. Consequently, importing each individual message <b>21</b> and workgroup message store <b>22</b> can include converting the message store from a compressed or archival storage format into a standardized &#x201c;working&#x201d; message store format for message access and retrieval. In the described embodiment, the formats used for individual messages and message stores as used in the Outlook family of messaging applications, licensed by Microsoft Corporation, Redmond, Wash., and cc:mail family of messaging applications, licensed by Lotus Corporation, Cambridge, Mass., are supported, and other messaging application formats could likewise be supported, as would be recognized by one skilled in the art. At each stage of message processing, a log entry can be created (or an existing log entry modified) in a log <b>247</b> for tracking messages and recording message identification information.</p>
<p id="p-0078" num="0077">The message extractor <b>241</b> retrieves each individual message from the archived message stores <b>236</b>. The parser <b>243</b> parses individual fields from each extracted message and identifies message routing, identification information and literal content within each field. The parsed metadata and message body are then stored in message records <b>248</b> maintained in the database <b>235</b>, as further described below with reference to <figref idref="DRAWINGS">FIG. 15</figref>. Each message record <b>248</b> includes a hash code <b>249</b> associated with the message, which is calculated by the digester <b>244</b>, exclusive of any attachments. Each attachment also includes a separately calculated attachment hash code <b>249</b>. Each hash code <b>249</b> is a sequence of alphanumeric characters representing the content, also referred to as a digest.</p>
<p id="p-0079" num="0078">The hash codes <b>249</b> are calculated using a one-way function to generate a substantially unique alphanumeric value, including a purely numeric or alphabetic value, associated with the message or attachment. The hash codes <b>249</b> are calculated over at least part of each message header, plus the complete message body. If the message includes attachments, separate attachment hash codes <b>249</b> are calculated over at least part of each attachment. For each message, the hash code <b>249</b> can be calculated over at least part of the header, plus the complete message body. In addition, the demarcation between the data constituting a header and the data constituting a message body can vary and other logical grouping of data into headers, message bodies, or other structures or groupings are possible, as would be recognized by one skilled in the art.</p>
<p id="p-0080" num="0079">In the described embodiment, the MD5 hashing algorithm, which stands for &#x201c;Message Digest No. 5,&#x201d; is utilized and converts an arbitrary sequence of bytes having any length into a finite 128-bit digest, such as described in D. Gourley and B. Totty, &#x201c;HTTP, the Definitive Guide,&#x201d; pp. 288-299, O'Reilly and Assocs., Sebastopol, Calif. (2002), the disclosure of which is incorporated by reference. Other forms of cryptographic check summing, one-way hash functions, and fingerprinting functions are possible, including the Secure Hash Algorithm (SHA), and other related approaches, as would be recognized by one skilled in the art.</p>
<p id="p-0081" num="0080">Once the message records <b>248</b> in the database <b>235</b> have been populated with the extracted messages, the message de-duper <b>242</b> identifies unique messages, exact duplicate messages, and near duplicate messages, as further described below with reference to <figref idref="DRAWINGS">FIG. 18</figref>. The messages are grouped by message hash codes <b>249</b> and each group of matching hash codes <b>249</b> is analyzed by comparing the content and the hash codes <b>249</b> for each message and any associated attachments to identify unique messages, exact duplicate messages, and near duplicate messages. A hash code appearing in a group having only one message corresponds to a unique message. A hash code appearing in a group having two or more messages corresponds to a set of exact duplicate messages with either no attachments or with identical attachments. Optionally, the exact duplicate messages and near duplicate messages can be maintained in a shadow store <b>246</b> for data integrity and auditing purposes.</p>
<p id="p-0082" num="0081"><figref idref="DRAWINGS">FIG. 14</figref> is a data flow diagram showing the electronic message processing <b>260</b> followed by the production server <b>231</b> of <figref idref="DRAWINGS">FIG. 13</figref>. First, the various archived message stores <b>236</b> are first opened for access. For each message in each of the archived message stores <b>236</b>, metadata consisting of message routing, identification information and literal content are extracted. The metadata and message body, exclusive of any attachments, are calculated into a message hash code <b>261</b>. In tandem, any attachments <b>262</b> are calculated into attachment hash codes <b>263</b>. The metadata, message body, hash code <b>261</b>, and hash codes <b>263</b> for any attachments are stored into the database <b>235</b> as message records <b>264</b>. Each of the message records <b>264</b> is uniquely identified, as further described below with reference to <figref idref="DRAWINGS">FIG. 15</figref>. Finally, the message records <b>264</b> are retrieved from the database <b>235</b> and processed to identify unique messages <b>265</b>, exact duplicate messages <b>266</b>, and near duplicate messages <b>267</b>, as further described below with reference to <figref idref="DRAWINGS">FIG. 18</figref>.</p>
<p id="p-0083" num="0082"><figref idref="DRAWINGS">FIG. 15</figref> shows, by way of example, a database schema <b>270</b> used by the production server <b>231</b> of <figref idref="DRAWINGS">FIG. 13</figref>. The message records <b>248</b> in the database <b>235</b> are preferably structured in a hierarchical organization consisting of tables for individual message files <b>271</b>, mail properties (MailProperties) <b>272</b>, compound documents (CompoundDocs) <b>273</b>, and compound members (CompoundMembers) <b>274</b>, although other forms of hierarchical and non-hierarchical organization are feasible, as would be recognized by one skilled in the art.</p>
<p id="p-0084" num="0083">The files table <b>271</b> stores one record for each individual message extracted from the archived message stores <b>236</b>. Each record in the files table <b>271</b> shares a one-to-one relationship with an extracted message. Each record is assigned a unique, monotonically increasing identification number (id) <b>275</b>. The files table <b>271</b> includes fields for storing the extracted message name <b>276</b>, type <b>277</b>, type confirmation <b>278</b>, path <b>279</b>, length <b>280</b>, modified date <b>281</b>, created date <b>282</b>, description <b>283</b>, owner key <b>284</b>, and Bates tag <b>286</b>. In addition, the hash code <b>261</b> for the extracted message, exclusive of any attachments, is stored in a hash code field <b>285</b>.</p>
<p id="p-0085" num="0084">The mail properties table <b>272</b> contains the message routing, identification information and literal content associated with each extracted message. Each record in the mail properties table <b>272</b> shares a one-to-one relationship with an associated record in the files table <b>271</b>. Each record in the mail properties table <b>272</b> is identified by a file identifier (FileId) <b>287</b>. The mail properties table <b>272</b> includes fields for storing message unique ID <b>288</b>, sent from <b>289</b>, sent to <b>290</b>, sent cc <b>291</b>, sent bcc <b>292</b>, sent date <b>293</b>, subject <b>294</b>, thread subject <b>295</b>, and message <b>296</b>. The hash code <b>261</b> is calculated by the digester <b>244</b> using select fields <b>302</b> of each record, which include all of the fields except the file identifier <b>287</b> and message unique ID <b>288</b> fields, although one skilled in the art would recognize that other combinations and selections of fields could also be used to calculate the hash code <b>261</b>.</p>
<p id="p-0086" num="0085">The compound documents table <b>273</b> and compound members table <b>274</b> share a one-to-many relationship with each other. The records in the compound documents table <b>273</b> and compound members table <b>274</b> store any attachments associated with a given extracted message stored in a record in the file table <b>271</b>. Each record in the compound documents table <b>273</b> contains a root file identifier (routeFileld) <b>297</b>. The compound documents table <b>273</b> includes fields for storing marked category <b>299</b> and the hash code <b>263</b> is stored in a hash code field <b>298</b>. Each record in the compound documents table <b>273</b> shares a one-to-many relationship with each attachment associated with an extracted message. Similarly, each record in the compound members <b>274</b> is uniquely identified by a file ID (FileId) <b>300</b> field and a compound document key field <b>301</b>.</p>
<p id="p-0087" num="0086"><figref idref="DRAWINGS">FIG. 16</figref> is a flow diagram showing a method <b>310</b> for evaluating a structured message store for message redundancy, in accordance with a further embodiment of the present invention. The method <b>310</b> operates in three phases. During the first phase, the individual message stores <b>21</b> and workgroup message stores <b>22</b> are obtained and consolidated into the archived message stores <b>236</b> (block <b>311</b>). The individual message stores <b>21</b> and workgroup message stores <b>22</b> can be in physically disparate storage formats, such as on archival tapes or other forms of on-line or off-line archival media, and could constitute compressed data. Consequently, each of the individual message stores <b>21</b> and workgroup message stores <b>22</b> are converted into a standardized on-line format for message identity processing.</p>
<p id="p-0088" num="0087">During the second phase, individual messages are extracted from the archived message stores <b>236</b> (block <b>213</b>), as further described below with reference to <figref idref="DRAWINGS">FIG. 17</figref>. Briefly, individual messages are extracted from the archived message stores <b>236</b>, digested into hash codes <b>261</b> and <b>263</b>, and stored as message records <b>248</b> in the database <b>235</b>.</p>
<p id="p-0089" num="0088">During the third phase, the extracted messages, as stored in message records <b>248</b> in the database <b>235</b>, are &#x201c;de-dupped,&#x201d; that is, processed to identify unique messages <b>265</b>, exact duplicate messages <b>266</b>, and near duplicate messages <b>267</b> (block <b>313</b>). Finally, the routine terminates.</p>
<p id="p-0090" num="0089"><figref idref="DRAWINGS">FIGS. 17A-B</figref> are flow diagrams showing the routine <b>320</b> for extracting messages for use in the method <b>310</b> of <figref idref="DRAWINGS">FIG. 16</figref>. The purpose of this routine is to iteratively process each of the extracted message stores <b>236</b> and individual messages to populate the message records <b>239</b> stored in the database <b>235</b>.</p>
<p id="p-0091" num="0090">The messages in each of the archived message stores <b>236</b> are iteratively processed in a pair of nested processing loops (blocks <b>321</b>-<b>333</b> and blocks <b>322</b>-<b>332</b>, respectively). Each of the archived message stores <b>236</b> is processed during an iteration of the outer processing loop (block <b>321</b>). Each message stored in an archived message store <b>236</b> is processed during an iteration of the inner processing loop (block <b>322</b>). Each message is extracted from an archived message store <b>236</b> (block <b>322</b>) and each extracted message is digested into a hash code <b>261</b> over at least part of the header, plus the complete message body, exclusive of any attachments (block <b>324</b>). Each hash code is a sequence of alphanumeric characters representing the content, also referred to as a digest. The hash codes are calculated using a one-way function to generate a substantially unique alphanumeric value, including a purely numeric or alphabetic value, associated with message or attachment. In the described embodiment, the MD5 hashing algorithm is used to form a fixed-length 128-bit digest of each extracted message and routing information. Next, the metadata for each extracted message is parsed and stored into records in the files table <b>271</b> and mail properties table <b>272</b> along with the hash code <b>261</b> and indexed by a unique identifier <b>275</b> (block <b>325</b>).</p>
<p id="p-0092" num="0091">If the extracted message contains one or more attachments (block <b>326</b>), each attachment is iteratively processed (blocks <b>327</b>-<b>329</b>) as follows. At least part of each attachment is digested by the digester <b>244</b> into a hash code <b>263</b> (block <b>328</b>). Each remaining attachment is iteratively processed (block <b>329</b>). The message hash code <b>261</b> and each attachment hash code <b>263</b> are concatenated into a compound hash code and are stored as a compound document record in the compound documents table <b>273</b> and the compound members table <b>274</b> (block <b>330</b>). Note the message hash code <b>261</b> and each attachment hash code <b>263</b> could also be logically concatenated and stored separately, as would be recognized by one skilled in the art. Each message in the archived message store <b>236</b> is iteratively processed (block <b>331</b>) and each archived message store <b>236</b> is iteratively processed (block <b>332</b>), after which the routine returns.</p>
<p id="p-0093" num="0092"><figref idref="DRAWINGS">FIGS. 18A-C</figref> are flow diagrams showing the routine <b>340</b> for de-duping messages for use in the method <b>310</b> of <figref idref="DRAWINGS">FIG. 16</figref>. The purpose of this routine is to identify unique messages <b>265</b>, exact duplicate messages <b>266</b>, and near duplicate messages <b>267</b> (&#x201c;de-dup&#x201d;) through a process known as &#x201c;culling.&#x201d;</p>
<p id="p-0094" num="0093">The messages stored in records in the database <b>235</b> are iteratively processed in a processing loop (blocks <b>341</b>-<b>346</b>). Each message is processed during an iteration of the processing loop (block <b>341</b>). First, the file record <b>271</b> corresponding to each message is retrieved from the database <b>235</b> (block <b>342</b>). If the message is not a compound message, that is, the message does not contain attachments (block <b>343</b>), the message hash code <b>261</b> is obtained (block <b>344</b>) and processing continues with the next message (block <b>346</b>). Otherwise, if the message is a compound message (block <b>343</b>), the compound hash code is obtained (block <b>345</b>) and processing continues with the next message (block <b>346</b>).</p>
<p id="p-0095" num="0094">Next, the messages are grouped by matching hash codes (block <b>347</b>) and each group of matching hash codes is iteratively processed in a processing loop (blocks <b>348</b>-<b>351</b>). Any groups with more than one message are processed to identify exact duplicates based on matching hash codes. A randomly selected message in the group is marked as a unique message (block <b>349</b>) and the remaining messages in the group are culled, that is, marked as exact duplicates messages (block <b>350</b>). Other methodologies for selecting the unique message can be used, as would be recognized by one skilled in the art. Processing continues with the next group (block <b>351</b>).</p>
<p id="p-0096" num="0095">Next, all non-exact duplicate messages are now iteratively processed for near-duplicates. The messages are grouped by conversation thread (block <b>352</b>). In the described embodiment, the messages are sorted in descending order of message body length (block <b>353</b>), although the messages could alternatively be sorted in ascending order, as would be recognized by one skilled in the art. The threads, messages, and &#x201c;shorter&#x201d; messages are then iteratively processed in a series of nested processing loops (blocks <b>354</b>-<b>365</b>, <b>355</b>-<b>364</b>, and <b>356</b>-<b>363</b>, respectively). Each thread is processed during an iteration of the outer processing loop (block <b>354</b>). Each message within the thread is processed during an iteration of an inner processing loop (block <b>355</b>) and each message within the thread having an equal or shorter length, that is, each shorter message, is processed during an iteration of an innermost processing loop (block <b>356</b>). The message bodies of the first message and the shorter message are compared (block <b>357</b>). If the message bodies are not contained within each other (block <b>358</b>), the shorter message is left marked as a unique message and the processing continues with the next shorter message (block <b>363</b>).</p>
<p id="p-0097" num="0096">Otherwise, if the message body of the shorter message is contained within the message body of the first message (block <b>358</b>), the attachment hash codes <b>263</b> are compared (block <b>359</b>) to identify unique messages <b>265</b> and near duplicate messages <b>267</b>, as follows. First, if the message does not include any attachments, the shorter message is culled, that is, marked as a near duplicate of the first message (block <b>362</b>). If the message includes attachments (block <b>359</b>), the individual attachment hash codes <b>263</b> are compared to identify a matching or subset relationship (block <b>360</b>). If the attachment hash codes <b>263</b> indicate a matching or subset relationship between the first message and the shorter message (block <b>361</b>), the shorter message is culled, that is, marked as a near duplicate message <b>267</b> of the first message (block <b>362</b>). Otherwise, the shorter message is left marked as a unique message <b>265</b>. Processing continues with the next shorter message in the thread (block <b>363</b>). After all shorter messages have been processed (block <b>363</b>), processing continues with the next message (block <b>364</b>) and next thread (block <b>365</b>), respectively. The routine then returns.</p>
<p id="p-0098" num="0097">While the invention has been particularly shown and described as referenced to the embodiments thereof, those skilled in the art will understand that the foregoing and other changes in form and detail may be made therein without departing from the spirit and scope of the invention.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-chemistry idref="CHEM-US-00001" cdx-file="US08626767-20140107-C00001.CDX" mol-file="US08626767-20140107-C00001.MOL"/>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A computer-implemented system for identifying near duplicate messages, comprising:
<claim-text>a processor coupled to a memory to execute the following modules comprising:
<claim-text>a message grouping module to group by conversation thread, messages each comprising a content body, wherein one or more of the messages also includes an attachment;</claim-text>
<claim-text>a message sorting module to sort the messages for each conversation thread in order of message length;</claim-text>
<claim-text>a message selection module to select for one of the threads at least one of the messages and to compare the body of the selected message with the body of one such shorter message in that thread;</claim-text>
<claim-text>a determination module to determine that the body of the shorter message is included in the body of the selected message;</claim-text>
<claim-text>a message relationship module to determine a relationship between the selected message and the shorter message by marking the shorter message as a near duplicate of the selected message if the selected message and the shorter message do not have attachments and by comparing hash codes of the attachments for the selected message and the shorter message, if the selected message and the shorter message each have attachments, and marking the shorter message as a near duplicate message of the selected message when the hash codes of the attachments match.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. A system according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:
<claim-text>a further comparison module to compare one of the other messages with each of the shorter messages in the thread;</claim-text>
<claim-text>a message determination module to determine that the body of one such shorter message is not included in the body of the other message; and</claim-text>
<claim-text>a comparison selection module to select a further one of the messages for comparison.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. A system according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:
<claim-text>a further comparison module to compare one of the other messages with the shorter messages in the thread;</claim-text>
<claim-text>a message determination module to determine that the body of one such shorter message is included in the body of the other message;</claim-text>
<claim-text>a further comparison module to compare hash codes of the attachments for the other message and the one such shorter message;</claim-text>
<claim-text>a hash determination module to determine that the hash codes do not match; and</claim-text>
<claim-text>a comparison selection module to select a further one of the messages for comparison.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. A system according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:
<claim-text>a hash generator to generate compound hash codes for each message with an attachment by generating a hash code based on at least part of a header associated with the message and the message body, by generating a hash code for the attachment, and by concatenating the hash codes for the message body and the attachment as the compound hash.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. A system according to <claim-ref idref="CLM-00004">claim 4</claim-ref>, further comprising:
<claim-text>a hash sorting module to sort the messages by hash code into groupings of the messages with the same hash code; and</claim-text>
<claim-text>a unique message module to randomly select one of the messages in at least one of the groupings as a unique message.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. A system according to <claim-ref idref="CLM-00005">claim 5</claim-ref>, further comprising:
<claim-text>a duplicate message marker to mark the remaining messages in the grouping as duplicate messages.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. A system according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:
<claim-text>a log to record the shorter message and the near duplicate marking of the shorter message.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. A system according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the near duplicate message comprises content that is recursively included in the selected message.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. A system according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:
<claim-text>a message inclusion module to identify the shorter message as being recursively included in the selected message based on a message separator and a subject line indicator.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. A method implemented by a computer comprising at least one processor for identifying near duplicate messages, comprising:
<claim-text>grouping by conversation thread, messages each comprising a content body, wherein one or more of the messages also includes an attachment;</claim-text>
<claim-text>sorting the messages for each conversation thread in order of message length;</claim-text>
<claim-text>for one of the threads, selecting at least one of the messages and comparing the body of the selected message with the body of one such shorter message in that thread;</claim-text>
<claim-text>determining that the body of the shorter message is included in the body of the selected message;</claim-text>
<claim-text>determining a relationship between the selected message and the shorter message comprising at least one of:
<claim-text>if the selected message and the shorter message do not have attachments, marking the shorter message as a near duplicate of the selected message; and</claim-text>
<claim-text>if the selected message and the shorter message each have attachments, comparing hash codes of the attachments for the selected message and the shorter message and marking the shorter message as a near duplicate message of the selected message when the hash codes of the attachments match.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. A method according to <claim-ref idref="CLM-00010">claim 10</claim-ref>, further comprising:
<claim-text>comparing one of the other messages with each of the shorter messages in the thread;</claim-text>
<claim-text>determining that the body of one such shorter message is not included in the body of the other message; and</claim-text>
<claim-text>selecting a further one of the messages for comparison.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. A method according to <claim-ref idref="CLM-00010">claim 10</claim-ref>, further comprising:
<claim-text>comparing one of the other messages with the shorter messages in the thread;</claim-text>
<claim-text>determining that the body of one such shorter message is included in the body of the other message;</claim-text>
<claim-text>comparing hash codes of the attachments for the other message and the one such shorter message;</claim-text>
<claim-text>determining that the hash codes do not match; and</claim-text>
<claim-text>selecting a further one of the messages for comparison.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. A method according to <claim-ref idref="CLM-00010">claim 10</claim-ref>, further comprising:
<claim-text>generating compound hash codes for each message with an attachment, comprising:
<claim-text>generating a hash code based on at least part of a header associated with the message and the message body;</claim-text>
<claim-text>generating a hash code for the attachment; and</claim-text>
<claim-text>concatenating the hash codes for the message body and the attachment as the compound hash.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. A method according to <claim-ref idref="CLM-00013">claim 13</claim-ref>, further comprising:
<claim-text>sorting the messages by hash code into groupings of the messages with the same hash code; and</claim-text>
<claim-text>randomly selecting one of the messages in at least one of the groupings as a unique message.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. A method according to <claim-ref idref="CLM-00014">claim 14</claim-ref>, further comprising:
<claim-text>marking the remaining messages in the grouping as duplicate messages.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. A method according to <claim-ref idref="CLM-00010">claim 10</claim-ref>, further comprising:
<claim-text>recording the shorter message and the near duplicate marking of the shorter message in a log.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. A method according to <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the near duplicate message comprises content that is recursively included in the selected message.</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. A method according to <claim-ref idref="CLM-00010">claim 10</claim-ref>, further comprising:
<claim-text>identifying the shorter message as being recursively included in the selected message based on a message separator and a subject line indicator.</claim-text>
</claim-text>
</claim>
</claims>
</us-patent-grant>

<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08626756-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08626756</doc-number>
<kind>B1</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>11874148</doc-number>
<date>20071017</date>
</document-id>
</application-reference>
<us-application-series-code>11</us-application-series-code>
<us-term-of-grant>
<us-term-extension>1297</us-term-extension>
<disclaimer>
<text>This patent is subject to a terminal disclaimer.</text>
</disclaimer>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>7</main-group>
<subgroup>00</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>17</main-group>
<subgroup>30</subgroup>
<symbol-position>L</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>707726</main-classification>
<further-classification>707769</further-classification>
<further-classification>707794</further-classification>
<further-classification>707999005</further-classification>
</classification-national>
<invention-title id="d2e55">Tagging data assets</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>5404506</doc-number>
<kind>A</kind>
<name>Fujisawa et al.</name>
<date>19950400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>  1  1</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>5493677</doc-number>
<kind>A</kind>
<name>Balogh et al.</name>
<date>19960200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>5617119</doc-number>
<kind>A</kind>
<name>Briggs et al.</name>
<date>19970400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>5644740</doc-number>
<kind>A</kind>
<name>Kiuchi</name>
<date>19970700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>715853</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>5787417</doc-number>
<kind>A</kind>
<name>Hargrove</name>
<date>19980700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>  1  1</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>5794242</doc-number>
<kind>A</kind>
<name>Green et al.</name>
<date>19980800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>5875446</doc-number>
<kind>A</kind>
<name>Brown et al.</name>
<date>19990200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>  1  1</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>5878406</doc-number>
<kind>A</kind>
<name>Noyes</name>
<date>19990300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>706 55</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>5897634</doc-number>
<kind>A</kind>
<name>Attalur et al.</name>
<date>19990400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>5903867</doc-number>
<kind>A</kind>
<name>Watari et al.</name>
<date>19990500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>704270</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>5937415</doc-number>
<kind>A</kind>
<name>Sheffield et al.</name>
<date>19990800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>5970505</doc-number>
<kind>A</kind>
<name>Ebrahim</name>
<date>19991000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>715236</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00013">
<document-id>
<country>US</country>
<doc-number>5987454</doc-number>
<kind>A</kind>
<name>Hobbs</name>
<date>19991100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00014">
<document-id>
<country>US</country>
<doc-number>6049799</doc-number>
<kind>A</kind>
<name>Mangat et al.</name>
<date>20000400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00015">
<document-id>
<country>US</country>
<doc-number>6052693</doc-number>
<kind>A</kind>
<name>Smith et al.</name>
<date>20000400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00016">
<document-id>
<country>US</country>
<doc-number>6055543</doc-number>
<kind>A</kind>
<name>Christensen et al.</name>
<date>20000400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00017">
<document-id>
<country>US</country>
<doc-number>6065026</doc-number>
<kind>A</kind>
<name>Cornelia et al.</name>
<date>20000500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00018">
<document-id>
<country>US</country>
<doc-number>6088694</doc-number>
<kind>A</kind>
<name>Burns et al.</name>
<date>20000700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00019">
<document-id>
<country>US</country>
<doc-number>6101556</doc-number>
<kind>A</kind>
<name>Piskiel et al.</name>
<date>20000800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00020">
<document-id>
<country>US</country>
<doc-number>6134540</doc-number>
<kind>A</kind>
<name>Carey et al.</name>
<date>20001000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00021">
<document-id>
<country>US</country>
<doc-number>6154213</doc-number>
<kind>A</kind>
<name>Rennison et al.</name>
<date>20001100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>715854</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00022">
<document-id>
<country>US</country>
<doc-number>6226792</doc-number>
<kind>B1</kind>
<name>Goiffon et al.</name>
<date>20010500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717120</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00023">
<document-id>
<country>US</country>
<doc-number>6327593</doc-number>
<kind>B1</kind>
<name>Goiffon</name>
<date>20011200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00024">
<document-id>
<country>US</country>
<doc-number>6453312</doc-number>
<kind>B1</kind>
<name>Goiffon et al.</name>
<date>20020900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>  1  1</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00025">
<document-id>
<country>US</country>
<doc-number>6460034</doc-number>
<kind>B1</kind>
<name>Wical</name>
<date>20021000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>  1  1</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00026">
<document-id>
<country>US</country>
<doc-number>6704739</doc-number>
<kind>B2</kind>
<name>Craft et al.</name>
<date>20040300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00027">
<document-id>
<country>US</country>
<doc-number>6785882</doc-number>
<kind>B1</kind>
<name>Goiffon et al.</name>
<date>20040800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717120</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00028">
<document-id>
<country>US</country>
<doc-number>7287029</doc-number>
<kind>B1</kind>
<name>Craft et al.</name>
<date>20071000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00029">
<othercit>Library of Congress, Cataloging Distribution Service, Subject Heading, 19<sup>th </sup>Edition, vol. 1, A-C, pp. vii-xvii, Washington, DC, Aug. 1996.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00030">
<othercit>Lisa Singh et al., &#x201c;Generating Association Rules from Semi-Structured Documents Using an Extended Concept Hierarchy&#x201d;, CIKM 97 Las Vegas, NV, 1997, pp. 193-200.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>23</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>707726</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>707758</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>7079992</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>707999002</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>707769</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>707794</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>707999005</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>12</number-of-drawing-sheets>
<number-of-figures>13</number-of-figures>
</figures>
<us-related-documents>
<continuation>
<relation>
<parent-doc>
<document-id>
<country>US</country>
<doc-number>10672252</doc-number>
<date>20030925</date>
</document-id>
<parent-grant-document>
<document-id>
<country>US</country>
<doc-number>7287029</doc-number>
</document-id>
</parent-grant-document>
</parent-doc>
<child-doc>
<document-id>
<country>US</country>
<doc-number>11874148</doc-number>
</document-id>
</child-doc>
</relation>
</continuation>
<continuation>
<relation>
<parent-doc>
<document-id>
<country>US</country>
<doc-number>09224915</doc-number>
<date>19990104</date>
</document-id>
<parent-grant-document>
<document-id>
<country>US</country>
<doc-number>6704739</doc-number>
</document-id>
</parent-grant-document>
</parent-doc>
<child-doc>
<document-id>
<country>US</country>
<doc-number>10672252</doc-number>
</document-id>
</child-doc>
</relation>
</continuation>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Craft</last-name>
<first-name>Daniel H.</first-name>
<address>
<city>Mountain View</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Pasqua</last-name>
<first-name>Joseph</first-name>
<address>
<city>Menlo Park</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="003" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Caro</last-name>
<first-name>Perry A.</first-name>
<address>
<city>San Jose</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="004" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Brotsky</last-name>
<first-name>Daniel C.</first-name>
<address>
<city>San Jose</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Craft</last-name>
<first-name>Daniel H.</first-name>
<address>
<city>Mountain View</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Pasqua</last-name>
<first-name>Joseph</first-name>
<address>
<city>Menlo Park</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="003" designation="us-only">
<addressbook>
<last-name>Caro</last-name>
<first-name>Perry A.</first-name>
<address>
<city>San Jose</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="004" designation="us-only">
<addressbook>
<last-name>Brotsky</last-name>
<first-name>Daniel C.</first-name>
<address>
<city>San Jose</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Schwegman Lundberg Woessner P.A.</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>Adobe Systems Incorporated</orgname>
<role>02</role>
<address>
<city>San Jose</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Lin</last-name>
<first-name>Shew-Fen</first-name>
<department>2166</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">Systems and apparatus, including computer program products, for tagging data assets. In one aspect, a computer program product includes instructions operable to cause a computer to establish a database of concept data elements, asset references, and associations. The concept data elements each represent a concept and have a hierarchy specified by concept hierarchy information. The asset references each include a storage location identifier for a corresponding one of a plurality of data assets. Each association defines a type of relationship, from a plurality of types of relationships, between a data asset and a concept represented by a concept data element.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="136.82mm" wi="144.53mm" file="US08626756-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="176.61mm" wi="158.83mm" file="US08626756-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="239.27mm" wi="182.37mm" file="US08626756-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="235.54mm" wi="150.03mm" file="US08626756-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="237.57mm" wi="175.94mm" orientation="landscape" file="US08626756-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="229.02mm" wi="130.81mm" file="US08626756-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="70.02mm" wi="198.63mm" file="US08626756-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="220.13mm" wi="170.35mm" file="US08626756-20140107-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00008" num="00008">
<img id="EMI-D00008" he="157.82mm" wi="162.14mm" file="US08626756-20140107-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00009" num="00009">
<img id="EMI-D00009" he="131.49mm" wi="109.39mm" file="US08626756-20140107-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00010" num="00010">
<img id="EMI-D00010" he="91.61mm" wi="201.34mm" file="US08626756-20140107-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00011" num="00011">
<img id="EMI-D00011" he="149.94mm" wi="155.19mm" file="US08626756-20140107-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00012" num="00012">
<img id="EMI-D00012" he="196.00mm" wi="169.67mm" orientation="landscape" file="US08626756-20140107-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?RELAPP description="Other Patent Relations" end="lead"?>
<heading id="h-0001" level="1">CROSS-REFERENCE TO RELATED APPLICATIONS</heading>
<p id="p-0002" num="0001">This application is a continuation application of, and claims priority to, U.S. patent application Ser. No. 10/672,252, entitled TAGGING DATA ASSETS, which was filed on Sep. 25, 2003, which is a continuation of U.S. patent application Ser. No. 09/224,915, entitled TAGGING DATA ASSETS, which was filed on Jan. 4, 1999, now issued as U.S. Pat. No. 6,704,739. The disclosures of the above applications are incorporated herein by reference in their entirety.</p>
<?RELAPP description="Other Patent Relations" end="tail"?>
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0002" level="1">BACKGROUND</heading>
<p id="p-0003" num="0002">This invention relates to tagging data assets.</p>
<p id="p-0004" num="0003">Diverse types of digital assets are stored in computer systems. For example, a computer system can store files and database records containing electronic mail messages, digitized photographs, compressed motion video, sound, and text. Such information can be stored as file objects in a hierarchically-arranged directory tree, or as records within a relational database. Some storage systems have limited organization capabilities that are restricted by static relationships between the stored digital asset and its location in the file system directory hierarchy or database.</p>
<p id="p-0005" num="0004">Improvements in the logical organization, storage, and retrieval of digital assets can be obtained using metadata. Metadata, also referred to as &#x201c;data about data,&#x201d; is information that can be used to describe characteristics of a stored asset and that can be altered independently of the asset itself. For example, metadata can be used to describe the author and creation data of a graphic image file without altering the stored graphic image.</p>
<heading id="h-0003" level="1">SUMMARY</heading>
<p id="p-0006" num="0005">In general, in one aspect, the invention features a method of responding to a user request that a computer program application open a data asset. The method includes presenting to the user a location interface to receive data asset location information from the user to locate a desired data asset. The location interface is linked to a searchable tag database that includes concept data elements, asset references, and associations. Concept data elements each represent a concept and have a hierarchy specified by concept hierarchy information. Asset references each comprise a storage location identifier for a corresponding data asset. Each association represents a relation between a data asset and a concept. The method also includes receiving from the user a query identifying a concept and a relation. In response to the query, the tag database may be used to identify a set of data assets each having a specified relation with an identified concept. The identified set of data assets may thereafter be presented to the user.</p>
<p id="p-0007" num="0006">In general, in another aspect, the invention features a computer program product, tangibly stored on a computer-readable medium, for responding to a user request that a computer program application open a data asset. The program includes instructions operable to cause a computer to present a location interface to the user, instructions to receive data asset location information from the user, instructions to link the location interface to a searchable tag database of concept data elements, asset references, and associations, instructions to receive a query identifying a concept and a relation, instructions to use the tag database to identify a set of data assets each having the relation with the concept, and instructions to present information identifying the set of data assets.</p>
<p id="p-0008" num="0007">Implementations may include one or more of the following features. The tag database can include a plurality of relation data elements. Each relation data element represents a relation between other tag database elements. Relations can have a hierarchy specified by relation hierarchy information. A tag data interface can be used to display concepts and relations that can be searched for during an &#x201c;open&#x201d; operation. A user can use the tag data interface to select elements defining a query. In response to the query, information identifying a set of data assets satisfying the query can be displayed. The set of data assets can be identified by finding each asset reference in the tag database having a specified relation (or a relation that is hierarchically related to the specified relation) with an identified concept (or with a concept what is hierarchically related to the identified concept). A query can identify multiple associations (each represented by a concept and corresponding relation) that are logically grouped. For example, multiple associations may be grouped using boolean logic operations. A user can use the tag data interface to select a data asset from the set of data assets, and a file handle for the selected asset can be returned to the application.</p>
<p id="p-0009" num="0008">In general, in another aspect, the invention features a method of responding to a user request that a computer program application save a data asset. The method includes presenting a storage interface to the user and linking the storage interface to a searchable tag database. The storage interface can be used to receive location information from the user to identify a storage location identifier for a data asset to be saved. The tag database includes concept data elements, asset references, and associations. The method also includes receiving location information and an association for the data asset being saved, and storing an asset reference and the association in the tag database.</p>
<p id="p-0010" num="0009">Implementations may include one or more of the following features. Information identifying all concepts and relations that can be selected during a &#x201c;save&#x201d; operation can be received from the tag database and displayed to a user through a tag data interface. The tag data interface can be used to select tag elements identifying associations for an asset. A tag creation interface can be provided to a user to define concepts, relations, and the hierarchical organization of concepts and relations. The asset location information may be a file name or a database identifier.</p>
<p id="p-0011" num="0010">The invention may provide one or more of the following advantages. Digital assets can be stored and organized based on user-defined criteria. Asset organization restrictions imposed by a computer file system hierarchy can be reduced. Dynamic organization of documents based on query parameters can be provided. Text-based descriptive data can be associated with non-text data. Organization, storage, and retrieval of assets by descriptive parameters can be provided. Descriptive information can be associated with stored data without altering the data's contents.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0004" level="1">DESCRIPTION OF DRAWINGS</heading>
<p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. 1</figref> is a computer system according to the invention.</p>
<p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. 2</figref> is a semantic network according to the invention.</p>
<p id="p-0014" num="0013"><figref idref="DRAWINGS">FIGS. 3A and 3B</figref> are hierarchies of data elements according to the invention.</p>
<p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. 4</figref> is a hierarchy of data elements according to the invention.</p>
<p id="p-0016" num="0015"><figref idref="DRAWINGS">FIGS. 5-9</figref> are relational database tables according to the invention.</p>
<p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. 10</figref> is a computer system software architecture according to the invention.</p>
<p id="p-0018" num="0017"><figref idref="DRAWINGS">FIGS. 11A and 11B</figref> are operating system procedures, according to the invention</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0005" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0019" num="0018">As shown in <figref idref="DRAWINGS">FIG. 1</figref>, a computer <b>110</b> includes software applications used to create and store data assets. These data assets can include word processing files, database files, picture files, database records, or any other type of electronically stored data. Once a data asset has been created, it can be stored in an asset storage system <b>112</b> (which may be a disk-based file system). Assets stored in the system <b>112</b> may thereafter be retrieved by the computer <b>110</b> as well as by other computers having access to the data asset on the storage system <b>112</b>. The storage system <b>112</b> can include multiple physical devices and can include local and remote storage devices. For example, the storage system <b>112</b> can include a local hard disk drive of computer <b>110</b> as well as remote server-based storage, storage across multiple servers on a network, and storage in a database. Assets in the storage system <b>112</b> can be organized in a hierarchical manner, such as files stored in a UNIX&#x2122; file system, or may be loosely organized, such as files stored across multiple computers connected by the Internet network, or may be rigidly organized, such as records stored in a relational database.</p>
<p id="p-0020" num="0019">The logical arrangement, cataloging, storage, and retrieval of data assets in the storage system <b>112</b> is facilitated by metadata tags (&#x201c;tags&#x201d;) associated with the stored data assets. Tags are used to represent concrete or abstract objects and ideas, and are used to organize data assets in the storage system <b>112</b> by relationships established between the tags and data assets. In the system <b>100</b>, tags are stored in a tag database <b>113</b> and, through software operations of the computer system <b>110</b> and of a tag-database server <b>111</b>, relationships are established between the tags and data assets. The relationships between tags in the database <b>113</b> and data assets in the storage system <b>112</b> can be independent of data asset storage types, the applications that create the data assets, and the arrangement of the assets in the storage system <b>112</b>.</p>
<p id="p-0021" num="0020">Tags can be stored in a tag database <b>113</b> by the tag database server <b>111</b>. Software programs executing on the computer <b>110</b> send requests <b>103</b> to the server and receive responses <b>104</b> from the server to access and alter tag data. Tag data manipulation and access requests <b>103</b> and tag server responses <b>104</b> can be exchanged when a data asset is initially created and stored in the storage system <b>112</b>, when an existing data asset is altered, or at other times as may be determined by a user of the computer system <b>110</b>. For example, a data asset <b>107</b> can be an Adobe FrameMaker&#xae; Version 5.5 file. The asset <b>107</b> can be stored in the system <b>112</b> by selecting the &#x2018;Save&#x2019; operation from the FrameMaker &#x2018;File&#x2019; menu and designating the storage system <b>112</b> as the storage destination for the asset <b>107</b>. Contemporaneous with the saving of file <b>107</b>, actions to create and/or alter tag data can be performed at the computer <b>110</b> and server <b>111</b>. For example, on a Microsoft Windows 95&#xae; system, tag data can be created at the computer <b>110</b> using modified operating system &#x2018;Save&#x2019; procedures. The modified &#x2018;Save&#x2019; procedures, as will be explained later, can provide an interface to a user at the computer <b>110</b> to receive tag data information or to derive tag information from file <b>107</b> contents. The tag data received from the user or derived from the file <b>107</b> can then be sent to the server <b>111</b> for storage in the tag database <b>113</b>. As explained below, the tag data sent to the database <b>113</b> can be interrelated with tag elements existing in the database <b>113</b> to logically catalog and logically organize the asset <b>107</b>.</p>
<p id="p-0022" num="0021">The logical organization and cataloging of tag data in the database <b>113</b> is provided through the use of a tag model. The tag model includes several tag categories and defines relationships allowed between tags of a given category and between tags in different categories. These tag relationships can be logically represented in the form of a semantic network (known herein as a &#x201c;tag network&#x201d;). As shown in <figref idref="DRAWINGS">FIG. 2</figref>, a tag network <b>200</b> is a lattice or graph structure formed from interconnected nodes <b>201</b>, <b>210</b>-<b>224</b>, and <b>240</b>-<b>245</b>. The tag network <b>200</b> provides a metadata description of an asset represented by node <b>201</b>. As described by the tag network <b>200</b>, and as will be more fully explained below, the asset represented by node <b>201</b> is a document about monochrome printers entitled &#x201c;HP 1703 Specification,&#x201d; is related to a project named Jasper, has an author named &#x201c;Simons&#x201d; and a primary author named &#x201c;Jones.&#x201d;</p>
<p id="p-0023" num="0022">A tag semantic network can represent assets in the storage system <b>112</b> (<figref idref="DRAWINGS">FIG. 1</figref>) using asset reference tags (&#x201c;asset references&#x201d;). For example, the network <b>200</b> includes the asset reference <b>201</b>. An asset reference is directly related to an asset stored in the storage system <b>112</b>. Asset references include pointer data identifying a method to retrieve a stored asset. The stored pointer data can include a hierarchical file system directory and file name, a URI (Uniform Resource Identifier), a Structured Query Language (SQL) program, or other asset retrieval information. Asset references can also include additional data, such as the asset type and information about the asset's representation in the storage system <b>112</b>. Each asset reference in the network <b>200</b> can be formed by operating system procedures that provide appropriate pointer data and instructions to a tag server <b>111</b> when data assets are stored in the storage system <b>112</b> (<figref idref="DRAWINGS">FIG. 1</figref>).</p>
<p id="p-0024" num="0023">A tag network includes various metadata elements that can be interrelated and used to describe stored assets. One tag model metadata type, referred to as a &#x201c;named concept,&#x201d; is used to describes concrete or abstract idea that a user may wish to interrelate with asset references. For example, the idea of a computer printer is represented by concept <b>214</b> uniquely named &#x201c;Printer.&#x201d; Named concepts can be associated with asset references, and with other tags in a tag network. Named concepts can be created using an interface provided at computer <b>100</b> or server <b>111</b> whereby a user can enter unique text strings describing a concept. After entry of the unique text string, data storage instructions are provided to the server <b>111</b> to store each string as a concept in the tag database <b>113</b>. Additionally, associations between named concepts and asset references can be created by a user using an interface provided at computer <b>100</b> or server <b>111</b>.</p>
<p id="p-0025" num="0024">Named concepts can be hierarchically organized through the use of user-specified refinements. In the tag network <b>200</b>, refinements are shown as solid lines interconnecting named concepts <b>210</b>-<b>218</b>, and <b>220</b>-<b>222</b>. As shown in <figref idref="DRAWINGS">FIGS. 2 and 3A</figref>, refinements interconnecting named concepts <b>210</b>-<b>218</b> and <b>220</b>-<b>222</b> establish three concept hierarchies. The first hierarchy <b>300</b> includes concepts <b>210</b>-<b>214</b> related to product types, the second hierarchy <b>310</b> includes concepts <b>214</b>-<b>218</b> related to printer color capabilities, and the third hierarchy <b>320</b> includes concepts <b>220</b>-<b>222</b> related to people. Concept hierarchies allow a parent concept to be partitioned into multiple child concept subdivisions. Additionally, concept hierarchies can be used to establish peer relationships among concepts. For example, in the semantic network <b>200</b>, the parent concept &#x201c;Product&#x201d; <b>210</b> is subdivided into two child concepts &#x201c;Computer S/W&#x201d; <b>211</b> and &#x201c;Computer H/W&#x201d; <b>212</b>. The child concepts <b>211</b> and <b>212</b> are peers since they are each direct refinements of a common parent concept <b>210</b>. A concept may also have multiple parent concepts if it is a logical subdivision of each. Thus, concepts may be flexibly arranged in a variety of lattice or directed graph structures. For example, a user may organize a &#x201c;car&#x201d; concept as a subdivision of a &#x201c;product&#x201d; concept but also consider the &#x201c;car&#x201d; concept as a subdivision of a &#x201c;entertainment&#x201d; concept (not shown) if he or she is a car enthusiast. Refinements may be specified by a user using a graphical user interface (GUI) at the computer <b>110</b> or server <b>111</b> to specify parent-child relationships. For example, a user can specify a parent-child relationship by dragging a graphical icon representative of a child concept onto a graphical icon representative of a parent concept.</p>
<p id="p-0026" num="0025">The hierarchical organization of concepts facilitates navigation of a tag network and facilitates searching for data in the tag network. For example, a user may wish to search the tag network <b>200</b> to retrieve all assets associated with the product concept <b>210</b>. To do so, a user may select the product concept <b>210</b> using a search query interface provided at computer <b>110</b>. As can be seen in <figref idref="DRAWINGS">FIG. 2</figref>, no asset references are directly associated with the product concept <b>210</b>. However, the network <b>200</b> includes asset reference <b>201</b> that is associated with the printer concept <b>214</b> through a concept instance <b>240</b>. As will be explained below, each concept instance functions as a logical-surrogate for the concept that it is an instance of. Using information concerning the hierarchical relationship <b>300</b> (<figref idref="DRAWINGS">FIG. 3A</figref>) among concepts <b>210</b>-<b>214</b>, a tag network search routine can determine that the printer concept <b>214</b> is a subdivision of the computer hardware concept <b>212</b> which, in turn, is a subdivision of the product concept <b>210</b>. A tag network search routine can therefore conclude that the printer concept <b>214</b> is a subdivision of the product concept and therefore the printer concept <b>214</b> logically satisfies a search for the product concept <b>210</b>. The search routine can therefore determine that asset reference <b>201</b> satisfies a query for assets associated with the product concept <b>210</b>.</p>
<p id="p-0027" num="0026">In the above example, it was appropriate for the search routines to consider subdivision of a concept when trying to find a match for the concept in the network. In other instances it is appropriate to search only for the specific concept or even to consider the ancestors rather than descendents. This may be specified as search routine query parameters.</p>
<p id="p-0028" num="0027">A tag network can also include anonymous concepts. Like named concepts, anonymous concepts can be joined by refinements to other anonymous concepts and to named concepts. Unlike named concepts, however, anonymous concepts do not require a unique distinguishing name. Instead, anonymous concepts are uniquely distinguished by the refinement relations between the anonymous concept and other anonymous or named concepts. Anonymous concepts can be used to group descendent concepts and alter peer relationships among concepts in a concept hierarchy.</p>
<p id="p-0029" num="0028">Implementations of the tag model can also include interconnection points <b>240</b>-<b>245</b>, referred to as &#x201c;concept instances.&#x201d; Concept instances function as logical surrogates for the concepts that they are instances of. Concept instances can be used to organize and structure logical interconnection between concepts and other types of metadata in a tag network. For example, in the network <b>200</b>, concept instance <b>240</b> is used as a connection point between asset reference <b>201</b> and the &#x201c;Printer&#x201d; concept <b>214</b>. A single concept can have multiple instances that descend from the concept. Each concept instance is uniquely defined by the concept from which it descends and by its detail associations (explained later) to other tag network elements. Thus, through the use of concept instances, particular interconnections to a concept can remain logically distinct and separate from other interconnections to that concept. In some implementations, concept instances may be created automatically by the server <b>111</b> whenever an association to a concept element or between concept elements is created.</p>
<p id="p-0030" num="0029">In addition to concepts, instances, and asset references, a tag network can include primitive data elements. Primitive data elements are general-purpose storage types used to represent, for example, integers, floating-point numbers, character strings, and dates that are entered by a user or created in the system <b>100</b>. For example, in the tag network <b>200</b>, a string primitive is used to store the string value &#x201c;HP 1703 Specification&#x201d; <b>260</b> and a date primitive is used to store the date <b>261</b> that the asset was first encountered. The string primitive <b>260</b> may be entered by a user while the data primitive <b>261</b> may be set by the computer <b>110</b>. The value of a primitive data element can be dynamically altered.</p>
<p id="p-0031" num="0030">By interrelating concepts, instances, asset references, primitive elements, and other tag model elements, a meaningful description of a stored asset can be structured. Such interrelations can be provided through association relationships (&#x201c;associations&#x201d;). Associations can be specified by a user when a non-hierarchical relationship exists between a source and a target concept, concept instance, asset reference, or primitive data element. In the tag network <b>200</b>, associations are shown as dashed lines <b>250</b>-<b>256</b>. For example, in the network <b>200</b>, asset reference <b>201</b> pertains to a document about monochrome printers. Asset reference <b>201</b> is therefore logically related to the printer concept <b>214</b> but is not a sub-division of the printer concept <b>214</b>. Since asset reference <b>201</b> is not a sub-division of the printer concept <b>214</b>, it is semantically incorrect to use a refinement relationship to interconnect the asset reference <b>201</b> and the Printer concept <b>214</b>. Instead, the relationship between the asset reference <b>201</b> and Printer concept <b>214</b> is specified through the use of an association <b>251</b>.</p>
<p id="p-0032" num="0031">Associations include &#x201c;about&#x201d; associations <b>250</b>-<b>251</b> and &#x201c;named&#x201d; associations <b>252</b>-<b>256</b>. An about association provides information &#x201c;about&#x201d; a source that is expressed by a target. For example, an about association <b>250</b> exists between asset reference <b>201</b> and the instance <b>245</b> of the &#x201c;Jasper&#x201d; concept <b>224</b>. The association <b>250</b> thereby describes the asset referred to by the reference <b>201</b> as being &#x201c;about&#x201d; the Jasper project <b>224</b>. Associations between a source and target can also be described using named associations. Named associations include additional information describing the nature of the association between the source and target of the association.</p>
<p id="p-0033" num="0032">The additional detail provided by a named association is referred to as the &#x201c;relation&#x201d; between the source and target. In the tag semantic network <b>200</b>, named associations <b>252</b>-<b>256</b> have, respectively, relations <b>272</b>-<b>276</b> entitled &#x201c;Author&#x201d;, &#x201c;Primary Author&#x201d;, &#x201c;Encounter Via&#x201d;, &#x201c;Encounter On&#x201d;, and &#x201c;Title.&#x201d; A named association's relation provides further information regarding the association between a source and a target. For example, the named association <b>253</b> has the &#x201c;Primary Author&#x201d; relation <b>273</b>, This relation <b>273</b> indicates that &#x201c;Jones&#x201d; <b>222</b> is the primary author of the document referred to by asset reference <b>201</b>. In various implementations, an &#x201c;about&#x201d; association may be implemented as a named association with a blank or null-value as its name or a particular predetermined relation value may be used to indicate &#x201c;about&#x201d; associations.</p>
<p id="p-0034" num="0033">Like concepts, relations can be user defined and hierarchically-organized. As shown in <figref idref="DRAWINGS">FIG. 4</figref>, three hierarchies <b>450</b>, <b>460</b>, <b>470</b> are formed from relations <b>272</b>-<b>277</b>, <b>401</b>, and <b>402</b>. Relations <b>272</b>-<b>277</b> are referenced by named associations <b>252</b>-<b>257</b> (<figref idref="DRAWINGS">FIG. 2</figref>) while relations <b>401</b> and <b>402</b> exist in the hierarchies <b>460</b> and <b>470</b> but are not referenced by a named association. The hierarchical organization of relations, like that of concepts, facilitates navigation of a tag network and facilitates searching for data in the tag network. For example, a user may wish to search for a document with an author of &#x201c;Jones.&#x201d; To do so, search routines are used to search the tag network <b>200</b> to find an association with the relation &#x201c;Author&#x201d; interconnecting an asset reference and an instance of the &#x201c;Jones&#x201d; concept. In the network <b>200</b>, no such association exists. However, using the relation hierarchy <b>460</b> (<figref idref="DRAWINGS">FIG. 4</figref>), a search routine could determine that the &#x201c;Primary Author&#x201d; relation <b>273</b> is a subdivision of the &#x201c;Author&#x201d; relation <b>272</b> and therefore satisfies queries requiring the &#x201c;Author&#x201d; relation <b>272</b>. Thus a search routine could determine that the asset reference <b>201</b> having a &#x201c;Primary Author&#x201d; of &#x201c;Jones&#x201d; satisfies a query for assets with an &#x201c;Author&#x201d; of &#x201c;Jones.&#x201d; As with searching over concepts, searching over relations may also consider only the specified relation or ancestors of that relation.</p>
<p id="p-0035" num="0034">At times, a user may wish to refine one or more concepts without creating further subdivisions of the particular concepts. This may be desirable where, for example, a second and distinct concept hierarchy includes the desired subdivision information. In such a case, the user may want to subdivide a concept using information from the second hierarchy but without duplicating the second hierarchy as a descendent of the concept to be subdivided. For example, as shown in <figref idref="DRAWINGS">FIG. 3B</figref>, a tag network <b>350</b> includes concept hierarchies <b>360</b> and <b>370</b>. Concept hierarchy <b>360</b> including concepts <b>361</b>-<b>365</b> related to products and, in particular, includes concept <b>363</b> representing the Adobe Illustrator&#xae; software product. Concept hierarchy <b>370</b> includes concepts <b>371</b>-<b>375</b> related to computer operating systems. A user may wish to subdivide the Illustrator concept <b>363</b> based on operating systems that the software runs on. Although a user can use refinements to subdivide the Illustrator concept <b>363</b> into additional operating-system dependent subdivision concepts, it may be preferable to refer instead to the concept hierarchy <b>370</b>. To do so, the user can make use of a particular type of association referred to as a &#x2018;detail&#x2019; association.</p>
<p id="p-0036" num="0035">A detail association permits a user to subdivide a concept or instance using a reference to another concept or concept hierarchy in a tag network. In the network <b>350</b>, detail associations are shown as dotted lines <b>351</b>-<b>353</b> interconnecting instances <b>381</b>-<b>383</b> with, respectively, concept <b>372</b> and with instances <b>384</b> and <b>385</b>. A detail association, like a named association, includes a relation. Detail associations <b>351</b> and <b>352</b> each include the &#x201c;Runs On&#x201d; relation <b>355</b> while detail association <b>353</b> includes the &#x201c;Works with&#x201d; relation <b>356</b>. The detail's relation describes the nature of the details being added to the concept or instance. For example, instance <b>381</b> of the Illustrator concept <b>363</b> has detail association <b>351</b>. The detail association <b>351</b> has the &#x201c;Runs On&#x201d; relation <b>355</b> and couples the instance <b>381</b> to an instance <b>385</b> of the UNIX&#xae; operating system concept <b>375</b>. The detail association <b>351</b> thereby indicates that the instance <b>381</b> of the Illustrator concept <b>363</b> refers to a version of the Adobe Illustrator&#xae; software that runs on a UNIX operating system. Consequently, if an asset reference were to have an about association to the instance <b>381</b> it would indicate that the referenced asset was &#x2018;about&#x2019; Illustrator software running on a UNIX operating system.</p>
<p id="p-0037" num="0036">Each instance or concept can include multiple detail associations. For example, instance <b>381</b> could include a second detail association (not shown) having the relation &#x201c;version&#x201d; to a numeric primitive element having a value of 5.5 (not shown). The combination of the detail <b>351</b> with this second detail would indicate that instance <b>381</b> refers to version 5.5 of Illustrator that runs on UNIX. Each concept instance, e.g., <b>381</b>-<b>385</b> of <figref idref="DRAWINGS">FIG. 3</figref>, in a tag semantic network is uniquely defined by its parent concept and its collection of detail associations. In various implementations, relation hierarchies may or may not be considered during a search for a particular detail. Thus, in some implementations, a search for a instance having a particular detail association will be so satisfied only by the detail having the particular specified relation.</p>
<p id="p-0038" num="0037">Implementations of the tag model may also include rules placing particular requirements or restrictions on the organization of tag data. These rules, known as prescriptions, can help ensure a consistent and meaningful organization of tag data. For example, a consistent organization of tag data may be enforced by prescriptions requiring particular detail associations for instances of a specified concept. The tag model may also include prescriptions limiting refinements, associations, and the accepted data range for the values of particular primitive elements. Prescriptions affecting a concept or relation may be inherited by descendent concepts, instances and relations. For example, as shown in <figref idref="DRAWINGS">FIG. 3B</figref>, the computer software concept <b>362</b> may have a prescription requiring all instances of the concept <b>362</b> to include a &#x201c;Runs On&#x201d; detail association. This prescription may be inherited by descendent concepts such as the Illustrator concept <b>363</b> thereby requiring instances <b>381</b> and <b>382</b> of the Illustrator concept <b>363</b> to have a detail including the &#x201c;Runs On&#x201d; relation <b>355</b>. Inherited prescriptions may affect both population of data structures and navigation of the tag network. For example, during searching and data entry, if a user fails to specify a particular required detail association, that detail may, by default, have a distinguished target value of &#x201c;all.&#x201d; The &#x201c;all&#x201d; value will match any particular value specified in a search.</p>
<p id="p-0039" num="0038">In a multi-user implementations, tag model data may be simultaneously accessed, deleted, and updated by multiple users or software processes. Alterations made by a first user or application may, in some circumstances, be problematic. In particular, alterations made by a first user or application may change the aggregate information in the tag model database so as to alter a second user's or program's understanding of the information. The second user or application may thereafter behave in an erroneous manner due to its incorrect understanding of the state of the tag model data. Therefore, the tag model may implement a data integrity mechanism called a &#x2018;contract&#x2019; that avoids such errant behavior. A contract is a request between a user or application and the tag model database indicating that the requesting user or application needs to maintain a particular view of certain specified tag model elements. When a contract has been established, the tag model database server limits alterations that can be subsequently so made. If a second user or application requests a change to the tag model database, and that change would cause a contract to be broken, the tag model database server may prevent the operation or may require the second user to explicitly break the contract such as by entering a command to override the contract.</p>
<p id="p-0040" num="0039">Tag data may be presented and manipulated independent of specific software applications. This can be done, for example, using modified operating system functions or through the use of a tag data helper application. As shown in <figref idref="DRAWINGS">FIGS. 1 and 10</figref>, a computer <b>110</b> has a software environment <b>1000</b> including one or more application software programs <b>1010</b> and operating system software <b>1020</b>. The application software <b>1010</b> is, for example, the Adobe Illustrator program and the operating software <b>1020</b> is, for example, a graphical user interface (GUI) operating system such as Microsoft Windows 95. By modifying operating system software <b>1020</b>, operations on data in the tag database <b>113</b> can be initiated by a software application <b>1010</b> without requiring the explicit alteration of the application.</p>
<p id="p-0041" num="0040">Modifications to the operating system <b>1020</b> to provide tag data features can include modifications to operating system procedures that provide &#x2018;Save&#x2019; <b>1021</b> and &#x2018;Open&#x2019; <b>1022</b> functionality. Such procedures may be used to create a file system handle that is subsequently used by the operating system <b>1020</b> or application procedure <b>1010</b> to store, retrieve, or manipulate a data asset. As shown in <figref idref="DRAWINGS">FIGS. 10</figref>, <b>11</b>A and <b>11</b>B, a GUI operating system <b>1020</b> typically includes graphical interface functions to facilitate file &#x2018;Save&#x2019; and &#x2018;Open&#x2019; operations. These save and open may be initiated by a selection provided in a graphical menu and, when initiated, may provide functions as shown in <figref idref="DRAWINGS">FIG. 11A</figref>. In particular, &#x2018;Save&#x2019; and &#x2018;Open&#x2019; operations may present a GUI interface to receive input from a user <b>1061</b>. In response, asset storage data is received from the user <b>1064</b>. The received data identifies a location in the storage system <b>112</b> (<figref idref="DRAWINGS">FIG. 1</figref>) where a data asset can be stored or where a previously stored data asset can be found. Additionally, a file system handle is determined <b>1067</b> and provided to the application that initiated the &#x2018;Save&#x2019; or &#x2018;Open&#x2019; operation <b>1068</b>. The application may subsequently use the file handle to store or manipulate a data asset in the storage system <b>112</b> (<figref idref="DRAWINGS">FIG. 1</figref>).</p>
<p id="p-0042" num="0041">&#x2018;Save&#x2019; and &#x2018;Open&#x2019; procedures provided by an operating system <b>1020</b> can be modified and the modified procedures linked to a program application to access and manipulate tag data. For example, &#x201c;Save&#x201d; and &#x201c;Open&#x201d; procedures provided in a dynamically linked library (such as in a Microsoft Windows 95 &#x201c;.dll&#x201d; dynamically linked library) can be modified. When an application using the particular dynamically linked library is linked to the modified library, such as by operating system run-time linking procedures, the new tag database capabilities present in the modified library will be available to the application. As shown in <figref idref="DRAWINGS">FIGS. 1</figref>, <b>10</b>A and <b>10</b>C, data asset software access procedures executing on a computer <b>110</b> can include functions to store and manipulate tag data in a tag database <b>113</b> (<figref idref="DRAWINGS">FIG. 1</figref>) when these operating system &#x2018;Save&#x2019; and &#x2018;Open&#x2019; functions are initiated by an application <b>1010</b>.</p>
<p id="p-0043" num="0042">Referring to <figref idref="DRAWINGS">FIGS. 1</figref>, <b>10</b> and <b>11</b>B, to manipulate tag data in the database <b>113</b> &#x2018;Save&#x2019; and &#x2018;Open&#x2019; procedures can, for example, present a GUI interface to receive asset location information from a user <b>1071</b>. Additionally, an initial query is sent from the operating system <b>1020</b> to the tag server <b>111</b> to determine the state of tag networks in the tag database <b>113</b>. The initial query can be sent using operating system remote procedure calls to send a request to the tag server <b>111</b>. In response, the tag server may return a listing of all concepts, named associations, and relations that can be associated with a data asset being saved or that can be searched for during an &#x2018;Open&#x2019; operation.</p>
<p id="p-0044" num="0043">Tag information returned by the tag server <b>111</b> to the save <b>1021</b> or open <b>1022</b> procedure can then be displayed to a user using a tag data interface (step <b>1173</b>). The tag data interface (step <b>1173</b>) can be a graphical user interface that allows a user to select particular tag elements, enter new tag elements, or compose arrangements of elements such as concepts, associations, relations, and details. During a file open operation, the tag data received at the interface (step <b>1173</b>) can be used to form a second tag query (step <b>1174</b>). In response to the query (step <b>1174</b>), the tag server <b>111</b> can invoke search routines to identify a list of data assets and their storage locations. This data asset list can be returned to the &#x2018;Open&#x2019; procedure and presented to the user of the computer <b>110</b> (step <b>1175</b>). The user can then select one of the listed assets as the target of the &#x201c;Open&#x201d; procedure (step <b>1176</b>). Subsequently, a file handle is determined (step <b>1177</b>) and returned to an application <b>1110</b> for subsequent use by application <b>1010</b> and operating system <b>1020</b> so software procedures (step <b>1178</b>). An application program may subsequently manipulate the identified asset. Many modifications may be made to the exemplary procedures of <figref idref="DRAWINGS">FIGS. 11A and 11B</figref>. Additionally, modified operating system procedures are not limited to procedures like &#x2018;Open&#x2019; and &#x2018;Save,&#x2019; but may be extended to many types of operating system procedures. For example, if a data asset is to be printed, the print procedures can query the tag server <b>111</b> (<figref idref="DRAWINGS">FIG. 1</figref>) to determine printer-related characteristics of the data asset. For example, data in the tag database <b>113</b> (<figref idref="DRAWINGS">FIG. 1</figref>) may indicate that the data asset is a color picture and therefore should be printed using a color output device.</p>
<p id="p-0045" num="0044">Modified operating system procedures are only one way to access, create, and manipulate tag data. A tag data viewer application can be used to access, create, and manipulate data in the tag database. A tag data viewer is a software application that exchanges data with the tag server <b>111</b> (<figref idref="DRAWINGS">FIG. 1</figref>) to manipulate data in the tag database <b>113</b>. The tag viewer provides software functions to identify particular assets in the storage system <b>112</b>. These functions can include Internet browser-like functions to select data stored on hypertext markup language (HTML) servers. Additionally, functions to examine data assets in a database, on a hard disk, or on a collection of network servers may be included. For example, a tag viewer can be used to browse directories graphically in a hierarchical file system. Once a user has identified a data asset using the tag viewer, the asset can be associated with tag data. The tag viewer may query the tag server <b>111</b> to identify tags that can be associated with the identified asset, present the identified tags to a user, allow a user to select tags, and facilitate the creation of new tags and tag interrelations.</p>
<p id="p-0046" num="0045">A tag semantic network can be implemented using various data structuring techniques. In the embodiment described below, the tag semantic network is implemented using multiple tables stored in a relational database. As shown in <figref idref="DRAWINGS">FIGS. 5-9</figref>, in an exemplary relational database implementation, the tag model uses the following database tables: &#x201c;Asset_Refs&#x201d; <b>500</b>, &#x201c;Concepts&#x201d; <b>600</b>, &#x201c;Concept_Instances&#x201d; <b>625</b>, &#x201c;Concept_Refinements&#x201d; <b>650</b>, &#x201c;Relations&#x201d; <b>700</b>, &#x201c;Relation_Refinements&#x201d; <b>725</b>, &#x201c;Associations&#x201d; <b>800</b>, &#x201c;Strings&#x201d; <b>900</b>, &#x201c;Numbers&#x201d; <b>925</b>, &#x201c;Dates&#x201d; <b>950</b>. The tables in <figref idref="DRAWINGS">FIGS. 5-9</figref> correspond to the examples in <figref idref="DRAWINGS">FIGS. 2</figref>, <b>3</b>A, and <b>4</b>.</p>
<p id="p-0047" num="0046">As shown in <figref idref="DRAWINGS">FIG. 5</figref>, asset references can be stored in the &#x201c;Asset_Refs&#x201d; database table <b>500</b>. Each row of the table <b>500</b> encodes a separate asset reference. An encoded asset reference includes, for example, a URI (Uniform Resource Identifier) or other data identifying how the asset is accessed. Each asset reference may also include format information to indicates the type of stored asset. For example, the format identification information can be used to indicate that the stored asset is a text file or an Adobe Photoshop&#xae; file. Each asset reference may also include an identification number that uniquely identifies the asset reference. The identification number may be used in other tag model database tables to identify the asset reference.</p>
<p id="p-0048" num="0047">As shown in <figref idref="DRAWINGS">FIG. 6</figref>, concept definitions can be stored in the &#x201c;Concepts&#x201d; table <b>600</b>. For each concept in the tag model, the table <b>600</b> includes a row having a unique numerical identification, the concept's unique name, and an indication of whether the concept is anonymous. For example, the product concept <b>210</b> (<figref idref="DRAWINGS">FIG. 2</figref>) is stored as the unique name string &#x201c;Product&#x201d; and the unique identification number <b>210</b>. The identification number is a mechanism used to refer indirectly to the concept definition in other tag model database tables. In alternative implementations, the unique concept name, a memory pointer, or other identifier may also be used to refer to a concept. Concept instances can be stored in the &#x201c;Concept_Instances&#x201d; table <b>625</b>. Each row of the Concept_Instances table <b>625</b> includes a unique instance identification number and the identification number of the concept to which the instance refers.</p>
<p id="p-0049" num="0048">Concept refinements can be stored in the &#x201c;Concept_Refinements&#x201d; table <b>650</b>. The &#x201c;Concept_Refinements&#x201d; table <b>650</b> defines the hierarchical relationships among concepts in the &#x201c;Concepts&#x201d; table <b>600</b>. In the table <b>650</b>, concepts are identified by the concept identification numbers defined in table <b>600</b>. Each row of the &#x201c;Concept_Refinements&#x201d; table <b>650</b> defines a relationship between an ancestor concept and a descendent concept (ancestor-descendent relationships include parent-child relationships, in which there is a direct relationship between the ancestor and the descendent, and also include relationships in which the ancestor and descendent are separated by multiple hierarchical levels). Multiple child concepts can be directly connected to a common parent concept thereby forming subdivisions of the parent conceit. For example, rows <b>651</b>-<b>654</b> form the hierarchical concept relationship <b>300</b> (<figref idref="DRAWINGS">FIG. 3A</figref>). Multiple parent concepts can be directly connected to a common descendent concept (not shown). The &#x201c;Concept_Refinements&#x201d; table may also indicate indirect relationships in the concept hierarchy. For example, row <b>660</b> of table <b>650</b> indicates that the Illustrator concept is a descendent of the Product concept. However, since the Illustrator concept is at a minimum distance of &#x2018;2&#x2019; from the Product concept, the Product concept is not a parent ancestor of the Illustrator concept. Indirect relationships can be used to optimize search functions by allowing ancestor-descendent relationships to be determined without traversing a concept hierarchy at search time. The distance between concepts need not be included in the &#x201c;Concept_Refinements&#x201d; table <b>650</b> if only parent-child relations (i.e., direct relations between ancestor and descendent concepts) are represented.</p>
<p id="p-0050" num="0049">As shown in <figref idref="DRAWINGS">FIG. 7</figref>, relations can be stored in the &#x201c;Relations&#x201d; table <b>700</b>. For each relation in the tag model, the table <b>700</b> includes a row having a unique numerical identification and the relation's unique name. For example, the &#x201c;Title&#x201d; Relation <b>434</b> (<figref idref="DRAWINGS">FIG. 4</figref>) is stored in row <b>703</b>, which includes the relation name &#x201c;Title&#x201d; and the identification number &#x2018;276&#x2019;. Relation identification numbers are used to refer indirectly to the relation in other tag model database tables. In alternative implementations, the unique relation name, a memory pointer, or other identifier may also be used to refer to the relation.</p>
<p id="p-0051" num="0050">Relation refinements can be stored in the &#x201c;Relation_Refinements&#x201d; table <b>725</b>. The &#x201c;Relation_Refinements&#x201d; table <b>725</b> defines the hierarchical relationship among relations in the &#x201c;Relations&#x201d; table <b>700</b>. Each row of the table <b>725</b> defines a relationship between an ancestor Relation and a descendent Relation. Multiple descendent Relations can have a common ancestor Relation thereby forming subdivisions of the ancestor Relation. For example, rows <b>726</b>-<b>728</b> form the Relation hierarchy <b>460</b> (<figref idref="DRAWINGS">FIG. 4</figref>). Like the &#x201c;Concept_Refinements&#x201d; table <b>650</b>, the &#x201c;Relation_Refinements&#x201d; table <b>725</b> may, in various implementations, indicate indirect relationships by including, for example, indirect relations and minimum distance data.</p>
<p id="p-0052" num="0051">As shown in <figref idref="DRAWINGS">FIG. 8</figref>, primitives can be stored in tables <b>800</b>, <b>825</b>, <b>850</b>. The tables <b>800</b>, <b>825</b>, <b>850</b> store, respectively, string primitives, numeric primitives, and date primitives. Each row of primitive tables <b>800</b>, <b>825</b>, <b>850</b> includes an identification number and the value of the primitive. The identification number may be used as the target of an association. An implementation may also include additional tables or language type identification information stored along with data representing other primitive elements.</p>
<p id="p-0053" num="0052">As shown in <figref idref="DRAWINGS">FIG. 9</figref>, the &#x201c;Associations&#x201d; table <b>900</b> can store associations between source and target concepts, instances, asset references and primitive values. Each row of the table <b>900</b> defines an association between a source and a target. Additionally, each row of the table <b>900</b> includes a source type identifier and a target type identifier. For example, the type identifiers &#x2018;A&#x2019;, &#x2018;C&#x2019;, &#x2018;I&#x2019;, &#x2018;S&#x2019;, &#x2018;N&#x2019;, &#x2018;D&#x2019;, are used to designate asset references, concepts, concept instances, string primitive elements, numeric primitive elements, and date primitive elements, respectively. The use of source and target type identifiers in the table <b>900</b> facilitates determination of the source's or target's definition table <b>500</b>, <b>600</b>, <b>625</b>, <b>700</b>, <b>800</b>, <b>825</b>, <b>850</b>. Additionally, for each named association, the table <b>900</b> includes the numeric identifier corresponding to a relation defined in table <b>700</b> (<figref idref="DRAWINGS">FIG. 7</figref>). In the case of About associations, a Relation is not designated. The table <b>900</b> further includes a column &#x201c;Is_A_Detail&#x201d; indicating whether a particular named association is a detail association. In various implementations, various association type, A, C, I, S, N, &#x2018;D&#x2019; may be stored in a separate table as may detail associations.</p>
<p id="p-0054" num="0053">The encoding of the tag model allows complex queries to be generated. For example, the target of a search can include enumerations of concepts, relations, or primitive values, string regular expressions, and ranges of values. Additionally, searching and manipulation of tag model data can be performed using conventional database query languages. For example, in a relational database implementation supporting the structured query language (SQL) and having database tables such as those illustrated in <figref idref="DRAWINGS">FIG. 5</figref> through <figref idref="DRAWINGS">FIG. 9</figref>, a user query for documents about computer hardware authored by &#x201c;Simons&#x201d; may be translated into the structured query language (SQL) query of Table 1 to retrieve relevant asset references.</p>
<p id="p-0055" num="0054">
<tables id="TABLE-US-00001" num="00001">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217pt" align="left"/>
<thead>
<row>
<entry namest="1" nameend="1" rowsep="1">TABLE 1</entry>
</row>
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry>-- comments go from &#x201c;--&#x201d; to new-line.</entry>
</row>
<row>
<entry>&#x2003;&#x2003;( -- Asset_Refs of &#x3c;Document&#x3e; AND_NARROWER</entry>
</row>
<row>
<entry>&#x2003;&#x2003;-- &#x3c;ABOUT&#x3e;</entry>
</row>
<row>
<entry>&#x2003;&#x2003;-- Concept_Insts of &#x3c;Computer H/W&#x3e; AND_NARROWER</entry>
</row>
<row>
<entry>&#x2003;&#x2003;select &#x201c;Source&#x201d; from &#x201c;Associations&#x201d;</entry>
</row>
<row>
<entry>&#x2003;&#x2003;where &#x201c;Source&#x201d; in ( -- Asset_Refs of &#x3c;Document&#x3e; </entry>
</row>
<row>
<entry>&#x2003;&#x2003;AND_NARROWER</entry>
</row>
<row>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;select &#x201c;ID&#x201d; from &#x201c;Asset_Refs&#x201d;</entry>
</row>
<row>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;where &#x201c;Class&#x201d; in ( -- &#x3c;Document&#x3e; AND_NARROWER</entry>
</row>
<row>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;Document&#x3e;</entry>
</row>
<row>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;union</entry>
</row>
<row>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;select &#x201c;Descendent&#x201d; from &#x201c;Concept_Refinements&#x201d;</entry>
</row>
<row>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;where &#x201c;Ancestor&#x201d; = &#x3c;Document&#x3e; ))</entry>
</row>
<row>
<entry>&#x2003;&#x2003;and &#x201c;Relation&#x201d; = &#x3c;ABOUT&#x3e;</entry>
</row>
<row>
<entry>&#x2003;&#x2003;and &#x201c;Target&#x201d; in ( -- Concept_Insts of &#x3c;Computer H/W&#x3e; </entry>
</row>
<row>
<entry>&#x2003;&#x2003;AND_NARROWER</entry>
</row>
<row>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;select &#x201c;ID&#x201d; from &#x201c;Concept_Insts&#x201d;</entry>
</row>
<row>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;where &#x201c;Concept&#x201d; in ( -- &#x3c;Computer H/W&#x3e; </entry>
</row>
<row>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;AND_NARROWER</entry>
</row>
<row>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;Computer H/W&#x3e;</entry>
</row>
<row>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;union</entry>
</row>
<row>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;select &#x201c;Descendent&#x201d; from &#x201c;Concept_Refinements&#x201d;</entry>
</row>
<row>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;where &#x201c;Ancestor&#x201d; = &#x3c;Computer H/W&#x3e; )))</entry>
</row>
<row>
<entry>intersect</entry>
</row>
<row>
<entry>&#x2003;&#x2003;( -- Asset_Refs of &#x3c;Document&#x3e; AND_NARROWER</entry>
</row>
<row>
<entry>&#x2003;&#x2003;-- with Associations named &#x3c;Author&#x3e; AND_NARROWER to</entry>
</row>
<row>
<entry>&#x2003;&#x2003;-- Concept_Insts of &#x3c;Simons&#x3e; AND_NARROWER</entry>
</row>
<row>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;select &#x201c;Source&#x201d;</entry>
</row>
<row>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;from &#x201c;Associations&#x201d;</entry>
</row>
<row>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;where &#x201c;Source&#x201d; in ( -- Asset_Refs of &#x3c;Document&#x3e; </entry>
</row>
<row>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;AND_NARROWER</entry>
</row>
<row>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;select &#x201c;ID&#x201d; from &#x201c;Asset_Refs&#x201d;</entry>
</row>
<row>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;where &#x201c;Class&#x201d; in ( -- &#x3c;Document&#x3e; AND_NARROWER</entry>
</row>
<row>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;Document&#x3e;</entry>
</row>
<row>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;union</entry>
</row>
<row>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;select &#x201c;Descendent&#x201d; from </entry>
</row>
<row>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x201c;Concept_Refinements&#x201d;</entry>
</row>
<row>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;where &#x201c;Ancestor&#x201d; = &#x3c;Document&#x3e; ))</entry>
</row>
<row>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;and &#x201c;Relation&#x201d; in ( -- &#x3c;Author&#x3e; AND_NARROWER</entry>
</row>
<row>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;Author&#x3e;</entry>
</row>
<row>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;union</entry>
</row>
<row>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;select &#x201c;Descendent&#x201d; from &#x201c;Relation_Refinements&#x201d;</entry>
</row>
<row>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;where &#x201c;Ancestor&#x201d; = &#x3c;Author&#x3e; )</entry>
</row>
<row>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;and &#x201c;Target&#x201d; in ( -- Concept_Insts of &#x3c;Simons&#x3e; </entry>
</row>
<row>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;AND_NARROWER</entry>
</row>
<row>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;select &#x201c;ID&#x201d; from &#x201c;Concept_Insts&#x201d;</entry>
</row>
<row>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;where &#x201c;Concept&#x201d; in ( -- &#x3c;Simons&#x3e; AND_NARROWER</entry>
</row>
<row>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;Simons&#x3e;</entry>
</row>
<row>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;union</entry>
</row>
<row>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;select &#x201c;Descendent&#x201d; from &#x201c;Concept_Refinements&#x201d;</entry>
</row>
<row>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;where &#x201c;Ancestor&#x201d; = &#x3c;Simons&#x3e; )))</entry>
</row>
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0056" num="0055">The interface to the tag model database can be a graphical user interface (GUI). In a GUI implementation, such as that provided by the Apple MacOS&#xae; operating system or the Microsoft Windows 95 operating system, search queries can be entered using graphical interface elements such choice lists, push buttons, check boxes, and text entry dialog boxes. Such graphical interface elements may provide an interface to a search query generation routine. For example, a GUI may present a list of concept elements which can be selected to define a search query. The selected concept elements can then be used by a query generation routine to generate SQL or other query code and thereby to interact with the tag model database. Additionally, the GUI interface can contain interface functionality to input concept element names, input relation element names, manipulate hierarchies of concepts and relations, define asset references, and define interconnections between such elements. In non-GUI implementations, these functions may be performed by inputting text and commands using a keyboard in response to computer system prompts. In a program-to-program implementation, the interface to the tag model database may be an application programming interface accessible to other software programs. For example, a program may use the tag model database to logically structure and organize data associated with the internal operation of the first program. Such data may be hidden from a human user of the first program.</p>
<p id="p-0057" num="0056">In some implementations, the all or part of the storage system <b>112</b> and tag database <b>113</b> can be on the same storage media, while in other implementations, the tag database is stored separate from the asset database and may be distributed across a network of storage servers. Additionally, the tag database server <b>111</b> can be a software process executing on a dedicated server computer or, in some implementations, all or part of the server <b>111</b> can be a software process executed at the computer <b>110</b> along with various user applications. Furthermore, the tag database <b>113</b> may include predefined tag elements. For example, a tag database <b>113</b> having predefined concepts, relations, and details describing various work and leisure activities may be provided.</p>
<p id="p-0058" num="0057">The invention may be implemented in digital electronic circuitry, or in computer hardware, firmware, software, or in combinations of them. Apparatus of the invention may be implemented in a computer program product tangibly embodied in a machine-readable storage device for execution by a programmable processor; and method steps of the invention may be performed by a programmable processor executing a program of instructions to perform functions of the invention by operating on input data and generating output. The invention may advantageously be implemented in one or more computer programs that are executable on a programmable system including at least one programmable processor coupled to receive data and instructions from, and to transmit data and instructions to, a data storage system, at least one input device, and at least one output device. Each computer program may be implemented in a high-level procedural or object-oriented programming language, or in assembly or machine language if desired; and in any case, the language may be a compiled or interpreted language. Suitable processors include, by way of example, both general and special purpose microprocessors. Generally, a processor will receive instructions and data from a read-only memory and/or a random access memory. Storage devices suitable for tangibly embodying computer program instructions and data include all forms of non-volatile memory, including by way of example semiconductor memory devices, such as EPROM, EEPROM, and flash memory devices; magnetic disks such as internal hard disks and removable disks; magneto-optical disks; and CD-ROM disks. Any of the foregoing may be supplemented by, or incorporated in, specially-designed ASICs (application-specific integrated circuits).</p>
<p id="p-0059" num="0058">Still other embodiments are within the scope of the following claims.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A tangible machine-readable storage medium embodying instructions that, when executed by machine, cause the machine to perform operations comprising:
<claim-text>establishing a database of concept data elements, asset references, and associations, the concept data elements each representing a concept and having a hierarchy specified by concept hierarchy information, the asset references each comprising a storage location identifier for a corresponding one of a plurality of data assets, and the associations representing different types of relations between one of the plurality of data assets and one of a plurality of concepts represented by the concept data elements, wherein the database is linked to a location interface;</claim-text>
<claim-text>causing the location interface to be presented to a user;</claim-text>
<claim-text>receiving a query from the user through the location interface, the query including location information and identifying a concept and a relationship, the location information relating to a location of a desired data asset;</claim-text>
<claim-text>using the query to search the database to identify a set of data assets each having the relationship with the concept; and</claim-text>
<claim-text>presenting to the user information identifying the data assets in the set.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The tangible machine-readable storage medium of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the instructions to receive from the user a query identifying a concept and a relationship include instructions to receive from the user a query further identifying a second concept and a second relationship; and wherein each data asset in the identified set of data assets having the relationship with the concept has the second relationship with the second concept.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The tangible machine-readable storage medium of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein:
<claim-text>the instructions to establish a database of concept data elements, asset references, and associations include instructions to establish a database that includes detail associations, each detail association representing a relationship between a first and a second concept;</claim-text>
<claim-text>the instructions to receive from the user a query that identifies a concept and a relationship includes instructions to receive from the user a query that further identifies a second concept and a second relationship, the second concept and the second relationship representing a detail association; and</claim-text>
<claim-text>the instructions to use the query to identify a set of data assets includes instructions to use the query to identify a set of data assets where each data asset in the identified set of data assets has a detail association comprising the second relationship between the concept and the second concept.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The tangible machine-readable storage medium of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the query includes the concept and the relationship.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. A computer system comprising:
<claim-text>a processor;</claim-text>
<claim-text>means for establishing a database of concept data elements, asset references, and associations, the concept data elements each representing a concept and having a hierarchy specified by concept hierarchy information, the asset references each comprising a storage location identifier for a corresponding one of a plurality of data assets, and the associations representing different types of relations between one of the plurality of data assets and one of a plurality of concepts represented by the concept data elements; and</claim-text>
<claim-text>means for linking a location interface to the database, the location interface configured to receive location information related to the location of a desired data asset;</claim-text>
<claim-text>means for presenting the location interface to a user, the location interface configured to receive a query from the user, the query including location information and identifying a concept and relationship, the location information relating to a location of a desired data set;</claim-text>
<claim-text>means for using the query to search the database to identify a set of data assets each having the relationship with the concept; and</claim-text>
<claim-text>means for presenting to the user information identifying the data assets in the set.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The computer system of <claim-ref idref="CLM-00005">claim 5</claim-ref>, further comprising:
<claim-text>means for receiving search information from the database identifying concepts and relationships that can be searched;</claim-text>
<claim-text>means for displaying the search information to the user through a query interface that allows the user to define the query; and</claim-text>
<claim-text>means for displaying, in response to the query, information identifying data assets satisfying the query.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The computer system of <claim-ref idref="CLM-00006">claim 6</claim-ref>, further comprising:
<claim-text>means for receiving a selection from the user of a desired data asset from among the identified data assets; and</claim-text>
<claim-text>means for returning to an application a file handle for the desired data asset.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The computer system of <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein the means for using the query to identify a set of data assets further comprise means for finding each asset reference in the database having the relationship with the concept.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The computer system of <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein the means for using the query to identify a set of data assets further comprise means for finding each asset reference in the database having the relationship with the concept and each asset reference in the database having the relationship with a hierarchical descendent of the concept.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The computer system of <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein:
<claim-text>the relationships have a hierarchy specified by relationship hierarchy information; and the means for using the query to identify a set of data assets further comprise means for finding each asset reference in the database having the relationship with the concept and each asset reference in the database having a hierarchical descendent of the relationship with the concept.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The computer system of <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein:
<claim-text>the means for receiving from the user a query identifying a concept and a relationship further comprise means for receiving from the user a query further identifying a second concept and a second relationship; and</claim-text>
<claim-text>each data asset in the identified set of data assets having the relationship with the concept has the second relationship with the second concept.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The computer system of <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein:
<claim-text>the means for establishing a database of concept data elements, asset references, and associations further comprise means for establishing a database that includes detail associations, each detail association representing a relationship between a first and a second concept;</claim-text>
<claim-text>the means for receiving from the user a query that identifies a concept and a relationship further comprise means for receiving from the user a query that further identifies a second concept and a second relationship, the second concept and the second relationship representing a detail association; and</claim-text>
<claim-text>the means for using the query to identify a set of data assets further comprise means for using the query to identify a set of data assets where each data asset in the identified set of data assets has a detail association comprising the second relationship between the concept and the second concept.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The computer system of <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein the query includes the concept and the relationship.</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The computer system of <claim-ref idref="CLM-00005">claim 5</claim-ref>, the means for establishing a database of concept data elements, asset references, and associations further comprise means for establishing a database that includes detail associations that describe relationships between concepts in the database, the relationships selected from a plurality of different types of relationships.</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The computer system of <claim-ref idref="CLM-00005">claim 5</claim-ref>, further comprising:
<claim-text>means for presenting to a user a storage interface to receive location information from the user to identify a storage location identifier for a data asset to be saved;</claim-text>
<claim-text>means for linking the storage interface to the database;</claim-text>
<claim-text>means for receiving from the user through the location interface a query identifying a concept and a relationship;</claim-text>
<claim-text>means for receiving from the user through the storage interface the location information for the data asset to be saved and a selection identifying a concept and a relationship between the concept and the data asset to be saved; and</claim-text>
<claim-text>means for storing in the database of a memory an asset reference for the data asset to be saved and creating in the database an association representing the identified relationship between the data asset to be saved and the identified concept.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The computer system of <claim-ref idref="CLM-00015">claim 15</claim-ref>, further comprising:
<claim-text>means for receiving tag information from the database identifying concepts and relationships that can be selected during a &#x201c;save&#x201d; operation; and</claim-text>
<claim-text>means for displaying the tag information to the user through a tag data interface, the tag data interface allowing the user to select tag elements to identify associations for data assets to be saved.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The computer system of <claim-ref idref="CLM-00015">claim 15</claim-ref>, further comprising:
<claim-text>means for presenting to the user a tag creation interface to receive information from a user to define a new concept; and</claim-text>
<claim-text>means for storing a new concept data element representing the new concept in the database.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The computer system of <claim-ref idref="CLM-00017">claim 17</claim-ref>, further comprising:
<claim-text>means for receiving from the user through the tag creation interface hierarchy information identifying a hierarchical relationship between the new concept and the plurality of concepts; and</claim-text>
<claim-text>means for storing concept hierarchy information representing the hierarchical relationship between the new concept and the plurality of concepts represented by the concept data elements in the database.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. The computer system of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein:
<claim-text>the database includes a plurality of relationship data elements each identifying a relationship and having a hierarchy specified by relationship hierarchy information; and the computer system further comprises:</claim-text>
<claim-text>means for presenting to the user a tag creation interface to receive information from a user to define a new relationship; and</claim-text>
<claim-text>means for storing a new relationship data element representing the new relationship in the database.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. The computer system of <claim-ref idref="CLM-00019">claim 19</claim-ref>, further comprising:
<claim-text>means for receiving from the user through the tag creation interface hierarchy information identifying a hierarchical relationship between the new relationship and relationships identified by the plurality of relationship data elements; and</claim-text>
<claim-text>means for storing relationship hierarchy information representing the hierarchical relationship between the new relationship and the plurality of relationship data elements in the database.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00021" num="00021">
<claim-text>21. The computer system of <claim-ref idref="CLM-00019">claim 19</claim-ref>, wherein:
<claim-text>the database includes detail associations each representing a relationship between a first and a second concept; and</claim-text>
<claim-text>the computer system further comprises:
<claim-text>means for receiving from the user through the tag creation interface new detail association information identifying a relationship between a first and a second one of the plurality of concepts; and</claim-text>
<claim-text>means for storing the new detail association information in the database.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00022" num="00022">
<claim-text>22. The computer system of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the database includes detail associations that describe relationships between concepts in the database, the relationships selected from a plurality of different types of relationships.</claim-text>
</claim>
<claim id="CLM-00023" num="00023">
<claim-text>23. A computer implemented method, the method comprising:
<claim-text>establishing a database of concept one or more data elements, one or more asset references, and one or more associations, each concept data element representing a concept and having a hierarchy specified by concept hierarchy information, each asset reference comprising a storage location identifier for a corresponding one of a plurality of data assets, each association representing a different type of relation between one of the plurality of data assets and one of a plurality of concepts represented by the concept data elements;</claim-text>
<claim-text>linking a location interface to the database;</claim-text>
<claim-text>presenting the location interface to a user;</claim-text>
<claim-text>receiving a query from the user through the location interface, the query including location information and identifying a concept and a relationship, the location information relating to a location of a desired data asset;</claim-text>
<claim-text>using the query to search the database to identify a set of data assets each having the relationship with the concept; and</claim-text>
<claim-text>presenting to the user information identifying the data assets in the set.</claim-text>
</claim-text>
</claim>
</claims>
</us-patent-grant>

<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08626829-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08626829</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>13606197</doc-number>
<date>20120907</date>
</document-id>
</application-reference>
<us-application-series-code>13</us-application-series-code>
<us-term-of-grant>
<disclaimer>
<text>This patent is subject to a terminal disclaimer.</text>
</disclaimer>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>15</main-group>
<subgroup>16</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>709203</main-classification>
<further-classification>709217</further-classification>
<further-classification>709250</further-classification>
<further-classification>4554121</further-classification>
<further-classification>4554141</further-classification>
</classification-national>
<invention-title id="d2e51">System and method for delivering remotely stored applications and information</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>5790800</doc-number>
<kind>A</kind>
<name>Gauvin et al.</name>
<date>19980800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709227</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>5796952</doc-number>
<kind>A</kind>
<name>Davis et al.</name>
<date>19980800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>5850517</doc-number>
<kind>A</kind>
<name>Verkler et al.</name>
<date>19981200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709202</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>5909545</doc-number>
<kind>A</kind>
<name>Frese, II et al.</name>
<date>19990600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>6104392</doc-number>
<kind>A</kind>
<name>Shaw et al.</name>
<date>20000800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>6112206</doc-number>
<kind>A</kind>
<name>Morris et al.</name>
<date>20000800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709218</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>6173332</doc-number>
<kind>B1</kind>
<name>Hickman</name>
<date>20010100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>6393569</doc-number>
<kind>B1</kind>
<name>Orenshteyn</name>
<date>20020500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>6473609</doc-number>
<kind>B1</kind>
<name>Schwartz et al.</name>
<date>20021000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>455406</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>6581109</doc-number>
<kind>B1</kind>
<name>Fields et al.</name>
<date>20030600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>7035912</doc-number>
<kind>B2</kind>
<name>Arteaga</name>
<date>20060400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709203</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>7095828</doc-number>
<kind>B1</kind>
<name>Elliot et al.</name>
<date>20060800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>4554121</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00013">
<document-id>
<country>US</country>
<doc-number>7263715</doc-number>
<kind>B2</kind>
<name>Ito</name>
<date>20070800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>726  2</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00014">
<document-id>
<country>US</country>
<doc-number>7865199</doc-number>
<kind>B2</kind>
<name>Noldus</name>
<date>20110100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>4554121</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00015">
<document-id>
<country>US</country>
<doc-number>7996490</doc-number>
<kind>B2</kind>
<name>Kitada</name>
<date>20110800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709217</main-classification></classification-national>
</us-citation>
<us-citation>
<nplcit num="00016">
<othercit><i>ArcView Internet Map Server, Map Publishing on the Web</i>, pp. 1-60, Environmental Systems Research Institute, Inc., United States (1996-97).</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00017">
<othercit><i>Autodesk MapGuide&#x2122; Server 4.0 User's Guide</i>, pp. 1-117, Autodesk, Inc., United States (Dec. 3, 1998).</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00018">
<othercit><i>Autodesk MapGuide&#x2122; Viewer API Help</i>, pp. 1-227, Autodesk, Inc., United States (Dec. 15, 1998).</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00019">
<othercit>Harwood, T., <i>Windows NT Terminal Server and Citrix Metaframe</i>, pp. 1-390, New Riders, United States (Dec. 9, 1998).</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00020">
<othercit>Livingston, B. and Straub, D. <i>Windows 98 Secrets</i>, pp. 1-1207, Hungry Media, Inc., United States (Mar. 24, 1998).</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00021">
<othercit>The Santa Cruz Operation Technical White Paper, <i>Tarantella&#x2014;The Universal Application Server</i>, 13 pages (Jul. 1997).</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00022">
<othercit>Hahn, H., <i>The Internet Complete Reference, Second Edition</i>, pp. 1-161 and 176-199, Osborne McGraw-Hill, United States (1996).</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00023">
<othercit>Neinauer, A., <i>Running Microsoft Outlook 98</i>, pp. 1-239, Microsoft Press, United States (1998).</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00024">
<othercit><i>Autodesk MapGuide&#x2122; 3.1 Viewer, Java&#x2122; Edition </i>(<i>build 3.1.3.6</i>) <i>Installation</i>, 1 page (printed publication published Jan. 25, 1999).</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00025">
<othercit><i>The Java&#x2122; Edition Installation Instructions</i>, 1 page (printed publication published Jan. 25, 1999).</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>53</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>709213</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709202-203</main-classification>
<additional-info>unstructured</additional-info>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709217-219</main-classification>
<additional-info>unstructured</additional-info>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709250</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>4554121-4122</main-classification>
<additional-info>unstructured</additional-info>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>4554141-4142</main-classification>
<additional-info>unstructured</additional-info>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>455517</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>8</number-of-drawing-sheets>
<number-of-figures>11</number-of-figures>
</figures>
<us-related-documents>
<continuation>
<relation>
<parent-doc>
<document-id>
<country>US</country>
<doc-number>12359403</doc-number>
<date>20090126</date>
</document-id>
<parent-grant-document>
<document-id>
<country>US</country>
<doc-number>8402115</doc-number>
</document-id>
</parent-grant-document>
</parent-doc>
<child-doc>
<document-id>
<country>US</country>
<doc-number>13606197</doc-number>
</document-id>
</child-doc>
</relation>
</continuation>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20130024499</doc-number>
<kind>A1</kind>
<date>20130124</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Franco</last-name>
<first-name>Louis M.</first-name>
<address>
<city>Hoboken</city>
<state>NJ</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Rose</last-name>
<first-name>Frank Leon</first-name>
<address>
<city>Brooklyn</city>
<state>NY</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="003" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Brittan</last-name>
<first-name>Philip S. J.</first-name>
<address>
<city>Brooklyn</city>
<state>NY</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="004" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Cunningham</last-name>
<first-name>Mark</first-name>
<address>
<city>Brooklyn</city>
<state>NY</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="005" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Bulkin</last-name>
<first-name>Alex</first-name>
<address>
<city>Brooklyn</city>
<state>NY</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="006" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Baskin</last-name>
<first-name>Mat</first-name>
<address>
<city>Bronx</city>
<state>NY</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="007" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Blonder</last-name>
<first-name>Greg</first-name>
<address>
<city>Summit</city>
<state>NJ</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Franco</last-name>
<first-name>Louis M.</first-name>
<address>
<city>Hoboken</city>
<state>NJ</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Rose</last-name>
<first-name>Frank Leon</first-name>
<address>
<city>Brooklyn</city>
<state>NY</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="003" designation="us-only">
<addressbook>
<last-name>Brittan</last-name>
<first-name>Philip S. J.</first-name>
<address>
<city>Brooklyn</city>
<state>NY</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="004" designation="us-only">
<addressbook>
<last-name>Cunningham</last-name>
<first-name>Mark</first-name>
<address>
<city>Brooklyn</city>
<state>NY</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="005" designation="us-only">
<addressbook>
<last-name>Bulkin</last-name>
<first-name>Alex</first-name>
<address>
<city>Brooklyn</city>
<state>NY</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="006" designation="us-only">
<addressbook>
<last-name>Baskin</last-name>
<first-name>Mat</first-name>
<address>
<city>Bronx</city>
<state>NY</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="007" designation="us-only">
<addressbook>
<last-name>Blonder</last-name>
<first-name>Greg</first-name>
<address>
<city>Summit</city>
<state>NJ</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
</us-parties>
<examiners>
<primary-examiner>
<last-name>Barot</last-name>
<first-name>Bharat N</first-name>
<department>2455</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">The computerized method and apparatus for mobile device interactivity includes hosting a network application on a server. The method and apparatus further includes receiving, at the network application on the server, an event message from a mobile application executing on a mobile device, the mobile application having executable code embedded therein for communicating with the network information for presenting a user interface for the network application on the mobile device, the event message reporting an action taken via the user interface. The method and apparatus further including executing application logic within the network application to generate data values based on the action reported in the event message and mobile device information and sending to the mobile device an update message with at least some of the generated data values and instructions for use by the executable code to present the data values within the user interface at the mobile device.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="171.62mm" wi="254.17mm" file="US08626829-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="253.15mm" wi="191.52mm" orientation="landscape" file="US08626829-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="201.25mm" wi="171.11mm" file="US08626829-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="213.36mm" wi="179.41mm" orientation="landscape" file="US08626829-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="255.02mm" wi="178.82mm" file="US08626829-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="256.12mm" wi="188.81mm" file="US08626829-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="224.96mm" wi="172.38mm" orientation="landscape" file="US08626829-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="225.38mm" wi="128.27mm" file="US08626829-20140107-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00008" num="00008">
<img id="EMI-D00008" he="222.33mm" wi="191.60mm" orientation="landscape" file="US08626829-20140107-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?RELAPP description="Other Patent Relations" end="lead"?>
<heading id="h-0001" level="1">CLAIM OF PRIORITY</heading>
<p id="p-0002" num="0001">The present application is a continuation of and claims priority to co-pending U.S. Pat. No. 8,402,115 entitled &#x201c;SYSTEM AND METHOD FOR DELIVERING REMOTELY STORED APPLICATIONS AND INFORMATION&#x201d; filed on Jan. 26, 2009, which is a continuation of and claims priority to allowed U.S. Pat. No. 7,502,838 entitled &#x201c;SYSTEM AND METHOD FOR DELIVERING REMOTELY STORED APPLICATIONS AND INFORMATION&#x201d; filed Nov. 24, 2003, which is a continuation of and claims priority to U.S. Pat. No. 6,687,745 entitled &#x201c;SYSTEM AND METHOD FOR DELIVERING A GRAPHICAL USER INTERFACE OF REMOTE APPLICATIONS OVER A THIN BANDWIDTH CONNECTION&#x201d; filed Jun. 22, 2000, which claims priority to U.S. Provisional Patent Application Ser. No. 60/153,917 filed Sep. 14, 1999.</p>
<heading id="h-0002" level="1">CROSS REFERENCE TO RELATED DOCUMENTS</heading>
<p id="p-0003" num="0002">Priority is herewith claimed under 35 U.S.C. &#xa7;119(e) from copending Provisional Patent Application No. 60/153,917, filed Sep. 14, 1999, entitled &#x201c;METHOD AND SYSTEM FOR DELIVERING APPLICATIONS IN CLIENT/SERVER ENVIRONMENT,&#x201d; by Louis M. Franco et al. The disclosure of this Provisional Patent Application is incorporated by reference herein in its entirety.</p>
<?RELAPP description="Other Patent Relations" end="tail"?>
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0003" level="1">COPYRIGHT NOTICE</heading>
<p id="p-0004" num="0003">A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure, as it appears in the Patent and Trademark Office patent files or records, but otherwise reserves all copyright rights whatsoever.</p>
<heading id="h-0004" level="1">FIELD OF THE INVENTION</heading>
<p id="p-0005" num="0004">The present invention relates generally to computer processing systems and, more particularly, to an object-oriented approach for delivering interactive links to applications and information stored in remote sources of a network.</p>
<heading id="h-0005" level="1">BACKGROUND OF THE INVENTION</heading>
<p id="p-0006" num="0005">An important aspect of any computing system is the interface between a human user and a computer. An early type of interface was text based. In a text based interface a user communicates with the computer by typing text characters with a keyboard and the computer communicates with the user by displaying text characters on a display screen or monitor. Recently, graphical user interfaces (GUIs) have become increasingly popular. In a GUI, a computer communicates with a user by displaying graphics, including text and images, on a monitor and the user communicates with the computer by typing in textual commands and/or by manipulating the displayed images with a pointing device such as, for example, a mouse, track ball, pressure-sensitive pad, electronic stylus or pen, or like devices.</p>
<p id="p-0007" num="0006">Many GUIs are implemented in a operating environment referred to as a window environment. In the window environment, the display on the monitor of the computer is represented as an electronic &#x201c;desktop,&#x201d; each application program available on the computer may be represented as an &#x201c;icon&#x201d; on the desktop, and each application program running on the computer may be represented as one or more electronic &#x201c;sheets&#x201d; displayed in regions of the monitor referred to as &#x201c;windows.&#x201d;</p>
<p id="p-0008" num="0007">Generally speaking, an application program presents information to the user through a window by drawing or &#x201c;rendering&#x201d; images, graphics or text within the window region. The user communicates with the application program by selecting objects in the window region with a cursor, which is controlled by a pointing device, and/or also by typing information into the keyboard. In the window environment, the objects and the window regions may be manipulated or moved about the desktop, and changed in size and appearance so that the user can arrange and/or customize the appearance of the desktop in a convenient manner. The manipulation of an object by using a pointing device to capture and move the object somewhere else on the desktop, from one window region to another window region or within a window region, is generally referred to as a &#x201c;drag and drop&#x201d; operation.</p>
<p id="p-0009" num="0008">The window environment described above is generally part of the computer's operating system. The operating system also typically includes utility programs that enable the computer system to perform basic tasks, such as rendering objects on the display monitor, storing and retrieving information on a memory device, performing file operations and communicating with a network. The application programs interact with the operating system to provide a direct interface with the user and higher level functionality such as, for example, to perform word processing or other specific tasks. Accordingly, the computer includes mechanisms for coordinating the operation of the operating system and application programs, including the arrangement of objects on the display monitor.</p>
<p id="p-0010" num="0009">Computer processing systems are often implemented in network configurations such as &#x201c;client/server&#x201d; configurations. In client/server configurations, a number of personal computers, work stations, portable and/or handheld devices or the like (&#x201c;clients&#x201d;) are linked and communicate with one or more host computers (&#x201c;servers&#x201d;). The servers process requests from the clients for information and/or application programs shared by the clients over the network. Today, many local and wide area public and private networks are interconnected to form a world-wide network of networks generally referred to as the Internet. The Internet permits access to a wealth of information and services stored at individual nodes or sites on the network. A particularly important subset of the Internet is the World Wide Web or &#x201c;web.&#x201d; The web introduces graphics capabilities to Internet communications.</p>
<p id="p-0011" num="0010">Sites on the web, generally referred to as web sites, are connected or linked together using a special communication protocol such as, for example, Hypertext Transport Protocol (HTTP), and a Uniform Resource Locator (URL) that includes a specific syntax for defining a network connection on the web. HTTP permits an exchange of information between users and the web sites that contains subject matter of interest to the users. From a user's prospective, the web appears as a collection of viewable documents, or web pages, residing at the various web sites. A user accesses the web pages by executing software, generally referred to as a web browser. A web browser running on the user's computer sends instructions (including the desired URL) for connecting to a specified host computer (i.e., web server) that stores web pages of interest to the user. A link, such as a hyperlink, is created under the communication protocol. By selecting links and employing a web browser, a user may &#x201c;navigate&#x201d; from one document to another, and from one web site to another, to access informational content and services available across the web.</p>
<p id="p-0012" num="0011">One of the fastest growing uses of the Internet is as a vehicle of commerce. The world-wide access achieved by use of the web makes the web ideal for both small and large businesses who may enter the market by &#x201c;launching&#x201d; web sites offering their goods and/or services for sale. As a result, the informational content and services available to users of the web are considerable and are growing more so, everyday.</p>
<p id="p-0013" num="0012">Despite the success of the web, problems persist for both users and businesses. For example, users need to locate items or services of interest from the vast number of sites on the web and, similarly, businesses need to distinguish themselves from competition to attract and hold the interests of desirable customers.</p>
<p id="p-0014" num="0013">Search engines assist users in locating content and services of interest. However, even armed with searching tools, locating and retrieving informational content and services of interest from the many hundreds of thousands of web sites currently operating over the web may be cumbersome. The results of searches typically yield so many web sites that the effort to review the results and narrow the search may be overly cumbersome.</p>
<p id="p-0015" num="0014">To distinguish their goods and/or services on the web, businesses often advertise their web site names in conventional media such as television and/or print advertisements. Businesses may also employ a web based solution in which rich, visually pleasing advertisements are incorporated in a number of popular web sites. The advertisements, generally referred to as &#x201c;banner ads,&#x201d; often include links to the business' web site. Therefore, when the banner ad is selected, the user is transferred to the business web site where further information regarding the goods/services are displayed.</p>
<p id="p-0016" num="0015">A perceived disadvantage of existing systems and methods for locating sites of interest and/or for attracting customers is that the links to the sites of interest generally must be acted upon from the page they are displayed or they are lost. In other words, conventional systems and methods present web sites that may include static links to other web sites. If a user is interested in viewing the other web site then the user must navigate to it or record the URL of the site for later use. As can be appreciated, it may be undesirable for the user to leave the current site to follow the link to the other site as the user may be performing an important and/or time sensitive task. As a result, a potentially valuable marketing or sales opportunity may be lost.</p>
<p id="p-0017" num="0016">Facilities presently exist for storing an address (URL) of a web site currently being displayed. One such facility is referred to as a &#x201c;bookmark.&#x201d; Once created, bookmarks offer a means of retrieving the URL of a particular web site and directing the user's browser to display the page residing at the URL. Bookmarks eliminate the need for the user to manually enter the URL of a site of interest or to retrace (re-navigate) a path through the Internet to arrive at the web site through a known link. However, bookmarks are limited in two respects. Firstly, a web page must be displayed before the URL corresponding to the web page can be stored as a bookmark. Secondly, bookmarks do not maintain information pertaining to a previous operating state of the web site. For example, a bookmark may return a user to a previously displayed web page, such as a form for completing a commercial transaction, but information that may have been completed on the form is generally not saved. That is, the completed information is generally not stored unless the information is made available through another tracking facility referred to as a &#x201c;cookie.&#x201d; Cookies maintain tracking information on the user's computer that may be referenced once the browser reloads the desired web page and invokes the application included therein. Once the application is invoked, information that was previously entered and stored in the cookie may be restored in the application. Cookies, however, are generally time-sensitive and may expire before a user attempts to re-navigate to the site of interest. Also, cookies are only stored on the computer where the original transaction occurred. If the user accesses the site from another computer, the tracking information is not available.</p>
<p id="p-0018" num="0017">Therefore, there is a need for storing an interactive link on a user's computer which, when selected, retrieves and presents applications and/or information stored at remote locations across the network. There is also a need for the interactive link to include facilities for restoring previous operating states of the application as the application is re-presented at a user's computer.</p>
<heading id="h-0006" level="1">OBJECTS OF THE INVENTION</heading>
<p id="p-0019" num="0018">Accordingly, it is an object and advantage of this invention to provide interactive links to applications and information remotely stored across a network.</p>
<p id="p-0020" num="0019">It is another object and advantage of this invention to provide graphical representations of interactive links to remotely stored applications and information, the graphical representations being downloadable to client computers and selectively employed to retrieve and present the remotely stored applications and information on the client computers.</p>
<p id="p-0021" num="0020">It is still another object and advantage of this invention to provide graphical representations of interactive links to remotely stored applications and information, the graphical representations being downloadable to and transferable between one or more client computers for selectively retrieving and presenting remotely stored applications and information on each of the client computers.</p>
<p id="p-0022" num="0021">It is yet another object and advantage of this invention to provide interactive links to remotely stored applications and information, wherein when selectively employed to retrieve and present the remotely stored applications and information on a client computer, a previous operating state of the applications and information may be restored.</p>
<p id="p-0023" num="0022">It is still another object and advantage of this invention to provide graphical representations of interactive links to remotely stored applications and information, the graphical representations being downloadable to client computers and having a commercially recognizable appearance for identifying the remotely stored applications and information.</p>
<p id="p-0024" num="0023">Further objects and advantages of this invention will become more apparent from a consideration of the drawings and ensuing description.</p>
<heading id="h-0007" level="1">SUMMARY OF THE INVENTION</heading>
<p id="p-0025" num="0024">The foregoing objects and advantages are realized by methods and apparatus in accordance with embodiments of this invention, wherein interactive links for retrieving applications and information from remote sources in a network configured computer processing system are presented.</p>
<p id="p-0026" num="0025">In one embodiment, a method for delivering the interactive links includes storing at a first remote source (e.g., a content provider) informational content (e.g., applications and information) having computer program code embedded therein. The method includes retrieving the informational content by a client computer of the system over a first communication connection to the content provider. In response to the retrieval of the informational content, the method further includes executing at the client computer the computer program code embedded in the informational content for establishing a second communication connection to a second remote source (e.g., an application server) on the network, and presenting via the second communication connection to the application server remotely stored applications and information. The remotely stored applications are executable at the application server for providing functionality of interest to the client computers. The information presented over the second communication connection includes at least presentational information providing at least one of instructions for rendering components of the remotely stored application, default parameters and data values exhibited within the components, and application-specific business logic for processing input to the application.</p>
<p id="p-0027" num="0026">The method also includes storing on the client computer an interactive link for selectively re-establishing the second communication connection to the application server for invoking and presenting the remotely stored application and information on an as-needed basis.</p>
<p id="p-0028" num="0027">Additionally, the method includes downloading to the client computer a graphical representation of the interactive link from within the informational content delivered over the first communication connection, associating to the graphical representation a file containing information representing an operating environment of the client computer and a network address of the application server, and displaying the graphical representation on the client computer. Preferably, the downloading of the graphical representation is achieved in an improved drag and drop operation.</p>
<p id="p-0029" num="0028">In accordance with a preferred embodiment, the graphical representations of the interactive links includes information for identifying the respective remotely stored application and information invoked by the interactive link, and a symbol indicating that the graphical representation is an interactive link. In one embodiment, the identifying information includes at least one, or both, of an icon and a label representing a commercially recognizable brand name of the remotely stored application and information, and the symbol is a teardrop-shaped symbol.</p>
<p id="p-0030" num="0029">Once the interactive link and the graphical representation are downloaded, the graphical representation may then be selected. In response to the selection, the method includes accessing the contents of the file associated to the graphical representation and re-establishing the second communication connection to the application server for invoking and presenting the remotely stored application and/or information associated to the interactive link.</p>
<p id="p-0031" num="0030">In yet another embodiment, the method includes storing at the application server information representing a first operating state of the remotely stored application and/or information for a particular user, and in response to the selection of the graphical representation, presenting the first operating state information as the remotely stored application and/or information is presented to that particular user.</p>
<p id="p-0032" num="0031">In a still further embodiment, the method includes transmitting a copy of the interactive link to a next client computer such that the next client computer is operable for selectively establishing the second communication connection to the application server for invoking and presenting, at the next client computer, the remotely stored application and information. In this embodiment, information may be stored for tracking transmissions of interactive links between the client computers of the network-configured computer processing system.</p>
<p id="p-0033" num="0032">In a preferred embodiment, the network-configured computer processing system includes an Internet connection and the client computer includes a desktop-based repository for links to the remotely stored applications and information and an Internet-based repository for the links. Accordingly, the interactive links may be selectively stored in the desktop-based repository or in the internet-based repository. Alternatively, the links are stored in both of the desktop-based repository and the interne-based repository.</p>
<p id="p-0034" num="0033">In accordance with the present invention, a computer processing system is configured and operates as follows. The system includes a plurality of client computers that each includes an application program code, an operating system program code and a presentational client program code operating thereon. The application program code requests informational content, applications and information stored remotely across a network. The system also includes a first server computer (e.g., the content provider) that stores informational content. Predetermined ones of the informational content include computer program code embedded therein. The content provider delivers the informational content in response to requests from the client computers. A second server computer (e.g., the application server) is included within the system. The application server stores applications that may be invoked for presenting functionality of interest at the client computers. The application server also stores information such as presentational information including at least one of instructions for rendering components of the application, default parameters and data values exhibited within the components, and application-specific business logic for processing input to the application.</p>
<p id="p-0035" num="0034">The system also includes a communication connection between a requesting client computer and the application server. The communication connection is formed in response to an initial delivery of one of the predetermined informational content and an execution of the computer program code embedded therein. The presentational client program code, utilizing the communication connection, presents functionality of the remotely stored applications and information on the requesting client computer. The communication connection is disconnected upon termination of the remotely stored applications and information. The system further includes an interactive link that is stored at the requesting client computer for selectively reforming the communication connection to the application server, re-invoking the remotely stored applications and information, and re-presenting the functionality of the remotely stored applications at the requesting client computer.</p>
<p id="p-0036" num="0035">Preferably, the predetermined ones of the informational content include the interactive link. When stored on the client computer, the interactive link includes a graphical representation of the remotely stored applications and information presented on the client computer and a file containing information representing an operating environment of the client computer and a network address of the application server computer. In this preferred embodiment, the graphical representation includes a symbol for indicating that the graphical representation is of an interactive link and at least one of an icon and a label representing a commercially recognizable brand name of the remotely stored applications and information.</p>
<p id="p-0037" num="0036">In another embodiment, the application server includes a data repository for storing information representing a first operating state of the remotely stored applications and information presented to a particular user at a client computer. Accordingly, the system further includes a device for retrieving, delivering and presenting the previous operating state information from the data repository as the remotely stored applications and information are presented to the particular user at the same or another client computer.</p>
<p id="p-0038" num="0037">In yet another embodiment, the system includes a device for transmitting and storing a copy of the interactive links at a next client computer. When the links are stored, the next client computer is operable for selectively requesting the remotely stored applications and information and forming the communication connection between the next client computer and the application server. The system further includes a data repository for storing information for tracking transmissions of interactive links between the client computers.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0008" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0039" num="0038">The above set forth and other features of the invention are made more apparent in the ensuing Detailed Description of the Preferred Embodiments when read in conjunction with the attached Drawings, wherein:</p>
<p id="p-0040" num="0039"><figref idref="DRAWINGS">FIG. 1</figref> is a block diagram of an exemplary droplet-enabled client/server system constructed and operating in accordance with one embodiment of the present invention;</p>
<p id="p-0041" num="0040"><figref idref="DRAWINGS">FIG. 2</figref> illustrates a web page including an exemplary droplet-enabled application in accordance with one embodiment of the present invention;</p>
<p id="p-0042" num="0041"><figref idref="DRAWINGS">FIG. 3</figref> is a simplified flow diagram illustrating an exemplary flow of messages between an exemplary droplet-enabled client computer and an application server operating in accordance with one embodiment of the present invention;</p>
<p id="p-0043" num="0042"><figref idref="DRAWINGS">FIGS. 4A-4D</figref> illustrate an improved drag and drop operation in accordance with one embodiment of the present invention;</p>
<p id="p-0044" num="0043"><figref idref="DRAWINGS">FIG. 5</figref> illustrates a selection of an exemplary, locally stored interactive link and the resulting invocation of a corresponding, exemplary droplet-enabled application;</p>
<p id="p-0045" num="0044"><figref idref="DRAWINGS">FIG. 6</figref> is a simplified block diagram of the system of <figref idref="DRAWINGS">FIG. 1</figref> wherein an event channel communication scheme is particularly highlighted;</p>
<p id="p-0046" num="0045"><figref idref="DRAWINGS">FIG. 7</figref> illustrates a logical structure of an exemplary droplet-enabled application as compared to conventional application structure; and</p>
<p id="p-0047" num="0046"><figref idref="DRAWINGS">FIG. 8</figref> is a simplified block diagram of the exemplary droplet-enabled client/server system constructed and operating in accordance with one embodiment of the present invention.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<p id="p-0048" num="0047">Identically labeled elements appearing in different ones of the above-described figures are intended to refer to the same elements but may not be referenced in the description for all figures.</p>
<heading id="h-0009" level="1">DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS</heading>
<p id="p-0049" num="0048"><figref idref="DRAWINGS">FIG. 1</figref> illustrates the general architecture of a client/server configured computer processing system <b>10</b> constructed and operating in accordance with the present invention. For illustration purposes, <figref idref="DRAWINGS">FIG. 1</figref> shows a single client computer <b>20</b> operatively coupled over a network <b>50</b> to a content provider <b>30</b> and an application server <b>40</b>. However, the present invention contemplates (as discussed below with reference to <figref idref="DRAWINGS">FIG. 8</figref>) that the system <b>10</b> includes a plurality of client computers operatively coupled over the network <b>50</b> to two or more host/server computers. While the content provider <b>30</b> and the application server <b>40</b> are referred to herein as two separate computers, it is within the scope of the present invention for these computers <b>30</b> and <b>40</b> to be the same physical computer serving two logically separate functions. In a preferred embodiment, the network <b>50</b> is a packet-switched network such as, for example, the Internet, an intranet or an extranet. It should be appreciated that it is within the scope of the present invention for the network <b>50</b> to include wired and wireless connections between the client computers and server computers.</p>
<p id="p-0050" num="0049">The content provider <b>30</b> services requests from the client computer <b>20</b> for informational content <b>36</b> such as, for example, applications <b>32</b> or information <b>34</b> shared by users over the network <b>50</b>. In accordance with the present invention, the informational content <b>36</b> delivered to the client computer <b>20</b> by the content provider <b>30</b>, over a communication connection <b>52</b>, may include one or more links <b>62</b> and Droplets&#x2122; <b>64</b>. For example, a document <b>60</b> delivered to the client computer <b>20</b> includes a link <b>68</b> and a droplet <b>70</b>. In some embodiments, a Droplet&#x2122; is an application, or set of applications, that executes on the client computer <b>20</b> and, in cooperation with a presentation client <b>25</b> (installed at the client computer <b>20</b>) and an operating system of the client computer <b>20</b>, shown generally at <b>80</b>, establishes a communication connection <b>54</b> with the application server <b>40</b> for retrieving information <b>43</b> and presenting functionality of remotely stored applications <b>41</b> on the client computer <b>20</b>. The informational content <b>36</b> containing Droplets&#x2122; may hereinafter be referred to as &#x201c;droplet-enabled&#x201d; content.</p>
<p id="p-0051" num="0050">In one embodiment, the requested applications <b>32</b> and/or information <b>34</b> include functionality presented on the client computer <b>20</b> by the applications <b>41</b> executing remotely on the application server <b>40</b>. That is, the application <b>41</b> is invoked by the droplet <b>70</b>, as the droplet <b>70</b> executes on the client computer <b>20</b>. As discussed in detail below, the links within the delivered informational content <b>36</b> (e.g., link <b>68</b>) may be stored locally on the client computer <b>20</b> as interactive links <b>72</b> that, when selected, retrieve the information <b>43</b> and invoke the applications <b>41</b> to present the functionality of the applications <b>41</b> at the client computer. In particular, when performing a subsequent retrieval of the functionality presented by the applications <b>41</b>, the applications <b>32</b> and/or information <b>34</b> that originally provided the link <b>68</b> (now locally stored as the interactive link <b>72</b>) to the applications <b>41</b> need not be retrieved. Rather, the interactive link <b>72</b> can be employed to directly invoke and execute the applications <b>41</b> on the application server <b>40</b> to provide the requested functionality at the client computer <b>20</b>. The initial and subsequent retrieval of droplet-enabled content and applications is discussed in further detail below.</p>
<p id="p-0052" num="0051">Initially, Droplets&#x2122; <b>64</b> execute as the informational content <b>36</b> containing the links <b>62</b> and Droplets&#x2122; <b>64</b>, e.g., the document <b>60</b> containing the link <b>68</b> and the droplet <b>70</b>, is delivered to the client computer <b>20</b>. That is, the droplet <b>70</b> executes and notifies the droplet presentation client <b>25</b> that it has been loaded to the client computer <b>20</b>. Next, the droplet <b>70</b> cooperates with the droplet presentation client <b>25</b> and the operating system software <b>80</b> of the client computer <b>20</b> to establish the communication connection <b>54</b> to the application server <b>40</b>. The link <b>68</b> is an interactive link presented within the informational content <b>36</b> for invoking the applications <b>41</b> and retrieving information <b>43</b> residing at remote locations on the network <b>50</b>. Once the communication connection <b>54</b> is established, the droplet <b>70</b> transmits a startup message to the application server <b>40</b>. In response to the receipt of a startup message from the droplet <b>70</b>, the application server <b>40</b> executes the associated application <b>41</b> to present the application functionality and information <b>43</b> to the client computer <b>20</b>.</p>
<p id="p-0053" num="0052">In accordance with the present invention, Droplets&#x2122; (e.g., the droplets <b>64</b> and <b>70</b>) are dynamic and &#x201c;thin&#x201d; applications. That is, the Droplets&#x2122; generally include information identifying the operating environment on the client computer <b>20</b>, the application server <b>40</b> to connect with and an application on the server <b>40</b> that is run to deliver the requested functionality to the client computer <b>20</b> once the connection is made. The information identifying the operating environment on the client computers <b>20</b> provides information to the application server <b>40</b> regarding the operating system and hardware capabilities of the particular client computer <b>20</b> that requested the droplet-enabled content <b>36</b>. That is, the plurality of client computers <b>20</b> may include computer workstations, personal computers and portable devices such as, for example, laptop and notebook computers, PalmPilots and internet-enabled radio telephones. As is apparent to those in the art, each such device platform includes differing user interfaces. As such, not all client computers <b>20</b> are capable of presenting for example, full color, high-resolution graphics. By providing the operating environment of the requesting client computer <b>20</b> to the application server <b>40</b>, the application server <b>40</b> provides information <b>43</b> to present the requested applications <b>41</b> on the client computer <b>20</b>. The information <b>43</b> includes, for example, instructions <b>42</b> for rendering graphical objects within the presented applications <b>41</b>, default parameters or data values <b>44</b> displayed within the applications <b>41</b> and application-specific business logic <b>46</b> for processing inputs to the applications <b>41</b>.</p>
<p id="p-0054" num="0053">In accordance with one aspect of the present invention, a droplet application developer creates droplet-enabled applications or served versions of each application for presenting particular functionality to client computers having differing user interface (&#x201c;UI&#x201d;) requirements. For example, a droplet-enabled email application may be implemented a number of ways such that a first version may operate on a personal computer having capabilities for providing full color, high-resolution graphics and a second version for operating on an internet-enabled radio telephone having only text-processing capabilities. In accordance with this aspect of the present invention, a droplet communicates one of the differing client environments and, in particular, client UI requirements, to the application server <b>40</b> which automatically provides, for example, the first version to a requesting personal computer and the second version to the requesting radio telephone. Alternatively, the Droplet&#x2122; could determine UI requirements from the client operating system or other locally stored data.</p>
<p id="p-0055" num="0054">Since Droplets&#x2122; store a limited amount of information, that is, only the information necessary for establishing a connection (e.g., the communication connection <b>54</b>) to a application server <b>40</b>, Droplets&#x2122; require a minimum amount of storage space on a client computer, for example, no more than about 500 k bytes. Similarly, during execution, Droplets&#x2122; consume no more than about 2M bytes of heap (dynamic memory allocation space). Therefore, a large number of Droplets&#x2122; may execute simultaneously without significantly reducing the memory available for other, concurrently executing applications. The droplet presentation client <b>25</b> requires local storage of about 1M bytes for a complete installation. Once the droplet presentation client <b>25</b> is installed locally, the client computer <b>20</b> is &#x201c;droplet-enabled.&#x201d;</p>
<p id="p-0056" num="0055">It should be appreciated that, in one embodiment, the droplets (i.e., droplet <b>70</b>) may include rendering instructions, parameters and/or data values that override the default information (i.e., the instructions <b>42</b> and values <b>44</b>) received from the application server <b>40</b>.</p>
<p id="p-0057" num="0056">Preferably, the communication connection <b>54</b> initiated by the droplet <b>70</b> between the client computer <b>20</b> and the application server <b>40</b> is transparent to the user. That is, when the requested informational content <b>36</b> is delivered and presented on a display device of the client computer <b>20</b>, the droplet <b>70</b> executes and, with the presentation client <b>25</b>, establishes the communication connection <b>54</b>. As noted above, the informational content <b>36</b> may include links to remotely stored applications <b>41</b>, that are invoked to present functionality at the client computer <b>20</b>. Presentational information <b>43</b> to present and serve, for example, various graphical objects (GUI objects) such as windows, edit boxes, drop-down lists, check boxes, buttons and/or labels included within the application <b>41</b>, is received over the communication connection <b>54</b> as the functionality is presented on the display device or monitor of the client computer <b>20</b>.</p>
<p id="p-0058" num="0057"><figref idref="DRAWINGS">FIG. 2</figref> illustrates a droplet-enabled application <b>100</b> entitled &#x201c;Stock Watcher&#x201d; that is presented on the desktop of the client computer <b>20</b>. In this exemplary embodiment, the Stock Watcher application <b>100</b> is presented within a window on a web page, shown generally at <b>110</b>, utilizing the MICROSOFT&#xae; Internet Explorer&#x2122; web browser application. As should be appreciated, the present invention contemplates other presentational mechanism for droplet-enabled applications, that is, non-web based delivery such as a stand alone application program provided via a CD disk, floppy disk or like storage media. Other exemplary mechanisms are discussed in detail below.</p>
<p id="p-0059" num="0058">As is known, web pages such as web page <b>110</b> are constructed using software such as the Hypertext Markup Language (HTML). A web page (i.e., web page <b>110</b>) is droplet-enabled by embedding one or more Droplets&#x2122; within the page. Preferably, the droplets are embedded by using software commands such as, for example, &#x201c;&#x3c;applet&#x3e;&#x201d; or &#x201c;&#x3c;embed&#x3e;&#x201d; tags of the HTML language. As a web browser encounters a droplet-enabled web page, such as web page <b>110</b>, instances of the droplets are invoked to initiate the communication connection <b>54</b> with the application server <b>40</b>, as discussed above. Therefore, as a user navigates to web page <b>110</b>, the droplets associated with the Stock Watcher application <b>100</b> are encountered in the web page <b>110</b> and execute. A droplet, in cooperation with the droplet presentation client <b>25</b>, delivers the Stock Watcher application <b>100</b> over the communication connection <b>54</b>, and presents the application <b>100</b> within web page <b>110</b>. It should be appreciated that the user is generally unaware of the communication connection <b>54</b> established to the application server <b>40</b>, as web page <b>110</b> and its corresponding GUI objects, e.g., text box <b>112</b>, drop-down list <b>114</b>, radio buttons <b>116</b> and command buttons <b>118</b>, are presented within the web page <b>110</b> as the page <b>110</b> is loaded.</p>
<p id="p-0060" num="0059">The Stock Watcher application <b>100</b> also includes an object referred to as a droplet handle <b>120</b>. <figref idref="DRAWINGS">FIG. 2</figref> presents the droplet handle <b>120</b> in a preferred configuration representing a teardrop-shaped icon on the application's title bar. As is discussed in detail below, droplet handles may be icons, graphical images, or strings of text, that may be selected and downloaded to store, on a client computer <b>20</b>, the interactive links (e.g., links <b>72</b> of <figref idref="DRAWINGS">FIG. 1</figref>) to droplet-enabled applications <b>41</b> remotely stored across the network <b>50</b>.</p>
<p id="p-0061" num="0060">In accordance with the present invention, Droplets&#x2122; are generic or universal applications that can be implemented on a variety of computer hardware and software platforms. For example, and as discussed briefly above, the droplet-enabled client/server system <b>10</b> may be implemented in an Internet environment. In this respect, Droplets&#x2122; may include a downloadable Java applet, ActiveX controls, a browser plug-in written in the Java, C++ or other suitable programming language, or other multimedia objects, that are invoked as a web page is loaded. In the web based implementation, the Droplets&#x2122; cooperate with the droplet presentation client <b>25</b> and the web browser running on the client computer <b>20</b> to establish the communication connection <b>54</b> to the application server <b>40</b> and to present the droplet-enabled applications <b>41</b> and information <b>43</b> on the web page.</p>
<p id="p-0062" num="0061">Alternatively, the Droplets&#x2122; may be included within a stand-alone software application that is installed and executes on the client computer <b>20</b>. As connection to the application server <b>40</b> is still desirable in the stand-alone implementation, the Droplets&#x2122; include capabilities for establishing the communication connection <b>54</b> to the application server <b>40</b> and for presenting the droplet-enabled applications <b>41</b> and information <b>43</b> for use within the stand-alone application. Therefore, the Droplets&#x2122;, the droplet presentation client <b>25</b>, the local operating system <b>80</b> of the client computer <b>20</b> and the web browser or stand-alone software program executing on the client computer <b>20</b> cooperate to establish the communication connection <b>54</b> to the application server <b>40</b> through conventional means such as, for example, with socket connections or by transmitting and receiving HTTP transactions.</p>
<p id="p-0063" num="0062">As is apparent to those of skill in the art, the cooperation between the Droplets&#x2122;, the droplet presentation client <b>25</b>, the local operating system <b>80</b> of the client computer <b>20</b> and the web browser or stand-alone software program executing on the client computer <b>20</b> to establish the connection to the application server includes the communication and sharing of information and a variety of functions and programming interfaces (generally referred to as APIs). That is, in the preferred embodiment of the present invention, standard operating system interfaces are utilized to access, create, control and manipulate features and functions of the client computer <b>20</b> such as, for example, window management, GUI and multimedia object management, system service procedures to establish socket and network connections, and generally any integration between the remotely executing applications, droplets, locally executing application and underlying operating system.</p>
<p id="p-0064" num="0063">Whether in a web based or stand-alone implementation, the information <b>43</b>, that is, instructions <b>42</b> for rendering graphical objects within the delivered droplet-enabled applications <b>41</b>, default parameters or data values <b>44</b> displayed within the droplet-enabled applications <b>41</b> and application-specific business logic <b>46</b> for processing inputs to the droplet-enabled applications <b>41</b>, is provided by the application server <b>40</b>, in accordance with the operating environment of the requesting client (e.g., the client computer's operating system, user interface and hardware capabilities).</p>
<p id="p-0065" num="0064">In one embodiment, the information <b>43</b> is provided by the application server <b>40</b> to the client computer <b>20</b> and stored therein in anticipation of a later use in which the user can not, or prefers not, to establish the communication connection <b>54</b>, e.g., the internet connection, to the application server <b>40</b>. In this embodiment, for example, the remotely stored application <b>41</b> and information <b>43</b> are downloaded and locally installed and/or stored at the client computer <b>20</b>. The locally installed application <b>41</b> may be invoked to execute on the client computer <b>20</b> by selecting the link, as discussed above. In one aspect of the present invention, the application server <b>40</b> may evaluate the capabilities of the client computer <b>20</b> and automatically download all or a portion of the application <b>41</b> and/or information <b>43</b> for local installation on the client computer <b>20</b>. In this respect, the locally installed application (in the form of, for example, native executables) may execute eliminating, during at least a portion of its execution, the need to receive rendering instructions <b>42</b>, default parameters <b>44</b>, or application-specific logic <b>46</b> from the application server <b>40</b>.</p>
<p id="p-0066" num="0065">In accordance with one aspect of the present invention, a network communication protocol is defined for transmitting information between the droplet-enabled applications <b>41</b> and the application server <b>40</b>. The protocol includes a number of message formats wherein properties of and events pertaining to components, such as the GUI components, of actively operating droplet-enabled applications <b>41</b> are communicated between the client computer <b>20</b> and the application server <b>40</b>. The message formats include, for example:
<ul id="ul0001" list-style="none">
    <li id="ul0001-0001" num="0000">
    <ul id="ul0002" list-style="none">
        <li id="ul0002-0001" num="0066">1. Event Notifications&#x2014;messages transmitted from a client computer <b>20</b> to the application server <b>40</b> reporting that a value or attribute of a component of the GUI has been altered. Events include, for example, data entry into text boxes and drop-down lists of the GUI, selection (&#x201c;clicking&#x201d;) of GUI components such as radio and command buttons. Messages are also transmitted in response to other pointing device or keyboard driven actions such as, for example, drag and drop events as an e-mail message is moved to a folder within a droplet-enabled e-mail application.</li>
        <li id="ul0002-0002" num="0067">2. Update Commands&#x2014;messages transmitted from application drivers, e.g., the application specific logic <b>46</b> supporting a droplet-enabled application, on the application server <b>40</b> to the client computer <b>20</b> requesting action within screen components of the system <b>10</b>, such as GUI components within the delivered content.</li>
        <li id="ul0002-0003" num="0068">3. Window Commands&#x2014;messages transmitted from the application drivers on the application server <b>40</b> to the client computer <b>20</b> that specify that a generic window should be opened or closed, or that the droplet-enabled application should present one of a set of standard dialogs (e.g., a message box, a question box or a menu). The droplet-enabled application may transmit a window command to notify the application server <b>40</b> that a user has manually closed an active window on the desktop.</li>
        <li id="ul0002-0004" num="0069">4. Browser Commands&#x2014;messages directed to a web browser running on the client computer <b>20</b> in which the droplet-enabled application is included. If the droplet-enabled application is included within a stand-alone software application that does not include a web browser, then these messages are sent to a default browser.</li>
        <li id="ul0002-0005" num="0070">5. Session Commands&#x2014;messages transmitted from either the client computer <b>20</b> or the application server <b>40</b> for initiating, suspending, or terminating sessions between the client computer <b>20</b> and the application server <b>40</b>.</li>
        <li id="ul0002-0006" num="0071">6. Service Directory&#x2014;messages sent by the application server <b>40</b> to inform the client computer <b>20</b> of services that are available at the application server <b>40</b>. Enabled client computers <b>20</b> that receive service directory messages can present the directory of services to users and can transmit a user's request for a particular service back to the server for processing.</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0067" num="0072">The above described communication protocol and message formats provide a real-time push/pull messaging scheme between the user interface, and GUI components included therein, of an active droplet-enabled application presented on client computer and application drivers supporting the user interface from the application server <b>40</b>. For example, an executing droplet-enabled application such as the Stock Watcher application <b>100</b> receives real-time information such as revised stock prices or shares available for trading as they are posted by an issuing agency. The user need not manually request a refresh of GUI components presenting the pricing and availability information, rather the client computer automatically receives the real-time updates to the components as the droplet-enabled application runs on the application server <b>40</b>.</p>
<p id="p-0068" num="0073">In one embodiment, a continuous open socket communication connection is maintained between the client <b>20</b> and server <b>40</b> to receive the real-time updates as they are posted (push transaction). In another embodiment wherein, for example, a firewall or proxy server security platform does not permit the continuous open socket connections, a request for updates is periodically transmitted by the client computer <b>20</b> to the application server <b>40</b>. The automatic pseudo-real-time messaging strategy embodies a pull type messaging mechanism. It should be appreciated that the system <b>10</b> seamlessly implements this update messaging mechanism by first attempting the real-time push of update information, and if the application server <b>40</b> is not permitted to maintain an open connection communication channel, the server <b>40</b> informs the client computer <b>20</b> to employ the pull-type messaging mechanism by periodically requesting update information. In each of the above-described messaging schemes, the user at the client computer <b>20</b> receives the update information without manually requesting a refresh of the information.</p>
<p id="p-0069" num="0074"><figref idref="DRAWINGS">FIG. 3</figref> is a diagram illustrating a typical sequence of messages transmitted between the client computer <b>20</b> and the application server <b>40</b>. As is shown, connect/startup messages <b>200</b> are transmitted to the application server <b>40</b> by the droplet <b>70</b> running on the client computer <b>20</b> when the droplet-enabled content <b>36</b> is delivered to the client computer <b>20</b>. The startup messages <b>200</b> include information identifying the operating environment on the client computer <b>20</b>, the application server <b>40</b> to connect with and an application on the server <b>40</b> that is run to deliver content to the client computer <b>20</b> once the connection is made.</p>
<p id="p-0070" num="0075">As discussed above, the information identifying a client computer's operating environment provides the application server <b>40</b> a means for presenting a droplet-enabled application having a user interface customized to the capabilities of the client computer's operating systems and hardware.</p>
<p id="p-0071" num="0076">The application server <b>40</b> responds to the startup messages <b>200</b> by transmitting messages <b>210</b> including information <b>43</b> (e.g., rendering instructions <b>42</b>, default parameters and values <b>44</b>, etc.) to present the droplet-enabled applications <b>41</b> on the client computer <b>20</b>. In the web-based implementation, the droplet-enabled application <b>41</b> is preferably executing on the application server <b>40</b> as the messages <b>210</b> are provided to the client computer <b>20</b>. During the course of executing the droplet-enabled applications <b>41</b> and presenting the functionality thereof on the client computer <b>20</b>, messages <b>220</b> including event and update information are repeatedly communicated between the client computer <b>20</b> and the application server <b>40</b>. As such, the droplets facilitate an interactive communication environment between the client computer <b>20</b> and the application server <b>40</b>.</p>
<p id="p-0072" num="0077">Finally, a message <b>230</b> including a terminate session command is transmitted to the application server <b>40</b> when, in the web-based implementation, the web page containing the droplet-enabled application is closed or the user navigates to another page, and, in the stand-alone implementation, as the stand-alone droplet-enabled application is closed or otherwise terminated.</p>
<p id="p-0073" num="0078">The communication protocol and message formats (discussed in detail above) provide real-time communication between the client computers <b>20</b> and the application server <b>40</b>. It should be appreciated that the communication protocol and messaging format transmit information that define differences between a current application state and a next application state, the information being referred to herein as net change information. Transmitting net change information permits, for example, a change of state to of individual components on a screen as opposed to transmitting all screen data and repainting the entire screen from the transmitted screen data. By transmitting only net change information, communication resources such as, for example, bandwidth and transmission times are optimized. As such, droplet-enabled applications deliver rich application functionality over minimum network bandwidth and may operate over thin dial-up or wireless networks as well as broadband networks. Further, droplet-enabled applications supported from remote network sites appear as responsive as applications loaded and executing locally on the client computer <b>20</b>.</p>
<p id="p-0074" num="0079">The above described message formats and general sequence of messaging are utilized by the droplet-enabled applications <b>41</b> and the application server <b>40</b> to support, in cooperation with the presentation client <b>25</b> and the local operating system (e.g., operating system software <b>80</b>), the following features and functions on the desktop of the client computer <b>20</b>:
<ul id="ul0003" list-style="none">
    <li id="ul0003-0001" num="0000">
    <ul id="ul0004" list-style="none">
        <li id="ul0004-0001" num="0080">1. downloading interactive links to droplet-enabled applications and information;</li>
        <li id="ul0004-0002" num="0081">2. branding of droplets;</li>
        <li id="ul0004-0003" num="0082">3. transferring of links to droplet-enabled application/information between client machines;</li>
        <li id="ul0004-0004" num="0083">4. securing an instance of a droplet-enabled application/information;</li>
        <li id="ul0004-0005" num="0084">5. tracking droplet dispersion information;</li>
        <li id="ul0004-0006" num="0085">6. providing an ubiquitous event channel;</li>
        <li id="ul0004-0007" num="0086">7. persistent state maintenance;</li>
        <li id="ul0004-0008" num="0087">8. mirroring desktop to webtop;</li>
        <li id="ul0004-0009" num="0088">9. multiple platform implementation of droplets; and</li>
        <li id="ul0004-0010" num="0089">10. security features.
<br/>
Downloading Interactive Links to Droplet-enabled Application and Information:
</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0075" num="0090">As discussed in the Background Section of this Specification, objects displayed on a GUI (e.g., on the desktop or a window region thereof) may be captured and moved about the GUI in a &#x201c;drag and drop&#x201d; operation. In accordance with the present invention, the links to droplet-enabled applications within informational content <b>36</b> delivered to a client computer (e.g., a link to a droplet-enabled application presented within a banner ad on a web page) may be downloaded to the client computer via a drag and drop operation. That is, a droplet handle object incorporated on the banner ad of the delivered informational content <b>36</b> may be captured by, for example, selecting the droplet handle object, and moving (dragging) the handle about the client computer's GUI. When in a desired location or position on the client computer, the droplet handle object may be locally loaded (dropped) in an improved drag and drop type of operation.</p>
<p id="p-0076" num="0091">Specifically, the present invention supports the downloading (e.g., dragging and dropping) of links to droplet-enabled applications within delivered informational content <b>36</b> from: (1) a web page onto the desktop; (2) a first window region onto another window region that accepts files; and (3) a web page or window region onto a directory or an application program's menu such as, for example, the Start Menu of the Microsoft Windows&#x2122; operating system software. Accordingly, locally stored links are selected to invoke and present, on the client computer <b>20</b>, functionality provided by droplet-enabled applications, executing on the application server <b>40</b>, and information on an &#x201c;as-needed&#x201d; basis.</p>
<p id="p-0077" num="0092">With reference to <figref idref="DRAWINGS">FIGS. 4A-4D</figref>, a preferred embodiment of the downloading operation is disclosed. As shown in <figref idref="DRAWINGS">FIG. 4A</figref>, a droplet-enabled Stock Watcher application <b>100</b>&#x2032; includes a selectable droplet handle object, represented as a teardrop-shaped icon <b>120</b>&#x2032;, located on its title bar. A pointing device (not shown) positions a cursor <b>300</b>, represented as a hand having a pointing finger, above the icon <b>120</b>&#x2032;. The icon <b>120</b>&#x2032; is selected by, for example, holding down on a button associated with the pointing device (e.g., a left mouse button). The selected icon <b>120</b>&#x2032; is then moved (e.g., dragged) from a window <b>110</b>&#x2032; presenting the Stock Watcher application <b>100</b>&#x2032; to another location on the GUI by moving the cursor <b>300</b> from the window <b>110</b>&#x2032; to, for example, a portion <b>310</b> of the desktop of the client computer <b>20</b> (<figref idref="DRAWINGS">FIGS. 4B and 4C</figref>). The icon <b>120</b>&#x2032; is then released by disengaging the pointing device to place (drop) a graphical representation <b>320</b> of the Stock Watcher application <b>100</b>&#x2032; on the portion <b>310</b> of the desktop (<figref idref="DRAWINGS">FIG. 4D</figref>).</p>
<p id="p-0078" num="0093">While the downloading of interactive links to droplet-enabled application and information is described above with references to <figref idref="DRAWINGS">FIGS. 4A-4D</figref> as preferably including a drag and drop operation, it should be appreciated that the present invention contemplates other means for downloading the links to a droplet-enabled application. For example, a link to a droplet-enabled application may be downloaded to a client computer by invoking a menu command to download a graphical object representing the link or by pressing a combination of keyboard keys at the client computer <b>20</b> such as &#x201c;CTRL&#x201d; &#x201c;ALT&#x201d; and &#x201c;D.&#x201d;</p>
<p id="p-0079" num="0094">In one embodiment, the cursor <b>300</b> is utilized to initiate a download to the client computer <b>20</b> of one of the interactive links in one of two ways. Firstly, and as discussed above with reference to <figref idref="DRAWINGS">FIGS. 4A-4D</figref>, the cursor <b>300</b> is positioned above an object representing the link, i.e., the icon <b>120</b>&#x2032;, by manipulating the pointing device. As the icon <b>120</b>&#x2032; is selected to initiate the download, a visual characteristic of the cursor <b>300</b> is modified. That is, the hand having the pointing finger (<figref idref="DRAWINGS">FIG. 4A</figref>) is transformed to a cursor <b>302</b> where a closed hand encloses the teardrop shaped droplet symbol (<figref idref="DRAWINGS">FIG. 4B</figref>). To further illustrate the capture of the icon <b>120</b>&#x2032;, the icon <b>120</b>&#x2032; is also transformed into a symbol <b>122</b> of, for example, an empty circle. As noted above, the cursor <b>302</b> is moved about the desktop by holding down on a button of the pointing device and manipulating the cursor <b>302</b>. Once in a desired location on the client computer <b>20</b>, e.g., on the desktop (<figref idref="DRAWINGS">FIG. 4C</figref>), the link is loaded to the client computer by releasing the button of the pointing device. Once released, by disengaging the mouse button, the link is loaded to the client computer <b>20</b> (<figref idref="DRAWINGS">FIG. 4D</figref>). It should be appreciated that the visual representations discussed above of the cursor <b>302</b> and icon <b>122</b> are merely illustrative and other visual representations of the selected cursor and icon are contemplated such that when selected, for example, an object may appear in reverse video, a frame may be drawn around the object or &#x201c;handles&#x201d; may appear at various corners of the selected object.</p>
<p id="p-0080" num="0095">Secondly, the icon <b>120</b>&#x2032; may be selected by positioning the cursor over the icon <b>120</b>&#x2032; using the pointing device, depressing and releasing the button on the pointing device. As is generally known to those of skill in the art, performing a depressing and releasing operation on an object (referred to as &#x201c;clicking&#x201d; the object) is a separate operation from depressing, holding and moving an object. In response to the clicking operation, a submenu (generally referred to as a &#x201c;pop-up&#x201d; menu) appears at the current cursor location. The pop-up menu includes a list of options for downloading the link to, for example, the desktop or a window on the desktop. It should be appreciated that the list of options for downloading may appear in various manners. That is, each option of the list displayed in the pop-up menu may be represented by text describing the operation (e.g., &#x201c;download to the desktop&#x201d;, &#x201c;download to the start menu&#x201d;, etc.), a text label followed by a control such as a radio button or a check box, or a graphic icon. Each of the items is selectable for invoking a specific download operation.</p>
<p id="p-0081" num="0096">In accordance with one aspect of the present invention, the graphical representation <b>320</b> of a droplet-enabled application, i.e., the Stock Watcher application <b>100</b>, includes information for identifying the application and a symbol that indicates that the application is droplet-enabled. In <figref idref="DRAWINGS">FIG. 4D</figref>, for example, the graphical representation <b>320</b> is illustrated as a chart icon <b>322</b> and a label <b>324</b> entitled &#x201c;Stock Watcher.&#x201d; The representation <b>320</b> also includes a &#x201c;tear-drop&#x201d; symbol <b>326</b> for representing that, when selected, the representation <b>320</b> invokes a droplet-enabled application, i.e., the Stock Watcher application <b>100</b>&#x2032;. Thus, the graphical representation <b>320</b> is the link to the remotely stored Stock Watcher application <b>100</b>&#x2032;. Preferably, the graphical representation <b>320</b> and, in particular, the application identification portion thereof, includes branding information. The branding of graphical representations of droplet-enabled applications and informational content is discussed in further detail below.</p>
<p id="p-0082" num="0097">While the Stock Watcher application <b>100</b> included a single droplet handle object, i.e., the teardrop-shaped icon <b>120</b>, it should be appreciated that droplet-enabled applications and informational content may include more than one downloadable item (link) for invoking various functional and informational features of the applications stored remotely. The item (link) may be an icon, an image or a string of text that, when selected, invokes a droplet-enabled application or retrieves droplet-enabled information from a remote location on the network.</p>
<p id="p-0083" num="0098">As should be appreciated by those of skill in the art, the downloading (e.g., improved drag and drop) operation includes steps of interacting with the operating system <b>80</b> of the client computer <b>20</b> (standard operating system API routines). The interaction permits tracking of the pointing device during a drag and requesting that a file be generated on the target of a drop. When dropped, the file (e.g., files <b>74</b> of <figref idref="DRAWINGS">FIG. 1</figref>) is associated to the interactive link (e.g., links <b>72</b> of <figref idref="DRAWINGS">FIG. 1</figref>). The file includes information for re-establishing the communication connection <b>54</b> to the application server <b>40</b> as the link is selected, as is discussed below.</p>
<p id="p-0084" num="0099">In accordance with the present invention, and as depicted in <figref idref="DRAWINGS">FIG. 5</figref>, selection of the interactive link invokes the droplet-enabled application and/or information, e.g., the selection of the graphical representation <b>320</b> invokes the Stock Watcher application <b>100</b>. That is, selecting the representation <b>320</b> (link) triggers the droplet supporting the Stock Watcher application <b>100</b> to re-execute on the client computer <b>20</b>. The droplet, in cooperation with the droplet presentation client <b>25</b> and the local operating system <b>80</b>, re-establishes the communication connection <b>54</b> to the application server <b>40</b> for invoking and presenting functionality of the droplet-enabled Stock Watcher application <b>100</b>.</p>
<p id="p-0085" num="0100">The file generated during the downloading operation is accessed to support the representation operation. As illustrated in <figref idref="DRAWINGS">FIG. 1</figref>, each of the files <b>74</b> are associated to a respective link <b>72</b> as a result of the downloading operation, e.g., link <b>1</b> to file <b>1</b> and link <b>2</b> to file <b>2</b>, etc. The files <b>74</b> include information identifying the operating environment on the client computer <b>20</b>, and the identities of the application server <b>40</b> to connect with and the server application that is run to present the Stock Watcher application <b>100</b> (or other content) to the client computer <b>20</b>, once the connection is made. Preferably, the details/content of the file are determined by the parameters that embedded the downloadable item (link) into the informational content <b>36</b> delivered to the client computer <b>20</b>. That is, for example, the commands used to add the teardrop-shaped icon <b>120</b> into the web page that included the Stock Watcher application <b>100</b> include a definition of the file to be created during any downloading operations to load the interactive link to the Stock Watcher application <b>100</b> on a local client computer.</p>
<p id="p-0086" num="0101">In one embodiment, the file <b>74</b> includes a location of the application server <b>40</b>, the application to be run on the server <b>40</b>, the machine local addresses for the application server <b>40</b> and client computer <b>20</b>, ports (buffers supporting inter-machine communication between processes), and droplet type (e.g., HTML, Java applet, a multimedia object, etc.). As discussed above, the file <b>74</b> may also include information to support presentation of the graphical representation <b>320</b> (e.g., rendering information, labels, window definitions). The presentational information included within the file <b>74</b> overrides the default information provided by the application server <b>40</b>.</p>
<p id="p-0087" num="0102">In another embodiment, the files <b>74</b> include a location (address) of the content provider <b>30</b> that originally delivered the droplet-enabled informational content. Under certain conditions, for example an error in establishing the communication connection <b>54</b>, the droplet, the droplet presentation client <b>25</b> and the local operating system <b>80</b> may cooperate to re-establish the communication connection <b>52</b> and request redelivery of the informational content <b>36</b> that originally provided the link <b>72</b>.</p>
<p id="p-0088" num="0103">Accordingly, the present invention provides a mechanism for locally storing links to remote droplet-enabled applications and/or information. For example, <figref idref="DRAWINGS">FIG. 2</figref> illustrates the web page <b>110</b> presenting the droplet-enabled Stock Watcher application <b>100</b>. As described above with reference to <figref idref="DRAWINGS">FIGS. 4A-4D</figref> and <b>5</b>, the droplet handle <b>120</b> (the link) to the Stock Watcher application <b>100</b> was downloaded from the web page <b>110</b> and locally stored as the graphical representation <b>320</b> on the portion <b>310</b> of the desktop of the client computer <b>20</b>. As should be appreciated by those of skill in the art, the graphical representation <b>320</b> of the link is selected by, for example, double clicking the representation <b>320</b> with the pointing device. Once selected, the link causes the local operating system <b>80</b> to invoke the droplet supporting the droplet-enabled application. That is, the droplet cooperates with the droplet presentation client <b>25</b> and local operating system <b>80</b> to access the associated file and to re-establish the communication connection <b>54</b> to the application server <b>40</b> for re-delivering information for re-presenting the Stock Watcher application <b>100</b>. Importantly, the Stock Watcher application <b>100</b> is, in effect, re-executed at the application server <b>40</b> to re-present to the client computer <b>20</b> the functionality of the Stock Watcher application <b>100</b> without having the application <b>100</b> locally loaded on the client computer <b>20</b> and also without re-navigating back to the web page <b>110</b> that originally presented the Stock Watcher application <b>100</b> to the user. By eliminating the need to locally store applications and/or to re-navigate to a web page containing a desired application, the present invention avoids two perceived disadvantages of conventional processes for invoking remote applications and retrieving remotely stored information.</p>
<p id="h-0010" num="0000">Branding of Droplets:</p>
<p id="p-0089" num="0104">In accordance with the present invention, the graphical representation <b>320</b> and, in particular, the application identification portion thereof, includes branding information. The branding information includes, for example, a name of the application or institution supporting the application, and a logo or other familiar and easily identifiable symbol of the application or institution. Generally speaking, institutions utilize branding information to uniquely identify a set of products and/or services of the institution in the hope of establishing in the minds of its customers an indication of certain levels of quality and trustworthiness. Branding is generally judged to be important in electronic commerce (e.g., Internet-based transactions) for branding enables customers to find, compare and select reliable businesses from the wide variety of competitive companies offering similar products and services on the web.</p>
<p id="p-0090" num="0105">By branding graphical representations of droplet-enabled applications and informational content, the supporting or sponsoring institution may establish, for example, a commercially valuable presence on the Internet and, when downloaded, on the client computers. In accordance with the present invention, not only is a locally stored interactive link provided for invoking remotely stored applications and information, but the link may also be visually customized to resemble a commercial image such as, for example a corporation's business name and/or logo.</p>
<p id="p-0091" num="0106">In one embodiment, for example implemented under the MICROSOFT&#xae; Windows&#x2122; operating system, the desktop supports the ability to use custom code libraries to render icons for specific file types. The system <b>10</b> uses this capability to render application specific icons under Windows&#x2122;. In Windows&#x2122;, icon information may be stored in a file. When the desktop needs to draw the icon, it calls a library function that accesses the icon information in the files. The library function reads the to file, builds the icon from the data therein, adds branding information (if any) and returns the image to the desktop for rendering. For droplet-enabled applications and/or information, therefore, files are maintained for all icons. The files include, for example, at least the droplet-enabled symbol (the teardrop symbol <b>326</b> of <figref idref="DRAWINGS">FIG. 4D</figref>) and, in one embodiment, the file is downloaded from the server <b>40</b> as a result of executing the downloading (e.g., improved drag and drop) operation discussed above, and the icon information is included within the file <b>74</b>.</p>
<p id="p-0092" num="0107">In another embodiment, for example implemented under the MACINTOSH&#xae; MacOS&#x2122; operating system, the client operating system natively supports unique icons for each file. On this platform, the icon is assigned when the file is first created, e.g., as a final step of the improved drag and drop operation. Under some circumstance, the proper icon may not initially be defined, e.g., if the file containing the rendering information was copied or dragged from an incompatible system. In those circumstance, when the client invokes the droplet-enabled application, the MacOS&#x2122; checks for the existence of a custom icon in the file. If the icon does not exist, it creates one from the icon information within the file.</p>
<p id="p-0093" num="0108">In another aspect of the present invention, droplet-enabled applications may be &#x201c;skinned.&#x201d; That is, a &#x201c;look and feel&#x201d; of a user interface for a particular droplet-enabled application includes aesthetically appealing or commercially branded visual and auditory characteristics that tend to distinguish the application from other applications running within the network. The visual and auditory characteristics may include, for example, distinctive colors, text fonts, control layouts, graphics or relative sizes and spacing of controls. A &#x201c;skin&#x201d; may reflect an advertising or promotional message, a favored item of interest such as, for example, a scene from a movie, video game or landscape. Additionally, the skin may vary characteristics of controls and labels to provide a multi-lingual presentation of a particular droplet-enabled application. That is, the skinning permits an application to be presented in varying languages such as, for example, English, Spanish, German, Italian, etc.</p>
<p id="p-0094" num="0109">In accordance with the present invention, a skin may be chosen and applied at run-time without requiring a change in the droplet-enabled application's coding or business logic (i.e., the C++, Java, visual basic or other coding used to develop the applications need not be altered). Therefore, skins permit the user interface of a given droplet-enabled application to be customized (e.g., &#x201c;private-labeled&#x201d;) from one implementation (e.g., website) to another. That is, the customized user interface may be configured as a commercially (branded) or aesthetically appealing interface giving each instance of the droplet-enabled application a desired look and feel. The customization and/or the ability to choose a skin may be provided under the direction of a droplet application developer, website webmaster, or end-user.</p>
<p id="p-0095" num="0110">In one embodiment, the skin that is applied as functionality of a droplet-enabled application is presented at the client computer <b>20</b> is selected from a library of available skins maintained at the content provider <b>30</b>. A reference to the selected skin may then be downloaded and maintained within the link locally stored at the client computer <b>20</b>. Alternatively, the skin may be predefined (e.g., hard coded to overrides user preferences) at the application server <b>40</b> so that as the droplet-enabled application is presented to the client computer <b>20</b> the predefined skin is included.</p>
<p id="h-0011" num="0000">Transferring Droplets Between Users:</p>
<p id="p-0096" num="0111">In accordance with one aspect of the present invention, droplets may be transferred between users and their respective client computers. For example, the droplet-enabled client/server system <b>10</b> includes the ability to transmit a message, e.g., to compose an email message, which contains a Droplet&#x2122; and an associated link to a remotely stored droplet-enabled application and/or information. Preferably, the message is constructed to substantially ensure that the recipient is able to run the Droplet&#x2122; and access the droplet-enabled applications or information, regardless of the platform of the receiving machine.</p>
<p id="p-0097" num="0112">For example, a first user may download a droplet-enabled banner ad from a web site onto their desktop. The droplet-enabled banner ad may include, for example, an application for conducting an informational survey (e.g., a marketing survey) of importance to the sponsoring entity of the web site. In exchange for completing the survey, the sponsoring entity may offer a discounted price on some of its merchandise available for purchase on the web site. The first user considers the discounted price an attractive offer and, therefore, wishes to pass the offer onto associates. In accordance with the present invention, a message is created that includes the droplet-enabled banner ad, the Droplet&#x2122; and the link to the remotely stored application and/or information supporting the survey (droplet-enabled survey application and/or information). The message is transmitted to associates of the first user. Depending on capabilities of the associates, or more precisely, on the client computers used by the associates, the droplet-enabled survey application and/or information may be immediately accessed and utilized by the associates.</p>
<p id="p-0098" num="0113">In the present invention, the system <b>10</b> includes at least one of three possible strategies for transmitting and running applications on the associate's client computers, hereinafter referred to as a recipient computer. In a preferred embodiment, each of the three strategies is included within, for example, a message transmitting the link and, depending on the capabilities of the recipient computer, one of the three strategies may be employed to successfully receive the application.</p>
<p id="p-0099" num="0114">Firstly, the transmitting message (e.g., email message) may include a droplet-enabled application and/or information in a file format as an attachment. If the recipient computer is droplet-enabled, i.e., operating in a similar way as client computer <b>20</b> wherein the droplet presentation client <b>25</b> is locally installed, then the attachment appears as a known file type and the recipient may open the droplet-enabled application and/or information file immediately. Once opened, the link to the droplet-enabled survey application may be downloaded (e.g., dragged and dropped) on the recipient computer. As a result, the file attachment is copied onto a desktop or other location on the recipient computer (e.g., the &#x201c;start&#x201d; menu). Once downloaded, the link (e.g., graphical representation <b>320</b> of the link) may be selected to initiate the communication connection <b>54</b> to the application server <b>40</b> so that the droplet-enabled survey application and/or information may be executed and/or retrieved as discussed above.</p>
<p id="p-0100" num="0115">In a second, exemplary implementation where the recipient computer is not droplet-enabled, the droplet-enabled survey application and/or information may be transmitted between parties by transmitting a message (e.g., an email message) containing a hypertext link to a web page. The web page includes a link for launching a web browser and for guiding the user through the process of droplet-enabling the recipient computer. That is, the web browser receives instructions for downloading the droplet presentation client <b>25</b> and links to the droplet-enabled survey applications and/or information.</p>
<p id="p-0101" num="0116">In a third exemplary implementation, a message (e.g., email message) that transmits the droplet-enabled survey application and/or information includes a link to a web page that contains the droplet-enabled survey application and/or information as an embedded object thereof. This method is similar to the methods of retrieving droplet-enabled application and information discussed above with reference to the Stock Watcher application <b>100</b>, with the exception that the recipient is directed specifically to the web site of interest without having to navigate to the site on their own. This implementation assumes that the web browser used by the recipient has the ability to host Java applets.</p>
<p id="p-0102" num="0117"><figref idref="DRAWINGS">FIG. 8</figref> is a simplified block diagram of a droplet-enabled client/server system <b>600</b> configured and operating in accordance with the present invention. In particular, <figref idref="DRAWINGS">FIG. 8</figref> depicts two host computers (e.g., the content provider <b>30</b> and the application server <b>40</b>) servicing requests for droplet-enabled applications and information from a plurality of client computers <b>602</b>-<b>608</b>. The droplet-enabled applications and information are provided to a client computer either directly from the host computers <b>30</b> and <b>40</b> or droplets and links to the applications and information are transferred from another client computer. As the direct host-to-client delivery process has been described in detail above, reference is made generally to the process of transferring droplets and links by and between the client computers <b>602</b>-<b>608</b>.</p>
<p id="p-0103" num="0118">In <figref idref="DRAWINGS">FIG. 8</figref>, client computer <b>608</b> requests informational content from the content provider <b>30</b> (via a message <b>610</b>). In response, the content provider <b>30</b> provides the requested informational content <b>630</b>, which includes, e.g., a link <b>632</b> and a Droplet&#x2122; <b>634</b> embedded therein (via message <b>612</b>). Upon receipt, the Droplet&#x2122; <b>634</b> executes on the client computer <b>608</b>, and in cooperation with a droplet presentation client and the local operating system (not shown), establishes a communication connection <b>614</b> to the application server <b>40</b>. The application server <b>40</b>, in turn, presents (over the communication connection <b>614</b>) to the client computer <b>608</b> the functionality of the droplet-enabled application, including information for presenting the application. The link <b>632</b> may be locally stored to selectively re-establish the communication connection <b>614</b> and re-present the droplet-enabled application. As described in detail above, this process represents the first method of presenting functionality of droplet-enabled applications and/or information to a client computer.</p>
<p id="p-0104" num="0119"><figref idref="DRAWINGS">FIG. 8</figref> also illustrates a second mechanism wherein droplets and links to droplet-enabled applications and/or information are transferred by and between the respective client computers <b>602</b>-<b>608</b>. For example, the link <b>632</b> and droplet <b>634</b> downloaded to client computer <b>608</b> are transferred, via message <b>616</b>, to the client computer <b>606</b>. Once received and stored, the link <b>632</b> and droplet <b>634</b> (shown in dashed-lines to illustrate that the link <b>632</b> and droplet <b>634</b> were not downloaded directly to the client computer <b>606</b>) may be selected to establish a communication connection <b>618</b> to the application server <b>40</b> whereby the droplet-enabled application and information for presenting the application may be passed to client computer <b>606</b>. Similarly, the link <b>632</b> and droplet <b>634</b> may be passed from client computer <b>606</b> to client computer <b>604</b>, via a message <b>620</b>, and from client computer <b>604</b> to client computer <b>602</b> via a message <b>622</b>. As should be appreciated, the passing of links and droplets facilitates the retrieval of droplet-enabled applications and/or information without requiring the user of a client computer to navigate to the content provider <b>30</b> that originally provided the link and droplet for the droplet-enabled application and/or information. In many respects, the second mechanism for presentation provides a more advantageous method of sharing network applications and information among a group of client computers than the first mechanism wherein each client computer with the group individually navigates to and downloads unique instances of links and droplets of droplet-enabled applications.</p>
<p id="h-0012" num="0000">Securing Droplet-enabled Application and/or Information:</p>
<p id="p-0105" num="0120">As generally discussed herein, a link to droplet-enabled applications and/or information is selected to invoke a unique instance of the application and/or information stored at a remote location on a network. In other words, each request for execution of a droplet-enabled application or retrieval of droplet-enabled information is satisfied by providing an individual copy (instance) of the requested application and/or information.</p>
<p id="p-0106" num="0121">However, in accordance with one aspect of the present invention, a secured and individually identifiable instance of droplet-enabled applications and/or information may be shared and transferred between multiple client computers. That is, the present invention provides a keyed instance of a droplet-enabled application having a unique identification field referred to herein as a global unique identification field (GUID). The keyed instance may be transferred between one or more client computers such that information accessed and stored from within the keyed instance may be modified only by client computers that invoke the keyed (identification field specific) instance of the droplet-enabled application. The keyed instance is, in effect, secured such that only users knowing a value of the GUID field may specifically request and access the individual instance of the secured droplet-enabled application and/or information.</p>
<p id="p-0107" num="0122">For example, the client/server system <b>10</b> includes a secured, or keyed, droplet-enabled photo-album application. A first user enters personal photos into a uniquely identifiable instance of the photo-album application, which has a GUID field of value &#x201c;GUID1.&#x201d; The first user's photo images are stored in a remote network location, as are all instances of the photo-album application. A second user requesting the photo-album application receives another uniquely identifiable instance of the application and can not view the first user's photos, unless the second user provides the value of the GUID field corresponding to the first user's instance of the photo-album application. The present invention contemplates several methods by which the GUID field is provided to a user.</p>
<p id="p-0108" num="0123">In one example, the first user transfers the photo-album application to another user, e.g., a third user. That is, the first user composes an e-mail message including a link and droplet to the uniquely identifiable instance of the photo-album application, which has a GUID field of value &#x201c;GUID1&#x201d;. The link is downloadable and includes the GUID field of value &#x201c;GUID1&#x201d; for selectively invoking the unique instance of the photo-album application. In this way, the first user grants access to its personal photos to the third user while substantially prohibiting others (e.g., the second user) from viewing them.</p>
<p id="p-0109" num="0124">In another embodiment, the first user may view the GUID field and pass it directly to the second, third or both users. When requesting a keyed droplet-enabled application, the system <b>10</b> queries the user (e.g., the second or third user) as to whether they want a new instance or a secured instance of the application. If a secured instance is requested, the system <b>10</b> prompts the user to enter the identification field value corresponding to the secured application (e.g., GUID1).</p>
<p id="h-0013" num="0000">Tracking Droplet Dispersion Information:</p>
<p id="p-0110" num="0125">As noted above, each instance of a droplet is associated to a global unique identification field (GUID). As illustrated in <figref idref="DRAWINGS">FIG. 8</figref>, a data store, shown generally at <b>640</b>, is maintained at the application server <b>40</b> for storing tracking information <b>642</b> relating to usage of droplet-enabled applications and/or information. The data store <b>640</b> includes, for example, a database, file, link list, or similar storage feature, that contains the GUID and information regarding each client computer <b>20</b> that has received links and droplets for droplet-enabled applications and/or information.</p>
<p id="p-0111" num="0126">By accessing and retrieving the tracking information <b>642</b> within the data store <b>640</b>, droplet dispersion data can be provided upon request. The droplet dispersion data identifies paths that links and droplets of droplet-enabled applications and/or information have taken throughout the system <b>600</b>. Therefore, the data identifies the links and droplets that are transferred from one user, or client computer, to another (e.g., transmitted via an email message) as well as that are directly accessed and downloaded to client computers from, for example, web sites or imbedded within stand-alone programs.</p>
<p id="p-0112" num="0127">The tracking information <b>642</b> can be used for many purposes, for example, to track the relative success of a promotional campaign. Additionally, the tracking information <b>642</b> can be used to report the number of users a droplet-enabled application has reached from a specific, original user.</p>
<p id="p-0113" num="0128">The tracking information <b>642</b> also includes information detailing usage aspects of particular droplet-enabled applications. For example, the tracking information <b>642</b> includes information as to when (e.g., time and date) links and droplets corresponding to a droplet-enabled application were downloaded to a client computer, how often (number of times) an application was invoked and for how long each time, what application functionality was utilized during a session, how long an application remained active and visible on a client computer's desktop, how often the application was obscured by another application or minimized, and when the links and/or droplets of the droplet-enabled application were deleted or erased from the client computer.</p>
<p id="p-0114" num="0129">Generally speaking, a merchant or sponsoring entity of a droplet-enabled application or website providing a droplet-enabled marketing application (survey) may utilize this tracking information to determine, for example, usage patterns of users or to target promotions to users having a link and a droplet corresponding to the droplet-enabled application (such as a droplet-enabled shopping application having a particular item of inventory) resident on its computer for a predetermined period of time. The targeted promotion may, for example, offer a discounted price to move the client toward a decision to purchase the item of inventory.</p>
<p id="p-0115" num="0130">Preferably, the tracking information provided to merchants or sponsoring entities is anonymous (e.g., does not specifically identify a particular user by name or machine address). Moreover, the tracking information may be provided in a real-time manner by utilizing the communication protocol and message format discussed above.</p>
<p id="p-0116" num="0131">Alternatively, the tracking information may be utilized by droplet application developers to optimize performance of the droplet and/or to evaluate user interest as to particular functionality with the droplet-enabled application.</p>
<p id="h-0014" num="0000">Providing a Ubiquitous Event Channel:</p>
<p id="p-0117" num="0132">In one aspect of the present invention, illustrated in <figref idref="DRAWINGS">FIG. 6</figref>, the client/server system <b>10</b> includes an event channel <b>400</b> for transmitting information to all clients of the system <b>10</b>, all clients that have downloaded a link and droplet of a particular droplet-enabled application or a specific client computer, for example, the client computer <b>20</b>. The information includes, for example, sounds, images, text or any combination thereof, transmitted to users to notify them of an occurrence of an event. The notification to the users may be in real-time (upon the occurrence of the event) or at a predetermined, regularly scheduled time period.</p>
<p id="p-0118" num="0133">In one embodiment, for example, a droplet-enabled e-mail application is provided. In this embodiment, messages are transmitted over the event channel <b>400</b> to notify a user of the receipt of an e-mail message. The event channel <b>400</b> permits the receipt of messages whether the e-mail application is actively executing or is not. Preferably, and when the e-mail application is not actively executing, the event channel notifies the user of the receipt of a message by flashing or blinking an icon associated to the e-mail application (e.g., icon <b>320</b> for the Stock Watcher application <b>100</b>) on the desktop of the user's client machine. In this respect, the droplet presentation client includes an alarm application. The alarm application periodically evaluates the event receiving buffer <b>420</b> at the client computer <b>20</b> for messages such as, for example, an &#x201c;e-mail received&#x201d; notification message as discussed above. In response to a received message, the alarm application alerts a user of the client computer by, for example, utilizing features of the user interface to blink an icon, activate a sound, or launch a pop-up message or menu. Alternatively, in a MICROSOFT&#xae; Windows&#x2122; environment, an envelope symbol or icon representing that the message was received is presented in the &#x201c;tool tray&#x201d; portion <b>340</b> of the desktop (<figref idref="DRAWINGS">FIG. 5</figref>).</p>
<p id="p-0119" num="0134">The implementation of the event channel <b>400</b> requires the cooperation of the client computers, a central event server and application servers spread over the network <b>50</b>. In <figref idref="DRAWINGS">FIG. 6</figref>, the central event server is implemented within the content provider <b>30</b>, although it should be appreciated that other implementation strategies are contemplated. The content provider <b>30</b> includes an event transmitting buffer <b>410</b> operatively coupled to each application server, for example the application server <b>40</b>, and event receiving buffers within each client computer, for example an event receiving buffer <b>420</b> within the client computer <b>20</b>.</p>
<p id="p-0120" num="0135">In one embodiment, platform specific software for the client computers, the central event server and the application servers may be installed locally or accessed through a link to a droplet-enabled version thereof. On the client computers, the software permits a user to individually grant the server applications access to its event receiving buffer <b>420</b>. The client software also provides a view of event history, that is, permits the client to recall previously transmitted information (sounds, images, text or any combination thereof).</p>
<p id="p-0121" num="0136">Once an application (e.g., a droplet-enabled application <b>41</b> executing on the application server <b>40</b>) is authorized by one or more users, the application <b>41</b> posts events by transmitting a message to the transmitting buffer <b>410</b> of the central event server (e.g., message <b>430</b> from the application server <b>40</b> to the content provider <b>30</b>). The message <b>430</b> includes, for example, the details of the posted event as well as information identifying the user or users that are to receive the event. The message is then delivered by the central event server to specified clients along the event channel <b>400</b>.</p>
<p id="p-0122" num="0137">Preferably, a user may invoke an application by selecting the event information originating from the application. Additionally, application specific information may be transmitted whether the application itself is active or not.</p>
<p id="p-0123" num="0138">The ubiquitous event channel <b>400</b> provides a mechanism by which a droplet-enabled application provider, developer or sponsoring entity may selectively notify a user or users of the droplet-enabled application that new or revised content is available. In one embodiment, the provider, developer or sponsoring entity can transmit a notification event to all users or a particular user of a droplet-enabled application based on, for example, a pattern of usage of the application. In another embodiment, users of client computers <b>20</b> may poll or otherwise evaluate the event channel at a predetermined time period to determine whether new or revised information pertinent to a droplet-enabled application loaded therein is available.</p>
<p id="p-0124" num="0139">In an exemplary interactive, droplet-enabled shopping application provided on a website, a user downloads the application and an item of inventory onto their desktop. As noted above, tracking information may be provided to the entity sponsoring the shopping applications. If a purchasing decision is delayed, pricing and availability information pertaining to the item of inventory may changes. By utilizing the tracking information and the event channel <b>400</b>, a notification message containing the revised pricing and/or availability information may be transmitted to the user. Alternatively, the entity sponsoring the shopping application may wish to favorably influence the user to buy the item of inventory and, therefore, may transmit a notification message having a discounted price to the user over the event channel <b>400</b>. According to the present invention, such a targeted promotional message transmitted via the event channel <b>400</b> would be received at the user's client computer whether the shopping application is currently executing or not.</p>
<p id="h-0015" num="0000">Persistent State Maintenance:</p>
<p id="p-0125" num="0140">The present invention provides capabilities for re-establishing a previous operating state of a droplet-enabled application. For example, when a user re-establishes a session with a droplet-enabled application, the state of the application is restored to what it was when the user ended the immediately prior session.</p>
<p id="p-0126" num="0141">In accordance with the present invention, the application server <b>40</b> maintains state information <b>48</b> regarding current operating states of each droplet-enabled application in the data store <b>640</b> on the application server <b>40</b> (<figref idref="DRAWINGS">FIGS. 1 and 8</figref>). The state information <b>48</b> is kept after the application is terminated. The state information <b>48</b> includes a user identification field such that operating state information <b>48</b> for a particular user is retrievable from the data store <b>640</b>. It should be appreciated that the present invention contemplates a sign-on procedure or similar mechanism wherein a user registers prior to beginning a session. Accordingly, state information corresponding to a operating session of the user may be identified by a user id or the like. As registration procedures are generally known, further details of the procedures are not further discussed herein. Rather, it should be appreciated that such a registration procedure is within the scope of the present invention.</p>
<p id="p-0127" num="0142">When the same user re-invokes a droplet-enabled application, the state information <b>48</b> corresponding to each application the user executed during their last session is reviewed and the state information <b>48</b> pertaining to the re-invoked application is retrieved from the data store <b>640</b>. The retrieved state information <b>48</b> is delivered to the user as the droplet-enabled application is presented to the client computer <b>20</b>. In one embodiment, the user is given an option of re-loading or not re-loading the state information <b>48</b> corresponding to the last session. As the state information <b>48</b> is maintained on the application server <b>40</b> and identifiable by an association to a user's registration information, the state information <b>48</b> is provided regardless of client computer <b>20</b> that a current and the prior operating session were run on. Therefore, even if a user re-invokes a droplet-enabled application from another client machine, the previous state information <b>48</b> is accessible and may be provided to the user upon request.</p>
<p id="p-0128" num="0143">For example, and referring again briefly to <figref idref="DRAWINGS">FIG. 8</figref>, a user first logs on to (registers with the system <b>600</b>) and invokes the Stock Watcher application <b>100</b> at a personal computer in their office, represented as the client computer <b>608</b>. During this session, the user alters the size of the window presenting the Stock Watcher application <b>100</b> and adds a number of personal stock offerings to a list of &#x201c;watched&#x201d; stocks under the Stock Watcher application <b>100</b>. As should be appreciated, the state information <b>48</b> is stored in the data store <b>640</b> and accessible by referring the user's identification field. The user terminates the current execution of the application <b>100</b> and logs off the client computer <b>608</b>. Later, the user is traveling and has an opportunity to check on the status of the watched stocks. The user re-invokes the Stock Watcher application <b>100</b> from a portable electronic device such as, for example, a laptop personal computer, represented as the client computer <b>606</b>. Because the user had previously transferred a link (e.g., link <b>632</b>) to the Stock Watcher application <b>100</b> at the client computer <b>606</b> and, the user can establish the communication connection <b>618</b> for retrieving the Stock Watcher application <b>100</b>. In accordance with the present invention, the state information <b>48</b> corresponding to the previous execution of the application <b>100</b> at client computer <b>608</b> is retrieved from the data store <b>640</b> and presented to the user at client computer <b>606</b>. As a result, the resized window presenting the Stock Watcher application <b>100</b> and the newly added personal stock offerings are presented to the user. Accordingly, the present invention avoids a perceived disadvantage in conventional state tracking methodologies, for example, the cookie technology outlined in the Background Section of this Specification. As discussed above, the conventional methodologies are limited in that prior state information is generally stored on the client computer <b>20</b> that previously invoked the session and, therefore, modifications made to an application invoked by a user at one client computer are not apparent when the user the user re-invokes the same application at another client computer.</p>
<p id="p-0129" num="0144">Preferably, the operating session state information <b>48</b> includes sizes and locations of open windows and controls, the position of the cursor within the application, any completed or partially completed data field values, and data fields or items of, for example, inventory selected by the user during the previous session. Preferably, the application server <b>40</b> stores the state information <b>48</b> in a long-term storage device to ensure that a prolonged delay in user activity may be accounted for. Additionally, a standard API is defined for creating a storable packet of information representing the complete state of a droplet-enabled application. Also, the software running on the client computers <b>602</b>-<b>608</b> must be capable of responding to requests (made under the communication protocol outlined above) to create windows and to move the selection.</p>
<p id="p-0130" num="0145">If an operating session between a user and a droplet-enabled application is active and the user attempts to establish another session with the same droplet-enabled application, the system <b>600</b> identifies a conflict. That is, a message is transmitted and displayed on the client computers <b>602</b>-<b>608</b> providing the user the option of either terminating the attempted new session and resuming the existing session, or terminating the existing session and initiating the new session.</p>
<p id="p-0131" num="0146">In order to identify concurrent operating sessions the system <b>600</b> (and system <b>10</b>) stores a flag indicating that a particular user already has an open session with a particular application. When a user attempts to connect to a new application, the system <b>600</b> checks for the value of the flag. If it is set, the system <b>600</b> offers the choice to terminate the existing session or create a new one. If the user chooses to terminate, the system notifies the running application that it has been terminated. If the user chooses to start a new session, the system <b>600</b> stores a flag indicating the choice. Preferably, the flag includes a timestamp to uniquely identify sessions. If the user attempts a connection and there are multiple active sessions, the user is given the option to terminate any one of them.</p>
<p id="h-0016" num="0000">Mirroring the Desktop Application on to a Webtop:</p>
<p id="p-0132" num="0147">In accordance with the present invention, a webtop is a password-protected personal repository, e.g., an account on a web site, for storing links to droplet-enabled applications and information commonly used by authorized users of the account. The links include addresses of servers and names of the processes executed thereon in support of the applications and information in the account.</p>
<p id="p-0133" num="0148">As a link to a droplet-enabled application and/or information is copied to a client computer <b>20</b>, e.g., added to the desktop, within a window, or to a menu exhibited on the desktop, then the link may also be copied or &#x201c;mirrored&#x201d; to the user's webtop. Preferably, the mirroring behavior is under the user's control. That is, a user may specify that the mirroring should happen all the time, never happen or that a message should ask the user whether they want to mirror the link to the user's webtop. If an option is selected to mirror links to the webtop without any interaction with the user, the information necessary to access the webtop account, i.e., an authorized user's name and password, is encoded within the mirroring process.</p>
<p id="p-0134" num="0149">In a preferred embodiment, the mirroring process is performed regardless of the method used to store the link to the droplet-enabled application or information on the desktop. That is, whether a link is downloaded by dragging a droplet handle out of a web page or by choosing a menu command to add it, mirroring may be invoked. In one embodiment, the user may choose to record a link in their webtop without adding the link to the desktop. Also, the mirroring process distinguishes between instances of the same application served by different servers.</p>
<p id="p-0135" num="0150">As a user visits their webtop account, the applications stored for that user are presented in groups. Preferably, applications added are automatically put in a &#x201c;New Applications&#x201d; group. Users have the option to create new groups and move applications according to their preferences. In one embodiment, there is a web interface on the webtop that enables a client to register that an application should be added to a particular user's repository.</p>
<p id="h-0017" num="0000">Multiple Platform Implementation of Droplets:</p>
<p id="p-0136" num="0151">As discussed above, droplet-enabled client computers <b>20</b> include the droplet presentation client <b>25</b>. In accordance with the present invention, the presentation client <b>25</b> is a generic, platform independent application program that processes user interface specifications received from the application server <b>40</b> and routes user driven events back to the application server <b>40</b> utilizing the message formats (e.g., event notification and session commands) discussed above.</p>
<p id="p-0137" num="0152">As the droplet presentation client <b>25</b> is platform independent, one instance of the droplet presentation client <b>25</b> can execute all instances of droplet-enabled applications whether downloaded from a web page or a standalone application running on the desktop. However, the implementation of the droplet presentational client <b>25</b> may differ over various hardware and software platforms. For example, the droplet presentation client <b>25</b> is designed to cooperate with many web browsers of differing vendors, operates on non-personal computer platforms such as PalmPilots, Internet-enabled radio telephones, Netpliance&#x2122;, 1-Openers&#x2122;, tablet computers and others. The presentation client <b>25</b> also is designed to operate on multiple computer platforms such as personal computers running Windows&#x2122; or Linux operating systems, Apple Macintosh and Sun Solaris work stations. Additionally, the server computers <b>30</b> and <b>40</b> operate on multiple hardware and software platforms such as, for example, Windows NT and Unix server platforms.</p>
<p id="p-0138" num="0153">In a web based implementation (within a web page), the droplet presentational client <b>25</b> is preferably implemented as a Java applet, an ActiveX component, or as a browser plug-in. Each of these implementation technologies presents an interface that is embedded in a web page. The parameters of the HTML tag used to include the droplet presentational client <b>25</b> provides the server to connect to and what application to request to the presentational client <b>25</b>.</p>
<p id="p-0139" num="0154">In a desktop based implementation, the droplet presentational client <b>25</b> is implemented as a standard native executable. The presentational client <b>25</b> is launched as the droplet link is invoked and the presentational client <b>25</b> receives information from the link, i.e., from a file associated to the link, that tells the presentational client <b>25</b> which server to connect to and what application to request.</p>
<p id="h-0018" num="0000">Security Features:</p>
<p id="p-0140" num="0155">The droplet-enabled client/server system <b>10</b>, configured and operating in accordance with the present invention, includes security capabilities for password and encryption-protected storage and transmission of information, that is, information transmitted within the communication protocol, message format and event channel, discussed above, between the client computers <b>20</b> and server computers, e.g., <b>30</b> and <b>40</b>.</p>
<p id="p-0141" num="0156">To substantially protect misappropriate of passwords, passwords are digested prior to transmission by using MD5 or similar conventions. Similarly, within applications that request passwords, hashing is performed as passwords are not transmitted in plain text, even on encrypted channels. When a password must be typed into a system, the characters are cloaked, i.e., each character display is represented by an asterisk.</p>
<p id="p-0142" num="0157">Encryption routines are used within the system <b>10</b>. As part of an initial protocol negotiation between client and server, the server may specify that some or all of the transmissions may be compressed. Where processing power constraints are not prohibitive, the system <b>10</b> uses SSL as a standard mechanism to establish common keys. Where processing power constraints are at issued, alternative mechanisms and encryption algorithms may be substituted such as, for example, HTTP tunneling. Substitute algorithms are subject to security review and must be as reliable as the primary algorithm.</p>
<p id="p-0143" num="0158">It should be appreciated that transmitted messaging within a particular droplet-enabled application may be selectively secured or unsecured, at the option of, for example, the droplet application developer or user of the application. Also, the level of security, for example, 1-bit, 30-bit or 128-bit encryption, is selectable at run-time. That is, sensitive information may be transmitted over secured channels, while less sensitive information is transmitted over less secured channels. As is known to those in the art, there are direct relationships between the levels of security and the constraints imposed on the network configuration and desired network performance.</p>
<p id="h-0019" num="0000">Developing Droplet-Enabled Applications:</p>
<p id="p-0144" num="0159">Those skilled in the art should appreciate that developing a droplet-enabled application is similar to developing a GUI or desktop application using conventional component based architectures. Well-designed desktop applications isolate routines for processing user interface, business logic and data storage functions into modules. The separation of user interface, business logic and data storage functions into modules affords a greater portability across differing platforms. For example, modifications can be made to the user interface module to account for hardware specific requirements without affecting the business logic and/or data storage modules. Droplet-enabled applications, constructed in accordance with the present invention, include this layered or module approach to application development.</p>
<p id="p-0145" num="0160"><figref idref="DRAWINGS">FIG. 7</figref> illustrates logical layers of a conventional application <b>500</b> as compared to that of a droplet-enabled application <b>550</b>. As is shown, the conventional application <b>500</b> includes a user interface layer <b>510</b>, a business logic layer <b>520</b> and a database or data storage layer <b>530</b>. The droplet-enabled application <b>550</b> includes a user interface layer <b>560</b>, a business logic layer <b>570</b> and a database layer <b>580</b> that execute on an application server and provide functionality to an invoking client computer.</p>
<p id="p-0146" num="0161">The business logic layers <b>520</b> and <b>570</b> and the data storage layers <b>530</b> and <b>580</b> of the conventional application <b>500</b> and droplet-enabled application <b>550</b> are substantially similar. A difference in the layered approaches of the applications <b>500</b> and <b>550</b> is that the user interface layer <b>560</b> of the droplet-enabled application <b>550</b> includes two components, a client user interface <b>562</b> and a server user interface <b>564</b>. The client user interface <b>562</b> executes on the client computer <b>20</b>, while the server user interface <b>564</b> executes, with the business logic layer <b>570</b> and data storage layer <b>580</b>, on the application server <b>40</b>. Application drivers within the server logical layers (<b>564</b>, <b>570</b> and <b>580</b>) utilize the network communication protocol (i.e., event notification messages, update and window command messages) such that droplet-enabled applications executing on the application server <b>40</b> appear to the user to be executing at the user's client computer <b>20</b>. For example, the application drivers provide instructions for rendering graphical objects, default parameters or data values displayed within the droplet-enabled application <b>550</b> to the client user interface <b>562</b>.</p>
<p id="p-0147" num="0162">It should also be appreciated that an application that includes the above-described module or layered approach may be rewritten as a droplet-enabled application without substantial rewriting of existing codes. That is, the existing application user interface layer need only be modified.</p>
<p id="p-0148" num="0163">Preferably, droplet-enabled applications are deployed as dynamically loadable libraries that, once invoked locally by a client computer, are loaded and run under the control of application drivers on a remote server such as, for example, the application server <b>40</b>. The droplet-enabled applications and the application drivers are preferably written in the Java, C++, Visual Basic, or other equivalent programming languages that support COM or CORBA interfaces. Also, the droplet-enabled application is implemented as an object that is instantiated at startup, holds all program information while active, and causes the application to terminate when the object is destroyed. By instantiating many such objects within a single application server, the server can serve any number of users running independent instances of the same application from the same server.</p>
<heading id="h-0020" level="1">CONCLUSION</heading>
<p id="p-0149" num="0164">While the invention has been described and illustrated in connection with preferred embodiments, many variations and modifications, as will be apparent to those of skill in the art, may be made without departing from the spirit and scope of the invention. By example, and as discussed above, the teachings of this invention are not intended to be limited to any specific method of providing interactive links to applications and/or information stored at remote locations over the network. That is, it should be appreciated that the features disclosed herein are not limited to application in an Internet or web based system.</p>
<p id="p-0150" num="0165">For example, it should be appreciated that the client computer <b>20</b> may be any type of computing device such as a personal computer, work station, portable or handheld device, or the like. In a preferred embodiment, the client computer <b>20</b>, the content provider <b>30</b> and the application server <b>40</b> are operatively coupled over a packet-switched network such as, for example the Internet, having wired and wireless interconnections between devices.</p>
<p id="p-0151" num="0166">Additionally, the preferred embodiment of the present invention includes two server computers, the content provider for providing informational content and the application server for providing droplet-enabled applications and information including rendering instructions, default data values and application-specific business logic to the droplet-enabled applications. It should be appreciated that it is within the scope of the present invention for one server computer to provide these services and functionality. That is, the content provider may include hardware and software resources for providing the droplet-enabled applications and information including the rendering instructions, default data values and application-specific business logic to the droplet-enabled applications. In this embodiment, the two network connections discussed above as communication connections <b>52</b> and <b>54</b> may physically be one connection that satisfies two logical functions as illustrated herein.</p>
<p id="p-0152" num="0167">Accordingly, the invention as set forth in the appended clams is not limited to the precise details of construction set forth above as such other variations and modifications as would be apparent to one skilled in the art are intended to be included within the spirit and scope of the invention as set forth in the defined claims.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A computerized method for mobile device interactivity, the method comprising:
<claim-text>hosting a network application on a server;</claim-text>
<claim-text>receiving, at the network application on the server, an event message from a mobile application executing on a mobile device, the mobile application having executable code embedded therein for communicating with the network application on the server, the mobile application further having user interface information for presenting a user interface for the network application on the mobile device, the event message representing at least one input received from the user interface;</claim-text>
<claim-text>within the network application, generating data values based on the at least one input in the event message and mobile device information; and</claim-text>
<claim-text>sending to the mobile device a mobile application update message with at least some of the generated data values and instructions for use by the executable code to present the data values within the user interface at the mobile device.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the mobile device is a mobile phone.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the mobile device is a tablet computer.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the mobile application is a stand-alone application executable on a mobile device processing platform.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the mobile application is executable based on a user selection of a touchscreen interface on the mobile device.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein receiving an event message comprises receiving an event message reporting data entry in a text box in the user interface.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein receiving an event message comprises receiving an event message reporting data entry within a drop down list in the user interface.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the mobile device information includes information indicating at least one of hardware, software and user interface capabilities of the mobile device.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the mobile application is provided to the mobile device via a third party application source.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. A computerized method for mobile device interactivity, the method comprising:
<claim-text>accessing a network application on a server via a mobile application executing on a mobile device, the mobile application having executable code embedded therein for communicating with the network application;</claim-text>
<claim-text>the mobile application further having user interface information for presenting a user interface for the network application on the mobile device;</claim-text>
<claim-text>generating an event message via the mobile application, the event message representing at least one input received from the user interface;</claim-text>
<claim-text>transmitting from the mobile device to the server such that the network application is operative to generate data values based on the at least one input in the event message and mobile device information; and</claim-text>
<claim-text>receiving at the mobile device a mobile application update message with at least some of the generated data values and instructions for use by the executable code to present the data values within the user interface.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The method of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the mobile device is a mobile phone.</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The method of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the mobile device is a tablet computer.</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The method of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the mobile application is a stand-alone application executable on a mobile device processing platform.</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The method of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the mobile application is executable based on a user selection of a touchscreen interface on the mobile device.</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The method of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein generating an event message comprises generating an event message reporting data entry in a text box in the user interface.</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The method of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein generating an event message comprises generating an event message reporting data entry within a drop down list in the user interface.</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The method of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the mobile device information includes information indicating at least one of hardware, software and user interface capabilities of the mobile device.</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The method of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the mobile application is received by the mobile device via a third party application source.</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. An apparatus providing for mobile device interactivity, the apparatus comprising:
<claim-text>a networked-based processing device storing a network application including a plurality of executable instruction thereon;</claim-text>
<claim-text>an input communication device operative to receive an event message from a mobile application executing on a mobile device, the mobile application having executable code embedded therein for communicating with the network application on the network-based processing device, the mobile application further having user interface information for presenting a user interface for the network application on the mobile device, the event message representing at least one input received from the user interface;</claim-text>
<claim-text>the network-based processing device operative to generate data values based on the at least one input in the event message and mobile device information; and</claim-text>
<claim-text>an output communication device for transmitting to the mobile device a mobile application update message with at least some of the generated data values and instructions for use by the executable code to present the data values within the user interface at the mobile device.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. The apparatus of <claim-ref idref="CLM-00019">claim 19</claim-ref>, wherein the event message indicates data entry in a text box in the user interface.</claim-text>
</claim>
<claim id="CLM-00021" num="00021">
<claim-text>21. The apparatus of <claim-ref idref="CLM-00019">claim 19</claim-ref>, wherein the event message indicates data entry within a drop down list in the user interface.</claim-text>
</claim>
<claim id="CLM-00022" num="00022">
<claim-text>22. The apparatus of <claim-ref idref="CLM-00019">claim 19</claim-ref>, wherein the mobile device information includes information indicating at least one of hardware, software and user interface capabilities of the mobile device.</claim-text>
</claim>
<claim id="CLM-00023" num="00023">
<claim-text>23. A mobile device comprising:
<claim-text>a memory device storing executable instructions;</claim-text>
<claim-text>a processing device operative to perform processing of a mobile application;</claim-text>
<claim-text>a communication device operative to access a network application on a server via a mobile application, the mobile application having executable code embedded therein for communicating with the network application;</claim-text>
<claim-text>the mobile application further having user interface information for presenting a user interface for the network application on the mobile device;</claim-text>
<claim-text>the processing device, in response to the mobile application, operative to generate an event message representing at least one input received from the user interface;</claim-text>
<claim-text>the communication device operative to transmit to the server such that the network application is operative to generate data values based on the at least one input in the event message and mobile device information; and</claim-text>
<claim-text>the communication device operative to receive a mobile application update message with at least some of the generated data values and instructions for use by the executable code to present the data values within the user interface.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00024" num="00024">
<claim-text>24. The mobile device of <claim-ref idref="CLM-00023">claim 23</claim-ref>, wherein the mobile device is a mobile phone.</claim-text>
</claim>
<claim id="CLM-00025" num="00025">
<claim-text>25. The mobile device of <claim-ref idref="CLM-00023">claim 23</claim-ref>, wherein the mobile device is a tablet computer.</claim-text>
</claim>
<claim id="CLM-00026" num="00026">
<claim-text>26. The mobile device of <claim-ref idref="CLM-00023">claim 23</claim-ref>, wherein the mobile application is a stand-alone application executable on a mobile device processing platform.</claim-text>
</claim>
<claim id="CLM-00027" num="00027">
<claim-text>27. The mobile device of <claim-ref idref="CLM-00023">claim 23</claim-ref> further comprising:
<claim-text>a touchscreen interface wherein the mobile application is executable based on a user selection of the touchscreen interface.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00028" num="00028">
<claim-text>28. The mobile device of <claim-ref idref="CLM-00023">claim 23</claim-ref>, wherein the event message includes reporting data entry in a text box in the user interface.</claim-text>
</claim>
<claim id="CLM-00029" num="00029">
<claim-text>29. The mobile device of <claim-ref idref="CLM-00023">claim 23</claim-ref>, wherein the event message includes reporting data entry within a drop down list in the user interface.</claim-text>
</claim>
<claim id="CLM-00030" num="00030">
<claim-text>30. The mobile device of <claim-ref idref="CLM-00023">claim 23</claim-ref>, wherein the mobile device information includes information indicating at least one of: hardware, software and user interface capabilities of the mobile device.</claim-text>
</claim>
<claim id="CLM-00031" num="00031">
<claim-text>31. The mobile device of <claim-ref idref="CLM-00023">claim 23</claim-ref>, wherein the mobile application is received via a third party application source.</claim-text>
</claim>
<claim id="CLM-00032" num="00032">
<claim-text>32. A network configured computer processing system, comprising:
<claim-text>a plurality of client computers, each having an application program code, an operating system program code and a presentation client program code operating thereon, said application program code for requesting informational content stored remotely across said network;</claim-text>
<claim-text>a first server computer for storing said informational content, a predetermined portion of said informational content having computer program code embedded therein, said first server for delivering said informational content in response to requests from said client computers;</claim-text>
<claim-text>a second server computer for storing applications and second information invoked by said embedded computer program code and first information including presentational information for presenting said invoked applications and second information, the presentational information including information relating to the operating environment of a requesting client computer;</claim-text>
<claim-text>a communication connection established between the requesting client computer and said second server by said operating system program code, said presentation client program code and said embedded computer program code, said communication connection for receiving said first information and for presenting said invoked application and said second information at said requesting client computer; and</claim-text>
<claim-text>an interactive link, stored at said requesting client computer, for selectively re-establishing said communication connection for receiving said first information and for presenting said invoked application and said second information from said second server computer.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00033" num="00033">
<claim-text>33. The system as claimed in <claim-ref idref="CLM-00032">claim 32</claim-ref>, wherein the operating system program code embedded in the informational content determine a plurality of user interface requirements from the operating system program code of the plurality of client computers.</claim-text>
</claim>
<claim id="CLM-00034" num="00034">
<claim-text>34. The system as claimed in <claim-ref idref="CLM-00032">claim 32</claim-ref>, wherein the computer program code embedded in the informational content determines a plurality of user interface requirements from the operating system program code of the plurality of client computers.</claim-text>
</claim>
<claim id="CLM-00035" num="00035">
<claim-text>35. The system as claimed in <claim-ref idref="CLM-00032">claim 32</claim-ref>, wherein the operating system program code further includes information identifying the second server computer to connect with and the invoked applications on the second server computer to present on the plurality of client computers once the communication connection is established.</claim-text>
</claim>
<claim id="CLM-00036" num="00036">
<claim-text>36. The system as claimed in <claim-ref idref="CLM-00032">claim 32</claim-ref>, wherein the communication connection is a continuous open socket communication connection.</claim-text>
</claim>
<claim id="CLM-00037" num="00037">
<claim-text>37. The system as claimed in <claim-ref idref="CLM-00036">claim 36</claim-ref>, wherein a real-time push of update information is sent from the second server computer to the plurality of client computers.</claim-text>
</claim>
<claim id="CLM-00038" num="00038">
<claim-text>38. The system as claimed in <claim-ref idref="CLM-00032">claim 32</claim-ref>, wherein the communication connection is a non-continuous communication connection.</claim-text>
</claim>
<claim id="CLM-00039" num="00039">
<claim-text>39. The system as claimed in <claim-ref idref="CLM-00038">claim 38</claim-ref>, wherein a real-time pull of update information is retrieved from the second server computer by the plurality of client computers.</claim-text>
</claim>
<claim id="CLM-00040" num="00040">
<claim-text>40. The system as claimed in <claim-ref idref="CLM-00032">claim 32</claim-ref>, wherein the system is operative to apply a skin to the presentation of the invoked application in response to a user selection.</claim-text>
</claim>
<claim id="CLM-00041" num="00041">
<claim-text>41. The system as claimed in <claim-ref idref="CLM-00032">claim 32</claim-ref>, wherein the informational content is a document including an interactive link.</claim-text>
</claim>
<claim id="CLM-00042" num="00042">
<claim-text>42. The system as claimed in <claim-ref idref="CLM-00032">claim 32</claim-ref>, wherein the system is operative to: retrieve a plurality of informational content each having computer program code embedded therein; and simultaneously execute the plurality of embedded computer program code to establish a plurality of communication connections to the second server computer.</claim-text>
</claim>
<claim id="CLM-00043" num="00043">
<claim-text>43. The system as claimed in <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein the system is operative to transmit information between the plurality of client computers and the second server computer using a network communication protocol.</claim-text>
</claim>
<claim id="CLM-00044" num="00044">
<claim-text>44. The system as claimed in <claim-ref idref="CLM-00043">claim 43</claim-ref>, wherein the network communication protocol comprises a plurality of message formats to communicate properties and events pertaining to components of the presented application.</claim-text>
</claim>
<claim id="CLM-00045" num="00045">
<claim-text>45. The system as claimed in <claim-ref idref="CLM-00044">claim 44</claim-ref>, wherein the message formats comprise event notifications, update commands, window commands, browser commands, session commands and service directory.</claim-text>
</claim>
<claim id="CLM-00046" num="00046">
<claim-text>46. The system as claimed in <claim-ref idref="CLM-00044">claim 44</claim-ref>, wherein communication protocol and message formats transmit information defining a net change of information between a current application state and a next application state.</claim-text>
</claim>
<claim id="CLM-00047" num="00047">
<claim-text>47. The system as claimed in <claim-ref idref="CLM-00046">claim 46</claim-ref>, wherein the system is operative to refresh a state of the application presented on the plurality of client computers using the net change information without retrieving an entire presentation information.</claim-text>
</claim>
<claim id="CLM-00048" num="00048">
<claim-text>48. The system as claimed in <claim-ref idref="CLM-00032">claim 32</claim-ref>, wherein the system is operative to store information for tracking the presentation of the application.</claim-text>
</claim>
<claim id="CLM-00049" num="00049">
<claim-text>49. The system as claimed in <claim-ref idref="CLM-00048">claim 48</claim-ref>, wherein the information for tracking includes a global unique identifier assigned to the interactive link and information for identifying the plurality of client computers storing the interactive link.</claim-text>
</claim>
<claim id="CLM-00050" num="00050">
<claim-text>50. The system as claimed in <claim-ref idref="CLM-00032">claim 32</claim-ref>, wherein the system is operative to transmit information to the plurality of client computers storing a particular informational content and interactive link via an event channel.</claim-text>
</claim>
<claim id="CLM-00051" num="00051">
<claim-text>51. The system as claimed in <claim-ref idref="CLM-00034">claim 34</claim-ref>, wherein the file further contains the identification of the invoked applications on the plurality of client computers.</claim-text>
</claim>
<claim id="CLM-00052" num="00052">
<claim-text>52. The system as claimed in <claim-ref idref="CLM-00034">claim 34</claim-ref>, wherein the file further contains machine local addresses for both the second server computer and the plurality of client computers.</claim-text>
</claim>
<claim id="CLM-00053" num="00053">
<claim-text>53. The system as claimed in <claim-ref idref="CLM-00034">claim 34</claim-ref>, wherein the file further contains ports.</claim-text>
</claim>
</claims>
</us-patent-grant>

<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08627295-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08627295</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>12576858</doc-number>
<date>20091009</date>
</document-id>
</application-reference>
<us-application-series-code>12</us-application-series-code>
<us-term-of-grant>
<us-term-extension>735</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>9</main-group>
<subgroup>44</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>717131</main-classification>
<further-classification>717127</further-classification>
<further-classification>717128</further-classification>
<further-classification>717129</further-classification>
<further-classification>717130</further-classification>
<further-classification>717132</further-classification>
<further-classification>717133</further-classification>
</classification-national>
<invention-title id="d2e53">Methods and apparatus for testing user interfaces</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>5475843</doc-number>
<kind>A</kind>
<name>Halviatti et al.</name>
<date>19951200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717124</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>6421822</doc-number>
<kind>B1</kind>
<name>Pavela</name>
<date>20020700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717125</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>6978440</doc-number>
<kind>B1</kind>
<name>Pavela</name>
<date>20051200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717125</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>7093238</doc-number>
<kind>B2</kind>
<name>Givoni et al.</name>
<date>20060800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717129</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>7272822</doc-number>
<kind>B1</kind>
<name>Riggins et al.</name>
<date>20070900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717124</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>7337432</doc-number>
<kind>B2</kind>
<name>Dathathraya et al.</name>
<date>20080200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717125</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>7421683</doc-number>
<kind>B2</kind>
<name>Robertson et al.</name>
<date>20080900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717130</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>7437614</doc-number>
<kind>B2</kind>
<name>Haswell et al.</name>
<date>20081000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714 3813</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>7856619</doc-number>
<kind>B2</kind>
<name>He et al.</name>
<date>20101200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717109</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>7979849</doc-number>
<kind>B2</kind>
<name>Feldstein et al.</name>
<date>20110700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717128</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>2003/0084429</doc-number>
<kind>A1</kind>
<name>Schaefer</name>
<date>20030500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717125</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>2004/0025083</doc-number>
<kind>A1</kind>
<name>Nanja et al.</name>
<date>20040200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714 35</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00013">
<document-id>
<country>US</country>
<doc-number>2005/0188357</doc-number>
<kind>A1</kind>
<name>Derks et al.</name>
<date>20050800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717124</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00014">
<document-id>
<country>US</country>
<doc-number>2007/0220342</doc-number>
<kind>A1</kind>
<name>Vieira et al.</name>
<date>20070900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714 33</main-classification></classification-national>
</us-citation>
</us-references-cited>
<number-of-claims>16</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>None</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>4</number-of-drawing-sheets>
<number-of-figures>4</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20110088018</doc-number>
<kind>A1</kind>
<date>20110414</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Foley</last-name>
<first-name>Harold Brooks</first-name>
<address>
<city>Cary</city>
<state>IL</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Peeters</last-name>
<first-name>Christine</first-name>
<address>
<city>Bartlett</city>
<state>IL</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Foley</last-name>
<first-name>Harold Brooks</first-name>
<address>
<city>Cary</city>
<state>IL</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Peeters</last-name>
<first-name>Christine</first-name>
<address>
<city>Bartlett</city>
<state>IL</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Hanley, Flight &#x26; Zimmerman, LLC</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>General Electric Company</orgname>
<role>02</role>
<address>
<city>Schenectady</city>
<state>NY</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Tsai</last-name>
<first-name>Henry W. H.</first-name>
<department>2184</department>
</primary-examiner>
<assistant-examiner>
<last-name>Shyu</last-name>
<first-name>Jing-Yih</first-name>
</assistant-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">Methods and apparatus for testing user interfaces are disclosed herein. An example method includes extracting object data from a file associated with a user interface; storing a plurality of object definitions corresponding to the extracted object data in a computer readable storage medium; and generating, at a computer having a tangible memory, a test script for the user interface using the object definitions, wherein the test script is to be generated based on one or more test definitions defining one or more attributes of the object definitions to be tested in the test script, and wherein the test script is to be generated based on one or more automation rules defining how the object definitions are to be tested.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="232.66mm" wi="176.61mm" file="US08627295-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="235.88mm" wi="191.43mm" file="US08627295-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="214.80mm" wi="169.33mm" orientation="landscape" file="US08627295-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="242.49mm" wi="176.61mm" file="US08627295-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="224.03mm" wi="172.30mm" file="US08627295-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">FIELD OF THE DISCLOSURE</heading>
<p id="p-0002" num="0001">The present disclosure relates generally to healthcare information systems and, more particularly, to methods and apparatus for testing user interfaces.</p>
<heading id="h-0002" level="1">BACKGROUND</heading>
<p id="p-0003" num="0002">Healthcare environments, such as hospitals and clinics, typically include information systems (e.g., electronic medical record (EMR) systems, lab information systems, outpatient and inpatient systems, hospital information systems (HIS), radiology information systems (RIS), storage systems, picture archiving and communication systems (PACS), etc.) to manage information such as, for example, patient medical histories, imaging data, test results, diagnosis information, management information, financial information, and/or scheduling information. To access the healthcare information, add data to one or more of the information systems, and/or to otherwise interact with the information system(s), workstations associated with the information system(s) utilize one or more user interfaces. The user interface(s) are typically tested before implementation in a healthcare environment and/or any other system utilizing user interface(s).</p>
<heading id="h-0003" level="1">SUMMARY</heading>
<p id="p-0004" num="0003">An example computer implemented method includes extracting object data from a file associated with a user interface. Further, the example method includes storing a plurality of object definitions corresponding to the extracted object data in a computer readable storage medium. Further, the example method includes generating, at a computer having a tangible memory, a test script for the user interface using the object definitions, wherein the test script is to be generated based on one or more test definitions defining one or more attributes of the object definitions to be tested in the test script, and wherein the test script is to be generated based on one or more automation rules defining how the object definitions are to be tested.</p>
<p id="p-0005" num="0004">An example tangible machine readable medium has instructions stored thereon that, when executed, cause a machine to extract object data from a file associated with a user interface. Further, the example tangible machine readable medium has instructions stored thereon that, when executed, cause a machine to store a plurality of object definitions corresponding to the extracted object data in a computer readable storage medium. Further, the example tangible machine readable medium has instructions stored thereon that, when executed, cause a machine to generate a test script for the user interface using the object definitions, wherein the test script is to be generated based on one or more test definitions defining one or more attributes of the object definitions to be tested in the test script, and wherein the test script is to be generated based on one or more automation rules defining how the object definitions are to be tested.</p>
<p id="p-0006" num="0005">An example apparatus includes an object data extractor to object data from a file associated with a user interface. Further, the example apparatus includes a memory to store a plurality of object definitions corresponding to the extracted object data. Further, the example apparatus includes a test script generator to generate a test script for the user interface using the object definitions, wherein the test script is to be generated based on one or more test definitions defining one or more attributes of the object definitions to be tested in the test script, and wherein the test script is to be generated based on one or more automation rules defining how the object definitions are to be tested.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0007" num="0006"><figref idref="DRAWINGS">FIG. 1</figref> is a block diagram of an example healthcare information system.</p>
<p id="p-0008" num="0007"><figref idref="DRAWINGS">FIG. 2</figref> is a block diagram of an example apparatus that may be used to implement the example testing module of <figref idref="DRAWINGS">FIG. 1</figref>.</p>
<p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. 3</figref> is a flow diagram representative of example machine readable instructions that may be executed to implement the example testing module of <figref idref="DRAWINGS">FIGS. 1</figref> and/or <b>2</b>.</p>
<p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. 4</figref> is a block diagram of an example processor system that may be used to execute the machine readable instructions of <figref idref="DRAWINGS">FIG. 3</figref> to implement the example testing module of <figref idref="DRAWINGS">FIGS. 1</figref> and/or <b>2</b>.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<p id="p-0011" num="0010">The foregoing summary, as well as the following detailed description of certain implementations of the methods, apparatus, systems, and/or articles of manufacture described herein, will be better understood when read in conjunction with the appended drawings. It should be understood, however, that the methods, apparatus, systems, and/or articles of manufacture described herein are not limited to the arrangements and instrumentality shown in the attached drawings.</p>
<heading id="h-0005" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0012" num="0011">Although the following discloses example methods, apparatus, systems, and articles of manufacture including, among other components, firmware and/or software executed on hardware, it should be noted that such methods, apparatus, systems, and/or articles of manufacture are merely illustrative and should not be considered as limiting. For example, it is contemplated that any or all of these firmware, hardware, and/or software components could be embodied exclusively in hardware, exclusively in software, exclusively in firmware, or in any combination of hardware, software, and/or firmware. Accordingly, while the following describes example methods, apparatus, systems, and/or articles of manufacture, the examples provided are not the only way(s) to implement such methods, apparatus, systems, and/or articles of manufacture.</p>
<p id="p-0013" num="0012">Systems designed to interact with a user typically implement a plurality of user interfaces by which exchanges of information or data are achieved. Many systems utilize a graphical user interface (GUI) that is displayed to the user and is capable of conveying and receiving information. A typical GUI includes a plurality of elements or objects (e.g., buttons, check boxes, combo-boxes, lists, text boxes, etc.) with which the user interacts to provide information and/or to instruct one or more devices or programs to perform certain operation(s).</p>
<p id="p-0014" num="0013">Programmers and user interface designers often use one or more applications to build such a user interface based on, for example, a markup language. Example markup languages include extensible markup language (XML), hypertext markup language (HTML), and extensible application markup language (XAML). User interfaces can be designed or implemented additional or alternative languages, techniques, programs, applications, software, etc.</p>
<p id="p-0015" num="0014">User interfaces are typically tested for proper functionality before their release, during development, as a debugging procedure, and/or at any other suitable time or stage. However, testing user interfaces presents significant challenges. For example, even a simple user interface is likely to have a large amount of possible sequences through which a user may navigate. A selection of a first option may open any number of other options and/or paths, while a selection of a second option may open another number of additional or alternative options and/or paths. Moreover, the sequence in which the user selects the options alters the subsequent options and/or paths. These conditions cause the size of the testing space to increase exponentially with the increase in user interface elements, objects, paths, and/or options.</p>
<p id="p-0016" num="0015">This difficultly is exacerbated by the fact that user interfaces are often tested using manually created test scripts. To manually create test scripts, testers explore the user interfaces as they are visually presented (e.g., to a user on a display device) by navigating through the possible options and/or paths. As the testers navigate through a user interface, the testers generate test scripts capable of exercising the different options, elements, and/or paths. The manual creation of the test scripts is tedious, time consuming, and likely to include errors.</p>
<p id="p-0017" num="0016">Challenges also arise during development stages for testing user interfaces. During development, changes or updates have ripple effects throughout the testing process. That is, a change to one element may affect dependent sequence(s) and/or other options or paths. When testing continuously throughout the development of user interface, manual creation of large portions of the test scripts is repeated, redone, and/or altered each time a change or update is made to the user interface. When relying on testers to perform these tasks using the visual representation of the user interface, the testing process can be time consuming and costly.</p>
<p id="p-0018" num="0017">In addition, relying on the visual representation of the user interface limits a tester to that particular implementation of the user interface. Often, different versions of a user interface vary in regards to the visually presented elements, options, and/or paths (e.g., when testing a user-customizable user interface). In such instances, the different versions require different test scripts. Using conventional methods, the tedious process of manually creating test scripts must be repeated for the different versions of the user interface by exploring the different versions as they are visually presented.</p>
<p id="p-0019" num="0018">The example methods, apparatus, systems, and/or articles of manufactures described herein improve testing of user interfaces by, for example, providing an automated validation of user interface content and the functionality thereof. As described in greater detail below, the example methods, apparatus, systems, and/or articles of manufacture described herein use data extracted from a file associated with a user interface to generate one or more object definitions corresponding to objects or elements of the user interface. Generally, the object definitions are used to automatically generate one or more test scripts capable of testing the options and/or paths of the user interface. Aspects of the automated generation may be controlled and/or configured using, for example, a set of rules and/or definitions. The automatically generated test scripts can be stored and used to test a corresponding user interface. Additional aspects and advantages of the example methods, apparatus, systems, and/or articles of manufacture are described in greater detail herein.</p>
<p id="p-0020" num="0019">While the example methods, apparatus, systems, and/or articles of manufacture are described herein in the context of healthcare information systems, the example methods, apparatus, systems, and/or articles of manufacture described herein can be implemented in connection with any suitable type of method, apparatus, system, and/or article of manufacture associated with and/or implementing one or more user interfaces. That is, the healthcare information systems described herein are for purposes of illustration and not limitation. Different types of user interfaces implemented in connection with different types of systems can be tested using the example methods, apparatus, systems, and/or articles of manufacture described herein.</p>
<p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. 1</figref> is a block diagram of an example medical data system <b>100</b> capable of implementing the example methods, apparatus, systems, and/or articles of manufacture described herein for testing user interfaces. The example medical data system <b>100</b> of <figref idref="DRAWINGS">FIG. 1</figref> includes a plurality of healthcare enterprises <b>102</b><i>a</i>-<i>c</i>. In the illustrated example of <figref idref="DRAWINGS">FIG. 1</figref>, the enterprise labeled with reference numeral <b>102</b><i>a </i>is illustrated and described herein as a hospital. However, any of the enterprises <b>102</b><i>a</i>-<i>c </i>may be any type of entity and/or device such as, for example, a clinic, a physician's office, a laboratory, a testing center, a personal computer, a mobile device (e.g., a smartphone, a personal digital assistant, and/or a cellular telephone), etc. Further, while <figref idref="DRAWINGS">FIG. 1</figref> illustrates the components of the hospital <b>102</b><i>a</i>, the other enterprises (enterprises <b>102</b><i>b</i>-<i>c</i>) may include additional, alternative, and/or similar components, although not shown in <figref idref="DRAWINGS">FIG. 1</figref> for purposes of brevity and not limitation.</p>
<p id="p-0022" num="0021">The enterprises <b>102</b><i>a</i>-<i>c </i>are in communication via a network <b>104</b> implemented by, for example, the Internet, an intranet, a private network, a wired or wireless Local Area Network, a wired or wireless Wide Area Network, a cellular network, and/or any other suitable network. Further, although not shown in the example of <figref idref="DRAWINGS">FIG. 1</figref>, the example medical data system <b>100</b> of <figref idref="DRAWINGS">FIG. 1</figref> may implement an information integration system (e.g., an Integrating the Healthcare Enterprise (IHE) Cross Enterprise Document Sharing (XDS) integration profile) or may be a part of, for example, a health information exchange (HIE), a regional health information organizations (RHIO) configured to facilitate sharing (e.g., access, distribution, registration, etc.) of medical data among the enterprises <b>102</b><i>a</i>-<i>c. </i></p>
<p id="p-0023" num="0022">The example hospital <b>102</b><i>a </i>includes a healthcare information system <b>106</b>. While not shown in <figref idref="DRAWINGS">FIG. 1</figref> for purposes of clarity and brevity, the other enterprises <b>102</b><i>b</i>-<i>c </i>may include healthcare information systems similar to that of the hospital <b>102</b><i>a</i>. In the illustrated example, the healthcare information system <b>106</b> includes a hospital information system (HIS) <b>112</b>, an electronic medical record system (EMR) <b>113</b>, a radiology information system (RIS) <b>114</b>, a lab information system <b>115</b>, a picture archiving and communication system (PACS) <b>116</b>, and an inpatient/outpatient system <b>117</b>. In the illustrated example, the hospital information system <b>112</b>, the electronic medical record system <b>113</b>, the radiology information system <b>114</b>, the lab information system <b>115</b>, the PACS <b>116</b>, and the inpatient/outpatient system <b>117</b> are housed in the hospital <b>102</b><i>a </i>and locally archived. However, in other implementations, one or more elements of the example healthcare information system <b>106</b> may be housed one or more other suitable locations. Furthermore, one or more components of the healthcare information system <b>106</b> may be combined and/or implemented together. For example, the radiology information system <b>114</b> and/or the PACS <b>116</b> may be integrated with the hospital information system <b>112</b>, the PACS <b>116</b> may be integrated with the radiology information system <b>114</b>, and/or any other of the six example information systems <b>112</b>, <b>113</b>, <b>114</b>, <b>115</b>, <b>116</b>, and/or <b>117</b> may be integrated together.</p>
<p id="p-0024" num="0023">The hospital information system <b>112</b> stores healthcare information such as clinical reports, patient information, practitioner information, and/or financial data received from, for example, personnel at a hospital, clinic, and/or a physician's office. The EMR system <b>113</b> stores information related to patients and/or practitioners, medical histories, current treatment records, etc. The radiology information system <b>114</b> stores information such as, for example, radiology reports, x-ray images, messages, warnings, alerts, patient scheduling information, patient demographic data, patient tracking information, and/or physician and patient status monitors. Additionally, the radiology information system <b>114</b> enables exam order entry (e.g., ordering an x-ray of a patient) and image and film tracking (e.g., tracking identities of one or more people that have checked out a film).</p>
<p id="p-0025" num="0024">The lab information system <b>115</b> stores clinical information such as lab results, test scheduling information, corresponding practitioner(s), and/or other information related to the operation(s) of one or more labs at the corresponding healthcare facility. The PACS <b>116</b> stores medical images (e.g., x-rays, scans, three-dimensional renderings, etc.) as, for example, digital images in a database or registry. Images are stored in the PACS <b>116</b> by healthcare practitioners (e.g., imaging technicians, physicians, radiologists) after a medical imaging of a patient and/or are automatically transmitted from medical imaging devices to the PACS <b>116</b> for storage. In some examples, the PACS <b>116</b> may also include a display device and/or viewing workstation to enable a healthcare practitioner to communicate with the PACS <b>116</b>. The inpatient/outpatient system <b>117</b> stores information related to the admission and discharge of patients such as follow up schedules, patient instructions provided by a practitioner, prescription information, presenting symptoms, contact information, etc.</p>
<p id="p-0026" num="0025">While example types of information are described above as being stored in certain elements of the healthcare information system <b>106</b>, different types of healthcare data may be stored in one or more of the hospital information system <b>112</b>, the EMR system <b>113</b>, the radiology information system <b>114</b>, the lab information system <b>115</b>, the PACS <b>116</b>, and/or the inpatient/outpatient system <b>117</b>. Further, the information stored in these elements may overlap and/or share types of data.</p>
<p id="p-0027" num="0026">The example hospital <b>102</b><i>a </i>of <figref idref="DRAWINGS">FIG. 1</figref> and the other enterprises <b>102</b><i>b</i>-<i>c </i>include one or more workstations <b>108</b><i>a</i>-<i>c </i>capable of interacting with one or more components of the healthcare information system <b>106</b> (and/or other healthcare information systems implemented in, for example, the other enterprises <b>102</b><i>b</i>-<i>c</i>). The workstation(s) <b>108</b><i>a </i>may be any equipment (e.g., a personal computer, a mobile device such as a smartphone, etc.) capable of executing software that permits electronic data (e.g., medical reports) and/or electronic medical images (e.g., x-rays, ultrasounds, MRI scans, clinical reports, test results, etc.) to be acquired, stored, or transmitted for viewing and operation.</p>
<p id="p-0028" num="0027">The example workstation(s) <b>108</b><i>a</i>-<i>c </i>of <figref idref="DRAWINGS">FIG. 1</figref> implement one or more user interfaces <b>110</b><i>a</i>-<i>c </i>to enable a healthcare practitioner (or any other type of user) to interact with one or more components of the healthcare information system <b>106</b> and/or, more generally, the example medical data system <b>100</b>. Information (e.g., test results, observations, diagnosis, discharges, admissions, findings, reports, etc.) is entered into and/or retrieved from the components of the example healthcare information system <b>106</b> via the user interfaces <b>110</b><i>a</i>-<i>c </i>by healthcare practitioners (e.g., radiologists, physicians, technicians, administrators, etc.) and/or patients, before, after, and/or during a patient examination and/or any other procedure, such as diagnosing a patient using the information of the healthcare information system <b>106</b>. Additionally or alternatively, one or more of the user interfaces <b>110</b><i>a</i>-<i>c </i>enable a healthcare practitioner to configure and/or use one or more healthcare devices of the example hospital <b>102</b><i>a</i>. For example, one of the user interfaces <b>110</b><i>a </i>of <figref idref="DRAWINGS">FIG. 1</figref> is dedicated to operating a medical imaging device (e.g., a magnetic resonance imaging (MRI) device, an X-ray machine, a scanner, etc.). These examples are described herein for purposes of illustration, as any other suitable type of user interface may be included in the example of <figref idref="DRAWINGS">FIG. 1</figref>.</p>
<p id="p-0029" num="0028">To test the user interface(s) <b>110</b><i>a</i>-<i>c </i>as described herein, the example medical data system <b>100</b> includes a testing module <b>118</b>. The example testing module <b>118</b> of <figref idref="DRAWINGS">FIG. 1</figref> is coupled to the network <b>104</b> and in communication with the example enterprises <b>102</b><i>a</i>-<i>c</i>. The example testing module <b>118</b> can be implemented in additional or alternative elements and/or locations in the example medical data system <b>100</b> of <figref idref="DRAWINGS">FIG. 1</figref> and/or any other type of medical data system. For example, the testing module <b>118</b> may be implemented in one or more of the workstation(s) <b>108</b>, and/or one or more components of the healthcare information system <b>106</b> (e.g., the hospital information system <b>112</b>, the electronic medical record system <b>113</b>, the radiology information system <b>114</b>, the lab information system <b>115</b>, the PACS <b>116</b>, and/or the inpatient/outpatient system <b>117</b>). As described in greater detail below in connection with <figref idref="DRAWINGS">FIG. 2</figref>, the example testing module <b>118</b> of <figref idref="DRAWINGS">FIG. 1</figref> improves the validation of user interface elements and operation. The example testing module <b>118</b> provides additional or alternative features, benefits, and/or improvements as described herein.</p>
<p id="p-0030" num="0029"><figref idref="DRAWINGS">FIG. 2</figref> is a block diagram of an example apparatus that may be used to implement the example testing module <b>118</b> of <figref idref="DRAWINGS">FIG. 1</figref>. In the illustrated example of <figref idref="DRAWINGS">FIG. 2</figref>, the example testing module <b>118</b> includes a file receiver <b>200</b>, an object data extractor <b>202</b>, extraction rules <b>204</b>, an object definition database <b>206</b>, a test script generator <b>208</b>, test automation definitions <b>210</b>, an automation rules engine <b>212</b>, a test script database <b>214</b>, and a script execution module <b>216</b>. While an example manner of implementing the testing module <b>118</b> of <figref idref="DRAWINGS">FIG. 1</figref> has been illustrated in <figref idref="DRAWINGS">FIG. 2</figref>, one or more of the elements, processes and/or devices illustrated in <figref idref="DRAWINGS">FIG. 2</figref> may be combined, divided, re-arranged, omitted, eliminated and/or implemented in any other way. Further, the example file receiver <b>200</b>, the example object data extractor <b>202</b>, the example extraction rules <b>204</b>, the example object definition database <b>206</b>, the example test script generator <b>208</b>, the example test automation definitions <b>210</b>, the example automation rules engine <b>212</b>, the example test script database <b>214</b>, the example script execution module <b>216</b>, and/or, more generally, the testing module <b>118</b> of <figref idref="DRAWINGS">FIG. 2</figref> may be implemented by hardware, software, firmware and/or any combination of hardware, software and/or firmware. Thus, for example, any of the example file receiver <b>200</b>, the example object data extractor <b>202</b>, the example extraction rules <b>204</b>, the example object definition database <b>206</b>, the example test script generator <b>208</b>, the example test automation definitions <b>210</b>, the example automation rules engine <b>212</b>, the example test script database <b>214</b>, the example script execution module <b>216</b>, and/or, more generally, the testing module <b>118</b> of <figref idref="DRAWINGS">FIG. 2</figref> can be implemented by one or more circuit(s), programmable processor(s), application specific integrated circuit(s) (ASIC(s)), programmable logic device(s) (PLD(s)) and/or field programmable logic device(s) (FPLD(s)), etc. When any of the appended claims are read to cover a purely software and/or firmware implementation, at least one of the example file receiver <b>200</b>, the example object data extractor <b>202</b>, the example extraction rules <b>204</b>, the example object definition database <b>206</b>, the example test script generator <b>208</b>, the example test automation definitions <b>210</b>, the example automation rules engine <b>212</b>, the example test script database <b>214</b>, the example script execution module <b>216</b>, and/or, more generally, the testing module <b>118</b> of <figref idref="DRAWINGS">FIG. 2</figref> are hereby expressly defined to include a tangible medium such as a memory, DVD, CD, etc., storing the software and/or firmware. Further still, the example testing module <b>118</b> of <figref idref="DRAWINGS">FIG. 2</figref> may include one or more elements, processes and/or devices in addition to, or instead of, those illustrated in <figref idref="DRAWINGS">FIG. 2</figref>, and/or may include more than one of any or all of the illustrated elements, processes and devices.</p>
<p id="p-0031" num="0030">The example file receiver <b>200</b> of <figref idref="DRAWINGS">FIG. 2</figref> receives files associated with user interfaces to be tested such as, for example, the user interface(s) <b>110</b><i>a </i>of <figref idref="DRAWINGS">FIG. 1</figref>. As described above, designers and/or programmers build user interfaces using one or more applications, software tools, languages, etc. For purposes of illustration, the example of <figref idref="DRAWINGS">FIG. 2</figref> is described in connection with a user interface based on, and generated using, XAML code. XAML is commonly used to generate user interfaces. Briefly, XAML simplifies creating a user interface for the .NET Framework programming model. Because XAML directly represents the instantiation of managed objects, designers and/or testers have simplified access to objects of the user interface. The example testing module <b>118</b> and the example methods, apparatus, systems, and/or articles of manufacture described herein can be used to test user interfaces based on, and/or generated using, any other suitable type of language, software tool, application, or file type such as, for example, Extensible Markup Language (XML), Hyper Text Markup Language (HTML), Visual Basic (VB), C, C#, JAVA, etc.</p>
<p id="p-0032" num="0031">As described above, the user interface may be tested at any stage, including development, debugging, after deployment, etc. In the illustrated example, whenever a tester (e.g., an administrator, developer, and/or any other entity responsible for the proper functionality of the user interface) is to test a user interface, the tester loads the XAML code on which the user interface is based is into the example file receiver <b>200</b>. The example file receiver <b>200</b> determines when the user interface is to be tested based on, for example, instructions received (e.g., from a user interface tester) with the XAML code. While the corresponding user interface is often tested immediately, in some instances, testing of the user interface is delayed. Furthermore, the example file receiver <b>200</b> may schedule periodic testing of any user interface stored therein and/or in another device to which the file receiver <b>200</b> has access. For example, during development of a user interface, the file receiver <b>200</b> may receive (or actively retrieve) a copy of the XAML code at a designated time (e.g., two o'clock in the morning) each day and initiate testing thereof Therefore, the user interface and the functionality of one or more aspects of the user interface in development (e.g., including changes or updates made to the user interface since the previous testing session) are automatically, continuously validated.</p>
<p id="p-0033" num="0032">The file receiver <b>200</b> conveys the XAML code to the example object data extractor <b>202</b>. In the illustrated example, the object data extractor <b>202</b> analyzes content of the XAML code and identifies objects corresponding to user interface elements. For example, the object data extractor <b>202</b> identifies the objects corresponding to buttons, check boxes, combo-boxes, lists, text boxes, etc. To assist in identifying the objects of the XAML code, the example object data extractor <b>202</b> references the example extraction rules <b>204</b>. Generally, the example extraction rules <b>204</b> inform the example object data extractor <b>202</b> of how different objects are represented in the corresponding XAML code. The example extraction rules <b>204</b> in <figref idref="DRAWINGS">FIG. 2</figref> include one or more data sheets that indicate what type of data or code represents different objects. Thus, to identify a first object of the XAML code as a button and a second object of the XAML code as a checkbox, the example object data extractor <b>202</b> references the example extraction rules <b>204</b> and the data sheet(s) thereof.</p>
<p id="p-0034" num="0033">Like similar markup languages, user interface objects in XAML code have attributes or properties associated therewith. Example attributes include size, shape, position, visibility, label, etc. Programmers set the attributes of an object to configure the corresponding elements according to a design preference or requirements for a particular user interface. The example object data extractor <b>202</b> extracts the attributes of identified objects and stores the attributes in association with the corresponding objects as object definitions in the example object definition database <b>206</b>. Thus, for a particular object of a particular user interface, the object definition database <b>206</b> of <figref idref="DRAWINGS">FIG. 2</figref> includes a definition including information regarding the attributes of the particular object and the values of those attributes. For example, an object definition corresponding to a button may indicate that the button is six units wide, three units long, is positioned at a certain screen coordinate, is labeled &#x201c;Click Here&#x201d;, and is visible to the user. As described below, such an object definition is used to test the functionality of the corresponding button and/or any aspects of the user interface tied to or associated with the button.</p>
<p id="p-0035" num="0034">In the illustrated example, the object data extractor <b>202</b> extracts the object data and/or generates the object definitions at runtime. Thus, when the user interface being tested has undergone a change (e.g., during development of the user interface or as a result of a user-customizable feature of an existing user interface) the object definitions generated by the example object data extractor <b>202</b> correspond to updated XAML code. That is, unlike previous testing techniques, the example testing module <b>118</b> of <figref idref="DRAWINGS">FIG. 2</figref> provides automatic updates to a testing session without relying on a visual representation of the user interface.</p>
<p id="p-0036" num="0035">To generate one or more test scripts capable of testing the user interface corresponding to the XAML code being tested, the example test script generator <b>208</b> of <figref idref="DRAWINGS">FIG. 2</figref> receives the object definitions associated with the user interface being tested from the object definition database <b>206</b>. As described above, test scripts can be executed on the user interface code to validate the functionality of one or more aspects of the user interface. In the illustrated example, the test script generator <b>208</b> references the example test automation definitions <b>210</b> and the automation rules engine <b>212</b> to generate test script(s).</p>
<p id="p-0037" num="0036">The example test automation definitions <b>210</b> of <figref idref="DRAWINGS">FIG. 2</figref>, which are configurable by user interface tester(s), define which aspects of different user interface objects are to be tested. In other words, the example test automation definitions <b>210</b> include instructions as to which attribute(s) of a first type of object are to be tested and which attribute(s) of a second type of object are to be tested. Thus, when the example test script generator <b>208</b> receives the first type of object from the object definition database <b>206</b>, the test script generator <b>208</b> generates a script to test the attribute(s) listed in a corresponding entry of the test automation definitions <b>210</b>.</p>
<p id="p-0038" num="0037">For example, the test automation definitions <b>210</b> may include an entry for text boxes. The entry may include one or more attributes of text boxes that are to be tested if a user interface includes a text box. An example attribute of text boxes is a number range as an allowable input. The example entry of the test automation definitions <b>210</b> for text boxes may indicate that the number ranges of text boxes (if any) are to be tested. In such instances, the example test script generator <b>208</b> accesses the number range included in the corresponding object definition generated by the object data extractor <b>202</b> and uses the number range to generate a script to test the limits of the number range. For example, the test script may cause a number within the number range to be input into the text box and numbers outside the number range to be input into the text box. The functionality of the text box can then be verified by the results of the script inputted such numbers into the text box. Of course, the number range of a text box is an example attribute of an example type of object and other examples are possible.</p>
<p id="p-0039" num="0038">The example test script generator <b>208</b> also uses information from the example automation rules engine <b>212</b> in generating the test scripts. The automation rules engine <b>212</b> includes one or more rules, which are configurable by the user interface tester(s), that define how the objects (e.g., as received from the object definition database <b>206</b>) are to be tested by the resulting test scripts. In the illustrated example, the automation rules engine <b>212</b> defines one or more sequences in which the object of the corresponding user interface are to be tested.</p>
<p id="p-0040" num="0039">For example, when the object definitions received from the object definition database <b>206</b> include a first number of buttons, a second number of check boxes, and a third number of text boxes, the automation rules engine <b>212</b> may instruct the test script generator <b>208</b> to test the buttons first, the check boxes second, and the text boxes third. Alternatively, the automation rules engine <b>212</b> may instruct the test script generator <b>208</b> to test a certain number of the buttons first, a certain number of the check boxes second, a certain number of the text boxes third, and the remainder of the objects in some other order. Further, when different types of objects are present in the user interface (e.g., as defined by the object definitions received from the object definition database <b>206</b>), the sequencing of the automation rules may be different. That is, the presence of certain types of objects may influence the sequencing in which the objects are to be tested.</p>
<p id="p-0041" num="0040">The example test script generator <b>208</b> references the automation rules engine <b>212</b> to determine an order in which the test scripts are to test the object(s) of the user interface. As described above, the example test script generator <b>208</b> also references the test automation definitions <b>210</b> to determine which attribute(s) or aspect(s) of different objects of the user interface are to be tested. In the illustrated example, using the information from the test automation definitions <b>210</b> and the automation rules engine <b>212</b>, the test script generator <b>208</b> generates test script(s) to test the objects defined in the object definitions and stores the resulting test script(s) in the test script database <b>214</b>. In some instances, the generated test scripts can be used as proof (e.g., to a regulatory entity) of the aspects of the corresponding user interface that was tested (e.g., during development of the user interface).</p>
<p id="p-0042" num="0041">The example testing module <b>118</b> of <figref idref="DRAWINGS">FIG. 2</figref> also includes the script execution module <b>216</b>. The example script execution module <b>216</b> is capable of running the test scripts of, for example, the test script database <b>214</b> to validate the functionality and accuracy of the corresponding user interface(s). The results of these executions can also be used as proof (e.g., to a regulatory entity) that the user interface and the functionality thereof was tested (e.g., during development of the user interface).</p>
<p id="p-0043" num="0042">Therefore, the example testing module <b>118</b> provides reduced cycle time in the development life cycle of a user interface by, for example, automating a user interface testing session. Further, customizable user interfaces (e.g., by a customer such as the hospital <b>102</b>) can be automatically tested without, for example, having to generate a script based on a visual representation of the customizable user interface.</p>
<p id="p-0044" num="0043">Turning to <figref idref="DRAWINGS">FIG. 3</figref>, the flow diagram depicted in <figref idref="DRAWINGS">FIG. 3</figref> is representative of machine readable instructions that can be executed to implement the example testing module <b>118</b> of <figref idref="DRAWINGS">FIGS. 1</figref> and/or <b>2</b> to test one or more user interfaces (e.g., the user interface(s) <b>110</b><i>a</i>-<i>c </i>of <figref idref="DRAWINGS">FIG. 1</figref> and/or any other type of user interface). The example processes of <figref idref="DRAWINGS">FIG. 3</figref> may be performed using a processor, a controller and/or any other suitable processing device. For example, the example processes of <figref idref="DRAWINGS">FIG. 3</figref> may be implemented in coded instructions stored on a tangible medium such as a flash memory, a read-only memory (ROM) and/or random-access memory (RAM) associated with a processor (e.g., the example processor <b>412</b> discussed below in connection with <figref idref="DRAWINGS">FIG. 4</figref>). Alternatively, some or all of the example processes of <figref idref="DRAWINGS">FIG. 3</figref> may be implemented using any combination(s) of application specific integrated circuit(s) (ASIC(s)), programmable logic device(s) (PLD(s)), field programmable logic device(s) (FPLD(s)), discrete logic, hardware, firmware, etc. Also, some or all of the example processes of <figref idref="DRAWINGS">FIG. 3</figref> may be implemented manually or as any combination(s) of any of the foregoing techniques, for example, any combination of firmware, software, discrete logic and/or hardware. Further, although the example processes of <figref idref="DRAWINGS">FIG. 3</figref> are described with reference to the flow diagram of <figref idref="DRAWINGS">FIG. 3</figref>, other methods of implementing the processes of <figref idref="DRAWINGS">FIG. 3</figref> may be employed. For example, the order of execution of the blocks may be changed, and/or some of the blocks described may be changed, eliminated, sub-divided, or combined. Additionally, any or all of the example processes of <figref idref="DRAWINGS">FIG. 3</figref> may be performed sequentially and/or in parallel by, for example, separate processing threads, processors, devices, discrete logic, circuits, etc.</p>
<p id="p-0045" num="0044">When a user interface tester (e.g., a programmer or developer) is scheduled to and/or desires to test a user interface, the example file receiver <b>200</b> (<figref idref="DRAWINGS">FIG. 2</figref>) receives a file on which the user interface is based (block <b>300</b>). Additionally or alternatively, the file receiver <b>200</b> may receive or actively retrieve one or more user interface files according to a schedule defined in, for example, the file receiver <b>200</b> or a testing application having access to the file receiver <b>200</b>. As described above, the file may be of any type (e.g., XAML, XML, HTML, VB, C, C#, JAVA, etc.). When, for example, the file receiver <b>200</b> determines that the user interface corresponding to the receive code is to be tested, the file receiver <b>200</b> conveys the code to the example object data extractor <b>202</b> (<figref idref="DRAWINGS">FIG. 2</figref>). The object data extractor <b>202</b> analyzes content of the code and identifies objects corresponding to user interface elements (e.g., buttons, check boxes, combo-boxes, lists, text boxes, etc). In particular, the object data extractor <b>202</b> references the extraction rules <b>204</b> (<figref idref="DRAWINGS">FIG. 2</figref>) to determine what type of data or code represents different types of objects.</p>
<p id="p-0046" num="0045">The object data extractor <b>202</b> analyzes the attributes of the identified objects and extracts the same to generate object definitions (block <b>302</b>). The resulting object definitions, which include information regarding the attributes of the identified objects, are stored in the object definition database <b>206</b> (<figref idref="DRAWINGS">FIG. 2</figref>) (block <b>304</b>).</p>
<p id="p-0047" num="0046">The test script generator <b>208</b> (<figref idref="DRAWINGS">FIG. 2</figref>) receives the object definitions associated with the user interface being tested from the object definition database <b>206</b>. To generate test scripts for the user interface, the test script generator <b>208</b> retrieves test automation definitions <b>210</b> (<figref idref="DRAWINGS">FIG. 2</figref>) (block <b>306</b>). As described above in detail, the test automation definitions <b>210</b> define which aspects of different user interface objects (e.g., a number range (if any) of text box) are to be tested in, for example, this particular instance of testing.</p>
<p id="p-0048" num="0047">To generate test scripts for the user interface, the test script generator <b>208</b> also retrieves automation rules from the automation rules engine <b>212</b> (<figref idref="DRAWINGS">FIG. 2</figref>) (block <b>308</b>). As described above in detail, the automation rules of the automation rules engine <b>212</b> define how the objects are to be tested by the test scripts. For example, the automation rules engine <b>212</b> defines one or more sequences in which the object of the corresponding user interface are to be tested in, for example, this particular instance of testing.</p>
<p id="p-0049" num="0048">Using the information from the test automation definitions <b>210</b> and the automation rules engine <b>212</b>, the test script generator <b>208</b> generates test script(s) to test the objects defined in the object definitions received from the object definition database <b>206</b> (block <b>310</b>). In the illustrated example, the test script generator conveys the test scripts to the test script database <b>214</b> (<figref idref="DRAWINGS">FIG. 2</figref>) (block <b>312</b>).</p>
<p id="p-0050" num="0049">As described above, the test scripts of the test script database <b>214</b> can be executed by the script execution module <b>216</b> (<figref idref="DRAWINGS">FIG. 2</figref>). The example script execution module <b>216</b> is capable of running the test scripts to validate the functionality and accuracy of the corresponding user interface(s). In the illustrated example, the script execution module <b>216</b> runs according to a schedule and/or in response to commands from a user (e.g., a user interface tester or designer). When one or more of the test scripts of the test script database <b>214</b> are to be tested (block <b>314</b>), the script execution module <b>216</b> retrieves one or more corresponding test scripts and executes the same on the user interface to be tested (block <b>316</b>). Further, upon receiving test scripts from the test script generator <b>208</b>, the test script database <b>214</b>, the test script generator <b>208</b>, and/or any other suitable component or device marks the generated test script(s) as the updated version(s) for the corresponding user interface (block <b>318</b>). That is, the test script database <b>214</b> includes an indication (e.g., a marker and/or a timestamp) of the most recent version of the test script(s) for a user interface and/or a component thereof. The example of <figref idref="DRAWINGS">FIG. 3</figref> then ends (block <b>320</b>).</p>
<p id="p-0051" num="0050"><figref idref="DRAWINGS">FIG. 4</figref> is a block diagram of an example processor system <b>410</b> that may be used to implement the apparatus and methods described herein. As shown in <figref idref="DRAWINGS">FIG. 4</figref>, the processor system <b>410</b> includes a processor <b>412</b> that is coupled to an interconnection bus <b>414</b>. The processor <b>412</b> may be any suitable processor, processing unit or microprocessor. Although not shown in <figref idref="DRAWINGS">FIG. 4</figref>, the system <b>410</b> may be a multi-processor system and, thus, may include one or more additional processors that are identical or similar to the processor <b>412</b> and that are communicatively coupled to the interconnection bus <b>414</b>.</p>
<p id="p-0052" num="0051">The processor <b>412</b> of <figref idref="DRAWINGS">FIG. 4</figref> is coupled to a chipset <b>418</b>, which includes a memory controller <b>420</b> and an input/output (I/O) controller <b>422</b>. As is well known, a chipset typically provides I/O and memory management functions as well as a plurality of general purpose and/or special purpose registers, timers, etc. that are accessible or used by one or more processors coupled to the chipset <b>418</b>. The memory controller <b>420</b> performs functions that enable the processor <b>412</b> (or processors if there are multiple processors) to access a system memory <b>424</b> and a mass storage memory <b>425</b>.</p>
<p id="p-0053" num="0052">The system memory <b>424</b> may include any desired type of volatile and/or non-volatile memory such as, for example, static random access memory (SRAM), dynamic random access memory (DRAM), flash memory, read-only memory (ROM), etc. The mass storage memory <b>425</b> may include any desired type of mass storage device including hard disk drives, optical drives, tape storage devices, etc.</p>
<p id="p-0054" num="0053">The I/O controller <b>422</b> performs functions that enable the processor <b>412</b> to communicate with peripheral input/output (I/O) devices <b>426</b> and <b>428</b> and a network interface <b>430</b> via an I/O bus <b>432</b>. The I/O devices <b>426</b> and <b>428</b> may be any desired type of I/O device such as, for example, a keyboard, a video display or monitor, a mouse, etc. The network interface <b>430</b> may be, for example, an Ethernet device, an asynchronous transfer mode (ATM) device, an 802.11 device, a DSL modem, a cable modem, a cellular modem, etc. that enables the processor system <b>410</b> to communicate with another processor system.</p>
<p id="p-0055" num="0054">While the memory controller <b>420</b> and the I/O controller <b>422</b> are depicted in <figref idref="DRAWINGS">FIG. 4</figref> as separate blocks within the chipset <b>418</b>, the functions performed by these blocks may be integrated within a single semiconductor circuit or may be implemented using two or more separate integrated circuits.</p>
<p id="p-0056" num="0055">Certain embodiments contemplate methods, systems and computer program products on any machine-readable media to implement functionality described above. Certain embodiments may be implemented using an existing computer processor, or by a special purpose computer processor incorporated for this or another purpose or by a hardwired and/or firmware system, for example.</p>
<p id="p-0057" num="0056">Certain embodiments include computer-readable media for carrying or having computer-executable instructions or data structures stored thereon. Such computer-readable media may be any available media that may be accessed by a general purpose or special purpose computer or other machine with a processor. By way of example, such computer-readable media may comprise RAM, ROM, PROM, EPROM, EEPROM, Flash, CD-ROM or other optical disk storage, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to carry or store desired program code in the form of computer-executable instructions or data structures and which can be accessed by a general purpose or special purpose computer or other machine with a processor. Combinations of the above are also included within the scope of computer-readable media. Computer-executable instructions comprise, for example, instructions and data which cause a general purpose computer, special purpose computer, or special purpose processing machines to perform a certain function or group of functions.</p>
<p id="p-0058" num="0057">Generally, computer-executable instructions include routines, programs, objects, components, data structures, etc., that perform particular tasks or implement particular abstract data types. Computer-executable instructions, associated data structures, and program modules represent examples of program code for executing steps of certain methods and systems disclosed herein. The particular sequence of such executable instructions or associated data structures represent examples of corresponding acts for implementing the functions described in such steps.</p>
<p id="p-0059" num="0058">Embodiments of the present invention may be practiced in a networked environment using logical connections to one or more remote computers having processors. Logical connections may include a local area network (LAN) and a wide area network (WAN) that are presented here by way of example and not limitation. Such networking environments are commonplace in office-wide or enterprise-wide computer networks, intranets and the Internet and may use a wide variety of different communication protocols. Those skilled in the art will appreciate that such network computing environments will typically encompass many types of computer system configurations, including personal computers, hand-held devices, multi-processor systems, microprocessor-based or programmable consumer electronics, network PCs, minicomputers, mainframe computers, and the like. Embodiments of the invention may also be practiced in distributed computing environments where tasks are performed by local and remote processing devices that are linked (either by hardwired links, wireless links, or by a combination of hardwired or wireless links) through a communications network. In a distributed computing environment, program modules may be located in both local and remote memory storage devices.</p>
<p id="p-0060" num="0059">Although certain methods, apparatus, and articles of manufacture have been described herein, the scope of coverage of this patent is not limited thereto. To the contrary, this patent covers all methods, apparatus, and articles of manufacture fairly falling within the scope of the appended claims either literally or under the doctrine of equivalents.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A computer implemented method for testing a user interface, comprising:
<claim-text>extracting object data associated with user interface elements from a file associated with the user interface;</claim-text>
<claim-text>storing an object definition for respective ones of the user interface elements in memory;</claim-text>
<claim-text>referencing an automation rule with the object definition to obtain a testing sequence for the user interface elements, wherein the testing sequence obtained from the automation rule is based on a type of respective ones of the user interface elements, wherein extracting the object data from the file associated with the user interface comprises referencing a set of extraction rules configured to identify the types of the user interface elements;</claim-text>
<claim-text>referencing a test definition with the object definition to obtain one or more attributes of the user interface elements to be tested, wherein the object data associated with the user interface elements includes the attributes of the corresponding user interface elements; and</claim-text>
<claim-text>generating, via a processor, a test script for the user interface using the one or more attributes of the user interface elements and the testing sequence.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The computer implemented method as defined in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein at least one of the test definition or the automation rule is configurable by a user.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The computer implemented method as defined in <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising executing the test script to test the user interface.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The computer implemented method as defined in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein extracting object data from the file associated with the user interface is to be performed at runtime of a testing session.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The computer implemented method as defined in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the testing sequence defined by the automation rule includes the user interface elements of a first type being tested before the user interface elements of a second type when the user interface includes a third type of user interface element, and wherein the testing sequence defined by the automation rule includes the user interface elements of the first type being tested after the user interface elements of the second type when the user interface does not include the third type of user interface element.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. A tangible machine readable memory having instructions stored thereon that, when executed, cause a machine to at least:
<claim-text>extract object data associated with user interface elements from a file associated with a user interface;</claim-text>
<claim-text>store an object definition for respective ones of the user interface elements in the machine readable memory;</claim-text>
<claim-text>reference an automation rule with the object definition to obtain a testing sequence for the user interface elements, wherein the testing sequence obtained from the automation rule depends on which types of user interface elements are present in the user interface, wherein extracting the object data from the file associated with the user interface comprises referencing a set of extraction rules configured to identify the types of the user interface elements;</claim-text>
<claim-text>reference a test definition with the object definition to obtain one or more attributes of the user interface elements to be tested, wherein the object data associated with the user interface elements includes the attributes of the corresponding user interface elements; and</claim-text>
<claim-text>generate a test script for the user interface using the one or more attributes of the user interface elements and the testing sequence.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The memory as defined in <claim-ref idref="CLM-00006">claim 6</claim-ref>, wherein at least one of the test definition or the automation rule is configurable by a user.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The memory as defined in <claim-ref idref="CLM-00006">claim 6</claim-ref> having instructions stored thereon that, when executed, cause a machine to execute the test script to test the user interface.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The memory as defined in <claim-ref idref="CLM-00006">claim 6</claim-ref> having instructions stored thereon that, when executed, cause a machine to extract the object data at runtime of a testing session.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The memory as defined in <claim-ref idref="CLM-00006">claim 6</claim-ref>, wherein the testing sequence defined by the automation rule includes the user interface elements of a first type being tested before the user interface elements of a second type when the user interface includes a third type of user interface element, and wherein the testing sequence defined by the automation rule includes the user interface elements of the first type being tested after the user interface elements of the second type when the user interface does not include the third type of user interface element.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. An apparatus for testing a user interface, comprising:
<claim-text>an object data extractor to extract object data associated with user interface elements from a file associated with the user interface and to generate a plurality of object definitions for the user interface elements from the extracted object data;</claim-text>
<claim-text>memory to store the plurality of object definitions; and</claim-text>
<claim-text>a test script generator to generate a test script for the user interface using the object definitions, wherein the test script is to be generated based on one or more test definitions defining one or more attributes of the user interface elements to be tested via the test script, wherein the test script is to be generated based on one or more automation rules that define a testing sequence in which the user interface elements of the user interface are to be tested, wherein the one or more automation rules indicate that a first type of user interface element is to be tested before a second type of user interface element, wherein the object data extractor is to extract the object data from the file associated with the user interface by referencing a set of extraction rules configured to identify the types of the user interface elements, and wherein the object data associated with the user interface elements includes the attributes of the corresponding user interface elements.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The apparatus as defined in <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein at least one of the one or more test definitions or the one or more automation rules are configurable by a user.</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The apparatus as defined in <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the object data extractor is to extract the object data at runtime of a testing session.</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. A computer implemented method for testing a user interface, comprising:
<claim-text>extracting object data associated with user interface elements from a file associated with the user interface;</claim-text>
<claim-text>storing an object definition for respective ones of the user interface elements in memory;</claim-text>
<claim-text>referencing an automation rule with the object definition to obtain a testing sequence for the user interface elements, wherein the testing sequence obtained from the automation rule is based on a type of respective ones of the user interface elements, wherein the testing sequence defined by the automation rule includes the user interface elements of a first type being tested before the user interface elements of a second type when the user interface includes a third type of user interface element, and wherein the testing sequence defined by the automation rule includes the user interface elements of the first type being tested after the user interface elements of the second type when the user interface does not include the third type of user interface element;</claim-text>
<claim-text>referencing a test definition with the object definition to obtain one or more attributes of the user interface elements to be tested; and</claim-text>
<claim-text>generating, via a processor, a test script for the user interface using the one or more attributes of the user interface elements and the testing sequence.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. A tangible machine readable memory having instructions stored thereon that, when executed, cause a machine to at least:
<claim-text>extract object data associated with user interface elements from a file associated with a user interface;</claim-text>
<claim-text>store an object definition for respective ones of the user interface elements in the machine readable memory;</claim-text>
<claim-text>reference an automation rule with the object definition to obtain a testing sequence for the user interface elements, wherein the testing sequence obtained from the automation rule depends on which types of user interface elements are present in the user interface, wherein the testing sequence defined by the automation rule includes the user interface elements of a first type being tested before the user interface elements of a second type when the user interface includes a third type of user interface element, and wherein the testing sequence defined by the automation rule includes the user interface elements of the first type being tested after the user interface elements of the second type when the user interface does not include the third type of user interface element;</claim-text>
<claim-text>reference a test definition with the object definition to obtain one or more attributes of the user interface elements to be tested; and</claim-text>
<claim-text>generate a test script for the user interface using the one or more attributes of the user interface elements and the testing sequence.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. An apparatus for testing a user interface, comprising:
<claim-text>an object data extractor to extract object data associated with user interface elements from a file associated with the user interface and to generate a plurality of object definitions for the user interface elements from the extracted object data;</claim-text>
<claim-text>memory to store the plurality of object definitions; and</claim-text>
<claim-text>a test script generator to generate a test script for the user interface using the object definitions, wherein the test script is to be generated based on one or more test definitions defining one or more attributes of the user interface elements to be tested via the test script, wherein the test script is to be generated based on one or more automation rules that define a testing sequence in which the user interface elements of the user interface are to be tested, wherein the one or more automation rules indicate that a first type of user interface element is to be tested before a second type of user interface element when the user interface includes a third type of user interface element, and wherein the one or more automation rules indicate that the first type of user interface element is to tested after the second type of user interface element when the user interface does not include the third type of user interface element.</claim-text>
</claim-text>
</claim>
</claims>
</us-patent-grant>

<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08626783-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08626783</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>13554997</doc-number>
<date>20120720</date>
</document-id>
</application-reference>
<us-application-series-code>13</us-application-series-code>
<us-term-of-grant>
<disclaimer>
<text>This patent is subject to a terminal disclaimer.</text>
</disclaimer>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>17</main-group>
<subgroup>30</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>707758</main-classification>
<further-classification>707769</further-classification>
</classification-national>
<invention-title id="d2e51">Method for monitoring and controlling the processing of database searches</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>7308446</doc-number>
<kind>B1</kind>
<name>Panigrahy et al.</name>
<date>20071200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707999006</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>7487150</doc-number>
<kind>B2</kind>
<name>Brown et al.</name>
<date>20090200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707999005</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>7644080</doc-number>
<kind>B2</kind>
<name>Mammen et al.</name>
<date>20100100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707713</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>8234290</doc-number>
<kind>B2</kind>
<name>Hofhansi et al.</name>
<date>20120700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707758</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>2004/0088403</doc-number>
<kind>A1</kind>
<name>Aggarwal</name>
<date>20040500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709224</main-classification></classification-national>
</us-citation>
<us-citation>
<nplcit num="00006">
<othercit>Lee et al. &#x201c;Learning Fingerprings for a database Intrusion Detection system&#x201d;, ESORICS 2002, p. 264-279.</othercit>
</nplcit>
<category>cited by examiner</category>
</us-citation>
</us-references-cited>
<number-of-claims>22</number-of-claims>
<us-exemplary-claim>12</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>None</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>7</number-of-drawing-sheets>
<number-of-figures>13</number-of-figures>
</figures>
<us-related-documents>
<continuation>
<relation>
<parent-doc>
<document-id>
<country>US</country>
<doc-number>12262744</doc-number>
<date>20081031</date>
</document-id>
<parent-grant-document>
<document-id>
<country>US</country>
<doc-number>8234290</doc-number>
<date>20120731</date>
</document-id>
</parent-grant-document>
</parent-doc>
<child-doc>
<document-id>
<country>US</country>
<doc-number>13554997</doc-number>
</document-id>
</child-doc>
</relation>
</continuation>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20130159279</doc-number>
<kind>A1</kind>
<date>20130620</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Hofhansl</last-name>
<first-name>Lars</first-name>
<address>
<city>San Francisco</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Tamm</last-name>
<first-name>Steven</first-name>
<address>
<city>San Francisco</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Hofhansl</last-name>
<first-name>Lars</first-name>
<address>
<city>San Francisco</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Tamm</last-name>
<first-name>Steven</first-name>
<address>
<city>San Francisco</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Haynes Beffel &#x26; Wolfeld LLP</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
<agent sequence="02" rep-type="attorney">
<addressbook>
<last-name>Beffel, Jr.</last-name>
<first-name>Ernest J.</first-name>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>salesforce.com, inc.</orgname>
<role>02</role>
<address>
<city>San Francisco</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Choi</last-name>
<first-name>Yuk Ting</first-name>
<department>2164</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">Systems, methods, and apparatus for preventing misuse of searches of a database system are provided. This prevention of misuse of database searches can enable reliable operation of the database system, as an improper query using a regular expression will not shut down or severely affect an application process that provides access to the database system. A thread of the application process determines whether an input character characters string matches the regular expression. To prevent misuse, a computational effort of the search is tracked, and compared to a threshold value. When the threshold is exceeded, an operation of the thread is exited or stopped.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="207.94mm" wi="117.18mm" file="US08626783-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="215.82mm" wi="150.28mm" file="US08626783-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="215.90mm" wi="154.77mm" file="US08626783-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="211.84mm" wi="128.52mm" file="US08626783-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="158.75mm" wi="116.42mm" orientation="landscape" file="US08626783-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="200.07mm" wi="136.48mm" orientation="landscape" file="US08626783-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="158.75mm" wi="125.48mm" file="US08626783-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="215.90mm" wi="141.73mm" file="US08626783-20140107-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?RELAPP description="Other Patent Relations" end="lead"?>
<heading id="h-0001" level="1">RELATED APPLICATIONS</heading>
<p id="p-0002" num="0001">This application is a continuation of U.S. application Ser. No. 12/262,744, titled &#x201c;METHOD FOR MONITORING AND CONTROLLING THE PROCESSING OF DATABASE SEARCHES&#x201d;, filed 31 Oct. 2008, which issued as U.S. Pat. No. 8,234,290 on 31 Jul. 2012.</p>
<?RELAPP description="Other Patent Relations" end="tail"?>
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0002" level="1">COPYRIGHT NOTICE</heading>
<p id="p-0003" num="0002">A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure, as it appears in the Patent and Trademark Office patent file or records, but otherwise reserves all copyright rights whatsoever.</p>
<heading id="h-0003" level="1">FIELD OF THE INVENTION</heading>
<p id="p-0004" num="0003">The current invention relates generally to searching a database, and more particularly to preventing the misuse of searches in a database network system.</p>
<heading id="h-0004" level="1">BACKGROUND</heading>
<p id="p-0005" num="0004">The subject matter discussed in the background section should not be assumed to be prior art merely as a result of its mention in the background section. Similarly, a problem mentioned in the background section or associated with the subject matter of the background section should not be assumed to have been previously recognized in the prior art. The subject matter in the background section merely represents different approaches, which in and of themselves may also be inventions.</p>
<p id="p-0006" num="0005">In conventional database systems, users access their data resources in one logical database. A user of such a conventional system typically retrieves data from and stores data on the system using the user's own systems. A user system might remotely access one of a plurality of server systems that might in turn access the database system. Data retrieval from the system might include the issuance of a query (i.e. a search request) from the user system to the database system. The database system might process the request for information received in the query and send to the user system information relevant to the request. The reliable and efficient retrieval of accurate information and subsequent delivery of this information to the user system has been and continues to be a goal of administrators of database systems.</p>
<p id="p-0007" num="0006">Unfortunately, conventional database approaches are at the mercy of a user's query. For example, conventional databases might process a query relatively slowly or become inefficient, if, for example, a user has entered an inappropriate or malicious query.</p>
<p id="p-0008" num="0007">Accordingly, it is desirable to provide systems and methods that prevent misuse of database searches, particularly without adding unwanted complexity and cost of operation to a database system.</p>
<heading id="h-0005" level="1">BRIEF SUMMARY</heading>
<p id="p-0009" num="0008">In accordance with embodiments, there are provided systems, methods, and apparatus for preventing misuse of searches of a database system. This prevention of misuse of database searches can enable reliable operation of the database system, as an improper query using a regular expression will not shut down or severely affect an application process that provides access to the database system. A thread of the application process determines whether an input character characters string matches the regular expression. To prevent misuse, a computational effort of the search is tracked, and compared to a threshold value. When the threshold is exceeded, an operation of the thread is exited or stopped.</p>
<p id="p-0010" num="0009">In an embodiment and by way of example, a method for preventing misuse of database searches is provided. A regular expression is received in a first thread of an application process. A database is searched to find an input character string that matches the regular expression. A duration of the searching scales greater than linearly with a size of an input character string. This scaling can occur in order to guarantee a determination of whether an input character string matches the regular expression. The first thread tracks a computational effort performed during the search, and compares the computational effort to a threshold value. An internal exit is performed in the first thread when the computational effort exceeds the threshold value. As used herein, a thread is contained inside a process. Different threads in the same process may share some resources.</p>
<p id="p-0011" num="0010">Other embodiments are directed to a computer program product having a computer readable media with instructions that perform methods described herein.</p>
<p id="p-0012" num="0011">In an embodiment and by way of example, a database system is provided. An input interface receives a regular expression from a user. Logic (e.g. a processor) runs a first thread of an application process. The first thread receives the regular expression, and searches a database of the database system to find an input character string that matches the regular expression. A duration of the searching scales greater than linearly with a size of an input character string. This scaling can occur in order to guarantee a determination of whether an input character string matches the regular expression. A computational effort performed during the search is tracked, and then compared to a threshold value. The determination of whether an input character string matches the regular expression is stopped when the computational effort exceeds the threshold value.</p>
<p id="p-0013" num="0012">While embodiments may be described with reference to an embodiment in which techniques for preventing misuse of database searches are implemented in a system having an application server providing a front end for an on-demand database service capable of supporting multiple tenants, the present invention is not limited to multi-tenant databases nor deployment on application servers. Embodiments may be practiced using other database architectures, i.e., ORACLE&#xae;, DB2&#xae; by IBM and the like without departing from the scope of the embodiments claimed.</p>
<p id="p-0014" num="0013">Any of the embodiments described herein may be used alone or together with one another in any combination. Inventions encompassed within this specification may also include embodiments that are only partially mentioned or alluded to or are not mentioned or alluded to at all in this brief summary or in the abstract. Although various embodiments of the invention may have been motivated by various deficiencies with the prior art, which may be discussed or alluded to in one or more places in the specification, the embodiments of the invention do not necessarily address any of these deficiencies. In other words, different embodiments of the invention may address different deficiencies that may be discussed in the specification. Some embodiments may only partially address some deficiencies or just one deficiency that may be discussed in the specification, and some embodiments may not address any of these deficiencies.</p>
<p id="p-0015" num="0014">Reference to the remaining portions of the specification, including the drawings and claims, will realize other features and advantages of the present invention. Further features and advantages of the present invention, as well as the structure and operation of various embodiments of the present invention, are described in detail below with respect to the accompanying drawings.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0006" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. 1</figref> illustrates a block diagram of an environment wherein an on-demand database service might be used.</p>
<p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. 2</figref> illustrates a block diagram of an embodiment of elements of <figref idref="DRAWINGS">FIG. 1</figref> and various possible interconnections between these elements.</p>
<p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. 3</figref> is a flowchart illustrating a method for performing a database search according to an embodiment of the present invention.</p>
<p id="p-0019" num="0018"><figref idref="DRAWINGS">FIGS. 4A-4F</figref> illustrates a backtracking algorithm according to an embodiment of the present invention.</p>
<p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. 5</figref> is an exemplary plot showing exponential scaling of computational cost vs. the size of a character string according to an embodiment of the present invention.</p>
<p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. 6A</figref> shows a process <b>600</b> that is running a thread <b>610</b> to perform a regular expression search.</p>
<p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. 6B</figref> shows a thread that performs an internal exit according to an embodiment of the present invention.</p>
<p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. 7</figref> is a flowchart illustrating a method for preventing misuse of database searches according to an embodiment of the present invention.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0007" level="1">DETAILED DESCRIPTION</heading>
<heading id="h-0008" level="1">General Overview</heading>
<p id="p-0024" num="0023">Systems and methods are provided for preventing misuse of database searches. These techniques for preventing misuse of database searches can enable embodiments to provide more reliable operation, as an improper query will not shut down or severely affect the operation of the database.</p>
<p id="p-0025" num="0024">As used herein, the term multi-tenant database system refers to those systems in which various elements of hardware and software of the database system may be shared by one or more customers. For example, a given application server (e.g. running an application process) may simultaneously process requests for a great number of customers, and a given database table may store rows for a potentially much greater number of customers. As used herein, the term query plan refers to a set of steps used to access information in a database system.</p>
<p id="p-0026" num="0025">Next, mechanisms and methods for providing controlling access to custom objects in a database system will be described with reference to example embodiments.</p>
<heading id="h-0009" level="1">System Overview</heading>
<p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. 1</figref> illustrates a block diagram of an environment <b>10</b> wherein an on-demand database service might be used. Environment <b>10</b> may include user systems <b>12</b>, network <b>14</b>, system <b>16</b>, processor system <b>17</b>, application platform <b>18</b>, network interface <b>20</b>, tenant data storage <b>22</b>, system data storage <b>24</b>, program code <b>26</b>, and process space <b>28</b>. In other embodiments, environment <b>10</b> may not have all of the components listed and/or may have other elements instead of, or in addition to, those listed above.</p>
<p id="p-0028" num="0027">Environment <b>10</b> is an environment in which an on-demand database service exists. User system <b>12</b> may be any machine or system that is used by a user to access a database user system. For example, any of user systems <b>12</b> can be a handheld computing device, a mobile phone, a laptop computer, a work station, and/or a network of computing devices. As illustrated in <figref idref="DRAWINGS">FIG. 1</figref> (and in more detail in <figref idref="DRAWINGS">FIG. 2</figref>) user systems <b>12</b> might interact via a network <b>14</b> with an on-demand database service, which is system <b>16</b>.</p>
<p id="p-0029" num="0028">An on-demand database service, such as system <b>16</b>, is a database system that is made available to outside users that do not need to necessarily be concerned with building and/or maintaining the database system, but instead may be available for their use when the users need the database system (e.g., on the demand of the users). Some on-demand database services may store information from one or more tenants stored into tables of a common database image to form a multi-tenant database system (MTS). Accordingly, &#x201c;on-demand database service <b>16</b>&#x201d; and &#x201c;system <b>16</b>&#x201d; will be used interchangeably herein. A database image may include one or more database objects. A relational database management system (RDMS) or the equivalent may execute storage and retrieval of information against the database object(s). Application platform <b>18</b> may be a framework that allows the applications of system <b>16</b> to run, such as the hardware and/or software, e.g., the operating system. In an embodiment, on-demand database service <b>16</b> may include an application platform <b>18</b> that enables creation, managing and executing one or more applications developed by the provider of the on-demand database service, users accessing the on-demand database service via user systems <b>12</b>, or third party application developers accessing the on-demand database service via user systems <b>12</b>.</p>
<p id="p-0030" num="0029">The users of user systems <b>12</b> may differ in their respective capacities, and the capacity of a particular user system <b>12</b> might be entirely determined by permissions (permission levels) for the current user. For example, where a salesperson is using a particular user system <b>12</b> to interact with system <b>16</b>, that user system has the capacities allotted to that salesperson. However, while an administrator is using that user system to interact with system <b>16</b>, that user system has the capacities allotted to that administrator. In systems with a hierarchical role model, users at one permission level may have access to applications, data, and database information accessible by a lower permission level user, but may not have access to certain applications, database information, and data accessible by a user at a higher permission level. Thus, different users will have different capabilities with regard to accessing and modifying application and database information, depending on a user's security or permission level.</p>
<p id="p-0031" num="0030">Network <b>14</b> is any network or combination of networks of devices that communicate with one another. For example, network <b>14</b> can be anyone or any combination of a LAN (local area network), WAN (wide area network), telephone network, wireless network, point-to-point network, star network, token ring network, hub network, or other appropriate configuration. As the most common type of computer network in current use is a TCP/IP (Transfer Control Protocol and Internet Protocol) network, such as the global internetwork of networks often referred to as the &#x201c;Internet&#x201d; with a capital &#x201c;I,&#x201d; that network will be used in many of the examples herein. However, it should be understood that the networks that the present invention might use are not so limited, although TCP/IP is a frequently implemented protocol.</p>
<p id="p-0032" num="0031">User systems <b>12</b> might communicate with system <b>16</b> using TCP/IP and, at a higher network level, use other common Internet protocols to communicate, such as HTTP, FTP, AFS, WAP, etc. In an example where HTTP is used, user system <b>12</b> might include an HTTP client commonly referred to as a &#x201c;browser&#x201d; for sending and receiving HTTP messages to and from an HTTP server at system <b>16</b>. Such an HTTP server might be implemented as the sole network interface between system <b>16</b> and network <b>14</b>, but other techniques might be used as well or instead. In some implementations, the interface between system <b>16</b> and network <b>14</b> includes load sharing functionality, such as round-robin HTTP request distributors to balance loads and distribute incoming HTTP requests evenly over a plurality of servers. At least as for the users that are accessing that server, each of the plurality of servers has access to the MTS' data; however, other alternative configurations may be used instead.</p>
<p id="p-0033" num="0032">In one embodiment, system <b>16</b>, shown in <figref idref="DRAWINGS">FIG. 1</figref>, implements a web-based customer relationship management (CRM) system. For example, in one embodiment, system <b>16</b> includes application servers configured to implement and execute CRM software applications (application processes) as well as provide related data, code, forms, web pages and other information to and from user systems <b>12</b> and to store to, and retrieve from, a database system related data, objects, and Webpage content. With a multi-tenant system, data for multiple tenants may be stored in the same physical database object, however, tenant data typically is arranged so that data of one tenant is kept logically separate from that of other tenants so that one tenant does not have access to another tenant's data, unless such data is expressly shared. In certain embodiments, system <b>16</b> implements applications other than, or in addition to, a CRM application. For example, system <b>16</b> may provide tenant access to multiple hosted (standard and custom) applications, including a CRM application. User (or third party developer) applications, which may or may not include CRM, may be supported by the application platform <b>18</b>, which manages creation, storage of the applications into one or more database objects and executing of the applications in a virtual machine in the process space of the system <b>16</b>.</p>
<p id="p-0034" num="0033">One arrangement for elements of system <b>16</b> is shown in <figref idref="DRAWINGS">FIG. 1</figref>, including a network interface <b>20</b>, application platform <b>18</b>, tenant data storage <b>22</b> for tenant data <b>23</b>, system data storage <b>24</b> for system data <b>25</b> accessible to system <b>16</b> and possibly multiple tenants, program code <b>26</b> for implementing various functions of system <b>16</b>, and a process space <b>28</b> for executing MTS system processes and tenant-specific processes, such as running applications as part of an application hosting service. Additional processes that may execute on system <b>16</b> include database indexing processes.</p>
<p id="p-0035" num="0034">Several elements in the system shown in <figref idref="DRAWINGS">FIG. 1</figref> include conventional, well-known elements that are explained only briefly here. For example, each user system <b>12</b> could include a desktop personal computer, workstation, laptop, PDA, cell phone, or any wireless access protocol (W AP) enabled device or any other computing device capable of interfacing directly or indirectly to the Internet or other network connection. User system <b>12</b> typically runs an HTTP client, e.g., a browsing program, such as Microsoft's Internet Explorer browser, Netscape's Navigator browser, Opera's browser, or a WAP-enabled browser in the case of a cell phone, PDA or other wireless device, or the like, allowing a user (e.g., subscriber of the multi-tenant database system) of user system <b>12</b> to access, process and view information, pages and applications available to it from system <b>16</b> over network <b>14</b>. Each user system <b>12</b> also typically includes one or more user interface devices, such as a keyboard, a mouse, trackball, touch pad, touch screen, pen or the like, for interacting with a graphical user interface (OUI) provided by the browser on a display (e.g., a monitor screen, LCD display, etc.) in conjunction with pages, forms, applications and other information provided by system <b>16</b> or other systems or servers. For example, the user interface device can be used to access data and applications hosted by system <b>16</b>, and to perform searches on stored data, and otherwise allow a user to interact with various OUI pages that may be presented to a user. As discussed above, embodiments are suitable for use with the Internet, which refers to a specific global internetwork of networks. However, it should be understood that other networks can be used instead of the Internet, such as an intranet, an extranet, a virtual private network (VPN), a non-TCPIIP based network, any LAN or WAN or the like.</p>
<p id="p-0036" num="0035">According to one embodiment, each user system <b>12</b> and all of its components are operator configurable using applications, such as a browser, including computer code run using a central processing unit such as an Intel Pentium&#xae; processor or the like. Similarly, system <b>16</b> (and additional instances of an MTS, where more than one is present) and all of their components might be operator configurable using application(s) including computer code to run using a central processing unit such as processor system <b>17</b>, which may include an Intel Pentium&#xae; processor or the like, and/or multiple processor units. A computer program product embodiment includes a machine-readable storage medium (media) having instructions stored thereon/in which can be used to program a computer to perform any of the processes of the embodiments described herein. Computer code for operating and configuring system <b>16</b> to intercommunicate and to process web pages, applications and other data and media content as described herein are preferably downloaded and stored on a hard disk, but the entire program code, or portions thereof, may also be stored in any other volatile or non-volatile memory medium or device as is well known, such as a ROM or RAM, or provided on any media capable of storing program code, such as any type of rotating media including floppy disks, optical discs, digital versatile disk (DVD), compact disk (CD), micro drive, and magneto-optical disks, and magnetic or optical cards, nanosystems (including molecular memory ICs), or any type of media or device suitable for storing instructions and/or data. Additionally, the entire program code, or portions thereof, may be transmitted and downloaded from a software source over a transmission medium, e.g., over the Internet, or from another server, as is well known, or transmitted over any other conventional network connection as is well known (e.g., extranet, VPN, LAN, etc.) using any communication medium and protocols (e.g., TCP/IP, HTTP, HTTPS, Ethernet, etc.) as are well known. It will also be appreciated that computer code for implementing embodiments of the present invention can be implemented in any programming language that can be executed on a client system and/or server or server system such as, for example, C, C++, HTML, any other markup language, Java&#x2122;, JavaScript, ActiveX, any other scripting language, such as VB Script, and many other programming languages as are well known may be used. (Java&#x2122; is a trademark of Sun Microsystems, Inc.).</p>
<p id="p-0037" num="0036">According to one embodiment, each system <b>16</b> is configured to provide web pages, forms, applications, data and media content to user (client) systems <b>12</b> to support the access by user systems <b>12</b> as tenants of system <b>16</b>. As such, system <b>16</b> provides security mechanisms to keep each tenant's data separate unless the data is shared. If more than one MTS is used, they may be located in close proximity to one another (e.g., in a server farm located in a single building or campus), or they may be distributed at locations remote from one another (e.g., one or more servers located in city A and one or more servers located in city B). As used herein, each MTS could include one or more logically and/or physically connected servers distributed locally or across one or more geographic locations. Additionally, the term &#x201c;server&#x201d; is meant to include a computer system, including processing hardware and process space(s), and an associated storage system and database application (e.g., OODBMS or RDBMS) as is well known in the art. It should also be understood that &#x201c;server system&#x201d; and &#x201c;server&#x201d; are often used interchangeably herein. Similarly, the database object described herein can be implemented as single databases, a distributed database, a collection of distributed databases, a database with redundant online or offline backups or other redundancies, etc., and might include a distributed database or storage network and associated processing intelligence.</p>
<p id="p-0038" num="0037"><figref idref="DRAWINGS">FIG. 2</figref> also illustrates environment <b>10</b>. However, in <figref idref="DRAWINGS">FIG. 2</figref> elements of system <b>16</b> and various interconnections in an embodiment are further illustrated. <figref idref="DRAWINGS">FIG. 2</figref> shows that user system <b>12</b> may include processor system <b>12</b>A, memory system <b>12</b>B, input system <b>12</b>C, and output system <b>12</b>D. <figref idref="DRAWINGS">FIG. 2</figref> shows network <b>14</b> and system <b>16</b>. <figref idref="DRAWINGS">FIG. 2</figref> also shows that system <b>16</b> may include tenant data storage <b>22</b>, tenant data <b>23</b>, system data storage <b>24</b>, system data <b>25</b>, User Interface (UI) <b>30</b>, Application Program Interface (API) <b>32</b>, PL/SOQL <b>34</b>, save routines <b>36</b>, application setup mechanism <b>38</b>, applications servers <b>1001</b>-<b>100</b>N, system process space <b>102</b>, tenant process spaces <b>104</b>, tenant management process space <b>110</b>, tenant storage area <b>112</b>, user storage <b>114</b>, and application metadata <b>116</b>. In other embodiments, environment <b>10</b> may not have the same elements as those listed above and/or may have other elements instead of, or in addition to, those listed above.</p>
<p id="p-0039" num="0038">User system <b>12</b>, network <b>14</b>, system <b>16</b>, tenant data storage <b>22</b>, and system data storage <b>24</b> were discussed above in <figref idref="DRAWINGS">FIG. 1</figref>. Regarding user system <b>12</b>, processor system <b>12</b>A may be any combination of one or more processors. Memory system <b>12</b>B may be any combination of one or more memory devices, short term, and/or long term memory. Input system <b>12</b>C may be any combination of input devices, such as one or more keyboards, mice, trackballs, scanners, cameras, and/or interfaces to networks. Output system <b>12</b>D may be any combination of output devices, such as one or more monitors, printers, and/or interfaces to networks. As shown by <figref idref="DRAWINGS">FIG. 2</figref>, system <b>16</b> may include a network interface <b>20</b> (of <figref idref="DRAWINGS">FIG. 1</figref>) implemented as a set of HTTP application servers <b>100</b>, an application platform <b>18</b>, tenant data storage <b>22</b>, and system data storage <b>24</b>. Also shown is system process space <b>102</b>, including individual tenant process spaces <b>104</b> and a tenant management process space <b>110</b>. Each application server <b>100</b> may be configured to tenant data storage <b>22</b> and the tenant data <b>23</b> therein, and system data storage <b>24</b> and the system data <b>25</b> therein to serve requests of user systems <b>12</b>. The tenant data <b>23</b> might be divided into individual tenant storage areas <b>112</b>, which can be either a physical arrangement and/or a logical arrangement of data. Within each tenant storage area <b>112</b>, user storage <b>114</b> and application metadata <b>116</b> might be similarly allocated for each user. For example, a copy of a user's most recently used (MRU) items might be stored to user storage <b>114</b>. Similarly, a copy of MRU items for an entire organization that is a tenant might be stored to tenant storage area <b>112</b>. A UI <b>30</b> provides a user interface and an API <b>32</b> provides an application programmer interface to system <b>16</b> resident processes to users and/or developers at user systems <b>12</b>. The tenant data and the system data may be stored in various databases, such as one or more Oracle&#x2122; databases.</p>
<p id="p-0040" num="0039">Application platform <b>18</b> includes an application setup mechanism <b>38</b> that supports application developers' creation and management of applications, which may be saved as metadata into tenant data storage <b>22</b> by save routines <b>36</b> for execution by subscribers as one or more tenant process spaces <b>104</b> managed by tenant management process <b>110</b> for example. Invocations to such applications may be coded using PL/SOQL <b>34</b> that provides a programming language style interface extension to API <b>32</b>. A detailed description of some PL/SOQL language embodiments is discussed in commonly owned co-pending U.S. Provisional Patent Application 60/828,192 entitled, PROGRAMMING LANGUAGE METHOD AND SYSTEM FOR EXTENDING APIS TO EXECUTE IN CONJUNCTION WITH DATABASE APIS, by Craig Weissman, filed Oct. 4, 2006, which is incorporated in its entirety herein for all purposes. Invocations to applications may be detected by one or more system processes, which manages retrieving application metadata <b>116</b> for the subscriber making the invocation and executing the metadata as an application in a virtual machine.</p>
<p id="p-0041" num="0040">Each application server <b>100</b> may be communicably coupled to database systems, e.g., having access to system data <b>25</b> and tenant data <b>23</b>, via a different network connection. For example, one application server <b>1001</b> might be coupled via the network <b>14</b> (e.g., the Internet), another application server <b>100</b>N-<b>1</b> might be coupled via a direct network link, and another application server <b>1</b> DON might be coupled by yet a different network connection. Transfer Control Protocol and Internet Protocol (TCPIIP) are typical protocols for communicating between application servers <b>100</b> and the database system. However, it will be apparent to one skilled in the art that other transport protocols may be used to optimize the system depending on the network interconnect used.</p>
<p id="p-0042" num="0041">In certain embodiments, each application server <b>100</b> is configured to handle requests for any user associated with any organization that is a tenant. Because it is desirable to be able to add and remove application servers from the server pool at any time for any reason, there is preferably no server affinity for a user and/or organization to a specific application server <b>100</b>. In one embodiment, therefore, an interface system implementing a load balancing function (e.g., an F5 Big-IP load balancer) is communicably coupled between the application servers <b>100</b> and the user systems <b>12</b> to distribute requests to the application servers <b>100</b>. In one embodiment, the load balancer uses a least connections algorithm to route user requests to the application servers <b>100</b>. Other examples of load balancing algorithms, such as round robin and observed response time, also can be used. For example, in certain embodiments, three consecutive requests from the same user could hit three different application servers <b>100</b>, and three requests from different users could hit the same application server <b>100</b>. In this manner, system <b>16</b> is multi-tenant, wherein system <b>16</b> handles storage of, and access to, different objects, data and applications across disparate users and organizations.</p>
<p id="p-0043" num="0042">As an example of storage, one tenant might be a company that employs a sales force where each salesperson uses system <b>16</b> to manage their sales process. Thus, a user might maintain contact data, leads data, customer follow-up data, performance data, goals and progress data, etc., all applicable to that user's personal sales process (e.g., in tenant data storage <b>22</b>). In an example of a MTS arrangement, since all of the data and the applications to access, view, modify, report, transmit, calculate, etc., can be maintained and accessed by a user system having nothing more than network access, the user can manage his or her sales efforts and cycles from any of many different user systems. For example, if a salesperson is visiting a customer and the customer has Internet access in their lobby, the salesperson can obtain critical updates as to that customer while waiting for the customer to arrive in the lobby.</p>
<p id="p-0044" num="0043">While each user's data might be separate from other users' data regardless of the employers of each user, some data might be organization-wide data shared or accessible by a plurality of users or all of the users for a given organization that is a tenant. Thus, there might be some data structures managed by system <b>16</b> that are allocated at the tenant level while other data structures might be managed at the user level. Because an MTS might support multiple tenants including possible competitors, the MTS should have security protocols that keep data, applications, and application use separate. Also, because many tenants may opt for access to an MTS rather than maintain their own system, redundancy, up-time, and backup are additional functions that may be implemented in the MTS. In addition to user-specific data and tenant-specific data, system <b>16</b> might also maintain system level data usable by multiple tenants or other data. Such system level data might include industry reports, news, postings, and the like that are sharable among tenants.</p>
<p id="p-0045" num="0044">In certain embodiments, user systems <b>12</b> (which may be client systems) communicate with application servers <b>100</b> to request and update system-level and tenant-level data from system <b>16</b> that may require sending one or more queries to tenant data storage <b>22</b> and/or system data storage <b>24</b>. System <b>16</b> (e.g., an application server <b>100</b> in system <b>16</b>) automatically generates one or more SQL statements (e.g., one or more SQL queries) that are designed to access the desired information. System data storage <b>24</b> may generate query plans to access the requested data from the database.</p>
<p id="p-0046" num="0045">The query plan may include a search for a particular set of characters, i.e. a character string. For example, the search may be for data of a particular row or column of a database table (object). A table generally contains one or more data categories logically arranged as columns or fields in a viewable schema. Each row or record of a table contains an instance of data for each category defined by the fields. For example, a CRM database may include a table that describes a customer with fields for basic contact information such as name, address, phone number, fax number, etc. Another table might describe a purchase order, including fields for information such as customer, product, sale price, date, etc.</p>
<p id="p-0047" num="0046">In some multi-tenant database systems, tenants may be allowed to create and store custom objects, or they may be allowed to customize standard entities or objects, for example by creating custom fields for standard objects, including custom index fields. U.S. patent application Ser. No. 10/817,161, filed Apr. 2, 2004, entitled &#x201c;Custom Entities and Fields in a Multi-Tenant Database System&#x201d;, and which is hereby incorporated herein by reference, teaches systems and methods for creating custom objects as well as customizing standard objects in a multi-tenant database system.</p>
<p id="p-0048" num="0047">Given that a user may customize a field, the information contained in the database may take on any form. In order to provide custom searches, a database may allow a user to enter a formula (regular expression) to find fields with specific patterns of characters. However, as described below, providing the user with this control and flexibility can cause problems. For example, overall run times for a particular search can effectively shut down the database system.</p>
<heading id="h-0010" level="1">Regular Expressions</heading>
<p id="p-0049" num="0048">As described above, part of a query to a database typically involves a search to find a particular character string or class of character strings. The matching character string (e.g. a field in the database) may be used to identify information that a user seeks.</p>
<p id="p-0050" num="0049">For, instance a user might want to look for account information associated with XYZ corp. The database would return a result by performing a pattern match of the text &#x201c;XYZ Corp,&#x201d; for example, in order to identify data associated with XYZ Corp. A user might also want to look for all affiliates or forms of XYZ, such as XYZ inc., XYZ ag, etc. A user can easily perform such a search by using a regular expression.</p>
<p id="p-0051" num="0050">Regular expressions provide a concise and flexible means for identifying strings of text of interest, such as particular characters, words, or patterns of characters. Symbols are used to easily specify the exact type of character string being sought. Common option for regular expressions might be wildcards, or the allowance for repetition of a character(s). The regular expression essentially acts as a formula for finding the string of interest.</p>
<p id="p-0052" num="0051">Examples of some symbols (operators) for regular expression are as follows. For alternation, a vertical bar separates alternatives. For example, gray|grey can match &#x201c;gray&#x201d; or &#x201c;grey&#x201d;. For grouping, parentheses are used to define the scope and precedence of the operators (among other uses). For example, gray|grey and gr(a|e)y are equivalent patterns which both describe the set of &#x201c;gray&#x201d; and &#x201c;grey&#x201d;.</p>
<p id="p-0053" num="0052">For quantification, a quantifier after a token (such as a character) or group specifies how often that preceding element is allowed to occur. The most common quantifiers are ?, *, and +. The question mark &#x201c;?&#x201d; indicates there is zero or one of the preceding element. For example, colou?r matches both &#x201c;color&#x201d; and &#x201c;colour&#x201d;. The asterisk &#x201c;*&#x201d; indicates there are zero or more of the preceding element. For example, ab*c matches &#x201c;ac&#x201d;, &#x201c;abc&#x201d;, &#x201c;abbc&#x201d;, &#x201c;abbbc&#x201d;, and so on. The plus sign &#x201c;+&#x201d; indicates that there is one or more of the preceding element. For example, ab+c matches &#x201c;abc&#x201d;, &#x201c;abbc&#x201d;, &#x201c;abbbc&#x201d;, and so on, but not &#x201c;ac&#x201d;.</p>
<p id="p-0054" num="0053">These constructions can be combined to form arbitrarily complex expressions, much like one can construct arithmetical expressions from numbers and the operations +, &#x2212;, x, and &#xf7;. An exemplary method using a regular expression is as follows.</p>
<heading id="h-0011" level="1">Example Query Method</heading>
<p id="p-0055" num="0054"><figref idref="DRAWINGS">FIG. 3</figref> is a flowchart illustrating a method <b>300</b> for performing a database search according to an embodiment of the present invention. As described above, a user may enter a regular expression in order to find particular fields of a database. Additional parameters for the search may request particular data associated (e.g. linked) with that field. For example, when a field is a column and/or row, the additional parameters may select particular data from that column.</p>
<p id="p-0056" num="0055">In step <b>310</b>, the user enters a regular expression. In one embodiment, this may be done by entering symbols and characters into a window of an application (e.g. application running on the database). In another embodiment, characters may be combined with actions (e.g. corresponding to particular symbols) chosen from lists (such as drop down lists).</p>
<p id="p-0057" num="0056">In step <b>320</b>, a query is formulated based on the regular expression that was entered. For example, an application server of a database system may formulate the query. The query may include other filters (e.g. additional parameters) entered by the user or imposed by the database system. For example, the system may allow access to only data to which the user is authorized.</p>
<p id="p-0058" num="0057">In step <b>330</b>, some of the filters may be imposed in order to limit the number of character strings searched. The application can apply the filters input by the user or imposed by the database system prior to using the regular expression. For example, the number of fields to be searched can be decreased by applying the filters.</p>
<p id="p-0059" num="0058">In step <b>340</b>, valid fields (i.e. fields passing the initial filters) are searched for a string matching the regular expression. Various mechanisms may be used to perform the search. One method, backtracking, is described below.</p>
<p id="p-0060" num="0059">In step <b>350</b>, the results are returned. In one embodiment, the matching strings may be aggregated and then returned all at once. In another embodiment, results associated with each matching string may be returned when that matching string is found. Additional filtering or searches may be performed using the matching strings. For example, data linked to a particular string may then be searched using filters (e.g. parameters) input by a user.</p>
<p id="p-0061" num="0060">It is important to have high accuracy for search for character stings that match the regular expression. Otherwise, a user may not receive the expected results, which could have very dire effects. Accordingly, search methods can be quite complex in order to ensure that a matching string is always accurately found.</p>
<heading id="h-0012" level="1">Search Methods (e.g. Backtracking)</heading>
<p id="p-0062" num="0061">Determining whether all or part of a character string matches a regular expression is not a simple task. The characters may be allocated among the operators in many different ways. For example, take the regular expression &#x201c;a*a&#x201d; and the sequence &#x201c;aa&#x201d;. Both &#x201c;a&#x201d; characters could be allocated to the &#x201c;a*&#x201d; operation; or one &#x201c;a&#x201d; character could be allocated to the &#x201c;a*&#x201d; operation and the other a&#x201d; character could be allocated to the second &#x201c;a.&#x201d; Accordingly, sophisticated methods are used to ensure that matching strings are not missed. However, such methods may come at a cost of increased run time, as described below.</p>
<p id="p-0063" num="0062">One such method is backtracking. Typically, backtracking algorithms try each possibility until they find the right one. It is a depth-first search (DFS) of the set of possible solutions. A DFS algorithm may be viewed including steps that traverse or search a tree, tree structure, or graph, where each branch from a node is a different possibility. One starts at the root, e.g. selecting some node as the root in the graph case, and explores as far as possible along each branch (alternative).</p>
<p id="p-0064" num="0063">During the search, if an alternative does not work, the search backtracks to the choice point, i.e. the place that presented different alternatives, and tries the next alternative. When the alternatives are exhausted, the search returns to the previous choice point and tries the next alternative there. If there are no more choice points, the search fails.</p>
<p id="p-0065" num="0064"><figref idref="DRAWINGS">FIGS. 4A-4F</figref> illustrates a backtracking algorithm according to an embodiment of the present invention. In this example, the regular expression is (a*)+b, which matches with a first pattern with any number of &#x201c;a,&#x201d; finds a second pattern of one or more of the first pattern, and then a &#x201c;b&#x201d;. The target character string that is input into the regular expression search engine and for which a match is being determined is &#x201c;aaaaac&#x201d;.</p>
<p id="p-0066" num="0065"><figref idref="DRAWINGS">FIG. 4A</figref> shows a process during a first pass through the target character string. Each &#x201c;a&#x201d; character is classified relative to the regular expression. During the first pass, each of the five &#x201c;a&#x201d; characters satisfies the &#x201c;a*&#x201d; part of the expression. Thus, each &#x201c;a&#x201d; is determined to be a match for the &#x201c;a*&#x201d; part, which is signified by the oval. Each arrow in <figref idref="DRAWINGS">FIG. 4A</figref> signifies at least one access to the regular expression and/or the input character string, and therefore is some measure of computational effort and/or time.</p>
<p id="p-0067" num="0066">After &#x201c;a*&#x201d; matches each of the five &#x201c;a&#x201d; (signified as a<sup>5</sup>), the expression &#x201c;(a*)+&#x201d; is found to be a match. Since a<sup>5 </sup>exists at least once, this expression is matched to &#x201c;(a*)+&#x201d;, just one time (1&#xd7;). Not shown, is an additional step of identifying that more than one as is not matched. When it is determined whether the next character is a &#x201c;b&#x201d;, then the input character string fails as the next character is a &#x201c;c&#x201d;.</p>
<p id="p-0068" num="0067">In <figref idref="DRAWINGS">FIG. 4B</figref>, the method backtracks to the last decision point that satisfied part of the expression. Thus, the method backtracks to a<sup>4</sup>, which still matched &#x201c;a*&#x201d;. Note that a different direction for the error from the 4th &#x201c;a&#x201d;, signifying a different decision being made.</p>
<p id="p-0069" num="0068">At this point, it is determined that &#x201c;(a<sup>4</sup>)+&#x201d; only occurs once, which takes some accesses to the regular expression or the input string. Then it is determined that &#x201c;(a<sup>4</sup>)+b&#x201d; is not satisfied since the last character is &#x201c;c&#x201d;. Note that the method does not remember what the next character is since, for robustness, each character is looked at anew for each new pass.</p>
<p id="p-0070" num="0069">In <figref idref="DRAWINGS">FIG. 4C</figref>, the method backtracks to the next previous decision point that satisfied part of the expression. Thus, the method backtracks to a<sup>3</sup>, which still matched &#x201c;a*&#x201d;. At that point, the method checks to see if a<sup>3 </sup>occurs more than once. The method performs two more accesses (one for each of the subsequent &#x201c;a&#x201d;s), but then realizes that the third &#x201c;a&#x201d; does not exist, thus failing.</p>
<p id="p-0071" num="0070">In <figref idref="DRAWINGS">FIG. 4D</figref>, the method then backtracks again to the 3rd &#x201c;a,&#x201d; where &#x201c;(a<sup>3</sup>)+&#x201d; was matched once. The next character is checked again, and the input string fails when it is determined that the 4th &#x201c;a&#x201d; character is not a &#x201c;b&#x201d;.</p>
<p id="p-0072" num="0071">In <figref idref="DRAWINGS">FIG. 4E</figref>, the method backtracks to the next previous decision point that satisfied part of the expression. Thus, the method backtracks to a<sup>2</sup>, which still matched &#x201c;a*&#x201d;. At that point, the method checks to see if a<sup>2 </sup>occurs more than once, which it does (twice 2&#xd7;). The determination that the match is only 2&#xd7; and not 3&#xd7; takes additional operations as well. The method then fails when it is determined that the 5th &#x201c;a&#x201d; character is not a &#x201c;b&#x201d;.</p>
<p id="p-0073" num="0072">In <figref idref="DRAWINGS">FIG. 4F</figref>, the method backtracks all the way back to the beginning. Thus, the method backtracks to a\ which still matched &#x201c;a*&#x201d;. At that point, the method checks to see if a<sup>1 </sup>occurs more than once. It is determined that a<sup>1 </sup>occurs five times (5&#xd7;), and not six times. The method then checks whether the 6th character is a &#x201c;b&#x201d;. But, since it is a &#x201c;c&#x201d;, the target fails to match.</p>
<heading id="h-0013" level="1">Number of Operations in Search</heading>
<p id="p-0074" num="0073">As one can see, the amount of repetition for operations accessing the input string is quite high. Accordingly, the number of accesses to the input character string is not limited to the number of input characters. Thus, the number of operations increases at a rate greater than linear with the size of the input string.</p>
<p id="p-0075" num="0074">Since the scaling of such search methods is greater than linear, the amount of computational cost for a string of N+1 &#x201c;a&#x201d; is not a fixed amount longer than the cost for a string of N &#x201c;a&#x201d;. In other words, each new character adds more and more in the number of operations. This because the number of additional operations required for each additional &#x201c;a&#x201d; is not a fixed number.</p>
<p id="p-0076" num="0075">This is because the number of times that the last character is accessed depends on the number of characters. Thus, the number of operations depends on N in some manner, which makes the dependence greater than linear. This includes a dependent of N<sup>X </sup>where X is greater than one. It also includes a dependence on X<sup>N</sup>, also where X is greater than one. The latter is often called exponential growth.</p>
<p id="p-0077" num="0076">In one embodiment, X equals 2 for a dependence of 2<sup>N</sup>. In this example, a string of &#x201c;aaaaaac&#x201d; would take twice as long to run than the string &#x201c;aaaaac.&#x201d;</p>
<p id="p-0078" num="0077"><figref idref="DRAWINGS">FIG. 5</figref> is an exemplary plot showing exponential scaling of computational cost vs. the size of a character string according to an embodiment of the present invention. The X axis is a measure of the size of the input string, e.g. the number characters in the string. The Y axis is the computational effort for the determination of whether the input character string matches the regular expression. The computational effort may, for example, be time or an operation count. As one can see, the computational effort can become quite large when certain regular expressions encounter certain input character strings.</p>
<p id="p-0079" num="0078">When such an event does occur, the search application for the regular expressions may become overloaded. For example, the application may not be able to perform other searches that are being submitted by other users since one search is consuming too much resources. Thus, such an event could cause the application to become inoperable, which could cause a great loss in business and/or income to the entity providing a service uses the search application.</p>
<p id="p-0080" num="0079">Typically the user is allowed to enter almost any regular expression. As the regular expression input by the user controls the search, a user can greatly affect the operation of the database. Also, the user may be able to enter any character string into the fields of the database. Thus, there is ample opportunity for improper use, either malicious or inadvertent, which can cause these unwanted results for the user and/or other users of the application. Therefore, it is desirable to prevent a hacker or novice user from consuming large amounts of CPU time, thereby being able to take down an application (such as a web server).</p>
<heading id="h-0014" level="1">Preventing Misuse of Search</heading>
<p id="p-0081" num="0080">As just mentioned, an improper regular expression and input character string combination can halt or frustrate operation of a database system. Accordingly, it is desirable to prevent the search application from being derailed by the improper regular expression and string combination.</p>
<p id="p-0082" num="0081">One could scan regular expressions before being submitted in a search, and regular expressions deemed improper could be refused. However, such a method would inevitably prevent some regular expressions that are actually proper from being accepted. Users would then not have the full flexibility that they desire.</p>
<p id="p-0083" num="0082">It could be possible to have a timer for each query request, or each thread of the application that is servicing the query request. The application process could monitor the time for each thread. If the operation time for a particular thread reaches the maximum time, then the routine performing the search could be stopped. As used herein, a thread is contained inside a process. Different threads in the same process may share some resources.</p>
<p id="p-0084" num="0083">However, stopping a thread by an external error call is not possible in some languages. For example, in Java, a routine that is busy executing a loop (as might occur in a search of a sting matching a regular expression) often cannot be stopped.</p>
<p id="p-0085" num="0084"><figref idref="DRAWINGS">FIG. 6A</figref> shows a process <b>600</b> that is running a thread <b>610</b> to perform a regular expression search. The process includes an error handling routine or thread <b>620</b>. However, when the error handling routine <b>620</b> sends an exit command <b>630</b> to the thread <b>610</b>, the exit command is never performed. In one aspect, this may be because the thread is performing a tight loop (e.g. not waiting for a command), and therefore is too busy performing the search. For example, the loop may not pause to receive any commands.</p>
<p id="p-0086" num="0085">The application process (e.g. the application server of the database system) could be terminated, but this would cause the whole application server to stop. Thus, this solution could cause as much problem as the long computational time of the regular expression search. Another possible solution is to have multiple processes, with each handling a different query, e.g., that uses a regular expression. However, having multiple processes would require a lot of overhead computational cost.</p>
<p id="p-0087" num="0086"><figref idref="DRAWINGS">FIG. 6B</figref> shows a thread <b>660</b> that performs an internal exit <b>680</b> according to an embodiment of the present invention. The thread <b>660</b> is running as part of the process <b>650</b>. Here, the error handling code <b>670</b> is part of the thread <b>660</b>. For example, the error handling code <b>670</b> may check a variable or other value, and then determine whether an exit should occur. In one aspect, the error handling code <b>670</b> is part of the thread <b>660</b>. As such, the error handling code <b>670</b> can ensure that the thread <b>660</b> will exit, or otherwise stop running the regular expression search. As shown, the exit command <b>680</b> is successful since the command is received and executed by thread <b>660</b>. Therefore, an internal exit will occur when an error of an improper regular expression and input string combination is found.</p>
<p id="p-0088" num="0087"><figref idref="DRAWINGS">FIG. 7</figref> is a flowchart illustrating a method <b>700</b> for preventing misuse of database searches according to an embodiment of the present invention. Steps of this method may be performed, for example, with a database system, such as system <b>16</b>. Database systems implementing such a method can advantageously provide reliable service while still providing users flexibility and accuracy in their searches.</p>
<p id="p-0089" num="0088">In step <b>710</b>, a regular expression is received in a first thread of an application process. In one embodiment, the application process is running on an application server (e.g. server <b>100</b>), which is part of a database system. (e.g. system <b>16</b>). In one aspect, the database system may be an on-demand database system. In another aspect, the database system may be a multi-tenant database system.</p>
<p id="p-0090" num="0089">In one embodiment, the first thread is encoded in Java. In another embodiment, the regular expression is received from a user via a user interface that is provided to a client system, e.g., via a Web interface. In other embodiments, the regular expression is received via a text interface which may be interactive or non-interactive (such as text messages or e-mail). The regular expression may be part of a query submitted by a user.</p>
<p id="p-0091" num="0090">In step <b>720</b>, a database is searched to find an input character string that matches the regular expression. In one embodiment, the search is part of a query submitted by the user. In one aspect, the input character strings are obtained from fields of the database.</p>
<p id="p-0092" num="0091">In one embodiment, a duration of the searching scales superlinearly with a size of the input string. In other words, the increase in a computational effort (duration) for each additional character increases itself. Thus, the scaling is greater than linear. In one aspect, the size is the number of characters in the string or the amount of memory to store the character string. In another aspect, the greater than linear scaling is a result of guaranteeing that a determination of whether the input character string matches the regular expression is accurate.</p>
<p id="p-0093" num="0092">In step <b>730</b>, the first thread tracks a computational effort performed during the search. In one embodiment, an amount of time is tracked. For example, the time could be tracked by periodically calling a subroutine that returns a time. In another embodiment, a number of operations performed during the search is counted. For example, the number of operations may be tracked with a counter that is incremented with each step of a loop running in the first thread.</p>
<p id="p-0094" num="0093">In one embodiment, the number of operations is a number of times that the regular expression has been accessed. In another embodiment, the number of operations is a number of accesses to a particular input character string. In yet another embodiment, the number of operations may be the total number of accesses to any input character string made during the search. In one aspect, the number of total operations may be tracked by passing a variable into and out of the search routine that finds a match to the regular expression.</p>
<p id="p-0095" num="0094">In step <b>740</b>, the computational effort is compared to a threshold value. In one embodiment, a number of operations is compared (e.g. with an IF statement) to a threshold value N. For example, in one embodiment, N equals 1 million operations (e.g. accesses). The value of N preferably catches malicious or stupid use, but not legitimate use of the database system. A value of 1 million is typically suitable for input character strings that require 1 kB-4 kB of storage.</p>
<p id="p-0096" num="0095">In one embodiment, the value of N=1 million and a character string of 3-4 kB corresponds to a runtime for about 60 msec. In one aspect, the value for N is dependent on the size of the fields. Larger fields (i.e. longer input strings) might require a larger value for N. In another embodiment, the threshold value may be a maximum allowed elapsed time since a prior event, such as the start of a search or the start of a pattern match to a particular input character string.</p>
<p id="p-0097" num="0096">In step <b>750</b>, an internal exit is performed from the first thread when the computational effort exceeds a threshold value. In one embodiment, the computational effort exceeds when it is greater than a first threshold value. In another embodiment, the computation effort exceeds when it is greater than or equal to a second threshold value. In one aspect, this embodiment can be equivalent to the previous embodiment, e.g., when the first threshold value is 999,999 and the second threshold value is 1,000,000.</p>
<p id="p-0098" num="0097">In one embodiment, the internal exit may be from a loop that is determining a pattern match of just one input character string. In one aspect, further input character strings may be searched with the current regular expression. In another aspect, the search of further input character strings with the current regular expression may be prevented.</p>
<p id="p-0099" num="0098">In another embodiment, the internal exit may be from a loop that is performing the entire search. Thus, the search of further input character strings with the current regular expression would be prevented. In yet another embodiment, the internal exit may be from the entire thread. Thus, the thread may be killed.</p>
<p id="p-0100" num="0099">In one embodiment, upon the internal exit, a message may be sent back to the user, e.g., that a counter was exceeded or that regular expression was too complicated. Comments as to why the regular expression was too complicated may be provided. For example, the &#x201c;(a*)+&#x201d; expression may pointed out as satisfying too many possibilities. Suggestions as to a new simpler or better expression may be provided to the user.</p>
<p id="p-0101" num="0100">It should be understood that the present invention as described above can be implemented in the form of control logic using hardware and/or using computer software in a modular or integrated manner. Based on the disclosure and teachings provided herein, a person of ordinary skill in the art will know and appreciate other ways and/or methods to implement the present invention using hardware and a combination of hardware and software.</p>
<p id="p-0102" num="0101">Any of the software components or functions described in this application, may be implemented as software code to be executed by a processor using any suitable computer language such as, for example, Java, C++ or Perl using, for example, conventional or object-oriented techniques. The software code may be stored as a series of instructions, or commands on a computer readable medium for storage and/or transmission, suitable media include random access memory (RAM), a read only memory (ROM), a magnetic medium such as a hard-drive or a floppy disk, or an optical medium such as a compact disk (CD) or DVD (digital versatile disk), flash memory, and the like. The computer readable medium may be any combination of such storage or transmission devices.</p>
<p id="p-0103" num="0102">Such programs may also be encoded and transmitted using carrier signals adapted for transmission via wired, optical, and/or wireless networks conforming to a variety of protocols, including the Internet. As such, a computer readable medium according to an embodiment of the present invention may be created using a data signal encoded with such programs. Computer readable media encoded with the program code may be packaged with a compatible device or provided separately from other devices (e.g., via Internet download). Any such computer readable medium may reside on or within a single computer program product (e.g. a hard drive or an entire computer system), and may be present on or within different computer program products within a system or network. A computer system may include a monitor, printer, or other suitable display for providing any of the results mentioned herein to a user.</p>
<p id="p-0104" num="0103">The above description of exemplary embodiments of the invention has been presented for the purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise form described, and many modifications and variations are possible in light of the teaching above. The embodiments were chosen and described in order to best explain the principles of the invention and its practical applications to thereby enable others skilled in the art to best utilize the invention in various embodiments and with various modifications as are suited to the particular use contemplated.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A method for preventing misuse of database searches, the method comprising:
<claim-text>receiving a regular expression in a search and error handling thread of an application process running on a processor, wherein the regular expression includes one or more tokens and one or more quantifiers;</claim-text>
<claim-text>searching a database to find one or more input character strings that match the regular expression, wherein a duration of the searching scales greater than linearly with a size of an input character string in order to guarantee a determination of whether an input character string matches the regular expression including the quantifiers;</claim-text>
<claim-text>tracking, within the search and error handling thread, an amount of time of the searching for matches to the regular expression;</claim-text>
<claim-text>comparing the tracked amount of time to a threshold value; and</claim-text>
<claim-text>performing an internal exit in the search and error handling thread when the amount of time exceeds the threshold value prior to completion of the searching of the database.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein tracking an amount of time of searching for matches to the regular expression includes periodically calling a subroutine that returns a time.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the searching uses backtracking.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the internal exit is from a routine of the search and error handling thread that performs the searching of the database.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the internal exit is from a loop that is performing a determination of whether a particular input character string matches the regular expression.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method of <claim-ref idref="CLM-00005">claim 5</claim-ref>, further comprising stopping the searching the database to find an input character string that matches the received regular expression as a result of the internal exit.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the threshold value is the maximum allowed elapsed time since a prior event.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the threshold value scales superlinearly with the size of the input character string.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The method of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the size of the input character string is the number of characters in the input character string.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The method of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the size of the input character string is the amount of memory that is used to store the input character string.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further including sending an exit message to a user if the amount of time exceeds the threshold value prior to completion of the searching of the database.</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. A database system comprising:
<claim-text>an input interface for receiving a regular expression from a user;</claim-text>
<claim-text>at least one processor coupled to the input interface,</claim-text>
<claim-text>logic that runs a search and error handling thread of an application process on the processor, wherein the search and error handling thread is configured to:
<claim-text>receive a regular expression in a search and error handling thread of an application process running on a processor, wherein the regular expression includes one or more tokens and one or more quantifiers;</claim-text>
<claim-text>search a database to find one or more input character strings that match the regular expression, wherein a duration of the searching scales greater than linearly with a size of an input character string in order to guarantee a determination of whether an input character string matches the regular expression including the quantifiers;</claim-text>
<claim-text>track, within the search and error handling thread, an amount of time of searching for matches to the regular expression, wherein the tracking of the amount of time occurs during the searching of the database to find the one or more input character strings that match the regular expression;</claim-text>
<claim-text>compare the amount of time to a threshold value; and</claim-text>
<claim-text>perform an internal exit in the search and error handling thread when the amount of time exceeds the threshold value prior to completion of the searching of the database.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The database system of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the tracking of an amount of time of searching for matches to the regular expression includes periodically calling a subroutine that returns a time.</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The database system of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the search uses backtracking.</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The database system of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the internal exit is from a routine of the search and error handling thread that performs the search of the database.</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The database system of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the internal exist is from a loop that is performing a determination of whether a particular input character string matches the regular expression.</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The database system of <claim-ref idref="CLM-00016">claim 16</claim-ref>, further comprising stopping the searching the database to find an input character string that matches the received regular expression as a result of the internal exit.</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The database system of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the threshold value is the maximum allowed elapsed time since a prior event.</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. The database system of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the threshold value scales superlinearly with the size of the input character string.</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. The database system of <claim-ref idref="CLM-00019">claim 19</claim-ref>, wherein the size of the input character string is the number of characters in the input character string.</claim-text>
</claim>
<claim id="CLM-00021" num="00021">
<claim-text>21. The database system of <claim-ref idref="CLM-00019">claim 19</claim-ref>, wherein the size of the input character string is the amount of memory that is used to store the input character string.</claim-text>
</claim>
<claim id="CLM-00022" num="00022">
<claim-text>22. The database system of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the logic is further configured to send an exit message to a user if the amount of time exceeds the threshold value prior to completion of the searching of the database.</claim-text>
</claim>
</claims>
</us-patent-grant>

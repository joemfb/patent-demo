<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08627413-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08627413</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>12713640</doc-number>
<date>20100226</date>
</document-id>
</application-reference>
<us-application-series-code>12</us-application-series-code>
<us-term-of-grant>
<us-term-extension>651</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>15</main-group>
<subgroup>16</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>726  4</main-classification>
<further-classification>726 17</further-classification>
<further-classification>718  1</further-classification>
</classification-national>
<invention-title id="d2e53">System and method for authorization and management of connections and attachment of resources</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>8341732</doc-number>
<kind>B2</kind>
<name>Croft et al.</name>
<date>20121200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>726 21</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>2006/0069828</doc-number>
<kind>A1</kind>
<name>Goldsmith</name>
<date>20060300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>710100</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>2006/0248528</doc-number>
<kind>A1</kind>
<name>Oney et al.</name>
<date>20061100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>718  1</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>2008/0082977</doc-number>
<kind>A1</kind>
<name>Araujo et al.</name>
<date>20080400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>718  1</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>2008/0104589</doc-number>
<kind>A1</kind>
<name>McCrory et al.</name>
<date>20080500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>718  1</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>2009/0070771</doc-number>
<kind>A1</kind>
<name>Yuyitung et al.</name>
<date>20090300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>718105</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>2009/0276774</doc-number>
<kind>A1</kind>
<name>Kinoshita</name>
<date>20091100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>718  1</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>2010/0107162</doc-number>
<kind>A1</kind>
<name>Edwards et al.</name>
<date>20100400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>718  1</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>2010/0235647</doc-number>
<kind>A1</kind>
<name>Buer</name>
<date>20100900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>713187</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>2010/0257602</doc-number>
<kind>A1</kind>
<name>Kettler et al.</name>
<date>20101000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>726 19</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>2010/0333088</doc-number>
<kind>A1</kind>
<name>Rogel et al.</name>
<date>20101200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>718  1</main-classification></classification-national>
</us-citation>
<us-citation>
<nplcit num="00012">
<othercit>Diakhate et al., Efficient shared memory message passing for Inter-VM communications Publication Date: 20090811, Publisher: Springer Verlag, pp. 1-10.</othercit>
</nplcit>
<category>cited by examiner</category>
</us-citation>
</us-references-cited>
<number-of-claims>20</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>726  4</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>726 17</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>718  1</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>12</number-of-drawing-sheets>
<number-of-figures>12</number-of-figures>
</figures>
<us-related-documents>
<us-provisional-application>
<document-id>
<country>US</country>
<doc-number>61263761</doc-number>
<date>20091123</date>
</document-id>
</us-provisional-application>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20110126268</doc-number>
<kind>A1</kind>
<date>20110526</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Youngworth</last-name>
<first-name>Christopher</first-name>
<address>
<city>San Jose</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Youngworth</last-name>
<first-name>Christopher</first-name>
<address>
<city>San Jose</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Wilmer Cutler Pickering Hale and Dorr LLP</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>Symantec Corporation</orgname>
<role>02</role>
<address>
<city>Mountain View</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Rashid</last-name>
<first-name>Harunur</first-name>
<department>2493</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">Embodiments of the present invention are directed to a method and system for authorization management and resource attachment. The method includes receiving, within an electronic system, a notification of an emulated device operable to be provisioned and updating an authorization record of an authorization record datastore. The updating of the authorization record comprises updating routing information related to communication of the emulated device and a virtual device. The method further includes receiving a request for initial instantiation or reconnection of the emulated device with the virtual device and determining whether the emulated device and the virtual device are allowed to communicate based on the authorization record datastore. A response to the request for instantiation or reconnection can then be sent.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="186.01mm" wi="245.96mm" file="US08627413-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="256.29mm" wi="209.97mm" orientation="landscape" file="US08627413-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="259.42mm" wi="209.97mm" orientation="landscape" file="US08627413-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="244.43mm" wi="202.35mm" orientation="landscape" file="US08627413-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="257.39mm" wi="205.91mm" orientation="landscape" file="US08627413-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="284.99mm" wi="209.97mm" file="US08627413-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="275.51mm" wi="206.08mm" file="US08627413-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="276.27mm" wi="205.15mm" orientation="landscape" file="US08627413-20140107-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00008" num="00008">
<img id="EMI-D00008" he="215.90mm" wi="149.27mm" file="US08627413-20140107-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00009" num="00009">
<img id="EMI-D00009" he="215.90mm" wi="140.80mm" file="US08627413-20140107-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00010" num="00010">
<img id="EMI-D00010" he="215.90mm" wi="156.21mm" file="US08627413-20140107-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00011" num="00011">
<img id="EMI-D00011" he="215.90mm" wi="184.40mm" file="US08627413-20140107-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00012" num="00012">
<img id="EMI-D00012" he="242.99mm" wi="199.22mm" orientation="landscape" file="US08627413-20140107-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?RELAPP description="Other Patent Relations" end="lead"?>
<heading id="h-0001" level="1">RELATED U.S. APPLICATIONS</heading>
<p id="p-0002" num="0001">This application claims the benefit of and priority to the provisional patent application, Ser. No. 61/263,761, entitled &#x201c;SEAMLESS INSERTION OF DATA TRANSFORMATIONS INTO DEVICE DRIVER TRANSPORT STREAMS,&#x201d; with filing date Nov. 23, 2009, and hereby incorporated by reference in its entirety.</p>
<?RELAPP description="Other Patent Relations" end="tail"?>
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0002" level="1">CROSS REFERENCE TO RELATED U.S. APPLICATIONS</heading>
<p id="p-0003" num="0002">This Application is related to the U.S. Patent Application &#x201c;SYSTEM AND METHOD FOR VIRTUAL DEVICE COMMUNICATION FILTERING&#x201d;, by Youngworth, filed on Feb. 26, 2010, Ser. No. 12/713,754, which is incorporated by reference in its entirety.</p>
<p id="p-0004" num="0003">This Application is related to the U.S. Patent Application &#x201c;DISTRIBUTED STORAGE THROUGH A VOLUME DEVICE ARCHITECTURE&#x201d;, by Youngworth, filed on Feb. 26, 2010, Ser. No. 12/713,621, which is incorporated by reference in its entirety.</p>
<heading id="h-0003" level="1">TECHNICAL FIELD</heading>
<p id="p-0005" num="0004">Embodiments of the present invention generally relate to digital computer systems and virtualization.</p>
<heading id="h-0004" level="1">BACKGROUND</heading>
<p id="p-0006" num="0005">As technology advances, computing systems have become increasingly powerful in terms of computation power. Correspondingly, the power requirements have increased rapidly. As a result, virtualization of computers and/or operating systems has become increasingly important to enable server consolidation such that many small physical servers can be replaced by one larger physical server. This results in increased and more efficient utilization of costly hardware resources such as central processing units (CPUs), thereby allowing power savings and hardware cost savings.</p>
<p id="p-0007" num="0006">Virtual environments typically include virtualized computers and/or operating systems known as virtual machines or guests which access hardware or physical resources through emulated devices presented by a hypervisor. Hypervisor based virtualization is becoming increasingly important in data centers and furthermore hypervisor based computing is displacing many native platform applications. However, hypervisor based virtual environments are often rendered less effective by the primitive emulated devices provided by the hypervisors. Particularly, the hypervisor vendors are not sufficiently motivated to make the proper interfaces available to allow proper porting of products to a hypervisor based virtualization environment. The lack of supporting interfaces prevents hypervisor based implementations from delivering performance at optimum levels.</p>
<p id="p-0008" num="0007">In addition, solutions attempting to use device drivers on top of the existing hypervisor infrastructure require custom implementations of interfaces to hypervisor internal interfaces. Also, within these systems, the performance of working through an emulated device layered software stack is significantly degraded and the system resource overhead is greatly increased. Consequently, the cumulative demand on shared hardware resources by multiple guests makes response time and throughput largely indeterminate.</p>
<p id="p-0009" num="0008">Further, current hypervisors expose device specific characteristics to virtual machines which make virtual machine migration difficult. Virtual machines are designed to be portable. Virtual machines can be moved or migrated between platforms and therefore the resources that underlie the emulated devices of the hypervisors can vary. Modern hypervisors have incomplete abstractions defining the resources that are needed to construct the emulated devices presented to the virtual machines. As a result, individual physical resource characteristics creep into the implementations of emulated devices. This leads to difficulties in substituting one physical resource for another, during virtual machine migration, without affecting the capabilities of the emulated device presented to the virtual machine guest. As such, each resource difference is handled individually. The results are hard to maintain code, little code re-use, and difficulty in maintaining common functions and metrics across the disparate implementations. This means that often the guest driver must be changed after migration or that the transport channel is sub-optimal in performance.</p>
<p id="p-0010" num="0009">Often, hypervisor vendors try to overcome their device model shortcomings by limiting the number of device emulations, relying on internet protocol (IP) network abstraction to supply storage as well as network communication to the virtual machine. This is not optimal because packet networking is not the optimal transport abstraction for internal use and limitations of device types exported to a virtual machine slow the adoption of the virtualization platform.</p>
<heading id="h-0005" level="1">SUMMARY OF THE INVENTION</heading>
<p id="p-0011" num="0010">Accordingly, embodiments of the present invention provide systems and methods to authorize, provision, and filter virtual device communication. The authorization provides dynamic security and mandatory access control. The provisioning is transparent devices thereby allowing dynamic provisioning. The filtering allows a variety of data filtering function to be applied in a manner transparent to the virtual devices.</p>
<p id="p-0012" num="0011">In one embodiment, the present invention is implemented as a method for authorization management and resource attachment. The method includes receiving, within an electronic system, a notification of an emulated device operable to be provisioned and updating an authorization record of an authorization record datastore. The updating of the authorization record comprises updating routing information related to communication of the emulated device and a virtual device. The method further includes receiving a request for reconnection of the emulated device with the virtual device and determining whether the emulated device and the virtual device are allowed to communicate based on the authorization record datastore. A response to the request for reconnection can then be sent.</p>
<p id="p-0013" num="0012">In another embodiment, the present invention is implemented as a computer readable storage medium having stored thereon, computer executable instructions that, if executed by a computer system cause the computer system to perform a method including receiving, within an electronic system, a notification of an emulated device operable to be provisioned and updating an authorization record of an authorization record datastore. The updating of the authorization record comprises updating routing information related to communication of the emulated device and a virtual device. The method further includes receiving a request for reconnection of the emulated device with the virtual device and determining whether the emulated device and the virtual device are allowed to communicate based on the authorization record datastore. A response to the request for reconnection can then be sent.</p>
<p id="p-0014" num="0013">In yet another embodiment, the present invention is implemented as a storage cluster system comprising a computer system having one or more processors coupled to a computer readable storage media and executing computer readable code which causes the computer system to implement a process including receiving, within an electronic system, a notification of an emulated device operable to be provisioned and updating an authorization record of an authorization record datastore. The updating of the authorization record comprises updating routing information related to communication of the emulated device and a virtual device. The method further includes receiving a request for reconnection of the emulated device with the virtual device and determining whether the emulated device and the virtual device are allowed to communicate based on the authorization record datastore. A response to the request for reconnection can then be sent.</p>
<p id="p-0015" num="0014">The foregoing is a summary and thus contains, by necessity, simplifications, generalizations and omissions of detail; consequently, those skilled in the art will appreciate that the summary is illustrative only and is not intended to be in any way limiting. Other aspects, inventive features, and advantages of the present invention, as defined solely by the claims, will become apparent in the non-limiting detailed description set forth below.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0006" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. 1</figref> shows a block diagram of an exemplary operating environment, in accordance with one embodiment of the present invention.</p>
<p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. 2</figref> shows a block diagram of an exemplary virtual environment, in accordance with one embodiment of the present invention.</p>
<p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. 3</figref> shows a block diagram of exemplary guest components, in accordance with one embodiment of the present invention.</p>
<p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. 4</figref> shows a block diagram of an exemplary filtering configuration, in accordance with one embodiment of the present invention.</p>
<p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. 5</figref> shows a block diagram of exemplary hypervisor and guest components, in accordance with another embodiment of the present invention.</p>
<p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. 6</figref> shows a block diagram of exemplary hypervisor and guest components after the provisioning of a device, in accordance with another embodiment of the present invention.</p>
<p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. 7</figref> shows a block diagram of exemplary kernel based virtual machine (KVM) and guest components, in accordance with another embodiment of the present invention.</p>
<p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. 8</figref> shows an exemplary flowchart of computer controlled processes for facilitating communication in a virtual environment, in accordance with embodiments of the present invention.</p>
<p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. 9</figref> shows an exemplary flowchart of computer controlled processes for virtual device provisioning, in accordance with embodiments of the present invention.</p>
<p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. 10</figref> shows an exemplary flowchart of computer controlled processes for setting up data filtering, in accordance with embodiments of the present invention.</p>
<p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. 11</figref> shows a block diagram of an exemplary computer system, in accordance with one embodiment of the present invention.</p>
<p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. 12</figref> shows a block diagram of another exemplary computer system, in accordance with one embodiment of the present invention.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0007" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0028" num="0027">Reference will now be made in detail to various embodiments in accordance with the invention, examples of which are illustrated in the accompanying drawings. While the invention will be described in conjunction with various embodiments, it will be understood that these various embodiments are not intended to limit the invention. On the contrary, the invention is intended to cover alternatives, modifications, and equivalents, which may be included within the scope of the invention as construed according to the appended Claims. Furthermore, in the following detailed description of various embodiments in accordance with the invention, numerous specific details are set forth in order to provide a thorough understanding of the invention. However, it will be evident to one of ordinary skill in the art that the invention may be practiced without these specific details. In other instances, well known methods, procedures, components, and circuits have not been described in detail to avoid unnecessarily obscuring aspects of the invention.</p>
<p id="p-0029" num="0028">Some portions of the detailed descriptions that follow are presented in terms of procedures, logic blocks, processing, and other symbolic representations of operations on data bits within a computer memory. These descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. In the present application, a procedure, logic block, process, or the like, is conceived to be a self-consistent sequence of operations or steps or instructions leading to a desired result. The operations or steps are those utilizing physical manipulations of physical quantities. Usually, although not necessarily, these quantities take the form of electrical or magnetic signals capable of being stored, transferred, combined, compared, and otherwise manipulated in a computer system or computing device. It has proven convenient at times, principally for reasons of common usage, to refer to these signals as transactions, bits, values, elements, symbols, characters, samples, pixels, or the like.</p>
<p id="p-0030" num="0029">It should be borne in mind, however, that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussions, it is appreciated that throughout the present disclosure, discussions utilizing terms such as &#x201c;deactivating,&#x201d; &#x201c;disabling,&#x201d; &#x201c;freezing,&#x201d; &#x201c;re-activating,&#x201d; &#x201c;enabling,&#x201d; &#x201c;thawing,&#x201d; &#x201c;sending,&#x201d; &#x201c;determining,&#x201d; &#x201c;flushing,&#x201d; &#x201c;responding,&#x201d; &#x201c;generating,&#x201d; &#x201c;making,&#x201d; &#x201c;blocking,&#x201d; &#x201c;accessing,&#x201d; &#x201c;taking a snapshot,&#x201d; &#x201c;associating,&#x201d; &#x201c;allowing,&#x201d; &#x201c;updating,&#x201d; or the like, refer to actions and processes of a computer system or similar electronic computing device or processor. The computer system or similar electronic computing device manipulates and transforms data represented as physical (electronic) quantities within the computer system memories, registers or other such information storage, transmission or display devices.</p>
<p id="p-0031" num="0030">It is that appreciated present systems and methods can be implemented in a variety of architectures and configurations. For example, present systems and methods can be implemented as part of a distributed computing environment, a cloud computing environment, a client server environment, etc. Embodiments described herein may be discussed in the general context of computer-executable instructions residing on some form of computer-readable storage medium, such as program modules, executed by one or more computers, computing devices, or other devices. By way of example, and not limitation, computer-readable storage media may comprise computer storage media and communication media. Generally, program modules include routines, programs, objects, components, data structures, etc., that perform particular tasks or implement particular abstract data types. The functionality of the program modules may be combined or distributed as desired in various embodiments.</p>
<p id="p-0032" num="0031">Computer storage media can include volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer-readable instructions, data structures, program modules, or other data. Computer storage media can include, but is not limited to, random access memory (RAM), read only memory (ROM), electrically erasable programmable ROM (EEPROM), flash memory, or other memory technology, compact disk ROM (CD-ROM), digital versatile disks (DVDs) or other optical storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium that can be used to store the desired information and that can be accessed to retrieve that information.</p>
<p id="p-0033" num="0032">Communication media can embody computer-executable instructions, data structures, program modules, or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term &#x201c;modulated data signal&#x201d; means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media can include wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, radio frequency (RF), infrared and other wireless media. Combinations of any of the above can also be included within the scope of computer-readable storage media.</p>
<heading id="h-0008" level="1">Exemplary Operating Environment</heading>
<p id="p-0034" num="0033"><figref idref="DRAWINGS">FIG. 1</figref> shows a block diagram of an exemplary operating environment, in accordance with one embodiment of the present invention. Exemplary operating environment <b>100</b> includes clients <b>102</b><i>a</i>-<i>c</i>, networks <b>104</b>, servers <b>106</b><i>a</i>-<i>b</i>, storage area network (SAN) fabric <b>108</b>, and storage arrays <b>110</b><i>a</i>-<i>b</i>. It is appreciated that that components of exemplary operating environment <b>100</b> are exemplary and more or fewer components may be present in various configurations. It is appreciated that operating environment may be part of a distributed computing environment, a cloud computing environment, a client server environment, etc.</p>
<p id="p-0035" num="0034">Client systems <b>102</b><i>a</i>-<i>c </i>access information on storage arrays <b>110</b><i>a</i>-<i>b </i>via servers <b>106</b><i>a</i>-<i>b </i>using, for example, a web browser or other suitable client communication software (not shown). <figref idref="DRAWINGS">FIG. 1</figref> depicts the use of a network <b>104</b> such as the Internet for exchanging data, but the present disclosure is not limited to the Internet or any particular network-based environment.</p>
<p id="p-0036" num="0035">Each of servers <b>106</b><i>a</i>-<i>b </i>can have multiple clients (e.g., clients <b>102</b><i>a</i>-<i>c</i>) connected thereto. Servers <b>106</b><i>a</i>-<i>b </i>can be a variety of server types including, but not limited to, database servers, network file system (NFS) servers, and application servers (e.g., billing). For example, applications and servers might have thousands of people accessing them from different locations, thus the applications and servers need to be highly available and the cluster fault tolerant. In some embodiments, servers <b>106</b><i>a</i>-<i>b </i>have access to shared storage of storage arrays <b>110</b><i>a</i>-<i>b </i>with each of servers <b>106</b><i>a</i>-<i>b </i>having its own respective clustered file system and its own built-in lock manager thereby allowing servers <b>106</b><i>a</i>-<i>b </i>to access the shared storage. Each of servers <b>106</b><i>a</i>-<i>b </i>may communicate with each other over a network (e.g., a redundant private network) (not shown). Servers <b>106</b><i>a</i>-<i>b </i>may be linked to storage arrays <b>110</b><i>a</i>-<i>b </i>in a variety of ways including, fibre channel.</p>
<p id="p-0037" num="0036">Servers <b>106</b><i>a </i>and <b>106</b><i>c </i>respectively execute virtual transport managers <b>112</b><i>a</i>-<i>b </i>which manage virtual transport and authorization of communication between virtual machines and virtual devices of servers <b>106</b><i>a</i>-<i>c</i>. Virtual transport managers <b>112</b><i>a</i>-<i>b </i>are further operable to abstract devices and other resources with respect to virtual machines on servers <b>106</b><i>a</i>-<i>c</i>. Virtual transport managers <b>112</b><i>a</i>-<i>b </i>may also present resources of from different servers to each of servers <b>106</b><i>a</i>-<i>c</i>. Each resource presented via virtual transport managers <b>112</b><i>a</i>-<i>b </i>in conjunction with virtual transport module <b>114</b> is treated as a remotable resource such that resource changes are transparent to virtual machines running on servers <b>106</b><i>a</i>-<i>c. </i></p>
<p id="p-0038" num="0037">Virtual transport manager <b>112</b><i>b </i>is communicatively coupled with virtual transport module <b>114</b>. In one embodiment, virtual transport managers <b>112</b><i>a</i>-<i>b </i>are operable to manage and authorize virtual devices of other systems. For example, virtual transport manager <b>112</b><i>b </i>manages virtual transport and authorization of devices between virtual machines and virtual devices of server <b>106</b><i>b </i>via virtual transport module <b>114</b>.</p>
<p id="p-0039" num="0038"><figref idref="DRAWINGS">FIG. 2</figref> shows a block diagram of an exemplary virtual environment, in accordance with one embodiment of the present invention. Exemplary virtual environment <b>200</b> includes hypervisor <b>204</b> and virtual machines <b>208</b>-<b>212</b>. Components of exemplary virtual environment <b>200</b> may execute on or otherwise be part of computing systems (e.g., servers <b>106</b><i>a</i>-<i>c </i>and computing system <b>1000</b>).</p>
<p id="p-0040" num="0039">Hypervisor <b>204</b> interfaces with hardware <b>202</b> (e.g., of servers <b>106</b><i>a</i>-<i>c </i>or computing system <b>1000</b>) and provides resources and services to virtual machines <b>208</b>-<b>212</b>. In one embodiment, hypervisor <b>204</b> is part of a trusted computing base (TCB). Hypervisor <b>204</b> includes virtual transport module <b>212</b> and virtual transport manager <b>206</b>. Virtual transport manager <b>204</b> in conjunction with virtual transport <b>212</b> and virtual transport modules <b>214</b><i>a</i>-<i>c</i>, of virtual machines <b>208</b>-<b>212</b>, provide abstractions including emulated devices of resources in hardware <b>202</b> to virtual machines <b>208</b>-<b>212</b>.</p>
<p id="p-0041" num="0040">In one embodiment, virtual transport module <b>212</b> and virtual transport manager <b>206</b> provide an independent input/output (IO) abstraction layer to abstract the physical IO bus from virtual machines <b>208</b>-<b>212</b> which allows implementation of controls over IO abstraction layer. Virtual transport module <b>212</b> provides emulated devices or abstractions of resources of hardware <b>202</b>. Virtual transport manager <b>206</b> and virtual transport module <b>212</b> support a variety of functions including data filtering, device remoting or provisioning, and security through authorization of connections between virtual machines <b>208</b>-<b>212</b> and abstractions of resources of hardware <b>202</b>.</p>
<p id="p-0042" num="0041"><figref idref="DRAWINGS">FIG. 3</figref> shows a block diagram of exemplary guest components, in accordance with one embodiment of the present invention. <figref idref="DRAWINGS">FIG. 3</figref> shows a peer to peer, or guest to guest connection. In guest to guest communications, a guest substitutes for the hardware resource backed virtual device. All endpoints guest or hardware resource backed have security profiles, are identified by UUID's and are subject to the Authorization Manager's security policy. Diagram <b>300</b> includes hypervisor <b>304</b> and virtual machines <b>308</b>-<b>310</b>. Hypervisor <b>304</b> includes virtual transport manager <b>306</b>. In one embodiment, hypervisor <b>304</b> is part of a trusted computing base (TCB).</p>
<p id="p-0043" num="0042">Virtual transport manager <b>306</b> includes authorization manager <b>312</b>. Guests <b>308</b> and <b>310</b> include shared memory queues <b>314</b><i>a</i>-<i>b</i>, virtual transport message devices <b>316</b><i>a</i>-<i>b</i>, and virtual transport bus modules <b>318</b><i>a</i>-<i>b</i>, respectively. The virtual transport buses <b>318</b><i>a</i>-<i>b </i>abstract software communication for a device (e.g., virtual transport devices <b>316</b><i>a</i>-<i>b</i>). In one embodiment, the virtual transport bus modules <b>318</b><i>a</i>-<i>b </i>are embedded in hypervisor <b>304</b> and are part of the trusted computing base (TCB). Guests <b>308</b>-<b>310</b> communicate via shared memory queues <b>314</b><i>a</i>-<i>b </i>after authorization manager <b>312</b> checks whether virtual transport message devices <b>316</b><i>a</i>-<i>b </i>are allowed to communicate.</p>
<p id="p-0044" num="0043">Virtual transport manager <b>306</b> provides for a virtual transport and bus subsystem that plugs into hypervisor <b>304</b>. The subsystem provides a means to create emulated devices based on any subset of resources available in the hypervisor <b>304</b> and presents these devices to virtual machines <b>308</b> and <b>310</b>. Endpoints (e.g., virtual machines <b>308</b>-<b>310</b>) are able to request connections allowing the support of services as well as traditional bus plug events. The virtual transport manager is so called because it shields the nature of the transport of data. While it may export a shared memory paradigm, the method of its implementation allows any sort of actual transport, e.g., shared RAM, reflective shared memory, network based emulation for remote endpoints and so on.</p>
<p id="p-0045" num="0044">Virtual transport manager <b>306</b> presents device emulations to virtual machine operating systems in the form of pluggable devices. The emulated devices can be identified, constructed, authorized and configured. These devices can be dynamically attached during runtime at the request of the guest or at the request of a remote endpoint trying to connect to the guest. Either end point is free to refuse a connection.</p>
<p id="p-0046" num="0045">In one embodiment, the virtual transport manager <b>306</b> provides a mechanism to download device emulation libraries. Device emulation libraries can be downloaded at anytime in the virtual machine lifecycle. Device emulation libraries contain virtual device identifiers that are passed during virtual transport bus discovery, thereby making it possible for custom built drivers in a virtual machine to be loaded.</p>
<p id="p-0047" num="0046">In one embodiment, virtual machine <b>308</b> makes an instantiation request to virtual transport bus module <b>318</b><i>a</i>. The request has parameters including for instance device type (e.g., virtual transport message device) and end points (e.g., virtual machines <b>308</b> and <b>310</b>). In one embodiment, the request goes on the virtual transport bus configuration queue. Device instantiation requests or device plug events can be initiated by virtual transport manager <b>306</b> or by the virtual machines <b>308</b> and <b>310</b>. In this way, a virtual machine can request a connection to an endpoint with a particular set of properties. An endpoint can be another guest, or a piece of hardware abstracted by virtual transport manager <b>306</b>. The ability of endpoints to initiate a plugging event allows the capability for supporting dynamic service attachment. In one embodiment, instantiation requests require a response, and no instantiation request can be made while one is outstanding. Thereby, in this way lock-step state update is assured and either side can start a configuration action without contamination from stale information with respect to earlier requests.</p>
<p id="p-0048" num="0047">The authorization manager <b>306</b> provides a front-end to manage resource allocation and communication channels for a virtual machine and its external resources that operates in conjunction with a virtual transport bus. Virtual transport bus <b>318</b><i>a </i>signals authorization manger <b>312</b> with the request parameters to determine if the two end points are authorized to communicate. Authorization manager <b>312</b> checks for an authorization record that matches the device type and the end points. In one embodiment, authorization records allow authorization manager <b>306</b> to provide mandatory access control that is not tied to a specific hypervisor implementation or interface and independent of external hypervisor specific virtual machine interfaces. Authorization records may include routing information, security characteristics of endpoints, and quality of service (QoS) characteristics, including throughput and latency.</p>
<p id="p-0049" num="0048">The endpoints, whether virtual machines or virtual transport manager represented hardware resources are identified by universally unique identifiers (UUIDs). This allows authorization manager <b>306</b> to manipulate endpoints within a global security context. Authorization manger <b>306</b> can also check for connection to remote services and devices and thereby supports automatic routing. As described further herein, authorization manager <b>306</b> is operable to determine whether data filtering is necessary to ensure maintenance of desired security levels.</p>
<p id="p-0050" num="0049">In one embodiment, authorization manager <b>312</b> is a separate entity that has a cache disposed local in the trusted computing base and has access out of the local trusted computing base. The authorization manager <b>312</b> may be co-resident or attached across a secure channel to virtual transport manager <b>306</b>.</p>
<p id="p-0051" num="0050">As further described herein, authorization manager <b>312</b> is operable to manage device connections for a virtual machine and provision devices. Instantiation may be initiated at the end points (e.g., virtual machines) but is controlled through the authorization manager <b>312</b>. The authorization manager determines based on the merits of an instantiation request by reviewing the provisioning record in its database. If no record is found or if the capabilities requested exceed the provisioning record authorization, the request is denied.</p>
<p id="p-0052" num="0051">Upon a match of the parameters of the request with an authorization record, the connection is authorized. Authorization manager <b>312</b> can deny all access that is not explicitly requested. Accordingly, authorization manager <b>312</b> allows access based on if there is an explicit record indicating that the guest and its remote endpoints and the particular type of device are accepted. If all I/O is managed via authorization manager <b>312</b> and the physical devices employed conform to the security profile, authorization manager <b>312</b> can enforce mandatory access control and full level based security between endpoint elements.</p>
<p id="p-0053" num="0052">The connection authorization allows virtual machines <b>308</b> and <b>310</b> to communicate via shared memory queues <b>314</b><i>a</i>-<i>b</i>. In one embodiment, shared memory queues <b>314</b><i>a</i>-<i>b </i>represent a single portion of shared memory used by virtual machines <b>308</b> and <b>310</b> to communicate. In one embodiment, the virtual transport bus emulation is resident in the hypervisor and made visible to the guest via a virtual transport device (e.g., virtual transport message device <b>316</b><i>a</i>) plugged into the virtual machine's system bus.</p>
<heading id="h-0009" level="1">Exemplary Filtering Configuration</heading>
<p id="p-0054" num="0053"><figref idref="DRAWINGS">FIG. 4</figref> shows a block diagram of an exemplary filtering configuration, in accordance with one embodiment of the present invention. In one embodiment, exemplary filtering configuration <b>400</b> is similar to exemplary guest components diagram <b>300</b>. For example, virtual machines <b>408</b>-<b>410</b> and hypervisor <b>404</b> are similar to virtual machines <b>308</b>-<b>310</b> and hypervisor <b>304</b>. One difference to note is that hypervisor <b>404</b> includes filter module <b>420</b> which communicatively couples shared memory queues <b>414</b><i>a</i>-<i>b. </i></p>
<p id="p-0055" num="0054">Embodiments of the present invention provide a transport filter framework to plug system services and data transformations into the IO path of devices exposed through the virtual transport framework. More specifically, embodiments of the present invention are operable to support insertion of device filters in between the endpoints of a virtual transport device connection. The filter insertions are hidden from the driver endpoints and the core device emulation. Virtual transport filters work with any type of virtual transport device, local, remote, or physically backed. A variety of system services may be employed through virtual transport filters and includes data auditing for high end security, virus filtering, authentication and encryption of data, and data compression. That is, filter insertion is transparent to the two end points. Another benefit of the virtual transport approach is in the scalability of hardware support. The individual elements of a software stack can all be executed on a single system or be tied together across a network or bus connections to separate hardware engines.</p>
<p id="p-0056" num="0055">It is appreciated that the mechanism designed to effect filter insertion is different from the mechanism used to connect a remote device. In the remote case, a virtual bus hypervisor module exists at either end and only the manipulation of the transport is involved. In the case of filtering, the data content is subject to transform.</p>
<p id="p-0057" num="0056">Virtual transport offers a mechanism by which filters may be added to a device communication path at any time without the need for forethought on the part of the device emulation or device driver writer. Further, this capability is dynamic. A filter can be added on a running system and a filter can be added on a running driver. Virtual transport accomplishes this by abstracting data transport through its universal shared memory queue mechanism.</p>
<p id="p-0058" num="0057">The virtual transport bus discovery method, the universal transport support, the authentication framework and the routing mechanisms make it possible to insert data filters in the transport path through a rerouting of device driver queue traffic. Any point between virtual transport components that are connected through the queue mechanism can be targeted. Any number of filters may be added to a data path. In one embodiment, filter modules may be written that are specific to a device or group of devices.</p>
<p id="p-0059" num="0058">In one embodiment, filter insertion is based on the substitution of a device emulation when an attempt to plug is made. The policy regarding substitution is carried out via authorization manager <b>412</b> that is consulted by the virtual transport bus emulation. In order to plug a device, an authorization record must exist which matches the endpoints and the device type requested. In addition, authorization manager <b>412</b> can insert record modifiers that indicate that a data filter module should be employed at the direction of auxiliary fields in the authorization record.</p>
<p id="p-0060" num="0059">During an authorization check initiated by an instantiation request, authorization manager <b>412</b> may determine whether communication between virtual machines <b>408</b> and <b>410</b> may need to be filtered (e.g., compressed, audited, encrypted, backup, virus filtering, etc.). For example, where virtual machines <b>408</b> and <b>410</b> are on different security levels (e.g., different networks of different levels of security), filter module <b>420</b> may encrypt the data stream between shared memory queues <b>414</b><i>a</i>-<i>b</i>. Filters allow the administrator to change the characteristics of a device to suit changed data center circumstances without impacting either the device or the virtual machine.</p>
<p id="p-0061" num="0060">In one embodiment, filter insertion is based on access to transport queue content (e.g., shared memory queues <b>414</b><i>a</i>-<i>b</i>) and a wrapping of the virtual transport bus interface routines. These routines include the calls to virtual transport bus services and the callbacks registered by the target's emulated device when its device emulation library is loaded.</p>
<p id="p-0062" num="0061">Filter module insertion into the transport path is made possible by the basic abstraction of the queue. The queue internal structure and protocol can vary therefore a mechanism of filter module <b>420</b> exists to communicate with the queue type. Access to queue library support also extends to filter modules, allowing a filter to access queue data via the virtual transport shared queue library. The filter can determine the types of queue handles associated with the targeted device via the emulated device's discovery routine. In one embodiment, the queue protocol may be changed but the method by which the queue is accessed by the driver and device emulators is fixed in virtual transport interfaces. This allows for changing of queue access libraries.</p>
<p id="p-0063" num="0062">The act of insertion further requires export of the callback table of a device instance to the filter code. At the time the filter module is loaded into the hypervisor, the filter module <b>420</b>'s device library is registered with the virtual transport bus emulation module. One of its actions is to request that the registered callbacks of the device to be filtered. Utilization of the filter may be based on ordered updating of the management controlled virtual transport authorization record that is associated with the targeted device emulations.</p>
<p id="p-0064" num="0063">With an altered authorization record, the filter module device emulation library will now be called on device instantiation instead of the targeted device. Filter callback module routines for create, query, etc., will in turn call the targeted device callbacks appropriately to set up the expected communication paths to the targeted device. The targeted device emulation does not need to be aware that a filter is now between it and the guest, or between it and the remote device.</p>
<p id="p-0065" num="0064">It is a characteristic of the virtual transport bus protocol that all of the callbacks for virtual bus functionally are provided on the device creation call or connection call. This makes it possible for the filter to connect itself to the front or the back of the device. When filter module <b>420</b> is inserted in front (e.g., between the device driver and the targeted device emulation), filter module <b>420</b> filters back the creation, query, and queue registration events. When filter module <b>420</b> is inserted in the back (e.g., between the targeted device and the virtual transport bus), filter module <b>420</b> filters the callbacks provided to the targeted emulation by the virtual bus.</p>
<p id="p-0066" num="0065"><figref idref="DRAWINGS">FIG. 5</figref> shows a block diagram of exemplary hypervisor and guest components, in accordance with another embodiment of the present invention. Diagram <b>500</b> includes hypervisor <b>502</b>, hypervisor <b>504</b>, and virtual machine <b>540</b>. In one embodiment, hypervisors <b>502</b> and <b>504</b> are similar to hypervisor <b>204</b>, <b>304</b>, and <b>404</b>.</p>
<p id="p-0067" num="0066">Virtual machine <b>540</b> includes virtual transport application <b>542</b> and kernel <b>548</b>. Virtual transport application <b>542</b> includes a virtual transport queue library. Kernel <b>548</b> includes virtual transport shared memory buffer <b>550</b>, virtual transport device driver <b>522</b>, and virtual transport bus driver <b>554</b>.</p>
<p id="p-0068" num="0067">Hypervisor <b>502</b> includes virtual transport manager <b>504</b> and is communicatively coupled to hardware resource <b>524</b> and hypervisor <b>504</b>. Hypervisor <b>504</b> includes virtual transport manager <b>530</b> and is communicatively coupled to hypervisor <b>504</b> and hardware resource <b>528</b>. Hypervisor <b>504</b> may reside on a separate computing system.</p>
<p id="p-0069" num="0068">Virtual transport manager <b>504</b> includes authorization manager <b>510</b>, virtual transport bus module <b>506</b>, virtual transport library interface <b>514</b>, virtual transport device module <b>516</b>, virtual transport device instances <b>518</b><i>a</i>-<i>b</i>, and device driver <b>522</b>. As described herein, authorization manager <b>510</b> uses authorization records <b>512</b> to determine whether to authorize connections between end points. For example, virtual machine <b>540</b> issues an instantiation request via virtual transport application <b>542</b> which signals virtual transport device driver <b>552</b>. In one embodiment, the instantiation request includes the UUID of virtual machine <b>540</b> as a first endpoint, virtual transport device instance <b>518</b><i>b </i>as a second endpoint, and a device type corresponding to virtual transport device instance <b>518</b><i>b</i>. Virtual transport device driver <b>552</b> sends the instantiation request to virtual transport bus driver <b>554</b> which sends the instantiation request virtual transport bus module <b>506</b>. Virtual transport bus module <b>506</b> sends the instantiation request to authorization manager <b>510</b> which checks the parameters of the instantiation request against authorization records <b>512</b>. If no authorization record matching the instantiation request is found, the instantiation request is denied.</p>
<p id="p-0070" num="0069">Upon finding a record matching the parameters of the instantiation request, authorization manager <b>510</b> signals that the virtual transport application <b>542</b> can communicate with virtual transport device instance <b>518</b><i>b</i>. Virtual machine <b>540</b> then sets up virtual transport shared memory buffer <b>550</b> which is used to communicate with the virtual transport device instance <b>518</b><i>b </i>via shared memory buffer <b>520</b><i>b</i>. In one embodiment, virtual transport shared memory buffer <b>550</b> and shared memory buffer <b>520</b><i>b </i>are the same portion of shared memory. Requests (e.g., &#x201c;get&#x201d; and &#x201c;put&#x201d; requests) are sent from virtual transport application <b>542</b> with the use of virtual transport queue library <b>544</b>. The requests are transferred via virtual transport shared memory buffer <b>550</b> and shared memory buffer <b>520</b><i>b</i>. The request then travel to device driver <b>522</b> and then to hardware resource <b>524</b>.</p>
<p id="p-0071" num="0070">In one embodiment, shared memory queues are set up between the virtual transport bus driver <b>554</b> and the virtual transport bus module <b>506</b> in hypervisor <b>502</b> during the bus discovery actions (e.g., instantiation request). Via use of shared memory buffers <b>550</b> and <b>520</b><i>b</i>, each virtual machine coupled to virtual transport manager <b>504</b> has a dedicated communication channel apparatus within the virtual transport manager <b>504</b>. Virtual machine <b>540</b> sends device requests such as device create or instantiation requests, device destroy, and a bus state transition request detailing the nature of virtual machine <b>540</b>'s connection to the bus.</p>
<p id="p-0072" num="0071">Virtual transport manger <b>504</b> is unique in its communication abstraction of between the device and the virtual transport bus. The resources used for communication include communication buffers (e.g., shared memory), interrupts, and signals. These resources are used as the base functionality to export a list of interfaces that isolate virtual transport devices from the hypervisor implementations on which the virtual transport bus emulation resides. Virtual transport also supports a device emulation abstraction that allows third parties to develop device emulations that can be downloaded into the virtual bus. For example, device emulation libraries maybe downloaded into virtual transport library interface <b>514</b>. All device code written on top of virtual transport manager <b>504</b> is independent of hypervisor functions for guest to hypevisor communication.</p>
<p id="p-0073" num="0072">In one embodiment, each virtual transport device emulation communication with virtual machine <b>540</b> is based on shared memory, or device memory buffers except for virtual bus configuration actions. The queue mechanisms are discovered via an extended virtual bus/device discovery mechanism. Interrupts and signals are all abstracted by the virtual transport bus module <b>506</b> which provides bus emulation. In this way, virtual transport device emulations are isolated from hypervisor guest communication implementations.</p>
<p id="p-0074" num="0073">The queue protocols sitting inside of the shared buffers are driver specific, though a mechanism to initialize these queues is supported. In the default queue library support, virtual transport establishes a set of queue access conventions. In this manner, the general queue abstraction can be used to support all manner of shared memory and device memory queue protocols without requiring changes to the guest's application services.</p>
<p id="p-0075" num="0074">The virtual transport bus card emulation of virtual transport device instance <b>518</b><i>b </i>has a shared memory buffer <b>520</b><i>b </i>communication channel that is opened by virtual transport device driver <b>552</b> in the virtual machine <b>540</b>. Requests to create new virtual devices are passed though the shared memory buffer <b>520</b><i>b </i>communication channel. Virtual transport device driver <b>552</b> in virtual machine <b>540</b> sends a request and virtual transport bus module <b>506</b> provides the emulations and connections to hardware. The device emulations of virtual transport bus <b>506</b> are manifested through shared memory queues, interrupt driven callbacks, and virtual transport bus resident signals.</p>
<p id="p-0076" num="0075">As both virtual transport bus module <b>506</b> and authorization manager <b>510</b> are in the trusted computing base of hypervisor <b>502</b>, communication between virtual transport bus module <b>506</b> and authorization manger <b>510</b> is over a secure connection. Accordingly, the authorization activity meets the criteria of secure mandatory access control. In one embodiment, authorization manager <b>510</b> is not tied to hypervisor <b>502</b> and only interacts with the virtual transport bus module.</p>
<p id="p-0077" num="0076">In one embodiment, an effective method of communication with low overhead is a variant on a shared memory queue with a signal. The shared queue variant may be implemented in an indefinite variety of styles but optimal versions have certain characteristics including support for streaming data where steady state transfers do not require a signal and accesses to receivers and senders are reduced to &#x2018;get&#x2019; and &#x2018;put&#x2019; interfaces.</p>
<p id="p-0078" num="0077">Since the virtual transport device driver <b>552</b> is shielded from the queue format, it is possible for virtual transport device driver <b>552</b> to support a variety of queue implementations by selecting different queue libraries. The queue library can be chosen at device discovery time. Using this method, a filter module is able to signal to a virtual transport device driver through the discovery mechanism about which queue library to load. For many devices the library may not need to substitute queue implementations, but for the cases where it is necessary, the queue abstraction preserves component isolation.</p>
<p id="p-0079" num="0078">Virtual transport library interface <b>514</b> and virtual transport device module <b>516</b> facilitate adding new devices. In one embodiment, downloads into hypervisor <b>502</b> may be done to add device libraries to the virtual transport bus module <b>506</b> via downloads into virtual transport library interface <b>514</b>. The device libraries of virtual transport library interface <b>514</b> are available as soon as the virtual transport device instance <b>518</b><i>b </i>calls the virtual transport bus module <b>506</b> to register its call back table.</p>
<p id="p-0080" num="0079">In one embodiment, authorization manager <b>512</b> is a separate service. Authorization manager <b>510</b> exports interfaces for remote virtual transport provisioning and management of throughput and latency characteristics of provisioned devices. Further, authorization manager <b>510</b> models its security on the notion of a virtual machine as a black box with input/output (IO) determined by tightly defined security analysis of the remote endpoints. Authorization manager <b>510</b> provides mandatory access control by identifying all endpoints and labeling them. It is noted that since all endpoint/device pairings require an explicit authorization record in authorization records <b>512</b>, the virtual transport subsystem satisfies the strictest security criteria.</p>
<heading id="h-0010" level="1">Exemplary Device Provisioning</heading>
<p id="p-0081" num="0080"><figref idref="DRAWINGS">FIG. 6</figref> shows a block diagram of exemplary hypervisor and guest components after provisioning of a device, in accordance with another embodiment of the present invention. Embodiments of the present invention are operable to perform transparent redirection of device provisioning to support remote provisioning. The remote provisioning may occur for instance when virtual machines are migrated among systems (e.g., migrated among hypervisors) or based on a need to change usage to different resources (e.g., administrator decisions, load balancing, etc.).</p>
<p id="p-0082" num="0081">In one embodiment, diagram <b>600</b> of exemplary hypervisor and guest components is similar to diagram <b>500</b> of exemplary hypervisor and guest components except that virtual transport shared memory buffer <b>550</b> of virtual machine <b>540</b> is communicatively coupled to virtual transport device instance <b>518</b><i>a </i>via shared memory buffer <b>520</b><i>b</i>. Remote hardware resource <b>528</b> was substituted for the hardware resource <b>524</b>.</p>
<p id="p-0083" num="0082">Embodiments of the present invention uniformly represent local and distributed resources to a virtual machine. These resources may be interchanged while a virtual machine is running in a transparent manner to the virtual machine. Accordingly, embodiments of the present invention make it possible to isolate the individual components of a device emulation stack, while providing effective performance for any particular device emulation resource pairing and allowing components to be reused through shared queue linkage of mixed and matched elements.</p>
<p id="p-0084" num="0083">The elements making this level of abstraction possible are the universal transport mechanism and the extended abstract bus with built in authorization manager <b>510</b>. Since the authorization manager <b>510</b> is a system management entity, additional capabilities such as the substitution of device emulation modules and subsequent routing are possible.</p>
<p id="p-0085" num="0084">The uniform virtual transport mechanisms and the interplay between the virtual transport and the discovery mechanism allow for the seamless substitution of queue protocols where needed. Universal virtual transport implementations include support of a variety of queue protocol libraries. These libraries take hardware or software based queue formats and map them to a set of virtual transport specific commands for reading, writing, signaling, and waiting etc. Libraries for queue support reside within the virtual machine and within the compile environments of virtual transport device emulations. This allows for an enhanced level of mixing and matching of individual components while delivering high level performance in end-to-end implementations.</p>
<p id="p-0086" num="0085">In one embodiment, virtual transport can model dynamic system topological changes and methods of data transport, making it possible to wrap all systems of transport with a common mechanism. Based on the architecture and implementation of virtual transport, it is possible to dynamically shift an underlying resource associated with a device provisioned for a virtual machine from 1) a local bus attached physical entity to 2) a resource available through a packet switched network. This switch may be accomplished within the authorization manager <b>510</b>. Embodiments of the present invention are operable to integrate bus and network routing. Such automatic routing is an important element for tight integration of virtual mediated resources in a distributed data center. In one embodiment, this integration allows management of quality of service (QoS) across remote connections and facilitates fail-over and exception handling. The conversion can take place on a running virtual machine and is transparent above the level of the virtual transport device discovery mechanism. Since the virtual transport abstracts network devices as transport objects, routing is supported as a unified transport management function. The abstractions make it possible to track throughput and latency from endpoint to endpoint.</p>
<p id="p-0087" num="0086">Embodiments of the present invention allow for a number of generic distributed device connection modules to be built for the virtual transport framework, including one for standard IP network connection. For example, a virtual transport emulated direct disk device may have a means of connecting to a standard IP network connection module making it unnecessary to write from scratch an entire virtual transport emulated distributed disk implementation for the network. In this manner, emulations for fiber channel, SCSI, or other protocols can share the common transport module when accessing storage across an IP network connection.</p>
<p id="p-0088" num="0087">Embodiments of the present invention further support remoting of devices when a virtual machine is migrated. For example, if virtual machine <b>540</b> is communicatively coupled to hypervisor <b>502</b> and uses hardware resource <b>524</b>, when virtual machine <b>540</b> is migrated and is now communicatively coupled to hypervisor <b>504</b>, virtual machine <b>540</b> may continue to use hardware resource <b>524</b> via virtual transport manager <b>530</b>.</p>
<p id="p-0089" num="0088">Virtual transport bus module <b>506</b> consults the authorization manager <b>510</b> when a device plugging request or device instantiation request is received. Authorization records <b>512</b> can include network topology and routing information. If one of the endpoints (e.g., service endpoint) is remote, authorization records <b>512</b> will have the information needed to direct the communication path to the remote resource.</p>
<p id="p-0090" num="0089">Authorization records <b>512</b> are updated by authorization manager <b>510</b> when either endpoint of an existing authorization record is moved (e.g., a virtual machine migration or local or remote resource substitution). Embodiments of the present invention thus shield virtual machines from changes of the end points. In one embodiment, the virtual transport bus module <b>506</b> of hypervisor <b>502</b> may be involved to the extent that hypervisor <b>502</b> may call a bridge device for connection with the provisioning record information rather than connecting to a local guest or the hypervisor local resources.</p>
<p id="p-0091" num="0090">For example, a virtual machine may be using storage directly attached to the platform (e.g., computing system executing the hypervisor providing resources to the virtual machine) on which the virtual machine resides. In this case, the virtual transport disk device communicates directly to the disk hardware or the disk driver. If the virtual machine is migrated via the management layer to another platform, the connection to the disk would now be across a network attaching the new and old platforms.</p>
<p id="p-0092" num="0091">Migration of a virtual machine is a virtual data center level management activity supported by embodiments of the present invention as is resource remoting (e.g., transfer of resources usage to another computing system). At a virtual data center level, management resources of the data center are known. Virtual transport thus plays a role by identifying the device resources of individual platforms in a uniform way.</p>
<p id="p-0093" num="0092">When a set of resources is determined upon for a virtual machine, authorization manger <b>510</b> is notified of the emulated devices (e.g., virtual transport device instances <b>518</b><i>a</i>-<i>b</i>) and corresponding backing resources (e.g., hardware resources <b>524</b> and <b>528</b>) that are to be provisioned. As migration is initiated, virtual transport bus module <b>506</b> sends a suspend signal to virtual transport device instances <b>518</b><i>a</i>-<i>b </i>and data IO actions are completed. Then virtual transport device driver <b>552</b> goes into a suspended state.</p>
<p id="p-0094" num="0093">In the case of a remote storage connection, the authorization manager <b>510</b> writes an authorization record for the migrated virtual machines <b>540</b>'s disk access device (e.g., virtual transport device instance <b>518</b><i>b</i>). This authorization record indicates an alternative device emulation implementation (e.g., virtual transport device instance <b>518</b><i>a</i>) and has a handle to the initialization record. Authorization manager <b>510</b> further updates the authorization record to reflect new routing of the alternative device emulation implementation.</p>
<p id="p-0095" num="0094">At the time of provisioning, virtual transport bus module <b>506</b> signals authorization manager <b>510</b> for reconnection. In one embodiment, authorization manager <b>510</b> accesses the provisioning record and examines the distributed device configuration options. Authorization manager <b>510</b> accesses authorization records <b>512</b> and based on a match signals virtual transport bus module to load the alternate device emulation. The alternative device is placed in the virtual transport bus slots <b>508</b> and a resume command is signaled to virtual transport device driver <b>522</b>. As part of the recovery, the virtual transport driver <b>552</b> goes through the extended discovery mechanism to recognize any queue differences. The device discovery mechanism that is triggered during resume or reconnection allows for the transparent switch between different queue protocols, enabling one device driver in virtual machine <b>540</b> to service a class of device emulations without the knowledge of the broader operating system on the virtual machine. In some cases, the optimal solution may involve a different underlying queue protocol. The virtual transport device driver <b>552</b> links the proper queue protocol library (e.g., virtual transport queue library) and continues to initialize and run as in the local case.</p>
<heading id="h-0011" level="1">Exemplary Kernel Based Virtual Machine (KVM) Configuration</heading>
<p id="p-0096" num="0095"><figref idref="DRAWINGS">FIG. 7</figref> shows a block diagram of exemplary kernel based virtual machine (KVM) and guest components, in accordance with another embodiment of the present invention. Virtual machines <b>708</b> and <b>710</b> are communicatively coupled with Linux base kernel <b>702</b>. In one embodiment, Linux base kernel <b>702</b> is operable to function as a hypervisor. Diagram <b>700</b> illustrates a KVM configuration with virtual machines <b>708</b> and <b>710</b> accessing a storage medium (e.g., disk driver, storage array, etc.) via Linux kernel base <b>702</b>. It is appreciated that KVM embodiments may access a variety of hardware resources.</p>
<p id="p-0097" num="0096">Virtual machines <b>708</b> and <b>710</b> include user space applications <b>714</b><i>a</i>-<i>b</i>, and kernels <b>720</b><i>a</i>-<i>b</i>. Kernels <b>720</b><i>a</i>-<i>b </i>include disk driver front ends <b>722</b><i>a</i>-<i>b</i>, virtual transport device controllers <b>724</b><i>a</i>-<i>b</i>, and virtual transport shared memory queues <b>726</b><i>a</i>-<i>b</i>. User space applications <b>714</b><i>a</i>-<i>b </i>send storage requests to disk driver front ends <b>722</b><i>a</i>-<i>b </i>which forward the requests to virtual transport device controllers <b>724</b><i>a</i>-<i>b</i>. Virtual transport device controllers <b>724</b><i>a</i>-<i>b </i>then send the storage requests to Linux base kernel <b>702</b> via virtual transport shared memory queues <b>726</b><i>a</i>-<i>b</i>. In one embodiment, Linux base kernel <b>702</b> is part of a trusted computing base.</p>
<p id="p-0098" num="0097">Linux base kernel <b>702</b> includes KVM kernel module <b>704</b>, virtual transport base KVM driver <b>706</b>, virtual transport shared memory queues <b>730</b><i>a</i>-<i>b</i>, virtual transport backs <b>732</b><i>a</i>-<i>b</i>, Linux disk driver <b>734</b>, and filter module <b>750</b>. KVM kernel module <b>704</b> provides virtualization infrastructure for virtual transport based KVM driver <b>706</b> and virtual machines <b>708</b> and <b>710</b>. In one embodiment, virtual transport base KVM driver <b>706</b> is a module downloadable into Linux base kernel <b>702</b> and communicates with Linux base kernel <b>702</b> resources and virtual transport components. Virtual transport base KVM driver <b>702</b> thus facilitates direct communication between emulated devices in Linux base kernel <b>702</b> and virtual machines <b>708</b> and <b>710</b>. Virtual transport base KVM driver <b>706</b> thus acts as an intermediary between virtual machines <b>708</b>-<b>710</b> and KVM kernel module <b>704</b>. Embodiments of the present invention are able to use interfaces of Linux base kernel <b>702</b> without use of KVM interfaces. In one embodiment, virtual transport base KVM driver <b>706</b> is operable to interface with a plurality of different hypervisors.</p>
<p id="p-0099" num="0098">In one embodiment, user space applications <b>714</b><i>a</i>-<i>b </i>include virtual transport shared memory queues that can be used to bypass kernels <b>720</b><i>a</i>-<i>b </i>and signal KVM kernel module <b>704</b> where the requests are directed to storage medium <b>740</b>. Bypassing kernels <b>720</b><i>a</i>-<i>b </i>may be done using of a callback from userspace.</p>
<p id="p-0100" num="0099">Authorization manager <b>712</b> is operable to provide authorization of connection requests or instantiation requests thereby providing mandatory access control for communication connections. Authorization manager <b>712</b> is operable to perform functions related to security, provisioning, and filtering, as described herein. In one embodiment, filter module <b>750</b> was inserted via modification of an authorization record by authorization manager <b>712</b>, as described herein.</p>
<heading id="h-0012" level="1">Exemplary Processes</heading>
<p id="p-0101" num="0100"><figref idref="DRAWINGS">FIG. 8</figref> shows an exemplary flowchart of processes for facilitating communication in a virtual environment, in accordance with embodiments of the present invention. In one embodiment, the processes of flowchart <b>800</b> are performed by an authorization manager.</p>
<p id="p-0102" num="0101">At block <b>802</b>, an instantiation request is received for a first device. Authorization records can be created prior to starting a virtual machine as resources and a UUID are assigned to a virtual machine. The UUID identifies this unique guest in terms of what storage may be available to it, what basic devices are available to it, the size of memory that it needs and the state when in a non-running condition and in a non-instantiated state. In one embodiment, the UUID identifies the image of the virtual machine. As described herein, the instantiation request may include parameters such as the end points (e.g., virtual machines or a virtual machine and hypervisor based resource) and the device type (e.g., virtual transport message device or virtual transport disk device). The instantiation request may initiate from a virtual machine manager (e.g., virtual transport manager <b>206</b>) or a task setting up virtual machines.</p>
<p id="p-0103" num="0102">At block <b>804</b>, an authorization record datastore is accessed. As described herein, the authorization record datastore may be accessed from a cache local to an authorization manager. The authorization datastore is created, manipulated, maintained, and cached at each of the platforms that have a virtual bus module.</p>
<p id="p-0104" num="0103">At block <b>806</b>, whether the first device and a second device are allowed to communicate based on the authorization record datastore is determined. The request for instantiation is checked against a cached version or other version of the authorization database. As described herein, the parameters of the instantiation request are checked against authorization records.</p>
<p id="p-0105" num="0104">Authorization to communicate may be denied for a variety of reasons based on the characteristics of the endpoints. For example, where there is a loosely secured network with a low level for a particular virtual machine, the virtual machine may be denied access to that device based on the fact that security cannot be controlled enough once the virtual machine gets on the network. The two endpoints represent the basic levels of security that can be supported.</p>
<p id="p-0106" num="0105">At block <b>808</b>, a response to the instantiation request is sent. If there is an authorization record matching the instantiation request parameters, the instantiation request will be allowed, otherwise the instantiation request will fail. Where the instantiation request is authorized, the response allows completion of device instantiation and connection of the device to a virtual bus.</p>
<p id="p-0107" num="0106"><figref idref="DRAWINGS">FIG. 9</figref> shows an exemplary flowchart of processes for virtual device provisioning, in accordance with embodiments of the present invention. In one embodiment, the processes of flowchart <b>900</b> are performed by an authorization manager. The processes of flowchart <b>900</b> may be performed upon virtual machine migration or substitution (e.g., remoting) of resources.</p>
<p id="p-0108" num="0107">At block <b>902</b>, a notification of an emulated device operable to be provisioned is received within an electronic system.</p>
<p id="p-0109" num="0108">At block <b>904</b>, an authorization record of an authorization record datastore is updated. The updating of the authorization record comprises updating routing information related to communication of the emulated device and a virtual device. In one embodiment, the authorization record is cached local to the emulated device (e.g., in a hypervisor or trusted computing base). In one embodiment, the routing information reflects the routing at a local level since the caches is accessed at a local level for local action.</p>
<p id="p-0110" num="0109">Embodiments of the present invention allow data to be streamed directly to the device or stream data directly to a channel that takes it off the platform and goes to the correct device. The channel could be a network, fiber channel, InfiniBand (IB) as long as the data is capable of being routed to the ultimate platform. As described herein, authorization records are used to facilitate routing, device insertion, auditing, compression, back up, virus filtering, and securing data streams by encryption.</p>
<p id="p-0111" num="0110">At block <b>906</b>, a request for instantiation or reconnection of the emulated device with the virtual device is received.</p>
<p id="p-0112" num="0111">At block <b>908</b>, it is determined whether the emulated device and the virtual device are allowed to communicate based on the authorization record datastore based on the existence and contents of a matching authorization record. As described herein, whether or not the authorization record is created and the exact nature of its contents depends on the respective security levels of the emulated device and the guest virtual device.</p>
<p id="p-0113" num="0112">The emulated device can be disposed remotely from a virtual machine that is communicatively coupled to the virtual device. In one embodiment, the emulated device is operable to be provisioned based on a migration of a virtual machine. The emulated device and the guest virtual device further can be communicatively coupled via a shared memory queue. In one embodiment, the emulated device and the virtual device communicatively couple a first virtual machine and a second virtual machine.</p>
<p id="p-0114" num="0113">At block <b>910</b>, it is determined whether to insert a filter based on the authorization record. In one embodiment, the contents of the authorization record regarding filtering, and other authorization record contents, are based on the security dispositions of the two endpoints and the external policy made by the authorization manager at the time of the creation of the authorization record.</p>
<p id="p-0115" num="0114">At block <b>912</b>, a response to the request for instantiation or reconnection is sent. The emulated device may then load or reconnect and resume thereby providing access to the underlying resource.</p>
<p id="p-0116" num="0115"><figref idref="DRAWINGS">FIG. 10</figref> shows an exemplary flowchart of processes for setting up data filtering, in accordance with embodiments of the present invention. In one embodiment, the processes of flowchart <b>1000</b> are performed by an authorization manager.</p>
<p id="p-0117" num="0116">At block <b>1002</b>, an instantiation request for a first virtual device is received within an electronic system. As described herein, the instantiation request may be received by a virtual transport bus which sends the instantiation request to an authorization manager.</p>
<p id="p-0118" num="0117">At block <b>1004</b>, it is determined whether the first virtual device and a second virtual device are allowed to communicate based on an authorization record datastore. As described herein, the determination is performed by an authorization component operable to interface with a hypervisor and the authorization component is remote from the first virtual device.</p>
<p id="p-0119" num="0118">At block <b>1006</b>, an authorization record of the authorization record datastore is modified. In one embodiment, modifying the authorization record datastore includes setting an indicator of a data filtering module to filter communication between the first virtual device and the second virtual device. The authorization record may be cached local to the first virtual device. The data filtering module may be able to perform a variety of filtering operations. For example, the data filtering module is operable to compress data, encrypt data, audit data, perform virus filtering and perform a backup.</p>
<p id="p-0120" num="0119">In one embodiment, authorization record modification is performed based on respective security levels of the first virtual device and the second virtual device. For example, if there is level three security on a hypervisor and level one at the virtual machine and auditing may be required, then auditing could be inserted based on the fact that the authorization manager recognizes two different security levels and thus there is a need to audit the data.</p>
<p id="p-0121" num="0120">At block <b>1008</b>, a response to the instantiation request is sent. As described herein, sending the response to the instantiation request is used to plug a device or initiate communication thereby beginning filtering of the data.</p>
<p id="p-0122" num="0121"><figref idref="DRAWINGS">FIG. 11</figref> shows a block diagram of an exemplary computer system module <b>1100</b>, in accordance with one embodiment of the present invention. With reference to <figref idref="DRAWINGS">FIG. 11</figref>, an exemplary system module for implementing embodiments described herein and includes a general purpose computing system environment, such as computing system environment <b>1100</b>. Computing system environment <b>1100</b> may include, but is not limited to, servers (e.g., servers <b>106</b><i>a</i>-<i>c</i>), desktop computers, laptops, tablet PCs, mobile devices, and smartphones. In its most basic configuration, computing system environment <b>1100</b> typically includes at least one processing unit <b>1102</b> and computer readable storage medium <b>1104</b>. Depending on the exact configuration and type of computing system environment, computer readable storage medium <b>1104</b> may be volatile (such as RAM), non-volatile (such as ROM, flash memory, etc.) or some combination of the two. Portions of computer readable storage medium <b>1104</b> when executed facilitate authorization, provisioning, and filtering of communication in virtual environments (e.g., processes <b>800</b>, <b>900</b>, and <b>1100</b>).</p>
<p id="p-0123" num="0122">Additionally, computing system environment <b>1100</b> may also have additional features/functionality. For example, computing system environment <b>1100</b> may also include additional storage (removable and/or non-removable) including, but not limited to, magnetic or optical disks or tape. Such additional storage is illustrated in <figref idref="DRAWINGS">FIG. 10</figref> by removable storage <b>1108</b> and non-removable storage <b>1110</b>. Computer storage media includes volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions, data structures, program modules or other data. Computer readable medium <b>1104</b>, removable storage <b>1108</b> and nonremovable storage <b>1110</b> are all examples of computer storage media. Computer storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other optical storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can be accessed by computing system environment <b>1100</b>. Any such computer storage media may be part of computing system environment <b>1100</b>.</p>
<p id="p-0124" num="0123">Computing system environment <b>1100</b> may also contain communications connection(s) <b>1112</b> that allow it to communicate with other devices. Communications connection(s) <b>1112</b> is an example of communication media. Communication media typically embodies computer readable instructions, data structures, program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term &#x201c;modulated data signal&#x201d; means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media includes wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared and other wireless media. The term computer readable media as used herein includes both storage media and communication media.</p>
<p id="p-0125" num="0124">Communications connection(s) <b>1112</b> may allow computing system environment <b>1100</b> to communication over various networks types including, but not limited to, fibre channel, small computer system interface (SCSI), Bluetooth, Ethernet, Wi-fi, Infrared Data Association (IrDA), Local area networks (LAN), Wireless Local area networks (WLAN), wide area networks (WAN) such as the internet, serial, and universal serial bus (USB). It is appreciated the various network types that communication connection(s) <b>1112</b> connect to may run a plurality of network protocols including, but not limited to, transmission control protocol (TCP), internet protocol (IP), real-time transport protocol (RTP), real-time transport control protocol (RTCP), file transfer protocol (FTP), and hypertext transfer protocol (HTTP).</p>
<p id="p-0126" num="0125">Computing system environment <b>1100</b> may also have input device(s) <b>1114</b> such as a keyboard, mouse, pen, voice input device, touch input device, remote control, etc. Output device(s) <b>1116</b> such as a display, speakers, etc. may also be included. All these devices are well known in the art and are not discussed at length.</p>
<p id="p-0127" num="0126">In one embodiment, computer readable storage medium <b>1104</b> includes virtual transport module <b>1106</b> which includes authorization and filtering module <b>1118</b> and authorization and provisioning module <b>1130</b>.</p>
<p id="p-0128" num="0127">Authorization and filtering module <b>1118</b> includes instantiation request receiver module <b>1120</b>, authorization record datastore access module <b>1122</b>, authorization determination module <b>1124</b>, instantiation request response module <b>1126</b>, and filtering authorization record modification module <b>1128</b>. Instantiation request receiver module <b>1120</b> is operable to receive instantiation requests, as described herein. Authorization record datastore access module <b>1122</b> is operable to access authorization record datastores (e.g., locally cached or remote). Authorization determination module <b>1124</b> determines whether virtual devices are allowed to communicate and whether filtering is necessary if the virtual devices are to communicate. Instantiation request response module <b>1126</b> sends responses (e.g., from authorization determination module <b>1124</b>) to instantiation requests (e.g., to virtual bus module <b>506</b>). Filtering authorization record modification module <b>1128</b> is operable to modification authorization records to reflect insertion of filters, as described herein.</p>
<p id="p-0129" num="0128">Authorization and provisioning module <b>1130</b> includes device provisioning notification receiving module <b>1132</b>, authorization record updating module <b>1134</b>, reconnection request receiver module <b>1136</b>, reconnection request response module <b>1138</b>, authorization determination module <b>1140</b>, and filter insertion determination module <b>1142</b>. Device provisioning notification receiving module <b>1132</b> is operable to receive notifications of the devices to be provisioned, as described herein. Authorization record updating module <b>1134</b> is operable to update authorization records to reflect device provisioning. Reconnection request receiver module <b>1136</b> is operable to receive reconnection requests (e.g., after update of authorization records for provisioning). Reconnection request response module <b>1138</b> is operable to send a response to a reconnection request (e.g., based on results of authorization determination module <b>1140</b>). Authorization determination module <b>1140</b> is operable to determine whether a reconnection of virtual devices is authorized. Filter insertion determination module <b>1142</b> is operable to determine whether filter insertion is to be performed.</p>
<p id="p-0130" num="0129"><figref idref="DRAWINGS">FIG. 12</figref> shows a block diagram of another exemplary computer system, in accordance with one embodiment of the present invention. <figref idref="DRAWINGS">FIG. 12</figref> depicts a block diagram of a computer system <b>1210</b> (e.g., servers <b>106</b><i>a</i>-<i>c</i>) suitable for implementing the present disclosure as described herein. Computer system <b>1210</b> includes a bus <b>1212</b> which interconnects major subsystems of computer system <b>1210</b>, such as a central processor <b>1214</b>, a system memory <b>1217</b> (typically RAM, but which may also include ROM, flash RAM, or the like), an input/output controller <b>1218</b>, an external audio device, such as a speaker system <b>1220</b> via an audio output interface <b>1222</b>, an external device, such as a display screen <b>1224</b> via display adapter <b>1226</b>, serial ports <b>1228</b> and <b>1230</b>, a keyboard <b>1232</b> (interfaced with a keyboard controller <b>1233</b>), a storage interface <b>1234</b>, a floppy disk drive <b>1237</b> operative to receive a floppy disk <b>1238</b>, a host bus adapter (HBA) interface card <b>1235</b>A operative to connect with a Fibre Channel network <b>1290</b>, a host bus adapter (HBA) interface card <b>1235</b>B operative to connect to a SCSI bus <b>1239</b>, and an optical disk drive <b>1240</b> operative to receive an optical disk <b>1242</b>. Also included are a mouse <b>1246</b> (or other point-and-click device, coupled to bus <b>1212</b> via serial port <b>1228</b>), a modem <b>1247</b> (coupled to bus <b>1212</b> via serial port <b>1230</b>), and a network interface <b>1248</b> (coupled directly to bus <b>1212</b>). System memory <b>1217</b> includes virtual transport authorization, filtering, and provisioning module <b>1250</b> which is operable to facilitate authorization checking, data filtering, and provisioning of virtual devices on virtual environments.</p>
<p id="p-0131" num="0130">Bus <b>1212</b> allows data communication between central processor <b>1214</b> and system memory <b>1217</b>, which may include read-only memory (ROM) or flash memory (neither shown), and random access memory (RAM) (not shown), as previously noted. The RAM is generally the main memory into which the operating system and application programs are loaded. The ROM or flash memory can contain, among other code, the Basic Input-Output system (BIOS) which controls basic hardware operation such as the interaction with peripheral components. Applications resident with computer system <b>1210</b> are generally stored on and accessed via a computer readable medium, such as a hard disk drive (e.g., fixed disk <b>1244</b>), an optical drive (e.g., optical drive <b>1240</b>), a floppy disk unit <b>1237</b>, or other storage medium. Additionally, applications can be in the form of electronic signals modulated in accordance with the application and data communication technology when accessed via network modem <b>1247</b> or interface <b>1248</b>.</p>
<p id="p-0132" num="0131">Storage interface <b>1234</b>, as with the other storage interfaces of computer system <b>1210</b>, can connect to a standard computer readable medium for storage and/or retrieval of information, such as a fixed disk drive <b>1244</b>. Fixed disk drive <b>1244</b> may be a part of computer system <b>1210</b> or may be separate and accessed through other interface systems. Modem <b>1247</b> may provide a direct connection to a remote server via a telephone link or to the Internet via an internet service provider (ISP). Network interface <b>1248</b> may provide a direct connection to a remote server via a direct network link to the Internet via a POP (point of presence). Network interface <b>1248</b> may provide such connection using wireless techniques, including digital cellular telephone connection, Cellular Digital Packet Data (CDPD) connection, digital satellite data connection or the like.</p>
<p id="p-0133" num="0132">Many other devices or subsystems (not shown) may be connected in a similar manner (e.g., document scanners, digital cameras and so on). Conversely, all of the devices shown in <figref idref="DRAWINGS">FIG. 12</figref> need not be present to practice the present disclosure. The devices and subsystems can be interconnected in different ways from that shown in <figref idref="DRAWINGS">FIG. 12</figref>. The operation of a computer system such as that shown in <figref idref="DRAWINGS">FIG. 12</figref> is readily known in the art and is not discussed in detail in this application. Code to implement the present disclosure can be stored in computer-readable storage media such as one or more of system memory <b>1217</b>, fixed disk <b>1244</b>, optical disk <b>1242</b>, or floppy disk <b>1238</b>. The operating system provided on computer system <b>1210</b> may be MS-DOS&#xae;, MS-WINDOWS&#xae;, OS/2&#xae;, UNIX&#xae;, Linux&#xae;, or another known operating system.</p>
<p id="p-0134" num="0133">Moreover, regarding the signals described herein, those skilled in the art will recognize that a signal can be directly transmitted from a first block to a second block, or a signal can be modified (e.g., amplified, attenuated, delayed, latched, buffered, inverted, filtered, or otherwise modified) between the blocks. Although the signals of the above described embodiment are characterized as transmitted from one block to the next, other embodiments of the present disclosure may include modified signals in place of such directly transmitted signals as long as the informational and/or functional aspect of the signal is transmitted between blocks. To some extent, a signal input at a second block can be conceptualized as a second signal derived from a first signal output from a first block due to physical limitations of the circuitry involved (e.g., there will inevitably be some attenuation and delay). Therefore, as used herein, a second signal derived from a first signal includes the first signal or any modifications to the first signal, whether due to circuit limitations or due to passage through other circuit elements which do not change the informational and/or final functional aspect of the first signal.</p>
<p id="p-0135" num="0134">Thus, embodiments of the present invention provide a mechanism and method to authorize, provision, and filter virtual device communication. The authorization provides dynamic security and mandatory access control. The provisioning is transparent devices thereby allowing dynamic provisioning. The filtering allows a variety of data filtering function to be applied in a manner transparent to the virtual devices.</p>
<p id="p-0136" num="0135">The foregoing description, for purpose of explanation, has been described with reference to specific embodiments. However, the illustrative discussions above are not intended to be exhaustive or to limit the invention to the precise forms disclosed. Many modifications and variations are possible in view of the above teachings. The embodiments were chosen and described in order to best explain the principles of the invention and its practical applications, to thereby enable others skilled in the art to best utilize the invention and various embodiments with various modifications as may be suited to the particular use contemplated.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A method for virtual device provisioning comprising:
<claim-text>receiving, within an electronic system, a notification of an emulated device configured to be provisioned, wherein said emulated device comprises an abstraction of a hardware resource;</claim-text>
<claim-text>updating an authorization record of an authorization record datastore, wherein said updating of said authorization record comprises updating routing information related to communication of said emulated device and a virtual device;</claim-text>
<claim-text>receiving a request for reconnection of said emulated device with said virtual device;</claim-text>
<claim-text>determining whether said emulated device and said virtual device are allowed to communicate based on said authorization record datastore; and</claim-text>
<claim-text>sending a response to said request for reconnection.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein said determining comprises checking respective security levels of said emulated device and said virtual device.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref> further comprising: determining whether to insert a filter based on said authorization record.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> further comprising: caching said authorization record local to said emulated device.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein said emulated device is configured to be provisioned based on a migration of a virtual machine.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein said emulated device is disposed remotely from a virtual machine that is communicatively coupled to said virtual device.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein said emulated device and said virtual device are communicatively coupled via a shared memory queue.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein said emulated device and said virtual device communicatively couple a first virtual machine and a second virtual machine.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. A non-transitory computer readable storage medium having stored thereon, computer executable instructions that, if executed by a computer system cause the computer system to perform a method of virtual device provisioning said method comprising:
<claim-text>receiving a notification of an emulated device configured to be provisioned, wherein said emulated device comprises an abstraction of a hardware resource;</claim-text>
<claim-text>updating an authorization record of an authorization record datastore, wherein said updating of said authorization record comprises updating routing information related to communication of said emulated device and a virtual device;</claim-text>
<claim-text>receiving a request for reconnection of said emulated device with said virtual device; determining whether said emulated device and said virtual device are allowed to communicate based on said authorization record datastore; and</claim-text>
<claim-text>sending a response to said request for reconnection.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The non-transitory computer readable storage medium of <claim-ref idref="CLM-00009">claim 9</claim-ref> wherein said determining comprises checking respective security levels of said emulated device and said virtual device.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The non-transitory computer readable storage medium of <claim-ref idref="CLM-00009">claim 9</claim-ref> wherein said method further comprises: determining whether to insert a filter based on said authorization record.</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The non-transitory computer readable storage medium of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein said method further comprises caching said authorization record local to said emulated device.</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The non-transitory computer readable storage medium of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein said emulated device is configured to be provisioned based on a migration of a virtual machine.</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The non-transitory computer readable storage medium of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein said emulated device is disposed remotely from a virtual machine that is communicatively coupled to said virtual device.</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The non-transitory computer readable storage medium of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein said emulated device and said virtual device are communicatively coupled via a shared memory queue.</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The non-transitory computer readable storage medium of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein said emulated device and said virtual device communicatively couple a first virtual machine and a second virtual machine.</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. A storage cluster system, comprising:
<claim-text>a computer system comprising one or more processors coupled to a computer readable storage media and configurable to execute computer readable code stored on the computer readable storage media which causes the computer system to implement a method comprising:
<claim-text>receiving a notification of an emulated device configured to be provisioned, wherein said emulated device comprises an abstraction of a hardware resource;</claim-text>
<claim-text>updating an authorization record of an authorization record datastore, wherein said updating of said authorization record comprises updating routing information related to communication of said emulated device and a virtual device;</claim-text>
<claim-text>receiving a request for reconnection of said emulated device with said virtual device;</claim-text>
<claim-text>determining whether said emulated device and said virtual device are allowed to communicate based on said authorization record datastore; and</claim-text>
<claim-text>sending a response to said request for reconnection.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The storage cluster system of <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein said determining comprises checking respective security levels of said emulated device and said virtual device.</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. The storage cluster system of <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein the method further comprises: determining whether to insert a filter based on said authorization record.</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. The storage cluster system of <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein said method further comprises caching said authorization record local to said emulated device.</claim-text>
</claim>
</claims>
</us-patent-grant>

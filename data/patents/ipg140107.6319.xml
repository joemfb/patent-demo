<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08627475-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08627475</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>12757018</doc-number>
<date>20100408</date>
</document-id>
</application-reference>
<us-application-series-code>12</us-application-series-code>
<us-term-of-grant>
<us-term-extension>382</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>11</main-group>
<subgroup>00</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>726 24</main-classification>
</classification-national>
<invention-title id="d2e53">Early detection of potential malware</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>8266243</doc-number>
<kind>B1</kind>
<name>Carlson et al.</name>
<date>20120900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709217</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>8266715</doc-number>
<kind>B2</kind>
<name>Lee</name>
<date>20120900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>726 30</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>2006/0070130</doc-number>
<kind>A1</kind>
<name>Costea et al.</name>
<date>20060300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>2006/0253583</doc-number>
<kind>A1</kind>
<name>Dixon et al.</name>
<date>20061100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>2007/0061877</doc-number>
<kind>A1</kind>
<name>Sima et al.</name>
<date>20070300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>726 12</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>2007/0113281</doc-number>
<kind>A1</kind>
<name>Leach</name>
<date>20070500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>2007/0162975</doc-number>
<kind>A1</kind>
<name>Overton et al.</name>
<date>20070700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>2007/0186284</doc-number>
<kind>A1</kind>
<name>McConnell</name>
<date>20070800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>726 25</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>2008/0086773</doc-number>
<kind>A1</kind>
<name>Tuvell et al.</name>
<date>20080400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>726 23</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>2008/0163374</doc-number>
<kind>A1</kind>
<name>Rogers et al.</name>
<date>20080700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>726 25</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>2008/0244748</doc-number>
<kind>A1</kind>
<name>Neystadt et al.</name>
<date>20081000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>2008/0256619</doc-number>
<kind>A1</kind>
<name>Neystadt et al.</name>
<date>20081000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00013">
<document-id>
<country>US</country>
<doc-number>2009/0320136</doc-number>
<kind>A1</kind>
<name>Lambert et al.</name>
<date>20091200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00014">
<othercit>&#x201c;Massive Spam Run Propagates Critical Fuclip Trojan&#x201d;, Retrieved at &#x3c;&#x3c;http://www.eset.com.sg/html/86/446/&#x3e;&#x3e;, dated Jan. 20, 2007, 1 page.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00015">
<othercit>Lawrence, Eric, &#x201c;IE8 Security Part III: SmartScreen&#xae; Filter&#x201d;, Retrieved at &#x3c;&#x3c;http://blogs.msdn.com/ie/archive/2008/07/02/ie8-security-part-iii-smartscreen-filter.aspx, dated Jul. 2, 2008, p. 1-13.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>20</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>726 24</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>6</number-of-drawing-sheets>
<number-of-figures>6</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20110252476</doc-number>
<kind>A1</kind>
<date>20111013</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Loveland</last-name>
<first-name>Shawn D.</first-name>
<address>
<city>Sammamish</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Lambert</last-name>
<first-name>John J.</first-name>
<address>
<city>Redmond</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="003" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Canavor</last-name>
<first-name>Darren E.</first-name>
<address>
<city>Redmond</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="004" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Colvin</last-name>
<first-name>Ryan C.</first-name>
<address>
<city>Bothell</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Loveland</last-name>
<first-name>Shawn D.</first-name>
<address>
<city>Sammamish</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Lambert</last-name>
<first-name>John J.</first-name>
<address>
<city>Redmond</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="003" designation="us-only">
<addressbook>
<last-name>Canavor</last-name>
<first-name>Darren E.</first-name>
<address>
<city>Redmond</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="004" designation="us-only">
<addressbook>
<last-name>Colvin</last-name>
<first-name>Ryan C.</first-name>
<address>
<city>Bothell</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>Microsoft Corporation</orgname>
<role>02</role>
<address>
<city>Redmond</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Hailu</last-name>
<first-name>Teshome</first-name>
<department>2434</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">Evidence of attempted malware attacks may be used to identify the location and nature of future attacks. A failed attack may cause a program to crash. Crash data may be sent to an analyzer for analysis. The analysis may reveal information such as the identity of the program that is being exploited, the specific way in which the program is being exploited, and the identity or location of the source of the attack. This information may be used to identify potential sources of attack and to identify the same type of attack from other sources. When the source and/or nature of an attempted attack is known, remedial action may be taken. Filters may warn users who are attempting to visit sites from which attacks have been attempted, and the makers of programs that are being exploited can be notified so that those program makers can release updates.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="127.93mm" wi="243.08mm" file="US08627475-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="249.77mm" wi="171.96mm" orientation="landscape" file="US08627475-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="236.73mm" wi="155.87mm" file="US08627475-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="222.08mm" wi="106.51mm" file="US08627475-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="196.17mm" wi="100.16mm" file="US08627475-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="204.55mm" wi="113.11mm" file="US08627475-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="245.19mm" wi="156.21mm" orientation="landscape" file="US08627475-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">BACKGROUND</heading>
<p id="p-0002" num="0001">Malware is an ever-present threat in a computing landscape in which devices are connected to each other. Attackers with various motives seek to propagate malicious software. The damage inflicted by malicious software can range anywhere from minor annoyance to widespread catastrophic system failures. Thus, many resources are devoted to protecting computers and other devices from malware attacks.</p>
<p id="p-0003" num="0002">Protection against malware takes many different forms, which reflects the fact that there is a large number of different ways to mount an attack. For example, popular products such as free document readers and browser plug-ins are common attack vectors. Thus, the makers of these products update their products to resist attacks when the attacks have been discovered. Likewise, operating systems may provide opportunities for attack, and the makers of operating systems regularly provide updates to resist known attacks. Virus detectors monitor systems for behaviors that are known to be associated with viruses (e.g., certain types of buffer overflows that serve as attack vectors to install viruses). These virus detectors also monitor for the presence of files that have been known historically to be associated with malware.</p>
<p id="p-0004" num="0003">However, these techniques are mainly based on detecting and preventing successful attacks that have already been observed with a fairly frequent occurrence. For example, if a successful virus attack has been launched and detected &#x201c;in the wild,&#x201d; a virus detector can be updated to recognize the signature of that particular virus. If a browser plug-in has been used for an attack, the maker of that plug-in can analyze the attack and update the plug-in to resist that type of exploit. If the overflow of a particular buffer is known to have been used as part of an attack, then the measure of watching the buffer to see if it overflows can be used to detect other attacks. But these techniques are based on the assumption that future attacks will look like past attacks that have succeeded.</p>
<heading id="h-0002" level="1">SUMMARY</heading>
<p id="p-0005" num="0004">Malware attacks, and other types of attacks, can be detected proactively by observing evidence of failed attacks. For example, a failed attack may cause a program to crash. Crash data may be sent to an entity that performs analysis on the crash. (The crash data may be sent anonymously in order to protect the privacy of users who volunteer to send crash data.) In one example, the entity that performs crash analysis may be a manufacturer of an operating system on which the crashed program was running, although any entity could perform the crash analysis.</p>
<p id="p-0006" num="0005">Crash data is normally analyzed to identify bugs in the program that crashed, or bugs in the operating system under which the program is running. However, that crash data may also provide details suggesting that the crash was the result of an attempted attack, and may provide details about how the attack attempt arose. For example, a browser may crash when a user is visiting a particular web site. The crash data may contain the identity of the web site and/or that of any particular plug-in that the user was using at the time of the crash. The nature of the crash may reveal the details of the method of attack the cybercriminal has developed and may be in the process of testing or pushing out into the wild&#x2014;e.g., an attempt to overflow a buffer, an attempt to write to hard memory locations, etc. Thus, the crash data also contain details on where the attack originated on the Internet, thereby giving the location of attacks that have yet to be detected. That is, the data suggest that a particular web site might be the source of future attacks, and that these attacks might try to exploit vulnerabilities in a particular plug-in or another method of attack unrelated to the detected attack.</p>
<p id="p-0007" num="0006">When a possible source and/or mode of attack has been identified, various actions can be taken. For example, if a particular web site has been identified as the source of an attempted attack, a crawler can visit the web site to determine what other type of attacks might be present on that site. Or, if a particular plug-in has been used in a failed attack, the maker of that plug-in can be warned of the attempted attack so that it can provide an update. Then, users can be advised to install the update. Other scenarios are possible. For example, an attack might come through an online advertisement that is presented on an otherwise legitimate web site. If the advertisement is displayed during a crash, then an examination can be made of the advertisement and its source. Then, the party that provides the advertising for the legitimate web site can be advised that its advertisements are possibly being used to host an attack. The foregoing are merely some example ways that information about attempted attacks could be used. There are many additional examples of how such information could be used.</p>
<p id="p-0008" num="0007">This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter, nor is it intended to be used to limit the scope of the claimed subject matter.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. 1</figref> is a block diagram of an example scenario in which crash data is used to detect potential threats.</p>
<p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. 2</figref> is a flow diagram of an example process in which crash data may be used to detect potential malware.</p>
<p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. 3</figref> is a block diagram of some example information that may be obtained through crash data.</p>
<p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. 4</figref> is a block diagram of various example actions that may be taken when a potential threat is discovered.</p>
<p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. 5</figref> is a block diagram of some example ways to use information about an attempted attack.</p>
<p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. 6</figref> is a block diagram of example components that may be used in connection with implementations of the subject matter described herein.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0004" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0015" num="0014">Malware is an ever-present threat in a networked computing environment. For as long as computer networks have existed, there have been people who seek to create attacks on other people's computers. Attackers engage in these types of attacks for various reasons: profit, thrill, notoriety, a sense of power, or any other reason. Attacks propagate from machine to machine when the machines exchange information. Thus, as the number of devices that are connected to each other through the internet increases, the potential for attacks increases as well. In the past, computers were the main types of machines that were connected to each other through networks. Now, many other types of machines&#x2014;e.g., music players, kitchen appliances, home entertainment devices, cars, etc.&#x2014;are online, which increases the potential for attacks.</p>
<p id="p-0016" num="0015">Traditionally, malware has been detected retrospectively. That is, once a successful attack has been launched, the particular files or other data associated with the attack, and the way in which those files propagate, can be analyzed. For example, if a virus has been observed &#x201c;in the wild&#x201d; attacking a large number of computers, the particular form of data (e.g., an executable file) through which the virus is carried can be identified. Moreover, the way in which that file propagates can be discovered. (E.g., the attack might propagate through a socially-engineered e-mail attack in which users are encouraged to open the file, or through a &#x201c;drive-by&#x201d; attack in which a weaponized web site installs malware on a machine that visits the site.) Remedial measures then can be taken. The file can be added to a database of known viruses, and a machine's anti-virus software can canvass the machine to detect the presence of the file. E-mail filters can be updated to recognize e-mails that carry the virus. Moreover, the virus might attack its target machine through a particular mechanism (e.g., by overflowing a buffer, by poking specific values into memory locations that are reserved for executable code, etc.). In this case, malware detectors can look for use of that mechanism in unknown programs in order to detect instances of new malware that perform attacks using these mechanisms that have been successful in the past.</p>
<p id="p-0017" num="0016">These measures to prevent malware have been valuable, but what they have in common is that they try to detect future attacks by detecting data and behaviors that have been associated with past attacks. However, it is likely that many future attacks will not look like past attacks. Therefore, in some cases, resisting an attack may depend on being able to identify the source or mode of attack before a successful attack is actually made. The subject matter described herein may be used to detect attacks, or attempted attacks, before they become successful.</p>
<p id="p-0018" num="0017">The subject matter described herein draws on the observation that malware&#x2014;like other types of software&#x2014;is developed and tested incrementally. It is difficult to write beneficial software that performs as expected on the first try. Malevolent software is no different. Software typically has to be written, tested, debugged, re-tested, etc., until it is ready to be deployed. Commercial software normally undergoes much of its testing in a closed environment before a version of the software becomes widely available. With malware, however, the software is often tested through deployment. The attacker deploys a version of the malware; if the malware fails to produce the intended attack, then the attacker modifies the malware and tries again. These failed attacks may leave clues about what types of malware are under development, where the malware might come from, and what sort of vulnerability is being exploited to propagate the malware. Often, these clues are left behind when the attempted attack causes a program to crash.</p>
<p id="p-0019" num="0018">Many types of attacks are leveled through other programs. For example, a web site might be weaponized to exploit a vulnerability in a particular web browser, or a particular plug-in or ACTIVEX control for that browser. The attacker might want the weaponized page to use the browser to cause some form of damage to the host computer. However, before the attackers successfully develop malware that can produce that damage, a nascent version of the malware might cause the browser to crash. When a program crashes, crash data (e.g., a memory image of the process in which the crash occurred) may be stored on the computer where the crash occurred. Operating system (OS) manufacturers are often interested in analyzing crash data, since crash data may allow the OS manufacturer to learn whether the crash was caused by a bug in the operating system. Thus, OS manufacturers often ask users for permission to upload their crash data, in order to help the OS manufacturer detect and remedy the source of the crash. However, in addition to helping the OS manufacturer remedy an issue with the OS, the crash data may also reveal an attack under development. For example, a failed attack may use techniques that are known to have been used with successful attacks&#x2014;e.g., attempting to induce buffer overflows, poking values into specific memory locations, etc. Additionally, the crash data may reveal what location on the internet provided the code that caused the crash, what plug-ins were active in the browser at the time of the crash, etc. This information may suggest to an OS manufacturer (or any other entity that collects crash data) what kinds of attacks are being developed, and where the potential attacks are coming from.</p>
<p id="p-0020" num="0019">For example, suppose that a browser crashes when the user is viewing a well-respected news web site. It is unlikely that a respected news provider would weaponize its web site, but such sites often serve ads that are provided by third-party advertising services. These third-party advertising services place ads from numerous sources large and small, and it is possible that one such source has attempted to place a weaponized ad. The crash data are likely to reveal the sources of all content that was being viewed at the time of the crash&#x2014;both the URL of the main web site, and the URLs of any other content that might have been referenced on that page. Thus, analysis of the crash data may suggest that an attack is being developed through weaponized ads, and may also indicate where the attack is coming from and what ad is hosting the attack. Once the source of the attack is determined, web sites associated with that source can be analyzed to determine other possible attacks that may exist on undiscovered pages on the Internet. Moreover, the relevant parties can be alerted to the fact that an attack is under development. For example, the ad placement service can be notified that one of its customers appears to be attempting to launch an attack through a weaponized ad. If the ad is attempting to use a particular browser plug-in as part of the attack (a fact which might be detectable through crash data), then the maker of that plug-in can be warned and encouraged to release an update. Moreover, once the update is available, users can be encouraged to install the update. Additionally, other mitigation efforts can be put in place until the update is available and the user installs the update.</p>
<p id="p-0021" num="0020">Various other scenarios are possible. For example, if crash data shows that an e-mail was opened right before a crash, this fact may suggest a socially-engineered attack that propagates by encouraging users to open links contained in e-mail. The foregoing are merely some example scenarios of how failed attacks could be used to detect and prevent future attacks. Additional ways to use information about attempted attacks are described below.</p>
<p id="p-0022" num="0021">Turning now to the drawings, <figref idref="DRAWINGS">FIG. 1</figref> shows an example scenario in which crash data is used to detect potential threats. In the example of <figref idref="DRAWINGS">FIG. 1</figref>, software <b>102</b> executes on computer <b>104</b>. Software <b>102</b> may be any type of software. For example, software <b>102</b> may be a web browser, a word processor, a media player, an e-mail client, a viewer for Portable Document Format (PDF) documents, or any other type of software. Computer <b>104</b> may be any type of computer such as a desktop computer, a laptop computer, a handheld computer, a smart phone, or any other type of device that has the ability to execute some type of software <b>102</b>.</p>
<p id="p-0023" num="0022">At some point while software <b>102</b> is running, software <b>102</b> crashes. An operating system present on computer <b>104</b> may cause crash data <b>106</b>, concerning a crashed program, to be generated and stored. For example, crash data <b>106</b> may include an image <b>108</b> of the process in which software <b>102</b> was running at the time of the crash. As another example, crash data <b>106</b> may include the name <b>110</b> of the program that crashed. As another example, crash data <b>106</b> may include the name and/or network address of web sites <b>112</b> that were being visited at the time of the crash. Software <b>102</b> may be a program that obtains data from other locations (e.g., a web browser, document reader, or media player that renders content obtained from a web site). Since threats often enter a computer from a network location, it may be of interest to know what web sites or other network locations the computer was visiting and/or receiving data from at or near the time of the crash, so such information may be recorded as part of crash data <b>106</b>.</p>
<p id="p-0024" num="0023">When computer <b>104</b> generates crash data <b>106</b>, that crash data may stay on computer <b>104</b>. The crash data may contain private information relating to the usage of computer <b>104</b>, and thus a user might choose not to send the crash data anywhere. However, many users do choose to send their crash data to another entity. For example, the manufacturer of the OS for computer <b>104</b> may request that the user send crash data, so that the OS manufacturer can analyze the conditions that led to the crash, and can possibly make the OS more resistant to future crashes. Thus, user <b>114</b> of computer <b>104</b> may choose to send crash data <b>106</b> to an analyzing entity <b>116</b> (where analyzing entity <b>116</b> may be an OS manufacturer, but could be any entity). If user <b>114</b> assents to have crash data <b>106</b> sent to analyzing entity <b>116</b>, then crash data <b>106</b> may be sent to that analyzing entity.</p>
<p id="p-0025" num="0024">Analyzing entity <b>116</b> may employ various components to analyze and react to crash data <b>106</b>. For example, analyzing entity <b>116</b> may include a crash analyzer <b>118</b> that examines the information contained in crash data <b>106</b>, and attempts to determine what it can about the crash. For example, crash analyzer <b>118</b> may examine the memory image <b>108</b> to determine the immediate cause of the crash&#x2014;e.g., stack overflow, memory fault, attempted use of privileged instructions, etc. Additionally, crash analyzer <b>118</b> may attempt to learn what the program was doing at the time of the crash. For example, if the program is a web browser, then the name and Uniform Resource Locator (URL) of a web site that was being displayed at the time of the crash may be discernible from crash data <b>106</b>. If a particular plug-in or ACTIVEX control was active at the time of the crash, this fact may be evident in crash data <b>106</b>. As another example, the particular types of actions that were being performed at the time of the crash may be evident from crash data <b>106</b>. In this way, it is possible to learn something about what was happening in the program at the time of the crash. While this type of analysis is often used to detect bugs in the program and/or the operating environment, analysis may also be used to detect an attempted exploit and the specific mode of the exploit. For example, suppose that the program that crashed is a browser. Further suppose that, at the time of the crash, the browser had loaded a page containing an ad that is hosting an exploit located on bad.example.com, and was processing information in the web page using a particular version of the Flash plug-in. These facts may suggest that an attacker is attempting to exploit a vulnerability in the Flash plug-in as a way to attack computers. Crash analyzer <b>118</b> could detect this type of fact from crash data <b>106</b>.</p>
<p id="p-0026" num="0025">In addition to analyzing crash data <b>106</b>, analyzing entity <b>116</b> may perform various other functions. For example, analyzing entity may notify other entities of potential vulnerabilities and potential sources of malware, or may use the information that it has found to investigate potential sources of malware further. Thus, analyzing entity <b>116</b> may use notifier <b>120</b> and/or a crawler <b>122</b>. Notifier <b>120</b> performs various different types of notifying functions. For example, notifier <b>120</b> may notify users (such as users <b>124</b> and <b>126</b>, as well as user <b>114</b>) of potential dangers. For example, if analysis of crash data <b>106</b> reveals that the web site bad.example.com is hosting a &#x201c;drive-by&#x201d; attack that exploits a vulnerability in Flash, then notifier <b>120</b> may notify users that bad.example.com is a dangerous web site. For example, notifier <b>120</b> could update a database of dangerous web sites, and browsers could be configured to check this database when retrieving web pages. Once bad.example.com has been verified as a dangerous web site, browsers could warn users of the danger before retrieving pages from bad.example.com. Another example of notification that could be performed is that the manufacturer of the software used in the attack (e.g., Flash, in this example) could be notified that an attackers is trying to develop an attack that exploits that manufacturer's software. If the manufacturer is notified, then the manufacturer could take remedial action (e.g., the manufacturer could release an update to the software that is resistant to the type of attack that is being attempted).</p>
<p id="p-0027" num="0026">Additionally, analyzing entity <b>116</b> may employ crawler <b>122</b> to investigate web sites that have been identified as possible sites of attack, or to look for newly discovered attacks on other web sites. For example, suppose that it has just been discovered (through crash analysis) that bad.example.com is attempting to launch an attack. It may be reasonable to assume that if bad.example.com is trying to launch one attack, then it might be hosting other types of yet-undiscovered malware/attacks. Thus, crawler <b>122</b> can visit bad.example.com to see what types of files or other information are being stored on that web site, and the information that is discovered can be analyzed. Additionally, once a potential attack coming from bad.example.com has been discovered, it may be reasonable to assume that bad.example.com is not the only place that such an attack might be launched from. Thus, crawler can visit other web sites <b>128</b>, <b>130</b>, and <b>132</b> to determine whether these web sites might be hosting similar activity. It is noted that web sites <b>128</b>-<b>132</b> might be web sites that are known to be legitimate. However, legitimate web sites can become infected in various ways (e.g., through advertising content that is placed by a third-party). Thus, once a nascent attack originating from bad.example.com has been discovered, it may be reasonable to examine legitimate web sites to detect legitimate channels through which bad.example.com might launch an attack.</p>
<p id="p-0028" num="0027">It is noted that the &#x201c;attack&#x201d; referred to above may be an unsuccessful attack. Successful malware often does damage without causing a crash. However, when the malware is in the developmental stage, the crash provides an opportunity to detect a particular source and mode of attack. Thus, when the malware developer produces the successful version of the malware, something may be known about the techniques that this malware will use to cause damage, and/or the source of the malware, and/or the particular exploit through which the malware will attack a machine. Thus, it may be possible to guard against future successful attacks by using information about failed attacks that is revealed in crash data.</p>
<p id="p-0029" num="0028"><figref idref="DRAWINGS">FIG. 2</figref> shows an example process in which crash data may be used to detect potential malware. Before turning to a description of <figref idref="DRAWINGS">FIG. 2</figref>, it is noted that the flow diagram contained in <figref idref="DRAWINGS">FIG. 2</figref> is described, by way of example, with reference to components shown in <figref idref="DRAWINGS">FIG. 1</figref>, although this process may be carried out in any system and is not limited to the scenario shown in <figref idref="DRAWINGS">FIG. 1</figref>. Additionally, the flow diagram in <figref idref="DRAWINGS">FIG. 2</figref> shows an example in which stages of a process are carried out in a particular order, as indicated by the lines connecting the blocks, but the various stages shown in this diagram can be performed in any order, or in any combination or sub-combination.</p>
<p id="p-0030" num="0029">At <b>202</b>, crash data is received. Crash data may be received by a maker or distributor of the program that crashed, or a maker or distributor of the operating system under which the program that crashed was running, or by any other entity. The entity that receives the crash data may be the analyzing entity <b>116</b> (shown in <figref idref="DRAWINGS">FIG. 1</figref>), but could be any entity.</p>
<p id="p-0031" num="0030">At <b>204</b>, the crash data is analyzed. Analysis of the crash data may reveal information such as the identity of the crashed programs (and any programs, such as plug-ins and/or ACTIVEX controls that may have been running in connection with the crashed program) (block <b>206</b>). Analysis of the crash data may also reveal the particular mechanism of the crash (e.g., stack overflow, memory fault, attempted use of privileged instructions, etc.) (block <b>208</b>). Additionally, analysis of the crash data may reveal what remote servers were being contacted at the time of the crash (block <b>210</b>). For example, if a program such as a browser is loading page from a particular web site at the time of the crash, that fact may suggest that the attack is coming through the page that is being loaded. The fact that the attack is coming through that page may not be the fault of the provider of the page. For example, the page might have third-party ads, and the attack might be coming through an ad that is served with the page. However, the identity of the page that is being loaded (and the server that is providing that page) may provide clues about where an attempted attack is coming from, and these clues may be used to guard proactively against a successful future attack. (E.g., analysis of the data may reveal that, at the time of the crash, the user was visiting news.example.com, which was hosting an ad from ad.example.com, which is hosting a drive-by malware attack from bad.example.com. Moreover, in addition to identifying URLs, IP addresses could also be identified in the crash data.)</p>
<p id="p-0032" num="0031">When particular sources of attack, such as particular web sites, have been identified, these web sites may be crawled to determine the presence of threats (at <b>212</b>). For example, if analysis of the crash data reveals that a user was loading a page from a particular web site at the time of a crash, that web site may be crawled to determine what other malware is present or linked on that site. In addition to crawling sites where malware is detected, other sites may also be crawled to see if those other sites are hosting or linking to the detected threat. For example, an attempted attack may have been discovered on the web site bad.example.com. That web site can be crawled to determine what sort of malware is being hosted or linked by that site. However, once the attempted attack by bad.example.com has been discovered, other web sites can be crawled to determine whether they are hosting the same attack.</p>
<p id="p-0033" num="0032">When sites have been crawled to discover the presence of malware threats, these threats may be added to a threat database (at <b>214</b>). The database of threats may be used in various ways. For example, users may notified of the threats (at <b>216</b>). In one example, a browser retrieves potential threats from a database, and warns users when they are loading content from a source at which a potential threat was discovered. However, the subject matter herein is not limited to the example in which users are notified of threats through a browser. Users may be notified of threats in any manner.</p>
<p id="p-0034" num="0033">Additionally, when threats have been discovered, remedial action may be taken (at <b>218</b>). There are many possible forms of remedial action, and the following are some example. In one example, a user's browser may block the user from loading content from a site from which a threat has been known or attempted. In another example, the particular mechanism of the attempted attack could be defeated. For example, if a failed attack appears to have attempted to overflow a buffer, then software could be installed that monitors that buffer to prevent overflows. In another example, if an attack appears to have been mounted through a particular program (e.g., the Flash plug-in), then that program could be disabled in order to thwart the attack. Or, if the attack was attempted through a program to which an update has since been released, it could be suggested to a user that he or she install a more recent version of the software, which may have additional security features that resist the type of attack that has been detected.</p>
<p id="p-0035" num="0034">An additional action that may be taken is to notify an entity of threats that appear to be using that entity's products as an attack vector (at <b>220</b>). For example, if an operating system manufacturer receives crash data suggesting that a particular program (e.g., the Flash plug-in) is being exploited to mount an attack, then the maker of that plug-in could be notified of the existence and nature of the attempted attack. The maker of the program could then release an update that resists the type of attack that is being attempted, and may be able to release that update before the attack becomes successful. Or, as another example, if good.example.com is hosting an ad from ad.example.com, which is hosting a drive-by attack on bad.example.com, then the owners/operators of good.example.com and ad.example.com could be notified that they are (probably unwittingly) participating in an attack that comes from bad.example.com, so these entities can take appropriate remedial action.</p>
<p id="p-0036" num="0035"><figref idref="DRAWINGS">FIG. 3</figref> shows some example information that may be obtained through crash data (block <b>300</b>). One example of the information that may be obtained is the network address of the server that is hosting an attack (block <b>302</b>). That server may be identified by its Uniform Resource Locator (URL), its Internet Protocol (IP) address, or by any other type of address.</p>
<p id="p-0037" num="0036">Another example type of information that may be obtained from crash data is the network address of the server that is attempting an exploit (block <b>304</b>). The server that is attempting the exploit may be different from the server that hosts the attack. For example, as noted above, a legitimate web site may inadvertently become the host of an attack through third-party advertisements. A third-party advertisement is typically hosted by a server different from the one that hosts the web page on which the ad is placed. In this sense, the site where the malicious content is encountered may be distinct from the site where the malicious content is provided. Thus, it may be of interest to know both of these sites.</p>
<p id="p-0038" num="0037">Another example of information that may be obtained from crash data is the identity of the software that the attacker is trying to exploit (block <b>306</b>). For example, the attack may cause a crash of a browser, but the software that is being exploited might be a browser plug-in rather than the browser itself. This fact may be learned from the crash data.</p>
<p id="p-0039" num="0038">Yet another example of information that may be obtained from crash data is the geographic location of the server that is conducting the attack (block <b>308</b>). Many attackers use different domain names and/or machines to hide their identities. However, if similar attacks are being attempted from the same part of the world, this fact may suggest that attacks that come from different domains or machines are actually originating with the same attacker. This information may help to understand future activity originating in that part of the world, or possibly to identify the person or organization behind the attack.</p>
<p id="p-0040" num="0039"><figref idref="DRAWINGS">FIG. 4</figref> shows various example actions <b>400</b> that may be taken when a potential threat is discovered. One such example action is to notify the user of an available update (block <b>402</b>). For example if an attacker appears to be trying to exploit a vulnerability in a browser plug-in and there is an updated, more secure version of that plug-in, then a user can be notified that an updated version of the plug-in is available.</p>
<p id="p-0041" num="0040">Another example action is to directly mitigate the threat (block <b>404</b>). For example, if an attacker appears to be trying to overflow a buffer, then software can be installed that monitors the buffer in order to prevent overflows. As another example, if an attacker appears to be trying to exploit a vulnerability in a particular program such as a browser plug-in, then the plug-in (or other exploited program) can be disabled.</p>
<p id="p-0042" num="0041">Yet another example of an action that could be taken is to notify a user when that user attempts to visit a site that is hosting a known attack (block <b>406</b>). For example, suppose that a browser crashes while a user is visiting a site, and analysis of the crash data reveals that the site was attempting to mount an attack. If the threat from this potential attack has not yet been mitigated (or cannot be mitigated), the user can still be warned of the danger of visiting the site, and can be dissuaded from visiting that site. Thus, the identity of the site can be put in a threat database that the browser uses, and the browser can warn the user when visiting that site.</p>
<p id="p-0043" num="0042">When analysis of crash data reveals an attempted attack, there are various ways to use the information about the attempted attack. <figref idref="DRAWINGS">FIG. 5</figref> shows some examples of these ways <b>500</b>.</p>
<p id="p-0044" num="0043">One example way to use information about an attempted attack is to look for legitimate web sites that attempt to host the discovered attack (block <b>502</b>). For example, once the nature of the attack is discovered through the crash data, a crawler can examine other web sites to determine whether the same attack (or a similar attack) is being hosted on other web sites.</p>
<p id="p-0045" num="0044">Another example way to use information about an attempted attack is to look for legitimate web sites that link to web sites that are hosting the attempted attack or a similar attack (block <b>504</b>). When it is known that a particular site is hosting an attempted attack, it is possible that other sites are linking to that site, and therefore may lead users to the attack. Thus, sites with such links can be discovered, and&#x2014;when the sites are discovered&#x2014;remedial action may be taken. For example, the owner of the site may be warned that his or her site is pointing to a potentially unsafe site. Or, users who visit sites with links to unsafe sites may be warned to avoid visiting those sites.</p>
<p id="p-0046" num="0045">Yet another example way to use information about an attempted attack is to look at known malicious web sites for unknown malicious code (block <b>506</b>). For example, suppose that the web site at bad.example.com is known to be the launching point for an attempted attack. It may be reasonable to assume that the attempted attack that is discovered is not the only one that is being attempted or carried out from that site. Thus, once bad.example.com is known to be the launching point of an attempted attack, it may make sense to look at that site to determine what other (possibly unknown) attacks are also being launched from that site, or from related sites.</p>
<p id="p-0047" num="0046">Another example type of information that may be obtained from crash data is the network address of malicious sites hosting the attack code and malware. Analysis of DNS registration information for these sites can often point to a common link that will lead investigators to other similarly malicious sites. The plurality of these sites can be could be used in crash analysis to proactively download the malware for the purposes of developing anti-virus signatures. Additionally, the locations could be added to malware location block lists used by security programs at the desktop or firewall/proxy layer in the network.</p>
<p id="p-0048" num="0047"><figref idref="DRAWINGS">FIG. 6</figref> shows an example environment in which aspects of the subject matter described herein may be deployed.</p>
<p id="p-0049" num="0048">Computer <b>600</b> includes one or more processors <b>602</b> and one or more data remembrance components <b>604</b>. Processor(s) <b>602</b> are typically microprocessors, such as those found in a personal desktop or laptop computer, a server, a handheld computer, or another kind of computing device. Data remembrance component(s) <b>604</b> are components that are capable of storing data for either the short or long term. Examples of data remembrance component(s) <b>604</b> include hard disks, removable disks (including optical and magnetic disks), volatile and non-volatile random-access memory (RAM), read-only memory (ROM), flash memory, magnetic tape, etc. Data remembrance component(s) are examples of computer-readable storage media. Computer <b>600</b> may comprise, or be associated with, display <b>612</b>, which may be a cathode ray tube (CRT) monitor, a liquid crystal display (LCD) monitor, or any other type of monitor.</p>
<p id="p-0050" num="0049">Software may be stored in the data remembrance component(s) <b>604</b>, and may execute on the one or more processor(s) <b>602</b>. An example of such software is malware detection software <b>606</b>, which may implement some or all of the functionality described above in connection with <figref idref="DRAWINGS">FIGS. 1-5</figref>, although any type of software could be used. Software <b>606</b> may be implemented, for example, through one or more components, which may be components in a distributed system, separate files, separate functions, separate objects, separate lines of code, etc. A computer (e.g., personal computer, server computer, handheld computer, etc.) in which a program is stored on hard disk, loaded into RAM, and executed on the computer's processor(s) typifies the scenario depicted in <figref idref="DRAWINGS">FIG. 6</figref>, although the subject matter described herein is not limited to this example.</p>
<p id="p-0051" num="0050">The subject matter described herein can be implemented as software that is stored in one or more of the data remembrance component(s) <b>604</b> and that executes on one or more of the processor(s) <b>602</b>. As another example, the subject matter can be implemented as instructions that are stored on one or more computer-readable storage media. Tangible media, such as an optical disks or magnetic disks, are examples of storage media. The instructions may exist on non-transitory media. Such instructions, when executed by a computer or other machine, may cause the computer or other machine to perform one or more acts of a method. The instructions to perform the acts could be stored on one medium, or could be spread out across plural media, so that the instructions might appear collectively on the one or more computer-readable storage media, regardless of whether all of the instructions happen to be on the same medium.</p>
<p id="p-0052" num="0051">Additionally, any acts described herein (whether or not shown in a diagram) may be performed by a processor (e.g., one or more of processors <b>602</b>) as part of a method. Thus, if the acts A, B, and C are described herein, then a method may be performed that comprises the acts of A, B, and C. Moreover, if the acts of A, B, and C are described herein, then a method may be performed that comprises using a processor to perform the acts of A, B, and C.</p>
<p id="p-0053" num="0052">In one example environment, computer <b>600</b> may be communicatively connected to one or more other devices through network <b>608</b>. Computer <b>610</b>, which may be similar in structure to computer <b>600</b>, is an example of a device that can be connected to computer <b>600</b>, although other types of devices may also be so connected.</p>
<p id="p-0054" num="0053">Although the subject matter has been described in language specific to structural features and/or methodological acts, it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather, the specific features and acts described above are disclosed as example forms of implementing the claims.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>The invention claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. One or more computer-readable memories that store executable instructions to detect potential threats, wherein the instructions, when executed by a computer, cause the computer to perform acts comprising:
<claim-text>receiving, from a machine, crash data concerning a program that has crashed on said machine, said program having received content from a content provider, said content hosting an advertisement provided by an advertisement provider, said advertisement provider being distinct from said content provider;</claim-text>
<claim-text>analyzing said crash data to identify a nature of an attempted attack that caused said program to crash, said analyzing determining that said attempted attack is being made through said advertisement; and</claim-text>
<claim-text>using said crash data to take one or more actions, wherein said one or more actions either notify a user of a potential threat, notify a software manufacturer of a potential exploit of the manufacturer's software, or take remedial action to mitigate threats from an attack of the nature that was identified, said one or more actions further notifying said advertisement provider that a customer of said advertisement provider is using said advertisement provider to deliver weaponized advertisements, said one or more actions comprising downloading code that is known to be malware from a site that is discovered through said crash data, and developing an anti-virus signature of said malware.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The one or more computer-readable memories of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein said analyzing comprises:
<claim-text>identifying, in said crash data, a network address of a server from which said machine had received data at a time that said program crashed.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The one or more computer-readable memories of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein said analyzing comprises:
<claim-text>identifying, in said crash data, a network address of a server that was attempting to exploit a vulnerability in said machine, or in software on said machine, at a time that said program crashed.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The one or more computer-readable memories of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein said analyzing comprises:
<claim-text>identifying, in said crash data, an identity of an item of software on which an exploit was being attempted at a time that said program crashed.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The one or more computer-readable memories of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein said analyzing comprises:
<claim-text>identifying, based on said crash data, a geographic location of a server that was attempting to exploit a vulnerability in said machine, or in software on said machine, at a time that said program crashed.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The one or more computer-readable memories of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein said crash data reveals that an attempt was made to exploit a vulnerability in an item of software, wherein said one or more actions comprise:
<claim-text>in response to said attempt to exploit said vulnerability, notifying said user of an update to said item of software.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The one or more computer-readable memories of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein said crash data reveals a mechanism by which an attempt to exploit a vulnerability in an item of software is being made, and wherein said one or more actions comprise:
<claim-text>preventing or monitoring use of said mechanism.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. A system for detecting potential threats, the system comprising:
<claim-text>a processor;</claim-text>
<claim-text>a data remembrance component;</claim-text>
<claim-text>a crash analysis component that is stored in said data remembrance component and that executes on said processor, wherein said crash analysis component receives crash data from a machine on which a program has crashed, analyzes said crash data to determine a kind of an attack or attempted attack that caused said program to crash, said program having received content from a content provider, said content hosting an advertisement provided by an advertisement provider, said advertisement provider being distinct from said content provider, said crash analysis component determining that said attempted attack is being made through said advertisement;</claim-text>
<claim-text>a notifier that uses analysis of said crash data to notify one or more entities of a solution that resists attacks of said kind, said notifier notifying said advertisement provider that a customer of said advertisement provider is using said advertisement provider to deliver weaponized advertisements; and</claim-text>
<claim-text>a component that downloads code that is known to be malware from a site that is discovered through said crash data, and that develops an anti-virus signature of said malware.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The system of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein said solution comprises an update to an item of software that is being exploited in said attempted attack.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The system of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein said notifier notifies one of said entities when said entity is attempting to visit a site that has been discovered, through analysis of said crash data, to be hosting said attack or said attempted attack.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The system of <claim-ref idref="CLM-00008">claim 8</claim-ref>, further comprising:
<claim-text>a crawler that crawls known web sites to identify web sites that are hosting an attack or an attempted attack of the kind that was discovered through analysis of said crash data.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The system of <claim-ref idref="CLM-00008">claim 8</claim-ref>, further comprising:
<claim-text>a crawler that crawls web sites to identify web sites that contain links to sites that have been discovered, through analysis of said crash data, to be hosting attacks or attempted attacks.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The system of <claim-ref idref="CLM-00008">claim 8</claim-ref>, further comprising:
<claim-text>a crawler that crawls web sites that have been found, through analysis of said crash data, to be hosting said attack or said attempted attack in order to discover other attacks or attempted attacks hosted by said web sites.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The system of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein said crash analysis component identifies, in said crash data, a network address of a server from which said machine received data at a time that said program crashed.</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The system of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein said crash analysis component identifies, from said crash data, an identity of an item of software that said attack or said attempted attack has exploited or attempted to exploit.</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. A method of detecting a potential threat, the method comprising:
<claim-text>using a computer processor to perform acts comprising:
<claim-text>receiving, from a machine, crash data concerning a program that has crashed on said machine;</claim-text>
<claim-text>analyzing said crash data to identify a kind of attempted attack that caused said program to crash, said program having received content from a content provider, said content hosting an advertisement provided by an advertisement provider, said advertisement provider being distinct from said content provider;</claim-text>
<claim-text>determining from analysis of said crash data that a server is attempting to exploit a vulnerability in an item of software on said machine, said analyzing determining that said attempted attack is being made through said advertisement; and</claim-text>
<claim-text>using analysis of said crash data to take one or more actions, wherein said one or more actions either notify a user of a potential threat, notify a software manufacturer of a potential exploit of the manufacturer's software, or take remedial action to mitigate threats from an attack of the kind that was identified, said one or more actions further notifying said advertisement provider that a customer of said advertisement provider is using said advertisement provider to deliver weaponized advertisements, said one or more actions further comprising downloading code that is known to be malware from a site that is discovered through said crash data, and developing an anti-virus signature of said malware.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The method of <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein said analyzing comprises:
<claim-text>identifying a network address of a server that is attempting to exploit said vulnerability.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The method of <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein said acts further comprise:
<claim-text>notifying a user of said machine of an update to said item of software that is resistant to attacks of said kind.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. The method of <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein said crash data reveals a mechanism by which an attempt to exploit said vulnerability in said item of software is being made, and wherein said acts further comprise:
<claim-text>preventing or monitoring use of said mechanism.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. The method of <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein said acts further comprise:
<claim-text>crawling web sites to discover which web sites are hosting attacks of said kind, and which web sites contain links to web sites that are hosting attacks of said kind. </claim-text>
</claim-text>
</claim>
</claims>
</us-patent-grant>

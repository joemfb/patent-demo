<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08627024-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08627024</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>12957285</doc-number>
<date>20101130</date>
</document-id>
</application-reference>
<us-application-series-code>12</us-application-series-code>
<us-term-of-grant>
<us-term-extension>416</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>12</main-group>
<subgroup>16</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>711162</main-classification>
<further-classification>711161</further-classification>
<further-classification>711169</further-classification>
<further-classification>714  61</further-classification>
<further-classification>714  623</further-classification>
</classification-national>
<invention-title id="d2e53">Snapshot based replication</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>6829687</doc-number>
<kind>B2</kind>
<name>Pai</name>
<date>20041200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>711162</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>7092976</doc-number>
<kind>B2</kind>
<name>Curran et al.</name>
<date>20060800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>7174430</doc-number>
<kind>B1</kind>
<name>O'Krafka et al.</name>
<date>20070200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>711141</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>7668876</doc-number>
<kind>B1</kind>
<name>Kulkarni</name>
<date>20100200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>7769722</doc-number>
<kind>B1</kind>
<name>Bergant</name>
<date>20100800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>8209511</doc-number>
<kind>B2</kind>
<name>Tomita et al.</name>
<date>20120600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>711165</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>2003/0182322</doc-number>
<kind>A1</kind>
<name>Manley</name>
<date>20030900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>2004/0162858</doc-number>
<kind>A1</kind>
<name>Messer</name>
<date>20040800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>2004/0215904</doc-number>
<kind>A1</kind>
<name>Gopisetty et al.</name>
<date>20041000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>711153</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>2004/0267830</doc-number>
<kind>A1</kind>
<name>Wong</name>
<date>20041200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>2005/0033936</doc-number>
<kind>A1</kind>
<name>Nakano et al.</name>
<date>20050200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>711170</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>2009/0037418</doc-number>
<kind>A1</kind>
<name>Xu et al.</name>
<date>20090200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707  8</main-classification></classification-national>
</us-citation>
</us-references-cited>
<number-of-claims>8</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>711162</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>711161</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>711169</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>714  6</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>714  6231</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>6</number-of-drawing-sheets>
<number-of-figures>6</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20120137094</doc-number>
<kind>A1</kind>
<date>20120531</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Gupta</last-name>
<first-name>Karan</first-name>
<address>
<city>San Jose</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Haskin</last-name>
<first-name>Roger L</first-name>
<address>
<city>Morgan Hill</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="003" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Sarkar</last-name>
<first-name>Prasenjit</first-name>
<address>
<city>San Jose</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="004" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Subhraveti</last-name>
<first-name>Dinesh K.</first-name>
<address>
<city>Milpitas</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Gupta</last-name>
<first-name>Karan</first-name>
<address>
<city>San Jose</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Haskin</last-name>
<first-name>Roger L</first-name>
<address>
<city>Morgan Hill</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="003" designation="us-only">
<addressbook>
<last-name>Sarkar</last-name>
<first-name>Prasenjit</first-name>
<address>
<city>San Jose</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="004" designation="us-only">
<addressbook>
<last-name>Subhraveti</last-name>
<first-name>Dinesh K.</first-name>
<address>
<city>Milpitas</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Lieberman &#x26; Brandsdorfer, LLC</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>International Business Machines Corporation</orgname>
<role>02</role>
<address>
<city>Armonk</city>
<state>NY</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Yu</last-name>
<first-name>Jae</first-name>
<department>2185</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">Embodiments of the invention relate to data replication and block allocation in a file system to support write transactions. Regions in a cluster file system are defined to support a block allocation. Blocks in the defined regions are allocated to support the data replication. A pipeline manager is provided to schedule population of the blocks in the allocated region(s) based upon network characteristics.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="99.82mm" wi="157.06mm" file="US08627024-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="185.17mm" wi="147.40mm" file="US08627024-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="244.77mm" wi="155.11mm" file="US08627024-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="174.92mm" wi="173.65mm" file="US08627024-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="199.31mm" wi="187.79mm" file="US08627024-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="158.75mm" wi="111.25mm" orientation="landscape" file="US08627024-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="245.45mm" wi="192.87mm" file="US08627024-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">BACKGROUND</heading>
<p id="p-0002" num="0001">This invention relates to data storage in a computer system environment. More specifically, the invention relates to data replication and block allocation in a file system to support read and write transactions.</p>
<p id="p-0003" num="0002">A data storage block or a storage block, herein after referred to as a block, refers to specific areas of address space on a storage device. For example, one data block may be a collection of sectors or bytes in an area of disk space. Blocks are manipulated as units. Large block allocations allow a large amount of data to be retrieved in a single I/O transaction. In one embodiment, a block is a fixed-size unit of data that is transferred together. A file system is a collection of file data maintained by an implementation that stores, organizes, and maintains file data in a file and/or directory hierarchy. File systems employ techniques to write data to storage media using block allocation techniques. Typically, a storage system provides access to information that is stored on one or more storage devices connected to the storage system. Access to the information is possible by organizing the storage devices into volumes, which logically organize the information stored on the storage devices.</p>
<p id="p-0004" num="0003">The storage system may be further configured to operate according to a client/server model of information delivery to thereby allow many clients to access data containers stored on the system. In this model, the client may employ an application, such as a database application, executing on a computer that connects to the storage system over a computer network. Each client may request the services of the storage system by issuing file-based protocol messages to the system over the network. A plurality of storage systems may be interconnected to provide a storage system environment configured to service many clients. Each storage system may be configured to service one or more volumes, wherein each volume stores one or more data containers.</p>
<heading id="h-0002" level="1">BRIEF SUMMARY</heading>
<p id="p-0005" num="0004">This invention comprises a system and article for pipelining replication of data across a cluster file system.</p>
<p id="p-0006" num="0005">In one aspect, a computer system is provided with a cluster file system having multiple server nodes in communication across a network. The cluster file system includes a first data storage local to a first server node, a second data storage local to a second server node, and a third data storage local to a third server node. A write manager is provided to write a first copy of data from a client machine to the first data storage local to the first server node in the cluster. In addition, a pipeline manager is provided in communication with both the write manager and an allocation manager. Prior to replication, the allocation manager allocates storage for a second copy of the data on the second data storage local to the second server node and allocates storage for a third copy of the data on the third data storage local to the third server node. Following the allocation by the allocation manager, the pipeline manager schedules population of the second data storage and the third data storage with the first copy of the data based upon network characteristics.</p>
<p id="p-0007" num="0006">In another aspect, a computer program product is provided with a computer readable storage medium having embodied computer readable program code. More specifically, computer readable program code is provided to write a first copy of data on a first data storage local to a first server node. In addition, computer readable program code is provided to pipeline replication of the first copy of data. The replication includes allocating storage for a second copy of the data on a second data storage local to a second server node and allocating storage for a third copy of the data on a third data storage local to a third server node. Computer readable program code is also provided to schedule population of the allocated storage on both the second and third data storage with the first copy of data local to the first server node. The aspect of populating the allocated storage is executed based upon network characteristics.</p>
<p id="p-0008" num="0007">Other features and advantages of this invention will become apparent from the following detailed description of the presently preferred embodiment of the invention, taken in conjunction with the accompanying drawings.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE SEVERAL VIEWS OF THE DRAWINGS</heading>
<p id="p-0009" num="0008">The drawings referenced herein form a part of the specification. Features shown in the drawings are meant as illustrative of only some embodiments of the invention, and not of all embodiments of the invention unless otherwise explicitly indicated. Implications to the contrary are otherwise not to be made.</p>
<p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. 1</figref> is a flow chart illustrating a general process for writing data to data storage.</p>
<p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. 2</figref> is a flow chart illustrating use of pointers employed in data replication.</p>
<p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. 3</figref> is a flow chart illustrating receipt of a read transaction at a data replication site.</p>
<p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. 4</figref> is a flow chart illustrating processing of a read transaction and re-direction thereof.</p>
<p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. 5</figref> is a block diagram of a computer system with tools to support replication of a write transaction in a cluster file system, according to the preferred embodiment of this invention, and is suggested for printing on the first page of the issued patent.</p>
<p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. 6</figref> is a block diagram showing a system for implementing an embodiment of the present invention</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0004" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0016" num="0015">It will be readily understood that the components of the present invention, as generally described and illustrated in the Figures herein, may be arranged and designed in a wide variety of different configurations. Thus, the following detailed description of the embodiments of the apparatus, system, and method of the present invention, as presented in the Figures, is not intended to limit the scope of the invention, as claimed, but is merely representative of selected embodiments of the invention.</p>
<p id="p-0017" num="0016">The functional units described in this specification have been labeled as managers, server, and clients. A functional unit may be implemented in programmable hardware devices such as field programmable gate arrays, programmable array logic, programmable logic devices, or the like. The functional unit may also be implemented in software for processing by various types of processors. An identified functional unit of executable code may, for instance, comprise one or more physical or logical blocks of computer instructions which may, for instance, be organized as an object, procedure, function, or other construct. Nevertheless, the executables of an identified functional unit need not be physically located together, but may comprise disparate instructions stored in different locations which, when joined logically together, comprise the functional unit and achieve the stated purpose of the functional unit.</p>
<p id="p-0018" num="0017">Indeed, a functional unit of executable code could be a single instruction, or many instructions, and may even be distributed over several different code segments, among different applications, and across several memory devices. Similarly, operational data may be identified and illustrated herein within the functional unit, and may be embodied in any suitable form and organized within any suitable type of data structure. The operational data may be collected as a single data set, or may be distributed over different locations including over different storage devices, and may exist, at least partially, as electronic signals on a system or network.</p>
<p id="p-0019" num="0018">Reference throughout this specification to &#x201c;a select embodiment,&#x201d; &#x201c;one embodiment,&#x201d; or &#x201c;an embodiment&#x201d; means that a particular feature, structure, or characteristic described in connection with the embodiment is included in at least one embodiment of the present invention. Thus, appearances of the phrases &#x201c;a select embodiment,&#x201d; &#x201c;in one embodiment,&#x201d; or &#x201c;in an embodiment&#x201d; in various places throughout this specification are not necessarily referring to the same embodiment.</p>
<p id="p-0020" num="0019">Furthermore, the described features, structures, or characteristics may be combined in any suitable manner in one or more embodiments. In the following description, numerous specific details are provided, such as examples of managers (write manager, allocation manager, pipeline manager, etc., to provide a thorough understanding of embodiments of the invention. One skilled in the relevant art will recognize, however, that the invention can be practiced without one or more of the specific details, or with other methods, components, materials, etc. In other instances, well-known structures, materials, or operations are not shown or described in detail to avoid obscuring aspects of the invention.</p>
<p id="p-0021" num="0020">The illustrated embodiments of the invention will be best understood by reference to the drawings, wherein like parts are designated by like numerals throughout. The following description is intended only by way of example, and simply illustrates certain selected embodiments of devices, systems, and processes that are consistent with the invention as claimed herein.</p>
<p id="p-0022" num="0021">A cluster file system is an enterprise storage file system which can be concurrently accessed for reading and writing by multiple computers. More specifically, in such file systems the computers are in the form of cluster servers which connect to an underlying storage device. There are different architectural approaches to a shared disk file system, including distribution of file information across all the servers in the cluster to provide a consistent file system image across the cluster servers. Each storage device in the storage file system has a plurality of blocks; each block is a fixed size unit of data on a storage device. Data is written to storage in groupings of blocks, and is similarly read from storage in groupings of blocks. In one embodiment, file systems address data in blocks which contain a certain number of disk sectors; the smallest amount of disk space that can be allocated for reading and writing.</p>
<p id="p-0023" num="0022">The cluster file system configured with commodity components commonly employ a triple replication scheme. Although not universally employed, and not required, this replication scheme provides resiliency in the event of failure of one or more nodes in the cluster. Replicating data across the cluster is desirable in order to support resiliency. At the same time, it is beneficial to replicate the data in a manner that reduces or otherwise has a negligible affect on network bandwidth. It is understood that in one embodiment, data may be replicated more than three times.</p>
<p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. 1</figref> is a flow chart (<b>100</b>) illustrating the general process for writing data to data storage and allocating blocks of data in a cluster file system to support replication of the data across the cluster. Initially, a client machine in communication with the cluster file system writes data to a first data storage local to a first server node in the cluster (<b>102</b>). Once the writing of data is completed at step (<b>102</b>), there is an initial copy of the data stored in the cluster file system. To replicate the data across the cluster, storage blocks are allocated on data storage remote from the first server. More specifically, storage blocks are allocated on a second data storage local to a second server node in the cluster (<b>104</b>). The process of allocating blocks on the second data storage reserves space for the data replication. Following step (<b>104</b>), a second pointer is created to direct any read requests for the data received by the second server to the first server (<b>106</b>). The basis for the second pointer is that until the data replication has been completed, the second server cannot service any requests to read the data. As such, all read requests must be direct to the server node local to the data storage housing the data, and not merely containing allocated storage blocks.</p>
<p id="p-0025" num="0024">As noted above, the replication scheme employed herein is a triple replication scheme, and as such storage blocks are allocated on a third data storage local to a third server node and remote from the first and second server nodes (<b>108</b>). Following step (<b>108</b>), a third pointer is created to direct any read requests for the data received by the third server to the first server (<b>110</b>). Although the server nodes are referred to herein as first, second, and third server nodes, it is noted that the cluster file system may include a greater quantity of server nodes and should not be limited to the three discussed herein. It is further noted that the identification of first, second, and third is merely to identify that such actions are taking place on three separate and distinct server nodes in the cluster file system. In one embodiment, the replication system may be expanded to include a quantity greater than or less than the three described herein. Accordingly, for each server node hosting a replication of the data, storage blocks are allocated to accommodate the replication, and a pointer is created to direct all read requests to the first server node until such time as the replication on the respective secondary server nodes is complete.</p>
<p id="p-0026" num="0025">Once the data replication is completed, the pointer re-directing read requests may be removed. <figref idref="DRAWINGS">FIG. 2</figref> is a flow chart (<b>200</b>) illustrating a process for removal of the pointers created local to the secondary server nodes in conjunction with the block allocation. A test is conducted to determine opportunistic network availability for replication of the data from the data storage local to the first server node to the second data storage local to the second server (<b>202</b>). In one embodiment, opportunistic network availability is based upon network bandwidth. For example, it is generally desirable to utilize network bandwidth for replication transactions at a time when the network is under-utilized. A positive response to the determination at step (<b>202</b>) is followed by a background replication of the data from the data storage local to the first server node to the data storage local to the second server node (<b>204</b>). Time for completion of the replication will vary depending upon both the network bandwidth and the size of the transaction. Following step (<b>204</b>), it is determined if the replication started at step (<b>202</b>) is completed (<b>206</b>).</p>
<p id="p-0027" num="0026">A positive response to the determination at step (<b>206</b>) is following by removal of the pointer (<b>208</b>). Until the replication of the data from the data storage local to the first server node is complete, the pointer from the second data storage to the first data storage is not removed. As such, a negative response to the determination at step (<b>206</b>) is followed by waiting for a period of time while the replication continues (<b>210</b>). When the period of time at step (<b>210</b>) is completed, the process returns to step (<b>206</b>). In one embodiment, the period of time employed at step (<b>210</b>) may be either a fixed period of time or a modifiable period of time. Similarly, in one embodiment, the pointer in the data storage is replaced by a flag in metadata space of the allocated storage blocks. In one embodiment, the presence of the flag indicates that the data replication is completed and the data is available. Alternatively, in one embodiment, the flag may be configured such that the presence of the flag indicates that the data replication is not complete and data access is only available at the first data storage.</p>
<p id="p-0028" num="0027">In one embodiment, replication of the data in the cluster file system is performed on a serial basis. More specifically, once the replication of the data on the second data storage is completed, a second copy of the data for replication on the third data storage is started. As illustrated, following removal of the pointer at step (<b>208</b>), it is determined if there is an opportunistic network availability for replication of the data from the data storage local to the first server node to the third data storage local to the third server (<b>212</b>). A positive response to the determination at step (<b>212</b>) is followed by a background replication of the data from the data storage local to the first node to the data storage local to the third server (<b>214</b>). In one embodiment, the replication at step (<b>214</b>) may be from the first copy of the data local to the second server to the data storage local to the third server. Regardless of the embodiment employed, time for completion of the replication will vary depending upon both the network bandwidth and the size of the transaction.</p>
<p id="p-0029" num="0028">Following step (<b>214</b>), it is determined if the replication started at step (<b>212</b>) is completed (<b>216</b>). A positive response to the determination at step (<b>216</b>) is followed by removal of the pointer (<b>218</b>). Until the replication of the data from the data storage local to the third data storage is completed, the pointer from the third data storage cannot be removed. As such, a negative response to the determination at step (<b>216</b>) is followed by waiting for a period of time while the replication continues (<b>220</b>). When the period of time at step (<b>220</b>) is completed, the process returns to step (<b>216</b>). In one embodiment, the period of time employed at step (<b>220</b>) may be either a fixed period of time or a modifiable period of time. Similarly, in one embodiment, the pointer in the third data storage is in the form of a flag in the metadata of the allocated storage blocks of the third data storage. In one embodiment, the presence of the flag indicates that the data replication is completed and the data is available. Alternatively, in one embodiment, the flag may be configured such that the presence of the flag indicates that the data replication is not complete and data access is only available to support a read transaction at the first or second data storage locations. Accordingly, as demonstrated in <figref idref="DRAWINGS">FIG. 2</figref>, storage blocks are allocated and a tool is employed as an indicator when replication is completed to the allocated storage blocks.</p>
<p id="p-0030" num="0029">In both steps (<b>202</b>) and (<b>212</b>), it is demonstrated that the replication does not occur on demand, rather the replication occurs during network bandwidth availability. For example, the replication process may be considered a lazy replication scheme that permits the replication to occur during network down-time to improve write performance for large write transaction. This is a compromise between availability of the data to reduce network traffic and write latency. A negative response to the determinations reflected at steps (<b>202</b>) and (<b>212</b>) are followed by a delay of a time interval (<b>222</b>) and (<b>224</b>), respectively. In one embodiment, the time interval may reflect a set period of time. However, in one embodiment, the time interval at steps (<b>222</b>) and (<b>224</b>) reflects a dynamic approach wherein the process of replication continues when the network bandwidth is available.</p>
<p id="p-0031" num="0030">There are two categories of transactions between a client machine and a server node, including a write transaction and a read transaction. In a write transaction, data may be written to data storage, and then replicated across the cluster; in a read transaction, stored data may be read from data storage. As explained with respect to data replication, there may be limitations associated with reading data, including but not limited to completion of data replication, load on a specific data storage, and network bandwidth. <figref idref="DRAWINGS">FIG. 3</figref> is a flow chart (<b>300</b>) illustrating a read request directed to the data storage local to the second server node. As shown, a read request directed from a client to the second data storage is received by the second server (<b>302</b>). Following receipt of the request, it is determined whether there is a pointer, or another form of an indicator, present with respect to the second data storage indicating that the replication of data to the allocated storage blocks is completed (<b>304</b>). A positive response to the determination at step (<b>304</b>) is followed by re-directing the request to data storage local to the first server node (<b>306</b>). Conversely, a negative response to the determination at step (<b>306</b>) is followed by the second server completing the read request for the requesting client (<b>308</b>).</p>
<p id="p-0032" num="0031">As demonstrated in the write transaction, a minimum of three copies of data are maintained in the cluster, thereby requiring two replications. <figref idref="DRAWINGS">FIG. 4</figref> is a flow chart (<b>400</b>) demonstrating processing of a read transaction received from a client machine when there is at least one replication of the data in the cluster. A read transaction directed to the third data storage is received by the third server (<b>402</b>). Following receipt of the transaction, it is determined whether there is a pointer, or another form of an indicator, present with respect to the third data storage indicating that the replication of data to the allocated storage blocks is completed (<b>404</b>). If it is determined at step (<b>404</b>) that the replication is complete, i.e. absence of the pointer, the third server completes the read transaction for the requesting client (<b>406</b>). Conversely, if at step (<b>404</b>) it is determined that the replication is not complete, i.e. presence of the pointer, the read transaction may be directed to either the second server or the third server which may process the request. It should be noted that in one embodiment, if both the second and third server fail to process the request, an error may be returned.</p>
<p id="p-0033" num="0032">In one embodiment, the load of the first and second servers is compared to determine an optimal candidate to satisfy the read transaction (<b>408</b>). If the load of the first server is less than the load of the second server, then the read request is re-directed to the first server to satisfy the read transaction (<b>410</b>). Conversely, if the load of the second server is less than the load of the first server, then the read transaction is re-directed to the second server to satisfy the read transaction (<b>412</b>). Accordingly, in a cluster with at least one replication of the data complete, one of two servers may be available to satisfy the read transaction and to maintain load balance between the two available servers.</p>
<p id="p-0034" num="0033">Data replicated across the cluster is employed for reliability while optimizing performance. For example, in an embodiment with three replications of the data, each copy is on a different data storage local to a different server in the cluster. A read transaction to either the second or third server node solicits the status of the respective replication and/or evaluates load on the respective servers to assess which server should process the read transaction while maintaining a load balance of the servers. Accordingly, the read transaction is directed to one of the server nodes in the cluster that is optimal for servicing the transaction based upon one or more factors.</p>
<p id="p-0035" num="0034">As demonstrated in the flow charts of <figref idref="DRAWINGS">FIGS. 1-4</figref>, a method is employed to support replication of a write transaction across server nodes of a cluster file system, and to support a read transaction from the data storage designated for storing data of the write transaction. <figref idref="DRAWINGS">FIG. 5</figref> is a block diagram (<b>500</b>) illustrating tools embedded in a computer system to support replication of a write transaction across one or more server nodes of the cluster file system. More specifically, a cluster file system is shown mounted on multiple servers (<b>510</b>), (<b>530</b>), and (<b>550</b>). A clustered file system is a file system that is simultaneously mounted on multiple servers. Although three servers are shown in the example herein, the invention should not be limited to this quantity of servers in the clustered file system. Similarly, although only one cluster is shown herein, in one embodiment, there may be multiple clusters provided with cross-cluster communication supported over a network connection.</p>
<p id="p-0036" num="0035">Each of the servers in the system is provided with local data storage, and at the same time may communicate with remote storage on an intra-cluster or an inter-cluster basis. More specifically, a first server (<b>510</b>) is provided with a processing unit (<b>504</b>), in communication with memory (<b>506</b>) across a bus (<b>508</b>) and in communication with a first data storage (<b>512</b>); a second server (<b>530</b>) is provided with a processing unit (<b>534</b>), in communication with memory (<b>536</b>) across a bus (<b>538</b>), in communication with a second data storage (<b>542</b>); and a third server (<b>550</b>) is provided with a processing unit (<b>554</b>), in communication with memory (<b>556</b>) across a bus (<b>558</b>), in communication with a third data storage (<b>562</b>). At the same time, the first server (<b>510</b>) may communicate with remote data storage (<b>542</b>) and (<b>562</b>) across a network connection (<b>505</b>), the second server (<b>530</b>) may communicate with remote data storage (<b>512</b>) and (<b>562</b>) across network connection (<b>505</b>), and the third server (<b>550</b>) may communicate with remote data storage (<b>512</b>) and (<b>542</b>) across network connection (<b>505</b>).</p>
<p id="p-0037" num="0036">In the example shown herein, each of the data storages (<b>512</b>), (<b>542</b>), and (<b>562</b>) are configured to receive a request to store data from the respective server (<b>510</b>), (<b>530</b>), and (<b>560</b>). More specifically, a client machine (<b>570</b>) is provided in communication with the server nodes (<b>510</b>), (<b>530</b>), and (<b>560</b>). The client machine (<b>570</b>) is provided with a processing unit (<b>574</b>) in communication with memory (<b>576</b>) across a bus (<b>578</b>). The client machine (<b>570</b>) may communicate with the server nodes for both read and write transactions. Although only one client machine (<b>570</b>) is shown in the example to support read and write transactions with the cluster, the invention should not be limited to the quantity shown herein. In one embodiment, there may be two or more client machines in communication with the cluster. Similarly, the invention should not be limited to the quantity of server nodes shown herein, the quantity of data replications across the cluster, or the quantity of clusters shown herein. Each of these factors is variable.</p>
<p id="p-0038" num="0037">Within the cluster file system, a write manager is provided to write a copy of data received from the client machine (<b>570</b>) to data storage local to one of the server nodes in the cluster. In the example shown herein, server node (<b>510</b>) is configured with a write manager (<b>520</b>) is local to memory (<b>506</b>) of server (<b>510</b>). Similarly, server (<b>530</b>) is configured with write manager (<b>540</b>) local to memory (<b>546</b>), and server (<b>550</b>) is configured with write manager (<b>560</b>) local to memory (<b>556</b>). Each write manager (<b>520</b>), (<b>540</b>) and (<b>560</b>) is local to the respective server and is configured to communicate with the client machine (<b>570</b>) to write a first copy of data received from the client machine to local data storage of the respective server.</p>
<p id="p-0039" num="0038">To support the replication of data received in the cluster file system, an allocation manager is provided local to each of the server nodes. In the example shown herein, server node (<b>510</b>) is provided with an allocation manager (<b>524</b>) to communicate with the write manager (<b>520</b>) in order to allocate storage space on the first storage device (<b>512</b>). Similarly, allocation manager (<b>544</b>) is provided to communicate with write manager (<b>540</b>) to allocate storage space on the second storage device (<b>542</b>), and allocation manager (<b>564</b>) is provided to communicate with write manager (<b>560</b>) to allocate storage space on the third storage device (<b>562</b>). Accordingly, each allocation manager functions with the respective write manager to support and ensure that there is a sufficient block allocation to support a write transaction and replication.</p>
<p id="p-0040" num="0039">As noted above, the allocation manager may be distributed locally to each server node to enable local management of data block allocation. In one embodiment, the allocation manager may be local to one server node in the cluster file system designated to manage allocation of data blocks to support replication of a write transaction across the cluster. In addition to the write and allocation managers, a pipeline manager is provided to communicate with the allocation manager(s) for opportunistically scheduling population of the allocated data blocks to support replication of data. More specifically, the pipeline manager is responsible for determining an appropriate time for the replication process to take place across the cluster in a manner that takes advantage of available network bandwidth. In one embodiment, the pipeline manager invokes a technique to begin executing a second instruction for replication of allocated data blocks before a first instruction for replication of allocated data blocks has been completed. With respect to this embodiment, several instructions are in the pipeline simultaneously, with each instruction at a different processing stage. In an embodiment without a set of distributed allocation managers, a pipeline manager (<b>526</b>) is provided local to server node (<b>510</b>) and in local communication with the local allocation manager (<b>524</b>). Similarly, in an embodiment with distributed allocation manager(s), pipeline manager(s) (<b>546</b>) and (<b>566</b>) are each provided in communication with each of the distributed allocation managers (<b>544</b>) and (<b>564</b>), respectively, to facilitate the process of scheduling the population of the allocated storage blocks.</p>
<p id="p-0041" num="0040">Following the block allocation and prior to population of the allocated blocks, a pointer is employed to direct a read transaction to a location where the data is stored. More specifically, until such time as the data replication is completed, the local server node cannot process and support a read transaction directed to the replicated data. A pointer is created local to each server node with a data block allocation to support the data replication. In one embodiment, a metadata flag is employed in place of a pointer. As shown, in <figref idref="DRAWINGS">FIG. 5</figref> by way of example, server nodes (<b>530</b>) and (<b>550</b>) are each designated to receive a copy of the replicated data. Pointer (<b>548</b>) is established at server node (<b>530</b>) upon completing the block allocation. Similarly, a pointer (<b>568</b>) is established at server node (<b>550</b>) upon completing the block allocation. Each of the pointers (<b>548</b>) and (<b>568</b>) functions to re-direct a read of the non-replicated data to the source server node (<b>510</b>). At such time as the allocated blocks have received the replicated data, the local pointer is removed by the respective allocation manager so that a read transaction may be serviced locally. More specifically, when the data replication on data storage (<b>542</b>) is completed, pointer (<b>548</b>) is removed by allocation manager (<b>544</b>), and, when the data replication on data storage (<b>562</b>) is completed, pointer (<b>568</b>) is removed by allocation manager (<b>564</b>).</p>
<p id="p-0042" num="0041">To ensure a proper direction for a read transaction is satisfied, a read manager is provided to self direct a read transaction to a location configured to satisfy the request. As shown, the read manager is local to the respective server node. More specifically, read manager (<b>528</b>) is provided local to server node (<b>510</b>), read manager (<b>580</b>) is provided local to server node (<b>530</b>), and read manager (<b>582</b>) is provided local to server node (<b>550</b>). After pointer (<b>548</b>) is removed by allocation manager (<b>544</b>), read manager (<b>580</b>) self directs a read request to server node (<b>530</b>). Similarly, after pointer (<b>568</b>) is removed by allocation manager (<b>564</b>), read manager (<b>582</b>) self directs a read request to server node (<b>550</b>).</p>
<p id="p-0043" num="0042">The components shown and demonstrated herein for a single cluster configuration may be extrapolated across each cluster in the network. In a multi-cluster configuration, a tool may be employed to select one of the clusters to write the data replication. For example, if one of the clusters in the network has characteristics that exhibit likelihood to fail, the tool may select a different cluster to write the second and/or third copy of data. Selection of available data blocks takes into consideration metadata transactions and likelihood of failure of a cluster. By writing data to data storage of a different but more stable cluster, the likelihood of access to and availability of the data is increased.</p>
<p id="p-0044" num="0043">As identified above, the write managers (<b>520</b>), (<b>540</b>), and (<b>560</b>), allocation managers (<b>524</b>), (<b>544</b>), and (<b>564</b>), pipeline manager (<b>526</b>), (<b>546</b>), and (<b>566</b>), and read managers (<b>580</b>) and (<b>582</b>) function to manage data replication in a cluster file system to support a write transaction which creates two or more copies of the data. The managers are shown residing in memory local to the server or client machine. More specifically, write manager (<b>520</b>), allocation manager (<b>524</b>), and pipeline manager (<b>526</b>) each reside in memory (<b>506</b>) of server (<b>510</b>); write manager (<b>540</b>), allocation manager (<b>544</b>), pipeline manager (<b>546</b>), and read manager (<b>580</b>) each reside in memory (<b>536</b>) of server (<b>530</b>); and write manager (<b>560</b>), allocation client (<b>564</b>), pipeline manager (<b>566</b>), and read manager (<b>582</b>) each reside in memory (<b>556</b>) of server (<b>550</b>). In one embodiment, the write manager(s), allocation manager(s), pipeline manager(s), and read manager(s) may reside as hardware tools external to memory of their respective server, or they may be implemented as a combination of hardware and software. Similarly, in one embodiment, the managers may be combined into a single functional item that incorporates the functionality of the separate items. As shown herein, each of the manager(s) are shown local to the respective servers. However, in one embodiment they may be collectively or individually distributed across the network and function as a unit to manage block allocation and data replication in support of a write transaction. Accordingly, the managers may be implemented as software tools, hardware tools, or a combination of software and hardware tools, to collect and organize data content.</p>
<p id="p-0045" num="0044">As will be appreciated by one skilled in the art, aspects of the present invention may be embodied as a system, method or computer program product. Accordingly, aspects of the present invention may take the form of an entirely hardware embodiment, an entirely software embodiment (including firmware, resident software, micro-code, etc.) or an embodiment combining software and hardware aspects that may all generally be referred to herein as a &#x201c;circuit,&#x201d; &#x201c;module&#x201d; or &#x201c;system.&#x201d; Furthermore, aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium(s) having computer readable program code embodied thereon.</p>
<p id="p-0046" num="0045">Any combination of one or more computer readable medium(s) may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be, for example, but not limited to, an electronic, magnetic, optical, electromagnetic, infrared, or semiconductor system, apparatus, or device, or any suitable combination of the foregoing. A non-exhaustive lost of more specific examples of the computer readable storage medium would include the following: an electrical connection having one or more wires, a portable computer diskette, a hard disk, a random access memory (RAM), a read-only memory (ROM), an erasable programmable read-only memory (EPROM or Flash memory), an optical fiber, a portable compact disc read-only memory (CD-ROM), an optical storage device, a magnetic storage device, or any suitable combination of the foregoing. In the context of this document, a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system, apparatus, or device.</p>
<p id="p-0047" num="0046">A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein, for example, in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms, including, but not limited to, electro-magnetic, optical, or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate, propagate, or transport a program for use by or in connection with an instruction execution system, apparatus, or device.</p>
<p id="p-0048" num="0047">Program code embodied on a computer readable medium may be transmitted using any appropriate medium, including but not limited to wireless, wireline, optical fiber cable, RF, etc., or any suitable combination of the foregoing.</p>
<p id="p-0049" num="0048">Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages, including an object oriented programming language such as Java, Smalltalk, C++ or the like and conventional procedural programming languages, such as the &#x201c;C&#x201d; programming language or similar programming languages. The program code may execute entirely on the user's computer, partly on the user's computer, as a stand-alone software package, partly on the user's computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario, the remote computer may be connected to the user's computer through any type of network, including a local area network (LAN) or a wide area network (WAN), or the connection may be made to an external computer (for example, through the Internet using an Internet Service Provider).</p>
<p id="p-0050" num="0049">Aspects of the present invention are described below with reference to flowchart illustrations and/or block diagrams of methods, apparatus (systems) and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and/or block diagrams, and combinations of blocks in the flowchart illustrations and/or block diagrams, can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer, special purpose computer, or other programmable data processing apparatus to produce a machine, such that the instructions, which execute via the processor of the computer or other programmable data processing apparatus, create means for implementing the functions/acts specified in the flowchart and/or block diagram block or blocks.</p>
<p id="p-0051" num="0050">These computer program instructions may also be stored in a computer readable medium that can direct a computer, other programmable data processing apparatus, or other devices to function in a particular manner, such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function/act specified in the flowchart and/or block diagram block or blocks.</p>
<p id="p-0052" num="0051">The computer program instructions may also be loaded onto a computer, other programmable data processing apparatus, or other devices to cause a series of operational steps to be performed on the computer, other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions/acts specified in the flowchart and/or block diagram block or blocks.</p>
<p id="p-0053" num="0052">Referring now to <figref idref="DRAWINGS">FIG. 6</figref> is a block diagram showing a system for implementing an embodiment of the present invention. The computer system includes one or more processors, such as a processor (<b>602</b>). The processor (<b>602</b>) is connected to a communication infrastructure (<b>604</b>) (e.g., a communications bus, cross-over bar, or network).</p>
<p id="p-0054" num="0053">The computer system can include a display interface (<b>606</b>) that forwards graphics, text, and other data from the communication infrastructure (<b>604</b>) (or from a frame buffer not shown) for display on a display unit (<b>608</b>). The computer system also includes a main memory (<b>610</b>), preferably random access memory (RAM), and may also include a secondary memory (<b>612</b>). The secondary memory (<b>612</b>) may include, for example, a hard disk drive (<b>614</b>) and/or a removable storage drive (<b>616</b>), representing, for example, a floppy disk drive, a magnetic tape drive, or an optical disk drive. The removable storage drive (<b>616</b>) reads from and/or writes to a removable storage unit (<b>618</b>) in a manner well known to those having ordinary skill in the art. Removable storage unit (<b>618</b>) represents, for example, a floppy disk, a compact disc, a magnetic tape, or an optical disk, etc., which is read and written by a removable storage drive (<b>616</b>). As will be appreciated, the removable storage unit (<b>618</b>) includes a computer readable medium having stored therein computer software and/or data.</p>
<p id="p-0055" num="0054">In alternative embodiments, the secondary memory (<b>612</b>) may include other similar means for allowing computer programs or other instructions to be loaded into the computer system. Such means may include, for example, a removable storage unit (<b>620</b>) and an interface (<b>622</b>). Examples of such means may include a program package and package interface (such as that found in video game devices), a removable memory chip (such as an EPROM, or PROM) and associated socket, and other removable storage units (<b>620</b>) and interfaces (<b>622</b>) which allow software and data to be transferred from the removable storage unit (<b>620</b>) to the computer system.</p>
<p id="p-0056" num="0055">The computer system may also include a communications interface (<b>624</b>). Communications interface (<b>624</b>) allows software and data to be transferred between the computer system and external devices. Examples of communications interface (<b>624</b>) may include a modem, a network interface (such as an Ethernet card), a communications port, or a PCMCIA slot and card, etc. Software and data transferred via communications interface (<b>624</b>) are in the form of signals which may be, for example, electronic, electromagnetic, optical, or other signals capable of being received by communications interface (<b>624</b>). These signals are provided to communications interface (<b>624</b>) via a communications path (i.e., channel) (<b>626</b>). This communications path (<b>626</b>) carries signals and may be implemented using wire or cable, fiber optics, a phone line, a cellular phone link, a radio frequency (RF) link, and/or other communication channels.</p>
<p id="p-0057" num="0056">In this document, the terms &#x201c;computer program medium,&#x201d; &#x201c;computer usable medium,&#x201d; and &#x201c;computer readable medium&#x201d; are used to generally refer to media such as main memory (<b>610</b>) and secondary memory (<b>612</b>), removable storage drive (<b>616</b>), and a hard disk installed in a hard disk drive (<b>614</b>).</p>
<p id="p-0058" num="0057">Computer programs (also called computer control logic) are stored in main memory (<b>610</b>) and/or secondary memory (<b>612</b>). Computer programs may also be received via a communication interface (<b>624</b>). Such computer programs, when run, enable the computer system to perform the features of the present invention as discussed herein. In particular, the computer programs, when run, enable the processor (<b>602</b>) to perform the features of the computer system. Accordingly, such computer programs represent controllers of the computer system.</p>
<p id="p-0059" num="0058">The flowchart and block diagrams in the Figures illustrate the architecture, functionality, and operation of possible implementations of systems, methods and computer program products according to various embodiments of the present invention. In this regard, each block in the flowchart or block diagrams may represent a module, segment, or portion of code, which comprises one or more executable instructions for implementing the specified logical function(s). It should also be noted that, in some alternative implementations, the functions noted in the data replication may occur out of the order noted in the figures. For example, two blocks of the cluster file system shown in succession may, in fact, be executed substantially concurrently, or the blocks may sometimes be executed in the reverse order, depending upon the functionality involved. It will also be noted that each block of the block diagrams and/or flowchart illustration, and combinations of blocks in the block diagrams and/or flowchart illustration, can be implemented by special purpose hardware-based systems that perform the specified functions or acts, or combinations of special purpose hardware and computer instructions.</p>
<p id="p-0060" num="0059">The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein, the singular forms &#x201c;a&#x201d;, &#x201c;an&#x201d; and &#x201c;the&#x201d; are intended to include the plural forms as well, unless the context clearly indicates otherwise. It will be further understood that the terms &#x201c;comprises&#x201d; and/or &#x201c;comprising,&#x201d; when used in this specification, specify the presence of stated features, integers, steps, operations, elements, and/or components, but do not preclude the presence or addition of one or more other features, integers, steps, operations, elements, components, and/or groups thereof.</p>
<p id="p-0061" num="0060">The corresponding structures, materials, acts, and equivalents of all means or step plus function elements in the claims below are intended to include any structure, material, or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present invention has been presented for purposes of illustration and description, but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiment was chosen and described in order to best explain the principles of the invention and the practical application, and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.</p>
<heading id="h-0005" level="1">Alternative Embodiment</heading>
<p id="p-0062" num="0061">It will be appreciated that, although specific embodiments of the invention have been described herein for purposes of illustration, various modifications may be made without departing from the spirit and scope of the invention. In particular, the system can be configured with a central manager or a distributed set of managers to direct the replication of data within the cluster. Similarly, in one embodiment, there may be multiple cluster file systems with replication of the data occurring on an inter-cluster basis. Accordingly, the scope of protection of this invention is limited only by the following claims and their equivalents.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>We claim: </us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A system comprising:
<claim-text>a cluster file system having server nodes in communication across a network, the cluster including a first data storage local to a first server node, a second data storage local to a second server node, and a third data storage local to a third server node;</claim-text>
<claim-text>a write manager to write a first copy of data from a client machine to the first data storage local to the first server node;</claim-text>
<claim-text>an allocation manager in communication with the write manager, the allocation manager to allocate storage for a second copy of the data on the second data storage local to the second server node and to allocate storage for a third copy of the data on the third data storage local to the third server node in response to a pipeline manager replication of the first copy of data, wherein the allocation manager to create a second pointer from the allocated storage of the second server node to the first copy of data and to create a third pointer from the allocated storage of the third server node to the first copy of the data, and further comprising the allocation manager to remove the second pointer following completion of population of the second data storage local to the second server node with the first copy of the data, and to remove the third pointer following completion of population of the third data storage local to the third server node with the first copy of the data; and</claim-text>
<claim-text>the pipeline manager in communication with the allocation manager, the pipeline manager to schedule population of the second data storage and the third data storage with the first copy of the data based upon network characteristics.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising the second pointer to re-direct a second read request from the second server node to the first node, and the third pointer to re-direct a third read request from the third server node to the first server node.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The system of <claim-ref idref="CLM-00002">claim 2</claim-ref>, further comprising a read manager to self direct a read request to the second node following removal of the second pointer, and to self direct a read request to the third node following removal of the third pointer.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein scheduling by the pipeline manager is opportunistic with respect to network bandwidth availability.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. A computer program product, the computer program product comprising a computer readable storage medium having computer readable program code embodied therewith, the computer readable program code comprising:
<claim-text>computer readable program code configured to write a first copy of data on a first data storage local to a first server node;</claim-text>
<claim-text>computer readable program code configured to pipeline replication of the first copy of data on the first server node, including allocating storage for a second copy of the data on a second data storage local to a second server node and allocating storage for a third copy of the data on a third data storage local to a third server node, wherein the computer readable program code to allocate storage further comprising computer readable program code configured to create a second pointer from the allocated storage of the second server node to the first copy of data and to create a third pointer from the allocated storage of the third server node to the first copy of data, and further comprising computer readable program code configured to remove the second pointer following completion of populating the second data storage local to the second server node with the first copy of the data, and computer readable program code to remove the third pointer following completion of populating the third data storage local to the third server node with the first copy of the data; and</claim-text>
<claim-text>computer readable program code configured to schedule populating the allocated storage on the second data storage and the allocated storage on the third data storage with the first copy of the data based upon network characteristics.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The computer program product of <claim-ref idref="CLM-00005">claim 5</claim-ref>, further comprising computer readable program code configured to have the second pointer re-direct a second read request from the second server node to the first node, and the third pointer re-direct a third read request from the third server node to the first server node.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The computer program product of <claim-ref idref="CLM-00006">claim 6</claim-ref>, further comprising computer readable program code configured to self direct a read request to the second node following removal of the second pointer, and to self direct a read request to the third node following removal of the third pointer.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The computer program product of <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein the computer readable program code to schedule populating the second data storage and the third data storage with the first copy of the data is opportunistic with respect to network bandwidth availability. </claim-text>
</claim>
</claims>
</us-patent-grant>

<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08624900-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08624900</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>12757118</doc-number>
<date>20100409</date>
</document-id>
</application-reference>
<us-application-series-code>12</us-application-series-code>
<us-term-of-grant>
<us-term-extension>886</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>T</subclass>
<main-group>11</main-group>
<subgroup>00</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>345471</main-classification>
</classification-national>
<invention-title id="d2e53">Plug-in architecture for dynamic font rendering enablement</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>5579416</doc-number>
<kind>A</kind>
<name>Shibuya et al.</name>
<date>19961100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>382293</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>5619633</doc-number>
<kind>A</kind>
<name>Turner</name>
<date>19970400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>345441</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>6504545</doc-number>
<kind>B1</kind>
<name>Browne et al.</name>
<date>20030100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>345473</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>7453464</doc-number>
<kind>B1</kind>
<name>Acquavella</name>
<date>20081100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>345474</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>7624277</doc-number>
<kind>B1</kind>
<name>Simard et al.</name>
<date>20091100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>713182</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>2004/0196288</doc-number>
<kind>A1</kind>
<name>Han</name>
<date>20041000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>345467</main-classification></classification-national>
</us-citation>
<us-citation>
<nplcit num="00007">
<othercit>Sue Chastain, &#x201c;How to Fill Text with an Image in Photoshop without Rendering the Text,&#x201d; Graphics Software, Sep. 2005, Accessed Jun. 25, 2013, http://wayback.archive.org/web/20050925160845/http://graphicssoft.about.com/cs/photoshop/ht/apspatterntext.htm.</othercit>
</nplcit>
<category>cited by examiner</category>
</us-citation>
<us-citation>
<nplcit num="00008">
<othercit>Bah, Tavmjong, &#x201c;Introduction: Vector Graphics&#x201d;, <i>Inkscape: Guide to a Vector Drawing Program</i>, Retrieved via Internet: &#x3c;http://tavmjong.free.fr/INKSCAPE/MANUAL/html/Introduction-VectorGraphics.html&#x3e; on Apr. 14, 2010, (2005), 2 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00009">
<othercit>The GIMP Documentation Team, &#x201c;Introduction: Welcome to GIMP&#x201d;, <i>GNU Image Manipulation Program User Manual</i>, Retrieved via Internet: &#x3c;http://docs.gimp.org/2.6/en/introduction.html&#x3e; on Apr. 14, 2010, (2002), 2 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00010">
<othercit>Knuth, Donald E., &#x201c;A Punk Meta-Font&#x201d;, TUGboat, vol. 9, No. 2, (1988), pp. 152-168.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>20</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>None</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>5</number-of-drawing-sheets>
<number-of-figures>5</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20110249013</doc-number>
<kind>A1</kind>
<date>20111013</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Jones</last-name>
<first-name>Peter</first-name>
<address>
<city>Arlington</city>
<state>MA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Duffy</last-name>
<first-name>Maureen Emily</first-name>
<address>
<city>Somerville</city>
<state>MA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Jones</last-name>
<first-name>Peter</first-name>
<address>
<city>Arlington</city>
<state>MA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Duffy</last-name>
<first-name>Maureen Emily</first-name>
<address>
<city>Somerville</city>
<state>MA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Lowenstein Sandler LLP</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>Red Hat, Inc.</orgname>
<role>02</role>
<address>
<city>Raleigh</city>
<state>NC</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Richer</last-name>
<first-name>Aaron M</first-name>
<department>2677</department>
</primary-examiner>
<assistant-examiner>
<last-name>Wilson</last-name>
<first-name>Nicholas R</first-name>
</assistant-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">A computer system provides a plug-in architecture for creation of a dynamic font. The computer system can incorporate a new filter function into a filtering layer of a font program. The filtering layer includes pre-defined filter functions to transform a base font into a new font. The computer system applies one or more font rules in the filtering layer to the base font. The font rules are implemented by the new filter function and at least one of the pre-defined filter functions to randomize an appearance of each character in a character string. The character string rendered with the new font has a dynamic and randomized appearance.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="176.53mm" wi="152.74mm" file="US08624900-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="158.16mm" wi="164.68mm" orientation="landscape" file="US08624900-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="213.70mm" wi="192.28mm" file="US08624900-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="217.76mm" wi="134.96mm" file="US08624900-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="188.38mm" wi="151.64mm" file="US08624900-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="229.79mm" wi="170.26mm" file="US08624900-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">TECHNICAL FIELD</heading>
<p id="p-0002" num="0001">Embodiments of the present invention relate to font creation, and more specifically, to the generation and rendering of a dynamic font.</p>
<heading id="h-0002" level="1">BACKGROUND</heading>
<p id="p-0003" num="0002">Typography is the technique of designing and arranging type. The design and arrangement of type involves the selection of typefaces, point size, line length, leading (line spacing), adjusting the spaces between groups of letters (tracking) and adjusting the space between pairs of letters (kerning). Examples of a typeface include &#x201c;Liberation Sans,&#x201d; &#x201c;Times New Roman,&#x201d; &#x201c;Arial,&#x201d; etc. A font has a specific size designation. For example, &#x201c;Liberation Sans 10 point&#x201d; is a font. A font author, designer or creator is a person that writes the software driving the usage of the typeface</p>
<p id="p-0004" num="0003">For artistic effect, font authors may sometimes create fonts with distressed, rough, or otherwise organic effects. Typically, these effects are statically embedded in the fonts. If an end user uses the same character in a sequence, these effects are conspicuously repeated and the illusion of organic effect to the font is broken.</p>
<p id="p-0005" num="0004">To obtain a more dynamic or organic-looking type treatment, a font user often converts a font to vector or bitmap artwork and manually applies the dynamic or organic effects to the type. The process is manual and time-intensive. Further, manipulation of vector or bitmap artwork necessitates the work of a skilled artist, which means automation of the effects would be extremely difficult. Additionally, an end user, who simply wishes to consume a font without an intimate knowledge of font creation, would be unable to use a font that requires manipulation of vector artwork.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0006" num="0005">The present invention is illustrated by way of example, and not by way of limitation, and can be more fully understood with reference to the following detailed description when considered in connection with the figures in which:</p>
<p id="p-0007" num="0006"><figref idref="DRAWINGS">FIG. 1</figref> illustrates a network architecture in which embodiments of the present invention may be implemented.</p>
<p id="p-0008" num="0007"><figref idref="DRAWINGS">FIG. 2</figref> is a block diagram of one embodiment of a font management module that manages the dynamic rendering of fonts.</p>
<p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. 3</figref> illustrates an example of font rules applied to a string of identical letters in a base font.</p>
<p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. 4</figref> is a flow diagram illustrating one embodiment of a method for generating and render of a dynamic font.</p>
<p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. 5</figref> illustrates a diagrammatic representation of a machine in the exemplary form of a computer system.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0004" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0012" num="0011">Described herein is a method and system that provides a plug-in architecture for creation of a dynamic font. The plug-in architecture can be provided by a computer system. The computer system incorporates a new filter function as a plug-in into a filtering layer of a font program. The filtering layer includes pre-defined filter functions to transform a base font into a new font. The computer system applies one or more font rules in the filtering layer to the base font. The font rules are implemented by the new filter function and at least one of the pre-defined filter functions to randomize an appearance of each character in a character string. The character string rendered with the new font has a dynamic and randomized appearance.</p>
<p id="p-0013" num="0012">According to embodiments of the invention, a font can have one or more textures of various priorities and orderings embedded in it. The priorities and orderings, as well as various transformations, can be applied to the font on-the-fly as type is written out to a data output device (e.g., a display, a printer, etc.).</p>
<p id="p-0014" num="0013">For font creators, embodiments of the invention can be realized by a font creation application that allows the font creators to determine a base font, select one or more textures to embed in the font, and dictate rules and randomization levels upon which the texture will be transformed. The font creator may preview the font with textures and rules in place to see how the font looks, and tweak those configurations as necessary to achieve the desired effect. Finally, font creators can save their font creation as a new font, manage any applicable licenses for the original base font and included textures, and output the new font in any number of supported formats (TrueType Font (TTF), OpenType Font (OTF), etc.).</p>
<p id="p-0015" num="0014">In one embodiment, a font creator may be able to set some of the configuration variables, such as: textures (by providing texture bitmaps), randomization level (by specifying how much randomness is used in the application of the textures; e.g., how often is the texture applied within the string&#x2014;whether it is applied to every character, to every other character, or somewhere in between. For each texture, a font creator may be able to set the following parameters: the order of precedence a texture should be applied (which affects how often the texture is applied), the opacity of the texture (which may be an explicit value or a range of values), the size of the texture (which may be an explicit value or a range of values), the space between subsequent applications of the same textures (which may be an explicit value or a range of values), and the &#x201c;jitter&#x201d; of subsequent applications of the same texture, where &#x201c;jitter&#x201d; is defined as how much a texture is rotated upon subsequent applications (which may be an explicit value or a range of values).</p>
<p id="p-0016" num="0015">Additionally, in one embodiment, a font creator may also indicate ranges of particular effects to be applied dynamically and randomly to a font on-the-fly as they are used to type out characters. The particular effects include, but are not limited to: the percentage a character deviates from the base font with respect to the point size, the deviation from the base font's kerning (i.e., the space between letters), the deviation from the base font's leading (i.e., the space between lines of text), a given standard vector-based transform and the deviation from a base application of that transform. An example of a base application of a vector-based transform is a blur filter applied to an entire font at a base value of 5% blur. A font creator may indicate that she would like individual characters to randomly deviate up to 50% of the base value blur. As a result, the individual characters may have blur values anywhere from 2.5% blur to 7.5% blur.</p>
<p id="p-0017" num="0016">Embodiments of the invention allow an end user to use a font in the following ways. In one scenario, an end user may obtain a font with embedded textures, application rules and randomization scheme built into it. The end user only consumes the font, and may not be able to customize any of the configurations that the font creator set into the font. When the end user consumes a font (e.g., e.g., by typing a string of characters such as: &#x201c;A A A A A A A A A&#x201d;), the characters have textures applied to them according to the rules set by the font creator. Thus, each character &#x201c;A&#x201d; may look slightly different from every other &#x201c;A&#x201d;.</p>
<p id="p-0018" num="0017">In another scenario, an end user may obtain a font with embedded textures, application rules and randomization scheme built into it. The end user may be able to tweak some of the configurations set by the font creator. For example, if the font creator specified that the texture opacity is 50%, the end user may, in her application of the font, override that value (50%) with a different value (e.g., 40%, 100%, or any other desired percentage).</p>
<p id="p-0019" num="0018">In yet another scenario, an end user may script the production of type using a dynamic font, overriding some of the default values set by the font creator. The end user may use an Application Programming Interface (API) to automate the creation of a scriptable type that looks organic and dynamic. The script that produces the type may be called in an automated manner, e.g., by a Web server for the display of type on a Web page.</p>
<p id="p-0020" num="0019">Embodiments of the present invention provide a plug-in architecture that allows font creators to create new fonts that have dynamic and randomized appearances. The plug-in architecture can be expanded by font creators with new plug-ins that define new textures and new functions. The plug-in architecture is portable across different platforms. Textures, rules, functions, and configurations are embedded in the font itself, so no additional code is necessary.</p>
<p id="p-0021" num="0020">In the following description, numerous details are set forth. It will be apparent, however, to one skilled in the art, that the present invention may be practiced without these specific details. In some instances, well-known structures and devices are shown in block diagram form, rather than in detail, in order to avoid obscuring the present invention.</p>
<p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. 1</figref> illustrates a computer system <b>100</b> in which embodiments of the present invention may operate. In one embodiment, the computer system <b>100</b> includes one or more processors <b>110</b> and a memory <b>120</b>. The memory <b>120</b> may be a volatile memory device (e.g., random access memory (RAM)), non-volatile memory devices (e.g., flash memory), d/or other types of memory devices. The computer system <b>100</b> hosts an operating system <b>150</b> which manages the resources in the computer system <b>100</b>. The computer system <b>100</b> is coupled to a display <b>131</b>, a printer <b>132</b>, a keyboard <b>133</b> and data storage <b>160</b>. In one embodiment, the data storage <b>160</b> may comprise mass storage devices, such as magnetic or optical storage based disks, tapes or hard drives.</p>
<p id="p-0023" num="0022">In one embodiment, the computer system <b>100</b> also includes a font management module <b>170</b> to provide fonts that have a dynamic and randomized appearance. The font management module <b>170</b> provides a filtering layer to a font program to transform a base font into a new font. The filtering layer includes pre-defined font rules and pre-defined filter functions that serve as a base plug-in architecture upon which font creators can add their own designs, including new filter functions and textures to produce new fonts. A font creator may also add new font rules, or at the very least to add lines that reference the filter functions and textures added by them. The new filter functions and textures can be added as plug-ins that cooperate with the pre-defined font rules and pre-defined filter functions. The font rules, filter functions and textures are embedded in the font program. Thus, the entire font program including the filtering layer can be ported to any compatible system and can be used by an end user to generate type in the new font.</p>
<p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. 2</figref> illustrates an embodiment of the font management module <b>170</b>. In one embodiment, the font management module <b>170</b> includes a font program <b>210</b> that defines a number of base fonts <b>220</b>. The font program <b>210</b> also includes a filtering layer <b>230</b> that applies textures and transformations to the base fonts <b>220</b>. The filtering layer <b>230</b> includes a number of font rules <b>240</b>, which specify the textures, transformations and randomization parameters to be applied to a base font. The randomization parameter may be stored in a configuration module <b>245</b>. In one embodiment, each pre-defined font rule may specify a randomization scheme having one or more of the randomization parameters (e.g., scale type randomly between 75%-100%). In one embodiment, an end user may be allowed to adjust the randomization parameters in the configuration module <b>245</b>, thereby overriding the pre-defined parameters set by a font creator.</p>
<p id="p-0025" num="0024">In one embodiment, the filtering layer <b>230</b> also includes pre-defined filter functions <b>252</b>, designer-defined filter functions <b>262</b> and designer-provided textures <b>264</b>. According to the font rules <b>240</b>, the font management module <b>170</b> applies one or more of the filter functions <b>252</b>, <b>262</b>, and one or more of the textures <b>264</b> to abuse font to implement the font rules <b>240</b>.</p>
<p id="p-0026" num="0025">In an alternative embodiment, the font program <b>210</b> including the filtering layer <b>230</b> may be stored in the data storage <b>160</b> and retrieved when receiving a type generation request.</p>
<p id="p-0027" num="0026">In one embodiment, the definition of the new font is read by a font rendering module <b>260</b>, which contains rendering instructions for rendering the type of one or more alphanumeric characters that are provided by an end user or a script. The alphanumeric characters may be typed into the computer system <b>100</b> via the keyboard <b>133</b> or retrieved from a file <b>266</b> in the data storage <b>160</b>. The operating system <b>150</b> may read and execute the rendering instructions and display the rendered type on the display <b>131</b>. Alternatively, the rendering instructions may be directly executed by functions provided by the printer <b>132</b>, which then prints the rendered type on a print medium.</p>
<p id="p-0028" num="0027">In one embodiment, the filtering layer <b>230</b> allows one or more transformations to be applied to a character string in a base font, with a degree of randomness specified by the configuration module <b>245</b>. The transformations may be applied to one or more textures that are tiled and overlaid on top of the character string, or directly applied to the character string. Each texture in <b>252</b> or <b>264</b> may be in the for of a bitmap or vector graphic of a given size (e.g., 500 pixels by 500 pixels). The character string may be part of a document, which is stored in memory or being created by a user as the user inputs characters into the computer system <b>100</b>. When applied to the textures, the transformations may change the appearance of the textures with respect to the opacity, scaling factor, position, orientation, etc. When applied directly to a character string, the transformations may change the appearance of the character string with respect to the positions and/or orientations of the characters. For example, the transformations may apply a shaped envelope to the outer contour of the string to produce a distortion effect.</p>
<p id="p-0029" num="0028">For example, a font creator may specify in the font rules <b>240</b> that the opacity of a given texture is a random value in the range of 20% to 40%. That is, each time the bitmap representing the texture is overlaid on the character string, anew, random strength of the bitmap is chosen in the range of 20% to 40%. In a scenario where the opacity of the texture is 20%, a black pixel in the texture bitmap may remove 20% of the darkness of the corresponding pixel in the character string. As another example, a font creator can specify in the font rules <b>240</b> that a texture is to be rotated by a degree in the range of 10% to 20% when the texture bitmap is overlaid on a character string. A font creator may also specify how multiple textures can be applied to a character string; for example, in a round-robin fashion or by a random selection.</p>
<p id="p-0030" num="0029"><figref idref="DRAWINGS">FIG. 3</figref> illustrates an example of font rules <b>310</b> and <b>320</b> applied to a string of identical letters (&#x201c;A&#x201d;) in a base font. For ease of illustration, the string of A is provided within the definition of the rules. It is understood that, in practice, the letter string would be inputted by a user or a script, via keyboard, stored file, or other input mechanisms.</p>
<p id="p-0031" num="0030">In the example of <figref idref="DRAWINGS">FIG. 3</figref>, three strings <b>351</b>, <b>352</b> and <b>353</b> are shown. The first row <b>351</b> is a string of A in the base font without any font rule applied to it. The second row <b>352</b> is a string of A having the font rule <b>310</b> applied to it. Font rule <b>310</b> specifies a randomization scheme, in which some or all of the letters in the string are each scaled by a scale factor (randomly chosen in the range of 75%-100%) and distorted by a distortion factor (randomly chosen in the range of 10%-50%). Font rule <b>310</b> further includes rules for determining whether a letter in the string is to be scaled and/or to be distorted. The specific letters being scaled are determined by condition <b>316</b> that includes counters m, n and a parameter SKIPFACTOR. The specific letters being distorted are determined by condition <b>317</b> that includes counters p, n and the parameter SKIPFACTOR.</p>
<p id="p-0032" num="0031">The third row <b>353</b> is a string of A having the font rule <b>320</b> applied to it. Font rule <b>320</b> specifies a texture application scheme, in which a texture in the file &#x201c;sometexture.svg&#x201d; is applied to each letter in the string sequentially. The texture is applied with strength (&#x201c;opacity&#x201d;) determined by t, where t is incremented by 10% for each letter.</p>
<p id="p-0033" num="0032"><figref idref="DRAWINGS">FIG. 4</figref> is a flow diagram illustrating one embodiment of a method <b>400</b> that enables dynamic font rendering. The method <b>400</b> may be performed by computer system <b>500</b> of <figref idref="DRAWINGS">FIG. 5</figref> that may comprise hardware (e.g., circuitry, dedicated logic, programmable logic, microcode, etc.), software (e.g., instructions run on a processing device), or a combination thereof. In one embodiment, the method <b>400</b> is performed by the computer system <b>100</b> of <figref idref="DRAWINGS">FIG. 1</figref>.</p>
<p id="p-0034" num="0033">Referring to <figref idref="DRAWINGS">FIG. 4</figref>, in one embodiment, the method <b>400</b> begins when the computer system <b>100</b> receives a request to generate a type having a specified font (block <b>410</b>). The request may be sent by a user or a script. The request may specify the location of an input file, or may provide the input via a user interface (e.g., keyboard, keypad, etc.). The computer system <b>100</b> identifies the base font on which the requested font is based, and determines whether the requested font is defined by one or more font rules (e.g., the font rules <b>240</b> of <figref idref="DRAWINGS">FIG. 2</figref>). After the base font and the font rules are identified, the computer system <b>100</b> determines, for each font rule, whether or not the font rules apply a texture to the base font (block <b>420</b>). If the font rule applies no texture, the computer system <b>100</b> determines whether or not the font rule applies a transformation to the base font (block <b>430</b>). If a transformation is to be applied to the base font, the computer system <b>100</b> proceeds to apply the transformation to the base font (block <b>470</b>). As described above, the transformation to the base font may include: the percentage a character deviates from the base font with respect to the point size, the deviation from the base font's kerning, leading, or the deviation from a base application of a given standard transform. After the transformation is applied to the base font, or, at block <b>430</b>, it is determined that there is no transformation to be applied, the computer system <b>100</b> proceeds to process the next font rule (if any rule is left).</p>
<p id="p-0035" num="0034">If, at block <b>420</b>, the font rule specifies one or more textures, the computer system <b>100</b> applies the one or more textures according to the font rule. If there are multiple textures to be applied (block <b>440</b>), the textures may be applied sequentially, randomly, or in any priorities and orderings specified by the font rule. The multiple textures may be tiled or overlaid according to the specified priorities and orderings. The font rule may specify that one or more transformations are to be applied to each texture, or at least one of the textures, before the texture is applied to the base font. After a texture is applied to the base font (block <b>450</b>), the computer system <b>100</b> determines whether or not the font rule further specifies a transformation to be applied to the texturized font (block <b>460</b>). If a transformation is to be applied, the computer system <b>100</b> proceeds to apply the transformation to the texturized font. After the transformation is applied to the texturized font, or if there is no transformation to be applied to the texturized font, the computer system <b>100</b> proceeds to process the next texture until all of the textures specified in the font rule are applied (block <b>440</b>).</p>
<p id="p-0036" num="0035">After all of the textures specified in the font rule are applied, the computer system <b>100</b> proceeds to block <b>430</b> to determine whether or not the font rule applies a transformation to the font, which, in this case, is the texturized font. The computer system <b>100</b> applies the transformation, if there is any (block <b>470</b>). After the transformation is applied to the base font, or, at block <b>430</b>, it is determined that there is no transformation to be applied, the computer system <b>100</b> proceeds to process the next font rule (if any rule is left).</p>
<p id="p-0037" num="0036">After all of the font rules are applied, the computer system <b>100</b> then proceeds to render the type in the requested font (block <b>480</b>). It is noted that the application of the font rules occurs on-the-fly as the type is rendered. That is, each character in a character string, in a sequential order, is applied with the font rules and then rendered before the next character in the string is processed. Each time the filter functions implementing the font rules are called to generate the type for a character, different randomization parameters, priority or ordering may be used. Therefore, the character string can be rendered with a dynamic and randomized appearance.</p>
<p id="p-0038" num="0037">Embodiments of the invention provide a system and method that is portable, automatable, customizable and realistic. It is portable because all the textures and/or rules an end user needs to transform a type are embedded in the font file. It is automatable because no human intervention is necessary to generate non-uniform and organic type effects. It is customizable because an end user can tweak the configurations of the fonts on-the-fly (in a live manner) until the randomization results in a visual effect that most appeals to the end user. The resulting creative type effects are more realistic as they are truly random and not statically baked into the font file. Therefore, text with many instances of the same character repeated in succession or within proximity of each other maintain an organic appearance of randomness.</p>
<p id="p-0039" num="0038"><figref idref="DRAWINGS">FIG. 5</figref> illustrates a diagrammatic representation of a machine in the exemplary form of a computer system <b>500</b> within which a set of instructions, for causing the machine to perform any one or more of the methodologies discussed herein, may be executed. In alternative embodiments, the machine may be connected (e.g. networked) to other machines in a Local Area Network (LAN), an intranet, an extranet, or the Internet. The machine may operate in the capacity of a server or a client machine in a client-server network environment, or as a peer machine in a peer-to-peer (or distributed) network environment. The machine may be a personal computer (PC), a tablet PC, a set-top box (STB), a Personal Digital Assistant (PDA), a cellular telephone, a web appliance, a server, a network router, switch or bridge, or any machine capable of executing a set of instructions (sequential or otherwise) that specify actions to be taken by that machine. Further, while only a single machine is illustrated, the term &#x201c;machine&#x201d; shall also be taken to include any collection of machines (e.g., computers) that individually or jointly execute a set (or multiple sets) of instructions to perform any one or more of the methodologies discussed herein.</p>
<p id="p-0040" num="0039">The exemplary computer system <b>500</b> includes a processing device <b>502</b>, a main memory <b>504</b> (e.g., read-only memory (ROM), flash memory, dynamic random access memory (DRAM) such as synchronous DRAM (SDRAM) or Rambus DRAM (RDRAM), etc.), a static memory <b>506</b> (e.g., flash memory, static random access memory (SRAM), etc.), and a secondary memory <b>518</b> (e.g., a data storage device), which communicate with each other via a bus <b>530</b>.</p>
<p id="p-0041" num="0040">The processing device <b>502</b> represents one or more general-purpose processing devices such as a microprocessor, central processing unit, or the like. More particularly, the processing device <b>502</b> may be a complex instruction set computing (CISC) microprocessor, reduced instruction set computing (RISC) microprocessor, very long instruction word (VLIW) microprocessor, processor implementing other instruction sets, or processors implementing a combination of instruction sets. The processing device <b>502</b> may also be one or more special-purpose processing devices such as an application specific integrated circuit (ASIC), a field programmable gate array (FPGA), a digital signal processor (DSP), network processor, or the like. The processing device <b>502</b> is configured to execute filtering logic <b>522</b> for performing the operations and steps discussed herein.</p>
<p id="p-0042" num="0041">The computer system <b>500</b> may further include a network interface device <b>508</b>. The computer system <b>500</b> also may include a video display unit <b>510</b> (e.g., a liquid crystal display (LCD) or a cathode ray tube (CRT)), an alphanumeric input device <b>512</b> (e.g., a keyboard), a cursor control device <b>514</b> (e.g., a mouse), and a signal generation device <b>516</b> (e.g., a speaker).</p>
<p id="p-0043" num="0042">The secondary memory <b>518</b> may include a machine-readable storage medium (or more specifically a computer-readable storage medium) <b>531</b> on which is stored one or more sets of instructions (e.g., filtering logic <b>522</b>) embodying any one or more of the methodologies or functions described herein (e.g., the filtering layer <b>230</b> of <figref idref="DRAWINGS">FIG. 2</figref>). The filtering logic <b>522</b> may also reside, completely, or at least partially, within the main memory <b>504</b> and/or within the processing device <b>502</b> during execution thereof by the computer system <b>500</b>; the main memory <b>504</b> and the processing device <b>502</b> also constituting machine-readable storage media. The filtering logic <b>522</b> may further be transmitted or received over a network <b>520</b> via the network interface device <b>508</b>.</p>
<p id="p-0044" num="0043">The machine-readable storage medium <b>531</b> may also be used to store the filtering logic <b>522</b> persistently. While the machine-readable storage medium <b>531</b> is shown in an exemplary embodiment to be a single medium, the term &#x201c;machine-readable storage medium&#x201d; should be taken to include a single media or multiple media (e.g., a centralized or distributed database, and/or associated caches and servers) that store the one or more sets of instructions. The term &#x201c;machine-readable storage medium&#x201d; shall also be taken to include any medium that is capable of storing or encoding a set of instructions for execution by the machine that cause the machine to perform any one or more of the methodologies of the present invention. The term &#x201c;machine-readable storage odium&#x201d; shall accordingly be taken to include, but not be limited to, solid-state memories, and optical and magnetic media.</p>
<p id="p-0045" num="0044">The computer system <b>500</b> may additionally include a filtering module <b>528</b> for implementing the functionalities of the filtering layer <b>230</b> of <figref idref="DRAWINGS">FIG. 2</figref>. The module <b>528</b>, components and other features described herein (for example in relation to <figref idref="DRAWINGS">FIG. 1</figref>) can be implemented as discrete hardware components or integrated in the functionality of hardware components such as ASICS, FPGAs, DSPs or similar devices. In addition, the module <b>528</b> can be implemented as firmware or functional circuitry within hardware devices. Further, the module <b>528</b> can be implemented in any combination of hardware devices and software components.</p>
<p id="p-0046" num="0045">Some portions of the detailed descriptions which follow are presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here, and generally, conceived to be a self-consistent sequence of steps leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually, though not necessarily, these quantities take the form of electrical or magnetic signals capable of being stored, transferred, combined, compared, and otherwise manipulated. It has proven convenient at times, principally for reasons of common usage, to refer to these signals as bits, values, elements, symbols, characters, terms, numbers, or the like.</p>
<p id="p-0047" num="0046">It should be born in mind, however, that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise, as apparent from the following discussion, it is appreciated that throughout the description, discussions utilizing terms such as &#x201c;incorporating&#x201d;, &#x201c;applying&#x201d;, &#x201c;rendering&#x201d;, &#x201c;transforming&#x201d;, or the like, refer to the action and processes of a computer system, or similar electronic computing device, that manipulates and transforms data represented as physical (electronic) quantities within the computer system's registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage, transmission or display devices.</p>
<p id="p-0048" num="0047">Embodiments of the present invention also relates to an apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes, or it may comprise a general purpose computer system selectively programmed by a computer program stored in the computer system. Such a computer program may be stored in a computer readable storage medium, such as, but not limited to, any type of disk including floppy disks, optical disks, CD-ROMs, and magnetic-optical disks, read-only memories (ROMs), random access memories (RAMs), EPROMs, EEPROMs, magnetic disk storage media, optical storage media, flash memory devices, other type of machine-accessible storage media, or any type of media suitable for storing electronic instructions, each coupled to a computer system bus.</p>
<p id="p-0049" num="0048">The algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems may be used with programs in accordance with the teachings herein, or it may prove convenient to construct more specialized apparatus to perform the required method steps. The required structure for a variety of these systems will appear as set forth in the description below. In addition, the present invention is not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the invention as described herein.</p>
<p id="p-0050" num="0049">It is to be understood that the above description is intended to be illustrative, and not restrictive. Many other embodiments will be apparent to those of skill in the art upon reading and understanding the above description. Although the present invention has been described with reference to specific exemplary embodiments, it will be recognized that the invention is not limited to the embodiments described, but can be practiced with modification and alteration within the spirit and scope of the appended claims. Accordingly, the specification and drawings are to be regarded in an illustrative sense rather than a restrictive sense. The scope of the invention should, therefore, be determined with reference to the appended claims, along with the full scope of equivalents to which such claims are entitled.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A method comprising:
<claim-text>incorporating, by a processing device, a new filter function into a filtering layer of a font program, the filtering layer comprising a plurality of pre-defined filter functions to transform a base font into a new font and a plurality of textures defined by at least one of texture bitmaps or texture graphic vectors;</claim-text>
<claim-text>applying, by the processing device, one or more font rules in the filtering layer to the base font, the one or more font rules implemented by the new filter function, a pre-defined filter function of the plurality of pre-defined filter functions and a texture of the plurality of textures, wherein a font rule of the one or more font rules specifies a randomization scheme applied to the base font separately for each character of a character string to randomize an appearance of each character in the character string; and</claim-text>
<claim-text>rendering, by the processing device, each character of the character string separately using the new font such that the appearance of each character of the character string has a randomized appearance in view of the randomization scheme applied to the base font for each character.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:
<claim-text>transforming the texture with a transformation that is defined by a randomized parameter; and</claim-text>
<claim-text>applying the texture to the character string with the randomized parameter.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the transformation of the texture comprises one or more of the following:
<claim-text>opacity adjustment, texture scaling, tiling position adjustment, rotation adjustment, randomization of texture tiling position, and designer-defined transformations.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:
<claim-text>randomly choosing a randomized parameter for a transformation referenced by one of the font rules; and</claim-text>
<claim-text>applying the transformation to the character string.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method of <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein the transformation of the character string comprises one or more of the following:
<claim-text>scaling, distortion, enveloping, position adjustment, blurring, and designer-defined transformations.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:
<claim-text>overriding a pre-defined parameter with a parameter provided by an end user, the pre-defined parameter used by a transformation that implements one of the font rules.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:
<claim-text>embedding textures having different priorities and orderings into the new font.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. A system comprising:
<claim-text>data storage to store a font program that comprises a filtering module, the filtering module comprising a plurality of pre-defined filter functions to transform a base font into a new font and a plurality of textures defined by at least one of texture bitmaps or texture graphic vectors; and</claim-text>
<claim-text>a processing device coupled to the data storage, the processing device comprising:
<claim-text>a font management module to incorporate a new filter function into the filtering module, and apply one or more font rules in the font program to the base font, the one or more font rules implemented by the new filter function, a pre-defined filter function of the plurality of pre-defined filter functions and a texture of the plurality of textures, wherein a font rule of the one or more font rules specifies a randomization scheme applied to the base font separately for each character of a character string to randomize an appearance of each character in the character string; and</claim-text>
<claim-text>a rendering module to render each character of the character string separately with the new font such that the appearance of each character of the character string has a randomized appearance in view of the randomization scheme applied to the base font for each character.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The system of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the font management module transforms the texture with a transformation that is defined by a randomized parameter, and applies the texture to the character string.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The system of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the transformation of the texture comprises one or more of the following:
<claim-text>opacity adjustment, texture scaling, tiling position adjustment, rotation adjustment, randomization of texture tiling position, and designer-defined transformations.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The system of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the font management module implements a transformation, according to one of the font rules, by randomly choosing a randomized parameter, and applying the transformation to the character string.</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The system of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the transformation of the character string comprises one or more of the following:
<claim-text>scaling, distortion, enveloping, position adjustment, blurring, and designer-defined transformations.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The system of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the processing device further comprises:
<claim-text>a configuration module to store a pre-defined randomization parameter used by a transformation that implements one of the font rules, wherein the pre-defined randomization parameter can be overridden by a parameter provided by an end user.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. A non-transitory computer readable storage medium comprising instructions that, when executed by a processing device, cause the processing device to:
<claim-text>incorporate, by the processing device, a new filter function into a filtering layer of a font program, the filtering layer comprising a plurality of pre-defined filter functions to transform a base font into a new font and a plurality of textures defined by at least one of texture bitmaps or texture graphic vectors;</claim-text>
<claim-text>apply, by the processing device, one or more font rules in the filtering layer to the base font, the one or more font rules implemented by the new filter function, a pre-defined filter function of the plurality of pre-defined filter functions and a texture of the plurality of textures, wherein a font rule of the one or more font rules specifies a randomization scheme applied to the base font separately for each character of a character string to randomize an appearance of each character in a character string; and</claim-text>
<claim-text>render each character of the character string separately using the new font such that the appearance of each character of the character string has a randomized appearance in view of the randomization scheme applied to the base font for each character.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The non-transitory computer readable storage medium of <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein the processing device is further to:
<claim-text>transform the texture with a transformation that is defined by a randomized parameter; and</claim-text>
<claim-text>apply the texture to the character string with the randomized parameter.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The non-transitory computer readable storage medium of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the transformation of the texture comprises one or more of the following:
<claim-text>opacity adjustment, texture scaling, tiling position adjustment, rotation adjustment, randomization of texture tiling position, and designer-defined transformations.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The non-transitory computer readable storage medium of <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein the processing device is further to:
<claim-text>randomly choose a randomized parameter for a transformation referenced by one of the font rules; and</claim-text>
<claim-text>apply the transformation to the character string.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The non-transitory computer readable storage medium of <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein the transformation of the character string comprises one or more of the following:
<claim-text>scaling, distortion, enveloping, position adjustment, blurring, and designer-defined transformations.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. The non-transitory computer readable storage medium of <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein the processing device is further to:
<claim-text>override a pre-defined parameter with a parameter provided by an end user, the pre-defined parameter used by a transformation that implements one of the font rules.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. The non-transitory computer readable storage medium of <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein the processing device is further to:
<claim-text>embed textures having different priorities and orderings into the new font. </claim-text>
</claim-text>
</claim>
</claims>
</us-patent-grant>

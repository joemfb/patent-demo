<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08626484-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08626484</doc-number>
<kind>B1</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>12968854</doc-number>
<date>20101215</date>
</document-id>
</application-reference>
<us-application-series-code>12</us-application-series-code>
<us-term-of-grant>
<us-term-extension>427</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>9</main-group>
<subgroup>45</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>703 22</main-classification>
<further-classification>703 13</further-classification>
<further-classification>717124</further-classification>
</classification-national>
<invention-title id="d2e53">Light-weight and flexible feature simulator</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>5421004</doc-number>
<kind>A</kind>
<name>Carpenter et al.</name>
<date>19950500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714 25</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>6092071</doc-number>
<kind>A</kind>
<name>Bolan et al.</name>
<date>20000700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>  1  1</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>6879266</doc-number>
<kind>B1</kind>
<name>Dye et al.</name>
<date>20050400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>341 51</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>7478026</doc-number>
<kind>B1</kind>
<name>Kushner et al.</name>
<date>20090100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>703 13</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>8117361</doc-number>
<kind>B2</kind>
<name>De Peuter et al.</name>
<date>20120200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>710 68</main-classification></classification-national>
</us-citation>
<us-citation>
<nplcit num="00006">
<othercit>Griffin et al, &#x201c;Timing-Accurate Storage Emulation&#x201d;, Proceedings of the Conference on File and Storage Technologies (FAST), Jan. 2002.</othercit>
</nplcit>
<category>cited by examiner</category>
</us-citation>
<us-citation>
<nplcit num="00007">
<othercit>Smith et al, &#x201c;IZO: Applications of Large-Window Compression to Virtual Machine Management&#x201d;, 22nd Large Installation System Administration Conference, 2008.</othercit>
</nplcit>
<category>cited by examiner</category>
</us-citation>
<us-citation>
<nplcit num="00008">
<othercit>Wu, et al., &#x201c;Compression System Pause and Auto-Resume&#x201d;, U.S. Appl. No. 12/819,767, filed Jun. 21, 2010.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>16</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>703 22</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>5</number-of-drawing-sheets>
<number-of-figures>5</number-of-figures>
</figures>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Zhao</last-name>
<first-name>Yue</first-name>
<address>
<city>Shanghai</city>
<country>CN</country>
</address>
</addressbook>
<residence>
<country>CN</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Wu</last-name>
<first-name>Yuanjie</first-name>
<address>
<city>Shanghai</city>
<country>CN</country>
</address>
</addressbook>
<residence>
<country>CN</country>
</residence>
</us-applicant>
<us-applicant sequence="003" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Zhuang</last-name>
<first-name>Peiyu</first-name>
<address>
<city>Shanghai</city>
<country>CN</country>
</address>
</addressbook>
<residence>
<country>CN</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Zhao</last-name>
<first-name>Yue</first-name>
<address>
<city>Shanghai</city>
<country>CN</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Wu</last-name>
<first-name>Yuanjie</first-name>
<address>
<city>Shanghai</city>
<country>CN</country>
</address>
</addressbook>
</inventor>
<inventor sequence="003" designation="us-only">
<addressbook>
<last-name>Zhuang</last-name>
<first-name>Peiyu</first-name>
<address>
<city>Shanghai</city>
<country>CN</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>BainwoodHuang</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>EMC Corporation</orgname>
<role>02</role>
<address>
<city>Hopkinton</city>
<state>MA</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Jacob</last-name>
<first-name>Mary C</first-name>
<department>2123</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">A method is provided for testing a feature provider module of a data storage management application (DSMA), the feature provider module providing a feature. The method includes (a) receiving, at a simulation module of the DSMA when the DSMA is not in communication with an external feature implementation component, a test feature command from the feature provider module, (b) at the simulation module, simulating behavior of an interface module in communication with the external feature implementation component, and (c) at the simulation module, returning a feature response to the feature provider module, the feature response communicating the simulated behavior.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="185.25mm" wi="148.17mm" file="US08626484-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="230.63mm" wi="178.56mm" file="US08626484-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="232.33mm" wi="185.84mm" file="US08626484-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="200.32mm" wi="162.73mm" file="US08626484-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="234.27mm" wi="167.39mm" file="US08626484-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="248.41mm" wi="184.15mm" file="US08626484-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">BACKGROUND</heading>
<p id="p-0002" num="0001">Large amounts of data are often stored on massive data storage systems. These data storage systems typically contain a host computer connected to a plurality of storage devices. The host computer runs a data storage management application to control and manage the data storage system.</p>
<p id="p-0003" num="0002">In some data storage management applications, various data storage features (e.g., data migration services) may be implemented externally to the data storage management application by various external feature implementation components (e.g., feature drivers, hardware-implemented feature devices). Thus, the data storage management application may include one or more feature provider modules, which each facilitate communication between a user and an external feature implementation component for implementing that feature.</p>
<heading id="h-0002" level="1">SUMMARY</heading>
<p id="p-0004" num="0003">In some circumstances, it may be undesirable to require that a feature provider module actually communicate with an external feature implementation component for implementing the feature. For example, if a developer is in the process of developing the feature provider module, while the external feature implementation component for that feature is not yet ready or accessible, it may be impossible or undesirable for the feature provider module to attempt to communicate with a nonexistent or incomplete external feature implementation component, yet the developer may still want to test the performance of the feature provider module. As an additional example, in a completed data storage management application, if an error occurs, but it is not clear whether the error occurred in the feature provider module or in the external feature implementation component, it may be desirable to isolate the components.</p>
<p id="p-0005" num="0004">Thus, various embodiments are provided to allow the developer to connect the feature provider module with a simulation module instead of with the external feature implementation component. The simulation module serves to simulate the actions and responses of the external feature implementation component without actually implementing the feature. This is beneficial because a simulation module can be built without exerting too much effort, yet it allows the feature provider module to be tested during development. It also allows the feature provider module and the external feature implementation component to be isolated for diagnostic purposes.</p>
<p id="p-0006" num="0005">In one embodiment, a method is provided for testing a feature provider module of a data storage management application (DSMA), the feature provider module providing a feature. The method includes (a) receiving, at a simulation module of the DSMA when the DSMA is not in communication with an external feature implementation component, a test feature command from the feature provider module, (b) at the simulation module, simulating behavior of an interface module in communication with the external feature implementation component, and (c) at the simulation module, returning a feature response to the feature provider module, the feature response communicating the simulated behavior. A corresponding apparatus is also provided.</p>
<p id="p-0007" num="0006">In another embodiment, a method is provided for diagnosing an error in a data storage system, the data storage system being managed by a DSMA having a feature provider module configured to communicate with an external feature implementation component via an interface module of the DSMA. The method includes (a) receiving a report of the error, (b) recompiling a software module of the DSMA so that the feature provider module of the DSMA is reconfigured to communicate with a simulation module of the DSMA instead of the external feature implementation component via the interface module, (c) installing the recompiled software module on the data storage system, (d) reproducing conditions of the error after installing the recompiled software module, and (e) if the error appears upon reproducing the conditions, then diagnosing the error as being present within the feature provider module&#x2014;otherwise, (f) diagnosing the error as being present within the external feature implementation component.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0008" num="0007">The foregoing and other objects, features and advantages will be apparent from the following description of particular embodiments of the invention, as illustrated in the accompanying drawings in which like reference characters refer to the same parts throughout the different views. The drawings are not necessarily to scale, emphasis instead being placed upon illustrating the principles of various embodiments of the invention.</p>
<p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. 1</figref> depicts an example system for use in practicing various embodiments of the invention.</p>
<p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. 2</figref> depicts an example memory and contents for use in practicing various embodiments of the invention.</p>
<p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. 3</figref> depicts an example method for testing a feature provider module of a data storage management application according to one embodiment of the invention.</p>
<p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. 4</figref> depicts an example workflow structure of an application component according to one embodiment of the invention.</p>
<p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. 5</figref> depicts an example method for diagnosing an error in a data storage system according to one embodiment of the invention.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0004" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0014" num="0013">Various embodiments are provided to allow a developer of a data storage management application to connect a feature provider module with a simulation module instead of with an external feature implementation component. The simulation module serves to simulate the actions and responses of the external feature implementation component without actually implementing the feature. This is beneficial because a simulation module can be built without exerting too much effort, yet it allows the feature provider module to be tested during development. It also allows the feature provider module and the external feature implementation component to be isolated for diagnostic purposes.</p>
<p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. 1</figref> depicts an example computer system <b>30</b> for use in performing various embodiments of the invention. System <b>30</b> (e.g., a data storage system) includes a host <b>32</b>, a user interface (UI) device <b>34</b>, a storage interconnect <b>36</b>, and a set of storage devices <b>40</b> (depicted as storage devices <b>40</b>(<i>a</i>), <b>40</b>(<i>b</i>), . . . , <b>40</b>(<i>m</i>)). Host <b>32</b> connects to UI device <b>34</b> and to storage interconnect <b>36</b>. Storage interconnect <b>36</b> connects to the set of storage devices <b>40</b>.</p>
<p id="p-0016" num="0015">The storage interconnect <b>36</b> can be any type of network or bus capable of interconnecting storage devices <b>40</b> with host <b>32</b>. In some embodiments, the storage devices <b>40</b> and host <b>32</b> are interconnected in a manner such that, to the operating systems running on the host <b>32</b>, the storage devices <b>40</b> appear as locally attached, but this is not required for the invention. The storage interconnect <b>36</b> may be a shared, public, or private network and encompasses a wide area or local area and can be implemented through any suitable combination of wired and/or wireless communication networks. Furthermore, the storage interconnect <b>36</b> may include a LAN, a WAN, an intranet, the Internet, or a set of switches. For example, in one embodiment, the storage interconnect <b>36</b> works with Fibre Channel connectivity and is implemented in the form of a storage area network (SAN). In another embodiment, the storage interconnect <b>36</b> works with internet protocol (IP) connectivity and is implemented via an Internet-Small Computer System Interface (iSCSI) (e.g., for Fibre Channel). Those of skill in the art will recognize that other implementations are, of course, possible.</p>
<p id="p-0017" num="0016">Storage devices <b>40</b> may be any sort of storage equipment capable of connecting to storage interconnect <b>36</b>. In some embodiments, each storage device <b>40</b> is a disk array. As is well-known in the art, a typical disk array includes a disk array controller, disk enclosures holding a plurality of disk drives, and a power supply. A disk array may also include a cache. Examples of disk arrays include the Symmetrix Integrated Cache Disk Array System and the CLARiiON Disk Array System, both available from EMC Corp. of Hopkinton, Mass.</p>
<p id="p-0018" num="0017">Host <b>32</b> includes a UI <b>42</b> for connecting to UI device <b>34</b>. It should be understood that UI device <b>34</b> may include one or more devices for interfacing with a user. UI device <b>34</b> may include one or more of a display monitor, a printer, a touch screen, a keyboard, a mouse, a trackpad, a trackball, or any other known device for interfacing with a user. Host <b>32</b> also includes a storage interface <b>44</b> for connecting to storage interconnect <b>36</b>. Storage interface <b>44</b> may include, for example, a network adapter or an iSCSI adapter. Host <b>32</b> also includes a processor <b>46</b> and memory <b>50</b>.</p>
<p id="p-0019" num="0018">Processor <b>46</b> may be any sort of controller, such as, for example, a general purpose processor or microprocessor, a central processing unit, a set of multiple processing units, or a set of dedicated circuitry designed to perform particular operations in hardware. Memory <b>50</b> may be made up of one or more of the following: volatile random access memory, non-volatile read-only memory, non-volatile flash memory, magnetic storage, optical storage, etc. Among other components, memory <b>50</b> stores a data storage management application (DSMA) <b>54</b> which includes a simulation module, such as TestTLD Helper <b>62</b> (described in detail below).</p>
<p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. 2</figref> illustrates certain software that is contained within the memory <b>50</b> during system operation (although it may also contain some or all of these elements while the system is not in operation as well). As shown, in one embodiment, memory <b>50</b> stores an operating system (OS) <b>52</b>, a DSMA <b>54</b>, and, in some embodiments, an external feature implementation component <b>56</b>. Memory <b>50</b> may also store additional computer program applications and application data (not shown). OS <b>52</b>, DSMA <b>54</b>, and external feature implementation component <b>56</b> each contain a set of instructions to be executed by processor <b>54</b>.</p>
<p id="p-0021" num="0020">One example of a DSMA <b>54</b> usable in some embodiments is the Navisphere program produced by EMC Corp. of Hopkinton, Mass. It should be understood that this is by way of example only; other products may also serve as the DSMA <b>54</b>.</p>
<p id="p-0022" num="0021">As depicted, DSMA <b>54</b> includes a front-end component <b>54</b>(<i>a</i>) for interfacing with a user and a back-end component <b>54</b>(<i>b</i>) for implementing management of the data storage system <b>30</b>. The front-end of DSMA <b>54</b>(<i>a</i>) implements a graphical user interface for DSMA <b>54</b> and converts user input commands <b>59</b> into commands <b>61</b> to be processed by the back-end of DSMA <b>54</b>(<i>b</i>). The front-end of DSMA <b>54</b>(<i>a</i>) also displays data generated by the back-end of DSMA <b>54</b>(<i>b</i>) to the user on UI device <b>34</b>.</p>
<p id="p-0023" num="0022">The back-end of DSMA <b>54</b>(<i>b</i>) includes a set of feature provider modules <b>58</b> (depicted as feature provider modules <b>58</b>(<i>a</i>), <b>58</b>(<i>b</i>), . . . , <b>58</b>(<i>n</i>)). Feature provider modules <b>58</b> are software modules that are capable of providing various management features of the data storage system <b>30</b> to the DSMA <b>54</b>. As depicted, the set of feature provider modules <b>58</b> includes a compression provider module <b>58</b>(<i>a</i>), a provisioning provider module <b>58</b>(<i>b</i>), and a migration provider module <b>58</b>(<i>n</i>).</p>
<p id="p-0024" num="0023">Some of the feature provider modules <b>58</b> (e.g., provisioning provider module <b>58</b>(<i>b</i>) and migration provider module <b>58</b>(<i>n</i>)) communicate with an interface module, such as Tagged Length Data (TLD) Helper module <b>60</b>. These feature provider modules <b>58</b> send feature commands <b>61</b> to external feature implementation component <b>56</b> via TLD Helper <b>60</b>. TLD helper <b>60</b> converts the feature commands <b>61</b> into a TLD data structure, which is a data structure for exchanging data between DSMA <b>54</b> and external feature implementation component <b>56</b>. TLD Helper <b>60</b> also sends feature response commands <b>63</b> back to the appropriate feature provider module <b>58</b> upon receiving TLD response data from the external feature implementation component <b>56</b>. The appropriate feature provider module <b>58</b> is then able to display updates to the user regarding a status update of the command by sending a response signal <b>65</b> to the front-end <b>54</b>(<i>a</i>), which communicates with UI <b>42</b>.</p>
<p id="p-0025" num="0024">The external feature implementation component <b>56</b> implements the various features of the data storage system <b>30</b>. It should be understood that, in some embodiments, external feature implementation component <b>56</b> is a software module (or a set of software modules) executing on host <b>32</b>. In these embodiments, the external feature implementation component <b>56</b> is external to the DSMA <b>54</b>. In other embodiments, external feature implementation component <b>56</b> is a hardware or software module within a storage device <b>40</b>. In yet other embodiments, external feature implementation component <b>56</b> is partially implemented on host <b>32</b> and partially implemented on a storage device <b>40</b>.</p>
<p id="p-0026" num="0025">In some embodiments, external feature implementation component <b>56</b> contains two subcomponents: a feature administrator portion <b>66</b> and a feature driver portion <b>68</b>. Feature administrator portion <b>66</b> may contain one or more feature administrator modules, and feature driver portion <b>68</b> may contain one or more feature driver modules.</p>
<p id="p-0027" num="0026">Feature administrator <b>66</b> collects TLD commands from TLD Helper <b>60</b> and translates and passes them on to the appropriate respective feature drivers <b>68</b>. Each feature driver <b>68</b> either implements the appropriate feature itself or interfaces with hardware that implements the feature.</p>
<p id="p-0028" num="0027">During a development phase, developers of the DSMA <b>54</b> may wish to add support for a new feature to DSMA <b>54</b> (e.g., by adding a new feature provider module <b>58</b>, such as compression provider module <b>58</b>(<i>a</i>)). The corresponding feature driver <b>68</b> may be developed in parallel by a separate driver development team. Thus, when the DSMA <b>54</b> developers wish to test their implementation of compression feature module <b>58</b>(<i>a</i>), if the compression driver <b>68</b> is not yet ready, they may (temporarily) implement compression feature module <b>58</b>(<i>a</i>) to communicate with a simulation module, such as TestTLD Helper module <b>62</b> instead of with TLD Helper module <b>60</b>.</p>
<p id="p-0029" num="0028">TestTLD Helper module <b>62</b> is a special component of the DSMA back-end <b>54</b>(<i>b</i>) that simulates the combined behavior of TLD Helper module <b>60</b> and external feature implementation component <b>56</b>. In some embodiments, TestTLD Helper module <b>62</b> includes simulation data, such as, for example, Compression Data Store <b>64</b>, which may be implemented as a database in, for example, eXtensible Markup Language (XML) format. Further detail with respect to the TestTLD Helper module <b>62</b> is provided in connection with <figref idref="DRAWINGS">FIGS. 3 and 4</figref>.</p>
<p id="p-0030" num="0029"><figref idref="DRAWINGS">FIG. 3</figref> depicts an example method for testing a feature provider module <b>58</b> of a data storage management application according to one embodiment of the invention. In step <b>110</b>, simulation module (e.g., TestTLD Helper module <b>62</b>) receives a test feature command <b>61</b> from a feature provider module <b>58</b> (e.g., compression feature module <b>58</b>(<i>a</i>)). This may be done, for example, when DSMA <b>54</b> is not in contact with the external feature implementation component <b>56</b> for the feature (e.g., compression) in question. The format of the test feature command <b>61</b> may be the same as the format of a command as it would be sent to TLD Helper <b>60</b>.</p>
<p id="p-0031" num="0030">In step <b>120</b>, simulation module (e.g., TestTLD Helper module <b>62</b>) simulates the behavior of an interface module (e.g., TLD Helper <b>60</b>) in communication with the external feature implementation component <b>56</b>. Further details of this step are provided below.</p>
<p id="p-0032" num="0031">In step <b>130</b>, simulation module (e.g., TestTLD Helper module <b>62</b>) returns a feature response <b>63</b> to the feature provider module <b>58</b>, the feature response <b>63</b> communicating the simulated behavior.</p>
<p id="p-0033" num="0032">For example, if the feature is compression, then a user may indicate through front-end <b>54</b>(<i>a</i>) (via user command <b>59</b>) that he wishes to compress a logical volume LV<b>1</b> of the storage system <b>30</b>. Compression provider module <b>58</b>(<i>a</i>) would then issue a &#x201c;compression-on&#x201d; command for LV<b>1</b> by sending the command <b>61</b> to TestTLD Helper <b>62</b>. TestTLD Helper <b>62</b> then simulates the behavior of TLD Helper <b>60</b>, as described below, and sends back appropriate responses <b>63</b>.</p>
<p id="p-0034" num="0033">For example, in a more conventional system (or, if the feature is not being tested or diagnosed), if the command <b>61</b> had gone to TLD Helper <b>60</b>, then TLD Helper <b>60</b> would have converted the command <b>61</b> to a TLD command and sent it to feature administrator <b>60</b>, which, in turn, would have translated and passed on that TLD command to compression feature provider <b>68</b>. Compression feature driver <b>68</b> would then go about compressing LV<b>1</b>. At various points during this process, if compression provider module <b>58</b>(<i>a</i>) were to poll compression feature driver <b>68</b> by sending a status update command <b>61</b> via TLD Helper <b>60</b>, compression feature driver <b>68</b> would respond by sending back a feature response indicating what the status of the compression was (e.g., an error; an indication of what portion of the drive had been compressed; etc.).</p>
<p id="p-0035" num="0034">Instead, in the technique depicted in <figref idref="DRAWINGS">FIG. 3</figref>, when the &#x201c;compression-on&#x201d; command <b>61</b> for LV<b>1</b> is directed at TestTLD Helper <b>62</b>, TestTLD Helper <b>62</b> mimics compression of LV<b>1</b> by maintaining a state machine and sending back appropriate feature responses <b>63</b> when polled. This is beneficial because it allows the operation of compression provider <b>58</b>(<i>a</i>) to be tested even though a corresponding feature driver <b>68</b> for the compression feature is not yet available to the developers of compression provider <b>58</b>(<i>a</i>).</p>
<p id="p-0036" num="0035"><figref idref="DRAWINGS">FIG. 4</figref> illustrates the structure and operation of an example TestTLD Helper <b>62</b> for use with a compression feature in further detail with reference to a workflow <b>70</b> and state machine <b>80</b>. Request dispatcher component <b>72</b> of TestTLD Helper <b>62</b> receives the compression command <b>61</b>, parses it, and dispatches the command to a particular action handler <b>74</b> associated with a particular type of TLD command. For example, a &#x201c;compression-on&#x201d; command may be handled by a &#x201c;create&#x201d; action handler <b>74</b> (associated with a &#x201c;create&#x201d; TLD command), a &#x201c;compression-off&#x201d; command may be handled by a &#x201c;delete&#x201d; action handler <b>74</b>, a &#x201c;compression-modify&#x201d; command may be handled by a &#x201c;set&#x201d; action handler <b>74</b>, and a &#x201c;compression-list&#x201d; command may be handled by a &#x201c;get&#x201d; action handler <b>74</b>.</p>
<p id="p-0037" num="0036">For example, &#x201c;create&#x201d; action handler <b>74</b> would create a new compression object associated with a particular logical volume (e.g. LV<b>1</b>) within compression data store <b>64</b> using any parameters from the command, while &#x201c;set&#x201d; action handler <b>74</b> would load the appropriate compression object associated with LV<b>1</b> from compression data store <b>64</b> and change the compression parameters. &#x201c;Get&#x201d; action handler <b>74</b> would load the appropriate compression object associated with LV<b>1</b> from compression data store <b>64</b> and return the parameters and status. Any of the action handlers <b>74</b> might throw an error. For example, if a &#x201c;compression-on&#x201d; command were to be received for a logical volume that had already been compressed (e.g., a compression object already existed within compression data store <b>64</b>), an error might be thrown.</p>
<p id="p-0038" num="0037">After the action of action handler <b>74</b>, workflow <b>70</b> passes on to compression status updater <b>76</b>. Compression status updater <b>76</b> maintains, within compression data store <b>64</b>, a state machine <b>80</b> associated with each compression object, and automatically transitions every state machine <b>80</b> to a next state every time a command <b>61</b> is issued to TestTLD Helper <b>62</b>. State machine <b>80</b> may take various forms, however, as depicted in <figref idref="DRAWINGS">FIG. 4</figref>, state machine <b>80</b> has an initial &#x201c;initializing&#x201d; state <b>82</b>, after which it transitions through various &#x201c;compressing&#x201d; states <b>84</b>-<b>90</b> (i.e., indicating various stages of completion of the compression, e.g., 20%, 40%, 60%, and 80% complete) after which it transitions to a &#x201c;compressed&#x201d; state <b>92</b>. Upon reaching the &#x201c;compressed&#x201d; state <b>92</b>, the state machine <b>80</b> for that compression object may cease to transition. It should be understood that although state machine <b>80</b> is depicted as having six states, it may have more states or fewer states. It should also be understood that although compression status updater <b>76</b> has been described as updating the state of each state machine <b>80</b> every time a command <b>61</b> is issued to TestTLD Helper <b>62</b>, in an alternate embodiment, compression status updater <b>76</b> might instead update the state of each state machine <b>80</b> at fixed time intervals or upon some other indication.</p>
<p id="p-0039" num="0038">In addition to storing each compression object and the state associated with each, compression data store <b>64</b> may also store configuration data for TestTLD Helper <b>62</b>, such as, for example, the configuration of state machines <b>80</b> for various commands.</p>
<p id="p-0040" num="0039">After the action of compression status updater <b>76</b>, workflow <b>70</b> passes on to error handler <b>78</b>. Error handler <b>78</b> is responsible for processing error and success codes thrown by any of the workflow components <b>72</b>-<b>76</b>. Thus, if any of the workflow components <b>72</b>-<b>76</b> throws an error, error handler <b>78</b> sends an error signal (e.g., in a feature response command <b>63</b>) back to compression provider <b>58</b>(<i>a</i>). Alternatively, after a successful command, error handler <b>78</b> sends a status update (e.g., in a feature response command <b>63</b>) indicating the status of the compression object at issue back to compression provider <b>58</b>(<i>a</i>). For example, if, after receiving a &#x201c;compression-on&#x201d; command <b>61</b> for LV<b>1</b>, TestTLD Helper <b>62</b> receives a &#x201c;compression-list&#x201d; command <b>61</b> for LV<b>1</b> while the state of the state machine <b>80</b> for LV<b>1</b> is in state <b>88</b>, error handler <b>78</b> would send back a compression response <b>63</b> to compression provider <b>58</b>(<i>a</i>) indicating that LV<b>1</b> is 60% compressed. That compression response <b>63</b>, which may be forwarded to front-end <b>54</b>(<i>a</i>) as a response signal <b>65</b>, allows front end <b>54</b>(<i>a</i>) to indicate to the user via UI <b>42</b> that LV<b>1</b> is 60% compressed.</p>
<p id="p-0041" num="0040">Operation of method <b>100</b> therefore allows a DSMA <b>54</b> developer to test the operation of compression feature provider <b>58</b>(<i>a</i>) even when compression feature driver <b>68</b> is not yet operational or installed on host <b>32</b>.</p>
<p id="p-0042" num="0041"><figref idref="DRAWINGS">FIG. 5</figref> depicts an example method <b>200</b> for diagnosing an error in a data storage system according to another embodiment of the invention. Method <b>200</b>, which instead of being performed while developing a feature provider module <b>58</b>, is performed at a later time to diagnose an error in data storage system <b>30</b>.</p>
<p id="p-0043" num="0042">In step <b>210</b>, host <b>32</b> receives a report of an error in data storage system <b>30</b>. In some embodiments, host <b>32</b> transmits this error report to a system administrator.</p>
<p id="p-0044" num="0043">In step <b>220</b>, a user (such as, for example, the system administrator) recompiles a software module of the DSMA <b>54</b> so that a feature provider module <b>58</b> of the DSMA <b>54</b> is reconfigured to communicate with a simulation module (e.g., TestTLD Helper module <b>62</b>) of the DSMA <b>54</b> instead of the external feature implementation component <b>56</b> via the interface module. In one embodiment, this is done by changing a build constant within a build module so that the linker links the code such that one feature provider module <b>58</b>(<i>a</i>) communicates with TestTLD Helper module <b>62</b> instead of TLD Helper module <b>60</b>. For example, the following code may be included within the source code for compression provider module <b>58</b>(<i>a</i>):</p>
<p id="h-0005" num="0000">#ifdef COMPRESSION_UNIT_TEST</p>
<p id="h-0006" num="0000">#include &#x201c;Test/MyTLDHelper.h&#x201d;</p>
<p id="h-0007" num="0000">typedef_CompressionTestTLDHelper MyTLDHelper;</p>
<p id="h-0008" num="0000">#else</p>
<p id="h-0009" num="0000">Typedef TLDHelper MyTLDHelper;</p>
<p id="h-0010" num="0000">#endif</p>
<p id="p-0045" num="0044">Thus, even though all modules of DSMA <b>54</b> have already been compiled into object code modules, if the user modifies the build file to define the constant COMPRESSION_UNIT_TEST, then upon rebuilding the DSMA <b>54</b>, the linker will re-link the object code modules such that all references to MyTLDHelper in compression provider module <b>58</b>(<i>a</i>) link to CompressionTestTLDHelper instead of TLDHelper. Typically, the functions within MyTLDHelper.h, such as the TestTLD Helper module <b>62</b> and intermediate functions called by compression provider module <b>58</b>(<i>a</i>), will be found in object form within a dynamic link library (DLL) already present within host <b>32</b>.</p>
<p id="p-0046" num="0045">It should be understood that the term &#x201c;recompiling&#x201d; may refer to any step within the compilation and build processes. Thus, in one embodiment, it may include actually compiling one or more software modules, while in another embodiment, no actual compilation is performed, but only link-level processing is performed.</p>
<p id="p-0047" num="0046">In some embodiments, instead of the user performing step <b>220</b>, an error-diagnosing application running on host <b>32</b> performs this step by automatically modifying the build file and re-building the DSMA <b>54</b>.</p>
<p id="p-0048" num="0047">In step <b>230</b>, the user (or the error diagnosing application) installs the recompiled software module on the data storage system. In some embodiments, this step may be performed automatically by rebuilding or recompiling the DSMA <b>74</b> directly within the installation directory.</p>
<p id="p-0049" num="0048">In step <b>240</b>, the user (or the error diagnosing application) reproduces conditions of the error after installing the recompiled software module. If the error appears again upon reproducing the error conditions, then the error may be diagnosed (either by the user or by the error diagnosing application) as being present within the feature provider module <b>58</b>(<i>a</i>) (step <b>250</b>). If the error does not appear upon reproducing the error conditions, then the error may be diagnosed (either by the user or by the error diagnosing application) as being present within the external feature implementation component <b>56</b> (step <b>255</b>).</p>
<p id="p-0050" num="0049">Thus, by performing method <b>200</b>, a user is able to diagnose what component of data storage system <b>30</b> is causing an error.</p>
<p id="p-0051" num="0050">While various embodiments of the invention have been particularly shown and described, it will be understood by those skilled in the art that various changes in form and details may be made therein without departing from the spirit and scope of the invention as defined by the appended claims.</p>
<p id="p-0052" num="0051">It should be understood that although various embodiments have been described as being methods, software embodying these methods is also included. Thus, one embodiment includes a tangible computer-readable medium (such as, for example, a hard disk, a floppy disk, an optical disk, computer memory, flash memory, etc.) programmed with instructions, which, when performed by a computer or a set of computers, cause one or more of the methods described in various embodiments to be performed. Another embodiment includes a computer which is programmed to perform one or more of the methods described in various embodiments.</p>
<p id="p-0053" num="0052">Furthermore, it should be understood that all embodiments which have been described may be combined in all possible combinations with each other, except to the extent that such combinations have been explicitly excluded.</p>
<p id="p-0054" num="0053">Finally, nothing in this Specification shall be construed as an admission of any sort. Even if a technique, method, apparatus, or other concept is specifically labeled as &#x201c;prior art&#x201d; or as &#x201c;conventional,&#x201d; Applicants make no admission that such technique, method, apparatus, or other concept is actually prior art under 35 U.S.C. &#xa7;102, such determination being a legal determination that depends upon many factors, not all of which are known to Applicants at this time.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A method of testing a feature provider module of a data storage management application (DSMA), the feature provider module providing a feature, the method comprising:
<claim-text>receiving, at a simulation module of the DSMA when the DSMA is not in communication with an external feature implementation component, a test feature command from the feature provider module;</claim-text>
<claim-text>at the simulation module, simulating behavior of an interface module in communication with the external feature implementation component; and</claim-text>
<claim-text>at the simulation module, returning a feature response to the feature provider module, the feature response communicating the simulated behavior;</claim-text>
<claim-text>wherein the feature provider module is a compression feature provider module configured to:
<claim-text>receive a compression command from a user;</claim-text>
<claim-text>pass the compression command to the external feature implementation component via the interface module; and</claim-text>
<claim-text>display updates to the user regarding a status of the compression command.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein simulating includes simulating an external feature driver for implementing the feature.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein simulating further comprises simulating an external intermediate module, the intermediate module configured to translate and pass commands between the interface module and the feature driver.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein receiving the test feature command includes receiving a command to compress a particular logical unit of a data storage system managed by the DSMA.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method of <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein simulating includes returning an error signal to the feature provider module if the particular logical unit has previously been compressed.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method of <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein simulating includes transitioning between states of a state machine that represent stages of a compression process.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The method of <claim-ref idref="CLM-00006">claim 6</claim-ref> wherein transitioning is performed in response to receiving a polling command.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The method of <claim-ref idref="CLM-00006">claim 6</claim-ref> wherein transitioning is performed in response to expiration of a fixed time interval.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. An apparatus comprising:
<claim-text>memory, the memory storing a data storage management application (DSMA), the DSMA including:
<claim-text>a feature provider module, the feature provider module providing a feature; and</claim-text>
<claim-text>a simulation module; and</claim-text>
</claim-text>
<claim-text>a controller, the controller configured to test the feature provider module by:
<claim-text>receiving, at the simulation module when the DSMA is not in communication with an external feature implementation component, a test feature command from the feature provider module;</claim-text>
<claim-text>at the simulation module, simulating behavior of an interface module in communication with the external feature implementation component; and</claim-text>
<claim-text>at the simulation module, returning a feature response to the feature provider module, the feature response communicating the simulated behavior;</claim-text>
</claim-text>
<claim-text>wherein the feature provider module is a compression feature provider module, which when executed by the controller, causes the controller to:
<claim-text>receive a compression command from a user;</claim-text>
<claim-text>pass the compression command to the external feature implementation component via the interface module; and</claim-text>
<claim-text>display updates to the user regarding a status of the compression command.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The apparatus of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the controller, when simulating the behavior of the interface module in communication with the external feature implementation component, is configured to simulate an external feature driver for implementing the feature.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The apparatus of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the controller, when simulating the behavior of the interface module in communication with the external feature implementation component, is further configured to simulate an external intermediate module, the intermediate module configured to translate and pass commands between the interface module and the feature driver.</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The apparatus of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the controller, when receiving the test feature command, is configured to receive a command to compress a particular logical unit of a data storage system managed by the DSMA.</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The apparatus of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the controller, when simulating the behavior of the interface module in communication with the external feature implementation component, is configured to return an error signal to the feature provider module if the particular logical unit has previously been compressed.</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The apparatus of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the controller, when simulating the behavior of the interface module in communication with the external feature implementation component, is configured to transition between states of a state machine that represent stages of a compression process.</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The apparatus of <claim-ref idref="CLM-00014">claim 14</claim-ref> wherein the controller, when simulating the behavior of the interface module in communication with the external feature implementation component, is configured to transition in response to receiving a polling command.</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The apparatus of <claim-ref idref="CLM-00014">claim 14</claim-ref> wherein the controller, when simulating the behavior of the interface module in communication with the external feature implementation component, is configured to transition in response to expiration of a fixed time interval. </claim-text>
</claim>
</claims>
</us-patent-grant>

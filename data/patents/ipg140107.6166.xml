<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08627290-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08627290</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>12643893</doc-number>
<date>20091221</date>
</document-id>
</application-reference>
<us-application-series-code>12</us-application-series-code>
<priority-claims>
<priority-claim sequence="01" kind="regional">
<country>EP</country>
<doc-number>09151985</doc-number>
<date>20090203</date>
</priority-claim>
</priority-claims>
<us-term-of-grant>
<us-term-extension>1051</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>9</main-group>
<subgroup>44</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>717125</main-classification>
</classification-national>
<invention-title id="d2e71">Test case pattern matching</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>6473794</doc-number>
<kind>B1</kind>
<name>Guheen et al.</name>
<date>20021000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709223</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>2004/0172598</doc-number>
<kind>A1</kind>
<name>Hammerich et al.</name>
<date>20040900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>715513</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>2007/0061294</doc-number>
<kind>A1</kind>
<name>Parnell et al.</name>
<date>20070300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707  3</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>2007/0299825</doc-number>
<kind>A1</kind>
<name>Rush et al.</name>
<date>20071200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707  3</main-classification></classification-national>
</us-citation>
</us-references-cited>
<number-of-claims>10</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>None</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>8</number-of-drawing-sheets>
<number-of-figures>10</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20100199263</doc-number>
<kind>A1</kind>
<date>20100805</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Clee</last-name>
<first-name>Scott J.</first-name>
<address>
<city>Hampshire</city>
<country>GB</country>
</address>
</addressbook>
<residence>
<country>GB</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Tilt</last-name>
<first-name>Jonathan S.</first-name>
<address>
<city>Romsey</city>
<country>GB</country>
</address>
</addressbook>
<residence>
<country>GB</country>
</residence>
</us-applicant>
<us-applicant sequence="003" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Would</last-name>
<first-name>Daniel E.</first-name>
<address>
<city>Hampshire</city>
<country>GB</country>
</address>
</addressbook>
<residence>
<country>GB</country>
</residence>
</us-applicant>
<us-applicant sequence="004" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Xu</last-name>
<first-name>Shanna</first-name>
<address>
<city>Southampton</city>
<country>GB</country>
</address>
</addressbook>
<residence>
<country>GB</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Clee</last-name>
<first-name>Scott J.</first-name>
<address>
<city>Hampshire</city>
<country>GB</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Tilt</last-name>
<first-name>Jonathan S.</first-name>
<address>
<city>Romsey</city>
<country>GB</country>
</address>
</addressbook>
</inventor>
<inventor sequence="003" designation="us-only">
<addressbook>
<last-name>Would</last-name>
<first-name>Daniel E.</first-name>
<address>
<city>Hampshire</city>
<country>GB</country>
</address>
</addressbook>
</inventor>
<inventor sequence="004" designation="us-only">
<addressbook>
<last-name>Xu</last-name>
<first-name>Shanna</first-name>
<address>
<city>Southampton</city>
<country>GB</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Lee Law, PLLC</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
<agent sequence="02" rep-type="attorney">
<addressbook>
<last-name>Lee</last-name>
<first-name>Christopher B.</first-name>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>International Business Machines Corporation</orgname>
<role>02</role>
<address>
<city>Armonk</city>
<state>NY</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Tsai</last-name>
<first-name>Henry</first-name>
<department>2184</department>
</primary-examiner>
<assistant-examiner>
<last-name>Borromeo</last-name>
<first-name>Juanito</first-name>
</assistant-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">A method of providing feedback on source code being created includes receiving source code and processing the received source code according to a predefined rule set to create a representation of the received source code. A source code repository is accessed that includes source code fragments. Each source code fragment in the repository has been processed according to the predefined rule set to create representations of the respective source code fragments. The representation of the received source code is compared to each representation of the source code fragments. A matching score is calculated for the representation of the received source code with respect to each representation of the source code fragments based upon an output of the comparison step. An output derived from the calculated matching scores is presented.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="128.35mm" wi="95.67mm" file="US08627290-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="150.71mm" wi="173.06mm" file="US08627290-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="133.52mm" wi="147.15mm" file="US08627290-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="137.24mm" wi="119.72mm" file="US08627290-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="150.20mm" wi="96.44mm" file="US08627290-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="137.67mm" wi="139.11mm" file="US08627290-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="227.75mm" wi="176.61mm" file="US08627290-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="232.24mm" wi="159.00mm" file="US08627290-20140107-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00008" num="00008">
<img id="EMI-D00008" he="235.54mm" wi="160.27mm" file="US08627290-20140107-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">RELATED APPLICATIONS</heading>
<p id="p-0002" num="0001">This application claims priority to and claims the benefit of European Patent Application Serial No. EP09151985.0 titled &#x201c;TEST CASE PATTERN MATCHING,&#x201d; which was filed in the European Patent Office on Feb. 3, 2009, and which is incorporated herein by reference in its entirety.</p>
<heading id="h-0002" level="1">BACKGROUND</heading>
<p id="p-0003" num="0002">The present subject matter relates to a method of, and system for, providing feedback on source code being created. In one embodiment, the invention may be used for real-time test case pattern matching.</p>
<p id="p-0004" num="0003">Software testing is an investigation carried out to provide information about the quality of the software product under test, in relation to the environment in which it is intended to operate. This includes, for example, the execution of a program with the intent of finding errors. The primary purpose of such software testing is to discover failures so that the detected errors may be corrected. The scope of software testing often includes the execution of the code in various environments and under different conditions. In the current culture of software development, a testing organization may be separate from the development team. Information derived from the software testing may be used to correct the original process by which the software is developed.</p>
<p id="p-0005" num="0004">With the increasing time and resource pressures on test organizations it is vitally important that every new test case that is written is as effective as possible. Test effectiveness, in this context, means that a new test case would exercise the maximum amount of the system under test's (SUT) untested code with the minimum amount of overlap and duplication of existing test cases. The ideal situation in relation to testing using a test suite would be to have test cases that all exercise different areas of the software code. The main benefit being that there is no duplication of test code or effort. However, there is an added benefit in that it becomes easier to isolate bugs.</p>
<p id="p-0006" num="0005">In the case where each test is testing a different part of the code it is likely that one bug in the SUT may only cause one test case to fail. In reality, the coverage provided by the tests tends to be creation tests that are overlapping, in relation to the code that comprises the SUT. This results in large amounts of duplication and overlap and consequently, large amounts of wasted effort. It also means that a single bug may be likely to cause the failure of multiple test cases, thus making debugging more complex. The problem is that the test case programmer receives little help in determining the effectiveness of their test until it is too late to do anything about it.</p>
<p id="p-0007" num="0006">The current solution to this problem is to use code coverage instrumentation, for example, tools such as EMMA (emma.sourceforge.net) during the test execution phase, and then carry out a complex analysis of the output to determine which SUT code is covered by each test case. At this point, overlaps and duplication may be identified so that a more modular test suite may be produced on the second pass. However, the main drawback to this solution is that it is necessary to write all the test code, set up the SUT, instrument the SUT, execute the test cases, analyse the code coverage output, and finally make the assessment on each test's effectiveness before the test programmer may take any action. This is a very time consuming and costly exercise to do properly. In addition, the test code programmers are very reluctant to change what is probably already a valid test case just to remove the duplication. So, valuable time and resources may be wasted.</p>
<heading id="h-0003" level="1">BRIEF SUMMARY</heading>
<p id="p-0008" num="0007">According to a first aspect of the present invention, there is provided a method of providing feedback on source code being created comprising: receiving source code; processing the received source code according to a predefined rule set to create a representation of the received source code; accessing a source code repository comprising source code fragments, each source code fragment in the repository processed according to the predefined rule set to create a representation of the respective source code fragments; comparing the representation of the received source code to each representation of the source code fragments; calculating a matching score for the representation of the received source code with respect to each representation of the source code fragments based upon an output of the comparison step; and presenting an output derived from the calculated matching scores.</p>
<p id="p-0009" num="0008">According to a second aspect of the present invention, there is provided a system of providing feedback on source code being created comprising a display device; a user interface arranged to receive source code; and a processor programmed to: process the received source code according to a predefined rule set to create a representation of the received source code; access a source code repository comprising source code fragments, each source code fragment in the repository processed according to the predefined rule set to create a representation of the respective source code fragments; compare the representation of the received source code to each representation of the source code fragments; calculate a matching score for the representation of the received source code with respect to each representation of the source code fragments based upon an output of the comparison step; and present an output derived from the calculated matching scores via the display device.</p>
<p id="p-0010" num="0009">According to a third aspect of the present invention, there is provided a computer program product on a computer readable storage medium including computer readable program code for providing feedback on source code being created, wherein the computer readable program code when executed on a computer causes the computer to: receive source code; process the received source code according to a predefined rule set to create a representation of the received source code; access a source code repository comprising source code fragments, each source code fragment in the repository processed according to the predefined rule set to create a representation of the respective source code fragments; compare the representation of the received source code to each representation of the source code fragments; calculate a matching score for the representation of the received source code with respect to each representation of the source code fragments based upon an output of the comparison step; and present an output derived from the calculated matching scores.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE SEVERAL VIEWS OF THE DRAWINGS</heading>
<p id="p-0011" num="0010">Embodiments of the present invention will now be described, by way of example only, with reference to the accompanying drawings, in which:</p>
<p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. 1</figref> is a schematic diagram of a client device connected to a server according to an aspect of the present subject matter;</p>
<p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. 2</figref><i>a </i>is a first portion of a schematic diagram of a system under test according to an aspect of the present subject matter;</p>
<p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. 2</figref><i>b </i>is a second portion of a schematic diagram of a system under test according to an aspect of the present subject matter;</p>
<p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. 3</figref> is a schematic diagram of a source code repository according to an aspect of the present subject matter;</p>
<p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. 4</figref> is a schematic diagram of a software development kit and further processing components according to an aspect of the present subject matter;</p>
<p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. 5</figref> is a flow chart of a method of providing feedback on source code being created according to an aspect of the present subject matter;</p>
<p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. 6</figref> is a schematic diagram of a display device showing a software developer kit according to an aspect of the present subject matter;</p>
<p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. 7</figref> is a schematic diagram of a display device showing a software developer kit according to an aspect of the present subject matter;</p>
<p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. 8</figref> is a schematic diagram of a display device showing a software developer kit according to an aspect of the present subject matter; and</p>
<p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. 9</figref> is a schematic diagram of a display device showing a software developer kit according to an aspect of the present subject matter.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0005" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0022" num="0021">Owing to the present subject matter, a method is provided that is capable of letting the test programmer know in real time (i.e. at the point that they are actually writing the code) whether an area of code they are attempting to test has already been exercised. In addition to letting the programmer know about existing test cases, the method may also identify areas of testing that may be rationalized or reused across a test suite to enhance maintainability. The method may recognize patterns in the test code and match them with existing patterns in the source code, to highlight potential duplication. The assumption being that similar patterns of test code will drive similar code coverage patterns in the SUT. By moving the verification as early in the process as possible, test organizations may realize large savings in time and resources by developing more effective test cases.</p>
<p id="p-0023" num="0022">The method and system may be used to provide a user interface allowing code development with continuous reference to a code repository, and visual feedback on the uniqueness of the code being written. This allows a developer to instantly have reference to potential areas of re-use, as well as a clear indication of when a test is treading new ground. So that code in an editor will have visual cues, color may be used to identify code that exists in full or in part within existing files in the code repository. By showing common routines and providing links to other examples, a developer may quickly have reference to code that is intended to be similar, as well as quickly show that new code is indeed testing sequences that are not already covered by existing tests.</p>
<p id="p-0024" num="0023">Furthermore, the immediate feedback on where sequences of calls exist already in the code base may lead to identification of functions currently implemented in a single test case that may be generic helper functions (since they are about to be needed by the new code). The editor may provide the ability to re-factor a function from its point in the code repository to be added to a helper function that may then be called by the existing test, and this new test. This step may require re-factoring of the original test case, and the function itself, if the function was not originally written to be modular. However any variable references that relied on global scope may be fixed by making them function inputs.</p>
<p id="p-0025" num="0024">The resulting interface may yield significant productivity gains, allowing testers to stick to standard style where they expect code to be similar, and quickly identify any existing similar test code. The method allows the minimizing of the time that is spent re-writing code that already exists, and maximizing confidence that new code is indeed testing new things within the SUT.</p>
<p id="p-0026" num="0025">Advantageously, the step of comparing the representation of the received source code to a representation of a source code fragment comprises comparing one or more lines of the representation of the received source code to one or more lines of the representation of the source code fragment. A line by line comparison may be used to compare the source code being entered to the source code stored in the repository. This provides a simple and efficient method of determining the extent of the similarity between the two components.</p>
<p id="p-0027" num="0026">In one embodiment, the step of calculating a matching score for the representation of the received source code with respect to a representation of a source code fragment comprises calculating a binary score indicating whether there is a match. The method may be used to identify only those components within the stored source code of the repository that are identical to the new source code being created.</p>
<p id="p-0028" num="0027">In a further embodiment, the step of calculating a matching score for the representation of the received source code with respect to a representation of a source code fragment comprises calculating a score based upon the number of matching lines between the representation of the received source code and the representation of the source code fragment. An improved feedback result may be achieved by deriving a matching score from the extent of the match between the new source code and the existing source code. This may be a percentage of lines that match between the two components, or may be a number representing the number of patterns within the new source code that match with the existing source code. This may be used to provide an output to the user that may support a more intelligent review of those parts of the existing source code that are relevant to the new source code being created.</p>
<p id="p-0029" num="0028">The step of presenting an output derived from the calculated matching scores comprises displaying a representation of the source code repository indicating the matching of the representation of the received source code with respect to the representations of the source code fragment, the representation indicating the level of matching within portions of the source code repository. The user may be provided with a visualization of the stored source code that indicates where there is matching to the current source code being created, and also the user may receive an indication of the extent of that matching. An alternative visual representation may be that the source code that the user is creating is highlighted in some way to indicate those portions that match existing source code. For example, the user may enter ten lines of source code, and those lines that are detected as existing already may be highlighted to the user.</p>
<p id="p-0030" num="0029">A client device <b>10</b>, such as a standard desktop computer <b>10</b>, is shown in <figref idref="DRAWINGS">FIG. 1</figref>. The client device <b>10</b> is connected to a remote server <b>12</b>, which functions as a source code repository <b>12</b>. The client device <b>10</b> comprises a processor <b>14</b>, a user interface <b>16</b> and a display device <b>18</b>. Further components of the client device <b>10</b> are also present, but not shown, such as storage components and network connections and so on. The client device <b>10</b> serves the function of allowing a software developer or software tester to create source code, either for the purpose of adding to or amending the source code already present on the source code repository <b>12</b>, or for the purpose of creating one or more tests for use in a testing of source code on the source code repository <b>12</b>. A computer readable medium <b>20</b> is provided, such as a CD-ROM, which stores a suitable software developer kit (SDK) for creating the source code, when that SDK is run by the client device <b>10</b>.</p>
<p id="p-0031" num="0030"><figref idref="DRAWINGS">FIGS. 2</figref><i>a </i>and <b>2</b><i>b </i>illustrate the concept of software testing, in relation to source code <b>22</b>, which is stored by the source code repository <b>12</b>. A software tester, or software testing team, may write source code for testing programs <b>24</b>. The ideal situation is illustrated in <figref idref="DRAWINGS">FIG. 2</figref><i>a</i>, in which three testing programs <b>24</b> have been written that each test different parts of the source code <b>22</b>. However, in reality the test coverage tends to be closer to the arrangement shown in <figref idref="DRAWINGS">FIG. 2</figref><i>b</i>. In this <figref idref="DRAWINGS">FIG. 2</figref><i>b</i>, the test programs <b>24</b> overlap, in relation to the source code <b>22</b> that is actually being tested. This has various inefficiencies, as discussed above. For example, overlapping test programs <b>24</b> makes it harder to test the entire source code <b>22</b>, and may also return multiple errors that actually relate to the same bug in the source code. This latter problem leads to duplication in relation to the debugging of the source code <b>22</b> of the system under test.</p>
<p id="p-0032" num="0031">The solution to the problems such as those described above is a system in three principal parts. First, there is provided a method and system for indexing the repository <b>12</b> of source code <b>22</b>, based on a canonical form template to be appropriate to the language/context of the source code <b>22</b>. For example, a typical language canonical form may ignore all comments within the source code <b>22</b>, and refer to all variables based on their type, and constant value (where applicable). The indexing may also provide a means of representing tests as sequences of function calls, grouped in accordance with a template to represent calls which equate to product API/test infrastructure calls/base function library calls.</p>
<p id="p-0033" num="0032"><figref idref="DRAWINGS">FIG. 3</figref> illustrates the principle of an indexed source code repository <b>12</b>. The source code <b>22</b> stored in the repository <b>12</b> is processed in such a way as to be converted to a representation <b>26</b>. Individual fragments <b>28</b> of the source code <b>22</b> are converted to respective representations <b>28</b>&#x2032; of the fragments <b>28</b>. The fragments <b>28</b> may be individual routines within the source code <b>22</b> or may just be one or more lines of source code, without necessarily any logical break between individual fragments <b>28</b>. The processing is carried out according to a rule set, which comprises one or more rules. The rule set may be specific to the language used in the source code <b>22</b>.</p>
<p id="p-0034" num="0033">Each fragment <b>28</b> of the original source code <b>22</b> may be processed, using the predefined rule set, to produce a respective representation <b>28</b>&#x2032; of the original fragment, within the overall representation <b>26</b>. The purpose of the conversion of the original source code <b>22</b> is to remove and/or change aspects of the source code <b>22</b> that would make later searching difficult. For example, comments inserted by developers have no programming purpose other than to inform later readers of the source code <b>22</b> about the function of particular routines, and may be removed in the translation from the original source code <b>22</b> to the representation <b>26</b>. Similarly, certain types of routines and functions embodied by the fragments <b>28</b> of the source code <b>22</b> may be converted into a predefined format using a template specified in the rule set.</p>
<p id="p-0035" num="0034">Second, an editor, or plug-in for the SDK, is provided, which will dynamically hold a canonical representation of an active code fragment using the same rules as are currently active for the code repository <b>12</b>. Additionally, the editor may provide visual feedback colored to indicate duplicated code areas and uniqueness.</p>
<p id="p-0036" num="0035"><figref idref="DRAWINGS">FIG. 4</figref> shows the SDK <b>30</b> and a plug-in <b>32</b>, which are receiving source code <b>34</b> from the user interface <b>16</b>, as it is created by a software tester for example. The plug-in <b>32</b> provides access to the rule set <b>36</b>, which supports the transformation of the received source code <b>34</b> into a representation <b>38</b>. As in the processing of the existing source code <b>22</b> in the repository <b>12</b>, the rule set <b>36</b> will remove and amend the received source code <b>34</b> to create a new representation <b>38</b> of the source code <b>34</b>.</p>
<p id="p-0037" num="0036">Finally, a search engine is used, which may form part of the SDK <b>30</b>, the plug-in <b>32</b>, or may be a completely separate unit. The search engine takes in the canonical code fragments <b>38</b>, and separates them into API sequences, to perform independent searches against the source code <b>22</b> of the indexed code repository <b>12</b>. Each sequence is searched as a multiple set. First a search for just the first line gives a hit count for its occurrences, then a search for the first and second in a sequence gives a count for the occurrences of both lines in that order. The sequence is continued until there are 0 counts for the set in a row. This forms a break point and a new search is performed for only the last line and its count is also determined, forming the start of potentially a new group of calls in a sequence. Once completed the search results yield scores for each sequence of calls in terms of the hit count on the existing code base. By separating the sequences as they apply to separate APIs it is possible to ignore irrelevant differences, such as the order of unrelated calls. The values are fed to the editor visualization, which is displayed on the external display <b>18</b>, which codes each entry in the code fragment with its own uniqueness, and a second value for the group (if any) that it is within.</p>
<p id="p-0038" num="0037"><figref idref="DRAWINGS">FIG. 5</figref> shows a flowchart of an embodiment of an implementation of the methodology described above. The method of providing the feedback on the source code <b>34</b> being created comprises first, at step S<b>1</b>, receiving the source code <b>34</b> and second, at step S<b>2</b>, processing the received source code <b>34</b> according to the predefined rule set <b>36</b> to create the representation <b>38</b> of the received source code <b>34</b>. As discussed above, the received code <b>34</b> is converted to a format that enables comparison with the stored source code <b>22</b> of the repository <b>12</b>.</p>
<p id="p-0039" num="0038">The next step is the step S<b>3</b> of accessing the source code repository <b>12</b>, where each source code fragment <b>28</b> in the repository <b>12</b> has already been processed according to the same predefined rule set <b>36</b> to create a representation <b>28</b>&#x2032; of the respective source code fragments <b>28</b>. At step S<b>4</b>, there is then carried out the step of comparing the representation <b>38</b> of the received source code <b>34</b> to each representation <b>28</b>&#x2032; of the source code fragments <b>28</b>. In one embodiment, the step S<b>4</b> comprises comparing one or more lines of the representation <b>38</b> of the received source code <b>34</b> to one or more lines of the representation <b>28</b>&#x2032; of a source code fragment <b>28</b> stored in the repository <b>12</b>.</p>
<p id="p-0040" num="0039">The next step S<b>5</b> comprises calculating a matching score for the representation <b>38</b> of the received source code <b>34</b> with respect to each representation <b>28</b>&#x2032; of the source code fragments <b>28</b> based upon the output of the comparison step S<b>4</b>. In one form, the step of calculating a matching score comprises calculating a binary score (1 or 0) indicating whether there is a match or not. In another arrangement, the step of calculating a matching score comprises calculating a score based upon the number of matching lines between the representation <b>38</b> of the received source code <b>34</b> and the representation <b>28</b>&#x2032; of the source code fragment <b>28</b>. In this latter case, the match may be represented as a percentage, for example, giving a range of 0% (no match at all) to 100% (the two representations being identical).</p>
<p id="p-0041" num="0040">The final step in the method is step S<b>6</b>, which comprises presenting an output derived from the calculated matching scores. Preferably, this step comprises displaying a representation of the source code repository <b>12</b> indicating the matching of the representation <b>38</b> of the received source code <b>34</b> with respect to the representations <b>28</b>&#x2032; of the source code fragment <b>28</b>, the representation indicating the level of matching within portions of the source code repository <b>12</b>.</p>
<p id="p-0042" num="0041"><figref idref="DRAWINGS">FIG. 6</figref> shows one example of how a presentation to the user may look, in relation to providing the feedback to the user about the current source code being created. The processor <b>14</b> is running a software developer kit <b>30</b> with a plug-in <b>32</b>, as described above, with reference to <figref idref="DRAWINGS">FIG. 4</figref>. The display device <b>18</b> shows a graphical user interface to the SDK <b>30</b> which comprises two windows <b>40</b> and <b>42</b>. The window <b>40</b> shows the text editor, where the source code <b>34</b> entered by the test programmer is shown, and the window <b>42</b> shows the display of the representation <b>44</b> of the source code <b>22</b> in the source code repository <b>12</b>.</p>
<p id="p-0043" num="0042">The matching process has identified two parts <b>46</b> of the source code <b>22</b>, in the repository <b>12</b>, as matching the current source code <b>34</b> entered by the user. The icons <b>46</b> indicating the match may be color coded to represent the extent of the match, if a percentage system is being used, for example. Alternatively, if a binary system of matching is being used, then the parts of the source code <b>22</b> that are identical to the entered source code <b>34</b> may be indicated. It should be understood that the matching is between the representations of the two source codes, i.e. after they have been processed with the rule set <b>36</b> to convert them to the template form of the source code.</p>
<p id="p-0044" num="0043">The user interface may provide various features that the user may access to improve the functionality of the matching and display process. For example, the SDK may be arranged so that the user may switch between the binary and graded systems of matching, and indeed set the level of the grading. For example, if a percentage system is being used, then the user may set a level such as 90%, and only those portions of the source code <b>22</b> that have a 90% or greater similarity with the source code <b>34</b> being entered may be displayed to the user. The user may also drill down into the code as displayed in the window <b>42</b>, with a zoom like function. This may be used to find out more detail about the matching code indicated by the icons <b>46</b>.</p>
<p id="p-0045" num="0044">To aid understanding, the following steps provide a practical example of how the method may be implemented for the specific piece of source code shown in <figref idref="DRAWINGS">FIG. 6</figref>. These steps are to be done in real-time as the user is typing code into the editor.</p>
<p id="p-0046" num="0045">Step 1: Code is written in an editor such as Eclipse</p>
<p id="h-0006" num="0000">Test1.java</p>
<p id="h-0007" num="0000">/* This is a comment */</p>
<p id="h-0008" num="0000">addItem(x);</p>
<p id="h-0009" num="0000">/* This is another comment */</p>
<p id="h-0010" num="0000">deleteItem(x);</p>
<p id="p-0047" num="0046">Step 2: A canonicalized version of the code is held internally, in which all comments, white space and formatting is removed. This enables code to be compared from people with different coding styles.</p>
<p id="h-0011" num="0000">Test1.java canonicalized code</p>
<p id="h-0012" num="0000">addItem(x);</p>
<p id="h-0013" num="0000">deleteItem(x);</p>
<p id="p-0048" num="0047">Step 3: Encode function calls to differentiate overloaded parameters. A sample encoding mechanism to differentiate overloaded functions may be addItem(String)&#x2192;addItem_String and addItem(int)&#x2192;addItem_Int.</p>
<p id="h-0014" num="0000">Applying this to Test1.java we get:</p>
<p id="h-0015" num="0000">Test1.java encoded calls</p>
<p id="h-0016" num="0000">addItem_String</p>
<p id="h-0017" num="0000">deleteItem_String</p>
<p id="p-0049" num="0048">Step 4: Generate patterns down to maximum depth</p>
<p id="p-0050" num="0049">From the above code it is possible to get three unique patterns. As the number of lines increases so does the number of patterns, at an exponential rate. A maximum depth value may be used to limit the number lines that are used to generated patterns in a section of code.</p>
<p id="h-0018" num="0000">Test1.java patterns</p>
<p id="h-0019" num="0000">1. addItem_String</p>
<p id="h-0020" num="0000">2. deleteItem_String</p>
<p id="h-0021" num="0000">3. addItem_String</p>
<p id="p-0051" num="0000">
<ul id="ul0001" list-style="none">
    <li id="ul0001-0001" num="0000">
    <ul id="ul0002" list-style="none">
        <li id="ul0002-0001" num="0050">deleteItem_String</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0052" num="0051">Step 5: Compare generated patterns against stored patterns and flag existence switch on existing patterns. When code is integrated into a code repository its code patterns are generated and stored in a database (such as DB2) for real-time pattern matching. It is this database that the above patterns are compared against.</p>
<p id="p-0053" num="0052">Below are some scenarios that show the effectiveness of pattern matching against test cases. It is assumed that Test1.java from Step 1 has already been integrated into the code repository and therefore its patterns exist in the database.</p>
<p id="h-0022" num="0000">Scenario 1: Test2a.java contains exactly the same code as Test1.java</p>
<p id="h-0023" num="0000">Test2a.java (canonicalized &#x26; encoded)</p>
<p id="h-0024" num="0000">addItem_String</p>
<p id="h-0025" num="0000">deleteItem_String</p>
<p id="h-0026" num="0000">Test2a.java patterns</p>
<p id="h-0027" num="0000">1. addItem_String [EXISTS]</p>
<p id="h-0028" num="0000">2. deleteItem_String [EXISTS]</p>
<p id="h-0029" num="0000">3. addItem_String</p>
<p id="p-0054" num="0000">
<ul id="ul0003" list-style="none">
    <li id="ul0003-0001" num="0000">
    <ul id="ul0004" list-style="none">
        <li id="ul0004-0001" num="0053">deleteItem_String [EXISTS]</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0055" num="0054">Looking at the patterns it may be seen that they already exist. Therefore Test2b.java is giving no additional value on top of what is already present.</p>
<p id="h-0030" num="0000">Scenario 2: Test2b.java contains same code as Test1.java, but the other way around</p>
<p id="h-0031" num="0000">Test2b.java (canonicalized &#x26; encoded)</p>
<p id="h-0032" num="0000">deleteItem_String</p>
<p id="h-0033" num="0000">addItem_String</p>
<p id="h-0034" num="0000">Test2b.java patterns</p>
<p id="h-0035" num="0000">1. addItem_String [EXISTS]</p>
<p id="h-0036" num="0000">2. deleteItem_String [EXISTS]</p>
<p id="h-0037" num="0000">3. deleteItem_String</p>
<p id="p-0056" num="0000">
<ul id="ul0005" list-style="none">
    <li id="ul0005-0001" num="0000">
    <ul id="ul0006" list-style="none">
        <li id="ul0006-0001" num="0055">addItem_String [NEW]</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0057" num="0056">By switching the deleteItem_String and addItem_String calls around there has now been generated a new test case, as shown in pattern 3.</p>
<p id="p-0058" num="0057">Scenario 3: Test3.java add a new function call</p>
<p id="h-0038" num="0000">Test3.java (canonicalized &#x26; encoded)</p>
<p id="h-0039" num="0000">addItem_String</p>
<p id="h-0040" num="0000">changeItem_String</p>
<p id="h-0041" num="0000">deleteItem_String</p>
<p id="h-0042" num="0000">Test3.java patterns</p>
<p id="h-0043" num="0000">1. addItem_String [EXISTS]</p>
<p id="h-0044" num="0000">2. changeItem_String [NEW]</p>
<p id="h-0045" num="0000">3. deleteItem_String [EXISTS]</p>
<p id="h-0046" num="0000">4. addItem_String</p>
<p id="p-0059" num="0000">
<ul id="ul0007" list-style="none">
    <li id="ul0007-0001" num="0000">
    <ul id="ul0008" list-style="none">
        <li id="ul0008-0001" num="0058">changeItem_String [NEW]
<br/>
5. changeItem_String
</li>
        <li id="ul0008-0002" num="0059">deleteItem_String [NEW]
<br/>
6. addItem_String
</li>
        <li id="ul0008-0003" num="0060">changeItem_String</li>
        <li id="ul0008-0004" num="0061">deleteItem_String [NEW]</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0060" num="0062">By adding another function call (changeItem_String) the coverage of the test has changed since there are four new patterns being tested. Therefore Test3.java provides considerable value on top of the tests already in the code repository.</p>
<p id="p-0061" num="0063">Step 6: Visually represent findings in real-time. Even a simple count of existence flags gives a value of four. Having understood which code patterns are new and which ones already exist, this data may be visually presented to the user. A simple mechanism for this would be to count the [NEW] flags for a block of code and show the value. In this case, Test2a.java would have a value of &#x201c;0&#x201d; to signify it has little value. Test2b.java has a value of &#x201c;1&#x201d; and Test3.java has a value of &#x201c;4&#x201d;.</p>
<p id="p-0062" num="0064">Other mechanisms may be to change the background color of the lines of code to signify their value. In this case, blocks of code may be shown to have a background color or shading if they provide no additional value, and potentially a different color or shading to show unique patterns. Additionally grades of color may be chosen to indicate larger stretches of repeated code, such that the more lines in a row that are found elsewhere in the repository the darker the color. <figref idref="DRAWINGS">FIG. 7</figref> shows an alternative view of the visualisation of the matching process, in which the display device <b>18</b> shows the entered source code <b>34</b> with existing code <b>46</b> highlighted by shading. Warnings may be provided on the left hand side bar (not shown) providing access to quick help features to provide options such as importing existing functions or refactoring to new shared features. <figref idref="DRAWINGS">FIG. 8</figref> shows the prompt to import existing functions from the code repository to create a new test pattern, and <figref idref="DRAWINGS">FIG. 9</figref> shows a tool used to detect an existing pattern and to prompt a user to generate a shared library. These example mechanisms may give the developer real-time feedback at the point of writing code to steer them to writing the most effective code based on the existing information within the code repository.</p>
<p id="p-0063" num="0065">The system described above also has the additional benefit of highlighting potential code re-use. For example, when new code is written, where areas of it are shown to already exist in the code repository this highlights potential areas of code re-use. This common pattern code may be put into a library function and called from the many areas where it is shown to exist.</p>
<p id="p-0064" num="0066">As will be appreciated by one skilled in the art, aspects of the present invention may be embodied as a system, method or computer program product. Accordingly, aspects of the present invention may take the form of an entirely hardware embodiment, an entirely software embodiment (including firmware, resident software, micro-code, etc.) or an embodiment combining software and hardware aspects that may all generally be referred to herein as a &#x201c;circuit,&#x201d; &#x201c;module&#x201d; or &#x201c;system.&#x201d; Furthermore, aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium(s) having computer readable program code embodied thereon.</p>
<p id="p-0065" num="0067">Any combination of one or more computer readable medium(s) may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be, for example, but not limited to, an electronic, magnetic, optical, electromagnetic, infrared, or semiconductor system, apparatus, or device, or any suitable combination of the foregoing. More specific examples (a non-exhaustive list) of the computer readable storage medium would include the following: an electrical connection having one or more wires, a portable computer diskette, a hard disk, a random access memory (RAM), a read-only memory (ROM), an erasable programmable read-only memory (EPROM or Flash memory), a portable compact disc read-only memory (CD-ROM), an optical storage device, a magnetic storage device, or any suitable combination of the foregoing. In the context of this document, a computer readable storage medium may be any tangible medium that can contain, or store a program for use by or in connection with an instruction execution system, apparatus, or device.</p>
<p id="p-0066" num="0068">A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein, for example, in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms, including, but not limited to, electro-magnetic, optical, or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate, propagate, or transport a program for use by or in connection with an instruction execution system, apparatus, or device.</p>
<p id="p-0067" num="0069">Program code embodied on a computer readable medium may be transmitted using any appropriate medium, including but not limited to wireless, wireline, optical fiber cable, RF, etc., or any suitable combination of the foregoing.</p>
<p id="p-0068" num="0070">Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages, including an object oriented programming language such as Java, Smalltalk, C++ or the like and conventional procedural programming languages, such as the &#x201c;C&#x201d; programming language or similar programming languages. The program code may execute entirely on the user's computer, partly on the user's computer, as a stand-alone software package, partly on the user's computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario, the remote computer may be connected to the user's computer through any type of network, including a local area network (LAN) or a wide area network (WAN), or the connection may be made to an external computer (for example, through the Internet using an Internet Service Provider).</p>
<p id="p-0069" num="0071">Aspects of the present invention are described below with reference to flowchart illustrations and/or block diagrams of methods, apparatus (systems) and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and/or block diagrams, and combinations of blocks in the flowchart illustrations and/or block diagrams, can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer, special purpose computer, or other programmable data processing apparatus to produce a machine, such that the instructions, which execute via the processor of the computer or other programmable data processing apparatus, create means for implementing the functions/acts specified in the flowchart and/or block diagram block or blocks.</p>
<p id="p-0070" num="0072">These computer program instructions may also be stored in a computer-readable storage medium that can direct a computer or other programmable data processing apparatus to function in a particular manner, such that the instructions stored in the computer-readable storage medium produce an article of manufacture including instructions which implement the function/act specified in the flowchart and/or block diagram block or blocks.</p>
<p id="p-0071" num="0073">The computer program instructions may also be loaded onto a computer, other programmable data processing apparatus, or other devices to cause a series of operational steps to be performed on the computer, other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions/acts specified in the flowchart and/or block diagram block or blocks.</p>
<p id="p-0072" num="0074">The flowchart and block diagrams in the Figures illustrate the architecture, functionality, and operation of possible implementations of systems, methods and computer program products according to various embodiments of the present invention. In this regard, each block in the flowchart or block diagrams may represent a module, segment, or portion of code, which comprises one or more executable instructions for implementing the specified logical function(s). It should also be noted that, in some alternative implementations, the functions noted in the block may occur out of the order noted in the figures. For example, two blocks shown in succession may, in fact, be executed substantially concurrently, or the blocks may sometimes be executed in the reverse order, depending upon the functionality involved. It will also be noted that each block of the block diagrams and/or flowchart illustration, and combinations of blocks in the block diagrams and/or flowchart illustration, can be implemented by special purpose hardware-based systems that perform the specified functions or acts, or combinations of special purpose hardware and computer instructions.</p>
<p id="p-0073" num="0075">A data processing system suitable for storing and/or executing program code will include at least one processor coupled directly or indirectly to memory elements through a system bus. The memory elements can include local memory employed during actual execution of the program code, bulk storage, and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution.</p>
<p id="p-0074" num="0076">Input/output or I/O devices (including but not limited to keyboards, displays, pointing devices, etc.) can be coupled to the system either directly or through intervening I/O controllers.</p>
<p id="p-0075" num="0077">Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems, cable modems and Ethernet cards are just a few of the currently available types of network adapters.</p>
<p id="p-0076" num="0078">The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein, the singular forms &#x201c;a&#x201d;, &#x201c;an&#x201d; and &#x201c;the&#x201d; are intended to include the plural forms as well, unless the context clearly indicates otherwise. It will be further understood that the terms &#x201c;comprises&#x201d; and/or &#x201c;comprising,&#x201d; when used in this specification, specify the presence of stated features, integers, steps, operations, elements, and/or components, but do not preclude the presence or addition of one or more other features, integers, steps, operations, elements, components, and/or groups thereof.</p>
<p id="p-0077" num="0079">The corresponding structures, materials, acts, and equivalents of all means or step plus function elements in the claims below are intended to include any structure, material, or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present invention has been presented for purposes of illustration and description, but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiment was chosen and described in order to best explain the principles of the invention and the practical application, and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A system of providing feedback on source code being created, comprising:
<claim-text>a display device;</claim-text>
<claim-text>a user interface arranged to receive the source code; and</claim-text>
<claim-text>a processor programmed to:
<claim-text>process the received source code according to a predefined rule set to create an encoded text string representation of each function of the received source code, where each encoded text string representation comprises a text string that identifies each parameter type of the respective function of the received source code, and where the encoded text string representation of each function of the received source code is usable to identify existing source code similar to the received source code;</claim-text>
</claim-text>
<claim-text>access a source code repository comprising source code fragments and an encoded text string representation of each source code fragment, each source code fragment in the repository processed according to the predefined rule set to create the encoded text string representation of the respective source code fragment to comprise for each function of the source code fragment a text string that identifies each parameter type of the respective function of the source code fragment;</claim-text>
<claim-text>compare, in real time, the encoded text string representation of each function of the received source code to each encoded text string representation of the source code fragments;</claim-text>
<claim-text>calculate a matching score for the encoded text string representation of each function of the received source code with respect to each encoded text string representation of the source code fragments based upon an output of the comparison step; and</claim-text>
<claim-text>present an output derived from the calculated matching scores via the display device.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, where, in being programmed to compare, in real time, the encoded text string representation of each function of the received source code to each encoded text string representation of the source code fragments, the processor is programmed to compare one or more lines of the encoded text string representation of the received source code to one or more lines of the encoded text string representation of the source code fragments.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The system of <claim-ref idref="CLM-00002">claim 2</claim-ref>, where, in being programmed to calculate the matching score for the encoded text string representation of each function of the received source code with respect to each encoded text string representation of the source code fragments, the processor is programmed to calculate a score based upon a number of matching lines across all of the encoded text string representations of the received source code and the encoded text string representations of the source code fragments.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, where, in being programmed to calculate the matching score for the encoded text string representation of each function of the received source code with respect to each encoded text string representation of the source code fragments, the processor is programmed to calculate a binary score indicating whether there is a match or not.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, where, in being programmed to present the output derived from the calculated matching scores via the display device, the processor is programmed to display a representation of the source code repository indicating the matching score for the encoded text string representation of each function of the received source code with respect to each encoded text string representation of the source code fragments, the representation of the source code repository indicating a level of matching within portions of the source code repository.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. A computer program product on a computer readable storage medium including computer readable program code for providing feedback on source code being created, where the computer readable program code when executed on a computer causes the computer to:
<claim-text>receive the source code;</claim-text>
<claim-text>process the received source code according to a predefined rule set to create an encoded text string representation of each function of the received source code, where each encoded text string representation comprises a text string that identifies each parameter type of the respective function of the received source code, and where the encoded text string representation of each function of the received source code is usable to identify existing source code similar to the received source code;</claim-text>
<claim-text>access a source code repository comprising source code fragments and an encoded text string representation of each source code fragment, each source code fragment in the repository processed according to the predefined rule set to create the encoded text string representation of the respective source code fragment to comprise for each function of the source code fragment a text string that identifies each parameter type of the respective function of the source code fragment;</claim-text>
<claim-text>compare, in real time, the encoded text string representation of each function of the received source code to each encoded text string representation of the source code fragments;</claim-text>
<claim-text>calculate a matching score for the encoded text string representation of each function of the received source code with respect to each encoded text string representation of the source code fragments based upon an output of the comparison step; and</claim-text>
<claim-text>present an output derived from the calculated matching scores.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The computer program product of <claim-ref idref="CLM-00006">claim 6</claim-ref>, where, in causing the computer to compare, in real time, the encoded text string representation of each function of the received source code to each encoded text string representation of the source code fragments, the computer readable program when executed on the computer causes the computer to compare one or more lines of the encoded text string representation of the received source code to one or more lines of the encoded text string representation of the source code fragments.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The computer program product of <claim-ref idref="CLM-00007">claim 7</claim-ref>, where, in causing the computer to calculate the matching score for the encoded text string representation of each function of the received source code with respect to each encoded text string representation of the source code fragments, the computer readable program when executed on the computer causes the computer to calculate a score based upon a number of matching lines across all of the encoded text string representations of the received source code and the encoded text string representations of the source code fragments.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The computer program product of <claim-ref idref="CLM-00006">claim 6</claim-ref>, where, in causing the computer to calculate the matching score for the encoded text string representation of each function of the received source code with respect to each encoded text string representation of the source code fragments, the computer readable program when executed on the computer causes the computer to calculate a binary score indicating whether there is a match or not.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The computer program product of <claim-ref idref="CLM-00006">claim 6</claim-ref>, where, in causing the computer to present the output derived from the calculated matching scores, the computer readable program when executed on the computer causes the computer to display a representation of the source code repository indicating the matching score for the encoded text string representation of each function of the received source code with respect to each text string representation of the source code fragments, the representation of the source code repository indicating a level of matching within portions of the source code repository. </claim-text>
</claim>
</claims>
</us-patent-grant>

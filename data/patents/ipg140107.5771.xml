<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08626876-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08626876</doc-number>
<kind>B1</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>13687724</doc-number>
<date>20121128</date>
</document-id>
</application-reference>
<us-application-series-code>13</us-application-series-code>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>15</main-group>
<subgroup>16</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>709219</main-classification>
<further-classification>709203</further-classification>
<further-classification>709223</further-classification>
<further-classification>709246</further-classification>
</classification-national>
<invention-title id="d2e43">Intermediate content processing for content delivery networks</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>7240100</doc-number>
<kind>B1</kind>
<name>Wein et al.</name>
<date>20070700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709214</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>8194538</doc-number>
<kind>B2</kind>
<name>Bornstein et al.</name>
<date>20120600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>8219645</doc-number>
<kind>B2</kind>
<name>Harvell et al.</name>
<date>20120700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>8255557</doc-number>
<kind>B2</kind>
<name>Raciborski et al.</name>
<date>20120800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>2007/0153782</doc-number>
<kind>A1</kind>
<name>Fletcher et al.</name>
<date>20070700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>2009/0031128</doc-number>
<kind>A1</kind>
<name>French et al.</name>
<date>20090100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>713164</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>2011/0055312</doc-number>
<kind>A1</kind>
<name>Purdy</name>
<date>20110300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>2011/0173345</doc-number>
<kind>A1</kind>
<name>Knox et al.</name>
<date>20110700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709246</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>2011/0213971</doc-number>
<kind>A1</kind>
<name>Gurel et al.</name>
<date>20110900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>713165</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>2012/0096546</doc-number>
<kind>A1</kind>
<name>Dilley et al.</name>
<date>20120400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>726 22</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>2012/0198043</doc-number>
<kind>A1</kind>
<name>Hesketh et al.</name>
<date>20120800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709223</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>2012/0209942</doc-number>
<kind>A1</kind>
<name>Zehavi et al.</name>
<date>20120800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709213</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00013">
<document-id>
<country>US</country>
<doc-number>2012/0246273</doc-number>
<kind>A1</kind>
<name>Bornstein et al.</name>
<date>20120900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709217</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00014">
<document-id>
<country>US</country>
<doc-number>2012/0275597</doc-number>
<kind>A1</kind>
<name>Knox et al.</name>
<date>20121100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>380210</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00015">
<document-id>
<country>US</country>
<doc-number>2013/0018978</doc-number>
<kind>A1</kind>
<name>Crowe et al.</name>
<date>20130100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709214</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00016">
<document-id>
<country>EP</country>
<doc-number>1493094</doc-number>
<kind>B1</kind>
<date>20110700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00017">
<othercit>Suman Ramkumar Srinivasan et al., &#x201c;ActiveCDN: Cloud Computing Meets Content Delivery Networks&#x201d;, Retrieved on Jan. 17, 2013 from http://academiccommons.columbia.edu/catalog/ac%3A141937, 2011, 7 Pages, Department of Computer Science, Columbia University, New York.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00018">
<othercit>&#x201c;Architectural Design of Content Delivery Networks (CDNs) for Media Distribution&#x201d; Retrieved on Jan. 17, 2013 from http://essaybank.degree-essays.com/computer-science/architectural-design-of-content-delivery-networks-cdns-for-media-distribution.php, Degree Essays.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00019">
<othercit>Fen Zhou et al., &#x201c;Minimizing Server Throughput for Low-Delay Live Streaming in Content Delivery Networks&#x201d; Retrieved on Jan. 17, 2013 from https://portail.telecom-bretagne.eu/publi/public/fic<sub>&#x2014;</sub>download.jsp?id=7862, Jun. 7-8, 2012, 6 Pages, Toronto, Canada.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>20</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>709203</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709217</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709219</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709223</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709246</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>10</number-of-drawing-sheets>
<number-of-figures>10</number-of-figures>
</figures>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only" applicant-authority-category="assignee">
<addressbook>
<orgname>Limelight Networks, Inc.</orgname>
<address>
<city>Tempe</city>
<state>AZ</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Kokal</last-name>
<first-name>Mohan I.</first-name>
<address>
<city>Peoria</city>
<state>AZ</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Harvell</last-name>
<first-name>Bradley B.</first-name>
<address>
<city>Chandler</city>
<state>AZ</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Kilpatrick Townsend &#x26; Stockton LLP</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>Limelight Networks, Inc.</orgname>
<role>02</role>
<address>
<city>Tempe</city>
<state>AZ</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Duong</last-name>
<first-name>Oanh</first-name>
<department>2441</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">An intermediate server for handling content requests received from edge servers in a Content Delivery Network (CDN) and accessing and processing content distributed throughout the CDN may include a port that receives a content request from an edge server in a same Point-of-Presence (POP) including a URI. The ICPS may also include a content processor communicatively coupled to the port and configured to perform a processing function on the requested content to produce processed content for delivery to the edge server. The ICPS may further include a CDN content interface that provides virtualized access to content files accessible using URIs throughout the CDN and configured to receive a portion of the requested content using the URI stored in a second POP, and provide the requested content to the content processor, wherein the requested content comprises the portion of the requested content.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="124.80mm" wi="169.67mm" file="US08626876-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="201.93mm" wi="154.77mm" orientation="landscape" file="US08626876-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="149.01mm" wi="129.96mm" orientation="landscape" file="US08626876-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="199.05mm" wi="144.95mm" orientation="landscape" file="US08626876-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="180.17mm" wi="148.08mm" orientation="landscape" file="US08626876-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="181.10mm" wi="148.59mm" orientation="landscape" file="US08626876-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="185.50mm" wi="147.40mm" orientation="landscape" file="US08626876-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="194.65mm" wi="127.68mm" file="US08626876-20140107-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00008" num="00008">
<img id="EMI-D00008" he="192.28mm" wi="145.46mm" orientation="landscape" file="US08626876-20140107-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00009" num="00009">
<img id="EMI-D00009" he="165.78mm" wi="145.12mm" file="US08626876-20140107-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00010" num="00010">
<img id="EMI-D00010" he="186.44mm" wi="152.74mm" orientation="landscape" file="US08626876-20140107-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">BACKGROUND</heading>
<p id="p-0002" num="0001">This disclosure relates in general to a content delivery network (CDN) and, but not by way of limitation, to intermediate caching and processing to more efficiently utilize the CDN.</p>
<p id="p-0003" num="0002">A CDN is a large distributed system of servers deployed in multiple data centers in the Internet. The goal of a CDN is to serve content to end-users with high availability and high performance. Besides better performance and availability, CDNs also offload the traffic served directly from the content provider's origin infrastructure. CDNs can include geographically distributed points of presence (POPs) to locate edge servers close to end users. CDNs are capable of delivering content in high demand with higher levels of quality of service (QoS). Content can be requested by universal resource locator (URL) from a CDN. Various techniques are used to route a URL request to a nearby POP, for example, in order to efficiently retrieve content.</p>
<p id="p-0004" num="0003">Customers are using CDNs and cloud services in more creative ways. Applications, storage, and other services are being provided remotely. New forms and formats for content delivery are constantly being provided that can possibly provide greater access to content, faster transfer rates, and less burden on origin servers.</p>
<heading id="h-0002" level="1">SUMMARY</heading>
<p id="p-0005" num="0004">In one embodiment, the present disclosure provides a description of an intermediate server for handling content requests received from edge servers in a Content Delivery Network (CDN) and accessing and processing content distributed throughout the CDN. The intermediate server may include a port that receives a content request from an edge server. The content request may include a Uniform Resource Identifier (URI) associated with requested content, and the edge server and the intermediate server may be part of a first Point-of-Presence (POP) in the CDN. The intermediate server may also include a content processor communicatively coupled to the port and configured to pass the URI to an operating system operating on the intermediate server, receive the requested content from the operating system, and perform a processing function on the requested content to produce processed content for delivery to the edge server. The intermediate server may additionally include a CDN content interface that provides virtualized access to content files accessible using URIs throughout the CDN. The CDN content interface may be configured to receive a first portion of content using the URI where the first portion of content may be stored in the first POP, receive a second portion of content using the URI where the second portion of content may be accessible from a second POP, and provide the requested content to the content processor. The requested content may include the first portion of content and the second portion of content.</p>
<p id="p-0006" num="0005">In some embodiments, the CDN content interface may include a virtual file server that operates in userspace without requiring modifications to a kernel of the operating system, a physical storage device, and a caching engine that communicates with the local storage device and other devices in the CDN. The caching engine may be configured to store the first portion of content and second portion of content in the physical storage device. The CDN content interface may be further configured to receive a third portion of the requested content using the URI, where the third portion of the requested content may be stored in the physical storage device, and the requested content may further include the third portion of the requested content. The physical storage device may have a storage capacity that is less than a storage capacity of edge server.</p>
<p id="p-0007" num="0006">In some embodiments, the processing function may include dividing the requested content in streaming data chunks. The content processor may include a File Transfer Protocol (FTP) server. The processing function may transcoding the requested content from a first file format to a second file format. The processing function may include encrypting or decrypting the requested content. The content processor may include a third-party module requiring a per-installation license. The second portion of content may be retrieved from an origin server that is accessible through the second POP. The intermediate server may be configured to determine that only a portion of the processed content should be delivered to the edge server, and the processed content may be based on only a portion of the requested content.</p>
<p id="p-0008" num="0007">In another embodiment, A method of handling content requests received from edge servers by an intermediate server in a CDN and accessing and processing content distributed throughout the CDN. The method may include receiving a content request through a port from an edge server. The content request may include a Uniform Resource Identifier (URI) associated with requested content, and the edge server and the intermediate server may be part of a first Point-of-Presence (POP) in the CDN. The method may also include passing the URI to an operating system operating on the intermediate server and passing the URI from the operating system to a CDN content interface that provides virtualized access to content files accessible using URIs throughout the CDN. The method may additionally include receiving, by the CDN content interface a first portion of content using the URI where the first portion of content may be stored in the first POP, and a second portion of content using the URI where the second portion of content may be accessible from a second POP. The method may further include passing the requested content to the content processor. The requested content may include the first portion of content and the second portion of content. The method may also include performing a processing function on the requested content by the content processor to produce processed content for delivery to the edge server.</p>
<p id="p-0009" num="0008">According to yet another embodiment, another intermediate server for handling content requests received from edge servers in a Content Delivery Network (CDN) and accessing and processing content distributed throughout the CDN may be discussed. The intermediate server may include a port that receives a content request from an edge server. The content request may include a Uniform Resource Identifier (URI) associated with requested content, and the edge server and the intermediate server may be part of a first Point-of-Presence (POP) in the CDN. The intermediate server may also include a content processor communicatively coupled to the port and configured to perform a processing function on the requested content to produce processed content for delivery to the edge server, where the processing function comprises dividing the requested content in streaming data chunks The intermediate server may additionally include a CDN content interface that provides virtualized access to content files accessible using URIs throughout the CDN. The CDN content interface may be configured to receive a first portion of content using the URI where the first portion of content may be accessible from a second POP, and provide the requested content to the content processor where the requested content may include the first portion of content.</p>
<p id="p-0010" num="0009">Further areas of applicability of the present disclosure will become apparent from the detailed description provided hereinafter. It should be understood that the detailed description and specific examples, while indicating various embodiments, are intended for purposes of illustration only and are not intended to necessarily limit the scope of the disclosure.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0011" num="0010">The present disclosure is described in conjunction with the appended figures:</p>
<p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. 1</figref> depicts a block diagram of an embodiment of a content distribution system.</p>
<p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. 2</figref> depicts a block diagram of an embodiment of a point of presence (POP) that is part of a content delivery network (CDN).</p>
<p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. 3</figref> depicts a block diagram of an Intermediate Content Processing Server (ICPS) that is part of a CDN.</p>
<p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. 4A</figref> depicts a block diagram of an ICPS, according to a first embodiment.</p>
<p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. 4B</figref> depicts a block diagram of an ICPS, according to a second embodiment.</p>
<p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. 4C</figref> depicts a block diagram of an ICPS, according to a third embodiment.</p>
<p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. 5</figref> depicts a flow chart of a method for processing intermediate content in a CDN, according to one embodiment.</p>
<p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. 6</figref> depicts a swim diagram of transactions within an ICPS, according to one embodiment.</p>
<p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. 7</figref> depicts a block diagram of an embodiment of a computer system.</p>
<p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. 8</figref> depicts a block diagram of an embodiment of a special-purpose computer system.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<p id="p-0022" num="0021">In the appended figures, similar components and/or features may have the same reference label. Further, various components of the same type may be distinguished by following the reference label by a dash and a second label that distinguishes among the similar components. If only the first reference label is used in the specification, the description is applicable to any one of the similar components having the same first reference label irrespective of the second reference label.</p>
<heading id="h-0004" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0023" num="0022">The ensuing description provides preferred exemplary embodiment(s) only, and is not intended to limit the scope, applicability or configuration of the disclosure. Rather, the ensuing description of the preferred exemplary embodiment(s) will provide those skilled in the art with an enabling description for implementing a preferred exemplary embodiment. It is understood that various changes may be made in the function and arrangement of elements without departing from the spirit and scope as set forth in the appended claims.</p>
<p id="p-0024" num="0023">Referring first to <figref idref="DRAWINGS">FIG. 1</figref>, a block diagram of an embodiment of a content distribution system <b>100</b> is shown. The content originator <b>106</b> offloads delivery of the content objects to a content delivery network (CDN) <b>110</b> in this embodiment. The content originator <b>106</b> produces and/or distributes content objects and includes a content provider <b>108</b>, a content site <b>116</b>, and an origin server <b>112</b>. The CDN <b>110</b> can both cache and/or host content in various embodiments for third parties to offload delivery and typically provide better quality of service (QoS) to a broad spectrum of end-user systems <b>102</b> distributed worldwide.</p>
<p id="p-0025" num="0024">In this embodiment, the content distribution system <b>100</b> locates the content objects (or portions thereof) and distributes the content objects to an end-user system <b>102</b>. The content objects can be dynamically cached and/or hosted within the CDN <b>110</b>. A content object may include any content file or content stream and could include, for example, video, pictures, data, audio, software, analytics, and/or text. The content object could be live, delayed, or stored. Throughout the specification, references may be made to a content object, content, content stream and/or content file, but it is to be understood that those terms could be used interchangeably wherever they may appear.</p>
<p id="p-0026" num="0025">Many content providers <b>108</b> may use a CDN <b>110</b> or even multiple CDNs <b>110</b> to deliver the content objects over the Internet <b>104</b> to end users <b>128</b>. The CDN <b>110</b> may include a number of points of presence (POPs) <b>120</b>, which are geographically distributed through the content distribution system <b>100</b> to deliver content. Various embodiments may have any number of POPs <b>120</b> within the CDN <b>110</b> that are generally distributed in various locations around the Internet <b>104</b> so as to be proximate to end-user systems <b>102</b> in a network sense. Routing requests between the multiple POPs can be done during the DNS resolution and refined by assignment of the edge server after request for the content in this embodiment. Other embodiments use routing, redirection, Anycast, DNS assignment and/or other techniques to locate the particular edge server that will provide content to an end user <b>128</b>. In addition to the Internet <b>104</b>, a wide area network (WAN) and/or local area network (LAN) <b>114</b> or other backbone may couple the POPs <b>120</b> with each other and also couple the POPs <b>120</b> with other parts of the CDN <b>110</b>.</p>
<p id="p-0027" num="0026">When an end user <b>128</b> requests a web page through its respective end-user system <b>102</b> while browsing, the request for the web page is passed either directly or indirectly via the Internet <b>104</b> to the content originator <b>106</b>. The content originator <b>106</b> is the source or re-distributor of content objects. The content site <b>116</b> may include an Internet web site accessible by the end-user system <b>102</b>. In one embodiment, the content site <b>116</b> could be a web site where the content is viewable using a web browser. In other embodiments, the content site <b>116</b> could be accessible with application software or customized hardware other than a web browser, for example, a set top box, a content player, video streaming appliance, a podcast player, etc. The content provider <b>108</b> directs content requests to a CDN <b>110</b> after they are made or formulates the delivery path by embedding the delivery path into the universal resource indicators (URIs) for a web page. In either case, the request for content can be handed over to the CDN <b>110</b> in this embodiment by having the end-user system <b>102</b> perform a DNS look-up to choose where to request content from two or more POPs <b>120</b>.</p>
<p id="p-0028" num="0027">A particular edge server may retrieve the portion of the content object from the content provider <b>108</b>. Alternatively, the content provider <b>108</b> may directly provide the content object to the CDN <b>110</b> and its associated POPs <b>120</b> through prepopulation, i.e., in advance of the first request. The CDN servers include edge servers in each POP <b>120</b> that actually serve end user requests. The origin server <b>112</b> holds a copy of each content object for the content originator <b>106</b>. Periodically, the content of the origin server <b>112</b> may be reconciled with the CDN <b>110</b> through a cache, hosting and/or pre-population algorithm. Some content providers could use an origin server within the CDN <b>110</b> to host the content and avoid the need to maintain a copy.</p>
<p id="p-0029" num="0028">Once the content object is retrieved from the origin server <b>112</b>, the content object is stored within the particular POP <b>120</b> and is served from that POP <b>120</b> to the end-user system <b>102</b>. The end-user system <b>102</b> receives the content object and processes it for use by the end user <b>128</b>. The end-user system <b>102</b> could be a personal computer, media player, tablet computer, handheld computer, Internet appliance, phone, IPTV set top, video stream player, streaming radio or any other device that receives and plays content objects. In some embodiments, a number of the end-user systems <b>102</b> could be networked together. Although this embodiment only shows a single content originator <b>106</b> and a single CDN <b>110</b>, it is to be understood that there could be many of each in various embodiments. Additionally, some embodiments could have multiple CDNs <b>110</b>, where a content originator <b>106</b> could have a captive CDN <b>110</b> optionally used for its content or not when a third-party CDN is used to shed requests.</p>
<p id="p-0030" num="0029">With reference to <figref idref="DRAWINGS">FIG. 2</figref>, a block diagram of an embodiment of a POP <b>120</b> is shown that is part of a CDN <b>110</b>. Although only one POP <b>120</b> is depicted, there are a number of POPs <b>120</b> similarly configured and geographically distributed throughout the CDN <b>110</b>. The POPs <b>120</b> communicate through a WAN router <b>210</b> and/or an Internet router <b>220</b> when locating content objects. An interface to the Internet <b>104</b> from the POP <b>120</b> accepts requests for content objects from end-user systems <b>102</b>. The request comes from an Internet protocol (IP) address in the form of a URI.</p>
<p id="p-0031" num="0030">Edge servers <b>230</b> are made with general purpose computers loaded with software to perform various functions for the CDN <b>110</b>. The edge servers <b>230</b> could be rack mounted or arranged in clusters. Multiple hardware processors and storage media could be used to implement each edge server <b>230</b>. Each edge server <b>230</b> can load multiple instances of the same software and/or a variety of software to implement various functionality. For example, software may be used on edge servers to implement switching fabric, routing, cacheing, hosting, DNS lookup, analytics, business rules, delivery assignment, etc. The software instances can scale with loading of the POP <b>120</b>. Different edge servers <b>230</b> may have a different set of functionality as defined by the software instances that are programmed to run on each edge server <b>230</b>.</p>
<p id="p-0032" num="0031">Switch fabric <b>240</b> assigns the request to one of the edge servers <b>230</b> according to a routing scheme such as round robin, load balancing, CARP, random, etc. In this embodiment, the switch fabric is aware of which edge servers <b>230</b> have what capabilities and assigns within the group having the capability to store and serve the particular content object referenced in the URI. A protocol such as CARP is used in this embodiment to disperse the URIs between the group of edge servers <b>230</b>. Every time that a particular URI is requested from the group, it is assigned to the same edge server <b>230</b> using CARP. The caches gathered in a particular group as neighbors can be the other servers in the current POP, less loaded servers in the current POP, servers having the capability to process the content object, a subset of servers assigned to a customer using the CDN to serve the content object, or some other grouping of servers in the POP <b>120</b>.</p>
<p id="p-0033" num="0032">In another embodiment, the switch fabric <b>240</b> assigns the request to one of the edge servers <b>230</b>, which performs CARP to either service the request or reassign it to a neighboring edge server <b>230</b> with software to perform an assignment master function. The switch fabric <b>240</b> sends each packet flow or request to an edge server <b>230</b> listed in the configuration of the switch fabric <b>240</b>. The assignment can be performed by choosing the edge server <b>230</b> with the least amount of connections or the fastest response time, but the switch fabric <b>240</b> in this embodiment assigns the packet flow somewhat arbitrarily using round robin or random methodologies. When the chosen edge server <b>230</b> receives the packet flow, an algorithm like CARP is used by the chosen edge server <b>230</b> to potentially reassign the packet flow between a group of edge servers to the one dictated by the algorithm. For example, the switch fabric <b>240</b> could choose a second edge server <b>230</b>-<b>2</b> being the next in the round robin rotation. The second edge server <b>230</b>-<b>2</b> would perform CARP on the request and find that the first edge server <b>230</b>-<b>1</b> is being assigned this type of request. The request would be reassigned to the first edge server <b>230</b>-<b>1</b> to fulfill.</p>
<p id="p-0034" num="0033">In some cases, the CDN <b>110</b> is used to host content for others. Content providers <b>108</b> upload content to an edge server <b>230</b> who hosts the content to function as an origin server. After the content provider <b>108</b> places a content object in the CDN <b>110</b> it need not be hosted on the origin server <b>112</b> redundantly. Edge servers <b>230</b> can perform the hosting function within the CDN <b>110</b> with other edge servers <b>230</b> perhaps caching the same content that is hosted by another edge server <b>230</b>.</p>
<p id="p-0035" num="0034">Requests from end-user systems <b>102</b> are assigned to an edge server <b>230</b> that may cache the requested content object. On occasion, the edge server <b>230</b> receiving a request does not have the content object stored and available for immediate serving. This so-called &#x201c;cache miss&#x201d; triggers a process within the CDN <b>110</b> to effectively find the content object (or portion thereof) while providing adequate QoS. The content may be found in neighboring edge servers <b>230</b> in the same POP <b>120</b>, in another POP <b>120</b> or even an external origin server <b>112</b>. The various edge servers <b>230</b> are grouped for various URIs uniquely. In other words, one URI may look to one group of edge servers <b>230</b> on a cache miss while another URI will look to a different group of edge servers <b>230</b>. In various embodiments, a particular URI could be assigned to one or more edge servers <b>230</b> in a single POP <b>120</b>, multiple POPs <b>120</b> or even in every POP <b>120</b>. Generally, more popular content is stored on more edge servers <b>230</b> and more POPs <b>120</b>.</p>
<p id="p-0036" num="0035">When servicing requests from end-user systems <b>102</b>, some form of content processing may be performed on the requested content before it is delivered from an edge server <b>230</b>. In some cases, content processing may be performed by special software/hardware modules that are integrated with existing devices within the POP <b>120</b> or on the origin server itself <b>112</b>. If the content processing is performed on an edge server <b>230</b> or on an origin server <b>112</b>, the software/hardware performing the content processing may need to be distributed to each edge server <b>230</b> and/or each origin server <b>112</b>.</p>
<p id="p-0037" num="0036">As modern CDNs proliferate and become more complex, content processing may become more specialized and programming intensive. In some embodiments, content processing may be performed by a module supplied by a third-party. Third-party modules are often subject to licensing agreements and per-installation fees. In this situation, it may be impractical to install content processors on each edge server <b>230</b>. It may be even more impractical to expect content providers <b>108</b> to accept licensing agreements and pay the associated fees in order to install content processors on each origin server <b>112</b>. Furthermore, content processors may evolve on a constant basis as new streaming, encryption, and transmission technologies are explored. This can result in frequent upgrades, patches, and reinstallations for content processors. A CDN may include thousands of edge servers <b>230</b> and hundreds of POPs <b>120</b>. Keeping each of the edge servers <b>230</b> up to date with current versions of a third-party content processor could increase the overhead costs to a CDN. The CDN would also have to enforce version control and security updates for third-party content processors installed on origin servers <b>112</b> that are serviced by the CDN.</p>
<p id="p-0038" num="0037">Embodiments described herein may disclose an intermediate content processing server (ICPS) that can be used to process and deliver content to edge servers <b>230</b>. <figref idref="DRAWINGS">FIG. 3</figref> depicts a block diagram <b>300</b> of an ICPS that is part of a CDN. Edge servers <b>230</b> may receive requests from end-user systems <b>102</b> for content provided by an origin server <b>112</b>. As described above, the origin server <b>112</b> can provide cached versions of content, or portions of content, to a CDN cache hierarchy <b>302</b>. The CDN cache hierarchy can store local copies of content in POPs throughout the CDN such that a local copy of the content is available when a nearby edge server <b>230</b> receives a request from an end-user system <b>102</b>. If the CDN cache hierarchy <b>302</b> does not have a cached copy of the content, then the content may be retrieved from the origin server <b>112</b>.</p>
<p id="p-0039" num="0038">If content processing is to be used for a content request, the CDN cache hierarchy <b>302</b> or the origin server <b>112</b> may first provide the content to an ICPS <b>304</b> within the CDN. The ICPS <b>304</b> can retrieve the content, or a portion of the content, and use a local content processor to process the content, or a portion of the content retrieved. The processed content can then be sent to an edge server <b>230</b> for delivery to an end-user system <b>102</b>. The CDN cache hierarchy <b>302</b> may include edge servers and ICPSs from a plurality of different POPs. Therefore, within the ICPS <b>304</b>, a specialized CDN content interface may be configured to provide virtualized access to both local and remote content accessible by the various POPs of the CDN. The CDN content interface will be described in greater detail later in this disclosure.</p>
<p id="p-0040" num="0039">As used herein, the term &#x201c;content processing&#x201d; may be used to refer to any type of processing that changes the format, substance, and/or encoding of content. As illustrated in <figref idref="DRAWINGS">FIG. 3</figref>, different content processors may have different effects on a content stream. In one embodiment, the content processor may &#x201c;chunk&#x201d; a content file into pieces that can be streamed or broadcast to an end-user system <b>102</b>. For example, a content processor may divide a video file into chunks, where each chunk comprises a valid video file with a header, video track, and/or audio track. Each chunk can contain at least one keyframe such that individual chunks can be played back by themselves. Chunked content <b>306</b> may then be delivered, possibly piecewise, to one or more edge servers <b>230</b>. The edge servers can then provide the chunk streaming to individual end-user systems <b>102</b>.</p>
<p id="p-0041" num="0040">In another embodiment, the content processing may include encrypting a content file. Alternatively, the content processing may include decrypting a content file that was previously stored on an origin server <b>112</b> in an encrypted form. In another embodiment, content processing may include changing an encryption type of the content file to be compatible with a web browser or content playback application operating on an end-user system <b>102</b>. An encrypted/decrypted stream <b>308</b> may be delivered from the ICPS to one or more edge servers <b>230</b> for delivery to end-user systems <b>102</b>.</p>
<p id="p-0042" num="0041">In another embodiment, the content processing may include transcoding content formats. Generally, transcoding may include the direct digital-to-digital data conversion of one encoding to another encoding. This may be used in cases where an end-user system <b>102</b> does not support a particular content format, or were limited storage capacity mandates a reduced file size. Therefore, transcoding may also include data compression/decompression. Content processing that includes transcoding may include first decoding the content to an intermediate uncompressed format, and then transcoding the content into a target format. In one embodiment, transcoding-type data processing can be used to compress and/or change the format of content files stored on an origin server <b>112</b> into a format that is compatible with the edge servers <b>230</b> in the CDN. In another embodiment, transcoding-type data processing can be used to provide content to end-user systems <b>102</b> that use a variety of different operating systems, playback modules, and/or content applications. In these cases, transcoded content <b>310</b> may be provided to the edge servers <b>230</b> for storage/delivery.</p>
<p id="p-0043" num="0042">In yet another embodiment, the content processing may include operations typical of a File Transfer Protocol (FTP) server. FTP servers may include control and data connections between the end-user system <b>102</b> and/or the ICPS <b>304</b>. FTP transactions may also include authentication, including a username and password to authorize access to content, or alternatively may allow for anonymous connections. In this case, an FTP communication channel <b>312</b> may be opened between an end-user system <b>102</b> and the ICPS <b>304</b> that may or may not involve one or more edge servers <b>230</b>. The end-user system <b>102</b> may interact with the ICPS <b>304</b> as an FTP server, while the ICPS <b>304</b> retrieves files from a local cache, from the CDN cache hierarchy <b>302</b>, or from an origin server <b>112</b>. The FTP communication channel <b>312</b> may appear as though all of the content requested and transmitted is locally sourced by the ICPS <b>304</b>. Therefore, the fact that the ICPS <b>304</b> may retrieve requested content from remote devices and/or locations may be transparent to the end-user system <b>102</b>.</p>
<p id="p-0044" num="0043">It will be understood that these four types of content processing described above are merely exemplary, and not meant to be limiting. Other types of content processing may also be provided by an ICPS <b>304</b> that are not listed here explicitly, such as natural language processing, demand processing, bit rate processing, data mining, adaptive searches on content, social media functions, interactions with other APIs, human language translation, content blocking, parental controls, content censoring, content rating, security controls, and/or the like.</p>
<p id="p-0045" num="0044">In some embodiments, the ICPS <b>304</b> may contain a single content processor and may provide a single type of content processing, such as chunk streaming. In other embodiments, the ICPS <b>304</b> may include multiple content processors, where each content processor may provide one or more content processing functions. In another embodiment, the ICPS <b>304</b> may combine multiple content processing functions into a single content processor, which may then perform multiple content processing functions on requested content. For example, one or more content processors in a single ICPS <b>304</b> may decompress content from an origin server <b>112</b>, decrypt the content, transcode the content into a different format, recompress the content, and provide the content through an FTP request to an end-user system <b>102</b> via an edge server <b>230</b>. Other combinations and permutations of content processing functions may also be provided by different embodiments as would be understood in light of this disclosure.</p>
<p id="p-0046" num="0045">In some embodiments, the ICPS <b>304</b> may be a lean, light-weight server in comparison to the edge servers <b>230</b>. For example, an ICPS <b>304</b> may include a local storage medium that is small in comparison to a storage medium associated with an edge server <b>230</b>. Thus, an ICPS <b>304</b> may provide access to a very large amount of memory storage without being required to manage the entirety of the memory storage locally, but can instead interact with other devices to expand the memory space accessible to the ICPS <b>304</b>.</p>
<p id="p-0047" num="0046">In one embodiment, the ICPS <b>304</b> may be organized in the same POP with multiple edge servers, such that a single ICPS <b>304</b> provides content processing for multiple edge servers <b>230</b>. A single POP may also include a plurality of ICPSs <b>304</b>. The ICPS <b>304</b> may be implemented using a server that is physically distinct from the edge servers <b>230</b>. In another embodiment, the ICPS <b>304</b> may be physically integrated with one of the edge servers <b>230</b>.</p>
<p id="p-0048" num="0047"><figref idref="DRAWINGS">FIG. 4A</figref> depicts a block diagram <b>400</b><i>a </i>of an ICPS <b>304</b>, according to a first embodiment. <figref idref="DRAWINGS">FIG. 4A</figref> may represent a physical server, or alternatively, it may represent a logical implementation of hardware and software on an existing edge server. Assuming a physically distinct server, the ICPS <b>304</b> may include a port <b>450</b> configured to receive content requests from one or more edge servers <b>230</b>.</p>
<p id="p-0049" num="0048">The port <b>450</b> may provide the request to a content processor <b>402</b>. The request may be provided directly to the content processor <b>402</b>, or may pass through additional software modules, such as a request handling module. In one embodiment, the content processor <b>402</b> may represent a third-party software module installed and operating on a processor on the ICPS <b>304</b>. For example, the content processor <b>402</b> may include an Apache&#xae; HTTP server and/or an Adobe&#xae; proprietary streaming module or another type of streaming module configured to stream content in an HTTP Live Streaming (HLS) format, Microsoft&#xae; Smooth Streaming format, HTTP Dynamic Streaming (HDS) format, and/or the like. The content processor <b>402</b> may be configured to operate in a Just-in-Time (JIT) fashion. The content processor <b>402</b> may also comprise a plug-in configured to interact with other software modules operating on the ICPS <b>304</b>.</p>
<p id="p-0050" num="0049">In some embodiments, the content processor <b>402</b> may be thought of as a &#x201c;black box&#x201d; with a known interface. For example, a proprietary third-party software module may provide an API to interact with a local file system and/or port <b>450</b>. This may allow different software modules to be swapped in and out or to be used interchangeably with common ICPS hardware and software. For example, a single ICPS hardware and software configuration may be designed to work with a number of different content processors <b>402</b>. A single POP may include several identical or nearly identical ICPSs <b>304</b>, each including a different type of content processor <b>402</b>, and each providing a different type of content processing.</p>
<p id="p-0051" num="0050">In some embodiments, and with some types of third-party software modules, the content processor <b>402</b> may be configured to interact with a local file system. Under normal operating circumstances outside of the ICPS <b>304</b>, these third-party software modules may be expected to interact with a local disk storage. For example, many third-party software modules may be specifically designed to operate on an origin server <b>112</b>, or alternatively on an edge server <b>230</b>. Both of these devices may be assumed to have local file systems with a single logical address space.</p>
<p id="p-0052" num="0051">In contrast, the ICPS <b>304</b> may include a local file system that is augmented with a virtual file system to expand the accessible content beyond any local storage available on the ICPS <b>304</b>. In this particular embodiment, a local kernel <b>404</b> may operate as part of a local operating system that receives a request for a URI from the content processor <b>402</b>. The local file system can determine that a file associated with the requested URI is available in the local file system, and then retrieve the requested content from the local file system. For example, the local operating system may interact with a system library, such as the GNU C Library (GLIBC) that provides system calls and other basic functions for interacting with a file system. Note that in some embodiments, the kernel <b>404</b> may simply pass the content request through to another module without checking any local kernel storage for the requested content.</p>
<p id="p-0053" num="0052">If the operating system determines that the requested file is not located in its file system, or if the local kernel <b>404</b> is simply passing requests through, the local operating system can pass the content request to a CDN content interface <b>460</b>. The CDN content interface <b>460</b> may be configured to provide virtualized access to content objects that are accessible via the CDN. These objects may be stored both locally and remotely, within the same POP or within different POPs, on edge servers and on origin servers. The CDN content interface <b>460</b> may also be configured to interface with portions of requested content, such that a requested content object may be broken up into smaller pieces and requested from separate locations. In some cases, the separate locations may be located in different POPs. Additionally, the CDN content interface <b>460</b> may be specifically designed to handle URIs that can include a filename and a resource path.</p>
<p id="p-0054" num="0053">In one embodiment, the CDN content interface <b>460</b> may be comprised of a number of sub-modules and hardware devices. In the example of <figref idref="DRAWINGS">FIG. 4A</figref>, the CDN content interface <b>460</b> is comprised of a virtual file server <b>410</b>, a caching engine <b>412</b>, and a local storage device <b>408</b>. It will be understood that these sub-modules and hardware devices are merely exemplary, and other embodiments may use different configurations to achieve virtualized access to the CDN from the ICPS <b>304</b>.</p>
<p id="p-0055" num="0054">In this embodiment, the virtual file server <b>410</b> may be implemented in part using a File System in User Space (FUSE). The FUSE may comprise a loadable kernel module that allows the ICPS <b>304</b> designer to create a virtual file server <b>410</b> without editing the local kernel <b>404</b>. Generally, the virtual file server <b>410</b> need not actually store content itself. Instead, it can act as a view or translation of existing file systems or storage devices throughout the CDN. In the case of the particular ICPS <b>304</b>, the virtual file server <b>410</b> may act as a view or translation of file systems or storage devices that are geographically or logically remote from the ICPS <b>304</b>.</p>
<p id="p-0056" num="0055">One effect of using a specialized virtual file server <b>410</b> that is configured to interface internally with a CDN is that it can make remote files appear local to the content processor <b>402</b>. Therefore, instead of needing to install a content processor <b>402</b> on each server location where content is stored, fewer locations (ICPSs) can be used to process content from disparate sources, and transmit the processed content to edge servers.</p>
<p id="p-0057" num="0056">The particular embodiment of <figref idref="DRAWINGS">FIG. 4A</figref>, the virtual file server <b>410</b> may interact with a caching engine <b>412</b>. The caching engine <b>412</b> may be configured to cache objects that have been recently requested from other storage locations. The caching engine <b>412</b> may store a local cached copy of objects in a local storage device <b>408</b>. The local storage device <b>408</b> may be implemented using disk arrays, hard disks, flash memory, and/or the like. The caching engine <b>412</b> may be configured to determine when each stored object was last used, how often objects are used, how likely objects are to be used in the future, an estimated time when an object will be next used, and/or the like. Generally, the caching engine <b>412</b> may be used to optimize the contents of the local storage device <b>408</b> such that any requested content can be efficiently delivered from the ICPS <b>304</b> instead of requiring content to be retrieved from a remote location. In one embodiment, the Edge Prism Caching Engine designed by Limelight Networks&#xae; may be used to implement the caching engine <b>412</b>.</p>
<p id="p-0058" num="0057">When the caching engine <b>412</b> determines that a local cached copy of the requested content is not available, the caching engine may request the content from a remote location through port <b>452</b>. For example, the caching engine <b>412</b> may request a copy of the content from an origin server <b>112</b> from a content provider. In some embodiments, the caching engine <b>412</b> may simply submit a request for content to the CDN cache hierarchy such that additional edge servers in the CDN can respond if they store at least a portion of the requested content. The origin server <b>112</b> may respond by providing a copy of the content, or a portion of the content to the caching engine <b>412</b>. If the caching engine <b>412</b> determines that storing a local copy of the content comprises an efficient use of the local storage device <b>408</b> (e.g. the content will be requested again in the near future) then a local cached copy may be retained. Alternatively, the caching engine <b>412</b> may simply provide the requested copy to the virtual file server <b>410</b> for content processing.</p>
<p id="p-0059" num="0058">In either case, the requested content may be provided through the CDN content interface <b>460</b> to the local kernel <b>404</b>, and then to the content processor <b>402</b>. Again, in some embodiments, the content processor <b>402</b> may interact with the received content as though it were retrieved from a local file system. In other words, the operation of the CDN content interface <b>460</b> and/or the caching engine <b>412</b> may be transparent to the content processor <b>402</b>. Finally, the content processor <b>402</b> may process the requested content and deliver it to the edge server <b>230</b> through port <b>450</b>.</p>
<p id="p-0060" num="0059"><figref idref="DRAWINGS">FIG. 4B</figref> depicts a block diagram <b>400</b><i>b </i>of an ICPS <b>304</b>, according to a second embodiment. This embodiment is similar to the embodiment depicted by <figref idref="DRAWINGS">FIG. 4A</figref>. However, instead of interacting with an origin server <b>112</b>, the caching engine <b>412</b> may interact through port <b>552</b> with another device in the CDN cache hierarchy <b>420</b>. The CDN cache hierarchy <b>420</b> may be made up of numerous other edge servers <b>230</b>, router devices, storage locations, and/or the like. The caching engine <b>412</b> may give priority to locations within the CDN cache hierarchy <b>420</b> that are closer physically, logically, or otherwise to the ICPS <b>304</b>. The caching engine <b>412</b> may also give priority to connections with the lowest latency or with the most available bandwidth.</p>
<p id="p-0061" num="0060">In one embodiment, the caching engine <b>412</b> may retrieve portions of the requested content from more than one location within the CDN cache hierarchy <b>420</b>. In some cases, the caching engine <b>412</b> may connect to multiple locations within the CDN cache hierarchy <b>412</b> in a peer-to-peer (P2P) fashion in order to retrieve portions of the requested content from multiple locations.</p>
<p id="p-0062" num="0061">In one embodiment, one location in the CDN cache hierarchy <b>420</b> may be quickly and readily accessible by the ICPS <b>304</b>. In this case, because of what may be a limited capacity of the local storage device <b>408</b>, the caching engine <b>412</b> may forgo caching a copy of the requested content in the local storage device <b>408</b>. Instead, because of the logical or geographic proximity of the content location within the CDN cache hierarchy <b>420</b>, the caching engine <b>412</b> may simply rely on the other external copy of the content. Additionally, the CDN cache hierarchy <b>420</b> may be comprised of multiple POPs that are geographically spread throughout a large area. Therefore, the CDN content interface <b>460</b> may retrieve content from multiple POPs. Each POP may also be in communication with multiple origin servers, such as origin server <b>112</b>, and thus content, or portions of content, may be retrieved from one or more remote origin servers that are associated with a POP that is different from the ICPS's POP.</p>
<p id="p-0063" num="0062"><figref idref="DRAWINGS">FIG. 4C</figref> depicts a block diagram <b>400</b><i>c </i>of an ICPS, according to a third embodiment. This embodiment is similar to the embodiments described in relation to <figref idref="DRAWINGS">FIG. 4A</figref> and <figref idref="DRAWINGS">FIG. 4B</figref>. However, in this case, the CDN content interface <b>460</b> may be designed without a local storage device <b>408</b> and/or without a caching engine <b>412</b>. Instead, the CDN content interface <b>460</b> may rely entirely on external storage sites to supply content to the content processor <b>402</b>. The virtual file server <b>410</b> may receive requests through the user space <b>406</b> associated with the local kernel <b>404</b>, and send the request to an external location at which the requested content is currently stored.</p>
<p id="p-0064" num="0063">The virtual file server <b>410</b> may retrieve the requested content from any storage device associated with the CDN. For example, the virtual file server <b>410</b> may retrieve the requested content from an origin server <b>112</b> associated with the content provider serviced by the CDN. The virtual file server <b>410</b> may also retrieve the requested content from a device associated with the CDN cache hierarchy <b>420</b>. Either case may involve multiple POPs.</p>
<p id="p-0065" num="0064">Designing the CDN content interface <b>460</b> without a local storage device <b>408</b> and/or without a caching engine <b>412</b> may result in a leaner, less expensive, less complicated server. To compensate for the lack of a local storage device <b>408</b>, the cost/space/complexity savings may allow a CDN operator to deploy multiple ICPSs <b>304</b> in each POP. Alternatively, the ports and communication systems of the ICPS <b>304</b> can be optimized to increase the throughput of content from other locations.</p>
<p id="p-0066" num="0065">In one embodiment, the various modules and systems in <figref idref="DRAWINGS">FIGS. 4A-4C</figref> may reside on separate computer systems. Alternatively, multiple modules may be combined on the same or similar computer systems. In addition, some modules may be combined together into a single module performing the functions of both individual modules. Similarly, a single module may be split into multiple modules. It will be understood in light of this disclosure that any arrangement of the modules, as well as any implementation in both software and hardware, may be used by various embodiments.</p>
<p id="p-0067" num="0066"><figref idref="DRAWINGS">FIG. 5</figref> depicts a flow chart <b>500</b> of a method of handling content requests received from edge servers by an intermediate server in a CDN and accessing and processing content distributed throughout the CDN, according to one embodiment. The method may include receiving content requests from a CDN edge network (<b>502</b>). The CDN edge network may be comprised of one or more edge servers, from which a request may be received. The request may include a Uniform Resource Identifier (URI) associated with requested content. The URI may include a file name and a resource path. In one arrangement, and edge server in the CDN edge network may send the content requests to an ICPS. The ICPS may receive the content through port that is configured to receive requests from an edge network. The content request may originate from an end-user system or from within the CDN itself.</p>
<p id="p-0068" num="0067">The method may also include passing the content request to a local kernel (<b>504</b>). In one embodiment, the kernel may operate as part of an operating system on the ICPS. The kernel may be configured to access physical resources on the ICPS. The method may additionally include passing the content request to the CDN content interface (<b>506</b>). The CDN content interface may provide virtualized access to content files that are accessible using URIs through the CDN. In one embodiment, the CDN content interface may comprise a virtual file server operating in user space that does not require modifications to the kernel. The CDN content interface may also comprise a caching engine configured to determine whether a local copy of requested content, or a portion of the requested content, is available. The CDN content interface may also comprise a physical storage device configured to store locally-cached copies of previously requested content objects. The physical storage device may be smaller, or have a smaller storage capacity, than a storage capacity typically associated with edge servers in the CDN or origin servers.</p>
<p id="p-0069" num="0068">In one embodiment, the content processor may be configured to interface with a local kernel rather than the CDN content interface. Therefore, in this embodiment, the content request may need to go through the kernel to access the CDN content interface.</p>
<p id="p-0070" num="0069">The method may further include determining whether each portion of the requested content is locally cached (<b>508</b>). This determining step may be optional in some embodiments. &#x201c;Locally cached&#x201d; may refer to cached copies of content portions that are available on a local storage device, on a storage device of an edge server within the same POP, or on a storage device of an origin server that is accessible through the POP, depending on the particular embodiment. Content that is not locally cached may be stored on an edge server within a different POP, or on an origin server that is accessible by an edge server within a different POP.</p>
<p id="p-0071" num="0070">The method may also include retrieving a remote copy (<b>510</b>), and/or retrieving a local copy (<b>512</b>). In one embodiment, the entire requested content may be retrieved as a local copy. In another embodiment, the entire requested content may be retrieved as a remote copy. In another embodiment, a first portion of the requested content may be locally available within the same POP as the ICPS. Similarly, a second portion of content may be remotely accessible through a second POP. In this case, both the first and second portions of the requested content can be retrieved from each respective source. In one embodiment, a third portion of the requested content may also be retrieved from a local storage device that is part of the ICPS. It will be understood that portions of the content may be provided from multiple locations accessible by the CDN, or alternatively, that the entire requested content may be provided from a single location accessible by the CDN.</p>
<p id="p-0072" num="0071">In some cases, the ICPS may determine that only a portion of the requested content needs to be processed. For example, a file type may be used to determine that only a first portion of the content will be viewed by an end-user system. Similarly, a content type may be used to determine that only a first portion of the content will typically be viewed by an end-user system. In these cases, only a portion of the requested content may need to be provided to the content processor. After receiving all of the portions of the requested content, the CDN content interface can pass the requested content, or a portion thereof, to the content processor through the kernel.</p>
<p id="p-0073" num="0072">The method may also include a performing a processing function on the requested content (<b>514</b>). In one embodiment, the processing function may comprise dividing the requested content into streaming data chunks. For example, the content processor may be a proprietary module used to provide a chunk streaming service. In another embodiment, the content processor may comprise an FTP server that may provide file upload and download to the CDN using this protocol. In another embodiment, the processing function may comprise encrypting or decrypting requested content. In another embodiment, the processing function may comprise transcoding, or changing a first format of the requested content into a second format. In another embodiment, the processing function may comprise compressing or decompressing the content. In another embodiment, the processing function may comprise packaging various content objects together.</p>
<p id="p-0074" num="0073">The content processor may comprise a third-party proprietary module. This module may require a license, which may be a per-installation license. In some embodiments, the content processor may be designed to interact with the kernel. The content processor may also be designed to interact with a local concrete file system. The content processor may receive the requested content or a portion of the requested content and generate processed content according to the processing function of the particular embodiment. Finally, the content processor may provide the processed content to be sent to the CDN edge network. The content may be provided to the particular edge server responsible for the original content request.</p>
<p id="p-0075" num="0074">It should be appreciated that the specific steps illustrated in <figref idref="DRAWINGS">FIG. 5</figref> provide particular methods of providing for processing and accessing content according to various embodiments of the present invention. Other sequences of steps may also be performed according to alternative embodiments. For example, alternative embodiments of the present invention may perform the steps outlined above in a different order. Moreover, the individual steps illustrated in <figref idref="DRAWINGS">FIG. 5</figref> may include multiple sub-steps that may be performed in various sequences as appropriate to the individual step. Furthermore, additional steps may be added or removed depending on the particular applications. One of ordinary skill in the art would recognize many variations, modifications, and alternatives.</p>
<p id="p-0076" num="0075"><figref idref="DRAWINGS">FIG. 6</figref> depicts a swim diagram of transactions within an ICPS, according to one embodiment. The swim diagram is merely exemplary, and is meant to illustrate how content and content requests can flow between the various components of a CDN and an ICPS. Initially, an edge server <b>230</b> from the edge network of a CDN may send a content request to an ICPS (<b>602</b>). The content request may be received specifically by a content processor <b>402</b> of the ICPS. In another embodiment, a request handling module of the ICPS may route the content to a particular content processor, depending on the type of content processing implicated by the request.</p>
<p id="p-0077" num="0076">The content processor <b>402</b> can send the content request to a local kernel <b>404</b> to retrieve what it may consider to be a local file (<b>604</b>). The local kernel <b>404</b> can send the content request to a virtual file server <b>410</b> (<b>606</b>). The virtual file server <b>410</b> may have access to a caching engine <b>412</b> that can be used to locate content associated with the content request (<b>608</b>). The caching engine <b>412</b> can determine whether any portion of the content is available on a local storage device. If at least a portion of the content is not located on a local storage device, the caching engine <b>412</b> may send the URI into the CDN hierarchy to retrieve a location of a content server <b>420</b> on which the content is stored. In one embodiment, the content server <b>420</b> may comprise the ICPS itself using a local storage device. In another embodiment, the content server <b>420</b> may comprise an origin server <b>112</b> operated by a content provider. In yet another embodiment, the content server <b>420</b> may comprise another edge server <b>230</b>. In yet another embodiment, the content server <b>420</b> may comprise another type of server that is part of a CDN cache hierarchy. The content server <b>420</b> may be part of the same POP as the ICPS, or may be part of a different POP.</p>
<p id="p-0078" num="0077">After the content is located, the content request may be forwarded to the identified content server <b>420</b> (<b>610</b>). In response, the content server <b>420</b> may send the content, or a portion of the content, to the caching engine <b>412</b> (<b>612</b>). The caching engine <b>412</b> may determine whether to store a local cached version of the content in a local storage device on the ICPS according to the factors described elsewhere in this disclosure. The caching engine <b>412</b> may then pass at least a portion of the content through the virtual file system <b>410</b> (<b>614</b>) and/or the local kernel <b>404</b> (<b>616</b>) to the content processor <b>402</b> (<b>618</b>). The content processor <b>402</b> may then process the content in a manner implicated by the content request or by setting specified by the ICPS, the CDN, the CDN cache hierarchy, or the content provider. Finally, at least a portion of the processed content may be delivered to the requesting edge server <b>23</b> for delivery to an end-user system (<b>620</b>).</p>
<p id="p-0079" num="0078">Referring next to <figref idref="DRAWINGS">FIG. 7</figref>, an exemplary environment with which embodiments may be implemented is shown with a computer system <b>700</b> that can be used by a user <b>704</b> to program, design or otherwise interact with the computer system <b>700</b>. The computer system <b>700</b> can include a computer <b>702</b>, keyboard <b>722</b>, a network router <b>712</b>, a printer <b>708</b>, and a monitor <b>706</b>. The monitor <b>706</b>, processor <b>702</b> and keyboard <b>722</b> are part of a computer system <b>726</b>, which can be a laptop computer, desktop computer, handheld computer, mainframe computer, etc. The monitor <b>706</b> can be a CRT, flat screen, etc.</p>
<p id="p-0080" num="0079">A user <b>704</b> can input commands into the computer <b>702</b> using various input devices, such as a mouse, keyboard <b>722</b>, track ball, touch screen, etc. If the computer system <b>700</b> comprises a mainframe, a user <b>704</b> can access the computer <b>702</b> using, for example, a terminal or terminal interface. Additionally, the computer system <b>726</b> may be connected to a printer <b>708</b> and a server <b>710</b> using a network router <b>712</b>, which may connect to the Internet <b>718</b> or a WAN.</p>
<p id="p-0081" num="0080">The server <b>710</b> may, for example, be used to store additional software programs and data. In one embodiment, software implementing the systems and methods described herein can be stored on a storage medium in the server <b>710</b>. Thus, the software can be run from the storage medium in the server <b>710</b>. In another embodiment, software implementing the systems and methods described herein can be stored on a storage medium in the computer <b>702</b>. Thus, the software can be run from the storage medium in the computer system <b>726</b>. Therefore, in this embodiment, the software can be used whether or not computer <b>702</b> is connected to network router <b>712</b>. Printer <b>708</b> may be connected directly to computer <b>702</b>, in which case, the computer system <b>726</b> can print whether or not it is connected to network router <b>712</b>.</p>
<p id="p-0082" num="0081">With reference to <figref idref="DRAWINGS">FIG. 8</figref>, an embodiment of a special-purpose computer system <b>800</b> is shown. The above methods may be implemented by computer-program products that direct a computer system to perform the actions of the above-described methods and components. Each such computer-program product may comprise sets of instructions (codes) embodied on a computer-readable medium that directs the processor of a computer system to perform corresponding actions. The instructions may be configured to run in sequential order, or in parallel (such as under different processing threads), or in a combination thereof. After loading the computer-program products on a general purpose computer system <b>826</b>, it is transformed into the special-purpose computer system <b>800</b>.</p>
<p id="p-0083" num="0082">Special-purpose computer system <b>800</b> comprises a computer <b>702</b>, a monitor <b>706</b> coupled to computer <b>702</b>, one or more additional user output devices <b>830</b> (optional) coupled to computer <b>702</b>, one or more user input devices <b>840</b> (e.g., keyboard, mouse, track ball, touch screen) coupled to computer <b>702</b>, an optional communications interface <b>850</b> coupled to computer <b>702</b>, a computer-program product <b>805</b> stored in a tangible computer-readable memory in computer <b>702</b>. Computer-program product <b>805</b> directs system <b>800</b> to perform the above-described methods. Computer <b>702</b> may include one or more processors <b>860</b> that communicate with a number of peripheral devices via a bus subsystem <b>890</b>. These peripheral devices may include user output device(s) <b>830</b>, user input device(s) <b>840</b>, communications interface <b>850</b>, and a storage subsystem, such as random access memory (RAM) <b>870</b> and non-volatile storage drive <b>880</b> (e.g., disk drive, optical drive, solid state drive), which are forms of tangible computer-readable memory.</p>
<p id="p-0084" num="0083">Computer-program product <b>805</b> may be stored in non-volatile storage drive <b>880</b> or another computer-readable medium accessible to computer <b>702</b> and loaded into memory <b>870</b>. Each processor <b>860</b> may comprise a microprocessor, such as a microprocessor from Intel&#xae; or Advanced Micro Devices, Inc.&#xae;, or the like. To support computer-program product <b>805</b>, the computer <b>702</b> runs an operating system that handles the communications of product <b>805</b> with the above-noted components, as well as the communications between the above-noted components in support of the computer-program product <b>805</b>. Exemplary operating systems include Windows&#xae; or the like from Microsoft&#xae; Corporation, Solaris&#xae; from Oracle&#xae;, LINUX, UNIX, and the like.</p>
<p id="p-0085" num="0084">User input devices <b>840</b> include all possible types of devices and mechanisms to input information to computer system <b>702</b>. These may include a keyboard, a keypad, a mouse, a scanner, a digital drawing pad, a touch screen incorporated into the display, audio input devices such as voice recognition systems, microphones, and other types of input devices. In various embodiments, user input devices <b>840</b> are typically embodied as a computer mouse, a trackball, a track pad, a joystick, wireless remote, a drawing tablet, a voice command system. User input devices <b>840</b> typically allow a user to select objects, icons, text and the like that appear on the monitor <b>806</b> via a command such as a click of a button or the like. User output devices <b>830</b> include all possible types of devices and mechanisms to output information from computer <b>702</b>. These may include a display (e.g., monitor <b>806</b>), printers, non-visual displays such as audio output devices, etc.</p>
<p id="p-0086" num="0085">Communications interface <b>850</b> provides an interface to other communication networks and devices and may serve as an interface to receive data from and transmit data to other systems, WANs and/or the Internet <b>818</b>. Embodiments of communications interface <b>850</b> typically include an Ethernet card, a modem (telephone, satellite, cable, ISDN), a (asynchronous) digital subscriber line (DSL) unit, a FireWire&#xae; interface, a USB&#xae; interface, a wireless network adapter, and the like. For example, communications interface <b>850</b> may be coupled to a computer network, to a FireWire&#xae; bus, or the like. In other embodiments, communications interface <b>850</b> may be physically integrated on the motherboard of computer <b>702</b>, and/or may be a software program, or the like.</p>
<p id="p-0087" num="0086">RAM <b>870</b> and non-volatile storage drive <b>880</b> are examples of tangible computer-readable media configured to store data such as computer-program product embodiments of the present invention, including executable computer code, human-readable code, or the like. Other types of tangible computer-readable media include floppy disks, removable hard disks, optical storage media such as CD-ROMs, DVDs, bar codes, semiconductor memories such as flash memories, read-only-memories (ROMs), battery-backed volatile memories, networked storage devices, and the like. RAM <b>870</b> and non-volatile storage drive <b>880</b> may be configured to store the basic programming and data constructs that provide the functionality of various embodiments of the present invention, as described above.</p>
<p id="p-0088" num="0087">Software instruction sets that provide the functionality of the present invention may be stored in RAM <b>870</b> and non-volatile storage drive <b>880</b>. These instruction sets or code may be executed by the processor(s) <b>860</b>. RAM <b>870</b> and non-volatile storage drive <b>880</b> may also provide a repository to store data and data structures used in accordance with the present invention. RAM <b>870</b> and non-volatile storage drive <b>880</b> may include a number of memories including a main random access memory (RAM) to store of instructions and data during program execution and a read-only memory (ROM) in which fixed instructions are stored. RAM <b>870</b> and non-volatile storage drive <b>880</b> may include a file storage subsystem providing persistent (non-volatile) storage of program and/or data files. RAM <b>870</b> and non-volatile storage drive <b>880</b> may also include removable storage systems, such as removable flash memory.</p>
<p id="p-0089" num="0088">Bus subsystem <b>890</b> provides a mechanism to allow the various components and subsystems of computer <b>702</b> communicate with each other as intended. Although bus subsystem <b>890</b> is shown schematically as a single bus, alternative embodiments of the bus subsystem may utilize multiple busses or communication paths within the computer <b>702</b>.</p>
<p id="p-0090" num="0089">A number of variations and modifications of the disclosed embodiments can also be used. For example, embodiments show the DNS function being resident within a POP with edge servers, but other embodiments could place the DNS function geographically separate from any content serving functions. Other embodiments could place multiple DNS functions in a POP to divide the work load for those DNS requests received by the POP.</p>
<p id="p-0091" num="0090">Specific details are given in the above description to provide a thorough understanding of the embodiments. However, it is understood that the embodiments may be practiced without these specific details. For example, circuits may be shown in block diagrams in order not to obscure the embodiments in unnecessary detail. In other instances, well-known circuits, processes, algorithms, structures, and techniques may be shown without unnecessary detail in order to avoid obscuring the embodiments.</p>
<p id="p-0092" num="0091">Implementation of the techniques, blocks, steps and means described above may be done in various ways. For example, these techniques, blocks, steps and means may be implemented in hardware, software, or a combination thereof. For a hardware implementation, the processing units may be implemented within one or more application specific integrated circuits (ASICs), digital signal processors (DSPs), digital signal processing devices (DSPDs), programmable logic devices (PLDs), field programmable gate arrays (FPGAs), processors, controllers, micro-controllers, microprocessors, other electronic units designed to perform the functions described above, and/or a combination thereof.</p>
<p id="p-0093" num="0092">Also, it is noted that the embodiments may be described as a process which is depicted as a flowchart, a flow diagram, a swim diagram, a data flow diagram, a structure diagram, or a block diagram. Although a depiction may describe the operations as a sequential process, many of the operations can be performed in parallel or concurrently. In addition, the order of the operations may be re-arranged. A process is terminated when its operations are completed, but could have additional steps not included in the figure. A process may correspond to a method, a function, a procedure, a subroutine, a subprogram, etc. When a process corresponds to a function, its termination corresponds to a return of the function to the calling function or the main function.</p>
<p id="p-0094" num="0093">Furthermore, embodiments may be implemented by hardware, software, scripting languages, firmware, middleware, microcode, hardware description languages, and/or any combination thereof. When implemented in software, firmware, middleware, scripting language, and/or microcode, the program code or code segments to perform the necessary tasks may be stored in a machine readable medium such as a storage medium. A code segment or machine-executable instruction may represent a procedure, a function, a subprogram, a program, a routine, a subroutine, a module, a software package, a script, a class, or any combination of instructions, data structures, and/or program statements. A code segment may be coupled to another code segment or a hardware circuit by passing and/or receiving information, data, arguments, parameters, and/or memory contents. Information, arguments, parameters, data, etc. may be passed, forwarded, or transmitted via any suitable means including memory sharing, message passing, token passing, network transmission, etc.</p>
<p id="p-0095" num="0094">For a firmware and/or software implementation, the methodologies may be implemented with modules (e.g., procedures, functions, and so on) that perform the functions described herein. Any machine-readable medium tangibly embodying instructions may be used in implementing the methodologies described herein. For example, software codes may be stored in a memory. Memory may be implemented within the processor or external to the processor. As used herein the term &#x201c;memory&#x201d; refers to any type of long term, short term, volatile, nonvolatile, or other storage medium and is not to be limited to any particular type of memory or number of memories, or type of media upon which memory is stored.</p>
<p id="p-0096" num="0095">Moreover, as disclosed herein, the term &#x201c;storage medium&#x201d; may represent one or more memories for storing data, including read only memory (ROM), random access memory (RAM), magnetic RAM, core memory, magnetic disk storage mediums, optical storage mediums, flash memory devices and/or other machine readable mediums for storing information. The term &#x201c;machine-readable medium&#x201d; includes, but is not limited to portable or fixed storage devices, optical storage devices, and/or various other storage mediums capable of storing that contain or carry instruction(s) and/or data.</p>
<p id="p-0097" num="0096">While the principles of the disclosure have been described above in connection with specific apparatuses and methods, it is to be clearly understood that this description is made only by way of example and not as limitation on the scope of the disclosure.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. An intermediate server for handling content requests received from edge servers in a Content Delivery Network (CDN) and accessing and processing content distributed throughout the CDN, the intermediate server comprising:
<claim-text>a port that receives a content request from an edge server, wherein:
<claim-text>the content request includes a Uniform Resource Identifier (URI) associated with requested content; and</claim-text>
<claim-text>the edge server and the intermediate server are part of a first Point-of-Presence (POP) in the CDN;</claim-text>
</claim-text>
<claim-text>a content processor communicatively coupled to the port and configured to:
<claim-text>pass the URI to an operating system operating on the intermediate server, wherein the operating system passes the URI to a specialized virtual file server;</claim-text>
<claim-text>receive the requested content from the specialized virtual file server through the operating system; and</claim-text>
<claim-text>perform a processing function on the requested content to produce processed content for delivery to the edge server;</claim-text>
</claim-text>
<claim-text>a CDN content interface comprising the specialized virtual file server that provides virtualized access to content files in multiple POPs that are accessible throughout the CDN using URIs, wherein the CDN content interface is configured to:
<claim-text>receive a first portion of content using the URI; wherein the first portion of content is stored in the first POP;</claim-text>
<claim-text>receive a second portion of content using the URI; wherein the second portion of content is accessible from a second POP;</claim-text>
<claim-text>generate the requested content by combining at least the first portion of content and the second portion of content;</claim-text>
<claim-text>provide the requested content to the operating system through the specialized virtual file server, wherein the specialized virtual file server makes the requested content comprising the first portion of content and the second portion of content appear to be a single locally-stored file to the content processor; and</claim-text>
<claim-text>provide the requested content to the content processor.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The intermediate server for handling content requests received from edge servers in a CDN and accessing and processing content distributed throughout the CDN of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the CDN content interface comprises:
<claim-text>a physical storage device; and</claim-text>
<claim-text>a caching engine that communicates with the local storage device and other devices in the CDN, wherein the specialized virtual file server operates in userspace without requiring modifications to a kernel of the operating system.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The intermediate server for handling content requests received from edge servers in a CDN and accessing and processing content distributed throughout the CDN of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the caching engine is configured to store the first portion of content and second portion of content in the physical storage device.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The intermediate server for handling content requests received from edge servers in a CDN and accessing and processing content distributed throughout the CDN of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the CDN content interface is further configured to receive a third portion of the requested content using the URI, wherein:
<claim-text>the third portion of the requested content is stored in the physical storage device; and</claim-text>
<claim-text>the requested content further comprises the third portion of the requested content.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The intermediate server for handling content requests received from edge servers in a CDN and accessing and processing content distributed throughout the CDN of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the physical storage device has a storage capacity that is less than a storage capacity of edge server.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The intermediate server for handling content requests received from edge servers in a CDN and accessing and processing content distributed throughout the CDN of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the processing function comprises dividing the requested content into streaming data chunks.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The intermediate server for handling content requests received from edge servers in a CDN and accessing and processing content distributed throughout the CDN of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the content processor comprises a File Transfer Protocol (FTP) server.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The intermediate server for handling content requests received from edge servers in a CDN and accessing and processing content distributed throughout the CDN of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the processing function comprises transcoding the requested content from a first file format to a second file format.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The intermediate server for handling content requests received from edge servers in a CDN and accessing and processing content distributed throughout the CDN of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the processing function comprises encrypting or decrypting the requested content.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The intermediate server for handling content requests received from edge servers in a CDN and accessing and processing content distributed throughout the CDN of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the content processor comprises a third-party module requiring a per-installation license.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The intermediate server for handling content requests received from edge servers in a CDN and accessing and processing content distributed throughout the CDN of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the second portion of content is retrieved from an origin server that is accessible through the second POP.</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The intermediate server for handling content requests received from edge servers in a CDN and accessing and processing content distributed throughout the CDN of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein:
<claim-text>the intermediate server is configured to determine that only a portion of the processed content should be delivered to the edge server; and</claim-text>
<claim-text>the processed content is based on only a portion of the requested content.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. A method of handling content requests received from edge servers by an intermediate server in a CDN and accessing and processing content distributed throughout the CDN, the method comprising:
<claim-text>receiving a content request through a port from an edge server, wherein:
<claim-text>the content request includes a Uniform Resource Identifier (URI) associated with requested content; and</claim-text>
<claim-text>the edge server and the intermediate server are part of a first Point-of-Presence (POP) in the CDN;</claim-text>
</claim-text>
<claim-text>passing the URI to an operating system operating on the intermediate server;</claim-text>
<claim-text>passing the URI from the operating system to a CDN content interface comprising a specialized virtual file server that provides virtualized access to content files in multiple POPs that are accessible throughout the CDN using URIs;</claim-text>
<claim-text>receiving, by the CDN content interface:
<claim-text>a first portion of content using the URI; wherein the first portion of content is stored in the first POP; and</claim-text>
<claim-text>a second portion of content using the URI; wherein the second portion of content is accessible from a second POP;</claim-text>
</claim-text>
<claim-text>generating the requested content by combining at least the first portion of content and the second portion of content;</claim-text>
<claim-text>passing the requested content from the specialized virtual file server through the operating system to the content processor, wherein the specialized virtual file server makes the requested content comprising the first portion of content and the second portion of content appear to be a single locally-stored file to the content processor; and</claim-text>
<claim-text>performing a processing function on the requested content by the content processor to produce processed content for delivery to the edge server.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The method of handling content requests received from edge servers by an intermediate server in a CDN and accessing and processing content distributed throughout the CDN of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the CDN content interface comprises:
<claim-text>a physical storage device; and</claim-text>
<claim-text>a caching engine that communicates with the local storage device and other devices in the CDN, wherein the specialized virtual file server operates in userspace without requiring modifications to a kernel of the operating system.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The method of handling content requests received from edge servers by an intermediate server in a CDN and accessing and processing content distributed throughout the CDN of <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein the caching engine is configured to store the first portion of content and second portion of content in the physical storage device.</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The method of handling content requests received from edge servers by an intermediate server in a CDN and accessing and processing content distributed throughout the CDN of <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein the CDN content interface is further configured to receive a third portion of the requested content using the URI, wherein:
<claim-text>the third portion of the requested content is stored in the physical storage device; and</claim-text>
<claim-text>the requested content further comprises the third portion of the requested content.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The method of handling content requests received from edge servers by an intermediate server in a CDN and accessing and processing content distributed throughout the CDN of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the processing function comprises dividing the requested content into streaming data chunks.</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The method of handling content requests received from edge servers by an intermediate server in a CDN and accessing and processing content distributed throughout the CDN of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the content processor comprises an File Transfer Protocol (FTP) server.</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. The method of handling content requests received from edge servers by an intermediate server in a CDN and accessing and processing content distributed throughout the CDN of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the second portion of content is retrieved from an origin server that is accessible through the second POP.</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. An intermediate server for handling content requests received from edge servers in a Content Delivery Network (CDN) and accessing and processing content distributed throughout the CDN, the intermediate server comprising:
<claim-text>a port that receives a content request from an edge server, wherein:
<claim-text>the content request includes a Uniform Resource Identifier (URI) associated with requested content; and</claim-text>
<claim-text>the edge server and the intermediate server are part of a first Point-of-Presence (POP) in the CDN;</claim-text>
</claim-text>
<claim-text>a content processor communicatively coupled to the port and configured to perform a processing function on the requested content to produce processed content for delivery to the edge server, wherein the processing function comprises dividing the requested content into streaming data chunks; and</claim-text>
<claim-text>a CDN content interface comprising a specialized virtual file server that provides virtualized access to content files in multiple POPs that are accessible throughout the CDN using URIs, wherein the CDN content interface is configured to:
<claim-text>receive a first portion of content using the URI; wherein the first portion of content is accessible from a second POP; and</claim-text>
<claim-text>provide the requested content to the content processor, wherein:
<claim-text>the requested content comprises the first portion of the requested content; and</claim-text>
<claim-text>the specialized virtual file server makes the requested content comprising the first portion of content appear to be a single locally-stored file to the content processor. </claim-text>
</claim-text>
</claim-text>
</claim-text>
</claim>
</claims>
</us-patent-grant>

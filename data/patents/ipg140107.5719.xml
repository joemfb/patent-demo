<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08626822-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08626822</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>12199929</doc-number>
<date>20080828</date>
</document-id>
</application-reference>
<us-application-series-code>12</us-application-series-code>
<us-term-of-grant>
<us-term-extension>581</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>15</main-group>
<subgroup>16</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>709203</main-classification>
<further-classification>709217</further-classification>
<further-classification>709226</further-classification>
<further-classification>709229</further-classification>
</classification-national>
<invention-title id="d2e53">Method for implementing network resource access functions into software applications</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>6816904</doc-number>
<kind>B1</kind>
<name>Ludwig et al.</name>
<date>20041100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709226</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>2007/0073805</doc-number>
<kind>A1</kind>
<name>Jorgensen</name>
<date>20070300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709203</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>CN</country>
<doc-number>101123528</doc-number>
<kind>A</kind>
<date>20080200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00004">
<othercit>&#x2018;Internet Access to a Home Area Network&#x2019;, Salf et al., Universtiy of Cambridge, Computer Laboratory, Feb. 2001.</othercit>
</nplcit>
<category>cited by examiner</category>
</us-citation>
<us-citation>
<nplcit num="00005">
<othercit>U.S. Appl. No. 12/120,377, James S. Hiscock.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00006">
<othercit>English translation of Abstract from Chinese Patent Publication No. CN101123528A.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>20</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>709203</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709220</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709221</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709222</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709223</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709224</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709225</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709226</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709217</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709229</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>8</number-of-drawing-sheets>
<number-of-figures>8</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20100057912</doc-number>
<kind>A1</kind>
<date>20100304</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Hiscock</last-name>
<first-name>James S.</first-name>
<address>
<city>Rockport</city>
<state>MA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Hiscock</last-name>
<first-name>James S.</first-name>
<address>
<city>Rockport</city>
<state>MA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>Hewlett-Packard Development Company, L.P.</orgname>
<role>02</role>
<address>
<city>Houston</city>
<state>TX</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Wang</last-name>
<first-name>Liangche A</first-name>
<department>2447</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">An Open Network Adapter (ONA) provides an interface that provides network resource access functions to application writers and network users while hiding the implementation details from those writers and users. The ONA accepts high-level network resource access function requests and coordinates the lower-level actions necessary to accomplish the high-level requests. These network resource access requests may, for example, be provided via a user interface which may be implemented by a personal computer, telephone, or other device capable of providing a display and receiving user input.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="152.15mm" wi="217.76mm" file="US08626822-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="203.62mm" wi="169.76mm" orientation="landscape" file="US08626822-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="208.03mm" wi="136.57mm" orientation="landscape" file="US08626822-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="161.88mm" wi="141.39mm" orientation="landscape" file="US08626822-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="177.97mm" wi="153.75mm" orientation="landscape" file="US08626822-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="214.63mm" wi="151.64mm" orientation="landscape" file="US08626822-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="210.14mm" wi="167.13mm" orientation="landscape" file="US08626822-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="221.49mm" wi="156.97mm" orientation="landscape" file="US08626822-20140107-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00008" num="00008">
<img id="EMI-D00008" he="228.52mm" wi="159.26mm" orientation="landscape" file="US08626822-20140107-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">CROSS-REFERENCE TO RELATED APPLICATIONS</heading>
<p id="p-0002" num="0001">This application is related to and commonly-owned U.S. patent application Ser. No. 12/120,377, entitled &#x201c;Open Network Connections,&#x201d; filed on May 14, 2008, which is hereby incorporated by reference herein.</p>
<heading id="h-0002" level="1">FIELD</heading>
<p id="p-0003" num="0002">In general, embodiments of the present invention are directed to techniques for providing a set of network resource services that enable applications to be deployed in the network without the exposing the creator(s) of those applications to the implementation details of the underlying protocols (e.g., network, voice, video, storage), mechanisms, and devices. Moreover, new services may be provided using multiple underlying technologies.</p>
<heading id="h-0003" level="1">BACKGROUND</heading>
<p id="p-0004" num="0003">The use of network resource access functions embedded in software applications to provide access to network features such as network traffic, voice, video, or network attached storage is increasing. Applications that embed these network resource functions vary and can include for example; push to talk web page features for customer support; automated doctor appointment reminders which leverage VoIP network resources; network traffic monitoring applications which utilize Open Network Connections (as described in U.S. patent application Ser. No. 12/120,377, entitled &#x201c;Open Network Connections&#x201d;); video applications, such as video capture, video storage, and stored video search and replay; and storing, searching, and retrieving data from network attached storage devices. Programmers who write these software applications typically have skill in writing one type of software application, but not in writing multiple applications for use with multiple types of protocols (e.g., telephony, network, video, and network attached storage protocols). As a result, the programmer of ordinary skill who attempts to write a software application which utilizes multiple protocols will have great difficulty doing so and may find the task impossible.</p>
<p id="p-0005" num="0004">Therefore, there is a need to simplify the process of creating network applications which require the use of multiple network protocols and/or multiple types of network devices.</p>
<heading id="h-0004" level="1">SUMMARY</heading>
<p id="p-0006" num="0005">Embodiments of the present invention are directed to an Open Network Adapter (ONA) which provides an interface that provides network resource access functions to application writers and network users while hiding the implementation details from those writers and users. The ONA accepts high-level network resource access function requests and coordinates the lower-level actions necessary to accomplish the high-level requests. These network resource access requests may, for example, be provided via a user interface which may be implemented by a PC, telephone, or other device capable of providing a display and receiving user input.</p>
<p id="p-0007" num="0006">In common software application deployments, implementations utilize multiple sites that are located at different locations. These sites range in size from a small network where there are only a few employees and minimal network service device capabilities to a large corporate network, such as corporate headquarters with many employees and with very capable and possibly redundant sets of network resource devices. Embodiments of the present invention not only translate high-level network resource access function requests into lower level actions necessary to accomplish the high-level requests, but also hide details of the location(s) at which lower level-actions are executed. This simplifies the job of the software application programmer by relieving the programmer of the need to interact with low-level implementation details.</p>
<p id="p-0008" num="0007">The ONA may be layered, with the highest-level layer interfacing with software applications and/or network users. When the ONA receives a request, each layer of the ONA may break the receive request into one or more lower-level requests for a network resource, service action, or device action, and decide where to direct the lower-level requests or actions.</p>
<p id="p-0009" num="0008">Embodiments of the invention may provide network resource access to users and/or software using servers and devices that service network resource access requests using either a single technology or multiple technologies. The system provides a method for offering new services using a Miscellaneous Plug-ins Server to provide a linkage to other services (such as email and room reservation services) or to provide hosting for a new multi-technology service before providing that service with the Network Resource Services Server, when it becomes a mainstream service.</p>
<p id="p-0010" num="0009">For example, one embodiment of the present invention is directed to a computer-implemented system for providing network resource functions within a software application. The system includes network function translation software, which includes means for receiving a request to perform a network function; means for identifying a plurality of network services for performing the network function; and means for issuing a plurality of network service requests to at least one network service server to perform the plurality of network services. The system also includes the at least one network service server. The at least one network service server includes means for receiving the plurality of network service requests and, for each of the plurality of network service requests: means for identifying at least one device to satisfy the network service request; and means for requesting that the at least one device perform at least one action to satisfy the network service request.</p>
<p id="p-0011" num="0010">Another embodiment of the present invention is directed to a computer-implemented method comprising: (A) receiving a request to perform a network resource access function; (B) selecting a subset of a first plurality of devices, the first plurality of devices including devices of at least one of the following types: network traffic monitoring devices, voice services devices, video resource devices, and network attached storage devices; (C) identifying a plurality of actions to be performed by the device subset to satisfy the request; and (D) issuing requests to the device subset to perform the plurality of actions.</p>
<p id="p-0012" num="0011">Other features of the present invention will become apparent from the following detailed description taken in conjunction with the accompanying drawings.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0005" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. 1</figref> depicts the types of interfaces provided, Programming Interface (API) providing software function calls for Applications to a Network resource Software Development Kit (SDK), Network Interface Open Network Services Language protocol access to popular network related functions, and a User Interface to support Open Network Commands.</p>
<p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. 2</figref> depicts the interfaces between the components of an Open Network Adapter. The components are organized in levels the highest level being the network resource access function server and the lowest level are the network attached devices. An example high level network resource access request and the resultant lower level service request or device actions is shown in relation to the Network Function, Network Server, Network Technology, and Network Device levels.</p>
<p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. 3</figref> is a flow chart that depicts the Network Function Server logic.</p>
<p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. 4</figref> is a flow chart that depicts the Network Service Server logic.</p>
<p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. 5</figref> shows a Network with a home site and a remote site implementing an example containing a Software Application, a SDK implementing the Network Function layer, a Network Service Server, Voice technology server, Video technology server, NAS technology server, and other network devices.</p>
<p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. 6</figref> depicts the call tree of the MultimediaConferenceUs service and the device overlay where each action or service is implemented.</p>
<p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. 7</figref> depicts the network topology and associated devices and users of the example implementation of the user interface accessible network resource service MultimediaConferenceUs.</p>
<p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. 8</figref> depicts the interfaces, servers, and devices provided to implement a User Interface to provide the MultimediaConferenceUs Open Network Command.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0006" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0021" num="0020">Referring to <figref idref="DRAWINGS">FIG. 1</figref>, an Open Network Adapter (ONA) <b>110</b>, the ONA's interfaces to applications and network users, and the ONA's building blocks are shown. The ONA <b>110</b> provides three types of interfaces: two types to application software and one type to network users. The first type of interface is an Application Programming Interface (API) <b>102</b> that provides application software with network resource access function calls, which provide access to network traffic, video, voice, and network-attached storage capabilities. The API <b>102</b> may be used by a software application <b>101</b>, which includes a network resource services Software Developers Kit (SDK) <b>104</b>. The software application <b>101</b> communicates with the SDK using the API <b>102</b>.</p>
<p id="p-0022" num="0021">The SDK <b>104</b> is software provided to the software application developer and is linked in or otherwise associated with the code of the application <b>101</b> that is created by the developer of the application <b>101</b>. Incorporation of the SDK <b>104</b> into the application <b>101</b> enables network resource access services to be incorporated into the application <b>101</b>. The API <b>102</b> may, for example, be published as a Web Service, in the form of a &#x2018;WSDL&#x2019; document. This document may serve as the programmatic interface via which the author of the application <b>101</b> may integrate the application <b>101</b> with network resource system components. The API <b>102</b> may be platform neutral (e.g., XML based) and may be programming language agnostic, which allows for integration across legacy and newer applications.</p>
<p id="p-0023" num="0022">The second type of interface provided by the ONA <b>110</b> is an Open Network Services protocol interface <b>112</b>. Applications which communicate with the ONA <b>110</b> using the protocol interface <b>112</b> do not need to incorporate the SDK <b>104</b> into the application itself. For example, using protocols such as SOAP, XML, and HTTPS/SSL, an application <b>106</b> passes a network resource request to a Network Resources Services Server <b>120</b> in the Open Network Adapter <b>110</b> to access popular network related functions such as network traffic, video, voice, and network attached storage functions.</p>
<p id="p-0024" num="0023">The third type of user interface <b>107</b> to the Open Network Adapter <b>110</b> is a User Interface <b>103</b>, which may be part of the Open Network Adapter <b>110</b>. The User Interface <b>103</b> may receive Open Network Commands issued by a user <b>105</b> and translate those commands into network resource access requests to provide the user <b>105</b> with access to network resources.</p>
<p id="p-0025" num="0024">The Network Resource Services Server <b>120</b> translates high-level network resource access requests (such as those issued by the software application <b>101</b>, the software application <b>106</b>, and the user <b>105</b>) into implementation-specific protocols via the Network Traffic server interface <b>132</b>, Voice Services server interface <b>142</b>, Video Resource server interface <b>152</b>, and Network Attached Storage server interface <b>162</b>. The Network Resource Services Server <b>120</b> may also track the operational state, load, location, and possibly other parameters of technology specific service servers and direct the technology specific request to a selected server or set of servers.</p>
<p id="p-0026" num="0025">Note that some or all of the functionality of the Network Resource Services Server <b>120</b> may be incorporated into the SDK <b>104</b> and/or User Interface <b>103</b>. Therefore, descriptions herein of functions performed by the Network Resource Services Server <b>120</b> may also be applied to the SDK <b>104</b> and/or user interface. Furthermore, the SDK <b>104</b> and/or user interface <b>103</b> may communicate with servers <b>130</b>, <b>140</b>, <b>150</b>, <b>160</b> either through the Network Resource Services Server <b>120</b>, or directly through interfaces <b>132</b>, <b>142</b>, <b>152</b>, and <b>162</b>, respectively.</p>
<p id="p-0027" num="0026">The Network Traffic Server <b>130</b> translates network traffic-specific function requests into one or more device actions (e.g. requesting an ONC) via the interface <b>136</b> between the Network Traffic Server <b>130</b> and the Network Traffic Devices <b>135</b> (e.g., an IPS which provides the TAP function (see U.S. patent application Ser. No. 12/120,377, entitled &#x201c;Open Network Connections,&#x201d; filed on May 14, 2008). The Network Traffic Server <b>130</b> also makes the determination of which devices to utilize to perform the technology-specific request. Factors such as location, load, and operational state may be used to select the device or devices to perform the needed actions. Examples of network traffic devices include, but are not limited to, Switches, Routers, IPSs, and other devices that can perform network traffic access services.</p>
<p id="p-0028" num="0027">The Voice Services Server <b>140</b> translates the voice-specific function requests into one or more actions (e.g., place a voice call) via the interface <b>146</b> between the Voice Services Server <b>140</b> and the Voice Services Devices <b>145</b> (e.g., a Call Processor). The Voice Services Server <b>140</b> also makes the determination of which devices to utilize to perform the technology-specific request. Factors such as location, load, cost, and operational state may be used to select the device or devices to perform the needed actions. Examples of Voice Service devices include, but are not limited to, call processors, IP Phones, VoIP gateways, and other devices that can perform Voice Services.</p>
<p id="p-0029" num="0028">The Video Resource Server <b>150</b> translates the Video-specific function requests into one or more actions (e.g., start video capture) via the interface <b>156</b> between the Video Resource Server <b>150</b> and the Video Resource Devices <b>155</b> (e.g., a network attached video controller). The Video Resource Server <b>150</b> also makes the determination of which devices or devices to utilize to perform the technology specific request. Factors such as location, load, local authority and operational state may be used to select the device to perform the needed actions. Examples of Video Resource devices include, but are not limited to, video conference bridges, video cameras, surveillance systems, and other devices that can perform Video Resource services.</p>
<p id="p-0030" num="0029">The Network Attached Storage Server <b>160</b> translates the network attached storage-specific function request into one or more actions (e.g., store the video feed in a specific file) via the interface <b>166</b> between the Network Attached Storage Server <b>160</b> and the Network Attached Storage Devices <b>165</b> (e.g., a Storage Area Network (SAN) controller). The Network Attached Storage Server <b>160</b> also makes the determination of which devices or devices to utilize to perform the technology specific request. Factors such as location, capacity, security and operational state may be used to select the device to perform the needed actions. Examples of Network Attached Storage devices include, but are not limited to, NAS devices, SAN devices, and other devices that can perform Network Attached Storage services.</p>
<p id="p-0031" num="0030">Referring to <figref idref="DRAWINGS">FIG. 2</figref>, the external function interface <b>250</b> between an Application <b>270</b> and the Open Network Adapter <b>280</b> and the internal interfaces between the components of an Open Network Adapter <b>280</b> are shown. The Application <b>270</b> in <figref idref="DRAWINGS">FIG. 2</figref> may, for example, be the application <b>101</b> or the application <b>106</b> shown in <figref idref="DRAWINGS">FIG. 1</figref>. Similarly, the Open Network Adapter <b>280</b> shown in <figref idref="DRAWINGS">FIG. 2</figref> may be the Open Network Adapter shown in <figref idref="DRAWINGS">FIG. 1</figref>.</p>
<p id="p-0032" num="0031">The components of the Open Network Adapter <b>280</b> shown in <figref idref="DRAWINGS">FIG. 2</figref> are organized in levels, with the highest level being the network resource access Function Server <b>282</b> and the lowest level being the network attached devices <b>288</b>. The interface <b>250</b> presented to Application <b>270</b> provides various network resource access functions. The functions provided at the level of interface <b>250</b> may utilize one type of network technology such as network traffic, video, voice, or network attached storage; or may provide a function that utilizes multiple different network technologies such as a WatchCaptureAlert( ) function <b>201</b>, which is shown in <figref idref="DRAWINGS">FIG. 2</figref> as an example to illustrate the operation of Open Network Adapter <b>280</b>. The function WatchCaptureAlert( ) <b>201</b> watches for a specified user with a specified network address attempt to connect to a network, and when found: a video capture is started, the video is stored on a network attached storage device, and a phone call is placed to security personnel alerting them that the specified user has attempted to connect to the network and notifying the security personnel where to find the captured video.</p>
<p id="p-0033" num="0032">The Open Network Adapter <b>280</b> illustrated in <figref idref="DRAWINGS">FIG. 2</figref> enables implementation details to be hidden at multiple different layers, leveraging building blocks at each level, and providing powerful functions which are formed by utilizing one or more functions from the level below. In effect a network resource access language is created and, as with a computer programming language, such a language is implemented in levels, each of which hides the implementation details of the level below it. This enables powerful high-level functions to be specified without requiring the person who specifies those functions to understand how those functions are implemented at lower levels.</p>
<p id="p-0034" num="0033">A Function Server <b>282</b> receives the network resource access function requests and determines which network services could be utilized to provide those function requests. The Function Server <b>282</b> also determines which service server or servers to call upon to provide the needed service. In the example shown in <figref idref="DRAWINGS">FIG. 2</figref>, the Function Server <b>282</b> (as implemented, for example, in the SDK software <b>104</b>) receives this network function request WatchCaptureAlert(UserX,SecurityOffice) <b>201</b> and breaks it into three service requests <b>203</b>, <b>205</b>, and <b>207</b>. The network traffic service request Watch(UserX,Signal) <b>203</b> requests the network to look for traffic from UserX and also to look for UserX trying to connect to the network and return Signal, which indicates where in the network UserX is connected or attempted to connect.</p>
<p id="p-0035" num="0034"><figref idref="DRAWINGS">FIG. 3</figref> shows how the function server <b>282</b> handles a network resource access function request in one embodiment of the present invention. The Function Server <b>282</b> awaits a network resource access function request at step <b>302</b>. When a function request is received, the function server <b>282</b> determines which service set is needed to provide the requested function at step <b>303</b>. For each service in the service set; the inter-service linkages and events that need to be handled for this service are determined at step <b>305</b>; a process is created to handle each linkage and event at step <b>306</b>; the service server or service servers to carry out the service request is chosen by considering factors such as location, load, and operational state; and one or more service requests are issued to the selected server(s) at step <b>308</b>. Once all the service requests are issued, the function server <b>282</b> returns to step <b>302</b>, where it waits for another function request. The processes that were created (not shown) will be invoked when the associated events occur and when inter-service linkages are used.</p>
<p id="p-0036" num="0035">In this example, the event &#x201c;Signal&#x201d; caused a process to be created to handle this event. This process (not shown), created by the Function Server <b>282</b>, is an example of an &#x201c;inter-service linkage&#x201d; which will wait for Signal to be returned (an example of an &#x201c;inter-service event&#x201d;). When and when this event occurs, the process created by the Function Server <b>282</b> will request a video service server to capture video in the area of the where UserX is attempting to connect to the network. The video service request CapStore(locale) <b>205</b> instructs the network to capture in the area indicated by the variable &#x201c;locale&#x2019; and store video on a network attached storage device. Also, the process created by the Function Server <b>282</b> will, upon receiving the Signal indication, request a voice service SendMsg(num,msg) <b>207</b> which requests that a voice call be made to security with a message alerting security that UserX is attempting connect to the network and that the video feed can be found at a specified location.</p>
<p id="p-0037" num="0036">Returning to <figref idref="DRAWINGS">FIG. 2</figref>, the Service Server <b>284</b> receives network service requests from, in this example, the Function Server <b>282</b> via the Service interface <b>260</b>. A Service Server <b>284</b> receives the network service requests and determines which technology services or types of devices could be utilized to provide the network service. The Service Server <b>284</b> also determines which specific service server/device or servers/devices to call upon to provide the needed network service. In this example the Service Server <b>284</b> (which may, for example, be implemented in a network appliance) receives three service requests in a service set: Watch(UserX, Signal) <b>203</b>, CapStore(locale) <b>205</b>, and SendMsg(num,msg) <b>207</b>.</p>
<p id="p-0038" num="0037">The network service server <b>284</b> breaks Watch(UserX, Signal) into multiple requests for an Open Network Connection (ONC) receive connection (<b>221</b><i>a</i>, <b>211</b><i>b</i>, etc.) to various Traffic Access Providers (TAPs) in the network to watch for traffic from UserX. Although not shown in <figref idref="DRAWINGS">FIG. 2</figref>, the Services Server <b>284</b> could also request notification from the Network Access Control (NAC) system for network login attempts from UserX. The network service server <b>284</b> breaks CapStore(locale) <b>205</b> into technology service requests to start a video capture (Capture(locale) <b>211</b>) and a technology service request to store the video on a network attached storage device (Store(Cam) <b>213</b>). The results of the two related technology services are to capture and store video from the area where UserX attempted to connect to the network.</p>
<p id="p-0039" num="0038"><figref idref="DRAWINGS">FIG. 4</figref> shows how the network service server <b>284</b> handles network service requests according to one embodiment of the present invention. The Service Server <b>284</b> awaits a network service request at step <b>402</b>. When a service request is received, the service server <b>284</b> determines which technology services and device actions are needed to provide requested service at step <b>403</b>. For each technology service or device action needed; the inter-service/action linkages and events that need to be handled for this service/action are determined at step <b>405</b>; a process is created to handle each linkage and event at step <b>406</b>; the technology service server/device or service servers/devices to carry out the service request are chosen by considering factors such as location, load, and operational state; and the service/action request is issued to the selected server/device or servers/devices at step <b>408</b>. Once all the service/action requests are issued, the service server <b>284</b> goes back to step <b>402</b>, where it waits for another network service request. The processes that were created (not shown) will be invoked when associated events occur and when inter-service linkages are used.</p>
<p id="p-0040" num="0039">Returning to <figref idref="DRAWINGS">FIG. 2</figref>, the Technology Servers <b>130</b>, <b>140</b>, <b>150</b>, <b>160</b> receive network service requests from, in this example, the Services Server <b>284</b> via the technology specific interfaces <b>132</b>, <b>142</b>, <b>152</b>, <b>162</b>. Technology Servers <b>130</b>, <b>140</b>, <b>150</b>, <b>160</b> receive the network service requests and determine which types of devices could be utilized to provide the technology specific service. The Technology Servers <b>130</b>, <b>140</b>, <b>150</b>, <b>160</b> also determine which specific device or devices to call upon to provide the needed technology specific network service. In this example the Technology Servers receive three technology requests, Capture(Cam) <b>211</b>, Store(Cam) <b>213</b>, and Call(number) <b>215</b>. The Video Technology server <b>150</b> receives the Capture(Cam) <b>211</b> request and issues a SCam(file) <b>223</b> to start a camera <b>155</b> capturing a video and to send the video stream to a file named &#x201c;file&#x201d;. The Network Attached Storage server <b>160</b> receives the Store(CAM) <b>213</b> request and issues a FOpen(CAM) <b>225</b> device action, informing a network attached storage device <b>165</b> that the video stream should be captured and stored. The Voice Technology Server <b>140</b> receives the request Call(number) <b>215</b> and issues a device action CallIP(num) <b>227</b> to a voice device (call processor) <b>145</b> to make a voice call to telephone &#x201c;num&#x201d; informing the security personnel that UserX is attempting to connect to the network and that the video stream can be found at a well-known location on network attached storage.</p>
<p id="p-0041" num="0040">Referring to <figref idref="DRAWINGS">FIG. 5</figref>, a security application that utilizes network traffic, voice, video, and network attached storage network resource access functions is described as an example of how application developers can utilize embodiments of the present invention. This security application is used to locate an identified end node or user attempting to connect to a network, alert security personnel of the whereabouts of the end node or user with a phone call, capture video of the end node or user, and store the video for later use. The security software application <b>510</b> has incorporated an SDK <b>512</b> that provides Network Resource Services Server function. The security software application <b>510</b> issues a WatchCaptureAlert(UserX,SecurityOffice) request to the SDK <b>512</b> via the API. The security application uses the network traffic resource access function (in this example within the SDK <b>512</b>) to request that when network traffic to or from a specified device address is discovered, an alert should be sent to the application indicating the presence of this network traffic and indicating where in the network this specified device is connected or is attempting to connect.</p>
<p id="p-0042" num="0041">The SDK <b>512</b> breaks the WatchCaptureAlert(UserX,SecurityOffice) request into three requests <b>203</b>, <b>205</b>, and <b>207</b> to issue to the network Services Server <b>514</b>. The network Services Server <b>514</b> receives the request Watch(UserX,Signal) <b>203</b>, which requests the network to look for traffic from UserX and also look for UserX trying to connect to the network and return Signal, which indicates where in the network UserX is connected or attempted to connect. The SDK <b>512</b> also creates a process to handle the event of Signal being returned indicating UserX has attempted to connect to the network. The network Services Server <b>514</b> issues device actions in the form of OncRxRequests to IPS devices in the network that provide TAP functionality. In this example the OncRxRequests <b>221</b><i>a </i>&#x26; <b>221</b><i>b </i>are sent to the router with IPS <b>582</b> at remote LAN <b>580</b>, and to LAN Switch with IPS <b>532</b>. The network Services Server <b>514</b> also sends a device action <b>521</b> to the NAC Server <b>516</b> requesting to be notified if UserX attempts to connect to the network.</p>
<p id="p-0043" num="0042">Once the SDK receives the Signal <b>523</b>, that UserX has attempted to connect to the network, the request CapStore(locale) <b>205</b> is issued to the Services Server <b>514</b>. The Services Server <b>514</b> breaks that request into two requests Capture(Cam) <b>211</b> to the Video Services Server <b>522</b> and Store(Cam) <b>213</b> to the Network Attached Storage (NAS) Services Server <b>524</b>. The Video Services Server <b>522</b> receives the Capture(Cam) <b>211</b> request and fulfills the request by issuing SCam(file) <b>223</b> device action to the network attached camera <b>534</b> to start capture video and send the captured video to a specified file. The Video Services Server <b>522</b> also receives the Store(Cam) <b>213</b> request and fulfills this request by issuing a FOpen(cam) device action <b>225</b> to the network attached storage device <b>536</b> instructing the device to except the video stream and store it in a specified file.</p>
<p id="p-0044" num="0043">Also upon receiving the Signal <b>523</b>, indicating that UserX has attempted to connect to the network, the request SendMsg(num,msg) <b>207</b> is sent to the network Services Server <b>514</b>. The network Services Server <b>514</b> breaks that request into a single request Call(number) <b>215</b>, which is sent to the Voice Services Server <b>528</b>. The Voice Services Server <b>528</b> receives the request Call(number) and issues a device action CallIP(num) <b>227</b> to a Call Processor <b>538</b> to make a voice call to telephone &#x201c;num&#x201d; informing the security personnel that UserX is attempting to connected to the network and the video stream can be found at a well known location on network attached storage.</p>
<p id="p-0045" num="0044"><figref idref="DRAWINGS">FIG. 1</figref> depicted a User Interface <b>107</b> that presented network resource access functions to the User <b>105</b>. The User <b>105</b> could be a person that has responsibility for operating the network, part of the network, and/or resources attached to the network. The User <b>105</b> may alternatively be a person who wants access to a network-accessible resource. The software that implements the user interface <b>103</b> is part of the Open Network Adapter and translates user input to network resource access requests. This User Interface software <b>103</b> may, for example, run on a user's personal computer as a downloaded application or applet; run as a server that provides a web page that provides the various user-accessible network resource commands; could run on a wired or wireless network phone; or run on any network appliance device. The commands provided to a user that has responsibility for operating the network or part thereof would be different commands from those issued by a user who only wants access to a network accessible resources.</p>
<p id="p-0046" num="0045">Now referring to <figref idref="DRAWINGS">FIGS. 6</figref>, <b>7</b>, and <b>8</b>, an example of a user interface implemented according to one embodiment of the present invention is disclosed. <figref idref="DRAWINGS">FIG. 8</figref> depicts an Open Network Adapter <b>801</b>, the User <b>105</b>, and the user interface <b>107</b> to the User Interface software <b>103</b>. The User Interface software <b>103</b> presents a display and a menu or buttons to take user input and convey information to the user <b>105</b>. In <figref idref="DRAWINGS">FIG. 7</figref> an example of the User Interface Device <b>710</b> is shown which can be a PC, telephone, or other device with input and output capabilities. The MultimediaConferenceUs function is invoked by the User <b>105</b> to schedule a multimedia conference with a set of participants and a set of documents needed for the conference. The meeting is to be recorded and stored. The multimedia conference request, the list of participants, and the documents needed are input to the User Input Device <b>710</b> by the user <b>105</b> and passed to the Network Resources Services Server <b>120</b> in the form of a call <b>701</b> to the MultimediaConferenceUs function. The Network Resources Services Server <b>120</b> issues service requests to the Misc. Plug-ins Server <b>830</b>, the Voice Service Server <b>140</b>, the Video Resource Server <b>150</b>, and the Network Attached Storage Server <b>160</b> to accomplish the task of providing the service requested by the User <b>105</b>.</p>
<p id="p-0047" num="0046"><figref idref="DRAWINGS">FIG. 6</figref> shows the MultimediaConferenceUs function <b>601</b>, which in turn calls the function Schedule <b>603</b> (to send out invitations and schedule the meeting rooms or any other equipment required by this multimedia conference) and StartConference <b>605</b> (to start the conference at the scheduled time with the defined participants and the required equipment and specified locations). MultimediaConferenceUs <b>601</b>, Schedule <b>603</b>, and StartConference <b>605</b> all run on the Network Resource Services Server <b>120</b> as indicated by the dotted lines.</p>
<p id="p-0048" num="0047">Schedule <b>603</b> calls InviteMsg <b>611</b> with the list of participants to whom invitation messages should be send. InviteMsg <b>611</b> issues multiple SendMail requests <b>621</b><i>a</i>, <b>621</b><i>b</i>, etc. to invite the individuals on the participant list or sends a single invite message to all or a subset of the participant list. Optionally InviteMsg <b>611</b> could also handle responses from the participants and update the actual participant list, which can be utilized by StartConference <b>605</b> when the conference is to start. InviteMsg <b>611</b> is a service provided by the Misc. Plug-ins Server <b>830</b> and provides a linkage to the Email system. The Misc. Plug-ins Server <b>830</b> is used to host plug-in services that provide a linkage to other services (email, room reservation, etc.) or to provide hosting for a new multi-technology service before providing that service with the Network Resource Services Server, when it becomes a mainstream service.</p>
<p id="p-0049" num="0048">Schedule <b>603</b> also calls Reserve <b>613</b> to reserve the required equipment and specified locations required for the conference at the specified time. Reserve <b>613</b> is a service that runs on the Misc. Plug-ins Server <b>830</b> and provides a linkage to the room and resource reservation system <b>835</b><i>b</i>. Optionally Reserve <b>613</b> can reserve equipment and locations based on the parties involved and associated conference related preferences in each of the parties profiles. Each of the participants (parties) may have profile information that specifies conference preferences such as nearby conference rooms, video or audio equipment preferences, audio of video access numbers, or even travel information about the participants that may change the preference based on time of the conference and the participants travel schedule.</p>
<p id="p-0050" num="0049">At this point the conference is scheduled and the resources have been reserved. Prior to start of the conference the Schedule <b>603</b> function signals the Start Conference <b>605</b> function that conference with Conference ID (CID) needs to start. The Start Conference <b>605</b> function upon receipt of the signal from the Schedule <b>603</b> function pre-fetches the files needed for the meeting, such as PowerPoint presentation files, spreadsheet files, picture files, of other files that can be shared by two or more of the participants. The pre-fetch is accomplished by a call to the Prefetch function <b>615</b>, which is running on the Network Attached Storage Server <b>160</b>, with a list of documents needed.</p>
<p id="p-0051" num="0050">The requested files are obtained by the Prefetch function <b>615</b> by ReadFile function <b>625</b><i>a</i>, <b>625</b><i>b</i>, etc. requests to the Network Attached Storage (NAS) device <b>165</b><i>a</i>. The retrieved files are passed back to the StartConference function <b>605</b> from the Prefetch function <b>615</b>. The StartConference function <b>605</b> then calls the OpenBridge function <b>617</b>, indicating that a conference needs to start using a specified or provided set of documents, with a list of participants, using specified equipment, at specified locations, and that the conference is to be recorded. The OpenBridge function <b>617</b> is shown as running on the Network Resource Services Server <b>120</b> but may have initially been deployed on the Misc. Plug-ins Server <b>830</b>.</p>
<p id="p-0052" num="0051">The OpenBridge function <b>617</b> calls the StartVoice function <b>627</b> which either calls a voice conference number and enters the dial-in information (such as a conference ID or password) or calls the participants so that they do not have to remember to call into a conference number. The StartVoice function <b>627</b> runs on the Voice Services Server <b>140</b>. One or more calls are placed using the CallIP function <b>637</b><i>a</i>, <b>637</b><i>b</i>, etc. which runs on a call processor or phone device <b>145</b><i>a</i>, <b>145</b><i>b</i>, etc. The resulting voice feed is either passed from the StartVoice function <b>627</b> to the StartCon function <b>629</b>, or the StartCon function <b>629</b> can access the voice bridge directly.</p>
<p id="p-0053" num="0052">The OpenBridge function <b>617</b> then calls the StartCon function <b>629</b> which is running on the Video Resource Server <b>150</b>. The StartCon function <b>629</b> issues a request to start the video recording at the locations as needed and adds the video feed into a multi-media bridge that distributes the voice and video and controls which device supplies the video shared by the group of participants. The video could be supplied by a camera or a document display or a mixture of sources. The request is sent by issuing a call to the SCam function <b>631</b> running on the CAM device <b>155</b><i>a. </i></p>
<p id="p-0054" num="0053">Referring now to <figref idref="DRAWINGS">FIG. 7</figref>, as described previously, the User <b>105</b> has scheduled the conference using the User Interface Device <b>710</b> and now it is time for the conference to start. The Schedule <b>603</b> function signals the Start Conference <b>605</b> function that a conference with Conference ID (CID) needs to start, both of which are running on the Network Resource Services Server <b>120</b>. The Start Conference <b>605</b> function calls the Prefetch function <b>615</b>, indicated by arrow <b>713</b>, with a list of documents that need to be pre-fetched for the conference. The Prefetch function <b>615</b> runs on the NAS Server <b>160</b>. The requested files are obtained by requests <b>725</b> to the Network Attached Storage (NAS) device <b>165</b><i>a. </i></p>
<p id="p-0055" num="0054">The StartConference function <b>605</b> then calls the OpenBridge function <b>617</b>, both running on the Network Resource Services Server <b>120</b>, indicating that a conference needs to start. The OpenBridge function <b>617</b> calls <b>715</b> the StartVoice function <b>627</b>, running on the Voice Services Server <b>140</b>. The StartVoice function <b>627</b> sets up a voice conference by calling CallIP, which is running on the Call Process device <b>145</b><i>a. </i></p>
<p id="p-0056" num="0055">Then the conference is started when the OpenBridge function <b>617</b> running on the Network Resource Services Server <b>120</b> calls <b>711</b> the StartCon function <b>629</b> running on the Video Resource Server <b>150</b>. The StartCon function <b>629</b> sends a request by issuing a call <b>723</b> to the SCam function <b>631</b> running on the CAM device <b>155</b><i>a</i>. Although a request could be sent to CAM device <b>155</b><i>b </i>at remote location <b>780</b>, this is not shown in <figref idref="DRAWINGS">FIG. 7</figref> for ease of illustration.</p>
<p id="p-0057" num="0056">The Voice feeds, the video feeds, and the document display are all set to the Video Resource Server <b>150</b>, which distributes the voice and video to the participants as indicated by three unlabeled arrows. The conference may also be recorded while it occurs and stored to the Network Attached Storage device <b>165</b><i>a </i>through the NAS Services Server <b>160</b>.</p>
<p id="p-0058" num="0057">The WatchCaptureAlert command, explained in detail above, could also be offered as a user interface command provided to users that have responsibilities of the operation of the network or part thereof some times called network administrators.</p>
<p id="p-0059" num="0058">The embodiments described above are merely examples of services that may be provided by embodiments of the present invention. Other examples of commands that may be provided to users who want access to network accessible resources include, but are not limited to:
<ul id="ul0001" list-style="none">
    <li id="ul0001-0001" num="0000">
    <ul id="ul0002" list-style="none">
        <li id="ul0002-0001" num="0059">FindAndShowPrinter&#x2014;Find the nearest printer and show a video of what that printer looks like, could also show a printer tutorial on that printer's operation.</li>
        <li id="ul0002-0002" num="0060">MultimediaConferenceUs&#x2014;Invite a list of participants, access the required documents, initiate multimedia conference using the specified technology, and optionally store a log of the conference.</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0060" num="0061">While only a few illustrative embodiments of the present invention have been discussed, it is understood that various modification will be apparent to those skilled in the art in view of the description herein. All such modifications are within the spirit and scope of the invention as encompassed by the following claims.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A non-transitory computer-readable medium on which is embedded one or more computer programs for providing network resource access functions within a software application, the one or more computer programs comprising computer readable code to:
<claim-text>receive a request to perform a network resource access function, wherein the network resource access function provides access to one or more network device functions, wherein the network resource access function comprises a network traffic access service;</claim-text>
<claim-text>determine, from a plurality of different types of devices, which of the plurality of different types of devices is to perform the network resource access function, wherein the plurality of different types of devices comprises at least a network traffic device;</claim-text>
<claim-text>select a subset of the plurality of different types of devices, including the network traffic device, to perform the requested network access function;</claim-text>
<claim-text>identify a plurality of actions to be performed by the selected subset of the plurality of different types of devices to satisfy the network resource access function; and</claim-text>
<claim-text>issue a request that the selected subset of the plurality of different types of devices, including the network traffic device, perform the identified plurality of actions.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The non-transitory computer-readable medium of <claim-ref idref="CLM-00001">claim 1</claim-ref>, the one or more computer programs further comprising computer readable code to:
<claim-text>select the subset of the plurality of different types of devices from among a plurality of different types of devices and a plurality of technology servers to satisfy the requested network access function; and</claim-text>
<claim-text>request that the selected subset of the plurality of different types of devices perform the identified plurality of actions to satisfy the network access function.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The non-transitory computer-readable medium of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein each of the technology servers is to issue an action request to one of the plurality of different types of devices in response to a technology-specific request.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The non-transitory computer-readable medium of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the plurality of technology servers include a network traffic server and at least one technology server of at least one of the following types: voice services server, video resource server, and network attached storage server.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The non-transitory computer-readable medium of <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein the plurality of technology servers include a network traffic server and technology servers of at least two of the following types: voice services server, video resource server, and network attached storage server.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The non-transitory computer-readable medium of <claim-ref idref="CLM-00001">claim 1</claim-ref>, the one or more computer programs further comprising computer readable code to:
<claim-text>identify a plurality of network services to be performed by the selected subset of the plurality of different types of devices of a network traffic access service and at least one of the following types: voice service, video resource service, and network attached storage service.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The non-transitory computer-readable medium of <claim-ref idref="CLM-00001">claim 1</claim-ref>, the one or more computer programs further comprising computer readable code to:
<claim-text>identify one or more network services to perform the requested network access function; and</claim-text>
<claim-text>issue a plurality of network traffic access service requests to at least one network service server to perform the one or more network services on the network traffic device.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The non-transitory computer-readable medium of <claim-ref idref="CLM-00007">claim 7</claim-ref>, the one or more computer programs further comprising computer readable code to:
<claim-text>create an inter-service linkage between at least two of the plurality of network services.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. A computer-implemented method comprising:
<claim-text>(A) receiving a request to perform a network resource access function, wherein the network resource access function provides access to one or more network device functions, wherein the network resource access function comprises a network traffic access service;</claim-text>
<claim-text>(B) determining, from a plurality of different types of devices, which of the plurality of different devices is to perform the network resource access function;</claim-text>
<claim-text>(C) selecting a subset of the plurality of different types of devices, the plurality of different types of devices including a network traffic device and a device of at least one of the following types: voice services devices, video resource devices, and network attached storage devices;</claim-text>
<claim-text>(D) identifying a plurality of actions to be performed by the device subset to satisfy the request; and</claim-text>
<claim-text>(E) issuing requests to the device subset to perform the plurality of actions.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The method of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the plurality of different types of devices further comprises at least two of the following types: voice services devices, video resource devices, and network attached storage devices.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The method of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the subset further includes devices of at least one of the following types: voice services devices, video resource devices, and network attached storage devices.</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The method of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the subset further includes devices of at least two of the following types: voice services devices, video resource devices, and network attached storage devices.</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The method of <claim-ref idref="CLM-00009">claim 9</claim-ref>, further comprising:
<claim-text>(F) before (C), selecting a subset of a first plurality of technology servers, the first plurality of technology servers providing network traffic monitoring services and at least one of the following types: voice services, video resource services, and network attached storage services;</claim-text>
<claim-text>(G) providing at least one service request to the selected technology server subset; and</claim-text>
<claim-text>wherein (D) and (E) are performed by the selected technology server subset.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The method of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein (C) comprises selecting the subset of the plurality of different types of devices based on locations of the plurality of different types of devices.</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The method of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein (C) comprises selecting the subset of the plurality of different types of devices based on loads of the plurality of different types of devices.</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The method of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein (C) comprises selecting the subset of the plurality of different types of devices based on operational states of the plurality of different types of devices.</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. An open network adapter comprising:
<claim-text>one or more memories storing computer executable code for a network function translation application and at least one network service server, said network function translation application being to receive a request to perform a network resource access function, wherein the network access function is to provide access to one or more network device functions, wherein the network resource access function comprises a network traffic access service, said network function translation application being further to determine, from a plurality of different types of devices, which of the plurality of different types of devices is to perform the network resource action function, wherein the plurality of different types of devices comprises at least a network traffic device, to select a subset of the plurality of different types of devices, including the network traffic device, to perform the requested network access function, to issue a plurality of network service requests to the at least one network service server, said at least one network service server being to identify a plurality of actions to be performed by the selected subset of the plurality of different types of devices to satisfy the network access function, and to issue a request that the selected subset of the plurality of different types of devices, including the network traffic device, perform the identified plurality of actions; and</claim-text>
<claim-text>at least one interface for interfacing the network function translation application and the at least one network service server.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The open network adapter of <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein the one or more memories further comprise computer executable code for a plurality of technology servers to satisfy the requested network access function, wherein the network function translation application is to select a subset of the plurality of technology servers and wherein the at least one network service server is to request the selected subset of the plurality of technology servers to perform the identified plurality of actions.</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. The open network adapter of <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein the subset includes network traffic monitoring devices of at least one of the following types of device: voice services devices, video resource devices, and network attached storage devices.</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. The non-transitory computer-readable medium of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the network traffic device comprises at least one of a switch, a router, and an intrusion prevention system.</claim-text>
</claim>
</claims>
</us-patent-grant>

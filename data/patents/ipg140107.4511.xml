<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08625594-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08625594</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>12938116</doc-number>
<date>20101102</date>
</document-id>
</application-reference>
<us-application-series-code>12</us-application-series-code>
<us-term-of-grant>
<us-term-extension>467</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>H</section>
<class>04</class>
<subclass>L</subclass>
<main-group>12</main-group>
<subgroup>28</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>370392</main-classification>
<further-classification>370400</further-classification>
</classification-national>
<invention-title id="d2e53">Switching apparatus and method based on virtual interfaces</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>6185188</doc-number>
<kind>B1</kind>
<name>Hasegawa</name>
<date>20010200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>370235</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>6859835</doc-number>
<kind>B1</kind>
<name>Hipp</name>
<date>20050200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709227</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>6985956</doc-number>
<kind>B2</kind>
<name>Luke et al.</name>
<date>20060100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709229</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>7467191</doc-number>
<kind>B1</kind>
<name>Wang et al.</name>
<date>20081200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709221</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>7574202</doc-number>
<kind>B1</kind>
<name>Tsao et al.</name>
<date>20090800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>7796594</doc-number>
<kind>B2</kind>
<name>Melman et al.</name>
<date>20100900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>8234361</doc-number>
<kind>B2</kind>
<name>Krywaniuk</name>
<date>20120700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709223</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>8320255</doc-number>
<kind>B2</kind>
<name>Vasseur et al.</name>
<date>20121100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>370238</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>2003/0212830</doc-number>
<kind>A1</kind>
<name>Greenblat et al.</name>
<date>20031100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>2004/0015599</doc-number>
<kind>A1</kind>
<name>Trinh et al.</name>
<date>20040100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>2004/0044744</doc-number>
<kind>A1</kind>
<name>Grosner et al.</name>
<date>20040300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709217</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>2004/0252722</doc-number>
<kind>A1</kind>
<name>Wybenga et al.</name>
<date>20041200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00013">
<document-id>
<country>US</country>
<doc-number>2005/0232303</doc-number>
<kind>A1</kind>
<name>Deforche et al.</name>
<date>20051000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>370469</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00014">
<document-id>
<country>US</country>
<doc-number>2006/0002386</doc-number>
<kind>A1</kind>
<name>Yik et al.</name>
<date>20060100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00015">
<document-id>
<country>US</country>
<doc-number>2006/0230185</doc-number>
<kind>A1</kind>
<name>Errickson et al.</name>
<date>20061000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00016">
<document-id>
<country>US</country>
<doc-number>2007/0266173</doc-number>
<kind>A1</kind>
<name>Wong et al.</name>
<date>20071100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709238</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00017">
<document-id>
<country>US</country>
<doc-number>2008/0159277</doc-number>
<kind>A1</kind>
<name>Vobbilisetty et al.</name>
<date>20080700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>370357</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00018">
<document-id>
<country>US</country>
<doc-number>2008/0205403</doc-number>
<kind>A1</kind>
<name>Akyol et al.</name>
<date>20080800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>370392</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00019">
<document-id>
<country>US</country>
<doc-number>2008/0225853</doc-number>
<kind>A1</kind>
<name>Melman et al.</name>
<date>20080900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00020">
<document-id>
<country>US</country>
<doc-number>2008/0232253</doc-number>
<kind>A1</kind>
<name>Wilt et al.</name>
<date>20080900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>3702351</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00021">
<document-id>
<country>US</country>
<doc-number>2008/0285555</doc-number>
<kind>A1</kind>
<name>Ogasahara</name>
<date>20081100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>370389</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00022">
<document-id>
<country>US</country>
<doc-number>2009/0083445</doc-number>
<kind>A1</kind>
<name>Ganga</name>
<date>20090300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709250</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00023">
<document-id>
<country>US</country>
<doc-number>2009/0157846</doc-number>
<kind>A1</kind>
<name>Shimozono et al.</name>
<date>20090600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00024">
<document-id>
<country>US</country>
<doc-number>2009/0296579</doc-number>
<kind>A1</kind>
<name>Dharwadkar et al.</name>
<date>20091200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>370235</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00025">
<document-id>
<country>US</country>
<doc-number>2010/0281437</doc-number>
<kind>A1</kind>
<name>Stone-Perez et al.</name>
<date>20101100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>715863</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00026">
<document-id>
<country>US</country>
<doc-number>2011/0007744</doc-number>
<kind>A1</kind>
<name>Melman et al.</name>
<date>20110100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00027">
<document-id>
<country>US</country>
<doc-number>2012/0291117</doc-number>
<kind>A1</kind>
<name>Krywaniuk</name>
<date>20121100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>726 15</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00028">
<document-id>
<country>EP</country>
<doc-number>1885139</doc-number>
<kind>A1</kind>
<date>20080200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00029">
<othercit>International Search Report and Written Opinion for International Application No. PCT/US2010/055115, dated Jan. 27, 2011.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00030">
<othercit>International Preliminary Report on Patentability for International Application No. PCT/US2010/055115, dated May 8, 2012.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>40</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>370395</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>370530</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>9</number-of-drawing-sheets>
<number-of-figures>9</number-of-figures>
</figures>
<us-related-documents>
<us-provisional-application>
<document-id>
<country>US</country>
<doc-number>61257406</doc-number>
<date>20091102</date>
</document-id>
</us-provisional-application>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20110134925</doc-number>
<kind>A1</kind>
<date>20110609</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Safrai</last-name>
<first-name>Uri</first-name>
<address>
<city>Haifa</city>
<country>IL</country>
</address>
</addressbook>
<residence>
<country>IL</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Melman</last-name>
<first-name>David</first-name>
<address>
<city>Bikat Beit Hakerem</city>
<country>IL</country>
</address>
</addressbook>
<residence>
<country>IL</country>
</residence>
</us-applicant>
<us-applicant sequence="003" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Daniel</last-name>
<first-name>Tsahi</first-name>
<address>
<city>Palo Alto</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="004" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Bishara</last-name>
<first-name>Nafea</first-name>
<address>
<city>San Jose</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Safrai</last-name>
<first-name>Uri</first-name>
<address>
<city>Haifa</city>
<country>IL</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Melman</last-name>
<first-name>David</first-name>
<address>
<city>Bikat Beit Hakerem</city>
<country>IL</country>
</address>
</addressbook>
</inventor>
<inventor sequence="003" designation="us-only">
<addressbook>
<last-name>Daniel</last-name>
<first-name>Tsahi</first-name>
<address>
<city>Palo Alto</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="004" designation="us-only">
<addressbook>
<last-name>Bishara</last-name>
<first-name>Nafea</first-name>
<address>
<city>San Jose</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>Marvell World Trade Ltd.</orgname>
<role>03</role>
<address>
<city>St. Michael</city>
<country>BB</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Lee</last-name>
<first-name>Andrew</first-name>
<department>2472</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">A network device comprises a plurality of physical ports, and a packet processing pipeline coupled to the plurality of physical ports. The packet processing pipeline is configured to assign a virtual port from a plurality of virtual ports to a packet received via one of the physical ports, wherein a quantity of the plurality of virtual ports is larger than a quantity of the plurality of physical ports, and wherein, for each of at least some of the physical ports, multiple virtual ports correspond to one physical port. The packet processing pipeline is also configured to assign a virtual domain from a plurality of virtual domains to the packet based on the assigned virtual port, and process the packet based on one or more of i) the assigned virtual port, ii) the assigned virtual domain, and iii) a header field of the packet, including determining zero, one, or more physical ports to which the packet is to be forwarded.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="205.66mm" wi="163.24mm" file="US08625594-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="223.35mm" wi="170.69mm" file="US08625594-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="225.72mm" wi="151.21mm" orientation="landscape" file="US08625594-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="224.71mm" wi="186.77mm" file="US08625594-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="202.95mm" wi="141.05mm" file="US08625594-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="188.81mm" wi="138.09mm" file="US08625594-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="225.04mm" wi="152.57mm" file="US08625594-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="167.05mm" wi="115.65mm" file="US08625594-20140107-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00008" num="00008">
<img id="EMI-D00008" he="166.71mm" wi="148.93mm" file="US08625594-20140107-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00009" num="00009">
<img id="EMI-D00009" he="184.15mm" wi="167.05mm" orientation="landscape" file="US08625594-20140107-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?RELAPP description="Other Patent Relations" end="lead"?>
<heading id="h-0001" level="1">CROSS-REFERENCE TO RELATED APPLICATION</heading>
<p id="p-0002" num="0001">This application claims the benefit of U.S. Provisional Patent Application No. 61/257,406, entitled &#x201c;ePORT, eVLAN and L2MLL ARCHITECTURE FOR L2VPN SUPPORT,&#x201d; which was filed on Nov. 2, 2009, the entire disclosure of which is hereby incorporated by reference herein.</p>
<?RELAPP description="Other Patent Relations" end="tail"?>
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0002" level="1">FIELD OF THE DISCLOSURE</heading>
<p id="p-0003" num="0002">The present disclosure relates generally to communication networks and, more particularly, to network switching devices.</p>
<heading id="h-0003" level="1">BACKGROUND</heading>
<p id="p-0004" num="0003">The background description provided herein is for the purpose of generally presenting the context of the disclosure. Work of the presently named inventors, to the extent it is described in this background section, as well as aspects of the description that may not otherwise qualify as prior art at the time of filing, are neither expressly nor impliedly admitted as prior art against the present disclosure.</p>
<p id="p-0005" num="0004">Some networking applications require switching between a high number of ports. For example, a typical data center includes a large number of servers, and switches to communicatively couple the servers to outside network connections, such as backbone network links. As another example, a high-volume website server system (server farm) can include a large number of web servers, and switches to communicatively couple the web servers to backbone network links.</p>
<p id="p-0006" num="0005">In such applications, switching systems capable of switching between a high number of ports are utilized so that traffic from a backbone network line can be routed to a large number of servers, and vice versa. Such switching systems can include a large number of switches, and each switch can be capable of switching between several ports.</p>
<p id="p-0007" num="0006">With bridge devices, operational characteristics are often defined by various standards such as the IEEE 802.1Q standard or others promulgated by the International Engineering Task Force (IETF), for example. In some instances, carrier Layer-2 VPN (L2VPN) technologies may implement a logical bridge on top of a Layer-2 or Layer-3 infrastructure network; examples of such technologies include VPLS, MAC-in-MAC, and certain emerging wireless local area network (WLAN) standards.</p>
<heading id="h-0004" level="1">SUMMARY</heading>
<p id="p-0008" num="0007">In one embodiment, a network device comprises a plurality of physical ports, and a packet processing pipeline coupled to the plurality of physical ports. The packet processing pipeline is configured to assign a virtual port from a plurality of virtual ports to a packet received via one of the physical ports, wherein a quantity of the plurality of virtual ports is larger than a quantity of the plurality of physical ports, and wherein, for each of at least some of the physical ports, multiple virtual ports correspond to one physical port, The packet processing pipeline is also configured to assign a virtual domain from a plurality of virtual domains to the packet based on the assigned virtual port, and process the packet based on one or more of i) the assigned virtual port, ii) the assigned virtual domain, and iii) a header field of the packet, including determining zero, one, or more physical ports to which the packet is to be forwarded.</p>
<p id="p-0009" num="0008">In another embodiment, a packet processing method includes receiving a packet via a source physical port from a plurality of physical ports, and assigning a virtual port from a plurality of virtual ports to a packet received via one of the physical ports, wherein a quantity of the plurality of virtual ports is larger than a quantity of the plurality of physical ports, and wherein, for each of at least some of the physical ports, multiple virtual ports correspond to one physical port. The method also includes assigning a virtual domain from a plurality of virtual domains to the packet based on the assigned virtual port, and processing the packet with a packet processing pipeline based on one or more of i) the assigned virtual port, ii) the assigned virtual domain, and iii) a header field of the packet, including determining zero, one, or more, physical ports to which the packet is to be forwarded.</p>
<p id="p-0010" num="0009">In yet another embodiment, a network device comprises a plurality of physical ports, and a packet processing pipeline coupled to the plurality of physical ports, the packet processing pipeline comprising plurality of pipeline units. The plurality of pipeline units includes a unit configured to assign a virtual port from a plurality of virtual ports to a packet received via one of the physical ports, wherein a quantity of the plurality of virtual ports is larger than a quantity of the plurality of physical ports, and wherein, for each of at least some of the physical ports, multiple virtual ports correspond to one physical port. The plurality of pipeline units also includes one or more units configured to assign a virtual domain from a plurality of virtual domains to the packet based on the assigned virtual port, and one or more downstream units configured to process the packet based on one or more of the assigned virtual port, the assigned virtual domain, and a field of a header of the packet. The one or more downstream units configured to process the packet include one or more forwarding engines to determine zero, one, or more target virtual ports to which the packet is to be forwarded, and one or more units configured to map one or more target virtual ports to which the packet is to be forwarded to one or more physical ports.</p>
<p id="p-0011" num="0010">In still another embodiment, a network device comprises a plurality of physical ports, and a packet processing pipeline coupled to the plurality of physical ports. The packet processing pipeline is configured to assign a virtual port from a plurality of virtual ports to a packet received via one of the physical ports, wherein a quantity of the plurality of virtual ports is larger than a quantity of the plurality of physical ports, and wherein, for each of at least some of the physical ports, multiple virtual ports correspond to one physical port. The packet processing pipeline is additionally configured to assign a virtual domain from a plurality of virtual domains to the packet based on the assigned virtual port, wherein the virtual domain corresponds to a subset of the plurality of virtual ports. Also, the packet processing pipeline is configured to determine an indicator of a set of virtual ports or a set of physical ports to which the packet is to be forwarded based on the assigned virtual domain, and determine whether the indicator corresponds to virtual ports or to physical ports. The packet processing pipeline is configured to duplicate, at a first pipeline unit in the packet processing pipeline, the packet to the set of virtual ports if the indicator corresponds to virtual ports, and map the set of virtual ports to one or more physical ports if the indicator corresponds to virtual ports. Further, the packet processing pipeline is configured to duplicate, at a second pipeline unit in the packet processing pipeline, the packet to the set of physical ports if the indicator corresponds to physical ports, and transmit the packet via one or more physical ports.</p>
<p id="p-0012" num="0011">In yet another embodiment, a packet processing method includes receiving a packet via a source physical port from a plurality of physical ports, and assigning a virtual port from a plurality of virtual ports to a packet received via one of the physical ports, wherein a quantity of the plurality of virtual ports is larger than a quantity of the plurality of physical ports, and wherein, for each of at least some of the physical ports, multiple virtual ports correspond to one physical port. Additionally, the method includes assigning a virtual domain from a plurality of virtual domains to the packet based on the assigned virtual port, wherein the virtual domain corresponds to a subset of the plurality of virtual ports, and determining an indicator of a set of virtual ports or a set of physical ports to which the packet is to be forwarded based on the assigned virtual domain. The method also includes determining whether the indicator corresponds to virtual ports or to physical ports, and duplicating, at a first pipeline unit in a packet processing pipeline, the packet to the set of virtual ports if the indicator corresponds to virtual ports; mapping the set of virtual ports to one or more physical ports if the indicator corresponds to virtual ports. Further, the method includes duplicating, at a second pipeline unit in the packet processing pipeline, the packet to the set of physical ports if the indicator corresponds to physical ports, and transmitting the packet via one or more physical ports.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0005" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. 1</figref> is a functional diagram of an example network device, in accordance with an embodiment of the disclosure;</p>
<p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. 2</figref> is a block diagram of a network that utilizes the network device of <figref idref="DRAWINGS">FIG. 1</figref>, according to an embodiment;</p>
<p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. 3</figref> is a diagram of an example network device, in accordance with another embodiment of the disclosure;</p>
<p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. 4</figref> is a flow diagram of an example method for processing a packet in a packet processing pipeline of a switch, in accordance with an embodiment of the disclosure;</p>
<p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. 5</figref> is a flow diagram of an example method of assigning an eport to a packet, in accordance with an embodiment of the disclosure;</p>
<p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. 6</figref> is a flow diagram of an example method of assigning attributes to a packet based on an eport, in accordance with an embodiment of the disclosure;</p>
<p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. 7</figref> is a flow diagram of an example method of mapping an eport to a physical interface, in accordance with an embodiment of the disclosure; and</p>
<p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. 8</figref> is a block diagram of an example method of performing Layer-2 duplication of a packet, in accordance with an embodiment of the disclosure; and</p>
<p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. 9</figref> is a block diagram of another network that utilizes the network device of <figref idref="DRAWINGS">FIG. 1</figref>, according to an embodiment.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0006" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. 1</figref> is a functional diagram of an example network device <b>10</b> configured for processing and forwarding data units, i.e., packets, according to an embodiment. In some embodiments and/or implementations, the network device <b>10</b> operates as a provider edge (PE) device, and the network device <b>10</b> is sometimes referred to herein as &#x201c;the PE device <b>10</b>&#x201d;. The network device includes a plurality of physical ports <b>12</b> and a packet processor <b>14</b>. The packet processor <b>14</b> processes packets ingressing via physical ports <b>12</b>, including making forwarding decisions (i.e., for egress via physical ports <b>12</b>), determining whether a packet should be trapped or mirrored to another processor (not shown) for further analysis, determining whether a packet should be discarded, etc.</p>
<p id="p-0023" num="0022">The network device <b>10</b> includes a number M of physical ports <b>12</b>, and is configured to utilize up to a number N of extended ports <b>16</b> (eports), where N&#x3e;M. In an embodiment, eports are not physical entities, but merely logical assignments. Thus, eports are sometimes referred to herein as &#x201c;virtual ports.&#x201d;</p>
<p id="p-0024" num="0023">The network device <b>10</b> is configured so that some physical ports <b>12</b> correspond to one and only one eport <b>16</b>, whereas each of other physical ports <b>12</b> corresponds to more than one eport <b>16</b>, in an embodiment. For example, the line <b>18</b> indicates that physical port <b>12</b>-<b>1</b> corresponds to eport <b>16</b>-<b>1</b>, whereas the line <b>20</b> indicates that the physical port <b>12</b>-<b>2</b> corresponds to a group <b>22</b> of eports <b>16</b>. Similarly, the line <b>24</b> indicates that physical port <b>12</b>-<b>3</b> corresponds to eport <b>16</b>-<b>2</b>, whereas the line <b>26</b> indicates that the physical port <b>12</b>-<b>4</b> corresponds to a group <b>28</b> of eports <b>16</b>.</p>
<p id="p-0025" num="0024">A mapper <b>32</b> corresponds physical ports <b>12</b> with eports <b>16</b>. For instance, the mapper maps physical ports <b>12</b> to eports <b>16</b>, and vice versa. For example, as illustrated in <figref idref="DRAWINGS">FIG. 1</figref>, the mapper <b>32</b> maps the physical port <b>12</b>-<b>1</b> to eport <b>16</b>-<b>1</b>, and vice versa. Similarly, the mapper <b>32</b> maps the physical port <b>12</b>-<b>2</b> to the group <b>22</b> of eports <b>16</b>, and vice versa. Also as illustrated in <figref idref="DRAWINGS">FIG. 1</figref>, the mapper <b>32</b> maps the physical port <b>12</b>-<b>3</b> to eport <b>16</b>-<b>2</b>, and vice versa. Similarly, the mapper <b>32</b> maps the physical port <b>12</b>-<b>4</b> to the group <b>28</b> of eports <b>16</b>, and vice versa.</p>
<p id="p-0026" num="0025">The mapper <b>32</b> assigns eports <b>16</b> to ingressing packets. Thus, for example, the mapper <b>32</b> assigns traffic ingressing on the single physical port <b>12</b>-<b>2</b> to different eports <b>16</b> in the group <b>22</b>. In an embodiment, the mapper <b>32</b> utilizes information in a packet for determining the eport <b>16</b> to which a packet should be assigned, such as header information including tunnel encapsulation information, virtual local area network (VLAN) identifiers, quality of service (QoS) indicators, etc. For instance, the mapper <b>32</b> assigns traffic ingressing on the same physical port <b>12</b>-<b>2</b> but corresponding to different tunnel interfaces to different eports <b>16</b> in the group <b>22</b>. As another example, the mapper <b>32</b> assigns traffic ingressing on the same physical port <b>12</b>-<b>2</b> but having different QoS requirements to different eports <b>16</b> in the group <b>22</b>. In an embodiment, the mapper <b>32</b> is configured to assign an eport <b>16</b> to an ingressing packet by including an indication of the eport <b>16</b> in a packet descriptor associated with the packet. In an embodiment, the mapper <b>32</b> includes a source eport identifier to the ingressing packet to indicate the eport <b>16</b> assigned to the ingressing packet.</p>
<p id="p-0027" num="0026">Similarly, the mapper <b>32</b> assigns physical ports <b>12</b> to traffic egressing via eports <b>16</b>. For instance, the mapper <b>32</b> assigns traffic egressing via the group <b>28</b> of eports <b>16</b> to the same physical port <b>12</b>-<b>4</b>. As another example, the mapper <b>32</b> assigns traffic egressing via eport <b>16</b>-<b>2</b> to the physical port <b>12</b>-<b>3</b>. In an embodiment, the mapper <b>32</b> is configured to assign a physical port <b>12</b> to an egressing packet by including an indication of the physical port <b>12</b> in a packet descriptor associated with the packet. In an embodiment, the mapper <b>32</b> includes an egress physical port identifier in the packet descriptor corresponding to the egressing packet to indicate the physical port <b>12</b> assigned to the egressing packet. In another embodiment, the mapper <b>32</b> directs an egressing packet to a transmit queue memory associated with the physical port <b>12</b> assigned to the egressing packet. In an embodiment, such a transmit queue memory stores packets to be transmitted via the associated physical port <b>12</b>.</p>
<p id="p-0028" num="0027">Ingressing packets that have been assigned source eports (indicated by the arrow <b>40</b>) are processed by the packet processor <b>14</b>. In an embodiment, the packet processor <b>14</b> generally determines to which eport or eports <b>16</b> (egress eports) an ingressing packet <b>40</b> should be forwarded, and then assigns the determined egress eport or eports <b>16</b> to the packet. More generally, the packet processor <b>14</b> performs a packet forwarding and/or bridging functionality and determines to which eport/s the packet should be forwarded. In an embodiment, the packet processor <b>14</b> includes in the packet descriptor an egress eport identifier or an indicator of a set of egress eports <b>16</b> to indicate the egress eport(s) <b>16</b> assigned to the packet. Egressing packets that have been assigned egress eports (indicated by the arrow <b>44</b>) are then mapped to physical ports <b>12</b> by the mapper <b>32</b>.</p>
<p id="p-0029" num="0028">In an embodiment, the network device <b>10</b> is configured to associate packets with virtual domains (also referred to herein as &#x201c;extended virtual local area networks&#x201d; or &#x201c;eVLANs&#x201d;). An eVLAN is similar to a typical VLAN, but corresponds to eports rather than physical ports. In an embodiment, the network device <b>10</b> is configured to handle a greater number of eVLANs than the maximum number of VLANs capable of being represented by a 12-bit VLAN identifier specified in the Institute for Electrical and Electronics Engineers (IEEE) 802.11Q Standard.</p>
<p id="p-0030" num="0029">In an embodiment, an eVLAN corresponds to a group of eports <b>16</b>. For example, the group <b>22</b> of eports <b>16</b> is an eVLAN, in an embodiment. Similarly, the group <b>28</b> of eports <b>16</b> is another eVLAN. In <figref idref="DRAWINGS">FIG. 1</figref>, example eVLANs are indicated by boxes with dashed lines. An eVLAN can include eports corresponding to other eVLANs. For instance, <figref idref="DRAWINGS">FIG. 1</figref> illustrates an eVLAN <b>50</b> including a plurality of eVLANs such as the eVLAN <b>28</b>, an eVLAN <b>52</b>, and an eVLAN <b>54</b>. Additionally, an eVLAN can include a subset of eports of another eVLAN. For example, <figref idref="DRAWINGS">FIG. 1</figref> illustrates the eVLAN <b>54</b> including a subset of the eports <b>16</b> of the eVLAN <b>52</b>.</p>
<p id="p-0031" num="0030">An eVLAN assignment unit <b>60</b> assigns eVLANs to packets. For example, the eVLAN assignment unit <b>60</b> assigns an eVLAN to an ingressing packet <b>40</b> based on one or more of the source eport <b>16</b> assigned to the packet <b>40</b> by the mapper <b>32</b>, information in a header of the packet <b>40</b>, etc., in some scenarios. As another example, the eVLAN assignment unit <b>60</b> assigns an eVLAN to an egressing packet <b>44</b> based on one or more of the egress eport <b>16</b> assigned to the packet <b>44</b> by the packet processor, information in a header of the packet <b>44</b>, etc., in some scenarios. In an embodiment, the eVLAN assignment unit <b>60</b> assigns an eVLAN to a packet by including an eVLAN indicator in the packet descriptor corresponding to the packet.</p>
<p id="p-0032" num="0031">An attribute assignment unit <b>66</b> assigns one or more attributes to a packet based on an eport assigned to the packet and/or an eVLAN assigned to the packet. Attributes are utilized by the packet processor <b>14</b> in processing the packet, and the attributes indicate how a packet should be processed by the packet processor <b>14</b>. Examples of attributes assigned by the attribute assignment unit <b>66</b> include 1) whether a packet is to be forwarded; 2) whether a packet is to be trapped, mirrored, etc.; 3) whether the media access control (MAC) source address/ingress eport are to be learned; 4) whether a spanning tree protocol is to be implemented; 5) an action to be taken when a source address of the packet is unknown to the network device <b>10</b>; 6) whether Layer-3 multicast and/or broadcast mirroring is enabled for the packet; 7) whether and what type of metering should be performed (e.g., dropping a packet due to congestion or when a rate of packets in a particular flow exceeds a threshold); 8) whether and what type of measurements should be made (e.g., incrementing a counter corresponding to a particular flow, counting bytes in the packet, etc.); 9) whether and how sampling should be performed; 10) whether time stamps should be applied; etc., according to various embodiments.</p>
<p id="p-0033" num="0032">Although in <figref idref="DRAWINGS">FIG. 1</figref> the mapper <b>32</b>, the eVLAN assignment unit <b>60</b>, and the attribute assignment unit <b>66</b> are illustrated as being external to the packet processor <b>14</b> for the purpose of clarity, in some embodiments, one or more of the mapper <b>32</b>, the eVLAN assignment unit <b>60</b>, and the attribute assignment unit <b>66</b> are elements of the packet processor <b>14</b>. Additionally, in some embodiments, each of one or more of the mapper <b>32</b>, the eVLAN assignment unit <b>60</b>, and the attribute assignment unit <b>66</b> are distributed units that assign data to a packet at different stages of processing of the packet. For example, in one embodiment, the packet processor <b>14</b> includes a processing pipeline, and each of one or more of the mapper <b>32</b>, the eVLAN assignment unit <b>60</b>, and the attribute assignment unit <b>66</b> are distributed over different stages of the processing pipeline and assign data to packets at the different stages of the pipeline.</p>
<p id="p-0034" num="0033">To illustrate operation of the network device <b>10</b>, an example scenario is described with reference to <figref idref="DRAWINGS">FIG. 2</figref>. <figref idref="DRAWINGS">FIG. 2</figref> is a block diagram of an example network <b>70</b>, according to an embodiment, that utilizes the network device <b>10</b>. In the embodiment of <figref idref="DRAWINGS">FIG. 2</figref>, the network device <b>10</b> is or is a component of a provider edge device (PE). The network <b>70</b> includes a multi-protocol label switching (MPLS) core network <b>72</b> having other PE's <b>74</b>. The PE <b>10</b> and the PE's <b>74</b> are linked via a virtual private LAN service (VPLS) <b>75</b>. The PE <b>10</b> is communicatively coupled to a plurality of customer networks <b>76</b> via a multi-tenant unit switch (MTU) <b>78</b>.</p>
<p id="p-0035" num="0034">In the example scenario illustrated in <figref idref="DRAWINGS">FIG. 2</figref>, the PE <b>10</b> receives a packet <b>80</b> via the MPLS core <b>72</b>. The mapper <b>32</b> assigns to the packet <b>80</b> an eport <b>16</b> (not shown in <figref idref="DRAWINGS">FIG. 2</figref>) corresponding to the MPLS core <b>72</b>. The eVLAN assignment unit <b>60</b> assigns the eVLAN <b>28</b> (i.e., the group <b>28</b> of eports <b>16</b> illustrated in <figref idref="DRAWINGS">FIG. 1</figref>) to the packet <b>80</b>. The eVLAN <b>28</b> includes eports <b>16</b>A, <b>16</b>B, and <b>16</b>C that correspond to customer networks <b>76</b>A, <b>76</b>B, and <b>76</b>C, respectively, and also includes the eport corresponding to the MPLS core <b>72</b>.</p>
<p id="p-0036" num="0035">In the example scenario of <figref idref="DRAWINGS">FIG. 2</figref>, the packet processor <b>14</b> does not recognize a destination address (DA) of the packet <b>10</b> and thus decides that the packet <b>80</b> should be flooded to the eVLAN <b>28</b>. The packet processor <b>14</b> duplicates the packet <b>80</b> for eports <b>16</b>A, <b>16</b>B, and <b>16</b>C, but filters the eport corresponding to the MPLS core <b>72</b> so that the packet <b>80</b> is not transmitted back into the MPLS core <b>72</b>.</p>
<p id="p-0037" num="0036">The attribute assignment unit <b>66</b> assigns different attributes to the packet copies corresponding to the eports <b>16</b>A, <b>16</b>B, and <b>16</b>C. For example, the attribute assignment unit <b>66</b> assigns attributes to the packet copy for eport <b>16</b>A that indicate the packet is to be tunneled encapsulated in an MPLS pseudo wire (PW) label <b>1</b>, with a PW emulation edge-to-edge (PWE3) control word, to generate a packet <b>84</b>A. As another example, the attribute assignment unit <b>66</b> assigns attributes to the packet copy for eport <b>16</b>B that indicate i) two VLAN tags should be removed from the packet; ii) anew VLAN tag should be added to the packet; and iii) the packet is to be tunneled encapsulated in an MPLS PW label <b>2</b>, to generate a packet <b>84</b>B. As yet another example, the attribute assignment unit <b>66</b> assigns attributes to the packet copy for eport <b>16</b>C that indicate i) an additional VLAN tag should be added to the packet; ii) the packet is to be tunneled encapsulated in an MPLS PW label <b>3</b>, to generate a packet <b>84</b>C. The packet processor <b>14</b> utilizes the assigned attributes to appropriately process the packet copies and to generate the packets <b>84</b>A, <b>84</b>B, and <b>84</b>C.</p>
<p id="p-0038" num="0037">The mapper <b>32</b> maps each of the eports <b>16</b>A, <b>168</b>, and <b>16</b>C to a single physical port <b>12</b>-<b>4</b>. Thus, three different packets <b>84</b>A, <b>84</b>B, and <b>84</b>C (all corresponding to the received packet <b>80</b>) are sent to the MTU <b>78</b> via the single physical port <b>12</b>-<b>4</b>.</p>
<p id="p-0039" num="0038"><figref idref="DRAWINGS">FIG. 3</figref> is a block diagram of an example network device <b>100</b> configured for processing and forwarding data units, i.e., packets, according to an embodiment. The network device <b>100</b> is one example implementation of the network device <b>10</b> of <figref idref="DRAWINGS">FIG. 1</figref>. The network device <b>100</b> is configured to utilize eports and eVLANs when processing and forwarding packets. The network device <b>100</b> is configured to handle a greater number of eports than the number of physical ports of the network device <b>100</b>. In some embodiments and scenarios, traffic ingressing on a single physical port is assigned to different eports. For instance, traffic corresponding to different tunnel interfaces but ingressing on the same physical port is assigned to different eports. Referring to <figref idref="DRAWINGS">FIG. 2</figref>, for example, traffic received from the MTU via the single physical port <b>12</b>-<b>4</b> includes packets from three different customer networks <b>76</b>, and packets corresponding to the different customer networks <b>76</b> are tunnel encapsulated differently, in one example scenario. As another example, traffic corresponding to different quality of service (QoS) requirements but ingressing on the same physical port is assigned to different eports.</p>
<p id="p-0040" num="0039">The network device <b>100</b> is configured to handle a greater number of eVLANs than the number of VLANs that correspond to a 12-bit VLAN identifier specified in the Institute for Electrical and Electronics Engineers (IEEE) 802.11Q Standard.</p>
<p id="p-0041" num="0040">In one embodiment, the network device <b>100</b> is utilized in a switch system (not shown) comprising a plurality of interconnected switches. In this embodiment, the network device <b>100</b> is coupled to other switches in the switch system via some of the physical ports <b>108</b>, <b>116</b>. The network device <b>100</b> includes a packet processing pipeline <b>102</b> coupled to one or more ingress physical ports <b>108</b> and to one or more egress physical ports <b>116</b>. The packet processing pipeline includes an ingress portion <b>104</b> coupled to an egress portion <b>112</b>, in an embodiment.</p>
<p id="p-0042" num="0041">In one embodiment, a plurality of switches, including the network device <b>100</b>, are implemented on a plurality of respective integrated circuits (ICs). In some other embodiments, the network device <b>100</b> and one or more other switches in the plurality of switches are implemented on a single IC. In one such embodiment, the network device <b>100</b> is coupled to one or more other switches in the plurality of switches via one or more corresponding cascade ports.</p>
<p id="p-0043" num="0042">The ingress physical ports <b>108</b> and the egress physical ports <b>116</b> are coupled to a plurality of different networks and to other switches in the switching system, in some embodiments. For example, the ingress physical ports <b>108</b> and the egress physical ports <b>116</b> are coupled to a provider network, to one or more customer networks, and/or to one or more other switches in the switching system, in various embodiments. For purposes of clarity, only one ingress physical port and one egress physical port are seen. In an embodiment the packet processing pipeline is coupled to, and configured to forward packets among, a plurality of physical ports.</p>
<p id="p-0044" num="0043">In one embodiment, the ingress physical ports <b>108</b> and the egress physical ports <b>116</b> provide multiple 2-way, point-to-point communication links to other devices, such as bridges, other switches in the switching system, endpoints, etc.</p>
<p id="p-0045" num="0044">The packet processing pipeline <b>102</b> generally transfers packets of data from the ingress physical ports <b>108</b> to appropriate egress physical ports <b>116</b>, in an embodiment. In some embodiments, at least some physical ports are input/output ports, and at least some ingress physical ports <b>108</b> and egress physical ports <b>116</b> correspond to the same physical ports.</p>
<p id="p-0046" num="0045">As seen in <figref idref="DRAWINGS">FIG. 3</figref>, the ingress portion <b>104</b> and the egress portion <b>112</b> each include a plurality of processing units coupled in series. Generally, each unit of a pipeline optionally processes a packet or a packet descriptor corresponding to the packet and then passes the packet or the packet descriptor to the next unit in the pipeline. A packet descriptor includes some information from the packet, such as some or all of the header information of the packet, in an embodiment. In some embodiments, the packet descriptor includes other information as well such as an indicator of where the packet is stored in a memory associated with the network device <b>100</b>. For ease of explanation, the term &#x201c;packet&#x201d; hereinafter is used to refer to a packet itself or to a packet descriptor associated with the packet. Each unit in the pipeline <b>102</b> may or may not process a particular packet. For example, in some instances, a unit simply passes a packet onto the next unit in the pipeline <b>102</b>. The last unit of the ingress portion <b>104</b> passes the packet to the first unit of the egress portion <b>212</b> via the fabric interface <b>218</b>, in an embodiment.</p>
<p id="p-0047" num="0046">Each or at least some of the units of the ingress portion <b>104</b> and the egress portion <b>112</b> includes, or otherwise is associated with, a corresponding memory, in an embodiment. A packet received by a unit is stored in the memory associated with the unit, in an embodiment.</p>
<p id="p-0048" num="0047">According to an embodiment, the ingress portion <b>104</b> assigns an eport to an ingressing packet. At least in some scenarios, the ingress portion <b>104</b> also assigns an eVLAN to the ingressing packet. The ingress portion <b>104</b> also assigns attributes to the packet based on the eport and/or the eVLAN. In some embodiments and scenarios, the eport and/or the eVLAN are reassigned as the packet is processed by the ingress portion <b>104</b>. In some embodiments and scenarios, the egress portion <b>112</b> also assigns attributes to the packet based on the eport and/or the eVLAN. The assigned attributes are utilized by units of the pipeline <b>102</b> to determine how the packet is to be processed, for example. For example, determining whether to forward, trap, or mirror a packet is based on an attribute assigned based on an eport and/or an eVLAN (i.e., based on an eport, where the number of eports exceeds the number of physical ports of the network device <b>100</b>; and/or based on an eVLAN, indicative of a group of eports, where the number of possible eVLANs exceeds the maximum number of VLANs capable of being represented by a 12-bit VLAN identifier specified in the Institute for Electrical and Electronics Engineers (IEEE) 802.11Q Standard), in an embodiment. As another example, a source address of a packet is learned or learning of the source address is disabled based on an attribute assigned based on an eport and/or an eVLAN, in an embodiment.</p>
<p id="p-0049" num="0048">The packet processing pipeline <b>102</b> includes a mapping unit <b>117</b> at least partially distributed amongst a plurality of processing units, in an embodiment. The mapping unit <b>117</b> generally maps physical ports to eports, and vice versa, and operates similarly to the mapping unit <b>32</b> discussed with reference to <figref idref="DRAWINGS">FIG. 1</figref>. The packet processing pipeline <b>102</b> also includes an eVLAN assignment unit <b>118</b> at least partially distributed amongst a plurality of processing units, in an embodiment. In other embodiments, the eVLAN assignment unit <b>118</b> is not distributed amongst a plurality of processing units, but rather is implemented in a single processing unit. The eVLAN assignment unit <b>118</b> generally assigns a packet to an eVLAN, and operates similarly to the eVLAN assignment unit <b>60</b> discussed with reference to <figref idref="DRAWINGS">FIG. 1</figref>. Additionally, the packet processing pipeline <b>102</b> includes an attribute assignment unit <b>119</b> at least partially distributed amongst a plurality of processing units, in an embodiment. In other embodiments, the attribute assignment unit <b>119</b> is not distributed amongst a plurality of processing units, but rather is implemented in a single processing unit. The attribute assignment unit <b>119</b> generally assigns attributes to packets based on an eport and/or eVLAN assigned to a packet, wherein the attribute indicates how the packet should be processed by the packet processing pipeline <b>102</b>. The attribute assignment unit <b>119</b> operates similarly to the attribute assignment <b>66</b> discussed with reference to <figref idref="DRAWINGS">FIG. 1</figref>.</p>
<p id="p-0050" num="0049">In the example of <figref idref="DRAWINGS">FIG. 3</figref>, the ingress portion <b>104</b> includes a port media access control (MAC) receiver unit <b>120</b> coupled to the ingress physical ports <b>108</b>. The port MAC receiver unit <b>120</b> generally implements media access control functions. The port MAC receiver unit <b>120</b> also generally interfaces the ingress portion <b>104</b> with a particular physical ingress port of the network device <b>100</b> (i.e., if the network device <b>100</b> includes a plurality of physical ingress ports, the network device <b>100</b> includes a plurality of respective port MAC receiver units <b>120</b>). In another embodiment, one port MAC receiver unit <b>120</b> interfaces the ingress portion <b>104</b> with a plurality of physical ingress ports (not shown for purposes of clarity) of the network device <b>100</b>.</p>
<p id="p-0051" num="0050">A header decode unit <b>122</b> is coupled to the port MAC receiver unit <b>120</b> and generally decodes the header of each packet received via the ingress physical ports <b>108</b>. This may include parsing or identifying different segments of the header for use by subsequent units in the ingress pipeline <b>104</b> and, optionally, units in the egress pipeline <b>112</b>. In one embodiment in which the network device <b>100</b> is one of a plurality of switches in a switching system, at least some packets may include a distributed switching architecture (DSA) tag in a header of the packet. The DSA tag includes information used by the switching system to forward the packet through the switching system. The DSA tag is included in a header of the packet by a source switch device in the switching system, and is removed from the packet by a target switch device in the switching system before or as the packet egresses the switching system. In one embodiment, the DSA tag includes indications of one or more of i) a source device (i.e., a source switch device in the switching system), ii) a target device (i.e., a target switch device in the switching system), iii) a physical source port, iv) a physical target port, etc. In one embodiment, the DSA tag additionally or alternatively includes indications of one or more of i) a source eport, ii) a target eport, iii) an eVLAN, iv) an index indicating a list of eports and/or v) an index indicating a list of physical ports to which the packet should be replicated (referred to herein as eVIDX and VIDX, respectively), etc. As will be described in more detail below, when a packet is to be broadcast, multicast, flooded, etc., for example, a replication unit of the network device <b>100</b> utilizes the VIDX to determine how many copies of a packet to create, and to determine the physical ports to which the copies should be passed. Similarly, when a packet is to be broadcast, multicast, flooded, etc., for example, a replication unit of the network device <b>100</b> utilizes the eVIDX to determine how many copies of a packet to create, and to determine the eports to which the copies should be passed.</p>
<p id="p-0052" num="0051">In an embodiment, VIDX is an index to a VIDX table that indicates physical ports to which the packet is to be duplicated. In one embodiment, each entry in the VIDX table includes a pointer to a list of physical ports to which the packet is to be duplicated. Similarly, in an embodiment, eVIDX is an index to a duplication table that indicates eports to which the packet is to be duplicated. In one embodiment, each entry in the duplication table includes a pointer to a list of eports to which the packet is to be duplicated. In another embodiment, eVIDX is either an index to the VIDX table or an index to the duplication table depending on the value of eVIDX, as will be described in more detail subsequently.</p>
<p id="p-0053" num="0052">In some embodiments, the use of eVIDX and VIDX is combined. For example, in one embodiment, an eport entry in the eVIDX duplication table indicates a VIDX. In another embodiment, an eport corresponding to an entry in the eVIDX duplication table is mapped to a VIDX. In both of these embodiments, the packet is duplicated both to eports indicated by the eVIDX and physical ports indicated by the VIDX.</p>
<p id="p-0054" num="0053">A MAC2ME &#x26; TTI classification unit <b>124</b> is coupled to the header decode unit <b>122</b>. The MAC2ME &#x26; TTI classification unit <b>124</b> generally performs several functions. First, the MAC2ME &#x26; TTI classification unit <b>124</b> assigns a source eport to each packet. In an embodiment, assigning a source eport comprises including a source eport indicator in a packet descriptor for the packet. In some embodiments, the MAC2ME &#x26; TTI classification unit <b>124</b> reassigns a different source eport to the packet in some circumstances. Assignment and reassignment of source eports will be described in more detail below. In one embodiment, an eport is a 20-bit value that indicates a physical port or a virtual port. In other embodiments, the eport is represented by a different suitable number of bits. In one embodiment in which the network device <b>100</b> is one of a plurality of switches in a switching system, the eport is unique to the network device <b>100</b> but is not unique with respect to other switches in the system. In some embodiments and scenarios, one or more eports are unique with respect one or more other switches in the system.</p>
<p id="p-0055" num="0054">Second, the MAC2ME &#x26; TTI classification unit <b>124</b> assigns an eVLAN to at least some packets. In an embodiment, assigning an eVLAN comprises including an eVLAN indicator in the packet descriptor for the packet. In at least some instances when the packet already includes a VLAN identifier (VID), such as an IEEE 802.1Q VID, assigning the eVLAN is based on the VID in the packet. In some instances, the MAC2ME &#x26; TTI classification unit <b>124</b> assigns the eVLAN when the packet does not include a VID. In an embodiment and in some situations, assigning the eVLAN is based on a MAC source address in a packet header and, optionally, other information. Assignment of eVLANs will be described in more detail below. In one embodiment, the eVLAN is a 16-bit value.</p>
<p id="p-0056" num="0055">In other embodiments, the eVLAN is represented by a different suitable number of bits.</p>
<p id="p-0057" num="0056">Assignment of the eVLAN is based on one or more factors. For example, if the packet includes a DSA tag having a VID, assignment of the eVLAN is based on the VID in the DSA tag, in an embodiment. In some embodiments, assignment of the eVLAN is based on the source physical port and/or the source eport. If the packet includes a VID (e.g., an IEEE 802.1Q VID), assignment of the eVLAN is based on the VID, in an embodiment and at least in some circumstances. In an embodiment, even if the packet includes a VID (e.g., an IEEE 802.1Q VID), assignment of the eVLAN is not based on the VID, at least in some circumstances. In some embodiments, assignment of the eVLAN is based on a tunneling interface.</p>
<p id="p-0058" num="0057">Third, the MAC2ME &#x26; TTI classification unit <b>124</b> generally performs two lookup functions. In a first lookup function (a MAC2ME lookup), packets that are destined to a MAC address, VLAN pair recognized by the network device <b>100</b> are identified. This identification may be used in one or more subsequent functions or pipeline units. A second lookup function (a tunnel termination and interface assignment (TTI) lookup) is used for tunnel termination identification and interface assignment, reassigning the eport (as discussed above), and/or assigning the eVLAN (as discussed above) according to L2 or L3 header fields.</p>
<p id="p-0059" num="0058">In an embodiment, the TTI lookup includes using fields of the header of the packet being processed and other information (such as the result of the MAC2ME lookup) as a lookup key to retrieve data from one or more tables. The table data includes indications of actions to be taken, in an embodiment. In some situations, the TTI lookup indicates that the packet is associated with one or more TTI actions, such as reassigning the eport, assigning the eVLAN, assigning quality of service (QoS) parameters, assigning an egress eport, etc., to the packet, in an embodiment.</p>
<p id="p-0060" num="0059">In one embodiment, the MAC2ME &#x26; TTI classification unit <b>124</b> includes a TRILL engine <b>126</b> configured to operate according to the Transparent Interconnect of Lots of Links (TRILL) protocol set forth in the Request for Comments (RFC) 556 from the Internet Engineering Task Force (IETF), dated May 2009. In one embodiment and in some situations, the TRILL engine <b>126</b> reassigns a different eport to the packet.</p>
<p id="p-0061" num="0060">The MAC2ME &#x26; TTI classification unit <b>124</b> utilizes one or more tables, databases, and/or other data library maintained in one or more memory components (such as a TCAM). The one or more tables, databases, etc., are consulted to identify a table entry or database record that matches, or closely approximates, the format and structure of the ingressed packet, in an embodiment. The identified table entry or database record includes an index that is employed to retrieve an action entry from a separate memory, such as a static random access memory (SRAM), in an embodiment; additionally, instructions are retrieved regarding how to process the packet in accordance with such information. In other embodiments, separate memories as discussed above are not utilized. Rather, a single table is accessed to retrieve necessary or desired information regarding a packet based upon some or all of the information described above with reference to constructing keys. In another embodiment, the data library and separate memory discussed above are integrated into a single block (such as a table) having different logical memory areas in some implementations.</p>
<p id="p-0062" num="0061">As discussed above, the MAC2ME &#x26; TTI classification unit <b>124</b> assigns an egress eport to at least some packets in response to a TTI lookup in an embodiment. On the other hand, in some embodiments, the MAC2ME &#x26; TTI classification unit <b>124</b> does not assign an egress eport to at least some packets in response to the TTI lookup. In an embodiment, assigning an egress eport comprises including an egress eport identifier in the packet descriptor for the packet. In one embodiment, the MAC2ME &#x26; TTI classification unit <b>124</b> assigns an eVIDX to at least some packets in response to a TTI lookup in an embodiment. On the other hand, in some embodiments, the MAC2ME &#x26; TTI classification unit <b>124</b> does not assign an eVIDX to at least some packets. In an embodiment, assigning an eVIDX comprises including an eVIDX identifier in the packet descriptor for the packet.</p>
<p id="p-0063" num="0062">The MAC2ME &#x26; TTI classification unit <b>124</b> includes a portion of the mapping unit <b>117</b>, and the mapping unit <b>117</b> implements assignment of the source eport, in an embodiment. Also, the MAC2ME &#x26; TTI classification unit <b>124</b> includes a portion of the eVLAN assignment unit <b>118</b>, and the eVLAN assignment unit <b>118</b> implements assignment and reassignment of the eVLAN, in an embodiment. Additionally, the MAC2ME &#x26; TTI classification unit <b>124</b> includes a portion of the attribute assignment unit <b>119</b>, and the attribute assignment unit <b>119</b> implements assignment of attributes based on the eport and/or the eVLAN, in an embodiment.</p>
<p id="p-0064" num="0063">An ingress policy engine <b>128</b> is coupled to the MAC2ME &#x26; TTI classification unit <b>124</b>. The ingress policy engine <b>128</b> generally performs flow classification. A flow corresponds to related series of packets, and may be defined in a variety of different ways. One example of a flow is defined by a MAC source address or a particular MAC destination address in a medium access control (MAC) header. In other words, in one example, all packets having a particular MAC source address correspond to a particular flow. Another example of a flow is defined by a MAC source address/destination address pair. In other words, in one example, all packets having both a particular MAC source address and a MAC destination address correspond to a particular flow. Additionally, fields from different protocol layers may be combined to define a flow, in some embodiments. For example, the ingress policy engine <b>128</b> attaches or otherwise associates a flow identifier (ID) to/with a packet to indicate a flow to which the packet belongs, in an embodiment. In at least some scenarios and implementations, the flow ID is removed from the packet before or upon egress from the network device <b>100</b>. For example, if the network device <b>100</b> is a component of a switching system including other similar network devices (not shown), and if the packet is exiting the switching system, the flow ID is removed from the packet before or upon egress from the network device <b>100</b>, in an embodiment. On the other hand, if the network device <b>100</b> is a component of a switching system including other similar network devices (not shown), and if the packet is being forwarded to another network device in the switching system, the flow ID is included in a DSA tag of the packet before or upon egress from the network device <b>100</b>, in an embodiment. In some instances, the ingress policy engine <b>128</b> assigns an eVLAN to a packet, according to an embodiment.</p>
<p id="p-0065" num="0064">In an embodiment, the ingress policy engine <b>128</b> includes, or is coupled to, a TCAM or other suitable memory. The ingress policy engine <b>128</b> generally uses fields of the header of the packet being processed, and other information such as the source eport, as a key to the TCAM. An entry in the TCAM indicates a particular rule or set of one or more actions to be performed (with regard to flow measurement, eVLAN assignment, egress eport assignment, etc., for example). In some scenarios, at least some of the actions to be performed are to be performed by processing units downstream from the ingress policy engine <b>128</b>. Thus, in some scenarios, the ingress policy engine <b>128</b> assigns attributes to the packet to indicate to downstream processing units how the packet is to be processed. In an embodiment, assigning an attribute comprises including an attribute indicator in the packet descriptor for the packet. The ingress policy engine <b>128</b> also includes, or is coupled to, one or more other memories, such as an SRAM or other suitable memory, in an embodiment. In this embodiment, an entry in the TCAM <b>128</b> indirectly indicates a rule or set of one or more actions to be performed, and determining a rule or action to be performed utilizes the one or more additional memory components such as the SRAM. For example, an entry in the TCAM may point or otherwise correspond to a particular location in the SRAM that includes information that in turn indicates a particular rule or set of one or more actions to be performed. The ingress policy engine <b>128</b> utilizes the result of the MAC2ME lookup of the MAC2ME and TTI classification unit <b>124</b>, in an embodiment. For example, the result of the MAC2ME lookup is used as part of the key for the TCAM lookup, in an embodiment.</p>
<p id="p-0066" num="0065">In other embodiments, the ingress policy engine <b>128</b> does not utilize a TCAM. For example, a hashing technique or any other suitable technique for classifying multi-field parameters is utilized in other embodiments. Thus, in some embodiments, the TCAM of the ingress policy engine <b>128</b> is omitted.</p>
<p id="p-0067" num="0066">The ingress policy engine <b>128</b> includes a portion of the eVLAN assignment unit <b>118</b>, and the eVLAN assignment unit <b>118</b> implements assignment and reassignment of the eVLAN, in an embodiment. Additionally, the ingress policy engine <b>128</b> includes a portion of the attribute assignment unit <b>119</b>, and the attribute assignment unit <b>119</b> implements assignment of attributes based on one or more of i) the source eport, ii) the eVLAN, the lookup performed by the ingress policy engine <b>128</b>, etc. in an embodiment.</p>
<p id="p-0068" num="0067">A bridge engine <b>130</b> is coupled to the ingress policy engine <b>128</b>. The bridge engine <b>130</b> includes, or is coupled to, a forwarding database (not shown) that includes MAC destination addresses and indications of the corresponding egress eports to which packets having the MAC destination addresses should be forwarded. In one embodiment, the forwarding database includes a table of MAC destination addresses and indications of the corresponding egress eports. In an embodiment, the forwarding database more generally includes both MAC source addresses and MAC destination addresses, and provides a binding of a MAC address to an eport and other parameters, such as one or more of a flag indicating whether a packet is to be mirrored by the ingress portion <b>104</b> to an ingress analyzer (not shown) for further processing, a flag indicating whether a packet is to be mirrored by the egress portion <b>112</b> to an egress analyzer (not shown) for further processing, user defined bits to be used for user-defined functions, etc. These bindings are used mainly for forwarding decisions, but are for other purposes as well, such as for mirroring packets to an analyzer for further analysis, user defined functions or applications, etc. The bridge engine <b>130</b> performs MAC source address lookups and MAC destination address lookups, in some embodiments and in at least some scenarios.</p>
<p id="p-0069" num="0068">In an embodiment, the bridge engine <b>130</b> generally uses Layer-2 information to determine on which eport or eports a packet should be forwarded. Determination of whether, and to where a packet should be forwarded, is done by examining the MAC destination address of the packet and determining to which network segment the destination address corresponds using the forwarding database, in some instances. Also, other information is utilized as well in other embodiments and/or instances. For example, eVLAN information is utilized in some embodiments and/or instances. For instance, the bridge engine <b>130</b> is capable of determining eport destinations for Layer-2 multicast or broadcast packets using eVLAN information, in some embodiments. The bridge engine <b>130</b> also maintains the forwarding database, in some embodiments. For instance, the bridge engine <b>130</b> learns an eport to which a source MAC address of an ingressing packet corresponds by recording the eport corresponding to the ingressing packet and associating the eport with the source MAC address of the packet, in an embodiment. In another example, the bridge engine <b>130</b> learns an eport to which an eVLAN of an ingressing packet corresponds by recording the eVLAN corresponding to the ingressing packet and associating the eport with the eVLAN of the packet, in an embodiment.</p>
<p id="p-0070" num="0069">In general, the forwarding database correlates several variables useful for making forwarding decisions. The forwarding database comprises entries based upon eVLAN, eport, and MAC address, for instance; lookup operations based upon MAC address and eVLAN are useful in bridging operations, for example. The bridge engine <b>130</b> makes forwarding decisions also using information provided by the MAC2ME &#x26; TTI classification unit <b>124</b>, in an embodiment. Thus, the forwarding database records or table entries include fields associated with one or more of destination MAC address, eport, eVLAN, etc.</p>
<p id="p-0071" num="0070">In an embodiment, when a packet is to be flooded (e.g., when there is not a match in the forwarding database with the destination MAC address), or when the packet is a multicast or broadcast packet, the bridge engine <b>130</b> determines a set of one or more eports to which the packet is to be forwarded. An indicator (referred to herein as &#x201c;eVIDX&#x201d;) of the determined set of one or more eports is included in or attached to a descriptor associated with the packet, or the indicator of the determined set of one or more ports is attached to the packet for use by subsequent units of the pipeline <b>102</b>. In one embodiment, eVIDX is used to index a Layer-2 duplication table, wherein each entry in the Layer-2 duplication table includes a pointer to a linked list of eports. In some embodiments, eVIDX is a 16-bit index. In one embodiment, if eVIDX is less than 4K, the eVIDX is interpreted as an indicator of a physical port list. In this embodiment, if eVIDX is greater than or equal to 4K, the eVIDX is interpreted as an indicator of an eport list.</p>
<p id="p-0072" num="0071">In one embodiment, the bridge engine <b>130</b> maintains the Layer-2 duplication table.</p>
<p id="p-0073" num="0072">The bridge engine <b>130</b> includes a portion of the eVLAN assignment unit <b>118</b>, and the eVLAN assignment unit <b>118</b> implements assignment of an egress eVLAN and/or eVIDX, in an embodiment. Additionally, the bridge engine <b>130</b> includes a portion of the attribute assignment unit <b>119</b>, and the attribute assignment unit <b>119</b> implements assignment of attributes based on one or more of i) the source eport, ii) the eVLAN, the forwarding database lookup performed by the bridge engine <b>130</b>, etc. in an embodiment. Examples of attributes assigned by the bridge engine <b>130</b>, in various embodiments, include enabling trapping to a processor/central processing unit (CPU)/analyzer (not shown) predefined control protocol packets, enabling learning of new addresses, triggering processor/CPU/analyzer (not shown) notification when a new address is learned, indicating an action to be taken when a packet has an unknown or unregistered address, etc</p>
<p id="p-0074" num="0073">A router engine <b>132</b> is coupled to the bridge engine <b>130</b>. If a received packet is not destined for a network to which the network device <b>100</b> is connected, then routing based on an Internet Protocol (IP) address is performed, in some embodiments and/or scenarios. The router engine <b>132</b> includes, or is coupled to, a routing information database (not shown) that includes information corresponding to where IP packets should be forwarded. The router engine <b>132</b> generally determines to where a received IP packet should be routed, which includes determining the egress eports to which the packet should be forwarded. Determining to where a received IP packet should be routed includes examining the IP destination address of the packet and routing information stored in the routing information database. The router engine <b>132</b> also maintains the routing information database. Additionally, the router engine <b>132</b> determines destinations for IP multicast packets, in some embodiments. In one embodiment, the router engine <b>132</b> utilizes a Layer-3 duplication table, wherein each entry in the Layer-3 duplication table is a linked list of eports. In one embodiment, the router engine <b>132</b> maintains the Layer-3 duplication table. In one embodiment, the router engine <b>132</b> assigns an eVLAN and/or an eVIDX to a multicast packet to indicate the eports to which the packet is to be duplicated.</p>
<p id="p-0075" num="0074">The router engine <b>132</b> includes a portion of the eVLAN assignment unit <b>118</b>, and the eVLAN assignment unit <b>118</b> implements assignment of an eVLAN and/or eVIDX, in an embodiment. Additionally, the outer engine <b>132</b> includes a portion of the attribute assignment unit <b>119</b>, and the attribute assignment unit <b>119</b> implements assignment of attributes based on one or more of i) the source eport, ii) the eVLAN, the routing information database lookup performed by the router engine <b>132</b>, etc. in an embodiment. Examples of attributes assigned by the router engine <b>132</b>, in various embodiments, include enabling/disabling of routing of Internet Protocol version 4 (IPv4) unicast packets, enabling/disabling of routing of IPv4 multicast packets, enabling/disabling of routing of Internet Protocol version 6 (IPv6) unicast packets, enabling/disabling of routing of IPv6 multicast packets, whether to perform source IP address-source MAC address checking (SIP-SA check) (a security check that checks whether the source IP address and the source MAC address of a packet are coupled in the routing information database), etc.</p>
<p id="p-0076" num="0075">An ingress policer engine <b>134</b> is coupled to the router engine <b>132</b>. The ingress policer engine <b>134</b> generally performs rate limiting and makes flow traffic measurements and stores flow measurement information for different flows, according to an embodiment. In some embodiments, the ingress policer engine <b>134</b> takes different actions for different flows. In an embodiment, the ingress policer engine <b>134</b> utilizes flow classification information from the ingress policy engine <b>128</b> in determining what actions should be taken. The ingress policer engine <b>134</b> includes a plurality of counters for making flow traffic measurements, according to an embodiment. The ingress policer engine <b>134</b> samples packets, according to an embodiment. Additionally, the ingress policer engine <b>134</b> applies time stamps to packets or to descriptors associated with the packets, according to an embodiment.</p>
<p id="p-0077" num="0076">A Layer-3 replicator unit <b>136</b> is coupled to ingress policer engine <b>134</b>. When a Layer-3 routed packet that is to be transmitted to multiple destinations is received by the Layer-3 replicator unit <b>136</b>, the Layer-3 replicator unit <b>136</b> creates one or more duplicates of the packet for forwarding to the set of one or more eports determined by the router engine <b>132</b>. In an embodiment, the Layer-3 replicator unit <b>136</b> utilizes the Layer-3 duplication table.</p>
<p id="p-0078" num="0077">A Layer-2 replicator unit <b>138</b> is coupled to the Layer-3 replicator unit <b>136</b>. When a Layer-2 bridged packet that is to be transmitted to multiple destinations is received by the Layer-2 replicator unit <b>138</b>, the Layer-2 replicator unit <b>138</b> creates one or more duplicates of the packet for forwarding to the set of one or more eports determined by the bridge engine <b>130</b>. In an embodiment, the Layer-2 replicator unit <b>138</b> utilizes the Layer-2 duplication table to determine the eports to which the packet is to be directed. In an embodiment, the Layer-2 replicator unit <b>138</b> includes a duplication engine to perform packet duplication. In an embodiment, Layer-2 duplication table includes an attribute that indicates whether an egress eport is associated with a provider edge device. If the egress eport and the ingress eport both corresponds to provider edge devices, the Layer-2 replicator unit <b>138</b> performs filtering so that the packet is not forwarded to the downstream edge device (e.g., it is dropped), according to an embodiment and/or scenario. As an alternative, if the ingress eport is associated with a provider edge device but the egress eport is not marked in the Layer-2 duplication table as corresponding to a provider edge device, then the packet is forwarded in accordance with other information maintained in the attribute or packet descriptor. Operation of the Layer-2 replicator unit <b>138</b>, according to an embodiment, is described in more detail subsequently.</p>
<p id="p-0079" num="0078">In one embodiment in which the eVIDX is a 16-bit index, if eVIDX is less than 4K, the Layer-2 replicator unit <b>138</b> does not perform replication. Rather, Layer-2 replication is performed subsequently in the pipeline <b>102</b>, as will be discussed below.</p>
<p id="p-0080" num="0079">A pre-egress engine <b>140</b> is coupled to the Layer-2 replicator unit. The pre-egress engine <b>140</b> consolidates decisions of previous units in the ingress portion <b>104</b> into a single decision, and updates the descriptor of the packet accordingly.</p>
<p id="p-0081" num="0080">The egress portion <b>112</b> is coupled to the pre-egress engine <b>140</b>, in an embodiment. In one embodiment and in some scenarios, the pre-egress engine <b>140</b> determines one or more physical targets corresponding to the one or more target eports to which a packet is to be forwarded when the target device for the packet is the network device <b>100</b>. A physical target could be a physical port/device pair, a trunk, a tunnel start, a list of physical ports, etc. The pre-egress engine <b>140</b> includes a portion of the mapping unit <b>117</b>, and the mapping unit <b>117</b> implements a determination of the one or more physical targets corresponding to each target eport to which a packet is to be forwarded, in an embodiment. In one embodiment and in at least some scenarios in which an eport is to be mapped to a plurality of physical ports, the eport is mapped to a VIDX which indicates the plurality of physical ports.</p>
<p id="p-0082" num="0081">In an embodiment, an egress filtering unit <b>142</b> is coupled to the pre-egress engine <b>140</b>. The egress filtering unit <b>142</b> utilizes eports and/or eVLANs to perform egress filtering.</p>
<p id="p-0083" num="0082">In some scenarios, a packet that is to be flooded, or a multicast or broadcast packet is not to be egressed via the same eport on which it ingressed. Thus, the egress filtering unit <b>142</b> filters the ingress eport from the plurality of egress eports via which the packet is to be transmitted, for example.</p>
<p id="p-0084" num="0083">An egress Layer-2 multicast replicator unit (L2 Bridged MC Replicator) <b>144</b> is coupled to the egress filtering unit <b>142</b>. The Layer-2 multicast replicator unit <b>144</b> replicates packets, in some scenarios, such as packets received from another switch device and that are to be flooded, or are multicast or broadcast packets. A multi-target destination is indicated via eVIDX, in an embodiment. If a packet is multi-target (i.e. broadcast, multicast, or unknown unicast), the packet is replicated for each egress eport member of the eVIDX group.</p>
<p id="p-0085" num="0084">In one embodiment in which the eVIDX is a 16-bit index, if eVIDX is greater than or equal to 4K, the Layer-2 multicast replicator unit <b>144</b> does not perform replication. Rather, Layer-2 replication is performed either in another switch device or in the Layer-2 replicator unit <b>138</b>. In this embodiment, if eVIDX is less than 4K, the eVIDX is interpreted as an indicator of a physical port list and the Layer-2 multicast replicator unit <b>144</b> performs replication to the physical ports indicated by the list.</p>
<p id="p-0086" num="0085">The Layer-2 multicast replicator unit <b>144</b> provides unicast traffic to at least one of a plurality of transmit queues. For Layer-2 duplicated packets, the Layer-2 multicast replicator unit <b>144</b> replicates the packet to physical ports according to the eVIDX, which indicates the physical ports (as will be described subsequently). In an embodiment, the Layer-2 multicast replicator unit <b>144</b> also provides a copy of the packet to a transmit queue corresponding to another switch device (i.e., a cascade port. In an embodiment, the transmit queue corresponding to the cascade port is designated a specific local target port indicator (e.g., a number such as 24), and thus the Layer-2 multicast replicator unit <b>144</b> provides a copy of the packet to the cascade port, at least in some scenarios. For example, if a first switch device decides to send a packet to a second switch device (e.g., because the data frame is a multicast data frame), the first switch device merely sends the data frame to the designated cascade port. In this embodiment, multicast packets are forwarded amongst the switch devices, and the transmit queue corresponding to the last transmit queue in the chain terminates the relayed copy to prevent loops. In another embodiment, a transmit queue corresponding to the other switch device is designated a specific physical global target port indicator.</p>
<p id="p-0087" num="0086">In an embodiment, the Layer-2 multicast replicator unit <b>144</b> includes a portion of the attribute assignment unit <b>119</b>, and the attribute assignment unit <b>119</b> implements assignment of attributes based on one or more of i) the target eport, ii) the eVLAN, etc. in an embodiment. In another embodiment, the Layer-2 multicast replicator unit <b>144</b> does not include a portion of the attribute assignment unit <b>119</b> and is not involved in assigning attributes.</p>
<p id="p-0088" num="0087">The Layer-2 multicast replicator unit <b>144</b> provides the packet to a transmit queuing and port rate shaping unit (transmit queuing unit) <b>146</b>. The transmit queuing unit <b>146</b> generally queues packets in a plurality of queues corresponding to different classes of flows and/or different physical ports, for example. The transmit queuing unit <b>146</b> also generally performs rate shaping. In an embodiment, the Layer-2 multicast replicator unit <b>144</b> utilizes the eVIDX as an index to a VIDX table to determine a set of physical ports to which the packet is to be duplicated, in some scenarios as will be discussed below in more detail. If a packet is assigned a VIDX, the Layer-2 multicast replicator unit <b>144</b> utilizes the VIDX as an index to the VIDX table to determine the set of physical ports to which the packet is to be duplicated.</p>
<p id="p-0089" num="0088">The transmit queueing unit <b>146</b> includes a portion of the attribute assignment unit <b>119</b>, and the attribute assignment unit <b>119</b> implements assignment of attributes based on one or more of i) the target physical port, ii) the target eport, iii) the eVLAN, etc. in an embodiment. Examples of attributes that are assigned based on the target eport include whether to enable egress filtering, whether to enable spanning tree protocol filtering, whether to enable unicast local switching filtering, whether to enable multicast local switching filtering, a VLAN tag state (i.e., an indication of which VLAN tag(s) to include in the egressing packet, and, if multiple VLAN tags, the order of the tags), etc. In an embodiment, whether to enable egress filtering is an example of an attribute that is assigned based on the target eport and/or the target physical port. In an embodiment, a VLAN tag state is an attribute that is assigned based on the target eport and/or the eVLAN.</p>
<p id="p-0090" num="0089">A scheduling unit <b>148</b> is coupled to the transmit queuing unit <b>146</b>. A header alteration unit <b>150</b> is coupled to the scheduling unit <b>148</b>. In some scenarios, an ingressing packet has a VLAN field and MAC field in the packet header, and in some scenarios, it is necessary to modify the VLAN field (e.g., depending upon the VLAN associated with the MAC DA) or to multicast the packet to destination devices in different VLANs. It is noted that modification of a packet header may occur upon ingress to the provider network or upon egress from the provider network. The header alteration unit <b>150</b> may maintains information allowing a packet header to be appropriately manipulated to facilitate such multicast operations. In some implementations, the header alteration unit <b>150</b> manipulates the packet header independently or in cooperation with other units of the egress portion <b>112</b>. The header alteration unit <b>150</b> enables control of tagging for customer networks or other subnetwork implementations, in some embodiments. To support this functionality, the header alteration unit <b>150</b> is embodied in or comprises a lookup table, database, or other suitable data structure correlating packet attribute information, eVLANs, VIDs, MAC addresses, and customer VLAN tagging preferences. Additionally, the header alteration unit <b>150</b> points to a tunnel start entry that provides information regarding the required external header for a packet, in some scenarios; in that regard, a tunnel start entry defines a tunnel to be used to transmit the packet across a provider network.</p>
<p id="p-0091" num="0090">An egress policy engine <b>154</b> is coupled to the header alteration unit <b>150</b>. The egress policy engine <b>154</b> generally performs flow classification. When the packet belongs to a recognized flow, the egress policy engine <b>154</b> associates the packet with the flow. For example, the egress policy engine <b>154</b> attaches a flow identifier (ID) to a packet to indicate a flow to which the packet belongs, in an embodiment. In at least some scenarios and implementations, the flow ID is removed from the packet before or upon egress from the network device <b>100</b>. For example, if the network device <b>100</b> is a component of a switching system including other similar network devices (not shown), and if the packet is exiting the switching system, the flow ID is removed from the packet before or upon egress from the network device <b>100</b>, in an embodiment. On the other hand, if the network device <b>100</b> is a component of a switching system including other similar network devices (not shown), and if the packet is being forwarded to another network device in the switching system, the flow ID is included in a DSA tag of the packet before or upon egress from the network device <b>100</b>, in an embodiment.</p>
<p id="p-0092" num="0091">An egress policer engine <b>156</b> is coupled to the egress policy engine <b>154</b>. The egress policer engine <b>156</b> generally performs rate limiting and makes flow traffic measurements, in an embodiment.</p>
<p id="p-0093" num="0092">A port MAC transmit unit <b>158</b> is coupled to the egress policer engine <b>156</b>. The port MAC transmit unit <b>158</b> generally implements media access control functions and forwards packets to appropriate egress physical ports <b>116</b>.</p>
<p id="p-0094" num="0093">Attributes assigned by the ingress portion <b>104</b> (i.e., ingress attributes) are assigned based on the source eport and the eVLAN. In one embodiment in which the network device <b>100</b> is one of a plurality of switches in a switching system, ingress attributes are only utilized by the pipeline <b>102</b> and are not utilized by other switches. In another embodiment, one or more ingress attributes are also utilized by other switches. For example, if the source eport is a global eport (i.e., the eport is unique with respect to the plurality of switches), one or more ingress attributes are utilized by one or more other switches in the switching system.</p>
<p id="p-0095" num="0094">Ingress attributes assigned based on the source eport are referred to as ingress eport attributes. In one embodiment, ingress eport attributes are assigned based on an ingress eport attribute table. For example, the ingress eport attribute table provides attributes corresponding to different source eports, and the source eport provides an index to the ingress eport attribute table. In one embodiment, the ingress eport attribute table is distributed among different units of the ingress portion <b>104</b>. In one embodiment, the ingress eport attribute table is included in the attribute assignment unit <b>119</b>, which is itself at least partially distributed among different units of the ingress portion <b>104</b>.</p>
<p id="p-0096" num="0095">Ingress attributes assigned based on the eVLAN are referred to as ingress eVLAN attributes. In one embodiment, ingress eVLAN attributes are assigned based on an ingress eVLAN attribute table. For example, the ingress eVLAN attribute table provides attributes corresponding to different eVLANs, and the eVLAN provides an index to the ingress eVLAN attribute table. In one embodiment, the ingress eVLAN attribute table is included in the attribute assignment unit <b>119</b>.</p>
<p id="p-0097" num="0096">Attributes assigned by the egress portion <b>112</b> (i.e., egress attributes) are assigned based on the target eport and the eVLAN. In one embodiment in which the network device <b>100</b> is one of a plurality of switches in a switching system, egress attributes are only utilized by the pipeline <b>102</b> and/or by other switches in the switching system.</p>
<p id="p-0098" num="0097">Egress attributes assigned based on the target eport are referred to as egress eport attributes. In one embodiment, egress eport attributes are assigned based on an egress eport attribute table. For example, the egress eport attribute table provides attributes corresponding to different target eports, and the target eport provides an index to the egress eport attribute table. In one embodiment, the egress attribute table is included in the attribute assignment unit <b>119</b>.</p>
<p id="p-0099" num="0098">In one embodiment, egress attributes relevant only for the egress physical port are stored in a separate egress physical port attribute table. For example, the egress physical port attribute table provides attributes corresponding to different target physical ports, and the target physical port provides an index to the egress physical port attribute table.</p>
<p id="p-0100" num="0099">In another embodiment, egress attributes relevant only for the egress physical port are stored in the egress eport attribute table.</p>
<p id="p-0101" num="0100">Egress attributes assigned based on the eVLAN are referred to as egress eVLAN attributes. In one embodiment, egress eVLAN attributes are assigned based on an egress eVLAN attribute table. For example, the egress eVLAN attribute table provides attributes corresponding to different eVLANs, and the eVLAN provides an index to the egress eVLAN attribute table. In one embodiment, the egress eVLAN attribute table is included in the attribute assignment unit <b>119</b>.</p>
<p id="p-0102" num="0101">Operation of the network device <b>100</b>, according to an embodiment, will now be described in the context of a packet being processed by the network device <b>100</b>. A packet is received via one of the ingress physical ports <b>108</b> and is processed by the port MAC receive unit <b>120</b> and the header decode unit <b>122</b>.</p>
<p id="p-0103" num="0102">The MAC2ME &#x26; TTI classification unit <b>124</b> assigns (performed by mapping unit <b>117</b>) the source eport as the physical port <b>108</b> via which the packet was received. Additionally, the MAC2ME &#x26; TTI classification unit <b>124</b> assigns (performed by attribute assignment unit <b>119</b>) one or more ingress eport attributes to the packet based on the assigned eport. Assigning the one or more ingress eport attributes comprises performing a lookup in the ingress eport attribute table using the assigned eport, in one embodiment.</p>
<p id="p-0104" num="0103">If the packet is a TRILL packet, the TRILL engine <b>126</b> processes the packet. In one embodiment, processing of a TRILL packet by the TRILL engine <b>126</b> comprises reassigning (performed by mapping unit <b>117</b>) the source eport of the packet. After reassignment of the source eport of the packet, the eport corresponds to a virtual port, in an embodiment.</p>
<p id="p-0105" num="0104">Additionally, the MAC2ME &#x26; TTI classification unit <b>124</b> performs a TTI lookup. At least in some scenarios, the TTI lookup indicates that the eport is to be reassigned, and the MAC2ME &#x26; TTI classification unit <b>124</b> reassigns the eport (performed by mapping unit <b>117</b>).</p>
<p id="p-0106" num="0105">In one embodiment, if the eport is reassigned, the MAC2ME &#x26; TTI classification unit <b>124</b> assigns one or more ingress eport attributes to the packet based on the new eport (performed by attribute assignment unit <b>119</b>). Assigning the one or more ingress eport attributes comprises performing a lookup in the ingress eport attribute table using the new eport, in one embodiment.</p>
<p id="p-0107" num="0106">In at least some scenarios, the MAC2ME &#x26; TTI classification unit <b>124</b> assigns an eVLAN to the packet (performed by the eVLAN assignment unit <b>118</b>). For example, if a DSA tag or the packet includes a VID, the MAC2ME &#x26; TTI classification unit <b>124</b> assigns the eVLAN based on the VID (performed by the eVLAN assignment unit <b>118</b>), in an embodiment. As just one example, the MAC2ME &#x26; TTI classification unit <b>124</b> (performed by the eVLAN assignment unit <b>118</b>) sets the eVLAN to the VID. In one embodiment, if the packet is a TRILL packet, the TRILL engine <b>126</b> assigns (performed by the eVLAN assignment unit <b>118</b>) the eVLAN, in at least some scenarios. In another embodiment, the TRILL engine <b>126</b> does not assign the eVLAN. In one embodiment, the TTI lookup indicates that the eVLAN is to be assigned in at least some scenarios, and the MAC2ME &#x26; TTI classification unit <b>124</b> assigns (performed by the eVLAN assignment unit <b>118</b>) the eVLAN according to the TTI lookup.</p>
<p id="p-0108" num="0107">The ingress policy engine <b>128</b> attaches or otherwise associates a flow identifier to/with the packet to indicate allow to which the packet belongs, in an embodiment. The ingress policy engine <b>128</b> utilizes the eport and/or the eVLAN to determine the flow identifier and/or to take other actions. In some embodiments, the flow identifier and/or other actions determined based on the eport are considered ingress attributes based on the eport and/or the eVLAN. In some instances, the ingress policy engine <b>128</b> assigns an eVLAN to the packet, according to an embodiment. In one embodiment, the ingress policy engine <b>128</b> determines the eVLAN based on the eport. In some embodiments, ingress attributes based on the eVLAN are assigned to the packet by the ingress policy engine <b>128</b>. For example, in some embodiments, the ingress policy engine <b>128</b> assigns one or more of the following attributes based on the eVLAN: an action to be taken when the source address of the packet is unknown to the network device <b>100</b>, whether Layer-3 multicast and/or broadcast mirroring is enabled, whether and what type of eVLAN-based metering should be performed by the ingress policer engine unit <b>134</b>, etc.</p>
<p id="p-0109" num="0108">The bridge engine <b>130</b> makes a forwarding decision (e.g., assigns a target eport, eVLAN, and/or eVIDX) and assigns ingress attributes based on eport and/or eVLAN. For example, the bridge engine <b>130</b> assigns a target eport to which a packet is to be forwarded and assigns an attribute indicating whether the packet is to be mirrored to an ingress analyzer (not shown) based on the eport, in some scenarios. As another example, the bridge engine <b>130</b> assigns an eVIDX to a packet to indicate a list of eports to which a packet should be forwarded based on the eVLAN, in some scenarios.</p>
<p id="p-0110" num="0109">The ingress policer engine <b>134</b> performs rate limiting, makes flow traffic measurements, and stores flow measurement information for a flow corresponding to the packet, according to an embodiment. In some embodiments, ingress eport attributes and/or ingress eVLAN attributes indicate which measurements should be made, whether sampling should be performed and how, whether time stamps should be applied, etc.</p>
<p id="p-0111" num="0110">If the packet is to be transmitted to multiple eports, the Layer-2 replicator unit <b>138</b> creates one or more duplicates of the packet for forwarding to the set of one or more eports determined by the bridge engine <b>130</b>. In an embodiment, the Layer-2 replicator unit <b>138</b> utilizes eVIDX as an index to the Layer-2 duplication table to determine the eports to which the packet is to be transmitted. Additionally, the duplication of the Layer-2 replicator unit <b>138</b> duplicates the packet. In one embodiment, an entry in the Layer-2 duplication table can be an indicator of a VIDX. In this embodiment, if an entry in Layer-2 duplication table is an indicator of a VIDX, the packet is additionally duplicated by the Layer-2 multicast replicator unit <b>144</b>.</p>
<p id="p-0112" num="0111">The pre-egress engine <b>140</b> determines one or more physical targets corresponding to the one or more target eports to which the packet is to be forwarded. A physical target could be a physical port/device pair, a trunk, a tunnel interface, etc. In an embodiment, the mapping unit <b>117</b> determines the one or more physical targets.</p>
<p id="p-0113" num="0112">The egress filtering unit <b>142</b>, the Layer-2 multicast replicator unit <b>144</b>, the transmit queuing unit <b>146</b>, and the scheduling unit <b>148</b> utilize egress eport attributes and egress eVLAN attributes to process the packet, including performing egress filtering, eport or eVLAN mirroring, egress spanning tree protocol based on eports, etc. In one embodiment, the egress eport attribute table is implemented in the transmit queuing unit <b>146</b>. The egress eport attribute table indexed by the target eport. In an embodiment, the Layer-2 multicast replicator unit <b>144</b> utilizes the eVIDX as an index to a VIDX table to determine a set of physical ports to which the packet is to be duplicated, in some scenarios as will be discussed below in more detail. If a packet is assigned a VIDX, the Layer-2 multicast replicator unit <b>144</b> utilizes the VIDX as an index to the VIDX table to determine the set of physical ports to which the packet is to be duplicated.</p>
<p id="p-0114" num="0113">If the packet is to have a VID added to the header, the header alteration unit <b>150</b> converts the eVLAN to a VID and adds the VID to the header. If an already existing VID included in the packet is to be modified, the header alteration unit <b>150</b> modifies the VID. In one embodiment, the header alteration unit <b>150</b> implements an egress physical port attribute table that includes attributes relevant only for the physical port. In this embodiment, the header alteration unit <b>150</b> indexes the egress physical port attribute table using the physical egress port number of the packet.</p>
<p id="p-0115" num="0114"><figref idref="DRAWINGS">FIG. 4</figref> is a flow diagram of an example method <b>200</b> for processing a packet in a packet forwarding pipeline of a switch. The method <b>200</b> is implemented by the network device <b>100</b> of <figref idref="DRAWINGS">FIG. 3</figref>, in an embodiment, and the method <b>200</b> is described with respect to <figref idref="DRAWINGS">FIG. 3</figref> for ease of explanation. However, in other embodiments, the method <b>200</b> is implemented by another suitable packet processing pipeline different than that of the network device <b>100</b>.</p>
<p id="p-0116" num="0115">At block <b>204</b>, an ingress eport is assigned to an ingressing packet. In an embodiment, the ingress eport is a virtual ingress interface decoupled from physical ports of the network device <b>100</b> or from physical ports of other switches in a switching system. For example, different packets received via the same physical port may be assigned to different eports. In various embodiments and scenarios, assigning the ingress eport is based on one or more of a physical port at which the packet was received, a tunnel corresponding to the packet, a TRILL link corresponding to the packet, a DSA tag of the packet, a QoS parameter associated with the packet, a flow to which the packet belongs, etc. As an example, different packets received via the same physical port are assigned different source eports based on one or more of i) whether a packet is tunneled, ii) the tunnel interface of a packet, iii) a QoS requirement of the packet, etc. In one embodiment, the MAC2ME &#x26; TTI classification unit <b>124</b>/mapping unit <b>117</b> assigns the ingress eport to the packet. More generally, a classification engine of the packet processing pipeline assigns the ingress eport to the packet. In some embodiments, the classification engine may also act as or include a tunnel termination and interface assignment engine.</p>
<p id="p-0117" num="0116">At block <b>208</b>, an eVLAN is assigned to the ingressing packet. In an embodiment, the eVLAN is a virtual domain decoupled from physical ports of the network device <b>100</b> and/or from IEEE 802.1Q VLANs. For instance, an eVLAN corresponds to one or more eports, which are themselves decoupled from physical ports, in at least some scenarios. As an example, different packets received via the same physical port may be assigned to different eVLANs. As another example, there may be more eVLANs than the maximum number of IEEE 802.1Q VLANs. In various embodiments and scenarios, assigning the eVLAN is based on one or more of a physical port via which the packet was received, the eport assigned at block <b>204</b>, a tunnel corresponding to the packet, a TRILL link corresponding to the packet, a VID of the packet, a VLAN or eVLAN identifier in a DSA tag of the packet, a QoS parameter associated with the packet, a flow to which the packet belongs, etc. In one embodiment, the eVLAN assignment unit <b>118</b> assigns the eVLAN. As the eVLAN assignment unit <b>118</b> is distributed among different units of the pipeline <b>102</b>, different units of the pipeline <b>102</b> assign the eVLAN in different scenarios. For example, in some scenarios, the MAC2ME &#x26; TTI classification unit <b>124</b> assigns the eVLAN to the packet. For example, if a packet is a tunnel terminated packet, a TRILL packet, or if the packet includes a DSA tag having a VLAN or eVLAN identifier, the MAC2ME &#x26; TTI classification unit <b>124</b> assigns the eVLAN in an embodiment. If the eVLAN is assigned based on the assigned eport, the MAC2ME &#x26; TTI classification unit <b>124</b> assigns the eVLAN in an embodiment. If the eVLAN is assigned based on a QoS parameter or a flow to which the packet is associated, the ingress policy engine <b>128</b> assigns the eVLAN, in an embodiment. More generally, one or more suitable classification engines of the packet processing pipeline assign the eVLAN to the packet according to different scenarios, in an embodiment. In some embodiments, a first one of the classification engines may also act as or include a tunnel termination and interface assignment engine, and a second one of the classification engines may act as or include a flow classification engine.</p>
<p id="p-0118" num="0117">At block <b>212</b>, ingress attributes are assigned to the packet based on the eport and eVLAN assigned at blocks <b>204</b> and <b>208</b>, respectively. In an embodiment, a first set of ingress attributes are assigned using an ingress eport attribute table and using the assigned ingress eport to index the table. In an embodiment, the attribute assignment unit <b>119</b> assigns the ingress attributes. As the attribute assignment unit <b>119</b> is distributed among different units of the pipeline <b>102</b>, different units of the pipeline <b>102</b> assign the ingress attributes in different scenarios. In an embodiment, the ingress eport attribute table is distributed among a plurality of ingress pipeline units. For example, in the network device <b>100</b>, the ingress eport attribute table is distributed among a plurality of units of the ingress portion <b>104</b> including the MAC2ME &#x26; TTI classification unit <b>124</b>, the ingress policy engine <b>128</b>, the bridge engine <b>130</b>, and the router engine <b>132</b>. In an embodiment, a second set of ingress attributes are assigned using an ingress eVLAN attribute table and using the assigned eVLAN to index the table. In an embodiment, the attribute assignment unit <b>119</b> assigns the ingress eVLAN attributes. In an embodiment, the ingress eVLAN attribute table is distributed among a plurality of ingress pipeline units.</p>
<p id="p-0119" num="0118">At block <b>216</b>, the packet is processed in the ingress portion of the pipeline according to the ingress eport, eVLAN, and the ingress attributes corresponding to blocks <b>204</b>, <b>208</b>, and <b>212</b>, respectively. In some embodiments, ingress attributes are utilized for tunnel termination and/or TRILL lookups. In some embodiments, ingress attributes indicate how the packet is to be processed. For example, ingress attributes indicate one or more of: 1) whether a packet is to be trapped, mirrored, etc.; 2) whether and how a packet is to be metered; 3) whether and how a packet is to be time stamped; etc., according to various embodiments. In some embodiments, ingress attributes are utilized for bridging functions. For example, ingress attributes indicate one or more of: 1) whether a packet is to be forwarded; 2) whether the ingress eport is to be learned; 3) whether a spanning tree protocol is to be implemented; etc., according to various embodiments. Similarly, in some embodiments, ingress attributes are utilized for routing functions.</p>
<p id="p-0120" num="0119">In one embodiment, the block <b>216</b> includes assigning an egress eport or eVIDX to the packet (block <b>218</b>) in at least some scenarios. The block is implemented by the eVLAN assignment unit <b>118</b> an/or one or more of i) the MAC2ME and TTI classification engine <b>124</b>, ii) the ingress policy engine <b>128</b>, iii) the bridge engine <b>130</b>, and iv) the router engine <b>132</b>, in an embodiment and in various scenarios.</p>
<p id="p-0121" num="0120">At block <b>220</b>, each egress eport corresponding to the packet is mapped to a corresponding one or more physical egress ports. The block <b>220</b> is implemented by the mapping unit <b>117</b> and/or the pre-egress engine <b>140</b>, in some embodiments.</p>
<p id="p-0122" num="0121">At block <b>224</b>, egress attributes are assigned to the packet based on the egress eport and eVLAN assigned at blocks <b>220</b> and <b>208</b>, respectively. In an embodiment, a first set of egress attributes are assigned using an egress eport attribute table and using the assigned egress eport to index the table. In an embodiment, the egress eport attribute table is distributed among a plurality of egress pipeline units. For example, in the network device <b>100</b>, the egress eport attribute table is distributed among a plurality of units of the egress portion <b>112</b> including the egress filtering unit <b>142</b> and the transmit queuing unit <b>146</b>. In an embodiment, a second set of egress attributes are assigned using an egress eVLAN attribute table and using the assigned eVLAN to index the table. In an embodiment, the egress eVLAN attribute table is distributed among a plurality of egress pipeline units.</p>
<p id="p-0123" num="0122">At block <b>228</b>, the packet is processed in the egress portion of the pipeline according to the egress eport, eVLAN, and the egress attributes corresponding to blocks <b>218</b>, <b>208</b>, and <b>224</b>, respectively. In some embodiments, egress eport, eVLAN, and/or egress attributes are utilized for one or more of egress filtering, executing the spanning tree protocol, header alteration, mirroring, egress policy control and policing, etc. In some embodiments, egress attributes indicate how the packet is to be processed. For example, egress attributes indicate one or more of: 1) whether a packet is to be trapped, mirrored, etc.; 2) whether and how a packet is to be metered; 3) whether and how a packet is to be time stamped; etc., according to various embodiments.</p>
<p id="p-0124" num="0123"><figref idref="DRAWINGS">FIG. 5</figref> is a flow diagram of an example method <b>300</b> for assigning an ingress eport to a packet. The method <b>300</b> is implemented by the network device <b>100</b> of <figref idref="DRAWINGS">FIG. 3</figref>. For example, in one embodiment, the method <b>300</b> is implemented by the mapping unit <b>117</b> and/or the MAC2ME &#x26; TTI classification unit <b>124</b>. However, in other embodiments, the method <b>300</b> is implemented by another suitable packet processing pipeline different than that of the network device <b>100</b>. For example, in another embodiment, the method <b>300</b> is implemented by one or more suitable classification engines and/or mapping units.</p>
<p id="p-0125" num="0124">At block <b>304</b>, a default assignment of the ingress eport. In one embodiment, the ingress eport is set to a value corresponding to an identifier of the physical ingress port via which the packet was received. In other embodiments, other suitable default assignments are utilized. In one embodiment, the default assignment is configurable.</p>
<p id="p-0126" num="0125">At block <b>308</b>, it is determined whether the packet is tagged with a DSA tag. If it is determined that the packet is tagged with a DSA tag, the flow proceeds to block <b>312</b>. At block <b>312</b>, the ingress eport is set to the ingress eport indicated in the DSA tag, and the flow ends.</p>
<p id="p-0127" num="0126">If, at block <b>308</b>, it is determined that the packet is not tagged with a DSA tag, the flow proceeds to block <b>316</b>. At block <b>316</b>, it is determined whether the packet is a TRILL packet. For example, in one embodiment, the TRILL engine <b>126</b> determines whether the packet is a TRILL packet. In an embodiment, the determination of whether the packet is a TRILL packet comprises a TRILL lookup that is based on the default ingress eport assignment of block <b>304</b>. If it is determined that the packet is a TRILL packet, the flow proceeds to block <b>320</b>. At block <b>320</b>, the ingress eport is set as specified by a TRILL action. For example, the TRILL action specifies an ingress eport, in an embodiment.</p>
<p id="p-0128" num="0127">If, at block <b>316</b>, it is determined that the packet is not a TRILL packet, the flow proceeds to block <b>324</b>. At block <b>324</b>, it is determined whether there is a TTI lookup match. In an embodiment, the TTI lookup is based on the default ingress eport assignment of block <b>304</b> and/or other criteria such as one or more of i) assigned ingress attributes, ii) an eVLAN, iii) fields in a header of the packet, etc. If it is determined that there is a TTI match, the flow proceeds to block <b>320</b>. At block <b>320</b>, the ingress eport is set as specified by a TTI action corresponding to the TTI match, in an embodiment. For example, the TTI action specifies an ingress eport, in an embodiment. In other embodiments, the ingress eport is not set at block <b>320</b> as specified by the TTI action in some scenarios. Rather, even when there is a TTI match and when the TTI action indicates reassigning the ingress eport, in some scenarios the ingress eport is not reassigned.</p>
<p id="p-0129" num="0128">In other embodiments, the flow of the method <b>300</b> is modified. For example, in some embodiments, after block <b>312</b>, the flow proceeds to block <b>316</b>. Then, at blocks <b>320</b> and/or <b>328</b>, the eport is reassigned in some scenarios. For example, in some scenarios, if the packet is DSA tagged (block <b>308</b>) and if there is a TTI match (block <b>324</b>), the eport is reassigned at block <b>328</b>. On the other hand, in other scenarios in which the packet is DSA tagged (block <b>308</b>) and when there is a TTI match (block <b>324</b>), the eport is not reassigned at block <b>328</b>, but rather the eport assignment remains as it was assigned at block <b>312</b>. Similarly, in some embodiments, after block <b>320</b>, the flow proceeds to block <b>324</b>. Then, at blocks <b>328</b>, the eport is reassigned in some scenarios. For example, in some scenarios, if the packet is DSA tagged (block <b>308</b>) and if there is a TTI match (block <b>324</b>), the eport is reassigned at block <b>328</b>. On the other hand, in other scenarios in which the packet is DSA tagged (block <b>308</b>) and when there is a TTI match (block <b>324</b>), the eport is not reassigned at block <b>328</b>, but rather the eport assignment remains as it was assigned at block <b>312</b> or block <b>320</b>.</p>
<p id="p-0130" num="0129">In some embodiments in which, after block <b>320</b>, the flow proceeds to block <b>324</b>, the eport is reassigned in some scenarios. As an example, in some scenarios, if there is a TRILL match (block <b>316</b>) and the eport is reassigned at block <b>320</b>, and if there is also a TTI match (block <b>324</b>), the eport is reassigned at block <b>328</b>. On the other hand, in other scenarios in which there is a TRILL match (block <b>316</b>) and when there is a TTI match (block <b>324</b>), the eport is not reassigned at block <b>328</b>, but rather the eport assignment remains as it was assigned at block <b>320</b>.</p>
<p id="p-0131" num="0130">As another example, in one embodiment, the default ingress eport assignment (block <b>304</b>) is performed after blocks <b>308</b>, <b>316</b>, and <b>324</b>. In other embodiments, the order of blocks <b>308</b>, <b>316</b>, and <b>324</b> is different. For example, the determination of whether the packet is a TRILL packet (block <b>316</b>) occurs before determining whether the packet is tagged with a DSA tag (block <b>308</b>), in an embodiment. Similarly, the determination of whether there is a TTI lookup match (block <b>324</b>) comes before determining whether the packet is tagged with a DSA tag (block <b>308</b>), in an embodiment. Similarly, the determination of whether the packet is a TRILL packet (block <b>316</b>) occurs after determining whether there is a TTI lookup match (block <b>324</b>), in an embodiment.</p>
<p id="p-0132" num="0131"><figref idref="DRAWINGS">FIG. 6</figref> is a flow diagram of an example method <b>350</b> for assigning an ingress eport to a packet. The method <b>350</b> is implemented by the network device <b>100</b> of <figref idref="DRAWINGS">FIG. 3</figref>. For example, in one embodiment, the method <b>350</b> is implemented by the MAC2ME &#x26; TTI classification unit <b>124</b>. However, in other embodiments, the method <b>350</b> is implemented by another suitable packet processing pipeline different than that of the network device <b>100</b>. For example, in another embodiment, the method <b>350</b> is implemented by one or more suitable classification engines.</p>
<p id="p-0133" num="0132">The method <b>350</b> is similar to the method <b>300</b> of <figref idref="DRAWINGS">FIG. 5</figref>, and like numbered blocks are not discussed.</p>
<p id="p-0134" num="0133">At block <b>354</b>, one or more ingress attributes are assigned based on the default ingress eport assignment at block <b>304</b>.</p>
<p id="p-0135" num="0134">At block <b>358</b>, a TRILL lookup is performed based on one or more of i) the one or more ingress attributes assigned at block <b>354</b>, ii) the default ingress eport assignment at block <b>30</b>, iii) assigned ingress attributes, iv) an eVLAN, v) fields in a header of the packet, etc. In an embodiment, the TRILL lookup is performed based on the one or more ingress attributes assigned at block <b>354</b> and the default ingress eport assignment at block <b>304</b>, at least in some scenarios.</p>
<p id="p-0136" num="0135">At block <b>362</b>, a TTI lookup is performed based on one or more of i) the one or more ingress attributes assigned at block <b>354</b>, ii) the default ingress eport assignment at block <b>30</b>, iii) assigned ingress attributes, iv) an eVLAN, v) fields in a header of the packet, etc. In an embodiment, the TTI lookup is performed based on the one or more ingress attributes assigned at block <b>354</b> and the default ingress eport assignment at block <b>304</b>, at least in some scenarios.</p>
<p id="p-0137" num="0136">At block <b>366</b>, the one or more ingress attributes assigned at block <b>354</b> are reassigned based on the ingress eport assignment at block <b>312</b>, <b>320</b>, or <b>328</b>.</p>
<p id="p-0138" num="0137">In some embodiments of the network device <b>100</b> or another network device configured to implement the method <b>200</b> of <figref idref="DRAWINGS">FIG. 4</figref>, the method <b>300</b> of <figref idref="DRAWINGS">FIG. 5</figref>, and/or the method <b>350</b> of <figref idref="DRAWINGS">FIG. 6</figref>, and in which the network device is one of a plurality of switches in a switching system, some eports may be designated as globally unique with respect to the plurality of switches (referred to herein as &#x201c;global eports&#x201d;). Global eports will be described with respect to the network device <b>100</b> of <figref idref="DRAWINGS">FIG. 3</figref> for ease of explanation. In other embodiments, other types of switches, such as switches configured to implement the method <b>200</b> of <figref idref="DRAWINGS">FIG. 4</figref>, the method <b>300</b> of <figref idref="DRAWINGS">FIG. 5</figref>, and/or the method <b>350</b> of <figref idref="DRAWINGS">FIG. 6</figref>, implement global eports. Global eports may be utilized with link aggregate groups and in other implementations discussed below, for example.</p>
<p id="p-0139" num="0138">In an embodiment, global eports are reserved to a range of eport values. In this embodiment, the network device <b>100</b> can recognize that an eport in a DSA tag, e.g., an eport assigned to a packet by another switch, is a global eport. In an embodiment, the range is configurable to allow different numbers of global eports, for example. In another embodiment, a flag in a DSA tag and/or a packet descriptor is used to indicate a global eport. With global eports, the pipeline <b>104</b> is configured to ignore a device identifier associated with a global eport when it would otherwise compare eport/device identifier pairs, such as with bridge learning, source filtering, etc.</p>
<p id="p-0140" num="0139">Another instance in which global eports may be useful is with equal cost multipath (ECMP), where multiple eports lead to a common destination. For example, a primary ECMP eport is designated as a global eport whereas secondary ECMP eports are designated as non-globally unique eports, in some embodiments. The secondary ECMP eports associated with a primary ECMP port are referred to herein as an &#x201c;ECMP eport block&#x201d;. Packets to be forwarded to a target that is in the ECMP eport block are assigned the primary ECMP eport as the target eport. Similarly, packets ingressing via any eport in the ECMP eport block are assigned the primary ECMP eport as the source eport.</p>
<p id="p-0141" num="0140"><figref idref="DRAWINGS">FIG. 7</figref> is a flow diagram of an example method <b>400</b> for mapping a target eport to a physical interface, such as a physical port, a trunk, a tunnel start, etc., according to an embodiment. In some scenarios, the target eport is determined as the result of a unicast forwarding decision. In other scenarios, the target eport is determined as the result of a multicast or broadcast forwarding decision, or as a result of a flooding decision. For example, in one embodiment, the eport is indicated by an eVIDX. In other words, for each eport indicated by the eVIDX, the eport is mapped to a physical interface using the method <b>400</b>, in an embodiment. In one embodiment in which the method is implemented in a network device among a plurality of switches of a switching system, the method is implemented in response to a forwarding decision that indicates the target is an eport and that the target device is the local device.</p>
<p id="p-0142" num="0141">The method <b>400</b> is implemented by the network device <b>100</b> of <figref idref="DRAWINGS">FIG. 3</figref>. For example, in one embodiment, the method <b>400</b> is implemented by the pre-egress engine <b>140</b>. However, in other embodiments, the method <b>400</b> is implemented by another suitable packet processing pipeline different than that of the network device <b>100</b>. For example, in another embodiment, the method <b>400</b> is implemented by a unit of a packet processing pipeline that maps eports to physical interfaces.</p>
<p id="p-0143" num="0142">At block <b>404</b>, it is determined whether the eport is a primary ECMP port. In one embodiment, determining whether the eport is a primary ECMP port comprises indexing an ECMP eport table by the eport. If the eport is not a primary ECMP eport, the ECMP eport table returns a suitable indicator, such as a NULL pointer. On the other hand, if the eport is a primary ECMP eport, the ECMP eport table returns a pointer to an eport lookup translation table (LIT) entry. In one embodiment, when the LTT is indexed with the primary ECMP eport, the LTT returns an entry that includes an ECMP enable bit (basically indicating that this LTT entry is valid), an index to a block of ECMP eports represented by the primary ECMP eport, and an indication of the size of the block (e.g., an indicator of the number of secondary eports in the block of ECMP eports). Thus, in one embodiment, determining whether the eport is a primary ECMP port comprises indexing an ECMP eport table by the eport and determining whether the ECMP eport table returns a suitable indicator, such as a NULL pointer.</p>
<p id="p-0144" num="0143">If it is determined that the eport is a primary ECMP eport, the flow proceeds to block <b>408</b>. At block <b>408</b>, a secondary ECMP eport in the corresponding ECMP eport block is selected. In one embodiment, as discussed above, the ECMP eport table returns a pointer to an eport LTT entry. The eport LTT entry specifies a set of ECMP eport block attributes including a pointer to a block of ECMP eport entries corresponding to the secondary eports, and an indicator of the number of secondary eports in the block of ECMP eports. In an embodiment, the block of ECMP eport entries is accessed using a hash index. In one embodiment, one of two different hash indices is utilized based on different scenarios. For example, a first hash index corresponds to ECMP selection and a second hash index corresponds to link aggregate group selection, in an embodiment. The hash index into the block of ECMP eport entries returns a target device/eport, in one embodiment.</p>
<p id="p-0145" num="0144">From block <b>408</b>, the flow proceeds to block <b>412</b>. Additionally, if it is determined at block <b>404</b> that the eport is not a primary ECMP eport, the flow proceeds to block <b>412</b>. At block <b>412</b>, the eport is mapped to a physical target. In one embodiment, an egress eport table maps eports to physical targets.</p>
<p id="p-0146" num="0145">In embodiments in which a switching system comprises a plurality of switch devices, blocks <b>404</b> and <b>408</b> are implemented by the source device, whereas block <b>412</b> is implemented by the target device. For example, in an embodiment, the source device determines the target eport/target device pair, and the target eport/target device pair is indicated in the DSA tag. The source device then forwards the packet to the target device. The target device then maps the eport to the physical target.</p>
<p id="p-0147" num="0146">Referring again to <figref idref="DRAWINGS">FIG. 3</figref>, in one embodiment, the Layer-2 replicator unit <b>138</b> utilizes eVIDX as an index to the Layer-2 duplication table to determine the eports to which the packet is to be transmitted. As discussed above, eVIDX is used to index to a Layer-2 duplication table, wherein each entry in the Layer-2 duplication table includes a pointer to a linked list of eports. In one embodiment, each entry also includes a mask profile for use in determining whether and how to mask linked list entries. In some embodiments, if eVIDX is less than 4K or some other suitable value, the Layer-2 replicator unit <b>138</b> does not perform duplication. Rather, eVIDX is treated as an indicator of a physical port list. In an embodiment, when eVIDX is less than 4K, the Layer-2 multicast replicator unit <b>144</b> uses eVIDX as an index to a VIDX table. Each entry in the VIDX table includes a pointer to a list of physical ports to which the packet is to be duplicated, and the transmit queuing unit <b>146</b> creates duplicates of the packet and adds the duplicates to transmit queues corresponding to the physical ports indicated by the linked list.</p>
<p id="p-0148" num="0147"><figref idref="DRAWINGS">FIG. 8</figref> is a flow diagram of an example method <b>500</b> for performing Layer-2 duplication, according to an embodiment. The method <b>500</b> is implemented by the pipeline <b>102</b> (<figref idref="DRAWINGS">FIG. 3</figref>), in an embodiment, and is discussed with respect to <figref idref="DRAWINGS">FIG. 3</figref> for ease of explanation. In other embodiments, a similar method is implemented in another suitable packet processing pipeline of a network device. The method <b>500</b> utilizes the eVIDX, which is used to index either the Layer-2 duplication table of the Layer-2 replicator unit <b>138</b> or the VIDX table of the Layer-2 multicast replicator unit <b>144</b>.</p>
<p id="p-0149" num="0148">At block <b>504</b>, it is determined whether a value of eVIDX is less than a threshold value, wherein whether the value of eVIDX is less than the threshold value indicates whether eVIDX corresponds to a list of eports or a list of physical ports. In one embodiment, eVIDX is a 16-bit number and the threshold value is 4K. In other embodiments, eVIDX includes a different number of bits and/or the threshold value is another suitable value. If it is determined that the value of eVIDX is not less than the threshold value, this indicates eVIDX corresponds to a list of eports and the flow proceeds to block <b>508</b>.</p>
<p id="p-0150" num="0149">At block <b>508</b>, eVIDX is used to create an index to the Layer-2 duplication table. In an embodiment in which the threshold value is 4K, the index is created by subtracting 4K from eVIDX.</p>
<p id="p-0151" num="0150">At block <b>512</b>, Layer-2 duplication is performed by the Layer-2 replicator unit <b>138</b> using the index created at block <b>508</b>. In one embodiment, the indexed Layer-2 duplication table provides a pointer to a linked list of eports. The duplication engine of the Layer-2 replicator unit <b>138</b> duplicates the packet for forwarding to the eports indicated by the linked list.</p>
<p id="p-0152" num="0151">On the other hand, if at block <b>504</b> it is determined that the value of eVIDX is less than the threshold value (e.g., less than 4K, in an embodiment), this indicates eVIDX corresponds to a list of physical ports and the flow proceeds to block <b>516</b>. At block <b>516</b>, eVIDX is used to index the VIDX table to determine physical ports to which the packet is to be duplicated, and Layer-2 duplication is performed by the Layer-2 multicast replicator unit <b>144</b>. In one embodiment, the indexed VIDX table of the Layer-2 multicast replicator unit <b>144</b> provides a pointer to a list of physical ports. A duplication engine of the Layer-2 multicast replicator unit <b>144</b> duplicates the packet for forwarding to the physical ports indicated by the list. In one embodiment in which cascade ports are utilized, an entry of the list of physical ports may correspond to forwarding to cascade ports. In an embodiment, a cascade port is a port for forwarding a packet to an adjacent switch device in a switching system. In another embodiment, different cascade ports may correspond to different entries in the list of physical ports.</p>
<p id="p-0153" num="0152">In an embodiment and in some scenarios, the indexed Layer-2 duplication table provides a pointer to a linked list of egress interfaces, wherein an egress interface can be an eport or an eVIDX with a value less than the threshold value (e.g., less than 4K). In this embodiment, if one of the egress interfaces in the linked list is eVIDX with a value less than the threshold value, the Layer-2 replicator unit <b>138</b> duplicates the packet and assigns the eVIDX to the packet. Then, the packet is duplicated to a list of physical ports as described with respect to block <b>516</b>.</p>
<p id="p-0154" num="0153">In one embodiment, an entry in the Layer-2 duplication table can correspond to a VIDX. In this embodiment, when an entry in the Layer-2 duplication table corresponds to a VIDX, the Layer-2 multicast replicator unit <b>144</b> also duplicates the packet to a set of physical ports indicated by the VIDX. In other words, duplication is performed both by the Layer-2 replicator unit <b>138</b> and the Layer-2 multicast replicator unit <b>144</b>. In another embodiment, an eport entry in the Layer-2 duplication table is mapped by the pre-egress engine <b>140</b> to a VIDX. In this scenario, the Layer-2 multicast replicator unit <b>144</b> also duplicates the packet to a set of physical ports indicated by the VIDX. In other words, duplication is performed both by the Layer-2 replicator unit <b>138</b> and the Layer-2 multicast replicator unit <b>144</b>.</p>
<p id="p-0155" num="0154"><figref idref="DRAWINGS">FIG. 9</figref> is a block diagram of an example network <b>600</b>, according to an embodiment, that utilizes the network device <b>10</b>. In the embodiment of <figref idref="DRAWINGS">FIG. 9</figref>, the network device <b>10</b> is or is a component of a provider edge device (PE). The network <b>600</b> includes other PE's <b>604</b>, <b>608</b>, <b>612</b> communicatively coupled to the PE <b>10</b>. The PE <b>10</b> is also communicatively coupled to a plurality of customer networks <b>620</b>, <b>624</b>, <b>628</b>.</p>
<p id="p-0156" num="0155">In the example scenario illustrated in <figref idref="DRAWINGS">FIG. 9</figref>, the PE <b>10</b> receives a packet <b>640</b> (packet A) from the customer network <b>620</b> via a physical port <b>644</b>. The mapper <b>32</b> assigns an eport <b>648</b> corresponding to the physical port <b>644</b> to the packet <b>640</b>. The eVLAN assignment unit <b>60</b> assigns an eVLAN <b>652</b> to the packet <b>640</b>. The eVLAN <b>652</b> includes the eport <b>648</b>, and eports <b>656</b>, <b>658</b>, and <b>660</b> that correspond to PE <b>608</b>, customer network <b>624</b>, and PE <b>604</b>, respectively.</p>
<p id="p-0157" num="0156">In the example scenario of <figref idref="DRAWINGS">FIG. 9</figref>, the packet processor <b>14</b> does not recognize a destination address (DA) of the packet <b>10</b> and thus decides that the packet <b>640</b> should be flooded to the eVLAN <b>652</b>. For example, the packet processor <b>14</b> assigns to the packet <b>640</b> an eVIDX corresponding to the eVLAN <b>652</b>. The packet processor <b>14</b> duplicates the packet <b>640</b> for eports <b>656</b>, <b>658</b>, and <b>660</b>, but filters the eport <b>648</b> so that the packet <b>640</b> is not transmitted back to the customer network <b>620</b>. Although in <figref idref="DRAWINGS">FIG. 9</figref> there are only illustrated a number of eports equal to the number of physical ports, the PE <b>10</b> includes a greater number of eports than the number of physical ports.</p>
<p id="p-0158" num="0157">The attribute assignment unit <b>66</b> assigns different attributes to the packet copies corresponding to the eports <b>656</b>, <b>658</b>, and <b>660</b>. For example, the attribute assignment unit <b>66</b> assigns attributes to the packet copy for eport <b>658</b> that indicate the packet is to be tunnel terminated, and then tunneled encapsulated in an MPLS PW label <b>1</b>, to generate a packet <b>670</b>. As another example, the attribute assignment unit <b>66</b> assigns attributes to the packet copy for eport <b>656</b> that indicate that the packet is to be tunnel terminated, a VLAN tag should be removed from the packet, and the packet is to be tunneled encapsulated in an MPLS PW label <b>2</b> with a PWE3 control word, to generate a packet <b>674</b>. As yet another example, the attribute assignment unit <b>66</b> assigns attributes to the packet copy for eport <b>660</b> that indicate that the packet is to be tunnel terminated, an additional VLAN tag should be added to the packet, and the packet is to be tunnel encapsulated in an MPLS PW label <b>3</b>, to generate a packet <b>678</b>. The packet processor <b>14</b> utilizes the assigned attributes to appropriately process the packet copies and to generate the packets <b>670</b>, <b>674</b>, and <b>678</b>.</p>
<p id="p-0159" num="0158">The mapper <b>32</b> maps the eports <b>656</b>, <b>658</b>, and <b>660</b> to respective physical ports.</p>
<p id="p-0160" num="0159">It is noted that each of the blocks of the figures may be implemented using hardware, a processor executing firmware instructions, a processor executing software instructions, or any combination thereof. When a block is implemented at least partially using a processor that executes software instructions, the software may be stored in any computer readable memory such as on a magnetic disk, an optical disk, or other storage medium, in a RAM or ROM or flash memory of a computer, processor, hard disk drive, optical disk drive, tape drive, etc. Likewise, the software instructions may be delivered to a user or a system via any known or desired delivery method including, for example, on a computer readable disk or other transportable computer storage mechanism or via communication media. When implemented in hardware, the hardware may comprise one or more of discrete components, an integrated circuit, an application-specific integrated circuit (ASIC), etc. Referring to <figref idref="DRAWINGS">FIG. 3</figref>, in accordance with an embodiment, the pipeline <b>102</b> is implemented on a single integrated circuit (IC). In other embodiments, the pipeline <b>102</b> is implemented on a plurality of ICs. For example, in one embodiment, the ingress portion <b>104</b> is implemented on a first IC and the egress portion is implemented on a second IC, according to an embodiment.</p>
<p id="p-0161" num="0160">While the present invention has been described with reference to specific examples, which are intended to be illustrative only and not to be limiting of the invention, it will be apparent to those of ordinary skill in the art that changes, additions and/or deletions may be made to the disclosed embodiments without departing from the spirit and scope of the invention.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A network device, comprising:
<claim-text>a plurality of physical ports;</claim-text>
<claim-text>a packet processor coupled to the plurality of physical ports, wherein the packet processor is configured to:
<claim-text>assign a virtual port from a plurality of virtual ports to a packet received via one of the physical ports, wherein a quantity of the plurality of virtual ports is larger than a quantity of the plurality of physical ports, and wherein, for each of at least some of the physical ports, multiple virtual ports correspond to one physical port,</claim-text>
<claim-text>assign a virtual domain from a plurality of virtual domains to the packet based on the assigned virtual port, wherein the assigned virtual domain corresponds to a group of virtual ports within the plurality of virtual ports, and</claim-text>
<claim-text>process the packet based on one or more of i) the assigned virtual port, ii) the assigned virtual domain, and iii) a header field of the packet, wherein processing the packet includes determining zero, one, or more physical ports to which the packet is to be forwarded.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. A network device according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the packet processor is configured to:
<claim-text>assign attributes to the packet based on the assigned virtual port and the assigned virtual domain, and</claim-text>
<claim-text>process the packet based on the assigned attributes.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. A network device according to <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the assigned virtual port is a second virtual port and the assigned attributes are second attributes, and wherein the packet processor is configured to assign the second virtual port by:
<claim-text>assigning a first virtual port to the packet,</claim-text>
<claim-text>assigning first attributes to the packet based on the assigned first virtual port, and</claim-text>
<claim-text>assigning the second virtual port to the packet based on the assigned first attributes.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. A network device according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the assigned virtual port is a second virtual port, and wherein the packet processor is configured to assign the second virtual port by:
<claim-text>assigning a first virtual port to the packet based on a physical port via which the packet ingressed,</claim-text>
<claim-text>determining that a different virtual port should be assigned to the packet, and</claim-text>
<claim-text>assigning the second virtual port to the packet in response to determining that the different virtual port should be assigned to the packet.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. A network device according to <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein the packet processor is configured to determine that a different virtual port should be assigned to the packet based on whether the packet is tagged with a tag including a virtual port identifier.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. A network device according to <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein the packet processor is configured to determine that a different virtual port should be assigned to the packet based on whether the packet should be tunnel terminated.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. A network device according to <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein the packet processor is configured to determine that a different virtual port should be assigned to the packet based on whether the packet corresponds to the Transparent Interconnect of Lots of Links (TRILL) protocol.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. A network device according to <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein the packet processor is configured to determine that a different virtual port should be assigned to the packet based on one or more fields of a header of the packet.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. A network device according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the packet processor is configured to determine zero, one, or more physical interfaces to which the packet is to be forwarded by:
<claim-text>determining zero, one, or more target virtual ports to which the packet is to be forwarded, and</claim-text>
<claim-text>for each determined target virtual port, mapping the virtual port to a physical interface.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. A network device according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the packet processor is configured to determine zero, one, or more physical interfaces to which the packet is to be forwarded by:
<claim-text>determining a primary equal cost multipath (ECMP) virtual port to which the packet is to be forwarded,</claim-text>
<claim-text>determining a secondary ECMP virtual port corresponding to the primary ECMP virtual port, and</claim-text>
<claim-text>mapping the secondary ECMP virtual port to a physical interface.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. A network device according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the packet processor is configured to:
<claim-text>determine an indicator of a plurality of virtual ports or a plurality of physical ports to which the packet is to be forwarded,</claim-text>
<claim-text>determine whether the indicator corresponds to virtual ports or to physical ports,</claim-text>
<claim-text>duplicate the packet at a first packet processing unit in the packet processor if the indicator corresponds to virtual ports, and</claim-text>
<claim-text>duplicate the packet at a second packet processing unit in the packet processor if the indicator corresponds to physical ports.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. A packet processing method, comprising:
<claim-text>receiving a packet via a source physical port from a plurality of physical ports;</claim-text>
<claim-text>assigning a virtual port from a plurality of virtual ports to a packet received via one of the physical ports, wherein a quantity of the plurality of virtual ports is larger than a quantity of the plurality of physical ports, and wherein, for each of at least some of the physical ports, multiple virtual ports correspond to one physical port;</claim-text>
<claim-text>assigning a virtual domain from a plurality of virtual domains to the packet based on the assigned virtual port, wherein the assigned virtual domain corresponds to a group of virtual ports within the plurality of virtual ports; and</claim-text>
<claim-text>processing the packet with a packet processor based on one or more of i) the assigned virtual port, ii) the assigned virtual domain, and iii) a header field of the packet, wherein processing the packet includes determining zero, one, or more physical ports to which the packet is to be forwarded.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. A method according to <claim-ref idref="CLM-00012">claim 12</claim-ref>, further comprising:
<claim-text>assigning attributes to the packet based on the assigned virtual port and the assigned virtual domain;</claim-text>
<claim-text>wherein processing the packet with the packet processor is further based on the assigned attributes.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. A method according to <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the assigned virtual port is a second virtual port and the assigned attributes are second attributes, and wherein assigning the second virtual port comprises:
<claim-text>assigning a first virtual port to the packet,</claim-text>
<claim-text>assigning first attributes to the packet based on the assigned first virtual port, and</claim-text>
<claim-text>assigning the second virtual port to the packet based on the assigned first attributes.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. A method according to <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the assigned virtual port is a second virtual port, and wherein assigning the second virtual port comprises:
<claim-text>assigning a first virtual port to the packet;</claim-text>
<claim-text>determining that a different virtual port should be assigned to the packet; and</claim-text>
<claim-text>assigning the second virtual port to the packet in response to determining that the different virtual port should be assigned to the packet.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. A method according to <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein determining that a different virtual port should be assigned to the packet is based on whether the packet is tagged with a tag including a virtual port identifier.</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. A method according to <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein determining that a different virtual port should be assigned to the packet is based on whether the packet should be tunnel terminated.</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. A method according to <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein determining that a different virtual port should be assigned to the packet is based on whether the packet corresponds to the Transparent Interconnect of Lots of Links (TRILL) protocol.</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. A method according to <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein determining that a different virtual port should be assigned to the packet is based on one or more fields of a header of the packet.</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. A method according to <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the packet processor is configured to determine zero, one, or more physical ports to which the packet is to be forwarded by:
<claim-text>determining zero, one, or more target virtual ports to which the packet is to be forwarded, and</claim-text>
<claim-text>for each determined target virtual port, mapping the virtual port to a physical port.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00021" num="00021">
<claim-text>21. A method according to <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein determining zero, one, or more physical ports to which the packet is to be forwarded comprises:
<claim-text>determining a primary equal cost multipath (ECMP) virtual port to which the packet is to be forwarded;</claim-text>
<claim-text>determining a secondary ECMP virtual port corresponding to the primary ECMP virtual port; and</claim-text>
<claim-text>mapping the secondary ECMP virtual port to a physical port.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00022" num="00022">
<claim-text>22. A method according to <claim-ref idref="CLM-00012">claim 12</claim-ref>, further comprising:
<claim-text>determining an indicator of a plurality of virtual ports or a plurality of physical ports to which the packet is to be forwarded;</claim-text>
<claim-text>determining whether the indicator corresponds to virtual ports or physical ports;</claim-text>
<claim-text>duplicating the packet using a first packet processing unit in the packet processor if the indicator corresponds to virtual ports; and</claim-text>
<claim-text>duplicating the packet using a second packet processing unit in the packet processor if the indicator corresponds to physical ports.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00023" num="00023">
<claim-text>23. A network device, comprising:
<claim-text>a plurality of physical ports;</claim-text>
<claim-text>a packet processor coupled to the plurality of physical ports, the packet processor comprising a plurality of packet processing units including:
<claim-text>a unit configured to assign a virtual port from a plurality of virtual ports to a packet received via one of the physical ports, wherein a quantity of the plurality of virtual ports is larger than a quantity of the plurality of physical ports, and wherein, for each of at least some of the physical ports, multiple virtual ports correspond to one physical port;</claim-text>
<claim-text>one or more units configured to assign a virtual domain from a plurality of virtual domains to the packet based on the assigned virtual port, wherein the assigned virtual domain corresponds to a group of virtual ports within the plurality of virtual ports;</claim-text>
</claim-text>
<claim-text>one or more downstream units configured to process the packet based on one or more of the assigned virtual port, the assigned virtual domain, and a field of a header of the packet, wherein the one or more downstream units include:
<claim-text>one or more forwarding engines to determine zero, one, or more target virtual ports to which the packet is to be forwarded; and</claim-text>
<claim-text>one or more units configured to map one or more target virtual ports to which the packet is to be forwarded to one or more physical ports.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00024" num="00024">
<claim-text>24. A network device according to <claim-ref idref="CLM-00023">claim 23</claim-ref>, further comprising:
<claim-text>one or more units configured to assign attributes to the packet based on the assigned virtual port and the assigned virtual domain;</claim-text>
<claim-text>wherein the one or more downstream units configured to process the packet are configured to process the packet further based on and the assigned attributes.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00025" num="00025">
<claim-text>25. A network device according to <claim-ref idref="CLM-00023">claim 23</claim-ref>, wherein the assigned virtual port is a second virtual port, and wherein the unit configured to assign a virtual port is configured to:
<claim-text>assign a first virtual port to the packet,</claim-text>
<claim-text>determine that a different virtual port should be assigned to the packet, and</claim-text>
<claim-text>assign the second virtual port to the packet in response to determining that the different virtual port should be assigned to the packet.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00026" num="00026">
<claim-text>26. A network device, comprising:
<claim-text>a plurality of physical ports;</claim-text>
<claim-text>a packet processor coupled to the plurality of physical ports, wherein the packet processor is configured to:
<claim-text>assign a virtual port from a plurality of virtual ports to a packet received via one of the physical ports, wherein a quantity of the plurality of virtual ports is larger than a quantity of the plurality of physical ports, and wherein, for each of at least some of the physical ports, multiple virtual ports correspond to one physical port,</claim-text>
<claim-text>assign a virtual domain from a plurality of virtual domains to the packet based on the assigned virtual port, wherein the assigned virtual domain corresponds to a group of virtual ports within the plurality of virtual ports,</claim-text>
<claim-text>determine an indicator of a set of virtual ports or a set of physical ports to which the packet is to be forwarded based on the assigned virtual domain,</claim-text>
<claim-text>determine whether the indicator corresponds to virtual ports or to physical ports,</claim-text>
<claim-text>duplicate, at a first packet processing unit in the packet processor, the packet to the set of virtual ports if the indicator corresponds to virtual ports,</claim-text>
<claim-text>map the set of virtual ports to one or more physical ports if the indicator corresponds to virtual ports,</claim-text>
<claim-text>duplicate, at a second packet processing unit in the packet processor, the packet to the set of physical ports if the indicator corresponds to physical ports, and</claim-text>
<claim-text>transmit the packet via one or more physical ports.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00027" num="00027">
<claim-text>27. A network device according to <claim-ref idref="CLM-00026">claim 26</claim-ref>, wherein the packet processor is configured to:
<claim-text>utilize the indicator to index a first table to determine the set of virtual ports if the indicator corresponds to virtual ports, and</claim-text>
<claim-text>utilize the indicator to index a second table to determine the set of physical ports if the indicator corresponds to physical ports.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00028" num="00028">
<claim-text>28. A network device according to <claim-ref idref="CLM-00026">claim 26</claim-ref>, wherein the packet processor is configured to determine whether the indicator corresponds to virtual ports or to physical ports based on comparing a value of the indicator to a threshold value.</claim-text>
</claim>
<claim id="CLM-00029" num="00029">
<claim-text>29. A network device according to <claim-ref idref="CLM-00026">claim 26</claim-ref>, wherein indicators of the set of virtual ports are included in a list that also includes an indicator of an index to a group of physical ports, wherein the packet processor is configured to:
<claim-text>duplicate, at the second packet processing unit in the packet processor, the packet to the group of physical ports if the indicator corresponds to virtual ports.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00030" num="00030">
<claim-text>30. A network device according to <claim-ref idref="CLM-00026">claim 26</claim-ref>, wherein the packet processor is configured to:
<claim-text>map one virtual port in the set of virtual ports to an index to a group of physical ports, and</claim-text>
<claim-text>duplicate, at the second packet processing unit in the packet processor, the packet to the group of physical ports.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00031" num="00031">
<claim-text>31. A packet processing method, comprising:
<claim-text>receiving a packet via a source physical port from a plurality of physical ports;</claim-text>
<claim-text>assigning a virtual port from a plurality of virtual ports to a packet received via one of the physical ports, wherein a quantity of the plurality of virtual ports is larger than a quantity of the plurality of physical ports, and wherein, for each of at least some of the physical ports, multiple virtual ports correspond to one physical port;</claim-text>
<claim-text>assigning a virtual domain from a plurality of virtual domains to the packet based on the assigned virtual port, wherein the assigned virtual domain corresponds to a group of virtual ports within the plurality of virtual ports;</claim-text>
<claim-text>determining an indicator of a set of virtual ports or a set of physical ports to which the packet is to be forwarded based on the assigned virtual domain;</claim-text>
<claim-text>determining whether the indicator corresponds to virtual ports or to physical ports;</claim-text>
<claim-text>duplicating, at a first packet processing unit in a packet processor, the packet to the set of virtual ports if the indicator corresponds to virtual ports;</claim-text>
<claim-text>mapping the set of virtual ports to one or more physical ports if the indicator corresponds to virtual ports;</claim-text>
<claim-text>duplicating, at a second packet processing unit in the packet processor, the packet to the set of physical ports if the indicator corresponds to physical ports; and</claim-text>
<claim-text>transmitting the packet via one or more physical ports.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00032" num="00032">
<claim-text>32. A method according to <claim-ref idref="CLM-00031">claim 31</claim-ref>, further comprising:
<claim-text>utilizing the indicator to index a first table to determine the set of virtual ports if the indicator corresponds to virtual ports; and</claim-text>
<claim-text>utilizing the indicator to index a second table to determine the set of physical ports if the indicator corresponds to physical ports.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00033" num="00033">
<claim-text>33. A method according to <claim-ref idref="CLM-00031">claim 31</claim-ref>, wherein determining whether the indicator corresponds to virtual ports or to physical ports includes comparing a value of the indicator to a threshold value.</claim-text>
</claim>
<claim id="CLM-00034" num="00034">
<claim-text>34. A method according to <claim-ref idref="CLM-00031">claim 31</claim-ref>, wherein indicators of the set of virtual ports are included in a list that also includes an indicator of an index to a group of physical ports, wherein the method further comprises:
<claim-text>duplicating, at the second pipeline unit in the packet processor, the packet to the group of physical ports if the indicator corresponds to virtual ports.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00035" num="00035">
<claim-text>35. A method according to <claim-ref idref="CLM-00031">claim 31</claim-ref>, further comprising:
<claim-text>mapping one virtual port in the set of virtual ports to an index to a group of physical ports, and</claim-text>
<claim-text>duplicating, at the second pipeline unit in the packet processor, the packet to the group of physical ports.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00036" num="00036">
<claim-text>36. A network device according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the packet processor is a packet processing pipeline.</claim-text>
</claim>
<claim id="CLM-00037" num="00037">
<claim-text>37. A method according to <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein processing the packet with a packet processor includes processing the packet with a packet processing pipeline.</claim-text>
</claim>
<claim id="CLM-00038" num="00038">
<claim-text>38. A network device according to <claim-ref idref="CLM-00023">claim 23</claim-ref>, wherein the packet processor is a packet processing pipeline.</claim-text>
</claim>
<claim id="CLM-00039" num="00039">
<claim-text>39. A network device according to <claim-ref idref="CLM-00026">claim 26</claim-ref>, wherein the packet processor is a packet processing pipeline.</claim-text>
</claim>
<claim id="CLM-00040" num="00040">
<claim-text>40. A method according to <claim-ref idref="CLM-00031">claim 31</claim-ref>, wherein:
<claim-text>duplicating, at a first packet processing unit in a packet processor, the packet to the set of virtual ports if the indicator corresponds to virtual ports includes duplicating, at a first pipeline unit in a packet processing pipeline, the packet to the set of virtual ports if the indicator corresponds to virtual ports; and</claim-text>
<claim-text>duplicating, at a second packet processing unit in the packet processor, the packet to the set of physical ports if the indicator corresponds to physical ports includes duplicating, at a second pipeline unit in the packet processing pipeline, the packet to the set of physical ports if the indicator corresponds to physical ports. </claim-text>
</claim-text>
</claim>
</claims>
</us-patent-grant>

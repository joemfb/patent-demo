<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08625729-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08625729</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>12672482</doc-number>
<date>20080820</date>
</document-id>
</application-reference>
<us-application-series-code>12</us-application-series-code>
<priority-claims>
<priority-claim sequence="01" kind="national">
<country>DE</country>
<doc-number>10 2007 045 085</doc-number>
<date>20070921</date>
</priority-claim>
<priority-claim sequence="02" kind="national">
<country>DE</country>
<doc-number>10 2008 016 897</doc-number>
<date>20080402</date>
</priority-claim>
</priority-claims>
<us-term-of-grant>
<us-term-extension>826</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>H</section>
<class>03</class>
<subclass>D</subclass>
<main-group>3</main-group>
<subgroup>24</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>375376</main-classification>
<further-classification>375355</further-classification>
</classification-national>
<invention-title id="d2e90">Method and device for clock data recovery</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>4532559</doc-number>
<kind>A</kind>
<name>Long et al.</name>
<date>19850700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>360 51</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>4771250</doc-number>
<kind>A</kind>
<name>Statman et al.</name>
<date>19880900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
<classification-national><country>US</country><main-classification>331 17</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>5504751</doc-number>
<kind>A</kind>
<name>Ledzius et al.</name>
<date>19960400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>341144</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>6326851</doc-number>
<kind>B1</kind>
<name>Staszewski et al.</name>
<date>20011200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
<classification-national><country>US</country><main-classification>331 17</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>6809598</doc-number>
<kind>B1</kind>
<name>Staszewski et al.</name>
<date>20041000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
<classification-national><country>US</country><main-classification>331 16</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>7076377</doc-number>
<kind>B2</kind>
<name>Kim et al.</name>
<date>20060700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>702 66</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>7385539</doc-number>
<kind>B2</kind>
<name>Vanselow et al.</name>
<date>20080600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
<classification-national><country>US</country><main-classification>341143</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>7817767</doc-number>
<kind>B2</kind>
<name>Tell et al.</name>
<date>20101000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>375376</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>2002/0094052</doc-number>
<kind>A1</kind>
<name>Staszewski et al.</name>
<date>20020700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
<classification-national><country>US</country><main-classification>375376</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>2004/0071247</doc-number>
<kind>A1</kind>
<name>Dunning et al.</name>
<date>20040400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>375355</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>2004/0085579</doc-number>
<kind>A1</kind>
<name>Campbell et al.</name>
<date>20040500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
<classification-national><country>US</country><main-classification>358  118</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>2006/0140321</doc-number>
<kind>A1</kind>
<name>Tell et al.</name>
<date>20060600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>375376</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00013">
<document-id>
<country>US</country>
<doc-number>2006/0262613</doc-number>
<kind>A1</kind>
<name>Braun et al.</name>
<date>20061100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>365193</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00014">
<document-id>
<country>DE</country>
<doc-number>10 2006 007 022</doc-number>
<date>20070800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00015">
<document-id>
<country>EP</country>
<doc-number>0 312 671</doc-number>
<date>19890400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00016">
<document-id>
<country>EP</country>
<doc-number>1 076 416</doc-number>
<date>20010200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00017">
<document-id>
<country>GB</country>
<doc-number>2 359 223</doc-number>
<date>20010800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00018">
<document-id>
<country>JP</country>
<doc-number>07058790</doc-number>
<date>19950300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00019">
<othercit>Abramovitch, &#x201c;Phase-Locked Loops: A Control Centric Tutorial,&#x201d; Proceedings of the American Control Conference, pp. 1-15 (2002).</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>11</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>375354</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>375355</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>375371-376</main-classification>
<additional-info>unstructured</additional-info>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>7</number-of-drawing-sheets>
<number-of-figures>7</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20110096881</doc-number>
<kind>A1</kind>
<date>20110428</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Villarino-Villa</last-name>
<first-name>Ruben</first-name>
<address>
<city>Munich</city>
<country>DE</country>
</address>
</addressbook>
<residence>
<country>DE</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Kuhwald</last-name>
<first-name>Thomas</first-name>
<address>
<city>Markt Schwaben</city>
<country>DE</country>
</address>
</addressbook>
<residence>
<country>DE</country>
</residence>
</us-applicant>
<us-applicant sequence="003" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Freidhof</last-name>
<first-name>Markus</first-name>
<address>
<city>Kirchseeon</city>
<country>DE</country>
</address>
</addressbook>
<residence>
<country>DE</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Villarino-Villa</last-name>
<first-name>Ruben</first-name>
<address>
<city>Munich</city>
<country>DE</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Kuhwald</last-name>
<first-name>Thomas</first-name>
<address>
<city>Markt Schwaben</city>
<country>DE</country>
</address>
</addressbook>
</inventor>
<inventor sequence="003" designation="us-only">
<addressbook>
<last-name>Freidhof</last-name>
<first-name>Markus</first-name>
<address>
<city>Kirchseeon</city>
<country>DE</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Marshall, Gerstein &#x26; Borun LLP</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>Rohde &#x26; Schwarz GmbH &#x26; Co. KG</orgname>
<role>03</role>
<address>
<city>M&#xfc;nchen</city>
<country>DE</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Fan</last-name>
<first-name>Chieh M</first-name>
<department>2632</department>
</primary-examiner>
<assistant-examiner>
<last-name>Aghdam</last-name>
<first-name>Freshteh N</first-name>
</assistant-examiner>
</examiners>
<pct-or-regional-filing-data>
<document-id>
<country>WO</country>
<doc-number>PCT/EP2008/006849</doc-number>
<kind>00</kind>
<date>20080820</date>
</document-id>
<us-371c124-date>
<date>20100217</date>
</us-371c124-date>
</pct-or-regional-filing-data>
<pct-or-regional-publishing-data>
<document-id>
<country>WO</country>
<doc-number>WO2009/039923</doc-number>
<kind>A </kind>
<date>20090402</date>
</document-id>
</pct-or-regional-publishing-data>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">A method for the recovery of a clock signal from a data signal, wherein the edges of the data signal and the clock signal are each presented by an ordered sequence of timing points, comprising determining missing edges in the sequence of data-signal edges, inserting new data-signal edges (D<sub>x</sub>) into the sequence of data-signal edges to obtain a completed sequence of data-signal edges, and recovering the clock signal from the completed sequence of data-signal edges. The detection of missing edges in the sequence of data-signal edges is based on a prediction of the clock signal (FRONT CLOCK).</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="49.28mm" wi="150.37mm" file="US08625729-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="115.40mm" wi="139.19mm" file="US08625729-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="156.21mm" wi="107.87mm" orientation="landscape" file="US08625729-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="160.78mm" wi="99.82mm" orientation="landscape" file="US08625729-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="150.96mm" wi="104.06mm" orientation="landscape" file="US08625729-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="186.69mm" wi="108.54mm" orientation="landscape" file="US08625729-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="182.12mm" wi="120.48mm" orientation="landscape" file="US08625729-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="169.50mm" wi="129.62mm" orientation="landscape" file="US08625729-20140107-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">BACKGROUND OF THE INVENTION</heading>
<p id="p-0002" num="0001">1. Field of the Invention</p>
<p id="p-0003" num="0002">The invention relates to a method for clock data recovery and an associated device</p>
<p id="p-0004" num="0003">2. Technical Background and Prior Art</p>
<p id="p-0005" num="0004">In digital transmission technology, many binary data streams, especially serial data streams with a high bit rate, are transmitted without accompanying clock signal. The goal of clock data recovery (clock data recovery, CDR) is to determine from the received data stream the frequency and phase of the underlying transmission clock pulse.</p>
<p id="p-0006" num="0005">In a conventional receiver, the recovered transmission clock-pulse signal or clock signal is used for decoding the transmitted bit sequence, wherein the received signal pulse is sampled exactly in the center in order to maximize the signal-noise ratio. In signal analysis, the recovered clock signal is used for the evaluation of the signal quality on the basis of so-called eye diagrams (eye diagram) and other mathematical tools for jitter analysis.</p>
<p id="p-0007" num="0006">The transmission clock pulse is often determined by means of a PLL (phase-locked loop), a phase-locked control circuit. Various standards prescribe a standardized receiver for signal-quality analysis in the form of PLL properties. The recovered clock signal in this context determines the ideal bit start time according to definition. The evaluation of deviations between the zero passes in the received data stream and in the clock signal forms the basis for the jitter analysis.</p>
<p id="p-0008" num="0007">The transmission clock pulse is, in principle, recovered in two different ways for the signal analysis or respectively jitter analysis:
<ul id="ul0001" list-style="none">
    <li id="ul0001-0001" num="0000">
    <ul id="ul0002" list-style="none">
        <li id="ul0002-0001" num="0008">The PLL is realized in hardware through the use of components. The user feeds the time-continuous data stream into the PLL and obtains a time-continuous clock signal and the data stream delayed by the processing latency. The data stream and clock signal are synchronised with one another. The method operates online in real time; the data stream is observed constantly.</li>
        <li id="ul0002-0002" num="0009">The PLL is modelled in software with an arithmetic specification. A measuring device takes up a portion of the data stream and applies the clock data recovery algorithm. The clock signal for the recorded data portion is recovered from this. The method generally operates offline, because the processing time of the algorithm is longer than the time duration of the recorded data portion.</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0009" num="0010">Hardware PLLs known from the prior art can be subdivided into three categories: linear PLLs, digital PLLs and all-digital PLLs (all-digital PLL). All three types of PLL process and generate analog, time-continuous signals, wherein the digital and all-digital PLLs are adapted for the processing of binary, serial data streams.</p>
<p id="p-0010" num="0011">The term &#x201c;software PLL&#x201d; generally denotes the arithmetic specification, which models the functioning of a hardware PLL. One approach is to describe the operation of the analog components mathematically and accordingly to process a highly sampled version of the received data stream. A second approach is based on the observation that only the zero passes in the data stream contain the relevant information for the clock data recovery. In this case, the position of the zero passes is initially determined by interpolation of the stored data portion and from this, the zero passes of the clock signal are then calculated.</p>
<p id="p-0011" num="0012"><figref idref="DRAWINGS">FIG. 1</figref> shows the simplified structure of a PLL according to the prior art. The input signal x<sub>0</sub>(k) is a list with the time position of the zero passes in the data stream, also referred to below as data edges. The calculated clock edges are referred to as y(k). The PLL generates only one clock edge per bit period. If the underlying, time-continuous clock signal is imagined as a sinusoidal oscillation, then y(k) denotes the timing points with phase equal to 0.</p>
<p id="p-0012" num="0013">The x<sub>0</sub>(k) are chronologically ordered and processed sequentially. Initially, the time difference e(k) between data edges and clock edges is formed in the phase detector. Since no signal throughput takes place when the transmitter transmits two or more identical bits in succession, the number of data edges is generally smaller than the number of transmitting bits.</p>
<p id="p-0013" num="0014">The software PLL recovers the underlying clock pulse in the form of a sequence of clock edges y(k). The processing steps are, for example:
<ul id="ul0003" list-style="none">
    <li id="ul0003-0001" num="0000">
    <ul id="ul0004" list-style="none">
        <li id="ul0004-0001" num="0015">Phase or timing error: e(k)=x<sub>0</sub>(k)&#x2212;y(k)</li>
        <li id="ul0004-0002" num="0016">Handling of missing edges: a) If |e(k)|&#x3c;T<sub>0</sub>/2 set e(k)=0 and reject x<sub>0</sub>(k);
        <ul id="ul0005" list-style="none">
            <li id="ul0005-0001" num="0017">b) If |e(k)|&#x3e;T<sub>0</sub>/2, set e(k)=0 and retain x<sub>0</sub>(k) for the next iteration.</li>
        </ul>
        </li>
        <li id="ul0004-0003" num="0018">Filtered errors: d(k)=F(q<sup>&#x2212;1</sup>)&#xb7;e(k)</li>
        <li id="ul0004-0004" num="0019">Momentary bit-period estimate: T<sub>b</sub>(k)=T<sub>0</sub>+d(k)</li>
        <li id="ul0004-0005" num="0020">Next clock edge: y(k+1)=q&#xb7;A(q<sup>&#x2212;1</sup>)&#xb7;T<sub>b</sub>(k)</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0014" num="0021">With a targeted selection of the coefficients of F(q<sup>1</sup>) and A(q<sup>&#x2212;1</sup>), this software PLL can approximate the theoretical PLL transmission function very well provided it operates offline. In the case of a realization operating in real time, it should be borne in mind, that each of the above processing steps requires a certain processing time. The total realization-determined delay falsifies the transmission function of the phase-locked loop and can even endanger stability. As a rule of thumb, a real-time-capable software PLL according to the prior art can only be used for the analysis of data streams, of which the bit period T<sub>b </sub>is greater than the processing time for calculating a new clock edge T<sub>MIN</sub>.</p>
<heading id="h-0002" level="1">SUMMARY OF THE INVENTION</heading>
<p id="p-0015" num="0022">The invention provides a method and a device for clock data recovery, which determines the clock edge positions by processing data edges and with which the minimal analysable bit period is as small as possible.</p>
<p id="p-0016" num="0023">Accordingly, the invention provides a method for the recovery of a clock signal from a data signal, wherein the edges of the data signal and of the clock signal are each presented by an ordered sequence of timing points, comprising the steps: determination of missing edges in the sequence of data-signal edges; insertion of new data-signal edges into the sequence of data signal edges, in order to obtain a completed sequence of data-signal edges; recovery of the clock signal from the completed sequence of data-signal edges, characterized in that the detection of missing edges in the sequence of data-signal edges is based upon a prediction of the clock signal (FRONT CLOCK).</p>
<p id="p-0017" num="0024">The invention also provides a machine-readable data medium, which stores instructions, which, when executed by a computer, implements the inventive method.</p>
<p id="p-0018" num="0025">The invention further provides a system for the recovery of a clock signal from a data signal, wherein the edges of the data signal and the clock signal are each presented by an ordered sequence of timing points, comprising means for determining missing edges in the sequence of data-signal edges, means for inserting new data-signal edges into the sequence of data-signal edges to obtain a completed sequence of data-signal edges, and means for recovering the clock signal from the completed sequence of data-signal edges, wherein the means for detecting the missing edges in the sequence of data-signal edges further comprises means predicting the clock signal (FRONT CLOCK), upon which the detection is based.</p>
<p id="p-0019" num="0026">A method for the recovery of a clock signal from a data signal, wherein the edges of the data signal and the clock signal are each presented by an ordered sequence of timing points, comprises the steps:
<ul id="ul0006" list-style="none">
    <li id="ul0006-0001" num="0000">
    <ul id="ul0007" list-style="none">
        <li id="ul0007-0001" num="0027">determination of missing edges in the sequence of data-signal edges;</li>
        <li id="ul0007-0002" num="0028">insertion of new data-signal edges into the sequence of data-signal edges, in order to obtain a completed sequence of data-signal edges; and</li>
        <li id="ul0007-0003" num="0029">recovery of the clock signal from the completed sequence of data-signal edges.</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0020" num="0030">According to the invention, the detection of missing edges in the sequence of data-signal edges is based on a prediction of the clock signal (FRONT CLOCK).</p>
<p id="p-0021" num="0031">In other words, the phase-locked loop from <figref idref="DRAWINGS">FIG. 1</figref> is converted in such a manner that the missing edges are detected and filled outside the actual phase-locked loop and the PLL core accordingly consists only of the loop filter F(q<sup>&#x2212;1</sup>), the accumulator A(q<sup>&#x2212;1</sup>), the adder for determining the phase error e(k) and T<sub>0</sub>. This processing of signals with missing edges is based on a predictive assignment of the clock edges and data edges. Missing edges, which occur because of the transmission of several identical bits in succession can be detected and handled separately, for example, by interpolation.</p>
<p id="p-0022" num="0032">Relocating the handling of missing edges outside the phase-locked loop according to the invention achieves a simplification of the phase-locked loop by reducing the operational steps in the phase-locked loop. Accordingly, the minimal analysable bit period T<sub>MIN </sub>can be reduced. Moreover, it is possible to convert the simplified phase-locked loop into an equivalent structure for parallel processing of several successive data edges (block filtering), which increases the throughput of the software PLL by a considerable factor.</p>
<p id="p-0023" num="0033">In fact, the relocated handling of missing edges introduces an additional error component into the system. However, the smaller the prediction depth, the PLL bandwidth and the ratio of missing edges to transmitted bits, the better the proposed clock data recovery method will approximate the behaviour of the original software PLL from <figref idref="DRAWINGS">FIG. 1</figref>.</p>
<p id="p-0024" num="0034">Advantageous exemplary embodiments are outlined in the following sections.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0025" num="0035">The drawings are as follows:</p>
<p id="p-0026" num="0036"><figref idref="DRAWINGS">FIG. 1</figref> shows a block-circuit diagram of a data-edge processing software PLL according to the prior art;</p>
<p id="p-0027" num="0037"><figref idref="DRAWINGS">FIG. 2</figref> shows a block-circuit diagram of a software PLL according to a first embodiment of the invention;</p>
<p id="p-0028" num="0038"><figref idref="DRAWINGS">FIG. 3</figref> shows a block-circuit diagram of a software PLL according to a second embodiment of the invention;</p>
<p id="p-0029" num="0039"><figref idref="DRAWINGS">FIG. 4</figref> shows the pairing of data edges and clock edges (edge assignment);</p>
<p id="p-0030" num="0040"><figref idref="DRAWINGS">FIG. 5</figref> shows the phase offset in the edge assignment;</p>
<p id="p-0031" num="0041">Phase <b>6</b> shows the determination of the effective number of clock edges;</p>
<p id="p-0032" num="0042"><figref idref="DRAWINGS">FIG. 7</figref> shows two methods for edge assignment.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0004" level="1">DETAILED DESCRIPTION OF THE INVENTION</heading>
<p id="p-0033" num="0043"><figref idref="DRAWINGS">FIG. 2</figref> shows a block circuit diagram of a first embodiment of the invention. According to the invention, a predictive assignment of clock edges and data edges and a determination of missing edges is initially implemented in the block marked with EMPU (edge matching and patching unit). For this task, the EMPU uses a prediction of the clock edges &#x177;(k+L). The prediction is required because the duration of the processing in the EMPU and in the PLL core introduces in total system latency of L data edges. Using &#x177;(k+L), the EMPU determines an interpolated, gap-free data edge sequence x(k+L) from the coarse data edge sequence x<sub>0</sub>(k+L), which generally provides several missing edges.</p>
<p id="p-0034" num="0044">This sequence of data edges x(k) is then processed in the main control loop of the PLL, also referred to below as the PLL core, in order to determine the clock edges y(k). The PLL core comprises a loop filter F(e), an accumulator A(q<sup>&#x2212;1</sup>), an adder for determining the phase error e(k) and the contribution of the nominal bit period T<sub>0</sub>.</p>
<p id="p-0035" num="0045">The dotted line indicates that the EMPU is coupled to the PLL core, for example, via the recovered clock edges y(k).</p>
<p id="p-0036" num="0046">The following section explains the functioning and favourable embodiments of the EMPU.</p>
<p id="p-0037" num="0047"><figref idref="DRAWINGS">FIG. 3</figref> shows a block circuit diagram of a software PLL according to a second embodiment of the invention. The EMPU can be subdivided into a block referred to as the EMU (edge matching unit) for the assignment of data edges and clock edges and a block referred to as the EPU (edge patching unit) for filling the missing edges.</p>
<p id="p-0038" num="0048">In the edge matching unit (EMU), the incoming data edges are initially assigned to a given bit period, and accordingly the missing edges are detected. The EMU uses the clock edge prediction &#x177;<sup>M</sup>(k+L) in order to insert placeholders into the data edge sequence x<sub>0</sub>(k+L) in the case of the missing edges. Following this, the missing-edge placeholders are replaced in the edge patching unit (EPU) by an appropriate value. This results in the interpolated, gap-free data edge sequence x(k+L).</p>
<p id="p-0039" num="0049">A predictor supplies two edge sequences. The EMU can use a clock edge prediction &#x177;<sup>M</sup>(k+L) to subdivide the time axis into mutually adjacent intervals of the width of one bit period and accordingly to implement an assignment of the data edge positions to the intervals. The EPU can use the sequence &#x177;<sup>P</sup>(k+L) for the interpolation of the data edges, in order to bring about a desired behaviour of the phase error e(k) in the PLL core in the case of missing edges. Dependent upon the application, the sequences can be identical.</p>
<p id="p-0040" num="0050">One possible functioning of the EMU will be presented in greater detail in the following section.</p>
<p id="h-0005" num="0000">Edge Assignment</p>
<p id="p-0041" num="0051"><figref idref="DRAWINGS">FIG. 4</figref> shows, with reference to an example, the basic problem in the assignment of data edges and clock edges. The data edges x<sub>0</sub>(k) and clock edges y(k) are each entered on the time axis with dotted arrows and continuous arrows. The recovered clock edges represent the anticipated position of the noise-free data edges according to definition and are taken as a reference point for the edge assignment. Starting from the clock edges, the time axis is subdivided into mutually adjacent intervals. By way of simplification, it should be imagined that every clock edge is disposed in the center of an interval of the length of one bit period T<sub>b</sub>.</p>
<p id="p-0042" num="0052">In theory, it is possible to distinguish three cases:
<ul id="ul0008" list-style="none">
    <li id="ul0008-0001" num="0000">
    <ul id="ul0009" list-style="none">
        <li id="ul0009-0001" num="0053">1. If a single data edge is disposed within a given interval, it can be unambiguously assigned to the corresponding clock edge (indices &#x2018;k&#x2212;1&#x2019; and &#x2018;K+1&#x2019; in <figref idref="DRAWINGS">FIG. 3</figref>).</li>
        <li id="ul0009-0002" num="0054">2. If no data edge is disposed within an interval, a so-called &#x2018;missing edge&#x2019; (English: missing edge) may be present (index &#x2018;k&#x2019;). Missing edges occur in the case of a transmission of the sequences &#x201c; . . . 00 . . . &#x201d; or &#x201c; . . . 11 . . . &#x201d;, because no signal interface occurs between the two bits. Missing edges can be marked and handled separately.</li>
        <li id="ul0009-0003" num="0055">3. Several data edges in the same interval can indicate glitches in the signal, a low SNR or a still-unsettled PLL. In this case, one data edge can be retained and the others can be rejected (index &#x2018;k+1&#x2019;). As an alternative, all edges can be rejected because basically all are equally false.</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0043" num="0056">Conventional software or hardware PLLs operate in a basically sequential manner and determine the clock edge y(k+1) by processing earlier data edges and clock edges up to the time index k. However, for the edge assignment according to the invention, a prediction &#x177;(k) of the clock edges y(k) is required, because the clock edge y(k) is not yet available at this time.</p>
<p id="p-0044" num="0057">For this purpose, the EMU defines a secondary clock signal, referred to below as &#x2018;front clock&#x2019;. The front clock &#x177;<sup>M</sup>(k) represents a prediction of the recovered clock edges y(k) and is used in the subdivision of the time axis for the edge assignment. In one embodiment of the invention, the front clock can be coupled with the PLL core and therefore with the recovered clock edges y(k), as indicated by the dotted line in the block-circuit diagrams of <figref idref="DRAWINGS">FIG. 3</figref>.</p>
<p id="p-0045" num="0058">In one possible embodiment, the front clock estimates the future clock edges y(k) according to the approach &#x201c;the PLL clock will continue for the next N bit periods with the nominal bit period T<sub>0</sub>&#x201d;. This approach for determining the front clock &#x177;<sup>M</sup>(k) is favourable for implementation purposes, because T<sub>0 </sub>is a known operating parameter, but presupposes small prediction depths L and a slight deviation of the momentary bit periods {circumflex over (T)}<sub>b </sub>from the nominal value T<sub>0</sub>. The non-fulfillment of the prediction assumption leads to a phase offset between the clock edges y(k) and the front clock. After the settling of the PLL on the data stream with constant bit period T<sub>0</sub>, the phase offset can be approximated as follows:</p>
<p id="p-0046" num="0059">
<maths id="MATH-US-00001" num="00001">
<math overflow="scroll">
<mtable>
  <mtr>
    <mtd>
      <mrow>
        <mi>&#x3c6;</mi>
        <mo>=</mo>
        <mrow>
          <mrow>
            <mfrac>
              <mrow>
                <msub>
                  <mi>T</mi>
                  <mi>b</mi>
                </msub>
                <mo>-</mo>
                <msub>
                  <mi>T</mi>
                  <mn>0</mn>
                </msub>
              </mrow>
              <msub>
                <mi>T</mi>
                <mi>b</mi>
              </msub>
            </mfrac>
            <mo>&#xb7;</mo>
            <mrow>
              <mi>L</mi>
              <mo>&#x2062;</mo>
              <mstyle>
                <mtext>
</mtext>
              </mstyle>
              <mo>[</mo>
              <mi>UI</mi>
              <mo>]</mo>
            </mrow>
          </mrow>
          <mo>&#x2062;</mo>
          <mstyle>
            <mspace width="0.8em" height="0.8ex"/>
          </mstyle>
          <mo>&#x2062;</mo>
          <mrow>
            <mo>(</mo>
            <mrow>
              <mi>Unit</mi>
              <mo>&#x2062;</mo>
              <mstyle>
                <mspace width="0.8em" height="0.8ex"/>
              </mstyle>
              <mo>&#x2062;</mo>
              <mi>Interval</mi>
            </mrow>
            <mo>)</mo>
          </mrow>
        </mrow>
      </mrow>
    </mtd>
    <mtd>
      <mrow>
        <mo>(</mo>
        <mn>1</mn>
        <mo>)</mo>
      </mrow>
    </mtd>
  </mtr>
</mtable>
</math>
</maths>
<br/>
wherein
<ul id="ul0010" list-style="none">
    <li id="ul0010-0001" num="0000">
    <ul id="ul0011" list-style="none">
        <li id="ul0011-0001" num="0060">T<sub>b</sub>: denotes the bit period of the data stream</li>
        <li id="ul0011-0002" num="0061">T<sub>0</sub>: denotes the nominal bit period</li>
        <li id="ul0011-0003" num="0062">L: denotes the prediction depth or respectively processing latency measured in number of periods.</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0047" num="0063">If the front clock is used instead of the PLL clock for the edge assignment, the phase offset causes a displacement in the underlying time intervals relative to their ideal position. In the case illustrated in <figref idref="DRAWINGS">FIG. 4</figref>, the data edge is disposed so unfavourably, that the EMU assigns it erroneously on the basis of the phase offset to the k-th interval. An excessively large phase offset can noticeably impair the settling properties and jitter robustness of the clock recovery.</p>
<p id="p-0048" num="0064">An improved performance is generally obtained if the front clock is determined according to the approach &#x201c;the PLL clock will continue for the next N bit periods with the last-estimated momentary bit period {circumflex over (T)}<sub>b</sub>&#x201d;. This approach exploits the fact that the PLL reacts slowly to changes in the input signal because of its narrow band width. Accordingly, after settling on a data stream of constant bit period T<sub>b </sub>according to (1), the phase offset is now approximately &#x3c6;=0. Other prediction approaches are conceivable.</p>
<p id="h-0006" num="0000">Data Edges in a Time Window</p>
<p id="p-0049" num="0065">Within a system operating online, the data stream is observed constantly. The clock data recovery is presented with a set of new data edges regularly, for example, every system clock pulse, via an external auxiliary device. The system clock pulse defines a given window on the time axis. The data edges must be assigned to one of the clock edges disposed within the window. If the bit period of the data stream is smaller than the time window or respectively the system clock pulse, this can be handled with an edge assignment implemented in parallel.</p>
<p id="p-0050" num="0066">Against this background, the functioning of the EMU can be subdivided into two sub-tasks. Initially, the clock edges covered by the current system clock pulse or respectively current time window are determined using the front clock. Following this, the received data edges are paired with the clock edges and accordingly the missing edges are also determined.</p>
<p id="p-0051" num="0067"><figref idref="DRAWINGS">FIG. 5</figref> shows by way of example data edges and clock edges, which are each disposed on the time axis, as dotted and continuous arrows. The time window defined by the current system clock pulse is marked with a grey background. The following applies:
<ul id="ul0012" list-style="none">
    <li id="ul0012-0001" num="0000">
    <ul id="ul0013" list-style="none">
        <li id="ul0013-0001" num="0068">The k-th and (k+1)-th intervals fit completely into the m-th time window. The unambiguous assignment of clock edges and data edges is possible.</li>
        <li id="ul0013-0002" num="0069">The part of the (k&#x2212;1)-th interval, which has not yet been observed in the (m&#x2212;1)-th time window, is covered by the current time window. After the (k&#x2212;1)-th interval has been completely scanned, an unambiguous edge assignment is also possible here.</li>
        <li id="ul0013-0003" num="0070">The (k+2)-th interval is only partially covered and cannot be released for the edge assignment. The data edge already disposed within the interval is stored and evaluated in the next system clock pulse.</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0052" num="0071">The front clock specifies the position of the clock edges t<sub>F</sub>(k). In order to determine the time intervals covered by the current time window, it is helpful to compare the upper limit of the k-th interval t<sub>F</sub><sup>+</sup>(k), which is derived from the clock edges, for example, according to t<sub>F</sub><sup>+</sup>(k)=t<sub>F</sub>(k)+T<sub>0</sub>/2, with the upper limits of the m-th time window t<sub>S</sub><sup>+</sup>(m). With reference to <figref idref="DRAWINGS">FIG. 5</figref>, the following applies:
<ul id="ul0014" list-style="none">
    <li id="ul0014-0001" num="0000">
    <ul id="ul0015" list-style="none">
        <li id="ul0015-0001" num="0072">t<sub>F</sub><sup>+</sup>(k&#x2212;1) has already been calculated in the evaluation of the (m&#x2212;1)-th time window and is known.</li>
        <li id="ul0015-0002" num="0073">t<sub>F</sub><sup>+</sup>(k&#x2212;1), t<sub>F</sub><sup>+</sup>(k) and t<sub>F</sub><sup>+</sup>(k+1) are all smaller than t(m). The corresponding intervals are released for the edge assignment. The number of processed clock edges is three.</li>
        <li id="ul0015-0003" num="0074">t<sub>F</sub><sup>+</sup>(k+2) is larger than t<sub>S</sub><sup>+</sup>(m). Both t<sub>F</sub><sup>+</sup>(k+2) and also the received data edges are stored until the next system clock pulse.</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0053" num="0075">In summary, the effective number of clock edges in the m-th time window is determined with regard to how many t<sub>F</sub><sup>+</sup>(k) fit between the timing points t<sub>S</sub><sup>+</sup>(m&#x2212;1) and t<sub>S</sub><sup>+</sup>(m).</p>
<p id="p-0054" num="0076"><figref idref="DRAWINGS">FIG. 6</figref> illustrates two possible methods for the assignment of data edges and clock edges. Four data edges, D<b>0</b> to D<b>3</b> are contained in the time window. The effective number of clock edges is also four: C<b>0</b>, C<b>1</b>, C<b>2</b> and C<b>3</b>. C<b>4</b> is not processed, because its upper time limit t<sub>F</sub><sup>+</sup>(<b>4</b>) is disposed outside the time window.</p>
<p id="p-0055" num="0077">Method A combines data edges with clock edges according to the rule:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>If |<i>D</i><sub>a</sub><i>&#x2212;C</i><sub>b</sub>|&#x2266;&#x394;,then <i>D</i><sub>a </sub>and <i>C</i><sub>b </sub>fit together(<i>a,b&#x2267;</i>0),&#x2003;&#x2003;(2)<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
wherein D is selected so that the time axis is subdivided into non-overlapping intervals. Data edges, which occur in the regions not covered by the intervals are simply ignored. According to <figref idref="DRAWINGS">FIG. 6</figref>, the following applies:
<ul id="ul0016" list-style="none">
    <li id="ul0016-0001" num="0000">
    <ul id="ul0017" list-style="none">
        <li id="ul0017-0001" num="0078">C<b>0</b> and C<b>3</b> remain without a partner and are marked as missing edges.</li>
        <li id="ul0017-0002" num="0079">C<b>1</b> is linked with D<b>0</b>.</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0056" num="0080">D<b>1</b> and D<b>2</b> should be assigned to C<b>2</b>. A maximum of one data edge per clock edge is permitted, and accordingly, one of the two is selected. The occurrence of a data-edge collision is reported if required.</p>
<p id="p-0057" num="0081">The edge assignment can be described formally in the form of a matrix by the following table:</p>
<p id="p-0058" num="0082">
<tables id="TABLE-US-00001" num="00001">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217pt" align="center"/>
<thead>
<row>
<entry namest="1" nameend="1" rowsep="1">TABLE 1</entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
<row>
<entry>assignment to matrix for Method A.</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="6">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="63pt" align="left"/>
<colspec colname="2" colwidth="14pt" align="center"/>
<colspec colname="3" colwidth="56pt" align="center"/>
<colspec colname="4" colwidth="14pt" align="center"/>
<colspec colname="5" colwidth="56pt" align="center"/>
<tbody valign="top">
<row>
<entry/>
<entry>|D<sub>a </sub>&#x2212; C<sub>b</sub>| &#x2266; &#x394;</entry>
<entry>C0</entry>
<entry>C1</entry>
<entry>C2</entry>
<entry>C3</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="5" align="center" rowsep="1"/>
</row>
<row>
<entry/>
<entry>D0</entry>
<entry>0</entry>
<entry>1</entry>
<entry>0</entry>
<entry>0</entry>
</row>
<row>
<entry/>
<entry>D1</entry>
<entry>0</entry>
<entry>0</entry>
<entry>1</entry>
<entry>0</entry>
</row>
<row>
<entry/>
<entry>D2</entry>
<entry>0</entry>
<entry>0</entry>
<entry>1</entry>
<entry>0</entry>
</row>
<row>
<entry/>
<entry>D3</entry>
<entry>0</entry>
<entry>0</entry>
<entry>0</entry>
<entry>0</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="5" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0059" num="0083">The clock edges and data edges are sorted in each case in chronological order. On the assumption that a maximum of one data edge occurs per bit period, the calculation of the elements in the lower, shaded triangular matrix can be skipped in order to lower the computational cost and are set to 0 as a default. However, this reduces the robustness of the assignment matrix if several data edges per bit period occur, as can be the case, for example, during the settling of the PLL. Embodiments of the invention are also possible, in which only the calculation of the elements of the lowest diagonals are skipped.</p>
<p id="p-0060" num="0084">Method B presents an alternative embodiment of the same approach. Here, the time axis is subdivided via the timing points Q<sub>b </sub>into mutually adjacent intervals. The Q<sub>b </sub>correspond to the timing points t<sub>F</sub><sup>+</sup>(k), which are calculated in order to determine the effective clock edge number. Data edges and clock edges are now linked to one another according to the following rule:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>If <i>Q</i><sub>b-1</sub><i>&#x3c;D</i><sub>a</sub><i>&#x2266;Q</i><sub>b</sub>,then <i>D</i><sub>a </sub>and <i>C</i><sub>b </sub><i>fit </i>together(<i>a,b&#x2267;</i>0)&#x2003;&#x2003;(3).<?in-line-formulae description="In-line Formulae" end="tail"?>
</p>
<p id="p-0061" num="0085">Accordingly, in the example under consideration, the same assignment matrix is obtained as with Method A. Missing edges are assumed, if rule (3) does not apply.</p>
<p id="h-0007" num="0000">Interpolation of the Missing Edges</p>
<p id="p-0062" num="0086">The missing edges detected according to one of the two methods are handled separately. According to the invention, the EMPU interpolates x<sub>0</sub>(k) and generates an gap-free data-edge sequence x(k), which is then processed by the PLL core. The interpolation is implemented, for example, by filling the missing edges with an artificial edge. In this context, the phase error e(k) can be influenced by setting the interpolated data edges in an appropriate manner such that the methods for the treatment of missing edges used in the conventional PLL according to the prior art are approximated.</p>
<p id="p-0063" num="0087">In the embodiment presented with reference to <figref idref="DRAWINGS">FIG. 3</figref>, the EPU can use the sequence &#x177;<sup>P</sup>(k+L), in order to bring about a desired behaviour of the phase error e(k) in the PLL core in the case of missing edges. For example, in one embodiment of the invention, a missing edge can be filled with a prediction of the clock edge. Accordingly, the following applies in the PLL core:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>e</i>(<i>k</i>)=<i>&#x177;</i><sup>P</sup>(<i>k</i>)&#x2212;<i>y</i>(<i>k</i>)&#x2248;0<?in-line-formulae description="In-line Formulae" end="tail"?>
</p>
<p id="p-0064" num="0088">Other approaches such as e(k)=e(k&#x2212;1) can be realized through an appropriate selection of the edges to be interpolated. For example, if x<sub>0</sub><sup>M</sup>(k+L&#x2212;1) is a data edge and x<sub>0</sub><sup>M</sup>(k+L) contains a missing edge, the following approach can be applied:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>x</i>(<i>k+L&#x2212;</i>1)=<i>x</i><sub>0</sub><sup>M</sup>(<i>k+L&#x2212;</i>1)<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>x</i>(<i>k+L</i>)=<i>&#x177;</i><sup>P</sup>(<i>k+L</i>)=<i>x</i>(<i>k+L&#x2212;</i>1)+<i>{circumflex over (T)}</i><sub>b</sub>(<i>k</i>)<?in-line-formulae description="In-line Formulae" end="tail"?>
</p>
<p id="p-0065" num="0089">In this context, it must be remembered that for the determination of x(k+L), only the estimation of the bit period {circumflex over (T)}<sub>b</sub>(k) delayed by L bit periods is available in view of the system latency. Accordingly, if a newly inserted data-signal edge corresponds to the sum of the data edge last calculated and the bit period {circumflex over (T)}<sub>b</sub>(k) last estimated, the phase error e(k) is calculated as follows in the PLL core:</p>
<p id="p-0066" num="0090">
<maths id="MATH-US-00002" num="00002">
<math overflow="scroll">
  <mrow>
    <mrow>
      <mi>e</mi>
      <mo>&#x2061;</mo>
      <mrow>
        <mo>(</mo>
        <mrow>
          <mi>k</mi>
          <mo>-</mo>
          <mn>1</mn>
        </mrow>
        <mo>)</mo>
      </mrow>
    </mrow>
    <mo>=</mo>
    <mi/>
    <mo>&#x2062;</mo>
    <mrow>
      <mrow>
        <mi>y</mi>
        <mo>&#x2061;</mo>
        <mrow>
          <mo>(</mo>
          <mrow>
            <mi>k</mi>
            <mo>-</mo>
            <mn>1</mn>
          </mrow>
          <mo>)</mo>
        </mrow>
      </mrow>
      <mo>-</mo>
      <mrow>
        <mi>x</mi>
        <mo>&#x2061;</mo>
        <mrow>
          <mo>(</mo>
          <mrow>
            <mi>k</mi>
            <mo>-</mo>
            <mn>1</mn>
          </mrow>
          <mo>)</mo>
        </mrow>
      </mrow>
    </mrow>
  </mrow>
</math>
</maths>
<maths id="MATH-US-00002-2" num="00002.2">
<math overflow="scroll">
  <mtable>
    <mtr>
      <mtd>
        <mrow>
          <mrow>
            <mi>e</mi>
            <mo>&#x2061;</mo>
            <mrow>
              <mo>(</mo>
              <mi>k</mi>
              <mo>)</mo>
            </mrow>
          </mrow>
          <mo>=</mo>
          <mi/>
          <mo>&#x2062;</mo>
          <mrow>
            <mrow>
              <mi>y</mi>
              <mo>&#x2061;</mo>
              <mrow>
                <mo>(</mo>
                <mi>k</mi>
                <mo>)</mo>
              </mrow>
            </mrow>
            <mo>-</mo>
            <mrow>
              <mi>x</mi>
              <mo>&#x2061;</mo>
              <mrow>
                <mo>(</mo>
                <mi>k</mi>
                <mo>)</mo>
              </mrow>
            </mrow>
          </mrow>
        </mrow>
      </mtd>
    </mtr>
    <mtr>
      <mtd>
        <mrow>
          <mo>=</mo>
          <mi/>
          <mo>&#x2062;</mo>
          <mrow>
            <mrow>
              <mi>y</mi>
              <mo>&#x2061;</mo>
              <mrow>
                <mo>(</mo>
                <mrow>
                  <mi>k</mi>
                  <mo>-</mo>
                  <mn>1</mn>
                </mrow>
                <mo>)</mo>
              </mrow>
            </mrow>
            <mo>+</mo>
            <mrow>
              <msub>
                <mi>T</mi>
                <mi>b</mi>
              </msub>
              <mo>&#x2061;</mo>
              <mrow>
                <mo>(</mo>
                <mi>k</mi>
                <mo>)</mo>
              </mrow>
            </mrow>
            <mo>-</mo>
            <mrow>
              <mo>(</mo>
              <mrow>
                <mrow>
                  <mi>x</mi>
                  <mo>&#x2061;</mo>
                  <mrow>
                    <mo>(</mo>
                    <mrow>
                      <mi>k</mi>
                      <mo>-</mo>
                      <mn>1</mn>
                    </mrow>
                    <mo>)</mo>
                  </mrow>
                </mrow>
                <mo>+</mo>
                <mrow>
                  <msub>
                    <mover>
                      <mi>T</mi>
                      <mo>^</mo>
                    </mover>
                    <mi>b</mi>
                  </msub>
                  <mo>&#x2061;</mo>
                  <mrow>
                    <mo>(</mo>
                    <mi>k</mi>
                    <mo>)</mo>
                  </mrow>
                </mrow>
              </mrow>
              <mo>)</mo>
            </mrow>
          </mrow>
        </mrow>
      </mtd>
    </mtr>
    <mtr>
      <mtd>
        <mrow>
          <mo>=</mo>
          <mi/>
          <mo>&#x2062;</mo>
          <mrow>
            <mrow>
              <mi>e</mi>
              <mo>&#x2061;</mo>
              <mrow>
                <mo>(</mo>
                <mrow>
                  <mi>k</mi>
                  <mo>-</mo>
                  <mn>1</mn>
                </mrow>
                <mo>)</mo>
              </mrow>
            </mrow>
            <mo>+</mo>
            <mrow>
              <mo>(</mo>
              <mrow>
                <mrow>
                  <msub>
                    <mi>T</mi>
                    <mi>b</mi>
                  </msub>
                  <mo>&#x2061;</mo>
                  <mrow>
                    <mo>(</mo>
                    <mi>k</mi>
                    <mo>)</mo>
                  </mrow>
                </mrow>
                <mo>-</mo>
                <mrow>
                  <msub>
                    <mover>
                      <mi>T</mi>
                      <mo>^</mo>
                    </mover>
                    <mi>b</mi>
                  </msub>
                  <mo>&#x2061;</mo>
                  <mrow>
                    <mo>(</mo>
                    <mrow>
                      <mi>k</mi>
                      <mo>-</mo>
                      <mi>L</mi>
                    </mrow>
                    <mo>)</mo>
                  </mrow>
                </mrow>
              </mrow>
              <mo>)</mo>
            </mrow>
          </mrow>
        </mrow>
      </mtd>
    </mtr>
    <mtr>
      <mtd>
        <mrow>
          <mo>&#x2248;</mo>
          <mi/>
          <mo>&#x2062;</mo>
          <mrow>
            <mi>e</mi>
            <mo>&#x2061;</mo>
            <mrow>
              <mo>(</mo>
              <mrow>
                <mi>k</mi>
                <mo>-</mo>
                <mn>1</mn>
              </mrow>
              <mo>)</mo>
            </mrow>
          </mrow>
        </mrow>
      </mtd>
    </mtr>
  </mtable>
</math>
</maths>
</p>
<p id="p-0067" num="0091">That is to say, an approximation of an edge error e(k) according to equation e(k)=e(k&#x2212;1) can be achieved, taking into consideration the latency of the overall system and provided that the momentary bit period only changes slowly within the system latency, by forming the sum of the preceding data edge and the estimate of the bit period delayed by the latency L, in order to calculate the data edge, with which a missing edge is filled.</p>
<p id="p-0068" num="0092">As an alternative, instead of the last-estimated bit period {circumflex over (T)}<sub>b</sub>(k), the nominal bit period T<sub>0 </sub>can also be added to the last calculated data edge. However, in this context, the accumulation of bit-period deviations {circumflex over (&#x394;)}(k)={circumflex over (T)}<sub>b</sub>(k)&#x2212;{circumflex over (T)}<sub>0 </sub>must be considered in the case of an occurrence of several missing edges in succession. In other words, the approximation error is accumulated over the number of successive missing edges and, after N identical bits, amounts to approximately N(T<sub>b</sub>&#x2212;T<sub>0</sub>). The transmission standards define an upper limit for the number of equivalent successive bits, and accordingly, N is small in practice. The accumulated error is automatically reset with every data edge to x<sub>0</sub><sup>M</sup>(k).</p>
<p id="p-0069" num="0093">In summary, by an appropriate selection of &#x177;<sup>P</sup>(k+L), the phase-error behaviour
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>e</i>(<i>k</i>)=<i>f</i>(<i>e</i>(<i>k&#x2212;</i>1),<i>e</i>(<i>k&#x2212;</i>2),<i>e</i>(<i>k&#x2212;</i>3), . . . )<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
can therefore be modelled or at least approximated, wherein f(.) can be an arbitrary function of earlier phase-error values.
</p>
<p id="p-0070" num="0094">Although the filling of the missing edges takes place in the EPU, for the purpose of explanation, this can be realized dependent upon the implementation at one or more positions in the processing path between missing-edge assignment and PLL core.</p>
<p id="p-0071" num="0095">The invention is not restricted to the exemplary embodiment presented. All of the features described and/or illustrated can be combined with one another within the framework of the invention.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-math idrefs="MATH-US-00001" nb-file="US08625729-20140107-M00001.NB">
<img id="EMI-M00001" he="10.92mm" wi="76.20mm" file="US08625729-20140107-M00001.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00002 MATH-US-00002-2" nb-file="US08625729-20140107-M00002.NB">
<img id="EMI-M00002" he="22.94mm" wi="76.20mm" file="US08625729-20140107-M00002.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-claim-statement>The invention claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A method for recovery of a clock signal from a data signal, wherein edges of the data signal and of the clock signal are each presented by an ordered sequence of timing points, comprising the steps:
<claim-text>determining missing edges in the sequence of data-signal edges;</claim-text>
<claim-text>inserting new data-signal edges into the sequence of data-signal edges to obtain a completed sequence of data-signal edges; and,</claim-text>
<claim-text>recovering the clock signal from the completed sequence of data-signal edges,</claim-text>
<claim-text>wherein determining the missing edges in the sequence of data-signal edges is based upon predicting a next clock signal, and</claim-text>
<claim-text>inserting the new data signal edges into the sequence of data-signal edges based on predicting the next clock signal.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein determining the missing edges comprises detecting a missing edge, if no data-signal edge (D<sub>x</sub>) exists for a predicted clock-signal edge (C<sub>y</sub>), so that
<claim-text>
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>|<i>D</i><sub>x</sub><i>&#x2212;C</i><sub>y</sub><i>|&#x2266;&#x394;x,y&#x2267;</i>0,<?in-line-formulae description="In-line Formulae" end="tail"?>
</claim-text>
<claim-text>wherein &#x394; is selected in such a manner that a time axis is subdivided into non-overlapping intervals.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, comprising determining the missing edges includes detecting a missing edge, if no data-signal edge (D<sub>x</sub>) exists, so that
<claim-text>
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>Q</i><sub>y-1</sub><i>&#x3c;D</i><sub>x</sub><i>&#x2266;Q</i><sub>y </sub><i>x,y&#x2267;</i>0<?in-line-formulae description="In-line Formulae" end="tail"?>
</claim-text>
<claim-text>wherein the timing points Q<sub>y </sub>subdivide a time axis into mutually adjacent intervals.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method according to <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein each of the new data-signal edges is substantially identical to a momentary prediction of the clock signal.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method according to <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein each of the new data-signal edges is substantially identical to the sum of the last data-signal edge and a momentarily estimated bit period.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method according to any <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein each of the new data-signal edges is substantially identical to the sum of the last data-signal edge and a nominal bit period (T<sub>0</sub>).</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The method according to <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein each of the new data-signal edges is substantially identical to a momentary prediction of the clock signal.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The method according to <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein each of the new data-signal edges is substantially identical to the sum of the last data-signal edge and a momentarily estimated bit period.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The method according to <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein each of the new data-signal edges is substantially identical to the sum of the last data-signal edge and a nominal bit period (T<sub>0</sub>).</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. A non-transitory computer-readable medium having computer-executable instructions stored in the non-transitory computer-readable medium and adapted to be executed by a computer to implement the method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. A system for recovery of a clock signal from a data signal, wherein edges of the data signal and edges of the clock signal are each presented by an ordered sequence of timing points, comprising:
<claim-text>means for determining missing edges in the sequence of data-signal edges;</claim-text>
<claim-text>means for inserting new data-signal edges into the sequence of data-signal edges to obtain a completed sequence of data-signal edges; and,</claim-text>
<claim-text>means for recovering the clock signal from the completed sequence of data-signal edges,</claim-text>
<claim-text>wherein</claim-text>
<claim-text>the means for determining missing edges in the sequence of data-signal edges further comprises means for predicting a next clock signal, upon which said determination is based,</claim-text>
<claim-text>the means for recovering the clock signal from the completed sequence of data-signal edges do not contain the means for determining missing edges and the means for inserting new data-signal edges, and</claim-text>
<claim-text>the means for predicting the next clock signal is coupled to the means for recovering the clock signal, the means for determining missing edges and the means for inserting new data signal-edges. </claim-text>
</claim-text>
</claim>
</claims>
</us-patent-grant>

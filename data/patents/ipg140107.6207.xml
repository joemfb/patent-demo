<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08627331-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08627331</doc-number>
<kind>B1</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>12771988</doc-number>
<date>20100430</date>
</document-id>
</application-reference>
<us-application-series-code>12</us-application-series-code>
<us-term-of-grant>
<us-term-extension>866</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>9</main-group>
<subgroup>46</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>718106</main-classification>
</classification-national>
<invention-title id="d2e53">Multi-level parallelism of process execution in a mutual exclusion domain of a processing system</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>4333144</doc-number>
<kind>A</kind>
<name>Whiteside et al.</name>
<date>19820600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>4459664</doc-number>
<kind>A</kind>
<name>Pottier et al.</name>
<date>19840700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>4488231</doc-number>
<kind>A</kind>
<name>Yu et al.</name>
<date>19841200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>4494188</doc-number>
<kind>A</kind>
<name>Nakane et al.</name>
<date>19850100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>4742447</doc-number>
<kind>A</kind>
<name>Duvall et al.</name>
<date>19880500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>4745450</doc-number>
<kind>A</kind>
<name>Hartranft et al.</name>
<date>19880500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>4785382</doc-number>
<kind>A</kind>
<name>Fukura et al.</name>
<date>19881100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>4875159</doc-number>
<kind>A</kind>
<name>Cary et al.</name>
<date>19891000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>4914583</doc-number>
<kind>A</kind>
<name>Weisshaar et al.</name>
<date>19900400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>5043873</doc-number>
<kind>A</kind>
<name>Muramatsu et al.</name>
<date>19910800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>5253359</doc-number>
<kind>A</kind>
<name>Spix et al.</name>
<date>19931000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>5280614</doc-number>
<kind>A</kind>
<name>Munroe et al.</name>
<date>19940100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00013">
<document-id>
<country>US</country>
<doc-number>5297265</doc-number>
<kind>A</kind>
<name>Frank et al.</name>
<date>19940300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00014">
<document-id>
<country>US</country>
<doc-number>5307483</doc-number>
<kind>A</kind>
<name>Knipfer et al.</name>
<date>19940400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00015">
<document-id>
<country>US</country>
<doc-number>5327556</doc-number>
<kind>A</kind>
<name>Mohan et al.</name>
<date>19940700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00016">
<document-id>
<country>US</country>
<doc-number>5357612</doc-number>
<kind>A</kind>
<name>Alaiwan</name>
<date>19941000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00017">
<document-id>
<country>US</country>
<doc-number>5454095</doc-number>
<kind>A</kind>
<name>Kraemer et al.</name>
<date>19950900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00018">
<document-id>
<country>US</country>
<doc-number>5481706</doc-number>
<kind>A</kind>
<name>Peek</name>
<date>19960100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00019">
<document-id>
<country>US</country>
<doc-number>5481747</doc-number>
<kind>A</kind>
<name>Kametani</name>
<date>19960100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00020">
<document-id>
<country>US</country>
<doc-number>5483641</doc-number>
<kind>A</kind>
<name>Jones et al.</name>
<date>19960100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00021">
<document-id>
<country>US</country>
<doc-number>5502840</doc-number>
<kind>A</kind>
<name>Barton</name>
<date>19960300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00022">
<document-id>
<country>US</country>
<doc-number>5513314</doc-number>
<kind>A</kind>
<name>Kandasamy et al.</name>
<date>19960400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00023">
<document-id>
<country>US</country>
<doc-number>5590326</doc-number>
<kind>A</kind>
<name>Manabe</name>
<date>19961200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00024">
<document-id>
<country>US</country>
<doc-number>5644709</doc-number>
<kind>A</kind>
<name>Austin</name>
<date>19970700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00025">
<document-id>
<country>US</country>
<doc-number>5782909</doc-number>
<kind>A</kind>
<name>Quiachon et al.</name>
<date>19980700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00026">
<document-id>
<country>US</country>
<doc-number>5790851</doc-number>
<kind>A</kind>
<name>Frank et al.</name>
<date>19980800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00027">
<document-id>
<country>US</country>
<doc-number>5815727</doc-number>
<kind>A</kind>
<name>Motomura</name>
<date>19980900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00028">
<document-id>
<country>US</country>
<doc-number>5826081</doc-number>
<kind>A</kind>
<name>Zolnowsky</name>
<date>19981000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00029">
<document-id>
<country>US</country>
<doc-number>5857180</doc-number>
<kind>A</kind>
<name>Hallmark et al.</name>
<date>19990100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00030">
<document-id>
<country>US</country>
<doc-number>5894555</doc-number>
<kind>A</kind>
<name>Harada et al.</name>
<date>19990400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00031">
<document-id>
<country>US</country>
<doc-number>5931938</doc-number>
<kind>A</kind>
<name>Drogichen et al.</name>
<date>19990800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00032">
<document-id>
<country>US</country>
<doc-number>5940828</doc-number>
<kind>A</kind>
<name>Anaya et al.</name>
<date>19990800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00033">
<document-id>
<country>US</country>
<doc-number>5963962</doc-number>
<kind>A</kind>
<name>Hitz et al.</name>
<date>19991000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00034">
<document-id>
<country>US</country>
<doc-number>6105053</doc-number>
<kind>A</kind>
<name>Kimmel et al.</name>
<date>20000800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00035">
<document-id>
<country>US</country>
<doc-number>6151618</doc-number>
<kind>A</kind>
<name>Wahbe et al.</name>
<date>20001100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00036">
<document-id>
<country>US</country>
<doc-number>6269390</doc-number>
<kind>B1</kind>
<name>Boland</name>
<date>20010700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00037">
<document-id>
<country>US</country>
<doc-number>6289369</doc-number>
<kind>B1</kind>
<name>Sundaresan</name>
<date>20010900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00038">
<document-id>
<country>US</country>
<doc-number>6345240</doc-number>
<kind>B1</kind>
<name>Havens</name>
<date>20020200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00039">
<document-id>
<country>US</country>
<doc-number>6366945</doc-number>
<kind>B1</kind>
<name>Fong et al.</name>
<date>20020400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00040">
<document-id>
<country>US</country>
<doc-number>6378066</doc-number>
<kind>B1</kind>
<name>Lewis</name>
<date>20020400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00041">
<document-id>
<country>US</country>
<doc-number>6434631</doc-number>
<kind>B1</kind>
<name>Bruno et al.</name>
<date>20020800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00042">
<document-id>
<country>US</country>
<doc-number>6471375</doc-number>
<kind>B2</kind>
<name>Kobayashi et al.</name>
<date>20021000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00043">
<document-id>
<country>US</country>
<doc-number>6502122</doc-number>
<kind>B1</kind>
<name>Takeuchi</name>
<date>20021200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00044">
<document-id>
<country>US</country>
<doc-number>6546546</doc-number>
<kind>B1</kind>
<name>Van Doorn</name>
<date>20030400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00045">
<document-id>
<country>US</country>
<doc-number>6604123</doc-number>
<kind>B1</kind>
<name>Bruno et al.</name>
<date>20030800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00046">
<document-id>
<country>US</country>
<doc-number>6622155</doc-number>
<kind>B1</kind>
<name>Haddon et al.</name>
<date>20030900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00047">
<document-id>
<country>US</country>
<doc-number>6658449</doc-number>
<kind>B1</kind>
<name>Brenner et al.</name>
<date>20031200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00048">
<document-id>
<country>US</country>
<doc-number>6662252</doc-number>
<kind>B1</kind>
<name>Marshall et al.</name>
<date>20031200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00049">
<document-id>
<country>US</country>
<doc-number>6691166</doc-number>
<kind>B1</kind>
<name>Gasior et al.</name>
<date>20040200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00050">
<document-id>
<country>US</country>
<doc-number>6714960</doc-number>
<kind>B1</kind>
<name>Bitar et al.</name>
<date>20040300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00051">
<document-id>
<country>US</country>
<doc-number>6728959</doc-number>
<kind>B1</kind>
<name>Merkey</name>
<date>20040400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00052">
<document-id>
<country>US</country>
<doc-number>6745222</doc-number>
<kind>B1</kind>
<name>Jones et al.</name>
<date>20040600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00053">
<document-id>
<country>US</country>
<doc-number>6779182</doc-number>
<kind>B1</kind>
<name>Zolnowsky</name>
<date>20040800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00054">
<document-id>
<country>US</country>
<doc-number>6801943</doc-number>
<kind>B1</kind>
<name>Pavan et al.</name>
<date>20041000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00055">
<document-id>
<country>US</country>
<doc-number>6850947</doc-number>
<kind>B1</kind>
<name>Lim et al.</name>
<date>20050200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00056">
<document-id>
<country>US</country>
<doc-number>7123247</doc-number>
<kind>B2</kind>
<name>Morita</name>
<date>20061000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00057">
<document-id>
<country>US</country>
<doc-number>7178137</doc-number>
<kind>B1</kind>
<name>Peak et al.</name>
<date>20070200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00058">
<document-id>
<country>US</country>
<doc-number>7213247</doc-number>
<kind>B1</kind>
<name>Wilner et</name>
<date>20070500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00059">
<document-id>
<country>US</country>
<doc-number>7290260</doc-number>
<kind>B2</kind>
<name>Miller</name>
<date>20071000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00060">
<document-id>
<country>US</country>
<doc-number>7337442</doc-number>
<kind>B2</kind>
<name>VoBa et al.</name>
<date>20080200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00061">
<document-id>
<country>US</country>
<doc-number>7404067</doc-number>
<kind>B2</kind>
<name>Aamodt et al.</name>
<date>20080700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00062">
<document-id>
<country>US</country>
<doc-number>7694302</doc-number>
<kind>B1</kind>
<name>Rajan et al.</name>
<date>20100400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00063">
<document-id>
<country>US</country>
<doc-number>8347293</doc-number>
<kind>B2</kind>
<name>Lango et al.</name>
<date>20130100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00064">
<document-id>
<country>US</country>
<doc-number>2001/0036181</doc-number>
<kind>A1</kind>
<name>Rogers</name>
<date>20011100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00065">
<document-id>
<country>US</country>
<doc-number>2001/0037408</doc-number>
<kind>A1</kind>
<name>Thrift et al.</name>
<date>20011100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00066">
<document-id>
<country>US</country>
<doc-number>2001/0037450</doc-number>
<kind>A1</kind>
<name>Metlitski et al.</name>
<date>20011100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00067">
<document-id>
<country>US</country>
<doc-number>2001/0042139</doc-number>
<kind>A1</kind>
<name>Jeffords et al.</name>
<date>20011100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00068">
<document-id>
<country>US</country>
<doc-number>2002/0026342</doc-number>
<kind>A1</kind>
<name>Lane et al.</name>
<date>20020200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00069">
<document-id>
<country>US</country>
<doc-number>2002/0078119</doc-number>
<kind>A1</kind>
<name>Brenner et al.</name>
<date>20020600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00070">
<document-id>
<country>US</country>
<doc-number>2002/0091748</doc-number>
<kind>A1</kind>
<name>Rehg et al.</name>
<date>20020700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00071">
<document-id>
<country>US</country>
<doc-number>2004/0117531</doc-number>
<kind>A1</kind>
<name>McKenney</name>
<date>20040600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00072">
<document-id>
<country>US</country>
<doc-number>2005/0172293</doc-number>
<kind>A1</kind>
<name>Petruncola et al.</name>
<date>20050800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00073">
<document-id>
<country>US</country>
<doc-number>2007/0094529</doc-number>
<kind>A1</kind>
<name>Lango et al.</name>
<date>20070400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00074">
<document-id>
<country>DE</country>
<doc-number>69425658</doc-number>
<kind>T2</kind>
<date>20010400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00075">
<document-id>
<country>EP</country>
<doc-number>0145889</doc-number>
<kind>A2</kind>
<date>19850600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00076">
<document-id>
<country>JP</country>
<doc-number>2001167060</doc-number>
<kind>A</kind>
<date>20010600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00077">
<document-id>
<country>WO</country>
<doc-number>WO-94/29807</doc-number>
<kind>A1</kind>
<date>19941200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00078">
<document-id>
<country>WO</country>
<doc-number>0702815</doc-number>
<kind>B1</kind>
<date>19960300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00079">
<document-id>
<country>WO</country>
<doc-number>WO-02/12839</doc-number>
<kind>A2</kind>
<date>20020200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00080">
<othercit>Co-pending U.S. Appl. No. 11/255,859, filed Oct. 20, 2006.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00081">
<othercit>Non-Final Office Action Mailed Nov. 25, 2009 in Co-Pending U.S. Appl. No. 11/266,859, filed Oct. 20, 2005.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00082">
<othercit>Britton, D.E., et al., &#x201c;An Interprocess Communication Facility for Distributed Applications,&#x201d; RCE Laboratories, David Sarnoff Research Center; Princeton, NJ, IEEE 1980, pp. 590-595.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00083">
<othercit>Cheriton, D.R., &#x201c;Multi-Process Structuring and the Thoth Operating System,&#x201d; Development of Computer Science; University of British Columbia, Vancouver, B.C., Canada, Mar. 1979 (68 pages).</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00084">
<othercit>Cheriton, D.R., et al., &#x201c;Thoth, A Portable Real-Time Operating System,&#x201d; vol. 22, Feb. 1979, pp. 105-115, Operations Systems, Communications of the ACM, University of Waterloo.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00085">
<othercit>Cheriton, D.R., &#x201c;The Thoth System: Multi-Process Structuring and Portability,&#x201d; North-Holland, Operating and Programming Systems Series 8&#x2014;The Computer Science Library, Elsevier Science Publishing Co., Inc., 1982, 18 pgs.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00086">
<othercit>Feitelson, D.G., et al., &#x201c;Parallel Job Scheduling: Issues and Approaches,&#x201d; Lecture Notes in Computer Science, vol. 949, Proceedings of the Workshop on Job Scheduling Strategies for Parallel Processing, 1995, pp. 1-18.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00087">
<othercit>IAIA-32 Intel Architecture Software Developer's Manual, vol. 3: System Programming Guide 2004, 26 pgs. Intel Corporation.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00088">
<othercit>Jones, A.K., et al., &#x201c;StarOS, a Multiprocessor Operating System for the Support of Task Forces,&#x201d; Department of Computer Science Carnegie-Mellon University, Pittsburg, PA,, 1979, pp. 117-127.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00089">
<othercit>Joukov, N., et al., &#x201c;Increasing Distributed Storage Survivability With a Stackable RAID-like File System,&#x201d; Cluster Computing and Grid, 2005. CCGRID 2005, IDDD International Symposium on Cardiff, Wales, UK, May 9-12, 2006, Piscataway, NJ, USA, IEEE May 9, 2006, pp. 82-89.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00090">
<othercit>Lantz, K.A., et al., &#x201c;Rochester's Intelligent Gateway,&#x201d; IEEE, Oct. 1982, pp. 54-68.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00091">
<othercit>Malcolm, M.A., &#x201c;A Process Abstraction and Its Application,&#x201d; Department of Computer Science, University of Waterloo, Waterloo, Ontario, Proc. Eighth Manitoba Conference on Numerical Math and Computing, 1978, pp. 33-50.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00092">
<othercit>Nelson, B., et al., &#x201c;The Myth of Transfer Rate-How and Why SCSI is Better than IP1 for NFS,&#x201d; Technical Report 6, Second Edition-Auspex, Jul. 1992, 32 pgs.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00093">
<othercit>Powell, M.L., et al., &#x201c;Process Migration in DEMOS/MP,&#x201d; ACM SIGOPS Operating Systems Review, vol. 17, No. 6, Oct. 1983, pp. 110-119.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00094">
<othercit>Slashdot: Tux2: &#x201c;The Filesystem that would be King,&#x201d; Microsoft Internet Explorer, Oct. 20, 2000, pp. 1-16.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00095">
<othercit>Xiong, J., et al., &#x201c;Design and Performance of the Dawning Cluster File System,&#x201d; Cluster Computing 2003, Proceedings of IEEE International Conference on Dec. 1-3, 2003, Piscataway, NJ, USA, IEEE, Dec. 1, 2003, pp. 1-8.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00096">
<othercit>Final Office Action Mailed Jun. 8, 2010 in Co-Pending U.S. Appl. No. 11/255,869, filed Oct. 20, 2006.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00097">
<othercit>Final Office Action Mailed Apr. 1, 2011 in Co-Pending U.S. Appl. No. 11/255,859, filed Oct. 20, 2005.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00098">
<othercit>Notice of Allowance Mailed Aug. 29, 2012 in Co-Pending U.S. Appl. No. 11/255,859 of Lango, J.A., et al. filed Oct. 20, 2005.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00099">
<othercit>Non-Final Office Action Mailed Oct. 26, 2010 in Co-Pending U.S. Appl. No. 11/255,859 of Lango, J.A., et al., filed Oct. 20, 2005.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>36</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>718106</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>8</number-of-drawing-sheets>
<number-of-figures>8</number-of-figures>
</figures>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Grunwald</last-name>
<first-name>David</first-name>
<address>
<city>Santa Clara</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Kimmel</last-name>
<first-name>Jeffrey S.</first-name>
<address>
<city>Chapel Hill</city>
<state>NC</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Grunwald</last-name>
<first-name>David</first-name>
<address>
<city>Santa Clara</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Kimmel</last-name>
<first-name>Jeffrey S.</first-name>
<address>
<city>Chapel Hill</city>
<state>NC</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Perkins Coie LLP</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>NetApp, Inc.</orgname>
<role>02</role>
<address>
<city>Sunnyvale</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Ho</last-name>
<first-name>Andy</first-name>
<department>2194</department>
</primary-examiner>
<assistant-examiner>
<last-name>Mudrick</last-name>
<first-name>Timothy A</first-name>
</assistant-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">A technique is described for improving throughput in a processing system, such as a network storage server. The technique provides multiple levels (e.g., a hierarchy) of parallelism of process execution within a single mutual exclusion domain, in a manner which allows certain operations on metadata to be parallelized as well as certain operations on user data. The specific parallelization scheme used in any given embodiment is based at least partly on the underlying metadata structures used by the processing system. Consequently, a high degree of parallelization possible, which improves the throughput of the processing system.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="149.94mm" wi="101.60mm" file="US08627331-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="93.13mm" wi="167.64mm" file="US08627331-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="187.45mm" wi="127.59mm" file="US08627331-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="242.15mm" wi="147.07mm" orientation="landscape" file="US08627331-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="199.47mm" wi="146.39mm" file="US08627331-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="176.95mm" wi="129.62mm" orientation="landscape" file="US08627331-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="172.13mm" wi="101.01mm" file="US08627331-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="205.66mm" wi="110.74mm" orientation="landscape" file="US08627331-20140107-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00008" num="00008">
<img id="EMI-D00008" he="257.13mm" wi="165.95mm" file="US08627331-20140107-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">FIELD OF THE INVENTION</heading>
<p id="p-0002" num="0001">At least one embodiment of the present invention pertains to network storage systems, and more particularly, to providing multiple levels of parallelism of process execution in a mutual exclusion domain of a processing system, such as a network storage server.</p>
<heading id="h-0002" level="1">BACKGROUND</heading>
<p id="p-0003" num="0002">Multi-processor computing systems are becoming increasingly more common in a variety of applications. A multi-processor system is one which includes multiple processors, where the processors can be physical processors, logical processors, or a combination thereof. A single physical processor can implement multiple logical processors, as illustrated in <figref idref="DRAWINGS">FIG. 1</figref>, in which one physical processor <b>6</b> includes two logical processors <b>7</b>. In such an implementation, the logical processors generally have some private state, but a portion of the state is shared. Henceforth in this document, the term &#x201c;processor&#x201d; is intended to mean either a physical processor or a logical processor unless the term is otherwise qualified.</p>
<p id="p-0004" num="0003">It is important to ensure that instructions and data are safe for execution in a multi-processor environment. What is meant by &#x201c;safe&#x201d; in this context is that processes running concurrently will not operate on the same data, or if they do, they will be synchronized to avoid conflicting with each other. To ensure that instructions and data are multi-processor safe, the various processes implemented by the operating system can be organized into a number of mutual exclusion domains according to their functionality. A &#x201c;mutual exclusion domain&#x201d; in this context is a set of one or more processes and is sometimes called a &#x201c;mutex&#x201d;. The mutual exclusion domains are defined according to functionality, so that it is not possible for two processes in different domains to operate on the same data simultaneously. Furthermore, generally only one process can execute at a time in each domain (with a few exceptions for operations that are inherently multi-processor safe).</p>
<p id="p-0005" num="0004">A technique for defining and using mutual exclusion domains is known to have been implemented in network storage servers in the prior art. In that technique, the mutual exclusion domains are organized according to the critical path pipeline of the storage server. The critical path can be described as follows: When the storage server receives a data access request (read or write) from a client over a network, a network element of the storage server sends an appropriate message to the storage server's filesystem (storage manager element), which processes the message to determine where the corresponding data is stored, and which then forwards a corresponding message to a RAID element of the storage server. (Note that a &#x201c;filesystem&#x201d;, as the term is used herein, does not necessarily manage data as &#x201c;files&#x201d; per se; for example, a filesystem can manage data in units of LUNs and/or individual data blocks, rather than files.) Each of these phases of processing the request is carried out by a different stage in the pipeline; as such, a separate mutual exclusion domain can be created for each stage, e.g., a domain for all network-specific processes of the storage server, a domain for all filesystem-related processes of the storage server, a domain for all storage-specific processes of the storage server, etc.</p>
<p id="p-0006" num="0005">In certain network storage servers, the different pipeline stages, and hence, the corresponding mutual exclusion domains, tend to have different degrees of processor utilization. For example, in certain network storage servers the filesystem domain tends to have much higher processor utilization (e.g., close to 100 percent) than the network and storage domains (e.g., typically in the range of 20 to 50 percent). The filesystem domain, therefore, tends to be a bottleneck in the critical path of the storage server, thus limiting the throughput of the storage server.</p>
<p id="p-0007" num="0006">The prior art technique mentioned above, therefore, addressed this problem by allowing some parallelism within a mutual exclusion domain, particularly one associated with the filesystem processes. In particular that technique disclosed creating a new mutual exclusion domain for certain filesystem processes related to operations on user data, e.g., reads and writes of user data. The new domain was defined to include multiple &#x201c;threads&#x201d; which were allowed to execute in parallel. Each logical data set (e.g., each file or LUN) of user data managed by the storage server was logically divided into one or more contiguous subsets called &#x201c;stripes&#x201d;, and each stripe was uniquely assigned to a separate thread in the new domain. Hence, certain predetermined operations on user data were allowed to operate in parallel if they were directed to different stripes of the data set. However, all other operations had to be serialized.</p>
<p id="p-0008" num="0007">The prior art technique improved upon earlier technology by allowing a select set of file system operations to run in parallel, without having to make the majority of the filesystem code multiprocessor-safe, and without the need for frequent, low-level synchronization operations. However, it did not take into consideration the significant amount of metadata used by a typical storage server. It has since been determined that processes associated with maintaining and managing such metadata tend to consume a substantial portion of the processing throughput of the filesystem of a storage server. Yet there are many different types of metadata associated with a typical filesystem, many of which have complicated interdependencies. Therefore, it is not practical just to extend the prior art technique to apply to such filesystem metadata.</p>
<heading id="h-0003" level="1">SUMMARY OF THE INVENTION</heading>
<p id="p-0009" num="0008">The technique introduced here includes a technique for improving throughput in a network storage server, particularly in relation to filesystem processes. The technique provides multiple levels of parallelism of process execution, within a given mutual exclusion domain of a network storage server, in a manner which allows not only operations on user data to be parallelized but also operations on metadata. The specific parallelization scheme used in any given embodiment is based at least partly on the underlying metadata structures used by the storage server. Consequently, a very high degree of parallelization is possible, which significantly improves the throughput of the storage server.</p>
<p id="p-0010" num="0009">In one embodiment, a plurality of mutual exclusion domains are created in the network storage server, for execution of processes of the network storage server. Execution of processes in the network storage server is scheduled based on the plurality of mutual exclusion domains. The plurality of mutual exclusion domains includes a domain called the &#x201c;Filesystem&#x201d; domain here, for processes of a filesystem (storage manager element) of the network storage server. The technique includes creating a hierarchy of subdomains within the Filesystem domain, where each subdomain owns one or more types of processes and each subdomain operates as a separate execution queue (i.e., only one process can execute at a time in each subdomain). Some of these subdomains are associated with metadata and others are associated with user data.</p>
<p id="p-0011" num="0010">In any particular embodiment, the structure of the hierarchy of subdomains within the Filesystem domain is based at least partially on the specific types of metadata used by the storage server and the specific types of operations expected to be performed on such metadata. Based on that structure, certain subdomains are permitted to execute their processes in parallel with the processes of other subdomains, while other subdomains are precluded from executing their processes in parallel with those of any other subdomain or with those of certain other subdomains (i.e., processes must be serialized). Because the structure of the subdomain hierarchy is based at least partly on the underlying metadata structures used by the storage server, a very high degree of parallelization possible, which significantly improves the throughput of the storage server.</p>
<p id="p-0012" num="0011">In one embodiment, all subdomains that have an ancestral (vertical) relationship to each other within the hierarchy are precluded from executing processes in parallel with each other, whereas all subdomains that have a non-ancestral relationship to each other within the hierarchy are allowed to execute their processes in parallel with each other. At least some of the subdomains can have sibling relationships to each other within the hierarchy, which can execute their processes in parallel with each other; these can include, for example, stripe-level subdomains used for operations on different logical stripes of user data sets and/or metadata sets.</p>
<p id="p-0013" num="0012">Other aspects of the technique will be apparent from the accompanying figures and from the detailed description which follows.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0014" num="0013">One or more embodiments of the present invention are illustrated by way of example and not limitation in the figures of the accompanying drawings, in which like references indicate similar elements and in which:</p>
<p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. 1</figref> illustrates a physical processor that includes multiple logical processors;</p>
<p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. 2</figref> illustrates a network environment that includes a network storage server and clients;</p>
<p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. 3</figref> is a block diagram of a network storage server;</p>
<p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. 4</figref> illustrates the operating system of a network storage server;</p>
<p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. 5</figref> illustrates mutual exclusion domains that may be implemented in a network storage server;</p>
<p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. 6</figref> illustrates at a high level a technique for achieving multi-level parallelization within a mutual exclusion domain;</p>
<p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. 7</figref> illustrates an example of the structure of the Filesystem mutual exclusion domain; and</p>
<p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. 8</figref> shows a routine for handling a client request in a network storage server.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0005" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0023" num="0022">References in this specification to &#x201c;an embodiment&#x201d;, &#x201c;one embodiment&#x201d;, or the like, mean that the particular feature, structure or characteristic being described is included in at least one embodiment of the present invention. Occurrences of such phrases in this specification do not necessarily all refer to the same embodiment, nor are they necessarily intended to be mutually exclusive.</p>
<p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. 2</figref> illustrates an example of a network storage environment in which the technique introduced here can be implemented. Although the example of <figref idref="DRAWINGS">FIG. 2</figref> shows a network storage system, it will be understood that the invention can also be implemented in any of various other types of environments. The environment of <figref idref="DRAWINGS">FIG. 2</figref> includes a network storage server <b>2</b> coupled locally to a set of mass storage devices <b>4</b>, and to a set of clients <b>1</b> through an interconnect <b>3</b>. The technique introduced here for increasing parallelism can be implemented in the storage server <b>2</b>.</p>
<p id="p-0025" num="0024">The storage server <b>2</b> receives various read and write requests from the clients <b>1</b> and accesses the mass storage devices <b>5</b> in a persistent storage subsystem <b>4</b> to service those requests. Each of the clients <b>1</b> may be, for example, a conventional personal computer (PC), server-class computer, workstation, or the like. The mass storage devices <b>5</b> may be, for example, conventional magnetic tapes or disks, optical disks such as CD-ROM or DVD based storage, magneto-optical (MO) storage, flash memory, or any other type of non-volatile storage devices suitable for storing large quantities of data, or a combination thereof. The mass storage devices <b>5</b> may be organized into one or more volumes of Redundant Array of Independent Disks (RAID).</p>
<p id="p-0026" num="0025">The storage server <b>2</b> may be, for example, a file server, or &#x201c;filer&#x201d;, such as may be used in a network attached storage (NAS) environment. Alternatively, the storage server may provide clients with block-level access to stored data, such as in a storage area network (SAN) environment. Or, the storage server <b>2</b> may be capable of providing both file-level access and block-level access to store data. The storage server <b>2</b> can implement one or more of various different protocols, such as common Internet filesystem (CIFS), network filesystem (NFS), hypertext transport protocol (HTTP), simple network management protocol (SNMP), transfer control protocol/Internet protocol (TCP/IP), etc., and can selectively use these protocols as needed.</p>
<p id="p-0027" num="0026">Further, although the storage server <b>2</b> is illustrated as a single unit in <figref idref="DRAWINGS">FIG. 2</figref>, it can have a distributed architecture. For example, the storage server <b>2</b> can be designed as a physically separate network module (e.g., &#x201c;N-blade&#x201d;) and disk module (e.g., &#x201c;D-blade&#x201d;) (not shown), which communicate with each other over a physical interconnect. Such an architecture allows convenient scaling, such as by deploying two or more N-modules with two or more D-modules, all capable of communicating with each other through the interconnect.</p>
<p id="p-0028" num="0027">The interconnect <b>3</b> may be essentially any type of communication fabric, such as a local area network (LAN), a wide area network (WAN), metropolitan area network (MAN) or the Internet, a Fibre Channel switching fabric, etc. the interconnect three may be based on any one or more of various well-known protocols, such as Ethernet or Fibre Channel protocol (FCP).</p>
<p id="p-0029" num="0028"><figref idref="DRAWINGS">FIG. 3</figref> is a high-level block diagram showing an example of the hardware elements of the storage server <b>2</b>. Certain standard and well-known components which are not germane to the present invention are not shown. The storage server <b>2</b> in the illustrated embodiment is a multi-processor system, in that it includes two physical processors <b>31</b> coupled to a bus system <b>33</b>. Each of the physical processors <b>31</b> implements two logical processors <b>34</b>. One physical processor <b>31</b> includes logical processors A and B, while the other physical processor includes logical processors C and D. Note that in other embodiments the storage server <b>2</b> may include a number of physical processors other than two, and/or each physical processor may include a number of logical processors other than two.</p>
<p id="p-0030" num="0029">The bus system <b>33</b> is an abstraction that represents any one or more separate physical buses and/or point-to-point connections, connected by appropriate bridges, adapters and/or controllers. The bus system <b>33</b>, therefore, may include, for example, a system bus, a Peripheral Component Interconnect (PCI) bus, a HyperTransport or industry standard architecture (ISA) bus, a small computer system interface (SCSI) bus, a universal serial bus (USB), or an Institute of Electrical and Electronics Engineers (IEEE) standard 1394 bus (sometimes referred to as &#x201c;Firewire&#x201d;).</p>
<p id="p-0031" num="0030">The physical processors <b>31</b> are the central processing units (CPUs) of the storage server <b>2</b> and, thus, control the overall operation of the storage server <b>2</b>. In certain embodiments, the physical processors <b>31</b> may accomplish this by executing software stored in memory <b>32</b>. A physical processor <b>31</b> may be, or may include, one or more programmable general-purpose or special-purpose microprocessors, digital signal processors (DSPs), programmable controllers, application specific integrated circuits (ASICs), programmable logic devices (PLDs), or the like, or a combination of such devices.</p>
<p id="p-0032" num="0031">The storage server <b>2</b> also includes memory <b>32</b> coupled to the bus system <b>43</b>. The memory <b>32</b> represents any form of random access memory (RAM), read-only memory (ROM), flash memory, or a combination thereof. Memory <b>32</b> may store, among other things, the storage operating system <b>35</b> of the storage server <b>2</b>, in which the techniques introduced here can be implemented at least in part.</p>
<p id="p-0033" num="0032">Also connected to the processors <b>31</b> through the bus system <b>33</b> are a storage adapter <b>37</b> and a network adapter <b>38</b>. The storage adapter <b>37</b> allows the storage server <b>2</b> to access the external mass storage devices <b>4</b> and may be, for example, a Fibre Channel adapter or a SCSI adapter. The network adapter <b>38</b> provides the storage server <b>2</b> with the ability to communicate with remote devices such as the clients <b>1</b> over a network and may be, for example, an Ethernet adapter or a Fibre Channel adapter.</p>
<p id="p-0034" num="0033">Memory <b>32</b> and mass storage device <b>36</b> store software instructions and/or data <b>35</b> and <b>39</b>, which may include instructions and/or data used to implement the techniques introduced here. These instructions and/or data may be implemented as part of the storage operating system <b>35</b> of the storage server <b>2</b>.</p>
<p id="p-0035" num="0034">As shown in <figref idref="DRAWINGS">FIG. 4</figref>, the operating system <b>35</b> of the storage server <b>2</b> can include several modules, or layers. These layers include a filesystem <b>41</b>. The filesystem <b>41</b>, also called the &#x201c;storage manager&#x201d;, imposes a structure on files, directories and/or other data containers stored and/or managed by a storage server, and services read/write requests from clients of the storage server. The filesystem <b>41</b> includes a scheduler <b>48</b> which schedules execution of the various processes associated with the filesystem <b>41</b>.</p>
<p id="p-0036" num="0035">Logically under the filesystem <b>41</b>, the storage operating system <b>35</b> also includes a network layer <b>42</b> and an associated network media access layer <b>43</b>, to allow the storage server to communicate over a network (e.g., with clients <b>1</b>). The network <b>42</b> layer implements various protocols, such as NFS, CIFS, HTTP, SNMP, Internet Small Computer System Interface (iSCSI) and TCP/IP. The network media access layer <b>43</b> includes one or more drivers which implement one or more protocols to communicate over the network <b>3</b>, such as Ethernet or FCP. Also logically under the filesystem <b>41</b>, the storage operating system <b>35</b> includes a RAID layer <b>44</b> and an associated storage driver layer <b>45</b>, to allow the storage server <b>2</b> to communicate with external mass storage devices <b>4</b>. The RAID layer <b>44</b> implements a RAID redundancy protocol, such as RAID-4, RAID-5 or RAID-6, while the storage driver layer <b>45</b> implements a lower-level storage device access protocol, such as FCP or SCSI.</p>
<p id="p-0037" num="0036">The storage operating system <b>35</b> may also include a user interface layer <b>49</b>, which implements a graphical user interface (GUI) and/or a command line interface (CLI), for example, such as for purposes of administrative access to the storage server <b>2</b>.</p>
<p id="p-0038" num="0037">To ensure that instructions and data are safe for execution in the multi-processor environment of the storage server <b>2</b>, the operating system <b>35</b> can implement very coarse-grained symmetric multiprocessing (CSMP) instead of fine-grained symmetric multiprocessing found on some other systems, typically implemented by explicit locking mechanisms. Hence, the operating system <b>35</b> can be organized into a number of mutual exclusion domains <b>51</b>-<b>56</b> according to their functionality, as shown in <figref idref="DRAWINGS">FIG. 5</figref>. A mutual exclusion domain is a grouping of processes. The domains <b>51</b> are defined according to functionality so that it is not permitted for two processes in different domains to operate on the same data simultaneously. Furthermore, only one process at a time can execute in each domain, with certain exceptions noted below.</p>
<p id="p-0039" num="0038">As illustrated in <figref idref="DRAWINGS">FIG. 5</figref>, the following domains can be implemented in the storage server <b>2</b>: Network, Filesystem, RAID, Storage, Idle and Exempt. The Network, Filesystem, RAID, and Storage domains form the critical path of the pipeline for processing client requests. The Network domain <b>51</b> includes all network-specific processes of the storage server <b>2</b>. The Storage domain <b>54</b> includes all storage-specific processes of the storage server <b>2</b>. The RAID domain <b>53</b> includes all RAID-specific processes of the storage server <b>2</b>. The Filesystem domain <b>52</b> includes filesystem processes and all other processes that do not belong to another domain based on their functionality.</p>
<p id="p-0040" num="0039">The scheduler <b>48</b> generally allows only one process to execute at a time in the Network, RAID and Storage domains. The Idle domain <b>55</b> is the domain within which a processor executes the idle loop. Idle threads from multiple processors may execute simultaneously in the Idle domain. The Exempt domain <b>56</b> includes certain processes that are inherently multi-processor safe because they only operate on their input data (such as RAID XOR computations, compression/decompression, etc.), i.e., there is no global sharing of state.</p>
<p id="p-0041" num="0040"><figref idref="DRAWINGS">FIG. 6</figref> illustrates the technique introduced here at a high level, according to one embodiment. The technique includes, at <b>601</b>, creating a plurality of mutual exclusion domains in the storage server, as described above. The technique further includes, at <b>602</b>, defining a hierarchy of subdomains within the Filesystem domain, to allow multi-level parallelism of operations in the Filesystem domain, as further described below. The process further includes, at <b>603</b>, scheduling execution of server processes in the storage server <b>2</b>, based on the plurality of mutual exclusion domains. These operations <b>601</b>-<b>603</b> may be carried out by the scheduler <b>48</b>, for example, and/or by some other element(s) of the storage server <b>2</b>.</p>
<p id="p-0042" num="0041"><figref idref="DRAWINGS">FIG. 7</figref> illustrates the structure of the Filesystem domain according to one embodiment. As shown, the Filesystem domain includes multiple subdomains, related to each other in a hierarchy, where each of the subdomains owns one or more types of processes and operates as an execution queue (i.e., only one process can execute at a time in each subdomain). Many processes are associated with one or more specific types of data or metadata upon which they operate; consequently, most of the subdomains can be viewed as being associated with one or more particular classes of data or metadata, as explained below. Hence, some of these subdomains are dedicated for specific types of metadata and associated processes while others are dedicated for user data and associated processes.</p>
<p id="p-0043" num="0042">The structure of the hierarchy determines the overall parallelization scheme and is designed essentially to mirror the various data and metadata structures used by the filesystem <b>41</b>. In certain embodiments this hierarchy is encoded, designed, configured or otherwise built into, the scheduler <b>48</b> of the filesystem <b>41</b>. This encoding/design/configuration may include, for example, software instructions, data, or metadata, or any combination thereof, defining the various subdomains and their relationships to each other. The particular subdomain or subdomains that get invoked at any particular time is determined by the scheduler <b>48</b> whenever a message is received by the filesystem <b>41</b> from another layer of the storage operating system <b>35</b>.</p>
<p id="p-0044" num="0043">The structure of the hierarchy (which, as noted above, reflects the underlying types of data and metadata structures) permits certain subdomains to execute their processes in parallel with processes of other subdomains, but prevents other subdomains from executing their processes in parallel with processes of any other subdomain or with processes of some other subdomains. Any subdomains that have an ancestral (vertical) relationship to each other within the hierarchy are precluded by the scheduler <b>48</b> from executing their processes in parallel with each other, whereas subdomains that do not have an ancestral relationship to each other within the hierarchy are normally permitted to execute their processes in parallel with each other. Additionally, in some instances it may be desirable to allow processes in different subdomains that can execute in parallel to share certain data structures. In those cases, conventional spin locks can be used to force serial execution of those processes.</p>
<p id="p-0045" num="0044">The hierarchy of subdomains can be thought of as a hierarchy of reader and writer locks. When running a process in a subdomain, that subdomain in essence has an exclusive writer lock on all of its child subdomains, and a shared reader lock on all of its ancestors subdomains. Note that for purposes of this description, the subdomain hierarchy can be thought of as an inverted tree structure, where descendency goes from bottom to top in <figref idref="DRAWINGS">FIG. 7</figref>. Thus, in <figref idref="DRAWINGS">FIG. 7</figref> the &#x201c;child&#x201d; of a given subdomain (if it has any) would be located above that subdomain and the parent of that subdomain (if it has any) would be located below it.</p>
<p id="p-0046" num="0045">Before discussing the various subdomains in detail, it may be helpful first to clarify certain terms. An &#x201c;aggregate&#x201d; is a logical aggregation of physical storage, combining one or more physical mass storage devices or parts thereof into a single logical storage object, which contains or provides storage for one or more other logical data sets at a higher level of abstraction (e.g., volumes). &#x201c;Aggregate-level processes&#x201d; are processes that are inherently applicable to an entire aggregate and that cannot be applied at a more-granular level, i.e., at a higher level of abstraction. Examples of such processes may include, for example, increasing the size of an aggregate and creating new volumes.</p>
<p id="p-0047" num="0046">A &#x201c;volume&#x201d; is a logical data set which is an abstraction of physical storage, combining one or more physical mass storage devices (e.g., disks) or parts thereof into a single logical storage object, which obtains its storage from an aggregate and which is managed as a single administrative unit. &#x201c;Volume-level processes&#x201d; are processes that are inherently applicable to an entire volume, but not an entire aggregate, and that cannot be applied at a higher level of abstraction. Examples of such processes may include, for example, destroying a volume or taking a volume off-line.</p>
<p id="p-0048" num="0047">A &#x201c;buffer tree&#x201d; is hierarchical data/metadata structure (e.g., a linked list) used by the filesystem to keep track of the locations of the data blocks of a file or other type of data object. Its root is an inode. A buffer tree includes one or more levels of indirect blocks, each of which contains one or more pointers to lower-level indirect blocks and/or to the direct blocks (user data blocks) of the data object.</p>
<p id="p-0049" num="0048">An &#x201c;inode&#x201d; is a metadata container used to store metadata about a file, directory or other file system object, such as ownership of the file, access permission for the file, size of the file, file type, and pointers used to locate the data blocks for the file. An inode is the root of (i.e., contains pointers to) the highest level of indirect blocks in the buffer tree of a data object.</p>
<p id="p-0050" num="0049">Referring again to <figref idref="DRAWINGS">FIG. 7</figref>, the hierarchy of subdomains within the Filesystem domain includes a Serial subdomain. Above the Serial subdomain, the hierarchy further includes an Aggregate subdomain. Above the Aggregate subdomain in <figref idref="DRAWINGS">FIG. 7</figref> (or logically &#x201c;below&#x201d; it in hierarchical terms), the hierarchy further includes an Aggr-VBN subdomain and one or more volume (&#x201c;Vol&#x201d;) subdomains, i.e., one Vol subdomain for each volume managed by the storage server <b>2</b>. Above the Vol subdomains, the hierarchy further includes one or more Volume-Logical (&#x201c;Vol-Logical&#x201d;) subdomains, one for each volume managed by the storage server <b>2</b>, and one or more Volume-VBN (&#x201c;Vol-VBN&#x201d;) subdomains, one for each volume managed by the storage server <b>2</b>. Above each Vol-Logical subdomain, the hierarchy further includes one or more Stripe subdomains. As used in this description, the term &#x201c;VBN&#x201d; stands for volume block number and means a block index into a flat data container, such as either an aggregate (e.g., in the case of Aggr-VBN) or a volume (e.g., in the case of Vol-VBN).</p>
<p id="p-0051" num="0050">The Stripe subdomains will be discussed here first. In one embodiment each volume is logically divided into contiguous stripes. A &#x201c;stripe&#x201d;, as the term is used herein, is a set of logically sequential data offsets in a set of data (e.g., a volume, file or LUN). To improve parallelism of operations on user data, each stripe is assigned to a separate thread, or Stripe subdomain in this description. A given stripe is never assigned to more than one Stripe subdomain at a time. The Stripe subdomains for any given volume have sibling relationships to each other in the hierarchy, which means that they can execute their processes in parallel with each other, at least as long as no such process targets more than one stripe. As shown, assuming a particular volume, volume <b>0</b>, includes N stripes, the Stripe subdomains for volume <b>0</b> may include Stripe<b>0</b>, Stripe<b>1</b>, . . . , StripeN. Similarly, assuming another volume, volume M, includes P stripes, the Stripe subdomains for volume M may include Stripe<b>0</b>, Stripe<b>1</b>, . . . , StripeP.</p>
<p id="p-0052" num="0051">User data operations owned by the Stripe subdomains can include, for example, reading data from a stripe, writing data to a stripe, performing a lookup of a directory, reading a directory, getting an attribute associated with a stripe, etc. Any Stripe subdomain can also execute its processes in parallel with processes of the Aggr-VBN subdomain and/or any Vol-VBN subdomain, since these subdomains have non-ancestral relationships with the Stripe subdomains.</p>
<p id="p-0053" num="0052">In one embodiment, volume-level metadata of the storage server <b>2</b> naturally fall into two categories: 1) metadata that are visible to clients (&#x201c;client-visible&#x201d;), such as metadata for allocation of files, directories and inode files; and 2) metadata that are not client-visible to clients, such as block numbers, free/used block maps, etc. In general, these two categories of metadata can be operated on in parallel for the same volume without conflicting. Accordingly, in the illustrated embodiment two separate types of subdomains are provided within the filesystem domain, for these different metadata categories, namely, Vol-Logical subdomains and Vol-VBN subdomains.</p>
<p id="p-0054" num="0053">A Vol-Logical subdomain provides exclusive access to a volume's client-visible metadata, such as directories and inode files. There is a one-to-one relationship between each Vol-Logical subdomain its parent Vol subdomain, discussed below. Examples of operations owned by the Vol-Logical subdomains are creating a volume, removing volume, setting attributes of a volume, etc. All of the Vol-Logical subdomains have sibling relationships to each other in the hierarchy; therefore, any Vol-Logical subdomain can execute its processes in parallel with any other Vol-Logical subdomain.</p>
<p id="p-0055" num="0054">A Vol-VBN subdomain provides exclusive access to a volume's metadata that are not client-visible, such as bitmaps and delete logs. Examples of the operations owned by a Vol-VBN subdomain are: data block reclamation, snapshot scanners and segment cleaning/defragmentation. There is a one-to-one relationship between each Vol-VBN subdomain and its parent Vol subdomain.</p>
<p id="p-0056" num="0055">Because there are very few (if any) instances where a physical index based operation requires interaction with a logical index based operation, Vol-Logical and Vol-VBN subdomains can run concurrently. Each Vol-Logical subdomain has a non-ancestral relationship to the Vol-VBN subdomain of the same volume. However, Vol-Logical subdomain and Vol-VBN subdomains each have vertical (ancestral) relationships with all other subdomains for the same volume (i.e., with the Vol and Stripe subdomains for the same volume), except the Aggr-VBN subdomain, as described below. Therefore, no Vol-Logical or Vol-VBN subdomain can execute in parallel with any other subdomain for the same volume, except Aggr-VBN, or with any lower-level subdomain (e.g., Aggregate, Serial, etc).</p>
<p id="p-0057" num="0056">The Aggr-VBN subdomain owns certain aggregate-level processes that are known to be non-conflicting with volume-level and higher-level processes. These can include, for example, operations affecting a free space map of the aggregate. In the illustrated embodiment, therefore, the Aggr-VBN subdomain has a non-ancestral relationship to all other subdomains above the aggregate subdomain and therefore can execute processes in parallel with any other subdomain above the aggregate subdomain.</p>
<p id="p-0058" num="0057">The Vol subdomains own the volume-level processes of the filesystem. A separate Vol subdomain is created for each volume managed by the storage server <b>2</b>. For example, assuming the storage server <b>2</b> manages M volumes, the volume subdomains include subdomains Vol_<b>1</b>, Vol_<b>2</b>, . . . , Vol_M. All of the Vol subdomains have a sibling relationship to each other; therefore, any Vol subdomain can execute its processes in parallel with those of any other Vol subdomain. For instances where access to both physical based and logical based volume metadata is required, the operations can be synchronized by running them in the corresponding Vol subdomain. Note that data structures that reside in the aggregate but are associated with a volume, such as a volume's RAID labels or deduplication fingerprint files, can also be associated with a Vol subdomain. There is a one-to-N relationship between a Vol subdomain and its parent, the Aggr subdomain. Examples of operations that can be owned by a Vol subdomain are: deswizzling, block sharing, and miscellaneous volume-level operations. Swizzling is a process that re-maps block numbers so that storage blocks can be stored at different locations on a destination filesystem than they are on a source filesystem; deswizzling is the reversal of that process.</p>
<p id="p-0059" num="0058">The Aggregate subdomain owns all aggregate-level processes of the filesystem. The Aggregate subdomain locks out all higher-level subdomains, e.g., the Aggr-VBN subdomain and all volume-specific subdomains. As such, it can update essentially any data structure within an aggregate. There is a one-to-N relationship between the Aggregate subdomain and its parent, the Serial subdomain. An example of an operation that can be owned by the Aggregate subdomain is increasing the size of an aggregate.</p>
<p id="p-0060" num="0059">Below the Aggregate subdomain in the hierarchy is the Serial subdomain, which owns certain filesystem processes which by their nature are required to be serialized, e.g., processes that are inherently not multiprocessor-safe (&#x201c;MP-safe&#x201d;), processes which must lock out all other filesystem processes. The Serial subdomain is the least desirable subdomain for a process to run in, since it is the bottom of the subdomain hierarchy and is exclusive of all other subdomains. Examples of operations that may need to run in the Serial subdomain are: setting up a cross-volume special access file, remote shell processes, processes for administrative access to the filesystem, processes to implement various commands, etc.</p>
<p id="p-0061" num="0060">One advantage of this architecture, in addition to increased parallelization, is that it permits parallelization to be increased incrementally for any given platform. That is, with this architecture it is easy to make a system, which initially is not highly parallelized, more parallelized, in stages. For example, initially most processes, even those which can potentially be parallelized, may be assigned to the Serial subdomain, for convenience, while only a few select processes are assigned to subdomains that can operate in parallel. Later, when desired, additional processes can be reassigned to subdomains that can execute in parallel, potentially in multiple stages, until the system is parallelized to its full desired potential.</p>
<p id="p-0062" num="0061">As noted above, spin locks can be used to force serial execution in some instances. This may be done, for example, where processes in different domains, which would otherwise be permitted to execute in parallel (e.g., where they are in sibling subdomains), need to share data structures. However, when a process executes in any given subdomain, no spin lock is required for data associated with any descendant subdomain of that given subdomain in the hierarchy, since the scheduler <b>48</b> will prevent parallel execution of subdomains that have ancestor-descendent relationships to each other. For example, if a process is executing in a Vol subdomain, separate spin locks do not need to be acquired in the corresponding Vol-Logical, Vol-VBN and Stripe subdomains.</p>
<p id="p-0063" num="0062">Note that other embodiments can create different parallelization schemes within the Filesystem domain (or within any other mutual exclusion domain). Such schemes may include more or fewer levels of parallelism or granularity than those shown in <figref idref="DRAWINGS">FIG. 7</figref>. The manner in which subdomains are created and arranged, as described above, is amenable to further subdivision and/or expansion to create additional and/or different subdomains, to adapt to evolving product designs.</p>
<p id="p-0064" num="0063">For example, to achieve greater parallelism it might be desirable to subdivide the Aggr-VBN and Vol-VBN subdomains into smaller subdomains corresponding to different block number ranges or RAID group ranges. As another example, it might be desirable to subdivide the Vol-Logical subdomain to achieve greater parallelism in a single volume, even in the presence of metadata operations. A subdomain structure that facilitates exclusive access to inodes might be useful. For this to be useful, however, it might be desirable to support the ability for a thread of execution to own multiple subdomains at once, as discussed below.</p>
<p id="p-0065" num="0064">As yet another example, it may be desirable to subdivide the Aggregate subdomain to create an Aggr-Logical subdomain (similar to the Vol-Logical subdomains). This subdomain could be used for aggregate activity that can execute concurrently with client operations.</p>
<p id="p-0066" num="0065">Further, it might be desirable to add another subdomain into the hierarchy between the Aggregate and Vol subdomains. This additional subdomain could group related volumes (e.g., by clone relationships) together so that unrelated operations could run concurrently.</p>
<p id="p-0067" num="0066">Additionally, CPU-specific or thread-specific data structures may exist in the storage server <b>2</b>. In order to maintain these structures as concurrently as possible, it may be desirable to create subdomains that are each tied to a specific thread or CPU.</p>
<p id="p-0068" num="0067"><figref idref="DRAWINGS">FIG. 8</figref> illustrates a routine that can be performed by the storage operating system <b>35</b> to processing a request, according to the technique introduced here. At <b>801</b>, when a client transmits a request to the storage server <b>2</b>, initially the Network domain (<figref idref="DRAWINGS">FIG. 5</figref>) in the storage server <b>2</b> receives the request. At <b>802</b> the Network domain converts the request to an internal format recognized by the filesystem <b>41</b> (<figref idref="DRAWINGS">FIG. 4</figref>), the details of which are not germane to this description. The Network domain then determines at <b>803</b> whether the requested operation is inherently multiprocessor-safe (&#x201c;MP-safe&#x201d;). In general, the storage operating system <b>35</b> is preconfigured with knowledge of which operations are inherently MP-safe. These operations may include, for example, reads and writes.</p>
<p id="p-0069" num="0068">If the requested operation is not inherently MP-safe, the flow proceeds to <b>806</b>, in which a message is sent to an appropriate process within the Serial subdomain of the Filesystem domain, to trigger further processing of the request. Which specific type of process depends on the nature of the requested operation.</p>
<p id="p-0070" num="0069">If the operation is inherently MP-safe, then the flow instead proceeds from <b>803</b> to <b>804</b>. At <b>804</b>, the filesystem <b>41</b> (e.g., more specifically, the scheduler <b>48</b>) identifies the highest level subdomain within the filesystem domain, to which the requested operation can be assigned. This determination is made based on the nature of the requested operation and/or the type of data or metadata upon which the operation is to operate. In some instances there may be a preconfigured list of operations and the corresponding subdomains to which they belong, for example. In other instances, logic implementing a decision tree may be used to determine the appropriate subdomain. In some instances, there may be only one subdomain to which a given operation can be assigned. In other instances, there may be multiple subdomains to which an operation can be assigned. For example, a given operation on volume metadata might be executable in either a Vol-Logical subdomain or the Vol subdomain. Normally, the initial preference would be to assign it to the Vol-Logical subdomain according to this step.</p>
<p id="p-0071" num="0070">At <b>805</b>, therefore, a message is sent to the identified subdomain, to initiate further processing of the request. The routine then ends.</p>
<p id="p-0072" num="0071">Various extensions and/or modifications to the technique introduced here can also be envisioned. For example, file system metadata can be striped in a similar manner to user data. Separate subdomains can be created for those metadata stripes, to allow operations targeting different metadata stripes to be performed in parallel.</p>
<p id="p-0073" num="0072">As another example, it may be desirable in certain situations to allow multiple subdomains to be owned simultaneously by a given thread of execution. This may be desirable in order to service a request (e.g., read or write) that targets user data (or metadata) spanning two or more adjacent stripes. In one approach, if a requested operation relates to data that spans two or more adjacent stripes, the operation would be assigned to the corresponding Vol subdomain. However, as an alternative, the operation could be assigned concurrently to the Stripe subdomains corresponding to the two or more stripes which the data spans, providing none of those subdomains is currently in use.</p>
<p id="p-0074" num="0073">As another example, concurrent ownership of subdomains can be used to avoid suspend-restart cycles. Normally, when a process suspends for any reason (e.g., to allow an I/O operation), it must be restarted from the beginning of the process. These suspend-restart cycles are expensive in terms of adversely affecting throughput. Accordingly, in one embodiment, when the scheduler <b>48</b> detects a need to suspend a given process, before suspending the process the scheduler <b>48</b> determines whether any other process is executing which conflicts with that process. If no other process is executing which conflicts with that process, then the executing process is reassigned on-the-fly to the parent subdomain (or grandparent subdomain, etc.) of the subdomain in which it is currently executing. This avoids the need to suspend and restart the process. For example, if a process is executing in Vol-Logical, it can be reassigned on-the-fly to the corresponding Vol subdomain instead of suspending and restarting it.</p>
<p id="p-0075" num="0074">As yet another example, suppose a first process has been suspended, and while it is suspended, a second, non-conflicting process executes. In such cases the suspended process can resume from the point where it was suspended, rather than having to restart from the beginning. In one embodiment, therefore, when a suspended first process is ready to resume or restart, it first determines whether any conflicting process has run while it was suspended. The suspended process can do this by checking whether it has received a predetermined type of message from another process while it was suspended, where such type of message indicates that a second, conflicting process has run while the first process was suspended. If the first process detects such a message, it performs a restart. If it does not detect such a message, it performs a resume instead of a restart, thereby helping to improve overall performance.</p>
<p id="p-0076" num="0075">Thus, a technique for providing multi-level parallelism within a mutual exclusion domain has been described. Note that the technique introduced here could alternatively be applied in a processing device other than a storage server. As just one example, this technique could easily be adapted for implementation in a networking device, such as a switch, router or gateway.</p>
<p id="p-0077" num="0076">Furthermore, the principles described above are not necessarily limited in application to a single multi-processor processing device. That is, it is possible to apply the principles described above to a distributed system, to facilitate two or more processing devices (e.g., two or more storage servers, each of which includes one or more processors) safely having access to the same data.</p>
<p id="p-0078" num="0077">The techniques introduced above can be implemented by programmable circuitry programmed/configured by software and/or firmware, or entirely by special-purpose circuitry, or by a combination of such forms. Such special-purpose circuitry (if any) can be in the form of, for example, one or more application-specific integrated circuits (ASICs), programmable logic devices (PLDs), field-programmable gate arrays (FPGAs), etc.</p>
<p id="p-0079" num="0078">Software or firmware to implement the techniques introduced here may be stored on a machine-readable storage medium and may be executed by one or more general-purpose or special-purpose programmable microprocessors. A &#x201c;machine-readable medium&#x201d;, as the term is used herein, includes any mechanism that can store information in a form accessible by a machine (a machine may be, for example, a computer, network device, cellular phone, personal digital assistant (PDA), manufacturing tool, any device with one or more processors, etc.). For example, a machine-accessible medium includes recordable/non-recordable media (e.g., read-only memory (ROM); random access memory (RAM); magnetic disk storage media; optical storage media; flash memory devices; etc.), etc.</p>
<p id="p-0080" num="0079">The term &#x201c;logic&#x201d;, as used herein, can include, for example, special-purpose hardwired circuitry, software and/or firmware in conjunction with programmable circuitry, or a combination thereof.</p>
<p id="p-0081" num="0080">References in this specification to &#x201c;an embodiment&#x201d;, &#x201c;one embodiment&#x201d;, or the like, mean that the particular feature, structure or characteristic being described is included in at least one embodiment of the present invention. Occurrences of such phrases in this specification do not necessarily all refer to the same embodiment. On the other hand, different embodiments may not be mutually exclusive either.</p>
<p id="p-0082" num="0081">Although the present invention has been described with reference to specific exemplary embodiments, it will be recognized that the invention is not limited to the embodiments described, but can be practiced with modification and alteration within the spirit and scope of the appended claims. Accordingly, the specification and drawings are to be regarded in an illustrative sense rather than a restrictive sense.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A method comprising:
<claim-text>in a network storage server, creating a plurality of mutual exclusion domains for execution of processes of the network storage server, the plurality of mutual exclusion domains including a first domain, the first domain being a storage filesystem domain;</claim-text>
<claim-text>creating a hierarchy of storage filesystem subdomains within the first domain, wherein each of the subdomains corresponds to one or more types of processes, including defining in the hierarchy a first plurality of subdomains that are permitted to execute processes in parallel with each other and a second plurality of subdomains that are precluded from executing processes in parallel with each other; and</claim-text>
<claim-text>assigning processes for execution in the network storage server as each corresponding to the first plurality of subdomains that are permitted to execute processes in parallel with each other or to the second plurality of subdomains that are precluded from executing processes in parallel with each other based at least partially on a metadata type of metadata to be operated on by the each process and an operation type expected to be performed on the metadata.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. A method as recited in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein scheduling execution of processes in the network storage server based on the plurality of mutual exclusion domains comprises:
<claim-text>assigning each of a plurality of operations to an appropriate subdomain in the hierarchy based on a nature of the operation and a type of data or metadata upon which the operation is to operate.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. A method as recited in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein each of the subdomains operates as an execution queue.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. A method as recited in <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein the hierarchy of subdomains includes a plurality of metadata subdomains for parallel execution of metadata related processes and a plurality of user data subdomains for parallel execution of user data related processes.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. A method as recited in <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein the second plurality of subdomains have an ancestral relationship within the hierarchy.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. A method as recited in <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein all subdomains which have an ancestral relationship to each other within the hierarchy are precluded from executing processes in parallel with each other.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. A method as recited in <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein the first plurality of subdomains have a non-ancestral relationship within the hierarchy.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. A method as recited in <claim-ref idref="CLM-00004">claim 4</claim-ref>, further comprising:
<claim-text>logically dividing a user data set managed by the network storage server into a plurality of stripes; and</claim-text>
<claim-text>assigning each of the stripes to a different one of a third plurality of subdomains in the hierarchy of subdomains within the first domain, for processing of requests related to the user data set, wherein the third plurality of subdomains are permitted to execute processes in parallel with each other.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. A method as recited in <claim-ref idref="CLM-00008">claim 8</claim-ref>, further comprising:
<claim-text>receiving a request to perform an operation that spans two stripes of the plurality of stripes; and</claim-text>
<claim-text>assigning the operation to a subdomain which is an ancestor of the subdomains to which the two stripes are assigned.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. A method as recited in <claim-ref idref="CLM-00008">claim 8</claim-ref>, further comprising:
<claim-text>receiving a request to perform an operation of data that spans two stripes of the plurality of stripes; and</claim-text>
<claim-text>assigning the operation concurrently to the subdomains to which the two stripes are assigned.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. A method as recited in <claim-ref idref="CLM-00004">claim 4</claim-ref>, further comprising:
<claim-text>logically dividing a metadata set managed by the network storage server into a plurality of stripes; and</claim-text>
<claim-text>assigning each of the stripes of the metadata set to a different one of a fourth plurality of subdomains in the hierarchy of subdomains within the first domain, for processing of requests related to the metadata set, wherein the fourth plurality of subdomains are permitted to execute processes in parallel with each other.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. A method as recited in <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein all subdomains which have a non-ancestral relationship to each other within the hierarchy are allowed to execute processes in parallel with each other.</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. A method as recited in <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein the first domain corresponds to processes of a storage manager element of the network storage server.</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. A method as recited in <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the hierarchy of subdomains comprises a plurality of aggregate-level subdomains, a plurality of volume-level subdomains, and a plurality of file-level subdomains.</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. A method as recited in <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the hierarchy includes a plurality of metadata subdomains for parallel execution of metadata related processes and a plurality of user data subdomains for parallel execution of user data related processes.</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. A method as recited in <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein when a process is executing in any subdomain, no spin lock is required for data associated with any descendant subdomain of said any subdomain.</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. A method as recited in <claim-ref idref="CLM-00004">claim 4</claim-ref>, further comprising:
<claim-text>detecting a need to suspend a first process executing in a first subdomain in the hierarchy;</claim-text>
<claim-text>responsive to said detecting, determining whether any process which conflicts with the first process is currently executing; and</claim-text>
<claim-text>responsive to a determination that no process which conflicts with the first process is currently executing, avoiding a restart of the first process by reassigning the first process to a subdomain which is an ancestor of the first subdomain.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. A method as recited in <claim-ref idref="CLM-00004">claim 4</claim-ref>, further comprising:
<claim-text>suspending a first process executing in a first subdomain in the hierarchy;</claim-text>
<claim-text>executing a second process in a second subdomain in the hierarchy while the first process is suspended, wherein the first and second processes are non-conflicting processes such that the second process cannot perform an action which affects the first process; and</claim-text>
<claim-text>avoiding a restart of the first process by performing a resume of the first process, in response to detecting that no process that conflicts with the first process has run while the first process was suspended.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. A method comprising:
<claim-text>in a network storage server, creating a plurality of mutual exclusion domains for execution of processes of the network storage server, the plurality of mutual exclusion domains including a first domain for processes of a storage manager element of the network storage server, the first domain being a storage filesystem domain;</claim-text>
<claim-text>creating a hierarchy of storage filesystem subdomains within the first domain, wherein each said subdomain corresponds to one or more types of processes and operates as an execution queue, including defining in the hierarchy a first plurality of subdomains that are permitted to execute processes in parallel with each other and a second plurality of subdomains that are precluded from executing processes in parallel with each other, wherein all subdomains that have an ancestral relationship to each other within the hierarchy are precluded from executing processes in parallel with each other and all subdomains that have a non-ancestral relationship to each other within the hierarchy are allowed to execute processes in parallel with each other, wherein at least some of the second plurality of subdomains have sibling relationships to each other within the hierarchy, wherein the hierarchy of subdomains includes a plurality of metadata subdomains for parallel execution of metadata related processes and a plurality of user data subdomains for parallel execution of user data related processes, and wherein the hierarchy of subdomains further includes a plurality of aggregate-level subdomains, a plurality of volume-level subdomains and a plurality of stripe-level subdomains; and</claim-text>
<claim-text>assigning processes for execution in the network storage server as each corresponding to the first plurality of subdomains that are permitted to execute processes in parallel with each other or to the second plurality of subdomains that are precluded from executing processes in parallel with each other based at least partially on a metadata type of metadata to be operated on by the each process and an operation type expected to be performed on the metadata.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. A method as recited in <claim-ref idref="CLM-00019">claim 19</claim-ref>, further comprising:
<claim-text>logically dividing a data set managed by the network storage server into a plurality of stripes; and</claim-text>
<claim-text>assigning each of the stripes to a different one of the stripe-level subdomains, for processing of requests related to the data set.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00021" num="00021">
<claim-text>21. A machine-readable storage medium storing instructions which, when executed in a processing device, cause the processing device to perform operations comprising:
<claim-text>creating a plurality of mutual exclusion domains for execution of processes of the processing device, each said mutual exclusion domain corresponding to one or more processes of the processing device, the plurality of mutual exclusion domains including a first domain, the first domain being a storage filesystem domain;</claim-text>
<claim-text>enabling a plurality of levels of parallelism for executing processes of the first domain, by defining a hierarchy of storage filesystem subdomains within the first domain; and</claim-text>
<claim-text>assigning processes for execution in the network storage server as each corresponding to the first plurality of subdomains that are permitted to execute processes in parallel with each other or to the second plurality of subdomains that are precluded from executing processes in parallel with each other based at least partially on a metadata type of metadata to be operated on by the each process and an operation type expected to be performed on the metadata.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00022" num="00022">
<claim-text>22. A machine-readable storage medium as recited in <claim-ref idref="CLM-00021">claim 21</claim-ref>, wherein each subdomain in the hierarchy operates as an execution queue.</claim-text>
</claim>
<claim id="CLM-00023" num="00023">
<claim-text>23. A machine-readable storage medium as recited in <claim-ref idref="CLM-00022">claim 22</claim-ref>, wherein the hierarchy includes a plurality of metadata subdomains for parallel execution of metadata related processes and a plurality of user data subdomains for parallel execution of user data related processes.</claim-text>
</claim>
<claim id="CLM-00024" num="00024">
<claim-text>24. A network storage server comprising:
<claim-text>a plurality of processors;</claim-text>
<claim-text>a storage interface coupled to the plurality of processors, through which the storage server can access a persistent storage subsystem;</claim-text>
<claim-text>a network interface coupled to the plurality of processors, through which the storage server can communicate with a storage client; and</claim-text>
<claim-text>a memory coupled to the plurality of processors, the memory storing instructions for defining a plurality of mutual exclusion domains for enabling multi-processor safe execution of processes on the storage server, including instructions for
<claim-text>creating a hierarchy of storage filesystem subdomains operable as execution queues within a first domain of the plurality of mutual exclusion domains, the first domain being a storage filesystem domain, to control parallelism of execution of processes, wherein each said subdomain corresponds to one or more types of processes; and
<claim-text>assigning processes for execution in the network storage server as each corresponding to the first plurality of subdomains that are permitted to execute processes in parallel with each other and have a non-ancestral relationship to each other within the hierarchy, or to the second plurality of subdomains that are precluded from executing processes in parallel with each other and have an ancestral relationship to each other within the hierarchy, based at least partially on a metadata type of metadata to be operated on by the each process and an operation type expected to be performed on the metadata.</claim-text>
</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00025" num="00025">
<claim-text>25. A network storage server as recited in <claim-ref idref="CLM-00024">claim 24</claim-ref>, wherein all subdomains which have an ancestral relationship to each other within the hierarchy are precluded from executing processes in parallel with each other, and all subdomains which have a non-ancestral relationship to each other within the hierarchy are allowed to execute processes in parallel with each other.</claim-text>
</claim>
<claim id="CLM-00026" num="00026">
<claim-text>26. A network storage server as recited in <claim-ref idref="CLM-00025">claim 25</claim-ref>, wherein the first plurality of subdomains have a sibling relationship within the hierarchy.</claim-text>
</claim>
<claim id="CLM-00027" num="00027">
<claim-text>27. A network storage server as recited in <claim-ref idref="CLM-00024">claim 24</claim-ref>, further comprising logic to:
<claim-text>divide a user data set managed by the network storage server into a plurality of logical stripes; and</claim-text>
<claim-text>assign each of the stripes to a different one of a third plurality of subdomains in the hierarchy of subdomains within the first domain, for processing of requests related to the user data set, wherein the third plurality of subdomains are permitted to execute processes in parallel with each other.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00028" num="00028">
<claim-text>28. A network storage server as recited in <claim-ref idref="CLM-00027">claim 27</claim-ref>, further comprising logic to:
<claim-text>receive a request to perform a read of data that spans two stripes of the plurality of stripes; and</claim-text>
<claim-text>assign the read request to a subdomain which is an ancestor of the subdomains to which the two stripes are assigned.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00029" num="00029">
<claim-text>29. A network storage server as recited in <claim-ref idref="CLM-00028">claim 28</claim-ref>, further comprising logic to:
<claim-text>receive a request to perform a read of data that spans two stripes of the plurality of stripes; and</claim-text>
<claim-text>assign the read request concurrently to the subdomains to which the two stripes are assigned.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00030" num="00030">
<claim-text>30. A network storage server as recited in <claim-ref idref="CLM-00024">claim 24</claim-ref>, further comprising logic to:
<claim-text>divide a metadata set managed by the network storage server into a plurality of logical stripes; and</claim-text>
<claim-text>assign each of the stripes of the metadata set to a different one of a fourth plurality of subdomains in the hierarchy of subdomains within the first domain, for processing of requests related to the metadata set, wherein the fourth plurality of subdomains are permitted to execute processes in parallel with each other.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00031" num="00031">
<claim-text>31. A network storage server as recited in <claim-ref idref="CLM-00024">claim 24</claim-ref>, wherein the first domain corresponds to processes of a storage manager element of the network storage server.</claim-text>
</claim>
<claim id="CLM-00032" num="00032">
<claim-text>32. A network storage server as recited in <claim-ref idref="CLM-00031">claim 31</claim-ref>, wherein the hierarchy of subdomains comprises a plurality of aggregate-level subdomains, a plurality of volume-level subdomains, and a plurality of file-level subdomains.</claim-text>
</claim>
<claim id="CLM-00033" num="00033">
<claim-text>33. A network storage server as recited in <claim-ref idref="CLM-00024">claim 24</claim-ref>, wherein the hierarchy of subdomains comprises a plurality of metadata subdomains for parallel execution of metadata related processes and a plurality of user data subdomains for parallel execution of user data related processes.</claim-text>
</claim>
<claim id="CLM-00034" num="00034">
<claim-text>34. A network storage server as recited in <claim-ref idref="CLM-00024">claim 24</claim-ref>, wherein when a process is executing in any subdomain, no spin lock is required for data associated with any descendant subdomain of said any subdomain.</claim-text>
</claim>
<claim id="CLM-00035" num="00035">
<claim-text>35. A network storage server as recited in <claim-ref idref="CLM-00024">claim 24</claim-ref>, further comprising logic to:
<claim-text>detect a need to suspend a first process executing in a first subdomain in the hierarchy;</claim-text>
<claim-text>responsive to said detecting, determine whether any process which conflicts with the first process is currently executing; and</claim-text>
<claim-text>responsive to a determination that no process which conflicts with the first process is currently executing, avoid a restart of the first process by reassigning the first process to a subdomain which is an ancestor of the first subdomain.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00036" num="00036">
<claim-text>36. A network storage server as recited in <claim-ref idref="CLM-00024">claim 24</claim-ref>, further comprising logic to:
<claim-text>suspend a first process executing in a first subdomain in the hierarchy;</claim-text>
<claim-text>execute a second process in a second subdomain in the hierarchy while the first process is suspended, wherein the first and second processes are non-conflicting processes such that the second process cannot perform an action which affects the first process; and</claim-text>
<claim-text>avoid a restart of the first process by resuming the first process, in response to detecting that no process that conflicts with the first process has run while the first process was suspended.</claim-text>
</claim-text>
</claim>
</claims>
</us-patent-grant>

<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08627286-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08627286</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>12748303</doc-number>
<date>20100326</date>
</document-id>
</application-reference>
<us-application-series-code>12</us-application-series-code>
<us-term-of-grant>
<us-term-extension>625</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>9</main-group>
<subgroup>44</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>9</main-group>
<subgroup>45</subgroup>
<symbol-position>L</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>717123</main-classification>
<further-classification>717120</further-classification>
<further-classification>717124</further-classification>
<further-classification>717140</further-classification>
</classification-national>
<invention-title id="d2e53">Fully declarative build system for build optimization</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>7316010</doc-number>
<kind>B1</kind>
<name>Daynes et al.</name>
<date>20080100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717140</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>7434202</doc-number>
<kind>B2</kind>
<name>Kramer</name>
<date>20081000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717120</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>7640533</doc-number>
<kind>B1</kind>
<name>Lottero et al.</name>
<date>20091200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717108</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>7870539</doc-number>
<kind>B2</kind>
<name>Wookey</name>
<date>20110100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717124</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>8042098</doc-number>
<kind>B2</kind>
<name>Do et al.</name>
<date>20111000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717123</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>8151252</doc-number>
<kind>B2</kind>
<name>Song et al.</name>
<date>20120400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717140</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>8230397</doc-number>
<kind>B2</kind>
<name>Farrell et al.</name>
<date>20120700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717124</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>2003/0145310</doc-number>
<kind>A1</kind>
<name>Thames et al.</name>
<date>20030700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717123</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>2005/0050520</doc-number>
<kind>A1</kind>
<name>Motoyama et al.</name>
<date>20050300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717123</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>2005/0278318</doc-number>
<kind>A1</kind>
<name>Vasilik et al.</name>
<date>20051200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707  3</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>2005/0278700</doc-number>
<kind>A1</kind>
<name>Buskens et al.</name>
<date>20051200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717120</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>2009/0183141</doc-number>
<kind>A1</kind>
<name>Tai et al.</name>
<date>20090700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717124</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00013">
<document-id>
<country>US</country>
<doc-number>2009/0235239</doc-number>
<kind>A1</kind>
<name>Lee et al.</name>
<date>20090900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717140</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00014">
<document-id>
<country>US</country>
<doc-number>2010/0023926</doc-number>
<kind>A1</kind>
<name>Sugawara et al.</name>
<date>20100100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717120</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00015">
<document-id>
<country>US</country>
<doc-number>2010/0037209</doc-number>
<kind>A1</kind>
<name>Sasaki</name>
<date>20100200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717123</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00016">
<document-id>
<country>US</country>
<doc-number>2010/0042974</doc-number>
<kind>A1</kind>
<name>Gutz et al.</name>
<date>20100200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717121</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00017">
<document-id>
<country>US</country>
<doc-number>2010/0050156</doc-number>
<kind>A1</kind>
<name>Bonanno et al.</name>
<date>20100200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717122</main-classification></classification-national>
</us-citation>
<us-citation>
<nplcit num="00018">
<othercit>Carl A. Gunter, Abstracting Dependencies between Software Configuration Items, 2000, pp. 96-106.</othercit>
</nplcit>
<category>cited by examiner</category>
</us-citation>
<us-citation>
<nplcit num="00019">
<othercit>Cleidson Ronal Botelho de Souza, on the Relationship between Software Dependencies and Coordination Field Studies and Tool Support, 2005, pp. 21-36.</othercit>
</nplcit>
<category>cited by examiner</category>
</us-citation>
<us-citation>
<nplcit num="00020">
<othercit>Wenfei Fan, Dependencies Revised for Improving Data Quality, 2008, pp. 159-166.</othercit>
</nplcit>
<category>cited by examiner</category>
</us-citation>
</us-references-cited>
<number-of-claims>12</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>None</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>4</number-of-drawing-sheets>
<number-of-figures>4</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20110239192</doc-number>
<kind>A1</kind>
<date>20110929</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Feigen</last-name>
<first-name>Lawrence</first-name>
<address>
<city>Watchung</city>
<state>NJ</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Feigen</last-name>
<first-name>Lawrence</first-name>
<address>
<city>Watchung</city>
<state>NJ</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Fliesler Meyer LLP</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>Oracle International Corporation</orgname>
<role>02</role>
<address>
<city>Redwood Shores</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Dao</last-name>
<first-name>Thuy</first-name>
<department>2192</department>
</primary-examiner>
<assistant-examiner>
<last-name>Nguyen</last-name>
<first-name>Mongbao</first-name>
</assistant-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">A fully declarative build system is described for software build optimization. The build system supports complete control over build and test inputs and build and test operations. The build system takes inputs from a source control system. The inputs can include source code files, test files and various site files used to generate human-oriented materials for the modules. A dependencies file specifies a set of dependencies among the modules of the system. When invoked, the build system determines that changes have been made to the inputs. The system then parses the dependencies file, and based on it, determines exactly which inputs will be affected by the changes. The build system can then rebuild only those modules that will be affected by the changes, as determined from the dependencies file. Alternatively, the system may only perform testing or document generating for files which are dependent on the modified file.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="147.15mm" wi="106.34mm" file="US08627286-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="187.37mm" wi="192.11mm" file="US08627286-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="215.90mm" wi="160.61mm" file="US08627286-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="172.80mm" wi="106.85mm" file="US08627286-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="237.74mm" wi="188.72mm" file="US08627286-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">COPYRIGHT NOTICE</heading>
<p id="p-0002" num="0001">A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure, as it appears in the Patent and Trademark Office patent file or records, but otherwise reserves all copyright rights whatsoever.</p>
<heading id="h-0002" level="1">FIELD OF THE INVENTION</heading>
<p id="p-0003" num="0002">The current invention relates generally software development and more particularly to build and compile systems for software products.</p>
<heading id="h-0003" level="1">BACKGROUND</heading>
<p id="p-0004" num="0003">A computer program is typically made up of multiple modules. A module can be thought of as any part of the system that is built as a separate unit. Alternatively, the term module can apply to parts of the system that are shipped as a separate unit. As such, the term module can encompass both build time modules and run time modules.</p>
<p id="p-0005" num="0004">When building a computer program, the various modules of the program may often be dependent on one another. As such, when one module changes, other modules may or may not change accordingly. As a result of this, all or most of the modules typically need to be rebuilt in order to ensure that the program is structurally sound and was not broken by the changes.</p>
<p id="p-0006" num="0005">During the process of software development, a computer program is usually compiled and built multiple times over. Especially when producing large systems, building and testing the system can be quite time consuming. For example, each build of a large system may take several hours to re-compile and rebuild the system. As a result of this, many large enterprises now perform continuous builds, which continuously re-build the product or system while the developers are simultaneously working on modifying their source code. The goal of a continuous build is to detect errors. If a continuous build system is slow, then the feedback about these errors is slow and leaves the system in a broken state for longer periods of time. In this context, a developer may make a mistake that affects the work of other developers and may not know that this has happened for a significant period of time.</p>
<p id="p-0007" num="0006">Various attempts have been made to optimize the build process, however, most of these attempts have tried to optimize only at the microcosmic level and on an informal basis. For example, developers may create some type of reference systems so that they know which modules will be affected by changes in a particular source code file. However, this requires some sort of coordination among people and usually does not reduce the time-consumption of entire re-builds of the system.</p>
<p id="p-0008" num="0007">In light of this, what is needed is a system for more rapid development of software products, that promotes faster production of code while simultaneously ensuring the integrity and consistency of the system. In addition, a system is desirable that can predict with certainty the effects of various changes in source code files and other inputs to the build system. The applicant-inventor has identified these shortcomings as well as other needs in the art and conceived the subject matter described in this disclosure.</p>
<heading id="h-0004" level="1">SUMMARY OF INVENTION</heading>
<p id="p-0009" num="0008">In this specification, a fully declarative build system is described for software build optimization. The build system supports complete control over build and test inputs and build and test operations. The build system takes inputs from a source control system. These inputs can include source code files, test files and various site files used to generate human oriented materials for the modules. Furthermore, a dependencies file is maintained, which specifies a set of dependencies among the modules of the system. For example, the dependencies file can specify that a particular module depends on several other modules and/or test files, such that if any of these dependent-upon modules are changed, the particular module will be known to be affected by these changes and will have to be rebuilt.</p>
<p id="p-0010" num="0009">In various embodiments, when invoked, the build system determines that one or more modifications have been made to at least one of the inputs (e.g. source code file, test file, etc.). The system then reads and parses the dependencies file, and based on that, determines exactly which inputs will be affected by the one or more modifications. The build system can then rebuild only those modules that will be affected by the one or more modifications as determined from the dependencies file. In alternative embodiments, the build system may only perform the testing or generating of documentation for the files which are dependent on the modified file.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0005" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. 1</figref> is an illustration of the fully declarative build system, in accordance with various embodiments of the invention.</p>
<p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. 2</figref> is an illustration of the fully declarative build system implementing the dependencies file, in accordance with various embodiments of the invention.</p>
<p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. 3</figref> is a flow chart diagram of the process for providing a fully declarative build system, in accordance with various embodiments of the invention.</p>
<p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. 4</figref> is a flow chart diagram of the process for optimizing the build, in accordance with various embodiments of the invention.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0006" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0015" num="0014">In the following description, the invention will be illustrated by way of example and not by way of limitation in the figures of the accompanying drawings. References to various embodiments in this disclosure are not necessarily to the same embodiment, and such references mean at least one. While specific implementations are discussed, it is understood that this is done for illustrative purposes only. A person skilled in the relevant art will recognize that other components and configurations may be used without departing from the scope and spirit of the invention.</p>
<p id="p-0016" num="0015">Furthermore, in certain instances, numerous specific details will be set forth to provide a thorough description of the invention. However, it will be apparent to those skilled in the art that the invention may be practiced without these specific details. In other instances, well-known features have not been described in as much detail so as not to obscure the invention.</p>
<p id="p-0017" num="0016">The embodiments of the present invention encompass a fully declarative build system that optimizes the build process of software systems. The build system supports complete control over build and test inputs, and build and test operations. The build system takes inputs from a source control system. These inputs can include source code files, test files and various site files used to generate human oriented materials for the modules. A dependencies file is maintained under the source control, which specifies a set of dependencies among the modules of the system. For example, the dependencies file can specify that a particular module depends on several other modules and/or test files, such that if any of these dependent-upon modules is changed, the particular module will be affected as well.</p>
<p id="p-0018" num="0017">In various embodiments, when invoked, the build system determines that one or more modifications have been made to at least one of the inputs (e.g. source code file, test file, etc.). The system then reads and parses the dependencies file, and based on that, determines exactly which inputs will be affected by the one or more modifications. The build system can then rebuild only those modules that will be affected by the one or more modifications as determined from the dependencies file.</p>
<p id="p-0019" num="0018">As mentioned above, the build system supports complete control over various inputs and operations. By controlling the inputs, the operations can be optimized such that when inputs are changed only the necessary operations are performed. In various embodiments, the inputs to the build system can be source code files, test files, site files used to generate human-oriented materials, or any other files in the source control system. The outputs can be the executable binaries, tests, javadocs, websites and other products of the build.</p>
<p id="p-0020" num="0019">By controlling the operations, it can be made certain that there are no extraneous inputs or outputs that are unaccounted for and may lead to different results when different operations are skipped. For example, in one embodiment, the modules should not reference any remote functionality (e.g. external website) which is unaccounted for.</p>
<p id="p-0021" num="0020">In general, build systems vary in the amount of declarative vs. procedural code. Most build system like &#x201c;make&#x201d; or &#x201c;ant&#x201d; are mostly procedural in that the tool does not really understand the operations it is performing. Other tools, like &#x201c;maven&#x201d;, are mostly declarative, but still do not really fully control inputs and certainly not operations (outputs are controlled). By requiring ownership of both inputs and operations, the build system described throughout this disclosure is somewhat less flexible but affords benefits in terms of optimization. For example, because the system needs to be fully declarative and requires ownership of all inputs and outputs, the modules should not easily reference external functionality which is unaccounted for. Because of this, however, the system can be optimized so that the effect of any module change will be known with certainty. By building and testing only the modules that would possibly be affected by the changes, the system is able to be build and test changes in significantly less time than would otherwise be required.</p>
<p id="p-0022" num="0021">In various embodiments, there can be three major goals of the build system: to build the executable binaries for the modules from the source code files, to test and verify the modules and to generate the documentation, and other human readable materials for those modules. The fully declarative build system can perform each of these functions in an optimized fashion by using one or more dependency files. The dependency file can be implemented as a text file or as an extensible markup language (XML) file.</p>
<p id="p-0023" num="0022">In one embodiment, the optimization rules are as follows:
<ul id="ul0001" list-style="none">
    <li id="ul0001-0001" num="0000">
    <ul id="ul0002" list-style="none">
        <li id="ul0002-0001" num="0023">a. If all files are site files (Java documents, website, and other human-oriented materials), or if the only files that are changed are site files, then only the site phase of the build is performed and only for those modules with changed files.</li>
        <li id="ul0002-0002" num="0024">b. If all files are test files, or if the only files that are changed are test files, then only the test phase of the build is performed and only for those modules with changed files.</li>
        <li id="ul0002-0003" num="0025">c. Otherwise, the build, test and site phases are performed for each module with changes, as well as any module which depends directly or indirectly on a changed module.</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0024" num="0026">In alternative embodiments, this optimization process can be further modified to account for cases where the only changes are made to both the site and test files. In those cases, both the site and test phases of the build would be performed only for those modules with changed files.</p>
<p id="p-0025" num="0027"><figref idref="DRAWINGS">FIG. 1</figref> is an illustration of the fully declarative build system, in accordance with various embodiments of the invention. Although this diagram depicts components as logically separate, such depiction is merely for illustrative purposes. It will be apparent to those skilled in the art that the components portrayed in this figure can be combined or divided into separate software, firmware and/or hardware. Furthermore, it will also be apparent to those skilled in the art that such components, regardless of how they are combined or divided, can execute on the same computing device or can be distributed among different computing devices connected by one or more networks or other suitable communication means.</p>
<p id="p-0026" num="0028">As illustrated, the fully declarative build system <b>100</b> can require ownership and control of all inputs <b>118</b> and outputs/operations <b>120</b>. The inputs to the builder <b>122</b> can be various source code files <b>102</b>, site files <b>104</b> and test files <b>106</b>. In addition, the build system parses a dependencies file <b>108</b> (e.g. dependencies.txt) which specifies the dependencies among the various modules in the system.</p>
<p id="p-0027" num="0029">The inputs are used by the build system to generate the executable binaries for the modules <b>110</b>, <b>112</b>, the test outputs <b>114</b> and the website, Java documents and other user/developer documentation <b>116</b>. In one embodiment, the builder <b>122</b> parses the dependencies file <b>108</b> and determines which modules would be affected by any changes that were made to the inputs. For example, if module A depends on module B and if module B was modified by the developer, the build system can know with certainty that module A will also need to be rebuilt at build time. On the other hand, if only a test file was changed in the inputs, the build system knows that it would only need to perform the testing portion of the build. In this manner, the fully declarative build system can fully optimize the build process in order to assure that the effects of all changes would be known with certainty.</p>
<p id="p-0028" num="0030"><figref idref="DRAWINGS">FIG. 2</figref> is an illustration of the fully declarative build system implementing the dependencies file, in accordance with various embodiments of the invention. Although this diagram depicts components as logically separate, such depiction is merely for illustrative purposes. It will be apparent to those skilled in the art that the components portrayed in this figure can be combined or divided into separate software, firmware and/or hardware. Furthermore, it will also be apparent to those skilled in the art that such components, regardless of how they are combined or divided, can execute on the same computing device or can be distributed among different computing devices connected by one or more networks or other suitable communication means.</p>
<p id="p-0029" num="0031">As illustrated, the dependencies file <b>200</b> can specify the dependencies among the files in the source control system <b>206</b>. The dependencies file can be maintained by the developer <b>202</b> of each module and this file would be parsed by the build system <b>204</b> at build time. For example, as shown in the illustration, the dependencies file specifies that the module &#x201c;asyncbeans&#x201d; <b>208</b> depends on the module &#x201c;equinox&#x201d; <b>210</b> (e.g. &#x201c;dependencies=equinox&#x201d;). Similarly, module &#x201c;asyncbeans&#x201d; also depends on module &#x201c;spring-tx&#x201d; <b>212</b>, as well as other modules <b>216</b>. This signifies that if the source code file for any of these modules were to be modified by the developer, the builder would know to rebuild and re-test the module &#x201c;asyncbeans&#x201d; as well.</p>
<p id="p-0030" num="0032">In one embodiment, the dependencies files are also under source control and changes to the files are analyzed appropriately. For example, if a section of the dependencies file <b>200</b> corresponding to &#x201c;asyncbeans&#x201d; is modified, then it is perceived that the source of the &#x201c;asyncbeans&#x201d; applies as if a source file in the module is modified. Further, if the modified values for &#x201c;asyncbeans&#x201d; only apply to testing, then only the test phase is affected.</p>
<p id="p-0031" num="0033">As further illustrated in this figure, the dependencies can be transitive. For example, as specified in this particular dependencies file, the module &#x201c;spring-tx&#x201d; <b>212</b> in turn depends on module &#x201c;spring-context&#x201d; <b>220</b> and other modules <b>222</b>. In other words, module &#x201c;asyncbeans&#x201d; <b>208</b> depends on module &#x201c;spring-tx&#x201d; <b>212</b> and module &#x201c;spring-tx&#x201d; <b>212</b> in turn depends on module &#x201c;spring-context&#x201d; <b>220</b>. As a result of this transitive dependency, the module &#x201c;asyncbeans&#x201d; <b>208</b> also depends on &#x201c;spring-context&#x201d; <b>220</b> and if &#x201c;spring-context&#x201d; <b>220</b> were to be modified, the module &#x201c;asyncbeans&#x201d; <b>208</b> would need to be rebuilt and re-tested by the build system.</p>
<p id="p-0032" num="0034">In addition, the dependencies file <b>200</b> can specify test dependencies. Test dependencies specify that if a module referenced by the test dependency were to be modified, then the build system would only need to re-test, rather than having to perform the full build cycle. For example, the test dependencies of module &#x201c;asyncbeans&#x201d; <b>208</b> are &#x201c;activemq,&#x201d; <b>214</b> and any other test dependencies (<b>218</b>). This means that if the &#x201c;activemq&#x201d; <b>214</b> module were to be changed, then the build system would only need to re-test the module &#x201c;asyncbeans&#x201d; <b>208</b> and would not need to re-build it fully. In one embodiment, the reason the system knows with certainty that it will only need to re-test is because nothing else will be used as inputs to the build, except for the files listed as dependencies. Thus, in this embodiment, the &#x201c;asyncbeans&#x201d; module cannot depend on any other module because it will not try to use any other module.</p>
<p id="p-0033" num="0035">In various embodiments, the developer <b>202</b> can be provided with an automated tool that automatically generates some or all of the dependency lines in the dependencies file. The automated tool can be an application or module that parses the input files in the source control system and determines which module will invoke or reference other modules and, based on this information, creates the dependency lines for the dependency file.</p>
<p id="p-0034" num="0036">It should be noted that the format of the dependencies file is shown in this figure purely for purposes of illustration and is not intended to limit the invention disclosed herein. Various alternative formats, descriptions and content can be used to express the dependencies and relationships within the dependencies file(s).</p>
<p id="p-0035" num="0037"><figref idref="DRAWINGS">FIG. 3</figref> is a flow chart diagram of the process for providing a fully declarative build system, in accordance with various embodiments of the invention. Although this figure depicts functional steps in a particular sequence for purposes of illustration, the process is not necessarily limited to this particular order or steps. One skilled in the art will appreciate that the various steps portrayed in this figure can be changed, rearranged, performed in parallel or adapted in various ways. Furthermore, it is to be understood that certain steps or sequences of steps can be added to or omitted from this process, without departing from the spirit and scope of the invention.</p>
<p id="p-0036" num="0038">As shown in step <b>300</b>, as the developer is working on coding a particular module, he/she may make changes to an input file in the source control system. When the build command is invoked (step <b>302</b>), the build system parses a dependencies file that specifies the exact dependencies between all modules in the source control system, as shown in step <b>304</b>. Based on the information parsed from this file, the system can determine all of the cascading dependencies caused by the modifications, such as which modules be affected by the modified file, as shown in step <b>306</b>. As a result of this, the build system needs to rebuild or re-test only those modules which depend on the file(s) that were modified, as specified in the dependencies file (step <b>308</b>).</p>
<p id="p-0037" num="0039"><figref idref="DRAWINGS">FIG. 4</figref> is a flow chart diagram of the process for optimizing the build, in accordance with various embodiments of the invention. Although this figure depicts functional steps in a particular sequence for purposes of illustration, the process is not necessarily limited to this particular order or steps. One skilled in the art will appreciate that the various steps portrayed in this figure can be changed, rearranged, performed in parallel or adapted in various ways. Furthermore, it is to be understood that certain steps or sequences of steps can be added to or omitted from this process, without departing from the spirit and scope of the invention.</p>
<p id="p-0038" num="0040">As illustrated in step <b>400</b>, modifications are made to the various input files (source code files, test files, site files, etc.). In step <b>402</b>, the build system is invoked and, in step <b>404</b>, it reads and parses the dependencies file, as previously described. Based on this file, the system determines the dependencies between the various modules of the system, as shown in step <b>406</b>.</p>
<p id="p-0039" num="0041">In step <b>408</b>, the system determines whether all files which were modified are site files (Java documents, website, and other human-oriented materials). If they are, then only the site phase of the build is performed and only for those modules with changed files, as shown in step <b>410</b>. If they are not, the process continues to step <b>412</b>.</p>
<p id="p-0040" num="0042">In step <b>412</b>, the system determines whether all of the modified files are test files. If this is true, then only the test phase of the build is performed and only for those modules with changed files, as shown in step <b>414</b>.</p>
<p id="p-0041" num="0043">Otherwise, the build, test and site phases are performed for each module with changes, as well as any module which depends directly or indirectly on a changed module, as illustrated in step <b>416</b>.</p>
<p id="p-0042" num="0044">Throughout the various contexts described in this disclosure, the embodiments of the invention further encompass computer apparatus, computing systems and machine-readable media configured to carry out the foregoing systems and methods. In addition to an embodiment consisting of specifically designed integrated circuits or other electronics, the present invention may be conveniently implemented using a conventional general purpose or a specialized digital computer or microprocessor programmed according to the teachings of the present disclosure, as will be apparent to those skilled in the computer art.</p>
<p id="p-0043" num="0045">Appropriate software coding can readily be prepared by skilled programmers based on the teachings of the present disclosure, as will be apparent to those skilled in the software art. The invention may also be implemented by the preparation of application specific integrated circuits or by interconnecting an appropriate network of conventional component circuits, as will be readily apparent to those skilled in the art.</p>
<p id="p-0044" num="0046">The various embodiments include a computer program product which is a storage medium (media) having instructions stored thereon/in which can be used to program a general purpose or specialized computing processor(s)/device(s) to perform any of the features presented herein. The storage medium can include, but is not limited to, one or more of the following: any type of physical media including floppy disks, optical discs, DVDs, CD-ROMs, microdrives, magneto-optical disks, holographic storage, ROMs, RAMs, PRAMS, EPROMs, EEPROMs, DRAMs, VRAMs, flash memory devices, magnetic or optical cards, nanosystems (including molecular memory ICs); paper or paper-based media; and any type of media or device suitable for storing instructions and/or information. The computer program product can be transmitted in whole or in parts and over one or more public and/or private networks wherein the transmission includes instructions which can be used by one or more processors to perform any of the features presented herein. In various embodiments, the transmission may include a plurality of separate transmissions.</p>
<p id="p-0045" num="0047">The foregoing description of the preferred embodiments of the present invention has been provided for purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise forms disclosed. Many modifications and variations can be apparent to the practitioner skilled in the art. Embodiments were chosen and described in order to best explain the principles of the invention and its practical application, thereby enabling others skilled in the relevant art to understand the invention. It is intended that the scope of the invention be defined by the following claims and their equivalents.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A microprocessor-implemented method of fully declarative building of software components for build optimization, said method comprising:
<claim-text>controlling a set of input files used to build a plurality of executable modules of a software program, said input files including a plurality of source code files for building said plurality of executable modules; a plurality of test files for testing said plurality of executable modules, and a plurality of site files for generating documentation for said plurality of executable modules;</claim-text>
<claim-text>determining that one or more modifications have been made to at least one of the set of input files;</claim-text>
<claim-text>reading a dependencies file that specifies a set of dependencies among each of the inputs and analyzing all cascading dependencies;</claim-text>
<claim-text>selecting, based on the dependencies file, a subset of the inputs that are associated with said one or more modifications;</claim-text>
<claim-text>processing only the selected subset of inputs,
<claim-text>wherein if the selected subset of inputs includes only one or more of said plurality of site files, said processing consists essentially of performing only a site phase of the build for generating documentation,</claim-text>
<claim-text>wherein if the selected subset of inputs includes a source code file, performing build, test and site phases for each input with the modifications, and for any input which depends directly or indirectly on an input containing the modifications, as determined by parsing the dependencies file, and</claim-text>
<claim-text>wherein if the selected subset of inputs includes only one or more of said plurality of test files, said processing consists essentially of testing said one or more of said plurality of executable modules using only said test files to which said one or more modifications have been made, without rebuilding any of said plurality of executable modules.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising imposing a constraint which requires ownership of all inputs and outputs.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the dependencies file further specifies one or more test dependencies, such that if the modifications are made to input files referenced as the test dependencies for an executable module, the executable module is only re-tested, without re-building said executable module.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the dependencies are transitive, such that if a first input depends on a second input, and a second input depends on a third input, then said first input depends on said third input.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the dependencies file references each input of the system and for each input of the system, specifies a set of inputs which said each input depends on.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the dependencies file is generated by an automated tool that examines each input file in the source control system and determines which other inputs, said each input file employs.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. A fully declarative build system including one or more microprocessors for software build optimization, said system comprising:
<claim-text>a source control system that controls a set of inputs, said inputs including a plurality of source code files, a plurality of test files, and a plurality of site files;</claim-text>
<claim-text>a dependencies file that specifies a set of dependencies among each of the inputs, said dependencies file being part of the source control system;</claim-text>
<claim-text>a builder operating on said one or more microprocessors, wherein the builder is adapted to
<claim-text>build a plurality of executable software modules from said plurality of source code files,</claim-text>
<claim-text>test said plurality of executable software modules using said plurality of test files, and</claim-text>
<claim-text>generate documentation for the said plurality of executable software modules based on said plurality of site files;</claim-text>
</claim-text>
<claim-text>wherein when the builder determines that one or more modifications has been made to at least one of said inputs, the builder reads the dependencies file, and determines exactly which of said inputs will be affected by the one or more modifications based on said set of dependencies specified in the dependencies file;</claim-text>
<claim-text>wherein, if the builder determines that all of the modifications have been made solely to one or more of said plurality of site files, the builder performs only the document generation and only for said one or more of said plurality of site files in which a modification has been made;</claim-text>
<claim-text>wherein, if the builder determines that one or more of said plurality of source code files was modified by said one or more modification, the builder performs the build, test and document generation for each of said inputs which is affected by said one or more modification, as determined from the dependencies file; and</claim-text>
<claim-text>wherein, if the builder determines that all of the one or more modifications have been made solely to one or more of said plurality of test files, the builder tests said plurality of executable software modules using only said one or more of said plurality of test files to which said one or more modifications have been made, without rebuilding any of said plurality of executable software modules.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The system of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein, the system requires ownership of all inputs and outputs.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The system of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein the dependencies file further specifies one or more test dependencies for an executable software module, such that if the modifications are made to the input referenced as the test dependencies for said executable software module, the builder only re-tests said executable software module, without re-building said executable software module.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The system of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein the dependencies are transitive, such that if a first input depends on a second input, and a second input depends on a third input, then said first input depends on said third input.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The system of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein the dependencies file is generated by an automated tool that examines each of said set of inputs in the source control system and determines which other of said set of inputs said input employs.</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. A non-transitory computer-readable storage medium carrying one or more sequences of instructions for fully declarative building of software components for build optimization, which instructions, when executed by one or more microprocessors, cause the one or more microprocessors to carry out steps comprising:
<claim-text>controlling a set of input files used to build a plurality of executable modules of a software program, said input files including a plurality of source code files for building said plurality of executable modules; a plurality of test files for testing said plurality of executable modules, and a plurality of site files for generating documentation for said plurality of executable modules;</claim-text>
<claim-text>determining that one or more modifications have been made to at least one of said set of input files;</claim-text>
<claim-text>reading a dependencies file that specifies a set of dependencies among each of said one or more input files and analyzing all cascading dependencies; and</claim-text>
<claim-text>selecting, based on the dependencies file, a subset of said input files that are associated with said one or more modifications;</claim-text>
<claim-text>processing only the selected subset of input files,
<claim-text>wherein if the selected subset of input files includes only one or more of said plurality of test files, said processing consists essentially of testing said one or more of said plurality of executable modules using only said test files to which said one or more modifications have been made, without rebuilding any of said plurality of executable modules,</claim-text>
<claim-text>wherein if the selected subset of inputs includes only one or more of said plurality of site files, said processing consists essentially of performing only a site phase of the build for generating documentation, and</claim-text>
<claim-text>wherein if the selected subset of inputs includes a source code file, performing build, test and site phases for each input with the modifications, and for any input which depends directly or indirectly on an input containing the modifications, as determined by parsing the dependencies file. </claim-text>
</claim-text>
</claim-text>
</claim>
</claims>
</us-patent-grant>

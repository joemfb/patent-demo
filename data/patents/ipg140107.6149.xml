<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08627273-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08627273</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>12507099</doc-number>
<date>20090722</date>
</document-id>
</application-reference>
<us-application-series-code>12</us-application-series-code>
<us-term-of-grant>
<us-term-extension>978</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>9</main-group>
<subgroup>44</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>717104</main-classification>
<further-classification>717105</further-classification>
<further-classification>717124</further-classification>
<further-classification>717125</further-classification>
</classification-national>
<invention-title id="d2e53">Model checking of liveness property in a phase abstracted model</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>6745377</doc-number>
<kind>B2</kind>
<name>Baumgartner et al.</name>
<date>20040600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>6748573</doc-number>
<kind>B2</kind>
<name>Baumgartner et al.</name>
<date>20040600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>6763505</doc-number>
<kind>B2</kind>
<name>Baumgartner et al.</name>
<date>20040700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>6944838</doc-number>
<kind>B2</kind>
<name>McMillan</name>
<date>20050900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>7343575</doc-number>
<kind>B2</kind>
<name>Bjesse et al.</name>
<date>20080300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>2004/0123254</doc-number>
<kind>A1</kind>
<name>Geist et al.</name>
<date>20040600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>716  4</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>2006/0253815</doc-number>
<kind>A1</kind>
<name>Bjesse et al.</name>
<date>20061100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>716  5</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>2009/0064064</doc-number>
<kind>A1</kind>
<name>Eisner et al.</name>
<date>20090300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>716  5</main-classification></classification-national>
</us-citation>
<us-citation>
<nplcit num="00009">
<othercit>Armin Biere, &#x201c;Liveness Checking as Safety Checking&#x201d;, published in 2002.</othercit>
</nplcit>
<category>cited by examiner</category>
</us-citation>
<us-citation>
<nplcit num="00010">
<othercit>Horst Samulowitz, &#x201c;Using SAT in QBF&#x201d;, published in 2005.</othercit>
</nplcit>
<category>cited by examiner</category>
</us-citation>
<us-citation>
<nplcit num="00011">
<othercit>Dimitra Giannakopoulou, &#x201c;Model Checking for Concurrent Software Architectures&#x201d;, published on Jan. 1999.</othercit>
</nplcit>
<category>cited by examiner</category>
</us-citation>
<us-citation>
<nplcit num="00012">
<othercit>Jason Baumgartner and Hari Mony, &#x201c;Scalable Liveness Checking via Property-Preserving Transformations&#x201d; in IBM Systems &#x26; Technology Group, Austin, TX, Apr. 2009.</othercit>
</nplcit>
<category>cited by examiner</category>
</us-citation>
<us-citation>
<nplcit num="00013">
<othercit>K. L. McMillan and N. Amla, &#x201c;Automatic abstraction without counterexamples,&#x201d; in TACAS, Apr. 2004.</othercit>
</nplcit>
<category>cited by examiner</category>
</us-citation>
<us-citation>
<nplcit num="00014">
<othercit>V. Schuppan, &#x201c;Liveness Checking as Safety Checking to Find Shortest Counterexamples to Linear Time Properties&#x201d;, PhD Thesis, ETH Z&#xfc;rich, 2006.</othercit>
</nplcit>
<category>cited by examiner</category>
</us-citation>
<us-citation>
<nplcit num="00015">
<othercit>H. Samulowitz, J. Davies, F. Bacchus, &#x201c;Preprocessing QBF&#x201d;, 2006.</othercit>
</nplcit>
<category>cited by examiner</category>
</us-citation>
<us-citation>
<nplcit num="00016">
<othercit>Bjesse, P.; Kukula, J., &#x201c;Automatic generalized phase abstraction for formal verification&#x201d;, Computer-Aided Design, 2005. ICCAD-2005. IEEE/ACM International Conference on Nov. 6-10, 2005 pp. 1076-1082.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>20</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>717104</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>717105</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>717124</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>717125</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>5</number-of-drawing-sheets>
<number-of-figures>5</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20110022373</doc-number>
<kind>A1</kind>
<date>20110127</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Baumgartner</last-name>
<first-name>Jason Raymond</first-name>
<address>
<city>Haifa</city>
<country>IL</country>
</address>
</addressbook>
<residence>
<country>IL</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Flur</last-name>
<first-name>Shaked</first-name>
<address>
<city>Haifa</city>
<country>IL</country>
</address>
</addressbook>
<residence>
<country>IL</country>
</residence>
</us-applicant>
<us-applicant sequence="003" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Nevo</last-name>
<first-name>Ziv</first-name>
<address>
<city>Haifa</city>
<country>IL</country>
</address>
</addressbook>
<residence>
<country>IL</country>
</residence>
</us-applicant>
<us-applicant sequence="004" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Roessler</last-name>
<first-name>Paul Joseph</first-name>
<address>
<city>Haifa</city>
<country>IL</country>
</address>
</addressbook>
<residence>
<country>IL</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Baumgartner</last-name>
<first-name>Jason Raymond</first-name>
<address>
<city>Haifa</city>
<country>IL</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Flur</last-name>
<first-name>Shaked</first-name>
<address>
<city>Haifa</city>
<country>IL</country>
</address>
</addressbook>
</inventor>
<inventor sequence="003" designation="us-only">
<addressbook>
<last-name>Nevo</last-name>
<first-name>Ziv</first-name>
<address>
<city>Haifa</city>
<country>IL</country>
</address>
</addressbook>
</inventor>
<inventor sequence="004" designation="us-only">
<addressbook>
<last-name>Roessler</last-name>
<first-name>Paul Joseph</first-name>
<address>
<city>Haifa</city>
<country>IL</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<last-name>Glazberg</last-name>
<first-name>Zir</first-name>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>International Business Machines Corporation</orgname>
<role>02</role>
<address>
<city>Armonk</city>
<state>NY</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Do</last-name>
<first-name>Chat</first-name>
<department>2193</department>
</primary-examiner>
<assistant-examiner>
<last-name>Jeon</last-name>
<first-name>Jae</first-name>
</assistant-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">Phase abstraction may be utilized to increase efficiency of model checking techniques. A liveness property may be checked in respect to a phase abstracted model by modifying the liveness property in accordance with the phase abstracted model. A fairness property may be modified to ensure that the fairness property is held by the model checker. A counter-example produced by a model checker is modified to be in accordance to an original model. The counter-example comprises a repetitive behavior. The counter-example may be modified to shorten the repetitive behavior or to apply the repetitive behavior in an earlier cycle of the counter-example.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="140.97mm" wi="139.11mm" file="US08627273-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="117.60mm" wi="178.99mm" file="US08627273-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="204.64mm" wi="152.91mm" file="US08627273-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="205.06mm" wi="159.26mm" file="US08627273-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="175.77mm" wi="156.97mm" file="US08627273-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="201.85mm" wi="157.06mm" file="US08627273-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">BACKGROUND</heading>
<p id="p-0002" num="0001">The present disclosure relates to formal verification in general, and to model checking of liveness properties in particular.</p>
<p id="p-0003" num="0002">Computerized devices are an important part of the modern life. They control almost every aspect of our life&#x2014;from writing documents to controlling traffic lights. However, computerized devices are bug-prone, and thus require a testing phase in which the bugs should be discovered. The testing phase is considered one of the most difficult tasks in developing a computerized device. Many developers of computerized devices invest a significant portion, such as 70%, of the development cycle to discover erroneous behaviors of the computerized device, also referred to as a target computerized system. The target computerized system may comprise hardware, software, firmware, a combination thereof and the like.</p>
<p id="p-0004" num="0003">During the testing phase formal verification techniques may be applied to verify that a predetermined property is held. Formal verification may utilize a model checker to verify that the predetermined property, also referred to as a specification, is held. A model, also referred to as a design, represents a set of Boolean variables and functions for determining their values depending on environment inputs and on a portion of the set of Boolean variables. The Boolean variables are also referred to as registers. The model therefore represents all possible behaviors of the target computerized system over discrete time, also referred to as cycles. A gate in a model represents a portion of the model having a value, such as a variable, an outcome of a function based on values of one or more variables and the like.</p>
<p id="p-0005" num="0004">The predetermined property may be a safety properties, in case it may be refuted using a finite counter-example. The predetermined property may be a liveness property in case it may only be refuted using an infinite counter-example. For example, a safety property may state that a &#x201c;bad&#x201d; event never happens, and be refuted by showing an exemplary finite trace in which the last state comprises the &#x201c;bad&#x201d; event occurring; whereas a liveness property may state that a &#x201c;good&#x201d; event eventually happens, for example, that &#x201c;Process A eventually enters the critical section&#x201d;. A refutation of such liveness property may be provided by showing an infinite trace in which the &#x201c;good&#x201d; event never occurs.</p>
<p id="p-0006" num="0005">Some additional exemplary liveness properties may be &#x201c;starvation freedom&#x201d;, e.g., ensuring that the progress is always made; termination, e.g. ensuring that the final instruction may always be completed; &#x201c;guaranteed service&#x201d;, e.g. a service may always be eventually serviced and the like.</p>
<p id="p-0007" num="0006">A counter-example for a liveness property is a description of an infinite behavior of the target computerized system. The infinite behavior is described using a finite number of states which are divided to a prefix and a suffix. The suffix also referred to as a loop or a repetitive portion of the counter-example, represents a repetitive behavior of a finite number of states for which the first state occurs after the last state, and therefore describe an infinite behavior.</p>
<p id="p-0008" num="0007">In order to insure an &#x201c;interesting&#x201d; counter-example, the model may be required to comply with a fairness property. For example, in a model of a priority queue in which a message of high priority is passed before a message of low priority, a liveness property requiring that eventually every low priority message is removed from the queue may be refuted by a scenario in which in every cycle a new high priority message is received. An exemplary fairness property would require the input to provide both low priority and high priority messages.</p>
<p id="p-0009" num="0008">In order to increase efficiency of the model checker, phase abstraction may be applied on an original model, producing a phase abstracted model. Phase abstraction is a technique that may reduce the size of a model by unfolding the transition relation function of the model, such that the transition relation function of the phase abstracted model represents more than one transitions in the model. Some may view a phase abstracted model as a model in which each cycle represents several cycles in the original model.</p>
<heading id="h-0002" level="1">BRIEF SUMMARY OF THE INVENTION</heading>
<p id="p-0010" num="0009">One exemplary embodiment of the disclosed subject matter is a computerized system comprising: a processor; an interface for receiving a phase abstracted model; an interface for receiving an original liveness property associated with the original model; and a property modifier for transforming the original liveness property to a phase abstracted liveness property.</p>
<p id="p-0011" num="0010">Another exemplary embodiment of the disclosed subject matter is a method comprising: retrieving a phase abstracted model, the phase abstracted model is a result of a phase abstraction on an original model; retrieving an original liveness property associated with the original model; and transforming the original liveness property to a phase abstracted liveness property; the transforming the original liveness property is performed using a processor; whereby the original liveness property is transformed to the phase abstracted liveness property that may be checked in respect to the phase abstracted model.</p>
<p id="p-0012" num="0011">Yet another exemplary embodiment of the disclosed subject matter is a computer program product comprising: a computer readable medium; first program instruction for retrieving a phase abstracted model, the phase abstracted model is a result of a phase abstraction on an original model; second program instruction for retrieving an original liveness property associated with the original model; and third program instruction for transforming the original liveness property to a phase abstracted liveness property; wherein the first, second and third program instructions are stored on the computer readable medium.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0003" level="1">THE BRIEF DESCRIPTION OF THE SEVERAL VIEWS OF THE DRAWINGS</heading>
<p id="p-0013" num="0012">The present disclosed subject matter will be understood and appreciated more fully from the following detailed description taken in conjunction with the drawings in which corresponding or like numerals or characters indicate corresponding or like components. Unless indicated otherwise, the drawings provide exemplary embodiments or aspects of the disclosure and do not limit the scope of the disclosure. In the drawings:</p>
<p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. 1</figref> shows a computerized environment in which the disclosed subject matter is used, in accordance with some exemplary embodiments of the subject matter;</p>
<p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. 2</figref> shows a block diagram of a phase abstraction adapter, in accordance with some exemplary embodiments of the disclosed subject matter;</p>
<p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. 3</figref> shows a counter-example manipulation module, in accordance with some exemplary embodiments of the disclosed subject matter;</p>
<p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. 4</figref> shows a flowchart diagram of a method to determine a phase abstracted property, in accordance with some exemplary embodiments of the disclosed subject matter; and</p>
<p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. 5</figref> shows a flowchart diagram of a method to determine a modified counter-example, in accordance with some exemplary embodiments of the disclosed subject matter.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0004" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0019" num="0018">The disclosed subject matter is described below with reference to flowchart illustrations and/or block diagrams of methods, apparatus (systems) and computer program products according to embodiments of the subject matter. It will be understood that each block of the flowchart illustrations and/or block diagrams, and combinations of blocks in the flowchart illustrations and/or block diagrams, can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer, special purpose computer, or other programmable data processing apparatus to produce a machine, such that the instructions, which execute via the processor of the computer or other programmable data processing apparatus, create means for implementing the functions/acts specified in the flowchart and/or block diagram block or blocks.</p>
<p id="p-0020" num="0019">These computer program instructions may also be stored in a computer-readable medium that can direct a computer or other programmable data processing apparatus to function in a particular manner, such that the instructions stored in the computer-readable medium produce an article of manufacture including instruction means which implement the function/act specified in the flowchart and/or block diagram block or blocks.</p>
<p id="p-0021" num="0020">The computer program instructions may also be loaded onto a computer or other programmable data processing apparatus to cause a series of operational steps to be performed on the computer or other programmable apparatus to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions/acts specified in the flowchart and/or block diagram block or blocks.</p>
<p id="p-0022" num="0021">One technical problem dealt with by the disclosed subject matter is to enable model checking of liveness properties in respect to phase abstracted model. Another technical problem dealt with by the disclosed subject matter is to preserve fairness properties in the phase abstracted model in accordance with the original model. Yet another technical problem dealt with by the disclosed subject matter is to provide a counter-example relating to the original model. Yet another technical problem dealt with by the disclosed subject matter is to provide a minimized counter-example, such as that a repetitive portion of the counter-example comprises a relatively small number of cycles or that the repetitive portion begins in the counter-example in a relatively early cycle.</p>
<p id="p-0023" num="0022">One technical solution is to determine a phase abstracted liveness property in respect to the original liveness property. Another technical solution is to conjunct gates in the phase abstracted model to determine a phase abstracted liveness property. Yet another technical solution is to determine a phase abstracted fairness property in respect to the original fairness property. Yet another technical solution is to disjunct gates in the phase abstracted model to determine a phase abstracted fairness property. Yet another technical solution is to determine a cycle in the original model associated with a cycle in the phase abstracted model in which a repetitive behavior may end. Yet another technical solution is to determine a cycle in the original model associated with a cycle in the phase abstracted model in which a repetitive behavior may begin. Yet another technical solution is to determine a second repetitive behavior associated with a first repetitive behavior; the second repetitive behavior comprises less cycles than the first repetitive behavior; the first and second repetitive behaviors are comprised by a counter-example. Yet another technical solution is to determine a deterministic counter-example based on a non-deterministic counter-example associated with a liveness property. Yet another technical solution is to determine a deterministic counter-example using a satisfiability solver.</p>
<p id="p-0024" num="0023">One technical effect of utilizing the disclosed subject matter is transforming an original liveness property to a phase abstracted liveness property. Another technical effect of utilizing the disclosed subject matter is transforming an original fairness property to a phase abstracted fairness property. Yet another technical solution of utilizing the disclosed subject matter is determining a counter-example based on an original counter-example generated in respect to a liveness property and a phase abstracted model.</p>
<p id="p-0025" num="0024">Referring now to <figref idref="DRAWINGS">FIG. 1</figref> showing a computerized environment in which the disclosed subject matter is used, in accordance with some exemplary embodiments of the subject matter.</p>
<p id="p-0026" num="0025">A computerized environment <b>100</b> may comprise a phase abstraction module <b>110</b> which may transform an original model <b>105</b> to a phase abstracted model <b>115</b>. A cycle in the phase abstracted model <b>115</b>, also referred to as a frame, is associated with a predetermined number of cycles in the original model <b>105</b>, such as for example four cycles. For a first register in the original model <b>105</b> the phase abstracted model <b>115</b> may comprise several registers associated with the first register. The several registers may represent a value of the first register in a frame. For example, in case the frame is four cycles, there may be four registers associated with the value of the first register, each corresponding to a different cycle in the frame, such as the first cycle of every frame, the second cycle of every frame and the like. A gate in the phase abstracted model associated with another gate in the original model in a cycle of a frame is also referred to as an unfolded gate.</p>
<p id="p-0027" num="0026">The computerized environment <b>100</b> may comprise a phase abstraction adapter <b>120</b> configured to adapt an original liveness property <b>118</b> in accordance with the phase abstracted model <b>115</b>. The phase abstraction adapter <b>120</b> may determine a phase abstracted liveness property <b>125</b>. In some exemplary embodiments, the phase abstraction adapter <b>120</b> may further transform the phase abstracted model <b>115</b> to preserve an original fairness property.</p>
<p id="p-0028" num="0027">The computerized environment <b>100</b> may comprise a model checker <b>130</b> utilized for model checking the phase abstracted model <b>115</b> in respect to the phase abstracted liveness property <b>125</b>. The model checker <b>130</b> may determine that a model preserves the phase abstracted liveness property <b>125</b>. The model checker <b>130</b> may alternatively determine that the model does not preserve the phase abstracted liveness property <b>125</b>. The model checker may further determine an original counter-example <b>135</b> exemplifying a behavior of the phase abstracted model <b>115</b> which does not comply with the phase abstracted liveness property <b>125</b>. In some exemplary embodiments, the model checker <b>130</b> is a BDD-based model checker, a SAT-solver based model checker or the like. The model checker <b>130</b> may be a third-party model checker that is not specifically configured to handle with phase abstracted models.</p>
<p id="p-0029" num="0028">The computerized environment <b>100</b> may comprise a counter-example manipulation module <b>140</b> for modifying the original counter-example to a modified counter-example <b>145</b>. The modified counter-example <b>145</b> may exemplify a behavior of the original model <b>105</b> that does not comply with the original liveness property <b>118</b>, also referred to as a falsification of the original liveness property <b>118</b>.</p>
<p id="p-0030" num="0029">In some exemplary embodiments of the disclosed subject matter, some of the aforementioned elements of the computerized system <b>100</b> may be coupled, such as for example the counter-example manipulation module <b>140</b> and the phase abstraction adapter <b>120</b> may be implemented by a single computerized device, such as software/firmware executed using Personal Computer (PC), a server, or other hardware, a specialized computerized hardware or the like.</p>
<p id="p-0031" num="0030">Referring now to <figref idref="DRAWINGS">FIG. 2</figref> showing a phase abstraction adapter in accordance with some exemplary embodiments of the disclosed subject matter. A phase abstraction adapter <b>200</b>, such as <b>120</b> of <figref idref="DRAWINGS">FIG. 1</figref>, may comprise a processor <b>202</b>. The processor <b>202</b> may be a Central Processing Unit (CPU), a microprocessor, an electronic circuit, an Integrated Circuit (IC) or the like. The processor <b>202</b> may be utilized to perform computations required by the phase abstraction adapter <b>200</b> or any of it subcomponents.</p>
<p id="p-0032" num="0031">The phase abstraction adapter <b>200</b> may comprise an interface <b>210</b>. The interface <b>210</b> may be utilized to receive or otherwise obtain a phase abstracted model, an original liveness property or the like. The interface <b>210</b> may be an Application Programming Interface (API), a communication protocol, an input or output device or the like. The interface <b>210</b> may obtain information from a user <b>220</b>, a model checker <b>230</b> or a phase abstraction module (not shown), such as <b>110</b> of <figref idref="DRAWINGS">FIG. 1</figref>, and the like. The interface <b>210</b> may further provide output interface to the phase abstraction adapter <b>200</b> enabling it to provide the user <b>220</b>, the model checker <b>230</b> or the like any determination, information, data, computation or the like produced by the phase abstraction adapter <b>200</b>.</p>
<p id="p-0033" num="0032">The phase abstraction adapter <b>200</b> may comprise a property modifier <b>240</b> configured to transform an original liveness property to a phase abstracted liveness property. In some exemplary embodiments, the property modifier <b>240</b> may comprise a liveness gate identifier <b>245</b> configured to identify one or more unfolded gates in the phase abstracted model that are associated with the original liveness property. The one or more unfolded gates may be associated with a gate in the original model that is associated with the original liveness property.</p>
<p id="p-0034" num="0033">In some exemplary embodiments, an original liveness property is refuted by exemplifying a behavior in which a value of a gate remains TRUE. The property modifier <b>240</b> may determine the phase abstracted liveness property to be a conjunction of the one or more unfolded gates in the phase abstracted model.</p>
<p id="p-0035" num="0034">The phase abstraction adapter <b>200</b> may comprise a fairness property identification module <b>250</b> for identifying or otherwise determining an original fairness property. The fairness property identification module <b>250</b> may determine a definition in a model that defines a fairness property such as for example a fairness directive in PSL/Sugar specification language.</p>
<p id="p-0036" num="0035">The phase abstraction adapter <b>200</b> may comprise a fairness modification module <b>260</b> for modifying or otherwise transforming the original fairness property to a phase abstracted fairness property. In some exemplary embodiments, the fairness modification module <b>260</b> may comprise a fairness gate identifier <b>265</b> configured to identify one or more unfolded gates in the phase abstracted model that are associated with the original fairness property. The one or more unfolded gates may be associated with a gate in the original model that is associated with the original fairness property.</p>
<p id="p-0037" num="0036">In some exemplary embodiments, an original fairness property is held by having a predetermined gate be TRUE in at least one cycle in a repetitive portion of a counter-example. The fairness modification module <b>260</b> may determine the phase abstracted fairness property be a disjunction of one or more unfolded gates associated with the predetermined gate.</p>
<p id="p-0038" num="0037">Referring now to <figref idref="DRAWINGS">FIG. 3</figref> showing a counter-example manipulation module, in accordance with some exemplary embodiments of the disclosed subject matter. A counter-example manipulation module <b>300</b>, such as <b>140</b> of <figref idref="DRAWINGS">FIG. 1</figref>, may be configured to transform an original counter-example to a modified counter-example. The original counter-example may be produced or otherwise determined by a model checker in respect to the phase abstracted model and the phase abstracted liveness property. The modified counter-example may be associated with the original model and the original liveness property.</p>
<p id="p-0039" num="0038">The counter-example manipulation module <b>300</b> may comprise an interface <b>310</b>, similar to <b>210</b> of <figref idref="DRAWINGS">FIG. 2</figref>. The interface <b>310</b> may be utilized to receive or otherwise obtain the original counter-example, for example from a model checker. The interface <b>310</b> may be utilized to output the modified counter-example.</p>
<p id="p-0040" num="0039">The counter-example manipulation module <b>300</b> may comprise an unfolding module <b>320</b> for determining a value of a gate in a cycle in the modified counter-example based on a value of a corresponding gate in corresponding cycle in the original counter-example. For example, the unfolding module <b>320</b> may determine the value of the gate in the original model the be the value of an unfolded gate in the phase abstracted model. The unfolding module <b>320</b> may perform an iterative process in which each a value of a gate is determined in each cycle to be the value of an unfolded gate. For example, in case a frame comprises four cycles, a value of a gate in cycle ten is set to a value of a third unfolded gate in the second cycle of the phase adapted model, as the second cycle of the phase adapted model represents cycles eight to eleven in the original model.</p>
<p id="p-0041" num="0040">In some exemplary embodiments, the unfolding module <b>320</b> may truncate the modified counter-example such that the modified counter-example comprise a loop. The truncation may be performed on the last cycle in the original counter-example, such that only some of the cycles corresponding to the frame of the last cycle appear in the modified counter-example.</p>
<p id="p-0042" num="0041">The counter-example manipulation module <b>300</b> may comprise an early loop determination module <b>330</b>. The early loop determination module <b>330</b> may determine a first cycle in the original model that is equal to a second cycle in the original model which corresponds to a beginning of a loop. The first cycle is earlier than the second cycle. The first cycle may be determined to be a beginning cycle of the loop in the modified counter-example, thereby providing a loop that begins in an earlier cycle.</p>
<p id="p-0043" num="0042">The counter-example manipulation module <b>300</b> may comprise a short loop determination module <b>340</b>. The short loop determination module <b>340</b> may determine a first cycle in the original model such that a second cycle in the original model which corresponds to a beginning of a loop is successive to the first cycle. The first cycle may be determined to be an ending cycle of the modified counter-example, thereby providing a loop comprising fewer cycles.</p>
<p id="p-0044" num="0043">The counter-example manipulation module <b>300</b> may comprise a state comparison module <b>350</b> that may compare a first cycle and a second cycle in the original model. The comparison may be based on the values in the original counter-example, and a determination of values of gates in the original model based on the value of unfolded gates in the phase abstracted model.</p>
<p id="p-0045" num="0044">In some exemplary embodiments of the disclosed subject matter, a deterministic counter-example producer <b>360</b> may determine a deterministic counter-example based on an original counter-example which is non-deterministic. The deterministic counter-example producer <b>360</b> may determine a deterministic value for each gate having a non-deterministic value, such as by employing a satisfiability solver <b>355</b> or by selecting an arbitrary deterministic value.</p>
<p id="p-0046" num="0045">In some exemplary embodiments of the disclosed subject matter, the state comparison module <b>350</b> may utilize the satisfiability solver <b>355</b> to determine if two states, of which at least one is non-deterministic, may represent a same state. The satisfiability solver <b>355</b> may be a Constraint Satisfaction Problem (CSP) solver, a Boolean satisfiability (SAT) solver, a theorem prover, a Quantified Boolean Formula (QBF) solver or the like.</p>
<p id="p-0047" num="0046">Referring now to <figref idref="DRAWINGS">FIG. 4</figref> showing a flowchart diagram of a method to determine a phase abstracted property, in accordance with some exemplary embodiments of the disclosed subject matter.</p>
<p id="p-0048" num="0047">In step <b>400</b>, a phase abstracted model is retrieved or otherwise obtained, using for example an interface such as <b>210</b> of <figref idref="DRAWINGS">FIG. 2</figref>.</p>
<p id="p-0049" num="0048">In step <b>410</b>, an original liveness property is retrieved or otherwise obtained, using for example an interface such as <b>210</b> of <figref idref="DRAWINGS">FIG. 2</figref>.</p>
<p id="p-0050" num="0049">In step <b>420</b>, a conjunction of relevant gates in the phase abstracted model is determined. The conjunction may be of unfolded gates relating to liveness gates in the original model. Liveness gates refer to one or more gates that are associated with a liveness property, such as the original liveness property. The conjunction may be used to determine and provide for a phase abstracted liveness property.</p>
<p id="p-0051" num="0050">In step <b>430</b>, an original fairness property is determined, for example by a fairness property identification module <b>250</b> of <figref idref="DRAWINGS">FIG. 2</figref>.</p>
<p id="p-0052" num="0051">In step <b>440</b>, a disjunction of relevant gates in the phase abstraced model is determined. The disjunction may be of unfolded gates relating to fairness gates in the original model. Fairness gates refer to one or more gates that are associated with fairness property, such as the original fairness property. The disjunction may be used to determine and provide for a phase abstracted fairness property. In some exemplary embodiments, the phase abstracted model is modified to include the phase abstracted fairness property. In other exemplary embodiments, the phase abstracted fairness property is provided to a model checker using a specification language describing the specification.</p>
<p id="p-0053" num="0052">Referring now to <figref idref="DRAWINGS">FIG. 5</figref> showing a flowchart diagram of a method to determine a modified counter-example, in accordance with some exemplary embodiments of the disclosed subject matter.</p>
<p id="p-0054" num="0053">In step <b>500</b>, an original counter-example associated with a liveness property is retrieved or otherwise obtained, using for example an interface such as <b>310</b> of <figref idref="DRAWINGS">FIG. 3</figref>. The original counter-example exemplifies a falsification of a phase abstracted liveness property by a phase abstracted model.</p>
<p id="p-0055" num="0054">In step <b>502</b>, the original counter-example is unfolded to an unfolded counter-example. The unfolded counter-example is associated with the original model. Step <b>502</b> may be performed by an unfolding module such as <b>320</b> of <figref idref="DRAWINGS">FIG. 3</figref>. In some exemplary embodiment, step <b>502</b> is performed by iterating over unfolded gates in the phase abstracted model associated with a gate in the original model and for each frame in the original counter-example copy the value of the M-th unfolded gate to the value of the gate at cycle M&#x2212;1+I*K, where I is the frame and K is a number of cycles in a frame. Step <b>502</b> may produce an unfolded counter-example</p>
<p id="p-0056" num="0055">In some exemplary embodiments, a deterministic counter-example is determined in step <b>505</b> based on the unfolded counter-example. A deterministic counter-example producer such as <b>360</b> of <figref idref="DRAWINGS">FIG. 3</figref> may be utilized.</p>
<p id="p-0057" num="0056">In step <b>510</b>, a repetitive portion of the original counter-example is identified. In some exemplary embodiments, the counter-example comprises a LOOP gate that is raised upon entering to the repetitive portion. A corresponding portion in the unfolded counter-example may be determined to be a repetitive portion.</p>
<p id="p-0058" num="0057">In step <b>515</b>, a determination may be made as to which cycle should be the last cycle of the unfolded counter-example in order to ensure that a correct loop appears in the unfolded counter-example. In some exemplary embodiments, the last K cycles of the unfolded counter-example are examined, where K is a number of cycles in a frame. The last K cycles may be examined to determine which of the K states in the K cycles is a predecessor state of the first state of the repetitive portion of the unfolded counter-example. The determined predecessor state may be determined to be the last cycle of the unfolded counter-example. The cycles after the last cycle may be removed from the unfolded counter-example.</p>
<p id="p-0059" num="0058">In step <b>520</b>, a determination may be made whether the repetitive portion may start in an earlier cycle in the unfolded counter example. Step <b>520</b> may be performed by an early loop determination module such as <b>330</b> of <figref idref="DRAWINGS">FIG. 3</figref>. In some exemplary embodiments, some cycles before the repetitive portion are examined to determine if any of the some cycles is equal to the cycle beginning the repetitive portion. Alternatively, the some cycles may be examined to determine if they are the next state successive (according to the original model) to the state in the last cycle of the unfolded counter-example. If a cycle is identified, the unfolded counter-example may be modified such that the repetitive portion may begin in the cycle.</p>
<p id="p-0060" num="0059">In step <b>530</b>, a determination may be made whether the repetitive portion of the unfolded counter example may consist less cycles. Step <b>530</b> may be performed by a short loop determination module such as <b>340</b> of <figref idref="DRAWINGS">FIG. 3</figref>. In some exemplary embodiments, cycles of the repetitive portion may be examined to determine if a state in a first cycle is equal to the state in the ending cycle of the repetitive portion. Alternatively, a determination may be made whether the state beginning the repetitive portion is a next state successive to the state in the first cycle. If a first cycle is identified, the unfolded counter-example may be modified such that the repetitive portion may end in the first cycle.</p>
<p id="p-0061" num="0060">In step <b>540</b>, the modified counter-example may be produced or otherwise determined based on the unfolded counter-example and the determination made in any of the previous steps.</p>
<p id="p-0062" num="0061">In some exemplary embodiments of the disclosed subject matter, a satisfiability solver, such as a SAT solver, may be utilized to determine the modified counter-example. In an exemplary embodiment, any non-deterministic state in the unfolded counter-example is examined using the satisfiability solver to determine if it could represent a state in accordance with a cycle. The satisfiability solver may be utilized, for example, in steps <b>520</b> or <b>530</b>. In case the satisfiability solver determines that a satisfactory assignment exists, the satisfactory assignment may be utilized to determine deterministic values for the non-deterministic state. The satisfiability solver enables decreasing the size of the modified counter-example such that the repetitive portion begins in an early cycle or consists of a small number of cycles.</p>
<p id="p-0063" num="0062">The flowchart and block diagrams in the Figures illustrate the architecture, functionality, and operation of possible implementations of systems, methods and computer program products according to various embodiments of the present invention. In this regard, each block in the flowchart or block diagrams may represent a module, segment, or portion of program code, which comprises one or more executable instructions for implementing the specified logical function(s). It should also be noted that, in some alternative implementations, the functions noted in the block may occur out of the order noted in the figures. For example, two blocks shown in succession may, in fact, be executed substantially concurrently, or the blocks may sometimes be executed in the reverse order, depending upon the functionality involved. It will also be noted that each block of the block diagrams and/or flowchart illustration, and combinations of blocks in the block diagrams and/or flowchart illustration, can be implemented by special purpose hardware-based systems that perform the specified functions or acts, or combinations of special purpose hardware and computer instructions.</p>
<p id="p-0064" num="0063">The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein, the singular forms &#x201c;a&#x201d;, &#x201c;an&#x201d; and &#x201c;the&#x201d; are intended to include the plural forms as well, unless the context clearly indicates otherwise. It will be further understood that the terms &#x201c;comprises&#x201d; and/or &#x201c;comprising,&#x201d; when used in this specification, specify the presence of stated features, integers, steps, operations, elements, and/or components, but do not preclude the presence or addition of one or more other features, integers, steps, operations, elements, components, and/or groups thereof.</p>
<p id="p-0065" num="0064">As will be appreciated by one skilled in the art, the disclosed subject matter may be embodied as a system, method or computer program product. Accordingly, the disclosed subject matter may take the form of an entirely hardware embodiment, an entirely software embodiment (including firmware, resident software, micro-code, etc.) or an embodiment combining software and hardware aspects that may all generally be referred to herein as a &#x201c;circuit,&#x201d; &#x201c;module&#x201d; or &#x201c;system.&#x201d; Furthermore, the present invention may take the form of a computer program product embodied in any tangible medium of expression having computer-usable program code embodied in the medium.</p>
<p id="p-0066" num="0065">Any combination of one or more computer usable or computer readable medium(s) may be utilized. The computer-usable or computer-readable medium may be, for example but not limited to, an electronic, magnetic, optical, electromagnetic, infrared, or semiconductor system, apparatus, device, or propagation medium. More specific examples (a non-exhaustive list) of the computer-readable medium would include the following: an electrical connection having one or more wires, a portable computer diskette, a hard disk, a random access memory (RAM), a read-only memory (ROM), an erasable programmable read-only memory (EPROM or Flash memory), an optical fiber, a portable compact disc read-only memory (CDROM), an optical storage device, a transmission media such as those supporting the Internet or an intranet, or a magnetic storage device. Note that the computer-usable or computer-readable medium could even be paper or another suitable medium upon which the program is printed, as the program can be electronically captured, via, for instance, optical scanning of the paper or other medium, then compiled, interpreted, or otherwise processed in a suitable manner, if necessary, and then stored in a computer memory. In the context of this document, a computer-usable or computer-readable medium may be any medium that can contain, store, communicate, propagate, or transport the program for use by or in connection with the instruction execution system, apparatus, or device. The computer-usable medium may include a propagated data signal with the computer-usable program code embodied therewith, either in baseband or as part of a carrier wave. The computer usable program code may be transmitted using any appropriate medium, including but not limited to wireless, wireline, optical fiber cable, RF, and the like.</p>
<p id="p-0067" num="0066">Computer program code for carrying out operations of the present invention may be written in any combination of one or more programming languages, including an object oriented programming language such as Java, Smalltalk, C++ or the like and conventional procedural programming languages, such as the &#x201c;C&#x201d; programming language or similar programming languages. The program code may execute entirely on the user's computer, partly on the user's computer, as a stand-alone software package, partly on the user's computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario, the remote computer may be connected to the user's computer through any type of network, including a local area network (LAN) or a wide area network (WAN), or the connection may be made to an external computer (for example, through the Internet using an Internet Service Provider).</p>
<p id="p-0068" num="0067">The corresponding structures, materials, acts, and equivalents of all means or step plus function elements in the claims below are intended to include any structure, material, or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present invention has been presented for purposes of illustration and description, but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiment was chosen and described in order to best explain the principles of the invention and the practical application, and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A computerized system comprising:
<claim-text>a processor;</claim-text>
<claim-text>an interface for receiving a phase abstracted model, the phase abstracted model is a result of a phase abstraction transformation on an original model having an original transition relation, wherein a transition relation of the phase abstracted model represents a plurality of transitions using the original transition relation;</claim-text>
<claim-text>an interface for receiving an original liveness specification property that is to be held by the original model;</claim-text>
<claim-text>a property modifier for transforming the original liveness specification property to a phase abstracted liveness specification property in accordance with the phase abstraction transformation, wherein the transformation is based on the phase abstracted model, wherein a falsification by the phase abstracted model of the phase abstracted liveness specification property corresponds to a falsification by the original model of the original liveness specification property; and</claim-text>
<claim-text>a counter-example manipulation module for transforming an original counter-example to a modified counter-example, the original counter-example exemplifies a falsification of the phase abstracted liveness specification property in respect to the phase abstracted model, the modified counter-example exemplifies a falsification of the original liveness specification property in respect to the original model.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The computerized system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the phase abstracted model is a result of a phase abstraction on an original model; and wherein said property modifier comprises a liveness gate identifier for determining a portion of the phase abstracted model associated with the original liveness specification property.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The computerized system of <claim-ref idref="CLM-00001">claim 1</claim-ref> further comprising:
<claim-text>a fairness property identification module for determining an original fairness property; and</claim-text>
<claim-text>a fairness modification module for transforming the original fairness property to a phase abstracted fairness property.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The computerized system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the original counter-example is produced by a model checker.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The computerized system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein said counter-example manipulation module comprising:
<claim-text>an interface for receiving the original model;</claim-text>
<claim-text>an interface for receiving the original counter-example;</claim-text>
<claim-text>an unfolding module for determining a first value associated with a first gate of the original model based on a second value associated with a second gate, the original counter-example comprising the second value of the second gate.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The computerized system of <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein said counter-example manipulation module further comprising a short loop determination module.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The computerized system of <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein said counter-example manipulation module further comprising an early loop determination module.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The computerized system of <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein said counter-example manipulation module further comprising a state comparison module.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The computerized system of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein said state comparison module is configured to utilize a satisfiability solver.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The computerized system of <claim-ref idref="CLM-00009">claim 9</claim-ref> wherein the satisfiability solver is selected from the group consisting of a SAT solver, a theorem prover, a QBF solver and a CSP solver.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The computerized system of <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein said counter-example manipulation module further comprising a deterministic counter-example producer configured to transform a non-deterministic counter-example to a deterministic counter-example.</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. A method comprising:
<claim-text>retrieving a phase abstracted model, the phase abstracted model is a result of a phase abstraction transformation on an original model having an original transition relation, wherein a transition relation of the phase abstracted model represents a plurality of transitions using the original transition relation;</claim-text>
<claim-text>retrieving an original liveness specification property that is to be held by the original model;</claim-text>
<claim-text>transforming the original liveness specification property to a phase abstracted liveness specification property in accordance with the phase abstraction transformation, wherein said transformation is based on the phase abstracted model, wherein a falsification by the phase abstracted model of the phase abstracted liveness specification property corresponds to a falsification by the original model of the original liveness specification property; said transforming is performed using a processor and</claim-text>
<claim-text>transforming an original counter-example to a modified counter-example, the original counter-example exemplifies a falsification of the phase abstracted liveness specification property in respect to the phase abstracted model, the modified counter-example exemplifies a falsification of the original liveness specification property in respect to the original model.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The method of <claim-ref idref="CLM-00012">claim 12</claim-ref> wherein said transforming the original liveness specification property to the phase abstracted liveness specification property comprising determining a portion of the phase abstracted model associated with the original liveness specification property.</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The method of <claim-ref idref="CLM-00012">claim 12</claim-ref> further comprising:
<claim-text>determining an original fairness property; and</claim-text>
<claim-text>transforming the original fairness property to a phase abstracted fairness property</claim-text>
<claim-text>whereby the phase abstracted model is transformed to assure satisfaction of the original fairness property.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The method of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein said transforming the original counter-example to the modified counter-example comprising:
<claim-text>receiving the original model;</claim-text>
<claim-text>receiving the original counter-example;</claim-text>
<claim-text>determining a first value associated with a first gate of the original model based on a second value associated with a second gate, the original counter-example comprising the second value of the second gate.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The method of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein said transforming the original counter-example to the modified counter-example comprising shortening a repetitive behavior; and initiating repetitive behavior in an early cycle.</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The method of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein said transforming the original counter-example to the modified counter-example comprising comparing a first state and a second state; said comparing a first state and a second state utilizes a satisfiability solver.</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The method of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein said transforming the original counter-example to the modified counter-example comprising transforming a non-deterministic counter-example to a deterministic counter-example.</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. A computer program product comprising:
<claim-text>a non-transitory computer readable medium;</claim-text>
<claim-text>first program instruction for retrieving a phase abstracted model, the phase abstracted model is a result of a phase abstraction transformation on an original model having an original transition relation, wherein a transition relation of the phase abstracted model represents a plurality of transitions using the original transition relation;</claim-text>
<claim-text>second program instruction for retrieving an original liveness specification property that is to be held by the original model;</claim-text>
<claim-text>third program instruction for transforming the original liveness specification property to a phase abstracted liveness specification property in accordance with the phase abstraction transformation, wherein said transformation is based on the phase abstracted model, wherein a falsification by the phase abstracted model of the phase abstracted liveness specification property corresponds to a falsification by the original model of the original liveness specification property;</claim-text>
<claim-text>wherein said first, second and third program instructions are stored on said non-transitory computer readable medium; and</claim-text>
<claim-text>fourth program instruction for transforming an original counter-example to a modified counter-example, the original counter-example exemplifies a falsification of the phase abstracted liveness specification property in respect to the phase abstracted model, the modified counter-example exemplifies a falsification of the original liveness specification property in respect to the original model.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. The computer program product of <claim-ref idref="CLM-00019">claim 19</claim-ref>, wherein said third program instruction comprises
<claim-text>fourth program instruction for receiving the original model;</claim-text>
<claim-text>fifth program instruction for receiving the original counter-example;</claim-text>
<claim-text>sixth program instruction for determining a first value associated with a first gate of the original model based on a second value associated with a second gate, the original counter-example comprising the second value of the second gate. </claim-text>
</claim-text>
</claim>
</claims>
</us-patent-grant>

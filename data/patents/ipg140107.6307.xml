<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08627462-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08627462</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>12776450</doc-number>
<date>20100510</date>
</document-id>
</application-reference>
<us-application-series-code>12</us-application-series-code>
<us-term-of-grant>
<us-term-extension>449</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>H</section>
<class>04</class>
<subclass>L</subclass>
<main-group>29</main-group>
<subgroup>06</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>726 22</main-classification>
<further-classification>726  1</further-classification>
<further-classification>726 11</further-classification>
<further-classification>726 17</further-classification>
<further-classification>726 23</further-classification>
<further-classification>726 24</further-classification>
<further-classification>726 25</further-classification>
<further-classification>713160</further-classification>
<further-classification>713164</further-classification>
<further-classification>709223</further-classification>
<further-classification>709225</further-classification>
</classification-national>
<invention-title id="d2e53">Token processing</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>5987610</doc-number>
<kind>A</kind>
<name>Franczek et al.</name>
<date>19991100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>6073142</doc-number>
<kind>A</kind>
<name>Geiger et al.</name>
<date>20000600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>6460050</doc-number>
<kind>B1</kind>
<name>Pace et al.</name>
<date>20021000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>6959297</doc-number>
<kind>B2</kind>
<name>Oh et al.</name>
<date>20051000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>  1  1</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>7506155</doc-number>
<kind>B1</kind>
<name>Stewart et al.</name>
<date>20090300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>7735116</doc-number>
<kind>B1</kind>
<name>Gauvin</name>
<date>20100600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>726  2</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>7739720</doc-number>
<kind>B2</kind>
<name>Samuelsson et al.</name>
<date>20100600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>726  1</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>2006/0005227</doc-number>
<kind>A1</kind>
<name>Samuelsson et al.</name>
<date>20060100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>726  1</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>2008/0244690</doc-number>
<kind>A1</kind>
<name>Kulkarni et al.</name>
<date>20081000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>726  1</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>2012/0023217</doc-number>
<kind>A1</kind>
<name>Wakumoto</name>
<date>20120100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709223</main-classification></classification-national>
</us-citation>
</us-references-cited>
<number-of-claims>15</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>726 26</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>726  1</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>726 11</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>726 17</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>726 22- 25</main-classification>
<additional-info>unstructured</additional-info>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709223</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709225</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>713160</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>713164</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>7</number-of-drawing-sheets>
<number-of-figures>8</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20110277031</doc-number>
<kind>A1</kind>
<date>20111110</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Nedbal</last-name>
<first-name>Manuel</first-name>
<address>
<city>Santa Clara</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Viswambharan</last-name>
<first-name>Girish</first-name>
<address>
<city>Bangalore</city>
<country>IN</country>
</address>
</addressbook>
<residence>
<country>IN</country>
</residence>
</us-applicant>
<us-applicant sequence="003" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Krishnamurthy</last-name>
<first-name>Vishwas</first-name>
<address>
<city>Bangalore</city>
<country>IN</country>
</address>
</addressbook>
<residence>
<country>IN</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Nedbal</last-name>
<first-name>Manuel</first-name>
<address>
<city>Santa Clara</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Viswambharan</last-name>
<first-name>Girish</first-name>
<address>
<city>Bangalore</city>
<country>IN</country>
</address>
</addressbook>
</inventor>
<inventor sequence="003" designation="us-only">
<addressbook>
<last-name>Krishnamurthy</last-name>
<first-name>Vishwas</first-name>
<address>
<city>Bangalore</city>
<country>IN</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Patent Capital Group</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>McAfee, Inc.</orgname>
<role>02</role>
<address>
<city>Santa Clara</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Hoffman</last-name>
<first-name>Brandon</first-name>
<department>2433</department>
</primary-examiner>
<assistant-examiner>
<last-name>Song</last-name>
<first-name>Hee</first-name>
</assistant-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">Methods, systems, and apparatus, including computer programs encoded on a computer storage medium, for mapping security processing rules into a data structure that facilitates a more efficient processing of the security processing rules. In one aspect, a method includes receiving security processing rules, each of the security processing rules defining one or more security checks and security operations corresponding to the security checks and that are to be performed when the security checks occur; and generating from the security processing rules a mapping of security checks to security operations, the mapping including a security check entry for each security check that is defined in one or more of the security processing rules, and each security check entry being mapped to one or more security operations that the security processing rules define as corresponding to the security check.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="113.37mm" wi="224.54mm" file="US08627462-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="234.53mm" wi="169.16mm" orientation="landscape" file="US08627462-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="244.18mm" wi="164.51mm" orientation="landscape" file="US08627462-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="234.95mm" wi="138.01mm" orientation="landscape" file="US08627462-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="196.09mm" wi="158.75mm" orientation="landscape" file="US08627462-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="164.25mm" wi="132.08mm" orientation="landscape" file="US08627462-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="226.82mm" wi="158.75mm" orientation="landscape" file="US08627462-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="228.43mm" wi="91.52mm" file="US08627462-20140107-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">BACKGROUND</heading>
<p id="p-0002" num="0001">This specification relates to intrusion detection systems.</p>
<p id="p-0003" num="0002">Modern computer networks are under a constant threat of unauthorized access by external attackers. Worms and other malicious software processes propagate through the Internet and infect computers. Hackers attempt to gain access to proprietary systems.</p>
<p id="p-0004" num="0003">Intrusion detection software attempts to identify malicious attacks before they can compromise a computer network. New threats to network computers are continually discovered and intrusion detection systems need to check for attacks from these threats. At the same time, the increase in network transmission speeds requires a system to process more checks in less time.</p>
<p id="p-0005" num="0004">One common form of intrusion detection is based on rules. Rules are designed to detect to a known threat. When a new threat is identified, a new rule may be constructed to detect it. For example, SNORT is an intrusion detections system with an extensible rule base. A rule in a rule set may describe multiple conditions which have to be met in order for the rule to be determined positive.</p>
<heading id="h-0002" level="1">SUMMARY</heading>
<p id="p-0006" num="0005">This specification describes technologies relating to tokenizing and processing a security rule set.</p>
<p id="p-0007" num="0006">In general, one innovative aspect of the subject matter described in this specification can be embodied in methods that include the actions of receiving security processing rules, each of the security processing rules defining one or more security checks and security operations corresponding to the security checks and that are to be performed when the security checks occur; and generating from the security processing rules a mapping of security checks to security operations, the mapping including a security check entry for each security check that is defined in one or more of the security processing rules, and each security check entry being mapped to one or more security operations that the security processing rules define as corresponding to the security check.</p>
<p id="p-0008" num="0007">These and other embodiments can optionally include one or more of the following features. Generating from the security processing rules the mapping of security check to security processes may include generating a security check table having an entry for each security check, and wherein each entry: corresponds to a security check that is defined in one or more of the security processing rules and includes a virtual check table index and a virtual check value; generating a virtual check table having a number of entries for each virtual check table index that is equal to the virtual check value for the virtual check table index, and wherein each of the entries includes a security process table index and a security process value. Generating from the security processing rules the mapping of security check to security operations may also include generating a security processes table having a number of entries corresponding to each security process table index that is equal to the security process value for the security process table index, and wherein each of the entries includes a security operations table index and a security operations value corresponding to one or more security operations to be performed. Generating from the security processing rules the mapping of security check to security operations may include generating a security operations table having a number of entries corresponding to each security operation table index that is equal to the security operation value for the security operations table index, and wherein each of the entries includes an opcode and an operand identifying a security operation.</p>
<p id="p-0009" num="0008">These and other embodiments can optionally include receiving token data, identifying a first security check to be processed from the security check table based on the token data, and identifying one or more security operations stored in the security operations table associated with the first security check; and applying at least one of the one or more security operations to the data. Applying the first security check to the data may includes terminating the first security check in response to determining that a security operation of the one or more security operations did not return a true value. Applying the first security check to the data may include determining not to process a second security check associated with the security operation. At least one security operation may be mapped to at least two security checks.</p>
<p id="p-0010" num="0009">Other embodiments of this aspect include corresponding systems, apparatus, and computer programs configured to perform the actions of the methods encoded on computer storage devices.</p>
<p id="p-0011" num="0010">Particular embodiments of the subject matter described in this specification can be implemented so as to realize one or more of the following advantages. Token analysis rules may be processed more rapidly. Redundant conditions which span multiple rules do not need to be checked multiple times. Memory used for storing rules may be used more efficiently.</p>
<p id="p-0012" num="0011">The details of one or more embodiments of the subject matter described in this specification are set forth in the accompanying drawings and the description below. Other features, aspects, and advantages of the subject matter will become apparent from the description, the drawings, and the claims.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. 1</figref> is a block diagram showing an exemplary environment in which token processing occurs.</p>
<p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. 2</figref> is a block diagram of an exemplary intrusion detection system.</p>
<p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. 3</figref> is a diagram showing an exemplary data structure by which security checks are mapped to security processes.</p>
<p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. 4</figref> shows exemplary data structure by which operations are described.</p>
<p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. 5</figref> shows an example of interaction between two data structures.</p>
<p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. 6</figref> shows an example of storing a portion of a rule in the data structures.</p>
<p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. 7</figref> is a flow chart illustrating an example process for token processing.</p>
<p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. 8</figref> is a flowchart showing an example process for token processing.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<p id="p-0021" num="0020">Like reference numbers and designations in the various drawings indicate like elements.</p>
<heading id="h-0004" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. 1</figref> is a block diagram showing an exemplary environment in which token processing occurs. Client computers <b>108</b><i>a</i>-<i>c </i>connect to a local area network <b>106</b>. An intrusion prevention system <b>104</b> protects the local area network (LAN) <b>106</b> from traffic originating from a wide area network (WAN) <b>102</b>. A example WAN is the Internet. A firewall server is often associated with a gateway, which acts as a transfer point connecting one network (the LAN <b>106</b>) and another (the WAN <b>102</b>), and a router, which directs network traffic to the appropriate network (the WAN <b>102</b> or LAN <b>106</b>). Client computers <b>108</b><i>a</i>-<i>c </i>connect to the LAN <b>106</b>. When a host computer <b>110</b> on the WAN <b>102</b> communicates with a client (for example client <b>108</b><i>a</i>) the message is routed through the intrusion prevention system <b>104</b>. In some scenarios, a computer <b>110</b> may be directly connected to the WAN <b>102</b> may also act as a firewall.</p>
<p id="p-0023" num="0022">The intrusion prevention system <b>104</b> and computer <b>110</b> may include an intrusion detection system <b>112</b>. In some embodiments, an intrusion detection system <b>112</b> may also be included in a firewall or other networked device. The intrusion detection system <b>112</b> analyzes and logs network traffic, checking packets against a set of rules. Each rule specifies a set of conditions (i.e., one or more conditions) that must be satisfied for that rule to take effect. For example, the intrusion detection system has rules includes conditions to detect packets containing specified content, packets from a specific location, or packets directed to a specific destination. When a packet that satisfies all of the conditions of a particular rule is detected, the intrusion detection system <b>112</b> may take appropriate actions, such as blocking the packet or blocking traffic from the source of the packet, cleaning the packet, or even allowing the packet to pass. The remedial actions may be specified by the rule or specified by another rule set. When a packet fails to satisfy at least one security operation then the packet does not satisfy the rule.</p>
<p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. 2</figref> is a block diagram of an exemplary intrusion detection system. The exemplary intrusion detection system <b>200</b> is an example of an intrusion detection system <b>112</b> of <figref idref="DRAWINGS">FIG. 1</figref>. The intrusion detection system contains two modules, a traffic collector <b>210</b> and a token processor <b>230</b>. The traffic collector <b>210</b> collects data transmitted over the network for analysis by the token processor <b>230</b>. The traffic collector <b>210</b> may include, among other components, a packet analyzer <b>212</b>, a pattern matcher <b>338</b>, and a packet processor <b>240</b>. Generally, a packet analyzer <b>212</b> intercepts and logs traffic passing over a network. The packet analyzer <b>212</b> captures each packet and decodes the packet for analysis by the token processor <b>230</b>.</p>
<p id="p-0025" num="0024">The token processor <b>230</b> includes a rule parser <b>234</b>, a rule data store <b>236</b>, and a rules execution engine <b>242</b>. The rule parser <b>234</b> receives a rule set <b>220</b>. The rule set may be stored in a database or in a flat file. The rule parser <b>234</b> reads rules from the rule set and parses the rules into security checks, security processes, and security operations.</p>
<p id="p-0026" num="0025">A security operation is an operation which may be performed against a packet. In general, security operations perform the operations to determine if the data satisfies the conditions of the rule. For example, a security operation may compare a packets source IP address, or its destination IP address, or the contents of its payload. Generally, a security operation may be defined by an opcode and an operand. A security process is a group of one or more security operations that are frequently performed together. For example, a security process may combine operations checking traffic with a destination of a particular server and a particular port (for example, traffic directed to a web server on port <b>80</b>). A security check defines one or more security processes which define an alert condition. For example, traffic directed toward the web server on port <b>80</b> does not in itself raise constitute an attempted intrusion, instead the security check may combine other security processes which when taken together suggest an attempted intrusion. The rule parser <b>234</b> maps each of the security checks to one or more security processes and each of the security processes to one or more security checks. The parsed rules are tokenized into various token data structures. The token data structures are stored in a rule data store <b>236</b> for later processing by the rules execution engine <b>242</b>. In some embodiments, the rule parser identifies content tokens and stores them in a data dictionary.</p>
<p id="p-0027" num="0026">The token processor <b>230</b> receives packet information from the traffic collector <b>210</b>. The pattern matcher <b>238</b> performs comparisons of packet information from the traffic collector <b>210</b> to the data dictionary. The data dictionary includes an indication as to which security checks to execute when the token is found in the packet information. Each token in the data dictionary identifies one or more security checks to be performed against the packet information.</p>
<p id="p-0028" num="0027">The packet processor <b>240</b> receives packet information from the traffic collector <b>210</b>. The packet processor identifies source and destination information associated with the packet, for example, the Internet Address of the packet source and the Internet Address of the intended destination of the packet. The source and destination information is compared to a list of source and destination information. If any of the source and destination information appears on the list, the list further identifies one or more security checks to be performed against the packet information.</p>
<p id="p-0029" num="0028">The rules execution engine <b>242</b> receives the packet information and one or more checks to perform on the packet information. The rules execution engine <b>242</b> performs the security checks. To perform the security checks, the rules execution engine <b>242</b> performs all of the security processes associated with the security checks. If all of the security processes in the security check come back true, the rules execution engine <b>242</b> performs the alert action associated with the security check. Alternatively, if any of the security processes do not come back true, then processing for that security check ceases.</p>
<p id="p-0030" num="0029"><figref idref="DRAWINGS">FIG. 3</figref> is a diagram showing an exemplary data structure <b>300</b> by which security checks representing the virtual tokens are mapped to virtual checks, which in turn are mapped to security processes, and security processes to security operations.</p>
<p id="p-0031" num="0030">Security checks are stored in a security check data structure <b>302</b>. Individual security checks are identified by a key. In this example, the key is an offset into the security check data structure that could be for example be identified by the ID of a found token. For example, a key of &#x2018;5&#x2019; may indicate the fifth security check stored in the security check data structure <b>302</b>. In embodiments where the key is an offset into the security check data structure, the key does not have to be physically included in the data structure, but may be implicit. For example, the fifth security check stored in the security check data structure <b>302</b> remains the fifth security check regardless of whether the number &#x2018;5&#x2019; is stored in a key field. In other embodiments, the key may be a surrogate key that carries no particular meaning beyond identifying the entry in the data structure.</p>
<p id="p-0032" num="0031">Each security check key identifies one or more virtual checks in a virtual check data structure <b>304</b>. In this example, the security check identifies an offset into the virtual checks data structure and a count. The offset represents a key into the virtual check data structure <b>304</b>. The count represents the number of entries to process, beginning at the offset.</p>
<p id="p-0033" num="0032">Each virtual check key identifies one or more security processes in a security process data structure <b>306</b>. In this example, the virtual check identifies an offset into the security processes data structure and a count. The offset represents a key into the security processes data structure <b>306</b>. The count represents the number of entries to process, beginning at the offset. In general, virtual checks are designed to enable the reuse of the virtual check by different security checks.</p>
<p id="p-0034" num="0033">Each security process key identifies one or more operations in an operations data structure <b>308</b>. In this example, the security process identifies an offset into the operations data structure and a count. The offset represents a key into the operations data structure <b>308</b>. The count represents the number of entries to process, beginning at the offset. In general, security processes are designed to enable the reuse of the security process by different virtual checks.</p>
<p id="p-0035" num="0034"><figref idref="DRAWINGS">FIG. 4</figref> shows an exemplary data structure by which operations are represented The operations data structure includes an opcode and an operand. The opcode and the operand inform the rules execution engine as to the operations to execute. Some opcodes and operands may provide sufficient information for the rule execution engine to perform the operations; other opcodes and operands identify operations which require further information. For example, an opcode and an operand combination may inform the rules execution engine to check the IP address of the destination of the packet against reference values. The reference values are stored in a separate data structure. Examples of reference value data structures include a byte operation data structure <b>402</b>, an Internet Protocol address data structure <b>404</b>, a port data structure <b>406</b>, and a flow state data structure <b>408</b>.</p>
<p id="p-0036" num="0035">In general, the byte operation data structure <b>402</b> provides conditions relating to byte comparison operations. For example, the byte operations data structure may include an offset field and a length field.</p>
<p id="p-0037" num="0036">The Internet Protocol address data structure <b>404</b> stores Internet Protocol (IP) addresses and a subnet mask information associated with operations. For example, the IP address data structure may specify a source and/or destination address from which a packet is received from or addressed to.</p>
<p id="p-0038" num="0037">The ports data structure <b>406</b> stores ports information associated with operations. For example, the port data structure may specify a port of an IP address from which a packet is received from or addressed to.</p>
<p id="p-0039" num="0038">The flow state data structure <b>408</b> stores flow state information associated with operations. Flow state data is used to detect a pattern of traffic on the network. For example, if a particular security check is triggered the resulting action may place an entry into the flow state table indicating that the security check was true. Later, another packet may result in another security check which is associated with a security operation which comes back true based on the existence of the entry in the flow state table.</p>
<p id="p-0040" num="0039"><figref idref="DRAWINGS">FIG. 5</figref> shows an example of interrelation of two data structures. A first data structure <b>502</b> which refers to elements of a second data structure <b>504</b> is shown. For example, the first data structure <b>502</b> could be the security check data structure <b>302</b> of <figref idref="DRAWINGS">FIG. 3</figref> and the second data structure <b>504</b> could be the virtual check data structure <b>304</b> of <figref idref="DRAWINGS">FIG. 3</figref>. In another scenario, the first data structure could be the virtual check data structure <b>304</b> of <figref idref="DRAWINGS">FIG. 3</figref> and the second data structure could be the security processes data structure <b>306</b> of <figref idref="DRAWINGS">FIG. 3</figref>. In yet another scenario, the first data structure could be the security processes data structure <b>306</b> of <figref idref="DRAWINGS">FIG. 3</figref> and the second data structure could be the operations data structure <b>308</b> of <figref idref="DRAWINGS">FIG. 3</figref>.</p>
<p id="p-0041" num="0040">Multiple entries in one data structure may point to the same entries in the another data structure. In this example, key &#x2018;T&#x2019; <b>506</b> in the first data structure <b>502</b> refers to offset &#x2018;C&#x2019; with count W which corresponds to the &#x2018;C&#x2019; key <b>516</b> in the second data structure <b>504</b>. As shown by the shaded region <b>510</b>, the first data structure &#x2018;T&#x2019; <b>506</b> identifies entries &#x2018;C&#x2019; <b>516</b> through &#x2018;C+w&#x2212;1&#x2019; <b>520</b> in the second data structure. As shown by the shaded region <b>512</b>, the &#x201c;T+3&#x201d; entry <b>508</b> in the first data structure <b>502</b> identifies entries &#x2018;C+1&#x2019; <b>518</b> through &#x2018;C+w&#x2019; <b>522</b> in the second data structure <b>504</b>. The shaded region <b>514</b> identifies the entries in the second data structure <b>504</b> which are identified by both the &#x2018;T&#x2019; entry <b>506</b> and the &#x2018;T+3&#x2019; entry <b>508</b>.</p>
<p id="p-0042" num="0041"><figref idref="DRAWINGS">FIG. 6</figref> shows an example of mapping a rule into the data structures. Rule <b>602</b> requires that an alert &#x201c;Test Msg&#x201d; be raised if, among other criteria, a packet is sent from IP Address 192.168.1.1 on any port to 192.168.1.100 on port 80 and if the content of the packet includes &#x201c;cmd.exe&#x201d; in an offset of 10 and a depth of 100.</p>
<p id="p-0043" num="0042">The rule parser receives rule <b>602</b> and determines that the operations which check the source IP address and port, the destination IP address and port, the offset, and the depth should be included in the same security process. The rules parser inserts entries into the operations data structure corresponding to the conditions of the rule. For example, operations <b>604</b><i>a</i>-<i>f </i>are identified by security process <b>606</b>. Some operations are fully expressed by an opcode and an operand. For example, operation <b>604</b><i>d </i>describes an &#x201c;OFFSET&#x201d; opcode with an operand of &#x201c;10&#x201d; and operation <b>604</b><i>e </i>defines an operation of &#x201c;DEPTH&#x201d; and an operand of &#x201c;100.&#x201d;</p>
<p id="p-0044" num="0043">Other operations require additional data structures to fully define the operation. These additional data structures allow for efficient security operations. For example, the data structures allow for an operation to specify a range of values. A security operations may check if the packet is addressed to any port within a range of ports, for example ports 40-120. Without the ability to define a range of ports, this check would require 81 highly repetitive security operations. By defining a range of ports in a single data structure, the same check may be accomplished with a single operation.</p>
<p id="p-0045" num="0044">For example, the operation <b>604</b><i>a </i>with an opcode of &#x201c;Source IP&#x201d; references an entry in an IP data structure. An entry in the IP data structure <b>608</b> corresponds to the operation <b>604</b><i>a</i>. In some embodiments, the opcode of the operation <b>604</b><i>a </i>identifies the data structure and the operand of the operation <b>604</b><i>a </i>provides a key to the IP data structure <b>608</b>. In other embodiments, the operand of the operation <b>604</b><i>a </i>identifies an offset into the IP data structure.</p>
<p id="p-0046" num="0045">The IP data structure may contain an IP field which includes an Internet Protocol Address and a mask which identifies a type of network. For example, a mask value of 24 indicates a Class C network, a value of 16 indicates a Class B network, and a value of 32 indicates a specific network address. In general, a class B network encompasses all IP addresses that share the first two dotted decimal values in the address. For example, the IP address 192.168.0.0 with a mask of 16 would match IP addresses from 192.168.0.0 to 192.168.255.255. A class C network encompasses all IP addresses which share the first three dotted decimal values in the address. For example, the IP address 192.168.1.0 with a mask of 24 would indicate the address block from 192.168.1.0 to 192.168.1.255. In contrast, an IP address 192.168.1.1 with a mask of 32 would match only IP address 192.168.1.1.</p>
<p id="p-0047" num="0046">Operation <b>604</b><i>c </i>identifies an entry in the ports' data structure. In some embodiments, the opcode of the operation <b>604</b><i>c </i>provides a key to the ports' data structure. In other embodiments, the opcode of the operation <b>604</b><i>c </i>identifies an offset into the ports' data structure. In general, the port data structure identifies a single port of a range of ports. For example, port entry <b>612</b> describes a single port, port 80. In this embodiment, the zero in the Port<b>2</b> field indicates no port. Entry <b>614</b> in the port data structure provides two values, port<b>1</b> has a value of 60, and port<b>2</b> has a value of 80. This identifies a range of ports from port <b>60</b> to port <b>80</b>.</p>
<p id="p-0048" num="0047">In general, the operations describe conditions which must be met to cause the security check to be true. For example, operation <b>604</b><i>c </i>coupled with the port data structure entry <b>612</b> requires that the packet be sent to port <b>80</b>. If, for example, a packet were sent to another port, for example port <b>100</b>, then the conditions of the operation would not be met, at which point the conditions of the security process <b>606</b> would not be met and no further processing of that security process would be required. That is, no further operations associated with the security process would need to be checked.</p>
<p id="p-0049" num="0048">For example, in one scenario, security check <b>620</b> includes virtual check <b>618</b> and virtual check <b>622</b>. Virtual check <b>618</b> includes security process <b>606</b> and security process <b>616</b>. Security process <b>606</b> includes security operations Source IP <b>604</b><i>a</i>, Dest IP <b>604</b><i>b</i>, Dest Port <b>604</b><i>c</i>, OFFSET <b>604</b><i>d</i>, DEPTH <b>604</b><i>e</i>, and SSID <b>604</b><i>f</i>. The security operation Source IP <b>604</b><i>a </i>references the IP data structure entry a <b>608</b> checking for a source IP address of 192.168.1.1. If security check <b>620</b> is being executed against a packet with a source IP address of 192.168.1.2, then the source IP operation did not match the packet. Once it is determined that the security operation <b>604</b><i>a </i>does not match, the remaining security operations <b>604</b><i>b</i>-<i>f </i>in the security process <b>606</b> will not be executed.</p>
<p id="p-0050" num="0049">Once it is determined that the conditions of the security process <b>606</b> have not been met, it follows that the conditions of virtual check <b>618</b> have not been met, and therefore, operations associated with other security processes identified by the virtual check would not have to be performed, for example security process <b>616</b>. Likewise, once it is determined that the conditions of virtual check <b>618</b> have not been met, it follows that the conditions of the security check <b>620</b> have not been met, and therefore, operations associated with other virtual checks identified by the security check would not have to be performed, for example virtual check <b>622</b>. That is, an operation that does not meet its condition terminates processing of the entire security check. In some embodiments, if the same packet results in a first security check and second security check which both identify a common operation, and the conditions of that operation are not met when processing the first security check, the second security check does not need to be processed.</p>
<p id="p-0051" num="0050"><figref idref="DRAWINGS">FIG. 7</figref> is a flow chart illustrating an example process for token processing. The example process <b>700</b> can be implemented in a rules parser, for example the rules parser <b>234</b> of <figref idref="DRAWINGS">FIG. 2</figref>, or embodied in software code that runs independently as a separate program with its own computer processes, services, and processes.</p>
<p id="p-0052" num="0051">The process receives security processing rules (<b>702</b>). Each of security processing rules define one or more security checks and security processes corresponding to each security check. The security processes are to be performed when the security check occurs.</p>
<p id="p-0053" num="0052">The process generates a mapping of security checks <b>704</b>. The security checks are mapped to security processes. The mapping includes a security check entry for each security check that is defined in the security processing rules. Each security check is mapped to one or more security process which the security processing rules define as corresponding to the security check. In some embodiments, an entry in a security check table is generated for each security check.</p>
<p id="p-0054" num="0053"><figref idref="DRAWINGS">FIG. 8</figref> is a flowchart showing an example process for token processing. The example, process <b>700</b> can be implemented in a rules parser, for example the rules parser <b>234</b> of <figref idref="DRAWINGS">FIG. 2</figref>, or embodied in software code that runs independently as a separate program with its own computer processes and services.</p>
<p id="p-0055" num="0054">The process receives security processing rules (<b>802</b>) in a manner similar to the receiving security processing rules (<b>702</b>) as described above with respect to <figref idref="DRAWINGS">FIG. 7</figref>.</p>
<p id="p-0056" num="0055">The process identifies security checks (<b>804</b>). The received security processing rules contain one or more security checks. In some embodiments, one security check is identified for each rule. In other embodiments, one or more security checks may be identified for each rule.</p>
<p id="p-0057" num="0056">The process identifies security processes (<b>806</b>). Security processes represent a group of operations which frequently occur together or are unique for a single rule. In one embodiment, the process identifies operations that are required by the security processing rules. The process groups operations which occur together in more than one rule into a security process. In some embodiments, the remaining operations for each rule are grouped into a security process, one process for each rule. In other embodiments, the remaining operations are each assigned their own security process.</p>
<p id="p-0058" num="0057">The process generates mappings for security checks and security processes. In some embodiments, security processes are mapped to security checks through a virtual check data structure. Each virtual check identifies a plurality of security processes and each security check identifies a plurality of virtual checks. Generally, security checks are mapped to security processes in a manner to enable the reuse of security processes in virtual checks and to enable the reuse of virtual checks in security checks.</p>
<p id="p-0059" num="0058">Embodiments of the subject matter and the operations described in this specification can be implemented in digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them. Embodiments of the subject matter described in this specification can be implemented as one or more computer programs, i.e., one or more modules of computer program instructions, encoded on computer storage medium for execution by, or to control the operation of, data processing apparatus. Alternatively or in addition, the program instructions can be encoded on an artificially-generated propagated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal that is generated to encode information for transmission to suitable receiver apparatus for execution by a data processing apparatus. A computer storage medium can be, or be included in, a computer-readable storage device, a computer-readable storage substrate, a random or serial access memory array or device, or a combination of one or more of them. Moreover, while a computer storage medium is not a propagated signal, a computer storage medium can be a source or destination of computer program instructions encoded in an artificially-generated propagated signal. The computer storage medium can also be, or be included in, one or more separate physical components or media (e.g., multiple CDs, disks, or other storage devices).</p>
<p id="p-0060" num="0059">The operations described in this specification can be implemented as operations performed by a data processing apparatus on data stored on one or more computer-readable storage devices or received from other sources.</p>
<p id="p-0061" num="0060">The term &#x201c;data processing apparatus&#x201d; encompasses all kinds of apparatus, devices, and machines for processing data, including. by way of example. a programmable processor, a computer, a system on a chip, or multiple ones, or combinations of the foregoing The apparatus can include special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit). The apparatus can also include, in addition to hardware, code that creates an execution environment for the computer program in question, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, a cross-platform runtime environment, a virtual machine, or a combination of one or more of them. The apparatus and execution environment can realize various different computing model infrastructures, such as web services, distributed computing and grid computing infrastructures.</p>
<p id="p-0062" num="0061">A computer program (also known as a program, software, software application, script, or code) can be written in any form of programming language, including compiled or interpreted languages, declarative or procedural languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, object, or other unit suitable for use in a computing environment. A computer program may, but need not, correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language document), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, sub-programs, or portions of code). A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.</p>
<p id="p-0063" num="0062">The processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs to perform actions by operating on input data and generating output. The processes and logic flows can also be performed by, and apparatus can also be implemented as, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).</p>
<p id="p-0064" num="0063">Processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors, and any one or more processors of any kind of digital computer. Generally, a processor will receive instructions and data from a read-only memory or a random access memory or both. The essential elements of a computer are a processor for performing actions in accordance with instructions and one or more memory devices for storing instructions and data. Generally, a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks. However, a computer need not have such devices. Moreover, a computer can be embedded in another device, e.g., a mobile telephone, a personal digital assistant (PDA), a mobile audio or video player, a game console, a Global Positioning System (GPS) receiver, or a portable storage device (e.g., a universal serial bus (USB) flash drive), to name just a few. Devices suitable for storing computer program instructions and data include all forms of non-volatile memory, media, and memory devices, including, by way of example, semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto-optical disks; and CD-ROM and DVD-ROM disks. The processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.</p>
<p id="p-0065" num="0064">To provide for interaction with a user, embodiments of the subject matter described in this specification can be implemented on a computer having a display device, e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor, for displaying information to the user and a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input. In addition, a computer can interact with a user by sending documents to and receiving documents from a device that is used by the user, for example, by sending web pages to a web browser on a user's client device in response to requests received from the web browser.</p>
<p id="p-0066" num="0065">Embodiments of the subject matter described in this specification can be implemented in a computing system that includes a back-end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front-end component, e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described in this specification, or any combination of one or more such back-end, middleware, or front-end components. The components of the system can be interconnected by any form or medium of digital data communication, e.g., a communication network. Examples of communication networks include a local area network (&#x201c;LAN&#x201d;) and a wide area network (&#x201c;WAN&#x201d;), an inter-network (e.g., the Internet), and peer-to-peer networks (e.g., ad hoc peer-to-peer networks).</p>
<p id="p-0067" num="0066">The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other. In some embodiments, a server transmits data (e.g., an HTML page) to a client device (e.g., for purposes of displaying data to and receiving user input from a user interacting with the client device). Data generated at the client device (e.g., a result of the user interaction) can be received from the client device at the server.</p>
<p id="p-0068" num="0067">While this specification contains many specific implementation details, these should not be construed as limitations on the scope of any inventions or of what may be claimed, but rather as descriptions of features specific to particular embodiments of particular inventions. Certain features that are described in this specification in the context of separate embodiments can also be implemented in combination in a single embodiment. Conversely, various features that are described in the context of a single embodiment can also be implemented in multiple embodiments separately or in any suitable subcombination. Moreover, although features may be described above as acting in certain combinations and even initially claimed as such, one or more features from a claimed combination can, in some cases, be excised from the combination, and the claimed combination may be directed to a subcombination or variation of a subcombination.</p>
<p id="p-0069" num="0068">Similarly, while operations are depicted in the drawings in a particular order, this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order, or that all illustrated operations be performed, to achieve desirable results. In certain circumstances, multitasking and parallel processing may be advantageous. Moreover, the separation of various system components in the embodiments described above should not be understood as requiring such separation in all embodiments, and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.</p>
<p id="p-0070" num="0069">Thus, particular embodiments of the subject matter have been described. Other embodiments are within the scope of the following claims. In some cases, the actions recited in the claims can be performed in a different order and still achieve desirable results. In addition, the processes depicted in the accompanying figures do not necessarily require the particular order shown, or sequential order, to achieve desirable results. In certain implementations, multitasking and parallel processing may be advantageous.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A computer-implemented method performed by data processing apparatus, the method comprising:
<claim-text>determining that a particular one of a plurality of tokens is included in one or more packets of network traffic;</claim-text>
<claim-text>identifying a particular set of security checks corresponding to the particular token, the set of security checks including one or more security checks of a plurality of security checks, wherein each security check includes one or more security processes of a plurality of security processes, and each security process includes one or more security operations of a plurality of security operations, and wherein each security process corresponds to an alert condition satisfied based on results of the respective set of security operations;</claim-text>
<claim-text>using a data structure mapping of security checks to security operations to identify for each security check in the particular set of security checks a respective set of processes, and for each security process in the set of security processes a respective set of security operations to be applied to data of the one or more packets, wherein a particular security operation is reused between at least two, but less than all, of the plurality of security checks, and the data structure includes a check data structure including entries for each of the security checks in the plurality of security checks, each security check entry referencing entries of a security process data structure corresponding to the set of security processes included in the respective security check, the security process data structure including, for each security process, a reference to entries of a security operation data structure corresponding to the set of security operations of the respective security process.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The computer-implemented method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein each of the entries of the operation data structure includes an opcode and an operand identifying a security operation.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The computer-implemented method of <claim-ref idref="CLM-00001">claim 1</claim-ref>,
<claim-text>further comprising applying at least one of the security operations mapped to one or more of the set of security checks to data of the one or more packets.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The computer-implemented method of <claim-ref idref="CLM-00003">claim 3</claim-ref> wherein applying the first security check to the data includes terminating the first security check in response to determining that a security operation of the one or more security operations did not return a true value.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The computer-implemented method of <claim-ref idref="CLM-00004">claim 4</claim-ref> wherein applying the first security check to the data includes determining not to process a second security check associated with the security operation.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein each reference to records of the security process data structure within records of the check data structure includes an offset value and a count value.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein each reference to records of the security operation data structure within records of the security process data structure includes an offset value and a count value.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. A non-transitory computer storage medium encoded with a computer program, the program comprising instructions that when executed by data processing apparatus cause the data processing apparatus to perform operations comprising:
<claim-text>determining that a particular one of a plurality of tokens is included in one or more packets of network traffic;</claim-text>
<claim-text>identifying a particular set of security checks corresponding to the particular token, the set of security checks including one or more security checks of a plurality of security checks, wherein each security check includes one or more security processes of a plurality of security processes, and each security process includes one or more security operations of a plurality of security operations, and wherein each security process corresponds to an alert condition satisfied based on results of the respective set of security operations;</claim-text>
<claim-text>using a data structure mapping of security checks to security operations to identify for each security check in the particular set of security checks a respective set of processes, and for each security process in the set of security processes a respective set of security operations to be applied to data of the one or more packets, wherein a particular security operation is reused between at least two, but less than all, of the plurality of security checks,</claim-text>
<claim-text>the data structure includes a check data structure including entries for each of the security checks in the plurality of security checks, each security check entry referencing entries of a security process data structure corresponding to the set of security processes</claim-text>
<claim-text>included in the respective security check, the security process data structure including, for each security process, a reference to entries of a security operation data structure corresponding to the set of security operations of the respective security process.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The non-transitory computer storage medium of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein each of the entries of the operation data structure includes an opcode and an operand identifying a security operation.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The non-transitory computer storage medium of <claim-ref idref="CLM-00008">claim 8</claim-ref>, further comprising applying at least one of the security operations mapped to one or more of the set of security checks to data of the one or more packets.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The non-transitory computer storage medium of <claim-ref idref="CLM-00010">claim 10</claim-ref> wherein applying the first security check to the data includes terminating the first security check in response to determining that a security operation of the one or more security operations did not return a true value.</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The non-transitory computer storage medium of <claim-ref idref="CLM-00011">claim 11</claim-ref> wherein applying the first security check to the data includes determining not to process a second security check associated with the security operation.</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The non-transitory computer storage medium of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein each reference to records of the security process data structure within records of the check data structure includes an offset value and a count value.</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The non-transitory computer storage medium of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein each reference to records of the security operation data structure within records of the security process data structure includes an offset value and a count value.</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. A system comprising:
<claim-text>one or more computers, and;</claim-text>
<claim-text>a computer-readable medium coupled to the one or more computers having instructions stored thereon which, when executed by the one or more computers, cause the one or more computers to perform operations comprising:
<claim-text>determining that a particular one of a plurality of tokens is included in one or more packets of network traffic;</claim-text>
<claim-text>identifying a particular set of security checks corresponding to the particular token, the set of security checks including one or more security checks of a plurality of security checks, wherein each security check includes one or more security processes of a plurality of security processes, and each security process includes one or more security operations of a plurality of security operations, and wherein each security process corresponds to an alert condition satisfied based on results of the respective set of security operations;</claim-text>
<claim-text>using a data structure mapping of security checks to security operations to identify for each security check in the particular set of security checks a respective set of processes, and for each security process in the set of security processes a respective set of security operations to be applied to data of the one or more packets, wherein a particular security operation is reused between at least two, but less than all, of the plurality of security checks, and</claim-text>
<claim-text>the data structure includes a check data structure including entries for each of the security checks in the plurality of security checks, each security check entry referencing entries of a security process data structure corresponding to the set of security processes included in the respective security check, the security process data structure including, for each security process, a reference to entries of a security operation data structure corresponding to the set of security operations of the respective security process.</claim-text>
</claim-text>
</claim-text>
</claim>
</claims>
</us-patent-grant>

<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08626877-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08626877</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>10113472</doc-number>
<date>20020329</date>
</document-id>
</application-reference>
<us-application-series-code>10</us-application-series-code>
<us-term-of-grant>
<us-term-extension>890</us-term-extension>
<disclaimer>
<text>This patent is subject to a terminal disclaimer.</text>
</disclaimer>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>17</main-group>
<subgroup>30</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>709220</main-classification>
<further-classification>707738</further-classification>
</classification-national>
<invention-title id="d2e55">Method and system for implementing a global information bus in a global ecosystem of interrelated services</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>4977520</doc-number>
<kind>A</kind>
<name>McGaughey, III et al.</name>
<date>19901200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>5008878</doc-number>
<kind>A</kind>
<name>Ahmadi et al.</name>
<date>19910400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>370353</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>5014266</doc-number>
<kind>A</kind>
<name>Bales et al.</name>
<date>19910500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>370354</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>5019961</doc-number>
<kind>A</kind>
<name>Addesso et al.</name>
<date>19910500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>5058108</doc-number>
<kind>A</kind>
<name>Mann et al.</name>
<date>19911000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>5111391</doc-number>
<kind>A</kind>
<name>Fields et al.</name>
<date>19920500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>5117353</doc-number>
<kind>A</kind>
<name>Stipanovich et al.</name>
<date>19920500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>5467268</doc-number>
<kind>A</kind>
<name>Sisley et al.</name>
<date>19951100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>5484393</doc-number>
<kind>A</kind>
<name>McCoy</name>
<date>19960100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>5515531</doc-number>
<kind>A</kind>
<name>Fujiwara et al.</name>
<date>19960500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
<classification-national><country>US</country><main-classification>707  3</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>5526353</doc-number>
<kind>A</kind>
<name>Henley et al.</name>
<date>19960600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>370392</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>5560006</doc-number>
<kind>A</kind>
<name>Layden et al.</name>
<date>19960900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
<classification-national><country>US</country><main-classification>707  2</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00013">
<document-id>
<country>US</country>
<doc-number>5608786</doc-number>
<kind>A</kind>
<name>Gordon</name>
<date>19970300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00014">
<document-id>
<country>US</country>
<doc-number>5615121</doc-number>
<kind>A</kind>
<name>Babayev et al.</name>
<date>19970300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00015">
<document-id>
<country>US</country>
<doc-number>5640556</doc-number>
<kind>A</kind>
<name>Tamura</name>
<date>19970600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
<classification-national><country>US</country><main-classification>707 10</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00016">
<document-id>
<country>US</country>
<doc-number>5680530</doc-number>
<kind>A</kind>
<name>Selfridge et al.</name>
<date>19971000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
<classification-national><country>US</country><main-classification>345440</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00017">
<document-id>
<country>US</country>
<doc-number>5692125</doc-number>
<kind>A</kind>
<name>Schloss et al.</name>
<date>19971100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00018">
<document-id>
<country>US</country>
<doc-number>5704036</doc-number>
<kind>A</kind>
<name>Brownmiller et al.</name>
<date>19971200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00019">
<document-id>
<country>US</country>
<doc-number>5721770</doc-number>
<kind>A</kind>
<name>Kohler</name>
<date>19980200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00020">
<document-id>
<country>US</country>
<doc-number>5721913</doc-number>
<kind>A</kind>
<name>Ackroff et al.</name>
<date>19980200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
<classification-national><country>US</country><main-classification>707103</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00021">
<document-id>
<country>US</country>
<doc-number>5724412</doc-number>
<kind>A</kind>
<name>Srinivasan</name>
<date>19980300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00022">
<document-id>
<country>US</country>
<doc-number>5726984</doc-number>
<kind>A</kind>
<name>Kubler et al.</name>
<date>19980300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00023">
<document-id>
<country>US</country>
<doc-number>5734837</doc-number>
<kind>A</kind>
<name>Flores et al.</name>
<date>19980300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00024">
<document-id>
<country>US</country>
<doc-number>5737727</doc-number>
<kind>A</kind>
<name>Lehmann et al.</name>
<date>19980400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00025">
<document-id>
<country>US</country>
<doc-number>5749075</doc-number>
<kind>A</kind>
<name>Toader et al.</name>
<date>19980500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00026">
<document-id>
<country>US</country>
<doc-number>5751706</doc-number>
<kind>A</kind>
<name>Land et al.</name>
<date>19980500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00027">
<document-id>
<country>US</country>
<doc-number>5758078</doc-number>
<kind>A</kind>
<name>Kurita et al.</name>
<date>19980500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00028">
<document-id>
<country>US</country>
<doc-number>5761499</doc-number>
<kind>A</kind>
<name>Sonderegger</name>
<date>19980600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00029">
<document-id>
<country>US</country>
<doc-number>5764906</doc-number>
<kind>A</kind>
<name>Edelstein et al.</name>
<date>19980600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00030">
<document-id>
<country>US</country>
<doc-number>5765140</doc-number>
<kind>A</kind>
<name>Knudson et al.</name>
<date>19980600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00031">
<document-id>
<country>US</country>
<doc-number>5774656</doc-number>
<kind>A</kind>
<name>Hattori et al.</name>
<date>19980600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00032">
<document-id>
<country>US</country>
<doc-number>5774661</doc-number>
<kind>A</kind>
<name>Chatterjee et al.</name>
<date>19980600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
<classification-national><country>US</country><main-classification>709203</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00033">
<document-id>
<country>US</country>
<doc-number>5779297</doc-number>
<kind>A</kind>
<name>Flauss</name>
<date>19980700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
<classification-national><country>US</country><main-classification>296 93</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00034">
<document-id>
<country>US</country>
<doc-number>5799297</doc-number>
<kind>A</kind>
<name>Goodridge et al.</name>
<date>19980800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00035">
<document-id>
<country>US</country>
<doc-number>5799313</doc-number>
<kind>A</kind>
<name>Blackman et al.</name>
<date>19980800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00036">
<document-id>
<country>US</country>
<doc-number>5802511</doc-number>
<kind>A</kind>
<name>Kouchi et al.</name>
<date>19980900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00037">
<document-id>
<country>US</country>
<doc-number>5848393</doc-number>
<kind>A</kind>
<name>Goodridge et al.</name>
<date>19981200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
<classification-national><country>US</country><main-classification>705  8</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00038">
<document-id>
<country>US</country>
<doc-number>5867494</doc-number>
<kind>A</kind>
<name>Krishnaswamy et al.</name>
<date>19990200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00039">
<document-id>
<country>US</country>
<doc-number>5872841</doc-number>
<kind>A</kind>
<name>King et al.</name>
<date>19990200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00040">
<document-id>
<country>US</country>
<doc-number>5873093</doc-number>
<kind>A</kind>
<name>Williamson et al.</name>
<date>19990200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00041">
<document-id>
<country>US</country>
<doc-number>5884029</doc-number>
<kind>A</kind>
<name>Brush, II et al.</name>
<date>19990300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00042">
<document-id>
<country>US</country>
<doc-number>5918229</doc-number>
<kind>A</kind>
<name>Davis et al.</name>
<date>19990600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00043">
<document-id>
<country>US</country>
<doc-number>5920846</doc-number>
<kind>A</kind>
<name>Storch et al.</name>
<date>19990700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00044">
<document-id>
<country>US</country>
<doc-number>5926539</doc-number>
<kind>A</kind>
<name>Shtivelman</name>
<date>19990700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00045">
<document-id>
<country>US</country>
<doc-number>5940804</doc-number>
<kind>A</kind>
<name>Turley et al.</name>
<date>19990800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
<classification-national><country>US</country><main-classification>705  9</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00046">
<document-id>
<country>US</country>
<doc-number>5958013</doc-number>
<kind>A</kind>
<name>King et al.</name>
<date>19990900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00047">
<document-id>
<country>US</country>
<doc-number>5960173</doc-number>
<kind>A</kind>
<name>Tang et al.</name>
<date>19990900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00048">
<document-id>
<country>US</country>
<doc-number>5960194</doc-number>
<kind>A</kind>
<name>Choy et al.</name>
<date>19990900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
<classification-national><country>US</country><main-classification>707102</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00049">
<document-id>
<country>US</country>
<doc-number>5968121</doc-number>
<kind>A</kind>
<name>Logan et al.</name>
<date>19991000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
<classification-national><country>US</country><main-classification>709219</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00050">
<document-id>
<country>US</country>
<doc-number>5999910</doc-number>
<kind>A</kind>
<name>Rosenfeld et al.</name>
<date>19991200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00051">
<document-id>
<country>US</country>
<doc-number>6006193</doc-number>
<kind>A</kind>
<name>Gibson et al.</name>
<date>19991200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
<classification-national><country>US</country><main-classification>705  8</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00052">
<document-id>
<country>US</country>
<doc-number>6009464</doc-number>
<kind>A</kind>
<name>Hamilton et al.</name>
<date>19991200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00053">
<document-id>
<country>US</country>
<doc-number>6011918</doc-number>
<kind>A</kind>
<name>Cohen et al.</name>
<date>20000100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00054">
<document-id>
<country>US</country>
<doc-number>6024643</doc-number>
<kind>A</kind>
<name>Begis</name>
<date>20000200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00055">
<document-id>
<country>US</country>
<doc-number>6029195</doc-number>
<kind>A</kind>
<name>Herz</name>
<date>20000200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>725116</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00056">
<document-id>
<country>US</country>
<doc-number>6044355</doc-number>
<kind>A</kind>
<name>Crockett et al.</name>
<date>20000300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00057">
<document-id>
<country>US</country>
<doc-number>6049776</doc-number>
<kind>A</kind>
<name>Donnelly et al.</name>
<date>20000400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00058">
<document-id>
<country>US</country>
<doc-number>6052711</doc-number>
<kind>A</kind>
<name>Gish</name>
<date>20000400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00059">
<document-id>
<country>US</country>
<doc-number>6064667</doc-number>
<kind>A</kind>
<name>Gisby et al.</name>
<date>20000500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00060">
<document-id>
<country>US</country>
<doc-number>6070142</doc-number>
<kind>A</kind>
<name>McDonough et al.</name>
<date>20000500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00061">
<document-id>
<country>US</country>
<doc-number>6078581</doc-number>
<kind>A</kind>
<name>Shtivelman et al.</name>
<date>20000600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00062">
<document-id>
<country>US</country>
<doc-number>6078582</doc-number>
<kind>A</kind>
<name>Curry et al.</name>
<date>20000600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00063">
<document-id>
<country>US</country>
<doc-number>6085030</doc-number>
<kind>A</kind>
<name>Whitehead et al.</name>
<date>20000700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00064">
<document-id>
<country>US</country>
<doc-number>6092061</doc-number>
<kind>A</kind>
<name>Choy</name>
<date>20000700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
<classification-national><country>US</country><main-classification>707  1</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00065">
<document-id>
<country>US</country>
<doc-number>6097804</doc-number>
<kind>A</kind>
<name>Gilbert et al.</name>
<date>20000800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00066">
<document-id>
<country>US</country>
<doc-number>6098093</doc-number>
<kind>A</kind>
<name>Bayeh et al.</name>
<date>20000800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00067">
<document-id>
<country>US</country>
<doc-number>6104704</doc-number>
<kind>A</kind>
<name>Buhler et al.</name>
<date>20000800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00068">
<document-id>
<country>US</country>
<doc-number>6104717</doc-number>
<kind>A</kind>
<name>Coile et al.</name>
<date>20000800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00069">
<document-id>
<country>US</country>
<doc-number>6119147</doc-number>
<kind>A</kind>
<name>Toomey et al.</name>
<date>20000900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00070">
<document-id>
<country>US</country>
<doc-number>6125382</doc-number>
<kind>A</kind>
<name>Brobst et al.</name>
<date>20000900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00071">
<document-id>
<country>US</country>
<doc-number>6128611</doc-number>
<kind>A</kind>
<name>Doan et al.</name>
<date>20001000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00072">
<document-id>
<country>US</country>
<doc-number>6137869</doc-number>
<kind>A</kind>
<name>Voit et al.</name>
<date>20001000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00073">
<document-id>
<country>US</country>
<doc-number>6138121</doc-number>
<kind>A</kind>
<name>Costa et al.</name>
<date>20001000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00074">
<document-id>
<country>US</country>
<doc-number>6141773</doc-number>
<kind>A</kind>
<name>St. Pierre et al.</name>
<date>20001000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
<classification-national><country>US</country><main-classification>714 20</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00075">
<document-id>
<country>US</country>
<doc-number>6144667</doc-number>
<kind>A</kind>
<name>Doshi et al.</name>
<date>20001100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00076">
<document-id>
<country>US</country>
<doc-number>6157648</doc-number>
<kind>A</kind>
<name>Voit et al.</name>
<date>20001200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00077">
<document-id>
<country>US</country>
<doc-number>6167449</doc-number>
<kind>A</kind>
<name>Arnold et al.</name>
<date>20001200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709227</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00078">
<document-id>
<country>US</country>
<doc-number>6185611</doc-number>
<kind>B1</kind>
<name>Waldo et al.</name>
<date>20010200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00079">
<document-id>
<country>US</country>
<doc-number>6188683</doc-number>
<kind>B1</kind>
<name>Lang et al.</name>
<date>20010200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00080">
<document-id>
<country>US</country>
<doc-number>6209018</doc-number>
<kind>B1</kind>
<name>Ben-Shachar et al.</name>
<date>20010300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00081">
<document-id>
<country>US</country>
<doc-number>6219045</doc-number>
<kind>B1</kind>
<name>Leahy et al.</name>
<date>20010400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00082">
<document-id>
<country>US</country>
<doc-number>6222856</doc-number>
<kind>B1</kind>
<name>Krishnan et al.</name>
<date>20010400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00083">
<document-id>
<country>US</country>
<doc-number>6223165</doc-number>
<kind>B1</kind>
<name>Lauffer</name>
<date>20010400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00084">
<document-id>
<country>US</country>
<doc-number>6223182</doc-number>
<kind>B1</kind>
<name>Agarwal et al.</name>
<date>20010400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
<classification-national><country>US</country><main-classification>707102</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00085">
<document-id>
<country>US</country>
<doc-number>6225998</doc-number>
<kind>B1</kind>
<name>Okita et al.</name>
<date>20010500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00086">
<document-id>
<country>US</country>
<doc-number>6226666</doc-number>
<kind>B1</kind>
<name>Chang et al.</name>
<date>20010500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00087">
<document-id>
<country>US</country>
<doc-number>6237009</doc-number>
<kind>B1</kind>
<name>Waldo et al.</name>
<date>20010500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00088">
<document-id>
<country>US</country>
<doc-number>6260078</doc-number>
<kind>B1</kind>
<name>Fowlow</name>
<date>20010700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00089">
<document-id>
<country>US</country>
<doc-number>6263066</doc-number>
<kind>B1</kind>
<name>Shtivelman et al.</name>
<date>20010700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00090">
<document-id>
<country>US</country>
<doc-number>6269373</doc-number>
<kind>B1</kind>
<name>Apte et al.</name>
<date>20010700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00091">
<document-id>
<country>US</country>
<doc-number>6272537</doc-number>
<kind>B1</kind>
<name>Kekic et al.</name>
<date>20010800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00092">
<document-id>
<country>US</country>
<doc-number>6278938</doc-number>
<kind>B1</kind>
<name>Alumbaugh</name>
<date>20010800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00093">
<document-id>
<country>US</country>
<doc-number>6282284</doc-number>
<kind>B1</kind>
<name>Dezonno et al.</name>
<date>20010800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00094">
<document-id>
<country>US</country>
<doc-number>6289340</doc-number>
<kind>B1</kind>
<name>Puram et al.</name>
<date>20010900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00095">
<document-id>
<country>US</country>
<doc-number>6289372</doc-number>
<kind>B1</kind>
<name>Vyaznikov</name>
<date>20010900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00096">
<document-id>
<country>US</country>
<doc-number>6289382</doc-number>
<kind>B1</kind>
<name>Bowman-Amuah</name>
<date>20010900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00097">
<document-id>
<country>US</country>
<doc-number>6292478</doc-number>
<kind>B1</kind>
<name>Farris</name>
<date>20010900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00098">
<document-id>
<country>US</country>
<doc-number>6292481</doc-number>
<kind>B1</kind>
<name>Voit et al.</name>
<date>20010900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00099">
<document-id>
<country>US</country>
<doc-number>6295292</doc-number>
<kind>B1</kind>
<name>Voit et al.</name>
<date>20010900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00100">
<document-id>
<country>US</country>
<doc-number>6295513</doc-number>
<kind>B1</kind>
<name>Thackston</name>
<date>20010900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00101">
<document-id>
<country>US</country>
<doc-number>6310873</doc-number>
<kind>B1</kind>
<name>Rainis et al.</name>
<date>20011000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00102">
<document-id>
<country>US</country>
<doc-number>6324264</doc-number>
<kind>B1</kind>
<name>Wiener et al.</name>
<date>20011100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00103">
<document-id>
<country>US</country>
<doc-number>6327622</doc-number>
<kind>B1</kind>
<name>Jindal et al.</name>
<date>20011200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
<classification-national><country>US</country><main-classification>709228</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00104">
<document-id>
<country>US</country>
<doc-number>6332127</doc-number>
<kind>B1</kind>
<name>Bandera et al.</name>
<date>20011200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00105">
<document-id>
<country>US</country>
<doc-number>6332163</doc-number>
<kind>B1</kind>
<name>Bowman-Amuah</name>
<date>20011200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00106">
<document-id>
<country>US</country>
<doc-number>6334133</doc-number>
<kind>B1</kind>
<name>Thompson et al.</name>
<date>20011200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00107">
<document-id>
<country>US</country>
<doc-number>6346956</doc-number>
<kind>B2</kind>
<name>Matsuda</name>
<date>20020200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00108">
<document-id>
<country>US</country>
<doc-number>6349238</doc-number>
<kind>B1</kind>
<name>Gabbita et al.</name>
<date>20020200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00109">
<document-id>
<country>US</country>
<doc-number>6353398</doc-number>
<kind>B1</kind>
<name>Amin et al.</name>
<date>20020300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00110">
<document-id>
<country>US</country>
<doc-number>6356632</doc-number>
<kind>B1</kind>
<name>Foster et al.</name>
<date>20020300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00111">
<document-id>
<country>US</country>
<doc-number>6363065</doc-number>
<kind>B1</kind>
<name>Thornton et al.</name>
<date>20020300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>370352</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00112">
<document-id>
<country>US</country>
<doc-number>6341289</doc-number>
<kind>B1</kind>
<name>Burroughs et al.</name>
<date>20020400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
<classification-national><country>US</country><main-classification>7071041</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00113">
<document-id>
<country>US</country>
<doc-number>6367034</doc-number>
<kind>B1</kind>
<name>Novik et al.</name>
<date>20020400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00114">
<document-id>
<country>US</country>
<doc-number>6380951</doc-number>
<kind>B1</kind>
<name>Petchenkine et al.</name>
<date>20020400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00115">
<document-id>
<country>US</country>
<doc-number>6381640</doc-number>
<kind>B1</kind>
<name>Beck et al.</name>
<date>20020400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00116">
<document-id>
<country>US</country>
<doc-number>6385626</doc-number>
<kind>B1</kind>
<name>Tamer et al.</name>
<date>20020500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
<classification-national><country>US</country><main-classification>707203</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00117">
<document-id>
<country>US</country>
<doc-number>6401109</doc-number>
<kind>B1</kind>
<name>Heiney et al.</name>
<date>20020600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00118">
<document-id>
<country>US</country>
<doc-number>6405367</doc-number>
<kind>B1</kind>
<name>Bryant et al.</name>
<date>20020600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00119">
<document-id>
<country>US</country>
<doc-number>6412014</doc-number>
<kind>B1</kind>
<name>Ryan</name>
<date>20020600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00120">
<document-id>
<country>US</country>
<doc-number>6403564</doc-number>
<kind>B1</kind>
<name>Judge et al.</name>
<date>20020800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00121">
<document-id>
<country>US</country>
<doc-number>6430564</doc-number>
<kind>B1</kind>
<name>Judge et al.</name>
<date>20020800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00122">
<document-id>
<country>US</country>
<doc-number>6438594</doc-number>
<kind>B1</kind>
<name>Bowman-Amuah</name>
<date>20020800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00123">
<document-id>
<country>US</country>
<doc-number>6442549</doc-number>
<kind>B1</kind>
<name>Schneider</name>
<date>20020800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00124">
<document-id>
<country>US</country>
<doc-number>6442564</doc-number>
<kind>B1</kind>
<name>Frey et al.</name>
<date>20020800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00125">
<document-id>
<country>US</country>
<doc-number>6473503</doc-number>
<kind>B1</kind>
<name>Karau et al.</name>
<date>20021000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00126">
<document-id>
<country>US</country>
<doc-number>6477566</doc-number>
<kind>B1</kind>
<name>Davis et al.</name>
<date>20021100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00127">
<document-id>
<country>US</country>
<doc-number>6502131</doc-number>
<kind>B1</kind>
<name>Vaid et al.</name>
<date>20021200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00128">
<document-id>
<country>US</country>
<doc-number>6523027</doc-number>
<kind>B1</kind>
<name>Underwood</name>
<date>20030200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00129">
<document-id>
<country>US</country>
<doc-number>6536935</doc-number>
<kind>B2</kind>
<name>Parunak et al.</name>
<date>20030300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
<classification-national><country>US</country><main-classification>700 99</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00130">
<document-id>
<country>US</country>
<doc-number>6170011</doc-number>
<kind>B1</kind>
<name>MacLeod</name>
<date>20030400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00131">
<document-id>
<country>US</country>
<doc-number>6557003</doc-number>
<kind>B1</kind>
<name>Powers</name>
<date>20030400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00132">
<document-id>
<country>US</country>
<doc-number>6560656</doc-number>
<kind>B1</kind>
<name>O'Sullivan et al.</name>
<date>20030500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00133">
<document-id>
<country>US</country>
<doc-number>6564216</doc-number>
<kind>B2</kind>
<name>Waters</name>
<date>20030500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
<classification-national><country>US</country><main-classification>707 10</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00134">
<document-id>
<country>US</country>
<doc-number>6574229</doc-number>
<kind>B1</kind>
<name>Takahashi et al.</name>
<date>20030600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
<classification-national><country>US</country><main-classification>370400</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00135">
<document-id>
<country>US</country>
<doc-number>6574633</doc-number>
<kind>B1</kind>
<name>Jamalabad et al.</name>
<date>20030600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
<classification-national><country>US</country><main-classification>707102</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00136">
<document-id>
<country>US</country>
<doc-number>6611822</doc-number>
<kind>B1</kind>
<name>Beams et al.</name>
<date>20030800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
<classification-national><country>US</country><main-classification>706 11</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00137">
<document-id>
<country>US</country>
<doc-number>6611840</doc-number>
<kind>B1</kind>
<name>Baer et al.</name>
<date>20030800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
<classification-national><country>US</country><main-classification>707102</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00138">
<document-id>
<country>US</country>
<doc-number>6633900</doc-number>
<kind>B1</kind>
<name>Khalessi et al.</name>
<date>20031000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00139">
<document-id>
<country>US</country>
<doc-number>6640249</doc-number>
<kind>B1</kind>
<name>Bowman-Amuah</name>
<date>20031000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709228</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00140">
<document-id>
<country>US</country>
<doc-number>6651190</doc-number>
<kind>B1</kind>
<name>Worley et al.</name>
<date>20031100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00141">
<document-id>
<country>US</country>
<doc-number>6668353</doc-number>
<kind>B1</kind>
<name>Yurkovic</name>
<date>20031200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00142">
<document-id>
<country>US</country>
<doc-number>6684087</doc-number>
<kind>B1</kind>
<name>Yu et al.</name>
<date>20040100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00143">
<document-id>
<country>US</country>
<doc-number>6684136</doc-number>
<kind>B2</kind>
<name>Sinex</name>
<date>20040100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00144">
<document-id>
<country>US</country>
<doc-number>6684331</doc-number>
<kind>B1</kind>
<name>Srivastava</name>
<date>20040100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>713163</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00145">
<document-id>
<country>US</country>
<doc-number>6697848</doc-number>
<kind>B2</kind>
<name>Hamilton et al.</name>
<date>20040200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
<classification-national><country>US</country><main-classification>709230</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00146">
<document-id>
<country>US</country>
<doc-number>6708171</doc-number>
<kind>B1</kind>
<name>Waldo et al.</name>
<date>20040300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00147">
<document-id>
<country>US</country>
<doc-number>6718515</doc-number>
<kind>B1</kind>
<name>Conner et al.</name>
<date>20040400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00148">
<document-id>
<country>US</country>
<doc-number>6728759</doc-number>
<kind>B1</kind>
<name>Na</name>
<date>20040400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00149">
<document-id>
<country>US</country>
<doc-number>6732165</doc-number>
<kind>B1</kind>
<name>Jennings</name>
<date>20040500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00150">
<document-id>
<country>US</country>
<doc-number>6735293</doc-number>
<kind>B2</kind>
<name>Doherty et al.</name>
<date>20040500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00151">
<document-id>
<country>US</country>
<doc-number>6757912</doc-number>
<kind>B1</kind>
<name>Vaughan et al.</name>
<date>20040600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00152">
<document-id>
<country>US</country>
<doc-number>6769000</doc-number>
<kind>B1</kind>
<name>Akhtar et al.</name>
<date>20040700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00153">
<document-id>
<country>US</country>
<doc-number>6769014</doc-number>
<kind>B1</kind>
<name>Chang et al.</name>
<date>20040700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00154">
<document-id>
<country>US</country>
<doc-number>6772131</doc-number>
<kind>B1</kind>
<name>Francis et al.</name>
<date>20040800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
<classification-national><country>US</country><main-classification>705 35</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00155">
<document-id>
<country>US</country>
<doc-number>6789252</doc-number>
<kind>B1</kind>
<name>Burke et al.</name>
<date>20040900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00156">
<document-id>
<country>US</country>
<doc-number>6801919</doc-number>
<kind>B2</kind>
<name>Hunt et al.</name>
<date>20041000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00157">
<document-id>
<country>US</country>
<doc-number>6822155</doc-number>
<kind>B2</kind>
<name>Konishi</name>
<date>20041100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00158">
<document-id>
<country>US</country>
<doc-number>6822945</doc-number>
<kind>B2</kind>
<name>Petrovykh</name>
<date>20041100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00159">
<document-id>
<country>US</country>
<doc-number>6832203</doc-number>
<kind>B1</kind>
<name>Villena et al.</name>
<date>20041200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00160">
<document-id>
<country>US</country>
<doc-number>6842779</doc-number>
<kind>B1</kind>
<name>Nishizawa</name>
<date>20050100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00161">
<document-id>
<country>US</country>
<doc-number>6842799</doc-number>
<kind>B2</kind>
<name>Carau et al.</name>
<date>20050100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00162">
<document-id>
<country>US</country>
<doc-number>6850895</doc-number>
<kind>B2</kind>
<name>Brodersen et al.</name>
<date>20050200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00163">
<document-id>
<country>US</country>
<doc-number>6859523</doc-number>
<kind>B1</kind>
<name>Jilk et al.</name>
<date>20050200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00164">
<document-id>
<country>US</country>
<doc-number>6862594</doc-number>
<kind>B1</kind>
<name>Saulpaugh et al.</name>
<date>20050300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00165">
<document-id>
<country>US</country>
<doc-number>6868441</doc-number>
<kind>B2</kind>
<name>Greene et al.</name>
<date>20050300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00166">
<document-id>
<country>US</country>
<doc-number>6880007</doc-number>
<kind>B1</kind>
<name>Gardos et al.</name>
<date>20050400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709225</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00167">
<document-id>
<country>US</country>
<doc-number>6892230</doc-number>
<kind>B1</kind>
<name>Gu et al.</name>
<date>20050500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00168">
<document-id>
<country>US</country>
<doc-number>6901518</doc-number>
<kind>B1</kind>
<name>Scheifler et al.</name>
<date>20050500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
<classification-national><country>US</country><main-classification>726 12</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00169">
<document-id>
<country>US</country>
<doc-number>6917976</doc-number>
<kind>B1</kind>
<name>Slaughter et al.</name>
<date>20050700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00170">
<document-id>
<country>US</country>
<doc-number>6922685</doc-number>
<kind>B2</kind>
<name>Greene et al.</name>
<date>20050700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>  1  1</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00171">
<document-id>
<country>US</country>
<doc-number>6931427</doc-number>
<kind>B2</kind>
<name>Musante et al.</name>
<date>20050800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00172">
<document-id>
<country>US</country>
<doc-number>6934747</doc-number>
<kind>B1</kind>
<name>McGrath et al.</name>
<date>20050800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00173">
<document-id>
<country>US</country>
<doc-number>6970829</doc-number>
<kind>B1</kind>
<name>Leamon</name>
<date>20051100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00174">
<document-id>
<country>US</country>
<doc-number>6978006</doc-number>
<kind>B1</kind>
<name>Polcyn</name>
<date>20051200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00175">
<document-id>
<country>US</country>
<doc-number>7017159</doc-number>
<kind>B1</kind>
<name>Baker</name>
<date>20060300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00176">
<document-id>
<country>US</country>
<doc-number>7020619</doc-number>
<kind>B2</kind>
<name>Thompson</name>
<date>20060300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00177">
<document-id>
<country>US</country>
<doc-number>7023979</doc-number>
<kind>B1</kind>
<name>Wu et al.</name>
<date>20060400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00178">
<document-id>
<country>US</country>
<doc-number>7051212</doc-number>
<kind>B2</kind>
<name>Ginter et al.</name>
<date>20060500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00179">
<document-id>
<country>US</country>
<doc-number>7065493</doc-number>
<kind>B1</kind>
<name>Homsi</name>
<date>20060600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00180">
<document-id>
<country>US</country>
<doc-number>7072967</doc-number>
<kind>B1</kind>
<name>Saulpaugh et al.</name>
<date>20060700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00181">
<document-id>
<country>US</country>
<doc-number>7127713</doc-number>
<kind>B2</kind>
<name>Davis et al.</name>
<date>20061000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00182">
<document-id>
<country>US</country>
<doc-number>7155439</doc-number>
<kind>B2</kind>
<name>Cope</name>
<date>20061200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00183">
<document-id>
<country>US</country>
<doc-number>7171664</doc-number>
<kind>B2</kind>
<name>Wang et al.</name>
<date>20070100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00184">
<document-id>
<country>US</country>
<doc-number>7184967</doc-number>
<kind>B1</kind>
<name>Mital et al.</name>
<date>20070200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00185">
<document-id>
<country>US</country>
<doc-number>7194543</doc-number>
<kind>B2</kind>
<name>Robertson et al.</name>
<date>20070300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709226</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00186">
<document-id>
<country>US</country>
<doc-number>7251826</doc-number>
<kind>B1</kind>
<name>Gardos et al.</name>
<date>20070700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>726  6</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00187">
<document-id>
<country>US</country>
<doc-number>7383332</doc-number>
<kind>B2</kind>
<name>Chong et al.</name>
<date>20080600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00188">
<document-id>
<country>US</country>
<doc-number>7428723</doc-number>
<kind>B2</kind>
<name>Greene et al.</name>
<date>20080900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717103</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00189">
<document-id>
<country>US</country>
<doc-number>7552056</doc-number>
<kind>B2</kind>
<name>Todd et al.</name>
<date>20090600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00190">
<document-id>
<country>US</country>
<doc-number>7603408</doc-number>
<kind>B1</kind>
<name>McGinnis et al.</name>
<date>20091000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00191">
<document-id>
<country>US</country>
<doc-number>7769160</doc-number>
<kind>B1</kind>
<name>Cordell et al.</name>
<date>20100800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00192">
<document-id>
<country>US</country>
<doc-number>7792773</doc-number>
<kind>B2</kind>
<name>McCord et al.</name>
<date>20100900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00193">
<document-id>
<country>US</country>
<doc-number>7802264</doc-number>
<kind>B2</kind>
<name>Robertson et al.</name>
<date>20100900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709215</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00194">
<document-id>
<country>US</country>
<doc-number>7822781</doc-number>
<kind>B2</kind>
<name>Greene et al.</name>
<date>20101000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707802</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00195">
<document-id>
<country>US</country>
<doc-number>7856486</doc-number>
<kind>B2</kind>
<name>Robertson et al.</name>
<date>20101200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709220</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00196">
<document-id>
<country>US</country>
<doc-number>2001/0013038</doc-number>
<kind>A1</kind>
<name>Purcell</name>
<date>20010800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
<classification-national><country>US</country><main-classification>707 10</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00197">
<document-id>
<country>US</country>
<doc-number>2001/0039587</doc-number>
<kind>A1</kind>
<name>Uhler et al.</name>
<date>20011100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709229</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00198">
<document-id>
<country>US</country>
<doc-number>2001/0040885</doc-number>
<kind>A1</kind>
<name>Jonas et al.</name>
<date>20011100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00199">
<document-id>
<country>US</country>
<doc-number>2001/0042122</doc-number>
<kind>A1</kind>
<name>Pierre Cote et al.</name>
<date>20011100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
<classification-national><country>US</country><main-classification>709224</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00200">
<document-id>
<country>US</country>
<doc-number>2001/0043600</doc-number>
<kind>A1</kind>
<name>Chatterjee et al.</name>
<date>20011100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
<classification-national><country>US</country><main-classification>370390</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00201">
<document-id>
<country>US</country>
<doc-number>2001/0047385</doc-number>
<kind>A1</kind>
<name>Tuatini</name>
<date>20011100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00202">
<document-id>
<country>US</country>
<doc-number>2001/0049741</doc-number>
<kind>A1</kind>
<name>Skene et al.</name>
<date>20011200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
<classification-national><country>US</country><main-classification>709232</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00203">
<document-id>
<country>US</country>
<doc-number>2001/0054064</doc-number>
<kind>A1</kind>
<name>Kannan</name>
<date>20011200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00204">
<document-id>
<country>US</country>
<doc-number>2002/0069272</doc-number>
<kind>A1</kind>
<name>Kim et al.</name>
<date>20020600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
<classification-national><country>US</country><main-classification>709221</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00205">
<document-id>
<country>US</country>
<doc-number>2002/0077876</doc-number>
<kind>A1</kind>
<name>O'Meara et al.</name>
<date>20020600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00206">
<document-id>
<country>US</country>
<doc-number>2002/0091703</doc-number>
<kind>A1</kind>
<name>Bayles</name>
<date>20020700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
<classification-national><country>US</country><main-classification>707101</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00207">
<document-id>
<country>US</country>
<doc-number>2002/0091827</doc-number>
<kind>A1</kind>
<name>King et al.</name>
<date>20020700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
<classification-national><country>US</country><main-classification>709226</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00208">
<document-id>
<country>US</country>
<doc-number>2002/0101860</doc-number>
<kind>A1</kind>
<name>Thornton et al.</name>
<date>20020800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>370352</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00209">
<document-id>
<country>US</country>
<doc-number>2002/0138649</doc-number>
<kind>A1</kind>
<name>Cartmell et al.</name>
<date>20020900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709245</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00210">
<document-id>
<country>US</country>
<doc-number>2002/0143774</doc-number>
<kind>A1</kind>
<name>Vandersluis</name>
<date>20021000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
<classification-national><country>US</country><main-classification>707 10</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00211">
<document-id>
<country>US</country>
<doc-number>2002/0147611</doc-number>
<kind>A1</kind>
<name>Greene et al.</name>
<date>20021000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00212">
<document-id>
<country>US</country>
<doc-number>2002/0169890</doc-number>
<kind>A1</kind>
<name>Beaumont et al.</name>
<date>20021100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
<classification-national><country>US</country><main-classification>709245</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00213">
<document-id>
<country>US</country>
<doc-number>2002/0188720</doc-number>
<kind>A1</kind>
<name>Terrell et al.</name>
<date>20021200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
<classification-national><country>US</country><main-classification>709225</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00214">
<document-id>
<country>US</country>
<doc-number>2003/0120829</doc-number>
<kind>A1</kind>
<name>Avvari et al.</name>
<date>20030600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709330</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00215">
<document-id>
<country>US</country>
<doc-number>2003/0140119</doc-number>
<kind>A1</kind>
<name>Acharya et al.</name>
<date>20030700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
<classification-national><country>US</country><main-classification>709219</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00216">
<document-id>
<country>US</country>
<doc-number>2003/0144894</doc-number>
<kind>A1</kind>
<name>Robertson et al.</name>
<date>20030700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00217">
<document-id>
<country>US</country>
<doc-number>2004/0003058</doc-number>
<kind>A1</kind>
<name>Trossen</name>
<date>20040100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
<classification-national><country>US</country><main-classification>709220</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00218">
<document-id>
<country>US</country>
<doc-number>2004/0073601</doc-number>
<kind>A1</kind>
<name>Darago et al.</name>
<date>20040400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00219">
<document-id>
<country>US</country>
<doc-number>2006/0031237</doc-number>
<kind>A1</kind>
<name>DeAnna et al.</name>
<date>20060200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00220">
<document-id>
<country>EP</country>
<doc-number>0447038</doc-number>
<date>19910900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00221">
<document-id>
<country>WO</country>
<doc-number>WO-96/38018</doc-number>
<date>19961100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00222">
<document-id>
<country>WO</country>
<doc-number>WO-97/14238</doc-number>
<date>19970400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00223">
<document-id>
<country>WO</country>
<doc-number>WO-97/27692</doc-number>
<date>19970700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00224">
<document-id>
<country>WO</country>
<doc-number>99/30494</doc-number>
<date>19990600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00225">
<othercit>&#x201c;MCI Worldcom Enhances Multicast Service to Expand Internet Broadcasting Capabilities for Business Customers&#x201d;; http://www.thefreelibrary.com/MCI+Worldcom+Enhances+Multicast+Service+to+Expand+Internet . . . -a054296151; Business Wire; Apr. 6, 1999; pp. 1-3.</othercit>
</nplcit>
<category>cited by examiner</category>
</us-citation>
<us-citation>
<nplcit num="00226">
<othercit>&#x201c;SNAP Using the SNAP Communication Component&#x201d;, Template Software, 1998, Whole Manual.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00227">
<othercit>Goldbarb et al., &#x201c;The XML Handbook&#x201d;, 1998, pp. 3-18, 101-118.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00228">
<othercit>&#x201c;Using the Web Component&#x201d;, Template Software, 1997, Chapters 1-3.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00229">
<othercit>&#x201c;Workflow Template Training Course&#x201d;, Version 8.0, 1997, Section A.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00230">
<othercit>&#x201c;Developing a WFt Workflow System,&#x201d; Template Software, 1998, Whole Manual.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00231">
<othercit>&#x201c;Using the WFT Development Environment&#x201d;, Template Software, 1998, Whole Manual.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00232">
<othercit>&#x201c;M2 Presswire, Template &#x26; Winstar Deploy First Customer Centric Services Ordering &#x26; Provisioning System&#x201d;, Business Wire, Oct. 21, 1998.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00233">
<othercit>&#x201c;Winstar Communications Selects Template Software to Deliver Industry Leading Service Solution&#x201d;, Business Wire, Feb. 11, 1998.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00234">
<othercit>&#x201c;Template Software and Winstar Telecoommunications Announce Deployment of Industry's First Customer Centric Ordering &#x26; Provisioning System&#x201d;, Business Wire, Oct. 5, 1998.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00235">
<othercit>Fried, &#x201c;Mulisite Call Centers&#x2014;Get Ready to Go Virtual&#x201d;, Telemarketing &#x26; Call Center Solutions, vol. 19, No. 9, Mar. 1998.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00236">
<othercit>Shi et al., &#x201c;Smart Avatars in JackMOO&#x201d;, Proceedings of the 1999 IEEE Conference on Virtual Reality, 1999.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00237">
<othercit>Avatar Definition, Wikipedia.org, Retrieved Dec. 3, 2007.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00238">
<othercit>Proxy Pattern Definition, Wikipedia.org, Retrieved Dec. 3, 2007.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00239">
<othercit>Benedicto, &#x201c;Regions: A Scalable Infrastructure for Scoped Service Location in Ubiquitous Computing&#x201d;, MIT, May 1999, pp. 1-109.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00240">
<othercit>WFMC Workflow Management Coalition, Document Index, Doc. # WFMC-TC-1002, Issue 5.0, Mar. 1999, 7 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00241">
<othercit>WFMC Workflow Management Coalition, Workflow and Internet: Catalysts for Radical Change, Jun. 1998, 32 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00242">
<othercit>WFMC Workflow Management Coalition, White Paper&#x2014;Events, Apr. 1999, 11 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00243">
<othercit>WFMC Workflow Management Coalition, Interface 1: Process Definition Interchange Q&#x26;A and Examples, Doc. # WfMC TC-1016-X, Jan. 1999, 48 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00244">
<othercit>&#x201c;Building Enterprise Web Transactions Using VisualAge Generator JavaBeans and APIs&#x201d;, IBM, May 2000.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00245">
<othercit>Anthes, Gary, &#x201c;Bellcore in Search of New Ideas&#x201d;, Computerworld, Feb. 25, 1991, vol. 25, No. 8, pp. 83, 86.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00246">
<othercit>Lynch, Dan, &#x201c;SMDS: Dial Tone for Data&#x201d;, Data Communications, Oct. 1991, vol. 20, No. 14, p. 222.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00247">
<othercit>Collins et al., &#x201c;Automated Assignment and Schedule of Service Personnel&#x201d;, IEEE Expert, Apr. 1994, vol. 9, No. 2, pp. 33-39.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00248">
<othercit>Lesaint et al., &#x201c;Dynamic Workforce Management&#x201d;, AI for Network Management Systems, IEEE, Apr. 1997.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00249">
<othercit>Lesaint et al., &#x201c;Dynamic Workforce Scheduling for British Telecommunications plc interfaces&#x201d;, vol. 30, Jan.-Feb. 2000, pp. 45-56.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00250">
<othercit>Pipkins.com web pages, Pipkins, Inc., Nov. 1999, printed Oct. 10, 2006.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00251">
<othercit>ServicePlus.com Web Pages, ServicePlus, Oct. 2000, printed Dec. 7, 2004.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00252">
<othercit>Arnold, &#x201c;The Jini Architecture Dynamic Services in a Flexible Network&#x201d;, ACM, 1999, pp. 157-162.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00253">
<othercit>Li, Jin, &#x201c;VooDoo: A Multi-media Environment for Supporting Complex Collaborative Work&#x201d;, University of Toronto, ATT MM704041, Abstract, 1992.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00254">
<othercit>Benford et al., &#x201c;User Embodiment in Collaborative Virtual Environments&#x201d; ACM CHI'95, 1995.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00255">
<othercit>Denton, Nick, &#x201c;Telecoms services set to take new steps into cyberspace&#x201d;, Financial Times, Mar. 13, 1998.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00256">
<othercit>Leigh et al., &#x201c;A Review of Tele-Immersive Applications in the CAVE Research Netowrk&#x201d;, IEEE Proceedings of the Conference on Virtual Reality, 1999.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00257">
<othercit>Shirmohammadi, Shervin, &#x201c;Synchronous Collaborative in Virtual Environments: Architecture, Design and Implementation&#x201d;, Ottawa-Carleton Institute for Electrical and Computer Engineering, 2000.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00258">
<othercit>Orfali et al., &#x201c;The Essential Distributed Objects Survival Guide&#x201d;, John Wiley &#x26; Sons, Inc., Chapter 19, pp. 325-338, published 1996.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00259">
<othercit>Fratto, Reviews&#x2014;OSPEC Sets Standard for Integration, Network Computing, Dec. 4, 2000, p. 87 (online reprint p. 1-9).</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00260">
<othercit>&#x201c;Jana RMI Tutorial&#x201d;, Jana RMI Tutorial, Sun Microsystems, Feb. 10, 1997.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00261">
<othercit>&#x201c;Java Remote Method Invocation Specification&#x201d;, Java Remote Method Invocation Specification, Sun Microsystems, Inc. 1997.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00262">
<othercit>&#x201c;Mobile code definition&#x201d; Mobile code definition Wikipedia.org, Retrieved Jan. 27, 2012.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00263">
<othercit>Aldrisch, &#x201c;Providing Easier Access to Remote Objects in Distributed Systems&#x201d;, Aldrisch, Jonathan et al., Providing Easier Access to Remote Objects in Distributed Systems California Institute of Technology, Nov. 21, 1997.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00264">
<othercit>Dahlin, &#x201c;Using Mobile Extensions to Support Disconnected Services&#x201d;, Dahlin, Mike et al., Using Mobile Extensions to Support Disconnected Services University of Texas at Austin, Apr. 29, 2000.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00265">
<othercit>Edwards, &#x201c;How Codebase Works&#x201d;, Edwards, Keith, How Codebase Works Kedwards.com, 1999.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00266">
<othercit>Farley, &#x201c;Java Distributed Computing&#x201d;, Farley, Jim, Java Distributed Computing O'Reilly Media, Inc., Jan. 1, 1998, ISBN 978-1-56592- 206-8.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00267">
<othercit>Finnegan, &#x201c;Managing Mobile Code with Microsoft Technlogies&#x201d;, Finnegan, Sean, Managing Mobile Code with Microsoft Technlogies Microsoft Tech Net, Aug. 31, 2000.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00268">
<othercit>Fischer, &#x201c;Anyinfo Example 6: Using RMI to Access a Database Service&#x201d;, Fischer, Lawrence V., Anylnfo Example 6: Using RMI to Access a Database Service Novell, Oct. 1, 1998.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00269">
<othercit>Fischer, &#x201c;Java and Distributed Systems&#x201d;, Fischer, Stephan Dr., Java and Distributed Systems Net.ObjectDays 2000.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00270">
<othercit>Freeman, &#x201c;Principles, Patterns and Practice&#x201d;, Freeman et al., JavaSpaces, Principles, Patterns and Practice Sun Microsystems, Inc., 1999,.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00271">
<othercit>Homburg, et al., &#x201c;Unifying Internet Services Using Distributed Shared Objects&#x201d;, Homburg, Philip et al, Unifying Internet Services Using Distributed Shared Objects Vrije Universiteit, I R-209, Oct. 11, 1996.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00272">
<othercit>Jain, &#x201c;A Distributed Component Based Solution for Scientific Information Management&#x201d;, Jain, Lalit Kumar, A Distributed Component Based Solution for Scientific Information Management Oregon State University, Jul. 1, 1998.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00273">
<othercit>Lipton, &#x201c;Java Proxies for Database Objects&#x201d;, Lipton, Paul, Java Proxies for Database Objects Dr. Dobbs.com, May 1, 1999.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00274">
<othercit>Machura, et al., &#x201c;Distributed objects and object databases&#x201d;, Machura, M. et al., Distributed objects and object databases BT Technology, vol. 15, No. 4, Oct. 1997.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00275">
<othercit>Proxy Server definition Wikipedia.org, Retrieved May 16, 2012.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00276">
<othercit>Karnik, Neeran M. at al., Security in the Ajanta Mobile Agent System University of Mninesota, May 17, 1999.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00277">
<othercit>Karnik, Neeran M. at al., Design Issues in Mobile Agent Programming Systems University of Minnesota, Jun. 24, 1998.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00278">
<othercit>Kunz, Thomas at al., an Architecture for adaptive mobile applications May 13, 1999.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00279">
<othercit>Paepce, Andreas at al., Using Distributed Objects to Build the Standford Digital Library lnfobus IEEE, 1999.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00280">
<othercit>Tigue, John at al., WebBroker: Distribute Ojbect Communication on the Web WEC Note, May 11, 1998.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00281">
<othercit>Pitt, et al., &#x201c;The Jini Proxy&#x201d; White Paper, pp. 1-12, Sep. 16, 2001.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00282">
<othercit>Reiley, &#x201c;Coffee Break&#x2014;Chapter 9: Choices for Service Architecture Contents,&#x201d; 40 pages, Copyright 1999.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>115</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>707  1- 10</main-classification>
<additional-info>unstructured</additional-info>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>707102-104</main-classification>
<additional-info>unstructured</additional-info>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>707203</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>707738</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709203</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709225-228</main-classification>
<additional-info>unstructured</additional-info>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709220</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>44</number-of-drawing-sheets>
<number-of-figures>50</number-of-figures>
</figures>
<us-related-documents>
<division>
<relation>
<parent-doc>
<document-id>
<country>US</country>
<doc-number>09863456</doc-number>
<date>20010522</date>
</document-id>
<parent-grant-document>
<document-id>
<country>US</country>
<doc-number>6922685</doc-number>
</document-id>
</parent-grant-document>
</parent-doc>
<child-doc>
<document-id>
<country>US</country>
<doc-number>10113472</doc-number>
</document-id>
</child-doc>
</relation>
</division>
<us-provisional-application>
<document-id>
<country>US</country>
<doc-number>60206564</doc-number>
<date>20000522</date>
</document-id>
</us-provisional-application>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20030004744</doc-number>
<kind>A1</kind>
<date>20030102</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Greene</last-name>
<first-name>William S.</first-name>
<address>
<city>Fairview</city>
<state>TX</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Robertson</last-name>
<first-name>James A.</first-name>
<address>
<city>The Woodlands</city>
<state>TX</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Greene</last-name>
<first-name>William S.</first-name>
<address>
<city>Fairview</city>
<state>TX</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Robertson</last-name>
<first-name>James A.</first-name>
<address>
<city>The Woodlands</city>
<state>TX</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>Verizon Business Global LLC</orgname>
<role>02</role>
<address>
<city>Basking Ridge</city>
<state>NJ</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Pulliam</last-name>
<first-name>Christyann</first-name>
<department>2164</department>
</primary-examiner>
<assistant-examiner>
<last-name>Chojnacki</last-name>
<first-name>Mellissa M</first-name>
</assistant-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">A Global Information Bus (GIB) architecture is an infrastructure for deploying and managing individual services on a global scale. The GIB is a series of services that may change from one execution to another, finding and collaborating with other services dynamically. This series of collaborating services may start to resemble an ecosystem, and GIB architecture may maintain the interconnectedness and stability of this ecosystem as it continually changes. To that end, the GIB includes an enterprise repository service for storing related information related to services running in the enterprise where the enterprise consists of a group of network domains.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="155.02mm" wi="202.69mm" file="US08626877-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="242.49mm" wi="145.80mm" file="US08626877-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="237.83mm" wi="180.85mm" orientation="landscape" file="US08626877-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="233.51mm" wi="192.53mm" file="US08626877-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="238.17mm" wi="191.18mm" file="US08626877-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="233.60mm" wi="175.26mm" orientation="landscape" file="US08626877-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="235.63mm" wi="181.95mm" orientation="landscape" file="US08626877-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="213.87mm" wi="160.95mm" orientation="landscape" file="US08626877-20140107-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00008" num="00008">
<img id="EMI-D00008" he="202.18mm" wi="163.91mm" orientation="landscape" file="US08626877-20140107-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00009" num="00009">
<img id="EMI-D00009" he="240.20mm" wi="187.45mm" orientation="landscape" file="US08626877-20140107-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00010" num="00010">
<img id="EMI-D00010" he="253.58mm" wi="199.90mm" orientation="landscape" file="US08626877-20140107-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00011" num="00011">
<img id="EMI-D00011" he="245.03mm" wi="179.32mm" orientation="landscape" file="US08626877-20140107-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00012" num="00012">
<img id="EMI-D00012" he="245.28mm" wi="184.23mm" orientation="landscape" file="US08626877-20140107-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00013" num="00013">
<img id="EMI-D00013" he="230.04mm" wi="172.55mm" file="US08626877-20140107-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00014" num="00014">
<img id="EMI-D00014" he="229.28mm" wi="112.69mm" file="US08626877-20140107-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00015" num="00015">
<img id="EMI-D00015" he="232.83mm" wi="168.66mm" file="US08626877-20140107-D00015.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00016" num="00016">
<img id="EMI-D00016" he="244.86mm" wi="190.16mm" file="US08626877-20140107-D00016.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00017" num="00017">
<img id="EMI-D00017" he="248.50mm" wi="178.48mm" file="US08626877-20140107-D00017.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00018" num="00018">
<img id="EMI-D00018" he="233.17mm" wi="185.17mm" file="US08626877-20140107-D00018.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00019" num="00019">
<img id="EMI-D00019" he="240.20mm" wi="182.54mm" file="US08626877-20140107-D00019.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00020" num="00020">
<img id="EMI-D00020" he="226.82mm" wi="172.47mm" file="US08626877-20140107-D00020.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00021" num="00021">
<img id="EMI-D00021" he="192.28mm" wi="172.55mm" orientation="landscape" file="US08626877-20140107-D00021.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00022" num="00022">
<img id="EMI-D00022" he="225.13mm" wi="176.87mm" file="US08626877-20140107-D00022.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00023" num="00023">
<img id="EMI-D00023" he="245.11mm" wi="177.46mm" orientation="landscape" file="US08626877-20140107-D00023.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00024" num="00024">
<img id="EMI-D00024" he="244.26mm" wi="175.18mm" file="US08626877-20140107-D00024.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00025" num="00025">
<img id="EMI-D00025" he="227.50mm" wi="180.85mm" orientation="landscape" file="US08626877-20140107-D00025.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00026" num="00026">
<img id="EMI-D00026" he="229.79mm" wi="181.44mm" file="US08626877-20140107-D00026.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00027" num="00027">
<img id="EMI-D00027" he="230.12mm" wi="179.32mm" orientation="landscape" file="US08626877-20140107-D00027.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00028" num="00028">
<img id="EMI-D00028" he="230.04mm" wi="142.83mm" orientation="landscape" file="US08626877-20140107-D00028.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00029" num="00029">
<img id="EMI-D00029" he="235.54mm" wi="150.71mm" orientation="landscape" file="US08626877-20140107-D00029.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00030" num="00030">
<img id="EMI-D00030" he="236.05mm" wi="190.58mm" file="US08626877-20140107-D00030.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00031" num="00031">
<img id="EMI-D00031" he="242.49mm" wi="184.83mm" orientation="landscape" file="US08626877-20140107-D00031.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00032" num="00032">
<img id="EMI-D00032" he="186.69mm" wi="118.96mm" orientation="landscape" file="US08626877-20140107-D00032.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00033" num="00033">
<img id="EMI-D00033" he="246.72mm" wi="180.51mm" orientation="landscape" file="US08626877-20140107-D00033.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00034" num="00034">
<img id="EMI-D00034" he="228.09mm" wi="179.58mm" orientation="landscape" file="US08626877-20140107-D00034.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00035" num="00035">
<img id="EMI-D00035" he="243.16mm" wi="190.84mm" orientation="landscape" file="US08626877-20140107-D00035.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00036" num="00036">
<img id="EMI-D00036" he="243.33mm" wi="185.25mm" orientation="landscape" file="US08626877-20140107-D00036.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00037" num="00037">
<img id="EMI-D00037" he="218.78mm" wi="110.32mm" file="US08626877-20140107-D00037.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00038" num="00038">
<img id="EMI-D00038" he="220.81mm" wi="109.47mm" file="US08626877-20140107-D00038.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00039" num="00039">
<img id="EMI-D00039" he="239.01mm" wi="182.63mm" orientation="landscape" file="US08626877-20140107-D00039.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00040" num="00040">
<img id="EMI-D00040" he="230.29mm" wi="183.64mm" file="US08626877-20140107-D00040.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00041" num="00041">
<img id="EMI-D00041" he="233.60mm" wi="177.55mm" orientation="landscape" file="US08626877-20140107-D00041.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00042" num="00042">
<img id="EMI-D00042" he="210.14mm" wi="177.97mm" orientation="landscape" file="US08626877-20140107-D00042.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00043" num="00043">
<img id="EMI-D00043" he="179.41mm" wi="172.89mm" orientation="landscape" file="US08626877-20140107-D00043.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00044" num="00044">
<img id="EMI-D00044" he="197.53mm" wi="174.16mm" file="US08626877-20140107-D00044.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?RELAPP description="Other Patent Relations" end="lead"?>
<heading id="h-0001" level="1">CROSS REFERENCES TO RELATED APPLICATIONS</heading>
<p id="p-0002" num="0001">The present application is a divisional application of, and claims priority from, U.S. patent application Ser. No. 09/863,456 entitled &#x201c;METHOD AND SYSTEM FOR MANAGING PARTITIONED DATA RESOURCES,&#x201d; filed on May 22, 2001, now U.S. Pat. No. 6,922,685 which claims priority from provisional U.S. patent application 60/206,564 filed on May 22, 2000 and is a divisional application related to the following non-provisional U.S. patent applications: &#x201c;METHOD AND SYSTEM FOR IMPLEMENTING A GLOBAL ECOSYSTEM OF INTERRELATED SERVICES,&#x201d; Ser. No. 10/112,373 filed Mar. 29, 2002; &#x201c;METHOD AND SYSTEM FOR IMPLEMENTING A MANAGEMENT OPERATIONS CENTER IN A GLOBAL ECOSYSTEM OF INTERRELATED SERVICES,&#x201d; Ser. No. 10/113,213 filed Mar. 29, 2002; &#x201c;METHOD AND SYSTEM FOR REALIZING AN AGGREGATOR IN A MANAGEMENT OPERATIONS CENTER IMPLEMENTED IN A GLOBAL ECOSYSTEM OF INTERRELATED SERVICES,&#x201d; Ser. No. 10/113,543 filed Mar. 29, 2002; &#x201c;METHOD AND SYSTEM FOR REALIZING AN AVATAR IN A MANAGEMENT OPERATIONS CENTER IMPLEMENTED IN A GLOBAL ECOSYSTEM OF INTERRELATED SERVICES,&#x201d; Ser. No. 10/113,662 filed Mar. 29, 2002; &#x201c;METHOD AND SYSTEM FOR REALIZING A RENDEZVOUS SERVICE IN A MANAGEMENT OPERATIONS CENTER IMPLEMENTED IN A GLOBAL ECOSYSTEM OF INTERRELATED SERVICES,&#x201d; Ser. No. 10/113,471 filed Mar. 29, 2002; &#x201c;METHOD AND SYSTEM FOR IMPLEMENTING IMPROVED CONTAINERS IN A GLOBAL ECOSYSTEM OF INTERRELATED SERVICES,&#x201d; application Ser. No. 10/113,691 filed Mar. 29, 2002; &#x201c;METHOD AND SYSTEM FOR IMPLEMENTING A GLOBAL LOOKUP IN A GLOBAL ECOSYSTEM OF INTERRELATED SERVICES,&#x201d; Ser. No. 10/113,696 filed Mar. 29, 2002; &#x201c;METHOD AND SYSTEM FOR USING MOBILE CODE IN A GLOBAL ECOSYSTEM OF INTERRELATED SERVICES,&#x201d; Ser. No 10/113,968 filed Mar. 29, 2002; and &#x201c;METHOD AND SYSTEM FOR IMPLEMENTING A DATA BUS IN A GLOBAL ECOSYSTEM OF INTERRELATED SERVICES&#x201d; Ser. No. 10/110,000 filed Mar. 29, 2002; which are assigned to the assignee of the present invention. The above-identified applications are incorporated by reference in their entirety.</p>
<?RELAPP description="Other Patent Relations" end="tail"?>
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0002" level="1">BACKGROUND OF THE INVENTION</heading>
<p id="p-0003" num="0002">1. Field of the Invention</p>
<p id="p-0004" num="0003">The present invention relates to providing ubiquitous access to data resources even where such data resources are maintained in separate stores and by entirely separate processes.</p>
<p id="p-0005" num="0004">2. Description of Related Art</p>
<p id="p-0006" num="0005">The operation of a modem large business enterprise relies heavily upon the processing, storing, communicating and manipulation of vast amounts of information. This is particularly true of a large service company, such as a global telecommunications company. The types of information vary widely and may include, for example, customer data, employee data, account information, traffic and revenue statistics, and engineering data such as network topology and provisioning data. The vital information that supports a large enterprise may even include the software instructions that drive various elements and systems in a telecommunications network. Some information is relatively static, such as the name or address of a customer, whereas other forms of information, such as the momentary operational status of a network element, can change abruptly and must be communicated as quickly as possible to points where the information is needed.</p>
<p id="p-0007" num="0006">Traditionally, the various types of information that support a large enterprise have been treated separately. Each principal function in the company, such as human resources, customer service, or engineering, has been self-contained in its use and maintenance of the data needed by that function. Each function typically selects its own tools (software applications and hardware platforms), populates its own data store, and institutes its own procedures with little regard to the remainder of the enterprise. In cases where there has been limited sharing of data between functions, the implementation has often been an ad hoc gateway between divergent systems and approaches.</p>
<p id="p-0008" num="0007">It is becoming widely recognized in the field of information technology that it is not only advantageous, but essential to use a comprehensive approach to managing the data in a large enterprise.</p>
<p id="p-0009" num="0008">Various approaches have been applied in an attempt to achieve ubiquitous access to data. One approach is to maintain all of the data in one central location. As the amount of data grows, this approach rapidly leads to a bottleneck at the servers as many &#x201c;clients&#x201d; attempt to simultaneously access the body of data. Furthermore, the remote access to the data requires a communications infrastructure and may consume considerable bandwidth.</p>
<p id="p-0010" num="0009">To relieve these constraints, a different approach involves replicating the data at many distributed sites. In most cases, it is usually not known beforehand what particular data may be needed at a given site, so the entire data store must be replicated at each site. While this divides the demands upon the access to the data, this approach introduces problems in maintaining synchronization among the copies of the data. Furthermore, the replication multiplies the overall storage resources needed, which can be very substantial. If a design is chosen that replicates the data as needed to maintain a certain level of performance in accessing the data, then the overall storage may actually grow as the square of the data size.</p>
<p id="p-0011" num="0010">As a compromise between centralization and replication, a caching approach can be used wherein local data stores are used to partially duplicate only those portions of the overall data that are needed locally. Typically, in response to requests from points of use that rely on the cache, the local cache selectively downloads data only on an as-needed basis. The cache will accumulate a self-forming subset of the overall data. Once loaded, a particular data item in the local cache may be held indefinitely or may be discarded after a time according to a caching algorithm. Schemes have also been deployed for ensuring that data in the cache is kept current as changes occur in the corresponding data in the master data store. Although a distributed approach introduces some complexities, there are some advantages to be gained.</p>
<heading id="h-0003" level="1">BRIEF SUMMARY OF THE INVENTION</heading>
<p id="p-0012" num="0011">The present invention is directed to a method and system whereby data entities, even in a highly distributed and partitioned environment, may be readily accessed by client applications across an enterprise.</p>
<p id="p-0013" num="0012">A new approach is required in the context of a partitioned body of data wherein separate data stores are maintained by separate computing processes and separate business functions and are usually physically separated. When data resides in a single space, such as data tables in a relational database, it is easy to represent relationships among data elements.</p>
<p id="p-0014" num="0013">For example, in a database, a first table may contain employee information and each record might have as separate fields, an employee number, a social security number, a hire date, and a salary grade. There may be a second table wherein each record maps an employee number to a (project number) department number and internal mail location. Yet, a third table may have social security numbers mapped to an employee's name and home address.</p>
<p id="p-0015" num="0014">It is even possible to express (or enforce) that a one-for-one or a one-for-many relationship exists between the corresponding data elements. For example, a relationship may be built that enforces a one-for-one relationship between employee number and social security number. Another relationship may allow the same department number to be claimed for many different employees.</p>
<p id="p-0016" num="0015">Once a correspondence among data fields is established, useful information may be extracted drawing upon the collective set of tables. In the above example, a database designer may explicitly establish that the employee number field in the first table corresponds to the employee number field in the second table and that, where matching values are found in these two fields, the remainder of the fields in the associated records can be effectively joined to form a composite record. Thereafter, a report may be easily created listing the salary grades of the employees in a given department, despite the fact that the pieces of information are maintained in separate tables. Properly designed, this separation of data into related tables lends advantages in efficiency and flexibility as is well known in the field of relational database technology.</p>
<p id="p-0017" num="0016">Combining table contents based on a correspondence among fields is referred to as a &#x201c;table join&#x201d; and is fairly easy to accomplish when the tables are maintained in a common file or are accessible by a common application or process.</p>
<p id="p-0018" num="0017">Beyond the realm of relating tables in a database, it is also necessary to cause data objects in a computing environment to be associated with one another in some fashion so that they can cooperatively provide a desired function. As is well known in computing science, an association among two data objects may be formed by, for example, having either or both of the objects contain a reference or handle or pointer to the other object. This tends to happen inherently where a first object causes the dynamic creation or &#x201c;instantiation&#x201d; of a second object. After the second object is created, the first object maintains a memory address for the newly-created second object for the purpose of subsequently accessing the data or invoking the methods of the second object and for ensuring that the second object is properly removed from the memory space when it is no longer needed.</p>
<p id="p-0019" num="0018">Associations among data entities, such as database tables or streamable data objects in a distributed computing environment, may also be formed and maintained externally without the associations being imbedded in the objects themselves. Externalized associations have been proposed whereby a first data object and a second data object may be associated by an external entity which maintains a reference to both objects and has a description of how the objects are related. This implies the use of an external association engine which must be involved whenever a computing task involves cooperation between the first data object and the second data object. In this approach, the first and second objects need not &#x201c;know&#x201d; about one another nor contain any provisions for pointing to one another. Indeed, the association among the first and second data objects may occur well after the objects have been designed and implemented. Associations may later be formed as needed, as in response to requirements that were not apparent at the time the data objects were initially implemented. Of course, this enables tremendous flexibility in the growth of a distributed computing environment.</p>
<p id="p-0020" num="0019">In a large computing domain, such as a global enterprise or a government, data objects may be highly partitioned. To fulfill a needed function, an application may need to draw upon data and functionality from many sources that are separately maintained and often logically or geographically remote from one another. In fact, even a single data object, offering some particular useful functionality or a particular view of the global data, may itself be partitioned and distributed among many sources. In the context of highly-partitioned data, there is a desire to support the creation of such composite objects which transcend being located in any one data store.</p>
<p id="p-0021" num="0020">While an externalized association engine may at first be contemplated to fulfill this need, the aforementioned problems with centralization make the externalized association engine impractical for large scale implementations. Recall that the externalized association engine must support the interaction among objects, including the assembly of composite partitioned objects, for the entire computing environment. It is foreseen that even attempts to moderately distribute the function of a unified, externalized association engine will introduce difficulties and invite the potential for catastrophic failures.</p>
<p id="p-0022" num="0021">Therefore, there is a need for a method and system which supports ubiquity of data access, subject to security constraints, of course, across a large enterprise wherein the data may be highly distributed and partitioned.</p>
<p id="p-0023" num="0022">Overall resources may be conserved and availability of data enhanced if the data store is allowed to remain naturally partitioned, with each portion of the data store maintained nearest the original source of the data or nearest the highest volume of interaction with the data.</p>
<p id="p-0024" num="0023">It is an important advantage of the present invention that an application needing access to data anywhere in the enterprise does not need to know where such data may be located. The application calls for the data without having to specify where to look. Furthermore, the data needed is readily accessed without undue delays, as if all of the data were local to the application. The mechanism taught by the present invention automatically handles the finding and retrieval of requested data without burdening the application. This readily-available and seemingly-ubiquitous access to the data at large has been referred to as a &#x201c;data dial tone&#x201d; by the present inventors, drawing an analogy to the ability of a telephone caller to place a call to anyone without knowing how the call will be routed nor even exactly where the call will be received. The term &#x201c;data layer&#x201d; has also been inspired to refer to this style of accessing the enterprise-wide collection of data without regard for location.</p>
<p id="p-0025" num="0024">A further advantage of the present invention is that, due to the manner in which associations are made and data objects are found, associations may transcend simple object-object linkages. Associations may be defined by &#x201c;fuzzy&#x201d; criteria and may cause useful information to be retrieved beyond what a requesting application would have known to explicitly ask for.</p>
<p id="p-0026" num="0025">In accordance with an exemplary embodiment of the present invention, association forming entities are a) maintained as objects in a like manner to the data objects being associated, and are b) themselves partitioned objects comprising two or more association fragments, each association fragment being mostly concerned with the interfaces to a particular data object participating in the association.</p>
<p id="p-0027" num="0026">In accordance with an exemplary embodiment of the present invention, each association fragment affiliated with a particular data object is stored in a location that enhances the ease of interaction between the association fragment and the data object. For example, where a first data object and second data object are maintained in data stores at some distance from one another, physically or logically, then a first association fragment will be located with or near to the first data object and a second association fragment will be located with or near the second data object, at least within the same partition. This arrangement may be preferable because the volume of interaction between a data object and its respective association fragment may far outweigh the interaction needed among the two association fragments. This arrangement may also be preferable as the volume of interaction between a client application and both the data object and respective association fragment may exceed the interaction needed among the two association fragments. Some interactions will employ only one of the association fragments with the net result being a reduction in communications requirements and an improvement in performance.</p>
<p id="p-0028" num="0027">The present invention further provides for defining logical domains which are arbitrary and entirely orthogonal to partitions.</p>
<p id="p-0029" num="0028">In accordance with an exemplary embodiment of the present invention, a Global Information Bus (GIB) is disclosed as implemented in a global ecosystem of interrelated services. The GIB architecture is an infrastructure for deploying and managing individual services on a global scale. The GIB is a series of services that may change from one execution to another, finding and collaborating with other services dynamically. This system of collaborating services starts to resemble an ecosystem, and the job of the GIB architecture is to maintain the interconnectedness and stability of this ecosystem as it continually changes. To that end, the GIB includes an enterprise repository service for storing related information related to services running in the enterprise where the enterprise consists of a plurality of network domains. The GIB includes a domain registry service running in each domain which lists information related to services running in the respective domains. When a service is launched in one of the enterprise domains, the service discovers a domain registry service for the local domains and registers itself. Then, if the newly-launched service is to be visible to clients running in non-local domains, the newly-launched service finds the enterprise repository service and lists information about the service, such as the location of its domain registry service. Each service runs in container, running on a processor, which may run several different services. The GIB also includes a code server for holding service code and launcher services for receiving location information for the code server in which a service's code resides, and fetches the service code and launches the service code for the service based on container service attributes. Services may be of several types, GIB infrastructure services, services that are parts of applications, services that provide access to persistent DataBus objects, services that act as agents representing external entities such as devices, gateways to external (non-GIB) systems and third party services running in the ecosystem.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0030" num="0029">The novel features believed characteristic of the invention are set forth in the appended claims. The invention itself, however, as well as an exemplary mode of use, further objectives and advantages thereof, will best be understood by reference to the following detailed description of an illustrative embodiment when read in conjunction with the accompanying drawings, wherein:</p>
<p id="p-0031" num="0030">The present invention is illustrated by way of example, and not by way of limitation, in the Figures of the accompanying drawings and in which like reference numerals indicate similar elements and in which:</p>
<p id="p-0032" num="0031"><figref idref="DRAWINGS">FIG. 1A</figref> depicts a point-to-point architecture where applications message one another directly according to prior art messaging techniques;</p>
<p id="p-0033" num="0032"><figref idref="DRAWINGS">FIG. 2</figref> is a representative diagram of an application;</p>
<p id="p-0034" num="0033"><figref idref="DRAWINGS">FIG. 3</figref> is a logical diagram of an enterprise network containing CORBA-enabled processes distributed in both domain 1 and domain 2;</p>
<p id="p-0035" num="0034"><figref idref="DRAWINGS">FIG. 4</figref> is a diagram representing independent systems' stovepipe relationships as might be expected in a telecommunications enterprise according to the prior art;</p>
<p id="p-0036" num="0035"><figref idref="DRAWINGS">FIG. 5</figref> is a diagram of the NewWave network management concept in accordance with an exemplary embodiment of the present invention;</p>
<p id="p-0037" num="0036"><figref idref="DRAWINGS">FIG. 6</figref> is a diagram illustrating the concept of many, small generic servers in many geographic locations distributed for enterprise use in accordance with an exemplary embodiment of the present invention;</p>
<p id="p-0038" num="0037"><figref idref="DRAWINGS">FIG. 7</figref> is a diagram illustrating various typical configurations of the small servers running various operating systems in which VM containers are running on host servers in accordance with an exemplary embodiment of the present invention;</p>
<p id="p-0039" num="0038"><figref idref="DRAWINGS">FIG. 8</figref> is a conceptual diagram of distributive concepts for managing an ecosystem of interrelated services in accordance with an exemplary embodiment of the present invention;</p>
<p id="p-0040" num="0039"><figref idref="DRAWINGS">FIG. 9</figref> is a diagram of service platform infrastructure of interrelated services relating to an enterprise is illustrated in accordance with an exemplary embodiment of the present invention;</p>
<p id="p-0041" num="0040"><figref idref="DRAWINGS">FIG. 10A</figref> is a diagram depicting launching and registering service in a global ecosystem of interrelated services in accordance with an exemplary embodiment of the present invention;</p>
<p id="p-0042" num="0041"><figref idref="DRAWINGS">FIG. 10B</figref> is a diagram depicting finding and implementing a local service in a global ecosystem of interrelated services in accordance with an exemplary embodiment of the present invention;</p>
<p id="p-0043" num="0042"><figref idref="DRAWINGS">FIG. 10C</figref> is a diagram depicting finding and implementing a non-local service in a global ecosystem of interrelated services in accordance with an exemplary embodiment of the present invention;</p>
<p id="p-0044" num="0043"><figref idref="DRAWINGS">FIG. 11A</figref> is a flowchart depicting a process for launching and registering service in a global ecosystem of interrelated services in accordance with an exemplary embodiment of the present invention;</p>
<p id="p-0045" num="0044"><figref idref="DRAWINGS">FIG. 11B</figref> is a flowchart depicting a process for finding and implementing a local service in a global ecosystem of interrelated services in accordance with an exemplary embodiment of the present invention;</p>
<p id="p-0046" num="0045"><figref idref="DRAWINGS">FIG. 11C</figref> is a flowchart depicting a process for finding and implementing a non-local service in a global ecosystem of interrelated services in accordance with an exemplary embodiment of the present invention;</p>
<p id="p-0047" num="0046"><figref idref="DRAWINGS">FIG. 12A</figref> is a flowchart depicting the process employed by the registrar for registering services in accordance with an exemplary embodiment of the present invention;</p>
<p id="p-0048" num="0047"><figref idref="DRAWINGS">FIG. 12B</figref> is a flowchart depicting the process for enterprise leasing in accordance with an exemplary embodiment of the present invention;</p>
<p id="p-0049" num="0048"><figref idref="DRAWINGS">FIG. 12C</figref> is a flowchart depicting a process employed by the registrar for looking up a service in accordance with an exemplary embodiment of the present invention;</p>
<p id="p-0050" num="0049"><figref idref="DRAWINGS">FIGS. 13A-13B</figref> are flowcharts depicting the transaction process employed by the transaction manager is illustrated in accordance with a preferred embodiment of the present invention;</p>
<p id="p-0051" num="0050"><figref idref="DRAWINGS">FIG. 14</figref> is a diagram depicting a service failure and re-homing the service to a different server and further depicting self-healing a proxy reference using a smart proxy in a global ecosystem of interrelated services in accordance with an exemplary embodiment of the present invention, and further illustrates self-healing a proxy reference using a smart proxy;</p>
<p id="p-0052" num="0051"><figref idref="DRAWINGS">FIG. 15A</figref> is a flowchart depicting a service restarting process in a global ecosystem of interrelated services in accordance with the present invention;</p>
<p id="p-0053" num="0052"><figref idref="DRAWINGS">FIG. 15B</figref> is a flowchart depicting a process se for self-healing stale references using a smart proxy in accordance with the present invention;</p>
<p id="p-0054" num="0053"><figref idref="DRAWINGS">FIG. 16</figref> is a diagram depicting a conceptual realization of the DataBus two-tier infrastructure concept for mediating data transactions and an enterprise-wide data persistence layer which allows clients to access shared enterprise data in accordance with an exemplary embodiment of the present invention;</p>
<p id="p-0055" num="0054"><figref idref="DRAWINGS">FIG. 17A</figref> is a traditional representation of an E-R diagram;</p>
<p id="p-0056" num="0055"><figref idref="DRAWINGS">FIG. 17B</figref> is a representation of nodes and arcs of the E-R diagram being mapped onto entity engine processes and association engine processes;</p>
<p id="p-0057" num="0056"><figref idref="DRAWINGS">FIG. 18</figref> is a diagram illustrating three entities, entity A <b>1802</b>, entity B <b>1804</b> and entity C <b>1806</b> partitioned in accordance with an exemplary embodiment of the present invention;</p>
<p id="p-0058" num="0057"><figref idref="DRAWINGS">FIG. 19</figref> is a diagram illustrating three container-database partition pair in accordance with an exemplary embodiment of the present invention;</p>
<p id="p-0059" num="0058"><figref idref="DRAWINGS">FIG. 20</figref> is a diagram depicting DataBus components necessary for creating an entity instance in accordance with an exemplary embodiment of the present invention;</p>
<p id="p-0060" num="0059"><figref idref="DRAWINGS">FIG. 21</figref> is a flowchart depicting a process for creating an entity instance in accordance with an exemplary embodiment of the present invention;</p>
<p id="p-0061" num="0060"><figref idref="DRAWINGS">FIG. 22</figref> is a diagram showing a read/write copy of the entity instance being streamed directly to the client in accordance with an exemplary embodiment of the present invention;</p>
<p id="p-0062" num="0061"><figref idref="DRAWINGS">FIG. 23</figref> show the cache server approach where a copy of the entity instance is streamed to a cache server rather than the copy being directly steamed to the client in accordance with an exemplary embodiment of the present invention;</p>
<p id="p-0063" num="0062"><figref idref="DRAWINGS">FIG. 24</figref> is a diagram showing the event notification approach where the client is using only read-only copies of the entity instance and receiving change notifications whenever an update is received in accordance with an exemplary embodiment of the present invention;</p>
<p id="p-0064" num="0063"><figref idref="DRAWINGS">FIG. 25</figref>, on the other hand, the optimistic concurrency approach depicts the client using a read/write copy that must stay in sync with a master copy in order for updates to be accepted in accordance with an exemplary embodiment of the present invention;</p>
<p id="p-0065" num="0064"><figref idref="DRAWINGS">FIG. 26</figref> is a diagram depicting DataBus components necessary for performing the multi-hop find process in accordance with an exemplary embodiment of the present invention;</p>
<p id="p-0066" num="0065"><figref idref="DRAWINGS">FIG. 27</figref> is a flowchart depicting a multi-hop find process in accordance with exemplary of the present invention;</p>
<p id="p-0067" num="0066"><figref idref="DRAWINGS">FIG. 28</figref> is a diagram representing a logical domain boundary defined from partitions in each of several entities in accordance with one embodiment of the present invention;</p>
<p id="p-0068" num="0067"><figref idref="DRAWINGS">FIG. 29</figref> is a diagram of NW service platform infrastructure of interrelated services relating to an enterprise is illustrated in accordance with an exemplary embodiment of the present invention;</p>
<p id="p-0069" num="0068"><figref idref="DRAWINGS">FIG. 30</figref> is a flowchart depicting a process for finding entity instances that are associated with an instance in accordance with exemplary of the present invention;</p>
<p id="p-0070" num="0069"><figref idref="DRAWINGS">FIG. 31</figref> is a diagram showing external central association engine <b>3102</b> which consists of a plurality of link records which describe associative relationships between Customer entity instances and Account entity instances;</p>
<p id="p-0071" num="0070"><figref idref="DRAWINGS">FIG. 32</figref> is a diagram of NW service platform infrastructure of interrelated services relating to an enterprise is illustrated in accordance with an exemplary embodiment of the present invention;</p>
<p id="p-0072" num="0071"><figref idref="DRAWINGS">FIG. 33</figref> is a flowchart depicting a process for getting all accounts instances that are associated with an identified customer instance in accordance with an exemplary embodiment of the present invention; and</p>
<p id="p-0073" num="0072"><figref idref="DRAWINGS">FIG. 34</figref> is a flowchart depicting a process for getting all accounts instances that are associated with an identified customer instance using smart proxies in accordance with an exemplary embodiment of the present invention;</p>
<p id="p-0074" num="0073"><figref idref="DRAWINGS">FIG. 35</figref> is a diagram of the MOC and associated NewWave service necessary for collecting events into policy-based work documents, and then directly routing work to the best currently available operations staff that is automatically assembled based on the individual staff members' aptitude for particular tasks in a process flow in accordance with an exemplary embodiment of the present invention;</p>
<p id="p-0075" num="0074"><figref idref="DRAWINGS">FIG. 36</figref> is a functional diagram of the MOC depicting interactions between key MOC components interact in accordance with an exemplary embodiment of the present invention;</p>
<p id="p-0076" num="0075"><figref idref="DRAWINGS">FIG. 37</figref> is a diagram of an assessor for assessing events based on organizational rules in accordance with an exemplary embodiment of the present invention;</p>
<p id="p-0077" num="0076"><figref idref="DRAWINGS">FIG. 38</figref> is a diagram illustrating a basic design of an aggregator in accordance with an exemplary embodiment of the present invention;</p>
<p id="p-0078" num="0077"><figref idref="DRAWINGS">FIG. 39</figref> is a diagram of a simplified version of a state machine in accordance with an exemplary embodiment of the present invention; and</p>
<p id="p-0079" num="0078"><figref idref="DRAWINGS">FIG. 40</figref> which depicts a user avatar lookup in accordance with an exemplary embodiment of the present invention.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<p id="p-0080" num="0079">Other features of the present invention will be apparent from the accompanying drawings and from the detailed description which follows.</p>
<heading id="h-0005" level="1">DETAILED DESCRIPTION OF THE INVENTION</heading>
<p id="p-0081" num="0080">The present invention relates to data processing. More particularly, the present invention relates to the management of information technologies.</p>
<p id="p-0082" num="0081">The automation of manual business processes was one of the first important tasks for which computers were employed. Prior to integrating the business processes in computer applications for execution on computer-implemented systems, business processes were typically segmented along departmental lines, so naturally the computer business process applications that automated those business processes were likewise segmented along departmental lines. The resulting computer-implemented applications/systems were characterized as having narrow scope, rarely doing little more than automating the same steps and procedures that comprised the manual business process. Because of a lack of interoperability, they seldom integrated with other systems which likewise made sharing resources impossible. Normally, this way of providing answers to an enterprise can only tailor the answer from the perspective of the department that manages the stovepipe. An enterprise answer, or a solution to an enterprise level problem, might require that an enterprise user access several, or even all departmental stovepipe applications for the departmental perspective view in order to get a &#x201c;piece&#x201d; of the entire enterprise level solution. It would then be left to the user to coalesce the departmental answers from the respective stovepipe applications into a unified enterprise level solution by integrating the disparate departmental perspective answers into an enterprise level solution.</p>
<p id="p-0083" num="0082">Currently, within enterprises exist many stovepipe applications that address and solve very narrow problems within departments. For example, human resources, finance, timekeeping and even resume-tracking applications within human resources are natural stovepipe applications that address particular problems within an enterprise. Moreover, vendors of specialized stovepipe applications often become extremely proficient at solving penumbra issues that cross enterprise boundaries and are adopted by widely-diverse enterprises. An enterprise might be thought of as consisting of having umbra and penumbra functions, umbra being methods, processes and the associated resources necessary for accomplishing core enterprise charter goals, and penumbra being methods, processes and the associated resources necessary for accomplishing and supporting the charter goals. Alternatively, an enterprise's core functions can be described as revenue centers, while support functions can be characterized as cost centers. Examples of umbra stovepipe applications include inventory control applications and sales tracking applications that exist within a sales organization; reservoir management applications, downhole logging applications and production and field control applications that exist within an oil production company; admissions and discharge applications, medical record keeping applications and laboratory applications that exist within a healthcare provider; and even legal instrument-drafting applications, docketing applications and litigation toolkit applications that exist within a law firm. These applications came about when traditional mainframe systems failed to solve individual departmental problems or, more likely, were not flexible enough to solve the problems in a timely fashion. Because of this failure, a &#x201c;departmentalized&#x201d; solution ensued and critical, mission-critical departments implemented their own systems. These systems owned, maintained and protected the applications, hardware and resources necessary to efficiently perform their missions, resulting in an enterprise made up of independent &#x201c;islands&#x201d; of special purpose applications, hardware and resources.</p>
<p id="p-0084" num="0083">Even though departments were protective toward their stovepipe systems, that did not mean that departmental users did not want to share information or resources with the remainder of the enterprise. Instead, it was merely indicative of the processes, data and resources existing within a single department. Incontrovertibly, this reality demonstrated that the enterprise parts, or departments, were automated without regard for the enterprise level needs. Information, process and resource sharing among enterprise departments were rarely considered when selecting a vendor's stovepipe application/system. As a result, there were no open application programming interfaces (APIs), open architectures, or other mechanisms that allowed for ready access to the processes and data existing within these stovepipe systems. In order to achieve acceptable results with a department's stovepipe system, an enterprise user had to be proficient with a department's stovepipe application, system and GUI, as well as understand how the application managed its resources.</p>
<p id="p-0085" num="0084">Traditional systems (also known as &#x201c;legacy systems&#x201d;) are applications that exist as stovepipes, such as departmental or vendor stovepipes, in a centralized enterprise environment. Mainframe-based systems make up a majority of traditional systems, while minicomputers and large UNIX-based systems might also be correctly referred to as traditional systems. The characteristics that define the traditional system include centralized processing, unshared resources and terminal-based access. Traditional systems typically support a large user and processing load on both database and business processes that exist together within the same environment. While these systems may support thousands of users concurrently accessing the same application, sharing processes and resources between applications is uncommon. Moreover, sharing processes and resources to applications outside the system is unheard of, however, simultaneous access to an application across a single platform is a powerful incentive for businesses. The total cost on ownership (TCO) for these systems is relatively low when compared to PCs and workstations. Therefore, rather than becoming extinct, these systems not only continue to sell, but older applications leveraging traditional systems have demonstrated significantly more staying power than originally anticipated. The prior art's answer to the shortcomings of stovepipe applications was to implement Enterprise Application Integration (EAI) between stovepipe applications.</p>
<p id="p-0086" num="0085">In general, applications serve two primary purposes: (1) they perform routine business processes that support a business function; and (2) they access, process, and/or display data. At the highest level of abstraction, applications can be organized by the functions they perform and the data they process. EAI, in its most idealistic form, involves the unrestricted sharing of business processes throughout an enterprise's networked applications or data sources. Software programs in areas such as inventory control, human resources, sales automation and database management which were custom built in the technology of the day were designed to run independently for addressing a specific need and do not share. Many times the applications were implemented as proprietary systems, with no interaction between the systems and thus did not share. EAI's popularity can be attributed, in part, to the need for maintaining the older stovepipe applications, while simultaneously integrating them within a new enterprise application infrastructure. As the enterprises grow and recognize the need for their information and applications to have the ability to be transferred across and shared between systems, companies invest in EAI in order to streamline processes and keep all the elements of the enterprise interconnected.</p>
<p id="p-0087" num="0086">The focus of EAI is primarily directed into four major categories: database linking, application linking, data warehousing and virtual systems approach. Database linking involves implementing EAIs between departmental databases for sharing information with each other and duplicating information as needed based on a set of rules. Application linking involves the enterprise sharing business processes and data between two or more applications. Data warehousing involves data being extracted from a variety of resources (data sources) and compiled in a specific database for analysis. This unified collection of data better supports management decision making by allowing enterprise users to view resource data from a variety of stovepipes from an enterprise perspective. Data warehouses contain a wide variety of data that present a coherent picture of business conditions for the enterprise at a single point in time. The final category of EAI is a common virtual system which involves using EAI in all aspects of enterprise computing, tying applications, resources and data together so that they appear as a unified application to a client.</p>
<p id="p-0088" num="0087">EAI is often referred to as &#x201c;middleware&#x201d; because EAI software functions as a conversion or translation layer. It is also a consolidator and integrator. Custom-programmed middleware solutions have been developed for decades to enable one application to communicate with another that either runs on a different platform or comes from a different vendor or both. Middleware is software that translates commands or data between different software programs.</p>
<p id="p-0089" num="0088">EAI exists in two popular architectures, point-to-point and hub and spoke. Typically, point-to-point architectures are referred to as messaging EAIs, while hub and spoke architectures are referred to as middleware EAIs. Both variants allow existing enterprise applications to supply existing business processes and resources to other enterprise applications. With respect to the first type of architecture, point-to-point applications directly access data and resource data from other applications. <figref idref="DRAWINGS">FIG. 1A</figref> depicts a point-to-point architecture where applications <b>102</b>-<b>116</b> message one another directly. Each enterprise application must be modified with a messaging agent, a queue and a relationship application table for listing other enterprise applications and the data and resources that they own. Java applications may require further modification with a multi-valued attribute, a &#x201c;codebase,&#x201d; for storing the location of the object's class definition. An application interacts with the messaging agent whenever the application determines that it needs access to data or resources that it does not own. The messaging agent accesses the relationship table for the location of an application that owns the needed resource. An initial request message is sent to the application that owns the resource for specific resource data. Here, several potential transitions may take place depending on the requestor application (e.g., temporary use of the resource, updating the resource, etc.) However, the resource owner application might be busy at the time the request is received, so the request is queued until the application is free to process the request. Once the response message is sent to the recipient, the recipient application might also be too busy to process the incoming message thread. In that case, the resource data in the response is also queued in anticipation of a processor freeing up and the process thread needing the resource being executed. At some point, the thread is executed in accordance with the application's processes. The messaging agent is responsible for the message and data integrity that it sends and/or receives, so if the transaction is not completed, the messaging agent must repeat the transaction.</p>
<p id="p-0090" num="0089">As can be understood from the foregoing, each application requires significant modifications for point-to-point EAI to be effective. If an enterprise application is upgraded, modified or even migrated to a different physical location, it and any application that it relies on, or that relies on it, must also be modified for subsequent point-to-point messaging transactions to be successful. In addition, each individual enterprise stovepipe application is a potential bottleneck as the individual applications are usually not scalable for messaging responses. Finally, inter-application messages can either be in the form of some proprietary messaging protocol or may, instead, take advantage of existing messaging protocols and messaging specification. If the enterprise utilizes proprietary messaging protocols, the protocol specification must be formalized within the enterprise and maintained and a corresponding message transport devised. If, on the other hand, existing protocols are to be used, then the enterprise's existing message transports that utilize those protocols will be called on for handling the added burden of the point-to-point messages.</p>
<p id="p-0091" num="0090">The second EAI architecture improves on existing point-to-point middleware by utilizing a message broker that manages communications among all enterprise stovepipe applications. The message broker communicates directly with each participating application and thus forms the &#x201c;hub&#x201d; of a hub and spoke messaging architecture. Message-broker processing is a mixture of schema and content transformation, rules processing, message splitting and combining, as well as message routing. Once the processing is complete, the information is sent to any target system that needs to receive that information using whatever native format the target application can understand (e.g., eXtensible Markup Language (XML), IDoc, Java Message Service (JMS) message, proprietary, etc.).</p>
<p id="p-0092" num="0091"><figref idref="DRAWINGS">FIG. 1B</figref> depicts a hub and spoke messaging architecture wherein messaging middleware <b>140</b> serves as a central point of communication between enterprise applications <b>122</b>-<b>136</b> for transferring messages between applications. Hub and spoke architecture has the advantage that the participating applications require somewhat less custom programming because messaging middleware <b>140</b> acts as a messaging broker for providing an interface between stovepipe applications, thus allowing them to asynchronously send data back and forth to each other. Data sent by one application is stored in a middleware queue and then forwarded to a receiving application when that application becomes available to process it. In addition to a transport means, the messaging broker provides stovepipe applications with distribution rules for forwarding messages and formatting rules for reformatting data from a sending application's format to a receiving application's format. A rules engine analyzes incoming messages and makes routing decisions, while a formatting engine converts the data into the structure required by the receiving application. The messaging broker provides disparate stovepipe applications with a common message transport and queuing system, thereby relieving applications from the responsibility of ensuring that the data sent is properly received.</p>
<p id="p-0093" num="0092">In practice, a messaging broker can be either a complete messaging system or software that works with existing messaging transports in order to add routing intelligence and data conversion capabilities. While the hub and spoke architecture represents a significant advancement over independent stovepipes and an improvement over point-to-point messaging, the hub-and-spoke EAI solution is resource-constrained because all the processing takes place on a single server. Eventually, the number of connected systems and the information traffic will saturate the available resources of the integration server (memory, processor, and disk) resulting in reduced performance. Bottlenecks can and do occur and scheduling can become problematic for enterprise applications. Moreover, once an application signals its intent to process resource data from the messaging queue in the hub, the messaging broker may be busy and thus unavailable to pass the necessary resource data to the requesting application prior to the receiving application timing out. In that case, the application thread is held up waiting for the resource data to arrive and might in fact timeout prior to the messaging broker responding to the application. If a timeout occurs, the resource data remains queued until the application is again freed up. Overloads on the messaging broker have led to the development of a &#x201c;federated architecture&#x201d; wherein the applications connect to a single integration server or hub statically and are able to exchange information with each other. This means that all information produced or consumed from a particular application is available only for processing within a particular hub. Since the hubs are interconnected, each hub appears to the other hubs as connected applications, thus producing and consuming messages. However, messages produced from a single application may process only on a single hub because they are statically bound to that hub. This architecture does not allow hubs to share the message-processing load, or nor does it allow other hubs to process messages from applications that are not directly connected.</p>
<p id="p-0094" num="0093">In general, applications serve two primary purposes: (1) they perform routine business functions that support a business process; and (2) they access, process, and/or display data. At the highest level of abstraction, applications can then be organized by the functions they perform and the data they process. A representative diagram of an application is depicted on <figref idref="DRAWINGS">FIG. 2</figref> as any of applications <b>202</b>A-<b>202</b>N. Since an application is the building block of an information system, it can be expressed as a collection of software programs that execute user interface <b>204</b>A, business rules <b>206</b>A, and data access operations <b>208</b>A, all of which are necessary to execute a business process. Typically, application <b>202</b>A consists of a plurality of services that perform these operations. Services are any predefined, specialized results which are produced from specific software programs designed to perform explicit data processing operations when called upon. Services might be considered as either business logic services or infrastructure services. Business application services are designed and developed to provide specific computational, input/output, or data access operations when called upon at execution time, while infrastructure services provide computer platform operating systems, database management systems, or network platforms for supporting business applications.</p>
<p id="p-0095" num="0094">Returning to <figref idref="DRAWINGS">FIG. 2</figref>, application <b>202</b>A uses business rules <b>206</b>A as a logical specification for the business' requirements. Business rules <b>206</b>A define computational algorithms and operations to perform explicit data processing operations that are necessary to implement a business process. Also shown in <figref idref="DRAWINGS">FIG. 2</figref> is a logical representation of another prior art mechanism utilizing the aforementioned messaging architecture for handling stovepipe applications. Stovepipe applications <b>202</b>A-N are the defined logical layers that provide practical boundaries for physically segmenting the application into smaller, more manageable program segments. The interactions between logical layers of an application can be accomplished through messaging and middleware services as described above. The logical layers of an application are defined as a user interface layer, a business logic layer and a data access layer.</p>
<p id="p-0096" num="0095">The user interface layer of an application interacts directly with end-user input/output devices (e.g., Windows workstations or a printer/fax device). The user interface layer is the most visible aspect of the business process supporting the end user. It encompasses a variety of operations, such as window or screen management, keyboard and mouse handling, end-user help functions, general input editing and data type validation, or formatting data for output to a laser printer or plotter device.</p>
<p id="p-0097" num="0096">The business process (logic) layer of an application implements the particular requirements of a business process based on a set of business rules. The business rules may be no more than developer guidelines, but more often are generic algorithms that can be tailored to a business' needs by the user selection of values for parametric constraint variables. Typical operations at this layer consist of controlling the logical flow of interaction between the end user (via the user interface layer), access and manipulation of data or information (via the data access layer), and specific computational algorithms to be performed (via the business logic layer).</p>
<p id="p-0098" num="0097">Finally, the data access of an application includes the operations needed to store, access and maintain data or information necessary to support a business process. The data accessed within this layer can include both structured and unstructured formats, depending upon the application requirements. For the most part, a commercial relational database management (RDBMS), or proprietary file access system, provides the services performed within this layer.</p>
<p id="p-0099" num="0098">The division of applications A-N into logical layers and the inherent physical program design characteristics necessitate services that enable communication between logical and physical layers via messaging services and data access middleware and operate fundamentally as described above. The intent of the logical layer concept is to stratify applications by their analogous functional levels while maintaining the unique character of each application A-N. Application management becomes more of a concern because the natural tendency of programmers is to offload processing tasks to other, more capable applications while focusing their efforts on the core functional aspects of an application. This distributed concept tends to centralize certain services at key applications. Failures and modifications of those key applications can result in disastrous effects across the enterprise.</p>
<p id="p-0100" num="0099">Separating an application into discrete layers permits application services to be scaled and positioned where appropriate and reduces the complexity inherent in single-platform solutions. Specialized application components can be combined to achieve the best results, and similarly, different combinations of clients and servers allow for a computing fix to these specialized application components. However, the layered application approach suffers from all of the above-described shortcomings attributable to the messaging and middleware EAIs. The user interface and business process application levels must be internally modified for messaging interfaces, user interface messaging interface <b>220</b>, and business process messaging interface <b>222</b> for communications between the respective application levels, while data resources are handled by a completely different architecture. Data, while being accessible to any application within the enterprise, is still owned by a single application. Resource access bottlenecks become more prevalent at the enterprise level so data access middleware <b>224</b>A-<b>224</b>N is regularly configured as federated architectures. In short, while the layered application concept somewhat distributes services in layers across an enterprise, the stovepipe application structure is maintained because each application remains responsible for providing its own necessary services and managing its own resources and data.</p>
<p id="p-0101" num="0100">Another prior art means for sharing services between applications is through the use of distributed object systems such as Common Object Request Broker Architecture (CORBA)-enabled processes. CORBA-enabled processes can be placed and run on the same machine or on any machine in a network enterprise differing from messaging middleware in that they cause processes (components/objects) to be executed in real-time rather than sending data. Examples of these CORBA applications and other similar distributed object systems include System Object Model (SOM) and Distributed System Object Model (DSOM) from IBM Corporation, One New Orchard Road, Armonk, N.Y. 10504; or Component Object Model (COM) and Distributed Component Object Model (DCOM) from Microsoft Corporation, One Microsoft Way, Redmond, Wash. 98052.</p>
<p id="p-0102" num="0101">CORBA provides a way to execute programs (objects) written in different programming languages running on different platforms no matter where they reside in the network using an &#x201c;object bus&#x201d; or &#x201c;software bus,&#x201d; a software-based communications interface through which objects are located and accessed. Objects reside on various machines throughout the distributed environment and are tasked with performing duties defined by their implementation.</p>
<p id="p-0103" num="0102"><figref idref="DRAWINGS">FIG. 3</figref> is a logical diagram of an enterprise network containing CORBA-enabled processes distributed in both domain <b>1</b> and domain <b>2</b>. CORBA objects are defined by an Interface Definition Language (IDL) that describes the processing (methods) the object performs and the format of the data sent and returned. IDL definitions are stored in an interface repository (not shown) which can be queried by client application <b>312</b> to determine what objects are available on the bus. However, unlike such standard servers, objects have the ability to move around if needed. A client communicates with an object through an object reference. This is a pointer to the object that allows requests for operations and data access to be sent from the client to the server via an object request broker (ORB). In the Figure, the ORB is depicted as client ORB <b>316</b> and server ORB <b>322</b>, but could be conceptually represented as an ORB bus between client <b>310</b> and server <b>320</b> and connected to a plurality of objects (or object implementation). At runtime, CORBA client <b>310</b> makes requests to remote CORBA object <b>328</b> via an ORB <b>316</b>. ORB <b>316</b> provides a proxy object in the client's address space which creates the illusion that remote object <b>328</b> is a local service or process. ORBs <b>316</b> and <b>322</b> manage the interactions between client <b>310</b> and object implementation <b>328</b>. Client <b>310</b> issues a request and invokes methods of object implementations. Client <b>310</b> and server <b>320</b> communicate by exchanging messages defined by the General Inter-ORB Protocol (GIOP). When client <b>310</b> calls a CORBA operation, client ORB <b>316</b> sends a GIOP message to server <b>320</b>.</p>
<p id="p-0104" num="0103">The client-side architecture provides client <b>310</b> with interfaces to ORB <b>316</b> and object implementations. A dynamic invocation (not shown) allows for the specification of requests at runtime whenever the object interface is not known at runtime and utilizes the interface repository. Each CORBA implementation comes with one or more IDL compilers (not shown) that know the language mapping for the language in which they were designed (i.e., that used by client application <b>312</b>). It is the IDL compiler's job to turn the IDL into stub and skeleton files <b>314</b> and <b>326</b>, respectively. These files are used in distributed applications to make object communication almost transparent. Stubs and skeletons are all language- and ORB-dependent so the same IDL file is used to generate the stubs and skeletons for each language and ORB implementation. IDL stub <b>314</b> is used in client processes to communicate with server <b>320</b>. Stub files <b>214</b> consists of functions generated by the IDL interface definitions and linked into client application <b>312</b> for a mapping between client application <b>312</b> and ORB <b>316</b>. Client application <b>312</b> uses stub <b>314</b> to make calls to the server objects. Functions needed by client <b>312</b> are called just as if they were local objects. However, stub object acts only as a proxy that forwards requests to and responses from a CORBA process on a remote server.</p>
<p id="p-0105" num="0104">The implementation-side interface consists of server ORB <b>322</b>, IDL skeleton files <b>326</b> and object adapter <b>324</b>. Skeleton files <b>326</b> are the converse of stub files <b>312</b>. They are what the server-side applications use to seamlessly receive distributed requests. It is the skeleton's job to receive requests from ORB <b>322</b>, call the proper implementation, which in this case is object implementation <b>328</b>, and return the results. ORB <b>322</b> calls method skeletons to invoke the methods that were requested from client application <b>312</b>. Object adapter <b>324</b> provides the means by which object implementation <b>328</b> accesses most ORB services. Object adapter <b>324</b> isolates object implementation <b>328</b> from ORB <b>322</b>. A server may have a variety of object adapter types, each providing specific services.</p>
<p id="p-0106" num="0105">In short, client application <b>312</b> connects directly to ORB <b>316</b> through its stub <b>314</b>. Object implementation <b>328</b> on server <b>320</b> connects directly to object adapter <b>324</b> through skeleton files <b>326</b>. Object adapter <b>324</b> then connects to server ORB <b>322</b>. A request from client application <b>312</b> is next sent through client stub <b>314</b>, across ORBs <b>316</b> and <b>322</b> to the proper object adapter and through server <b>320</b>'s object adapter <b>324</b> and skeleton files <b>326</b>, eventually reaching implementation <b>328</b>. The return value of the implementation follows the same route in reverse.</p>
<p id="p-0107" num="0106">Every object on the ORB has an Interoperable Object Reference (IOR) which is a global identifier string that identifies the machine on which its associated object is located and the interface that the object supports. It has encapsulated the IP, PID and other values required by the client to connect. Client <b>310</b> can use IOR for an object and standard function calls on ORB <b>316</b> to find an object reference. Client ORB <b>316</b> uses the IOR to determine what type of object is being referenced and the identity of the server for routing requests. In single machine domains, the client can write its own IOR to a file and get all server objects on the ORB since the ORB stays within the domain of the client machine. The client could then read the IOR from this file and have the ORB resolve it into an object reference. However, when the server object is in a different domain from that of the client machine, the client must receive a reference to the object from an independent service. Usually, this is accomplished by writing server <b>320</b>'s IOR to a Server IOR File and placing it in a well-known location, using http, shared file system or ftp. At start up, client <b>310</b> merely accesses the file system for the server's IOR. This method for bootstrapping, although simple to understand and test, has several disadvantages, notably the need for the client and the server to share access to a file system.</p>
<p id="p-0108" num="0107">Another method for locating an object server is for the enterprise to employ naming service <b>302</b>. Naming service <b>302</b> uses a standard CORBA object which contains operations that bind, resolve, and unbind human-readable names with an IOR. When a service object is created, it binds its IOR with a name in naming service <b>302</b>. By looking up the associated name, any other object on the ORB, or with access to the naming service, can retrieve that object reference from the naming service server. Client application <b>312</b>, needing a connection to server <b>320</b>, merely retrieves a reference to naming service <b>302</b> and accesses server <b>320</b>'s IOR by the server's name. Then, server <b>320</b>'s IOR is resolved into the identity of the server for routing requests.</p>
<p id="p-0109" num="0108">A stovepipe application is a stand-alone program. It implies an application that does not integrate with or share data or resources with other applications. Many current systems have been built as &#x201c;stovepipe&#x201d; applications, meaning that they do not communicate easily with other enterprise systems. Moreover, these stovepipe applications form their own system &#x201c;islands&#x201d; with their own hardware platforms, development languages, protocols and resources (e.g., rules, databases, etc.) Corporations are demanding new systems changes at an astounding rate, and unfortunately, these old legacy systems do not adapt well to change. A telecommunications company, for example, might have had separate systems for plain-old telephone service (POTS) customers, inter-exchange carrier (IXC) customers and wireless customers.</p>
<p id="p-0110" num="0109"><figref idref="DRAWINGS">FIG. 4</figref> is a diagram representing independent systems' stovepipe relationships as might be expected in a telecommunications enterprise according to the prior art. Current day &#x201c;independent systems'&#x201d; stovepipes are represented in the Figure as stovepipes A-N. Telecommunications enterprises implement specific telecommunications systems in a effort to provide their customers with profit-generating services. The telecommunications services provided to the enterprise's customers are represented in the Figure as Digital Subscriber Line service (DSL <b>410</b>A), Asynchronous Transfer Mode network services (ATM <b>410</b>B<b>1</b> and <b>410</b>B<b>2</b>), Synchronous Optical NETwork (SONET) fiber-optic transmission system services (vendor &#x201c;A&#x201d; <b>410</b>C and vendor &#x201c;B&#x201d; <b>410</b>D), and Internet Protocol services (IP). As will be understood from the figure, each of the enterprise's services <b>410</b>A-<b>410</b>N must be managed by its own specialized management applications, represented in the Figure as management applications <b>408</b>A to <b>408</b>N. The combination of the services and management applications define the enterprise's profit centers. While many of the management applications <b>408</b>A to <b>408</b>N may own services and/or resources identical to those owned by any of the other management applications in the enterprise, the enterprise's management applications are tightly coupled and therefore do not share services and resources. As discussed above, this happens because a particular management application, for instance management application <b>408</b>A, is developed for a unique enterprise service, which in this case is DSL <b>410</b>A, without any thought of sharing the application's resources and services with any other management application within the enterprise. Other enterprise management applications were developed for enterprise systems in a similar ad hoc fashion.</p>
<p id="p-0111" num="0110">Each of management applications <b>408</b>A-<b>408</b>N performs specific management tasks associated with a corresponding service provided by the enterprise to its customers; however, rarely does a management application provide the services necessary to cost center applications (i.e., tracking and billing customers and accounts for the service usage). Therefore, in addition to developing a management application <b>408</b>A for specific enterprise services, it was often necessary for an enterprise to stovepipe a business application, represented in the Figure by business application <b>406</b>A, to the management application for providing cost center services and functionality not provided by the profit center application. The combination of corresponding independent cost center applications and profit center applications form independent systems' stovepipe applications. Events and information are communicated between individual management and business application stovepipe systems using point-to-point messaging architectures as described above. However, each application owns the resources and data necessary to carry out its functionality. Application services are not shared between business and management applications but instead, data and events are merely passed up the stovepipe system. For the most part, information is transferred to and from an administrator working in Operations Center (Ops) <b>404</b>A on client <b>402</b>A through either business application <b>406</b>A or management application <b>408</b>A.</p>
<p id="p-0112" num="0111">Notice that the stovepipe systems for DSL <b>410</b>A and IP <b>410</b>N are fairly analogous and symmetric. However, as discussed above, in certain situations, EAI is possible between the business applications and the management applications. Notice, for instance, that the administrator on client <b>402</b>B may receive an integrated presentation from each of business applications <b>406</b>B and <b>406</b>C. Notice also that rather than business applications <b>406</b>B and <b>406</b>C being stovepiped directly to a separate management application, that each of business applications <b>406</b>B and <b>406</b>C communicate directly to each of management applications <b>408</b>B-D. This is possible through the use of enterprise application integration between independent stovepipe systems for similar enterprise services as management application <b>408</b>B handles a synchronous transfer mode routers through ATMs <b>410</b>B<b>1</b> and <b>410</b>B<b>2</b>, while management application <b>408</b>C manages a particular vendor's version of synchronous optical networks (SONET) and management application <b>408</b>E handles a second vendor's SONET <b>410</b>E. Here, rather than each management application having its own stovepipe business application, the enterprise is able to consolidate business applications from three independent stovepipe business applications to only two, <b>406</b>B and <b>406</b>C. Thus, the enterprises achieved processing and storage efficiency by handling only two independent stovepipes for the three management applications. Notice, however, that true resource integration has not been accomplished. In fact, the only point at which resource data is truly integrated is in the integrated presentation <b>404</b>B to client <b>402</b>B. Thus, while the enterprise has realized a certain amount of reduction in scale due to reducing the duplicative business application processes and resources, none of management applications <b>408</b>A to <b>408</b>E share any services or resources whatsoever. In fact, with regard to the telecommunications enterprise depicted in <figref idref="DRAWINGS">FIG. 4</figref>, it should be apparent that the only true data integration occurs at the presentation level. For instance, by integrated presentation means <b>404</b>B for client <b>402</b>B. Thus, rather than applications <b>406</b>B and <b>406</b>C sharing resource data, the data is actually fed to integrated presentation means <b>404</b>B.</p>
<p id="p-0113" num="0112">From the representative stovepipe relationships in <figref idref="DRAWINGS">FIG. 4</figref>, it is apparent that any of management applications <b>408</b>A to <b>408</b>N may have duplicative services from any of the other management applications, as none of the management applications communicate with one another, and instead communicate only along their own independent stovepipe lines. Those services would be under-utilized with respect to the enterprise and require that more enterprise resources be devoted for housing those services. The same is true of resources needed for the execution of the services within management applications <b>408</b>A to <b>408</b>N. While it is true that the various enterprise services <b>410</b>A to <b>410</b>N may require different resources be available to the management applications, it may also be true that various resources may be common among the various management applications. Network elements compound the stovepipe issue by requiring multiple control interfaces at the element. For example, Juniper routers require both Simple Network Management Protocol (SNMP) and XML to perform a full suite of network management functions. Therefore, the enterprise must again house and manage duplicative management resources only because the independent stovepipe systems' own services, resources and data do not share with one another.</p>
<heading id="h-0006" level="1">NewWave Concepts</heading>
<p id="p-0114" num="0113">NewWave (NW) network management is a next generation management concept that adapts the most advanced concepts from distributed computing to build a global application infrastructure. NW fuses virtual machine spontaneous networking, mobile code, directories, rules engines, and eXtended transAction (XA) transaction standards to deliver a fine-grained set of services on which management applications are re-engineered. NW leverages leading edge technologies for achieving a cross-domain technology management system which separates applications from technology. The individual stovepipe systems that evolved for network equipment, hosts and servers, and applications can all be integrated into a coherent management regime.</p>
<p id="p-0115" num="0114"><figref idref="DRAWINGS">FIG. 5</figref> is a diagram of the NW network management concept in accordance with an exemplary embodiment of the present invention. NW might be analogized to a schema for presenting services to a service user, such as client <b>550</b>. The term &#x201c;client&#x201d; will be understood to represent any consumer or user of a service, notably, many clients or other services, but may instead be any application, software module or tool that utilizes the processes of a service. NW network management service platform <b>500</b> (NewWave NM) is comprised of Global Information Bus <b>510</b> (GIB) is necessary to make services (along with the resources needed by the services) available to client <b>550</b>. DataBus <b>520</b> is a mechanism for decoupling data from the applications that have historically owned the data and make the data available to all authorized users, such as making all data in an enterprise owned by the enterprise and then available to all (authorized) enterprise uses. Finally, Management Operations Center <b>530</b> (MOC) utilizes service provided by both GIB <b>510</b> and DataBus <b>520</b> for monitoring and operating a network. NewWave NM service platform <b>500</b> itself consists of a group of NW infrastructure services and procedures necessary to support NW services.</p>
<p id="p-0116" num="0115">GIB <b>510</b> is best described as a global ecosystem of interrelated services. The GIB architecture is an infrastructure for deploying and managing individual services on a global scale. GIB <b>510</b> provides an infrastructure on which to build services that can run on many platforms. The physical infrastructure is high scalable allowing for new capacity to be easily added, almost invisibly, with a low cost-per-capacity. GIB <b>510</b> deployment infrastructure enables software distribution and service configuration and deployment to be accomplished without direct access to the physical servers within the enterprise. Distribution, configuration and deployment are centralized operations, but the effect to consumers is distributed. GIB <b>510</b> also utilizes a runtime infrastructure for distributed computing, including discovery of services, distributed transaction management and self-healing and also incorporates a management infrastructure for keeping the state of the ecosystem stable.</p>
<p id="p-0117" num="0116">Finally, GIB <b>510</b> includes a distributed communication infrastructure which supports multiple types of interaction between services. These interactions may be totally decoupled, message-based communication in which sender and receiver are unaware of the existence of the other, slightly coupled, wherein message-based communication in which the sender and receiver are aware of each other, but never gain direct access to each other. Also, GIB <b>510</b> distributed communication infrastructure supports generic coupling, event-based communication in which the receiver registers interest in certain events with the sender (the sender is physically coupled to the receiver, but does not know anything specific about it) and fully coupled, remote-procedure call communication in which the sender must find the receiver to make the call (GIB <b>510</b> also supports methodologies for finding each other).</p>
<p id="p-0118" num="0117">DataBus <b>520</b> is a data management architecture for NW service platform <b>500</b>. It presents an architecture for creating a consistent, enterprise-wide data persistence layer which allows clients to access shared enterprise data. DataBus <b>520</b> achieves this enterprise-wide look by decoupling shared enterprise data from specific applications (breaking down the stovepipes) and opening up the data layer to across-the-enterprise access (given proper authorization). DataBus <b>520</b> architecture is designed from the ground up for global scalability and accommodation of evolving business data models in a highly-distributed physical deployment. Scaling is realized predominantly through the partitioning, while individual partitions are mapped to logical data domains that are defined along more relevant dimensions than entity-type dimensions (e.g., geography, line of business, etc.), and cut across traditional entity boundaries.</p>
<p id="p-0119" num="0118">MOC <b>530</b> is a set of NW-enabled services intended to provide support for addressing problems similar to those handled in a Network Operations Center (NOC), but not limited to only network problems. As such, it is intended to support problem management in many forms, including those typically handled by customer support centers and tactical assistance centers. MOC <b>530</b> represents a tool that assumes a fundamental re-engineering of the processes and tools used in these environments. MOC <b>530</b> is an example of the NW approach to designing and managing applications. Rather than building monolithic stovepipe application systems, the &#x201c;application&#x201d; is a collaboration of many smaller services acting on common objects, possibly without knowledge of each other, but with their actions affecting each other. MOC <b>530</b> makes extensive use of rules external to code executed by rules engines. These rules, being uncoupled from specific applications' processes and code, can be presented in a more human-readable form. Additionally, novel uses of finite state-machines and logic gates are used to integrate information and provide behavioral responses to a follow of events and/or data. This allows for changing the system's behavior without changing the code. Those behaviors which represent organizational policy are removed into rules which can then be managed by experts in those organizations. Those rules which encode structural information can be managed, augmented and altered separate from the overall system's responses and actions.</p>
<p id="p-0120" num="0119">Fundamental to the concept is a behavioral approach to rules and application logic. Behavioral in this context means that &#x201c;events generate responses.&#x201d; Instead of elaborately designed processes and procedures, which must be successively decomposed into more and more refined detail, individual use cases are directly programmed (in isolation) using only their own context scope of applicability and the domain of their effect. This results in a bottom up aggregation of behavior from small to large (instead of from large to small). Change can proceed without overarching knowledge and with lessened effect on surrounding applications (increased isolation of design and development). This is achieved via re-use of common framework services with different procedural behaviors attached.</p>
<p id="p-0121" num="0120">NewWave NM service platform <b>500</b>, largely through the use of GIB infrastructure services <b>510</b>, spawns many small components (services and resources) that act largely independently of each other rather than a single monolithic application. These services may directly interact with shared resources by, for example, registering for notification of updates to shared resources. The small services find each other and communicate by using GIB infrastructure services <b>510</b>, (specifically registration and lookup services) and may also publish messages using the GIB's publish/subscribe services. In general, without directly modifying existing components, the overall behavior of any NW-supported architecture can be changed by adding new components. Sometimes this will be a whole new framework service, at other times a specialization of a common service with specific behavior and scope. Since all components, services in particular, are NW-enabled services utilizing registration, lookup and enterprise lookup services, new services, such as services <b>540</b>, can be added to NewWave NM service platform <b>500</b> from outside vendors and entrepreneurs. Moreover, because new added services <b>540</b> may unknowingly invoke existing enterprise cost center services, such as customer tracking and billing, vendor-supplied services provide a rich source of revenue for an enterprise without adding infrastructure normally associated with traditional stovepipe systems.</p>
<p id="p-0122" num="0121">The NW network management service platform relies on the ability to deploy services on many different platforms that run on many different server types. Java (a trademark of and available from Sun Micro Systems, Inc., Palo Alto, Calif.) is a programming language designed to generate applications that can run on all hardware platforms, small, medium and large, without modification and thus provide a means to develop on one platform, but deploy on many. In practice, the Java <b>2</b> platform (JDK 1.2) has been the basis for this multi-platform deployment, but one skilled in the art would readily recognize that other developer kits are available for specific platforms. The Java programming language allows developers of services to be unconcerned with the platform on which the service will be deployed.</p>
<p id="p-0123" num="0122">The NewWave architecture exists separate and apart from the Information Technology used to build the architecture. The architecture and design predate the selection of deployment technology. The reference application uses Java language and Jini distributed applications infrastructure, both Sun technology. There are many reasons why this technology is especially adapted to the NewWave architecture and its reliance on &#x201c;plug and play&#x201d; and code mobility. However, other systems can implement this architecture and several have been used in the Worldcom Lab including Sun JMX, IBM Aglets, IBM WebSphere EJB, and Objectstream Voyager products. Nevertheless, there are real and distinct synergies between design and the target implementation technology. Many aspects of NewWave would be much more laborious to achieve on technologies other than Java and Jini. Further, we expect application infrastructures to evolve and in a few years, better implementations technologies will arrive. NewWave anticipates these and expects to deploy on each successive wave of distributed computing that achieves product status.</p>
<heading id="h-0007" level="1">The Physical Machine Layer&#x2014;Ubiquitous Server Machines</heading>
<p id="p-0124" num="0123">The NW network management service platform is deployed on large numbers of small, rack-mounted servers of varying platforms. Some exemplary platforms include Solaris for Netra (available from Sun Microsystems, Inc.), IBM AIX (available from International Business Machines Corporation), HP UX all of which are UNIX-based platforms. UNIX is a trademark of the American Telephone and Telegraph Company Corporation of New York, N.Y. NT and Linix systems are also in use. The NW network management service platform could be deployed on larger servers as well. However, the cost of scale may go up with larger servers, as those physical boxes are on an entirely different cost curve.</p>
<p id="p-0125" num="0124">The NW physical environment consists of thousands of these small to medium size servers deployed throughout the physical boundaries of an enterprise. These servers could, in the case of a telecommunications enterprise, be deployed on the edges of the network in Point of Presence connections (POPs) as close to the user as possible and even on user premises in user enterprise domains. Data centers and major network hub intersections are also used in the physical deployment model. A NW-enabled server is configured with one of a small number of standard configurations. Standard configurations include generic servers with no special features, and resident application servers with Commercial Off the Shelf Technology (COTS). Resident servers in use include, but are not limited to: database servers with specific database products installed, directory servers with directory applications installed, security servers with security applications and rules servers with a rules engine installed. Basically, native services are relocatable and can migrate to any generic container. Integration with resident applications (each fixed to a specific server or servers) is achieved by representing the interface to the service a NewWave service.</p>
<p id="p-0126" num="0125"><figref idref="DRAWINGS">FIG. 6</figref> is a diagram illustrating the NW concept of many, small generic servers in many geographic locations distributed for enterprise use. For example, an exemplary territory is exhibited in the state of Virginia where three sites have been designated for the distribution of physical hardware denoted hereon in the Figure as geographic sites A, B and C. Each geographic site contains racks of physical hardware, racks <b>1</b>-n, including various servers <b>604</b>A-C available from a variety of original equipment manufacturers (OEMs). In accordance with the exemplary embodiment of the present invention, servers <b>604</b>A-C are not larger multi-processor servers, but instead are smaller rack-mounted servers which may support various platforms such as Solaris, IBMAIX, Windows NT, Linux, etc. However, larger servers can be easily configured in accordance with the exemplary embodiments. For instance, at location A, racks <b>1</b>-n, <b>602</b>A contain a plurality of servers <b>604</b>A. Each of servers <b>604</b>A may be from a single vendor or instead might be from multiple vendors. Associated with one or more of servers <b>640</b>A are particular resources managed by that particular server. For instance, databases <b>610</b>A are particular vendor's databases, while database <b>612</b>A is another vendor's database, each of which are managed by a server in a rack at location A. Another resource, which will be discussed in more detail below, is a rules engine <b>614</b>A which may also be managed by one or more servers <b>604</b>A. Notice that racks <b>602</b>B at geographic location B and <b>602</b>C at geographic location C are similarly configured as those at geographic location A, thereby having large numbers of small generic servers <b>604</b>B and <b>604</b>C, respectively. Similarly, some of servers <b>604</b>B and <b>604</b>C may host various vendor's data resources <b>610</b>B, <b>610</b>C or <b>612</b>B, along with the rules engines <b>614</b>B and <b>614</b>C. The importance of this concept is that any server in any geographic location can process any service needed by any client in any other geographic area.</p>
<p id="p-0127" num="0126">In its broadest sense, NewWave releases the application and the data from the physical server and also from the bounds of that single location. NewWave produces a global scale computing system where the telecommunications data network replaces the traditional computer backplane and the individual server and the containers on it substitute for each of the chips in a multi-processor enterprise system. Immense scalability is archived at greatly improved efficiency for organizations that require large scope business activities.</p>
<heading id="h-0008" level="1">The Virtual Machine Layer</heading>
<p id="p-0128" num="0127">The operating system of each physical server is not used directly in the NW operating environment. Instead, each server must have the capability of running a platform-independent programming language virtual machine (VM) on top of the operating system that converts Java bytecode into machine language and executes it. The Java Virtual Machine (JAM) (a trademark of and available from Sun Microsystems, Inc.) is currently the most popular software that converts the Java intermediate language into machine language, but other vendors supply their own versions. For example, the Microsoft Virtual Machine (available from Microsoft Corporation in Redmond, Wash.) is also a Java interpreter.</p>
<p id="p-0129" num="0128">A VM is a multi-threaded processing environment that encapsulates all access to the underlying computing platform. As such, a Solaris Netra looks the same as a Windows NT to a process being executed by the VM. A VM is, in fact, a single computing process, but it supports the running of many &#x201c;mini&#x201d; processes (threads) within. Thus, the NW operating environment is actually thousands of VMS deployed on small physical server machines throughout the world.</p>
<p id="p-0130" num="0129">Other approaches to abstraction of the application environment from the underlying system were explored, most notably IBM's Aglets. Java and the DIV have provided the best platform to date. Other platforms used the VM approach in the past, most notable the IBM VM system and the Honeywell Multicast systems. In the future, NewWave expects to use other platforms as these reach the market and provide similar dynamics.</p>
<heading id="h-0009" level="1">Containers</heading>
<p id="p-0131" num="0130">In the NW environment, services are remote processing entities that are managed remotely, configured remotely, load their code remotely, and found and communicated with remotely. To facilitate these requirements, the NW service platform includes a container technology for providing a runtime operating environment for services. At the heart of the container scheme is the concept of a generic service container&#x2014;a CPU process into which arbitrary software services may be homed to a host server at runtime. Each VM runs a small set of code which identifies it as a VM container and makes the VM container able to be found and communicated with remotely. VM containers are realized as VM heavy-weight processes which are launched from boot scripts as the server is booted. VM service containers are the multi-threaded servers that provide a place in which multiple-service instances reside, each executing its own thread or threads of execution.</p>
<p id="p-0132" num="0131">A VM container is also a service itself. More correctly, a VM container may be thought of as a &#x201c;service container service running on a VM.&#x201d; The service provided by a VM container is the launching of other services within itself. It behaves much like the services it contains in the way it can be found remotely and communicated with. Thus, like any other service, a VM container must register itself with a domain registrar and/or enterprise repository to be visible in its home domain and with the enterprise repository to be visible to services across the enterprise. The registration and finding of services will be discussed in greater specificity below. The salient point is that, like services, VM containers can be found remotely from anywhere in the world and requests can be programmatically made of them. VM containers report their own statistics and can be asked to shut down.</p>
<p id="p-0133" num="0132">The main difference between a VM container and all other services supported by the NW service platform is in how a VM container, or more properly, the container service, is launched. A VM container is launched from the operating system and not from within another container. It cannot be launched from a remote location programmatically according to the NW conventions. In a similar fashion as other services, containers are not intended to be launched by NW clients. Rather, conceptually it could be considered as an integral part of the operating environment and launched by one of the following means:
<ul id="ul0001" list-style="none">
    <li id="ul0001-0001" num="0000">
    <ul id="ul0002" list-style="none">
        <li id="ul0002-0001" num="0133">1. manually, by telneting into the server and running a script;</li>
        <li id="ul0002-0002" num="0134">2. as part of the startup of the host server's operating system;</li>
        <li id="ul0002-0003" num="0135">3. using an operating system-specific scheduling mechanism, such as Unix crontab or Windows services; or</li>
        <li id="ul0002-0004" num="0136">4. using Remote Method Invocation (RMI) activation (a Java-specific remote procedural call that requires the RMI Daemon to be running), which itself would have to be started via operating system-specific means.</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0134" num="0137">Once running, a VM container must register itself to be visible to clients, services and administrators in the enterprise that may need the VM container for running a service.</p>
<p id="p-0135" num="0138">Although every VM container is truly generic in nature, a VM container runs a small set of code in which the VM container can designate itself as a particular type of container. Some containers might designate themselves for running essential NW infrastructure services or other enterprise services such as GIB, DataBus or MOC services, or perhaps the container designation may relate to the type of host server running the VM container. Designating a container as being of a particular type might also be based on the server resources available in a logical domain. Depending upon the total quantity of VM containers in a domain, their reliability and domain loading factors, an administrator can designate a pre-defined number of containers as being NW infrastructure-type, GIB infrastructure-type, and so on. The composition of VM container-type designations is based on the priority of the hosting center and intended to assure that VM containers are always available for crucial enterprise objectives, such as re-homing services that are essential to the enterprise. Therefore, key services, while they may run in a generic-type VM container, do not depend on a generic-type VM container being available for self-healing of dead or dying services because other VM containers have been pre-designated for restarting those services. Thus, in the case of an essential infrastructure service, or any service for that matter, a predetermined quantity of VM containers can be pre-designated for running only those essential infrastructure services (self-healing capabilities will be discussed in greater detail below).</p>
<p id="p-0136" num="0139">A key technical aspect is the storage of the configuration of the system and the container off board of the system and the container. In NW systems, this occurs in the registry. This is implemented in this generation via Jini Lookup and Directory (LDAP) services. However, any abstract and external service can implement the off board registration. By being separate from the container, all or part of the configuration can be transferred efficiently to another container as needed. Enterprise wide operations can occur on the configuration, without reference to the physical/server location it describes.</p>
<p id="p-0137" num="0140">It should be understood at this point that a logical domain within the enterprise may be of at least two types&#x2014;management and network&#x2014;and these domain types are not necessarily synonymous. A management domain is generally defined from servers that are physically located at a physical hosting facility. On the other hand, a logical network domain is based on the transmission topology of a network defined around, for instance, a unicast or multicast routing table and may not be physically located at a single facility. Furthermore, some self-healing services use service lookup services that utilize management domains, while others use service lookup services that utilize network domains. Therefore, if the intent of the VM container is to designate itself as a type compatible with self-healing services, the VM container must ensure that it is listed in the lookup service being used by the particular self-healing service monitoring the services to be run by the VM container.</p>
<p id="p-0138" num="0141">With respect to still another criteria, a VM container can designate itself as a particular type of container based on the resources available from the host server running the container. Services must be run in a container, but some services need additional resources aside from the container, such as a particular type of database, rules engine, etc. A service provider must be apprised of the resources available at a server host before attempting to launch a service on a host that is not equipped to run the provider's service.</p>
<p id="p-0139" num="0142">Finally, a VM service container amounts to a heavyweight CPU process. Allowing service threads belonging to different service suppliers to coexist in the same process space is an open invitation to adverse interactions (e.g., modification of a non-final static variable used by both services). For the sake of isolation, each VM container is uniquely owned by a single service supplier business entity. While APIs might be used by a customer who supplies services to lease a service container, the container may also designate itself as a container type to be used by a particular supplier. In that way, only services supplied by a single-service supplier business entity will be able to run in a particular container. Thus, a VM container can be designated to services supplied by a particular supplier.</p>
<p id="p-0140" num="0143">Note that domain registrar and/or enterprise registry are not the only means for finding a handle to a service container. Another option is to register the service containers within RMI registry. The URL address for connecting to a specific service container (e.g., &#x201c;rmi://lambic.wcomnet.com/serviceContainer13/&#x201d;) is stored within the inventory database. A service supplier would query the inventory database for the URL address and then perform a conventional RMI lookup against that URL address.</p>
<p id="p-0141" num="0144"><figref idref="DRAWINGS">FIG. 7</figref> is a diagram illustrating various typical configurations of the small servers running various operating systems in which VM containers are running on host servers in accordance with an exemplary embodiment of the present invention. Here, four servers <b>702</b>A, B, C and N are shown, each having a unique operating system platform such as operating systems A, B, C and N. Running on each of servers <b>702</b>A to N are one or more generic VM containers <b>704</b>. Every CPU host in an enterprise hosting facility will run at least one VM container processes such as servers <b>702</b>N and <b>702</b>A). Service deployers may inject the code for their services at any one of the VM containers. As can be seen from the Figure, it is expected that the VM containers <b>704</b> are multi-threaded, multi-tasked containers allowing for the concurrent execution of various services <b>706</b> on each container <b>704</b>. Further, each server platform <b>7021</b>A-N may run multiple VM containers <b>712</b>.</p>
<heading id="h-0010" level="1">High Level Overview of the NewWave Platform</heading>
<p id="p-0142" num="0145">With respect to <figref idref="DRAWINGS">FIG. 8</figref>, a conceptual diagram of NW distributive concepts is illustrated in accordance with an exemplary embodiment of the present invention. General Information Bus (GIB), also called the Global Information Bus (GIB), <b>802</b> can be conceptually described as an information bus containing NW-enabled services and mobile applications available for use by clients as needed. Essentially, the GIB is a set of specific, yet extensible, Framework Services, implemented on a scoped (local, regional, global) distributed computing infrastructure.</p>
<p id="p-0143" num="0146">The heart of GIB <b>802</b> is the manner in which it allows deployment of services into the operating environment in a very flexible and easy-to-administer manner. GIB <b>802</b> is a series of services that may change from one execution to another, finding and collaborating with other services dynamically. This system of collaborating services starts to resemble an ecosystem, and the job of the GIB architecture is to maintain the interconnectedness and stability of this ecosystem as it continually changes. Almost all GIB components are implemented as services, even if they support no externally-available requests because all components must support certain administrative requests mandated by the NW. The administration and management of the ecosystem depends upon this capability. Although the component is acting as a service in the traditional sense of the word, it is deployed as a service. For this reason, even though GIB components come in many different flavors, at one level they all appear as services and follow many of the same conventions. The different flavors include the following and are depicted in the Figure below:
<ul id="ul0003" list-style="none">
    <li id="ul0003-0001" num="0000">
    <ul id="ul0004" list-style="none">
        <li id="ul0004-0001" num="0147">services that are part of the GIB infrastructure;</li>
        <li id="ul0004-0002" num="0148">services that are parts of applications;</li>
        <li id="ul0004-0003" num="0149">services that provide access to persistent DataBus objects; and</li>
        <li id="ul0004-0004" num="0150">services that act as agents representing external entities such as devices, gateways to external (non-GIB) systems and even people, or are built directly into devices.</li>
    </ul>
    </li>
</ul>
</p>
<heading id="h-0011" level="1">Services</heading>
<p id="p-0144" num="0151">All services must conform to certain conventions to be a well-behaved service. These include the following:
<ul id="ul0005" list-style="none">
    <li id="ul0005-0001" num="0000">
    <ul id="ul0006" list-style="none">
        <li id="ul0006-0001" num="0152">a service must exhibit the greatest degree of mobility possible;</li>
        <li id="ul0006-0002" num="0153">a service must discover and register with all local registrars, renewing its own registration lease;</li>
        <li id="ul0006-0003" num="0154">a service should register with a proxy which can handle simple loss of connection to the service, re-finding the service and continuing processing without interruption;</li>
        <li id="ul0006-0004" num="0155">a service must implement certain management-related requests, including ping( ), healthCheck( ), shutdown( ), quiesce( ), reset( ); and</li>
        <li id="ul0006-0005" num="0156">a service must accept requests for notification of events, and notify listeners, at a minimum, of certain administrative events; additionally, the service could define other types of events.</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0145" num="0157">To the greatest extent possible, a service must be mobile, which is the single most important characteristic of a service. This is to say that there are as few restrictions as possible to the deployment of a service on any machine anywhere as quickly as possible without human intervention. The limitations of this goal are primarily the provisioning of a service by:
<ul id="ul0007" list-style="none">
    <li id="ul0007-0001" num="0000">
    <ul id="ul0008" list-style="none">
        <li id="ul0008-0001" num="0158">installing software needed for the service to run;</li>
        <li id="ul0008-0002" num="0159">establishing local configuration parameters;</li>
        <li id="ul0008-0003" num="0160">installing resources upon which the service depends; and</li>
        <li id="ul0008-0004" num="0161">performing the actual launching of the service on a particular machine (requiring human intervention or establishing scheduling options on the machine running the service).</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0146" num="0162">Services in the NW environment must overcome these limitations. As such, NW services must be able to be launched on a server without any code specific to the service and without any configuration information being pre-installed on the server. All resources used by the service, if possible, must be able to be remotely accessed and not depend upon the resource being present on the local machine. Databases used by NW services must be able to be created on the fly by the service. So, while a service might depend on the existence of a local database server, it cannot depend on that database having been configured to have certain tables. It must be able to create the tables from a schema which is remotely loadable and to populate the database from remote sources. If the data cannot be remotely loaded, then the database must have a mirror copy which the service can re-home to. Finally, a NW service must be able to be launched on a server without a human logging onto the server to initiate the launch and, in the event of a failure, a service must be able to be re-homed at runtime from one server to another without human intervention.</p>
<p id="p-0147" num="0163">The NW infrastructure provides an operating environment for services which is similar to the public Internet or an intranet. Instead of many client machines, the NW service platform is deployed on large numbers of small, rack-mounted servers. Instead of web browsers running Virtual Machines, there are VM containers, and instead of running applets in the web browser VM, there are services running in container VMs. When an applet is launched from a web page, it has a &#x201c;codebase&#x201d; identifying the location of the class files (server) that need to be loaded before the applet can run. In the NW infrastructure, each service has a codebase identifying from where its class files should be loaded from. To create this environment, the NW service platform deploys many HyperText Transport Protocol (HTTP) servers in place to serve up code, that is, Java class files and resources. The class files and resources are installed on the HTTP servers. An HTTP server which is employed to serve up code is called a &#x201c;code server.&#x201d;</p>
<p id="p-0148" num="0164">When a service is launched in a VM container, the container is provided with certain configuration information, including the service's codebase. The codebase contains the address(es) (usually URL(s), but it could be URI(s)) of the code servers which are able to serve up the service's code. So, when the service is launched, its code is loaded from a remotely-located code server. As services are generally long-running, code located remotely, even if it is a large amount of code, is a reasonable cost. Additionally, caching techniques are used to locally store the class files, checking each time to ensure that they have not been modified on the code server. In this way, installing a new version of a service's classes does not involve any type of software distribution technique involving the servers on which the services will run. Instead, it involves only pushing the new software out to the HTTP servers, which is a much more manageable task.</p>
<p id="p-0149" num="0165">Consumers of services must run software that is consistent with the service. Whenever a service is used, there is a piece of code, the proxy, which is used to access the service. The proxy is referred to herein as a client proxy, proxy object and service object alternatively and will be more fully described below. In some environments, notably the CORBA environment described above, the proxy is the Achilles' heel to software distribution. However, in the NW environment, the proxy is also remotely downloaded. When a proxy is registered with an enterprise registrar, it too is given a codebase from which any client using the proxy should load the code. In this way, the client and the service always use consistent copies of the service and the proxy. In implementation, the Java Jini proxy is used with specific semantics and augmentation for NewWave service inter-working.</p>
<p id="p-0150" num="0166">Regardless, a client must have initially loaded an &#x201c;interface&#x201d; for interacting with the proxy. This code also must be consistent with the interface presented by the service. One solution is to launch client applications that use NW services with a similar remote loading approach. Specifically, an &#x201c;Application Launcher&#x201d; that launches an application using a specified remote codebase. One such application launching tool is Web Start (available from Sun Microsystems, Inc.).</p>
<p id="p-0151" num="0167">A service must be mobile from the point of view of class and resource files, as well as from the point of view of configuration information. Configuration information, like class and resource files, cannot be tied to a specific machine. To accomplish this, configuration information is made available at the enterprise level, thus NW services can be launched using configuration information that is not local to the service. As will be more fully described below, all configuration information is stored in an enterprise level repository (the enterprise repository) and then replicated to identical repositories throughout the geographic extent of the enterprise. Application launchers access the configuration information in the repository, and then forward the configuration information to the VM container selected for running the service. The information includes both configuration information needed by the container to launch the service and information needed by the service itself.</p>
<p id="p-0152" num="0168">The NW infrastructure provides for remotely-located resources. Reference files and other resources used by a service are remotely loaded at runtime using the same techniques described above used for class loading. These resources may include EXtensible Markup Language (XML) files, properties files, images and the like. These resources are installed on the HTTP code servers in a similar manner as the class files. However, some services that use a resource require a local resource to be local, therefore the local resource must be provisioned automatically to accommodate the reference files and other resources that will be loaded remotely at runtime. For example, a service that uses a database locally, must be able to start with a completely empty database, and then add the necessary database tables, remotely and on the fly. However, the local resource must be prepared for the remotely-loaded tables with suitable database definitions for the structure and the type of contents that each data element that the local resource can contain (i.e., the database schema). An HTTP server could be used for storing schema information in a similar fashion as the resources and code files. Another solution is to use an enterprise level directory that is visible to all services. The schema information can then be remotely loaded from the enterprise directory, after which the source data for populating the newly-defined tables is loaded from a remotely-located HTTP server.</p>
<p id="p-0153" num="0169">Returning to <figref idref="DRAWINGS">FIG. 8</figref>, the functionality of GIB <b>802</b> requires certain services to be available for all other services. These services are generally referred to as GIB infrastructure services including registrar, enterprise repository and lookup services <b>804</b>; distributed transaction services and semantics <b>806</b>; policy rule services <b>808</b>; messaging and publication subscription services <b>814</b>; rendezvous services <b>812</b>; and self-management services <b>812</b>. The GIB is designed to be extensible, and additional framework services are continuously being defined; these incorporate seamlessly. Enterprise repository and lookup services <b>804</b> provide a means for client to locate a needed service without knowing where that service is currently running. Whenever a service is launched in a container, that service registers itself with its domain registrar in order to make itself visible to the client in its own domain. A service registered with a domain registrar is visible only in the domain the service is running, so in order for a service to be visible to all clients in the enterprise, a service must register with an enterprise level registry, the enterprise repository. Clients needing a particular service do not need to know where the service is running or even if the service is available in the client's own domain. Instead the client merely looks the service up with the registrar. If the needed service is not listed in the registrar, the client can be directed to a enterprise repository lookup for the location of an enterprise repository within the enterprise. Registrar, enterprise repository and lookup services <b>804</b> also manage VM container leases. These and other functions of registrar, enterprise repository and lookup services <b>804</b> will be described in more detail below.</p>
<p id="p-0154" num="0170">Distributed transaction services and semantics <b>806</b> manage transactions between the NW services running in the enterprise, with distributed transaction coordination and without the heavy, monolithic character of traditional Transaction Processing (TP) monitors. Distributed transaction services and semantics <b>806</b> ensure that processes which need transactional atomicity (several operations complete in their entirety or not at all) can get it. The transaction manager oversees a two-phase commit protocol to coordinate the commit of all containers and association engines that joined the transaction.</p>
<p id="p-0155" num="0171">Policy rule services <b>808</b>, or behavior services, are employed by GIB <b>802</b> for applying policy outside of the normal flow of processing logic to interactions between services. This is accomplished through the use of rules engines that allow the specification of policy-based rules outside of the processing logic. This allows organizations knowledgeable of operations support, instead of programming organizations, to be in control of the behaviors implementing operations support policy.</p>
<p id="p-0156" num="0172">NW messaging and publication subscription services <b>814</b> provide NW components the means for communicating between NW services. There is no single answer as to how services should communicate. There are different levels of coupling between services desired, depending on the type of service. Services publish events, subscribe to event topics and receive events to which they have subscribed for notification of various events which may need service. Generally, the communication service is dynamic with run-time announcements of producer and consumer registrations, including topics. (Traditionally, these communications' channels were fixed by the logical, initial configuration and physical deployment of a distributed system.) Rendezvous services <b>812</b> recognize and combine patterns of events which may require further service. One important factor when processing events is to know if the event is already being handled. Rendezvous services <b>812</b> recognize that events are being handled, thus preventing an event which has gone directly to a state machine from also creating a new state machine. Event patterns are also recognized which allows work documents already started to be merged together.</p>
<p id="p-0157" num="0173">NW services, once substantiated, must remain running on a server, or at least some server, and register for clients needing the services to be located. Therefore, GIB <b>802</b> also employs a group of self-management services <b>816</b> for monitoring the state of essential NW infrastructure services, or any services for that matter, on their separate servers. Notification of a dead service to a re-homing service (&#x201c;arch-angel&#x201d; service) is primarily a function of the leasing service provided by the domain registrar. The re-homing service then re-launches the dead service in another container, possibly on another server. Clients using a dead or dying service are left in the lurch as they cannot then complete processing even though the dead service might have been restarted in another container. The solution involves the use of self-healing proxy references that look to the registrar whenever a request to a service results in a stale exception. Here again, each of the GIB infrastructure services will be discussed in greater detail with respect to the Figures below.</p>
<p id="p-0158" num="0174">One feature of the present invention involves separating data and resources that have been traditionally tied or owned by a particular application, from that application, thus breaking down the stovepipe. These resources are managed by persistent services <b>818</b>, particularly DataBus services, and may be used by clients and enterprise users via GIB <b>802</b>. However, persistent services <b>818</b> make enterprise data directly available to the enterprise users, depending on authorizations, and not from a data-owning application. Data can be organized by broad business domains such as the classification based on &#x201c;tiles&#x201d; or the TeleManagement Forum's BAC/SIM classification. However, any organization principle can be used. Current implementation uses the DMTF CIM/DEN information model. Deployment of data is generally &#x201c;holographic&#x201d; and randomly distributed within a named domain. [But policy-based distribution and resource capacity is also used] Domain names are based on geography, technology, and line-of-business; yet, any number of domain dimensions can be created allowing business extensibility.</p>
<p id="p-0159" num="0175">Although data objects and data storage tiers are shared across the enterprise and de-coupled from applications, they are still available via simple, transactional APIs. Essentially, each kind of data is a service. Although finding data is somewhat more complex that finding a running service, the method is similar to the two-hop method employed with services. First, look to a local domain registrar for the location of a data object. If the data is not local, then look to an enterprise directory for the data object. The present invention achieves enormous scalability via a high degree of partitioning where data is flexibly mapped to a persistence layer of hundreds of mixed vendor databases and occasionally to other persistence technologies such as directories and tuple spaces. File storage is also supported via integration of Jiro (Sun product) or other Jini enabled disks. This provides for development of remote storage products such as NSPs and similar services within the NW infrastructure.</p>
<p id="p-0160" num="0176">Finally, enterprise devices and heritage systems are provided access to NW services and resources via heritage system gateway <b>820</b> which translates heritage services into NW services. This is accomplished by implementing NW services acting as agents which represent external entities enterprise devices to other NW services. A similar mechanism is used for enterprise network elements. Enterprise network elements access NW services on GIB <b>802</b> in either of two ways by: 1) being NW-enabled themselves (i.e., by incorporating NW distributive intelligence services onboard that can directly access GIB <b>802</b>); or 2) utilizing distributed intelligent agents <b>822</b> which are similar to non-network devices described above and that interact with the resident protocol for the network elements to access NW services on GIB <b>802</b>.</p>
<heading id="h-0012" level="1">The GIB Infrastructure Architecture</heading>
<p id="p-0161" num="0177">The GIB is an ecosystem of NW services interacting in a highly-distributed fashion requiring special technologies to help services discover each other and keep the ecosystem healthy and stable. As independent stovepipe systems are deconstructed, new challenges are unearthed that are unaddressed by the prior art. Neither the EAI initiatives, the CORBA and EJB standards nor Sun's J2EE platform and Jini technology provide a holistic solution to the problems encountered in such a highly interactive-distributed environment as NW.</p>
<heading id="h-0013" level="1">NewWave Service Platform Infrastructure</heading>
<p id="p-0162" num="0178">Before discussing <figref idref="DRAWINGS">FIG. 9</figref> in depth, a brief discussion of the underlying principle of the glue that binds the NW infrastructure would be helpful. NewWave, unlike prior art attempts, is a highly distributive environment based on an enterprise (or global) model and is not merely a domain level model of service distributions. Virtually every NewWave component can be embodied as a NewWave service so the NewWave principles described below apply to most, if not all NewWave components. [When a non-native application is integrated into the NewWave service environment, a surrogate or proxy NewWave service is created which maintains the specialized interface/communication; the marketplace of other NW services sees only another NW service interface.] In order for the ecosystem to remain in balance, whenever a service is launched, that service finds all services with which it needs to interact and also makes itself visible to all clients (service consumers, usually other services) that need to interact with it. Clients and services running in a domain are listed in all local lookup directories (directory services running in that domain). So, a newly-launched service spontaneously discovers all domain directories for registering itself to be found by services needing to interact with it, and finding services with which it needs to interact. The present invention, in contrast to the prior art, utilizes a &#x201c;two-hop&#x201d; discovery process to discover all local directory services and all enterprise level directory services. Through this two-hop process, a newly-launched service can discover and register with all local directories. Having discovered the local directories, the service can &#x201c;find&#x201d; any and all local services with which its needs to interact. One service is a &#x201c;find&#x201d; service which is used by a newly-launched service to find non-local directories (enterprise level directories) to make itself visible to non-local service consumers. Similarly, the local directory and find services can be used to look up services the newly-launched service needs, locally from the local directory and globally via the find service.</p>
<p id="p-0163" num="0179">This method is generally extensible and can be extended to three or more hop implementations if extremely large or extremely refined scope delineations are required by business circumstance or by the specifics of an alternate/future implementation technology. For instance, extension of the NewWave domain beyond a single global company to a marketplace of many global companies can be realized via an &#x201c;extranet&#x201d; service registrar which could be implemented as a third hop. In this manner, the NW infrastructure could be extended to a pandemic, global computing platform treating applications and data similarly to how the international financial infrastructure deals with products and money. Data in the system could be traded, deposited, withdrawn and even willed to heirs. Application services can be found via service directories (like phone numbers are today) and leased to other users. These service extensions and products are in development.</p>
<p id="p-0164" num="0180">Returning to <figref idref="DRAWINGS">FIG. 9</figref>, a diagram of NW service platform infrastructure of interrelated services relating to an enterprise is illustrated in accordance with an exemplary embodiment of the present invention. It is expected that an enterprise network is geographically widespread and serviced by a plurality of logical network domains, represented as network domains A-N. Logical domains are conceptually &#x201c;local&#x201d; to all services and clients within the domain. Everything not in a domain is &#x201c;not local&#x201d; to that domain and those services and clients. Local NW components in domain A (<b>902</b>A) include all locally-running VM containers <b>918</b>A and other NW services <b>910</b>A, domain registrar(s) <b>914</b>A<b>1</b>-<b>914</b>AN, transaction managers(s) <b>912</b>A<b>1</b>-<b>912</b>AN and enterprise repository lookup <b>916</b>A. &#x201c;Local,&#x201d; from the perspective of a component, means it is in the same multicast radius. Therefore, network domains A-N define separate multicast domains. NW components in domain A would be local to other components in domain A but non-local to NW components in any of logical domains B-N. Enterprise repository(ies) <b>926</b>, on the other hand, is non-local to all other services and resources, no matter the domain. It should be understood that the enterprise consists of a plurality of domains, local and non-local, but the present invention of the invention will be described, heretofore, with respect to NW components in logical domain A (<b>902</b>A). The term &#x201c;client&#x201d; will be understood to represent any consumer or user of a service, notably, many clients are other services, especially another service that builds upon more primitive services, but may instead be any application, software module or tool that utilizes the processes of a service or might even be an end-user in the enterprise.</p>
<p id="p-0165" num="0181">In each logical domain, such as domain A, services <b>910</b>A are deployed on a plurality of host servers, <b>904</b>A, <b>904</b>A<b>1</b> and <b>904</b>A<b>2</b> and running in a plurality of VM containers <b>906</b> (as described above with respect to <figref idref="DRAWINGS">FIG. 7</figref>). When deployed, servers <b>904</b> are loaded only with Java and the container code, these servers being &#x201c;generic hosts,&#x201d; depicted as server A <b>904</b>A<b>1</b> and server B <b>904</b>A<b>2</b>. However, special resources such as database <b>908</b> and rules engines (not shown), can be locally added to generic servers that transform the generic host into a &#x201c;specialized host&#x201d; or server, such as that depicted server <b>904</b>A. Within each of VM containers <b>906</b>A, one or more services <b>910</b> may be launched and continue running while awaiting requests from clients. However, enterprise clients must be able to find a service in order to utilize its functionality. While prior art technology makes the client responsible for knowing where to look for the service, by address usually, the present invention utilizes domain registrar(s) <b>914</b>A for tracking the addresses (URL address, URI addresses or host name) of services in accordance with an exemplary embodiment of the present invention.</p>
<heading id="h-0014" level="1">Domain Registrars</heading>
<p id="p-0166" num="0182">Each of domains A-N has at least one domain registrar, but as many as N registrars may be located in any one domain. A domain registrar can be embodied as a service and thus launch, discover and be discovered as any other service. Domain registrar <b>914</b> provides up to four primary services for the NW infrastructure: 1) a listing/lookup service for NW services running in its local domain, the services being listed and looked up in a lookup table by type and attribute, a proxy to the service is also listed that is streamed out to clients that lookup the corresponding service; 2) a leasing service for services running to lease resources in their local domain; 3) an enterprise level listing/lookup service allowing local services an client to bridge the gap to the enterprise level; and 4) a replicating service to replicate its tables or merely change in its tables to other registrars, or in fact to any service that has a need for registration or leasing information, for example, re-start services, trawling services, find services, enterprise level listing/lookup service, and other registrars in the local domain.</p>
<p id="p-0167" num="0183">1. Discovery and Registration</p>
<p id="p-0168" num="0184">In the NW environment, when service <b>910</b>A is launched, it spontaneously &#x201c;discovers&#x201d; all nearby registrars <b>914</b>A<b>1</b>-<b>914</b>AN (i.e., all domain registrars in its local domain). The newly-launched service <b>910</b>A then registers itself with the all newly-discovered domain registrars <b>914</b>A<b>1</b>-<b>914</b>AN. In accordance with one exemplary embodiment of the present invention, the NW infrastructure uses multicast packets to allow both services and consumer services (clients) to spontaneously discover any of domain registrars <b>914</b>A<b>1</b>-<b>914</b>AN within a local domain defined by a multicast radius, thus bootstrapping the process of finding and registering services. Thus, discovery is accomplished without obtaining any specific information about domain registrars <b>914</b>A, such as a URL address or host name. Similarly, whenever a new domain registrar is deployed, the domain registrar signals its availability for registering services within the local domain by broadcasting a multicast message to all nodes in the multicast domain (this is expected because a registrar is a NW service). All services <b>910</b>A running in domain A strive to remain registered with all local domain registrars <b>914</b>A<b>1</b>-<b>914</b>AN, and so upon receiving the broadcast message, all services in the domain register with the newly-launched registrar.</p>
<p id="p-0169" num="0185">This method utilizes Java Jini functional facilities. Other lookup methods can be supported in specific circumstances or environments. One such method utilizes a mobile agent approach where an active mobile service agent deposits information in each lookup or enterprise registration facility. Circumstances which can invoke these alternate methods are generally the result of technical or logical barricades such as company boundaries, security domains, or non-IP transport networks.</p>
<p id="p-0170" num="0186">A. Local Registration</p>
<p id="p-0171" num="0187">Once local domain registrars <b>914</b>A<b>1</b>-<b>914</b>AN have been discovered, local registration is a two-step process, providing registration information about the service and making an enterprise lease for resources needed by the service. Local registration makes service <b>910</b>A visible to other NW services and clients (collectively service consumers or merely consumers) in the local domain. When a service registers itself, it provides a number of attributes in the registration that makes it easier for others (potential consumers) to find. These attributes may include one or more names, domain-type information, the interfaces which the service implements (i.e., what function a service can be requested to do). Thus, a client can match a service listed in registrar <b>914</b>A according to their interface type or by matching one or more attributes with which service <b>910</b>A registered itself.</p>
<p id="p-0172" num="0188">Additionally, service <b>910</b>A can also include administrative information in the registration information provided to registrar <b>914</b>A (i.e., administrative information for interacting with the service administratively, such as an icon for display or a user interface object).</p>
<p id="p-0173" num="0189">Finally, service <b>910</b>A must provide registrars <b>914</b>A an object which is a proxy, or a service object, to service <b>910</b>A, during registration. The proxy is an object (or objects) that allows clients to access a service. The proxy is streamed to registrar <b>914</b>A where it is stored in serialized form. When a consumer of service <b>910</b>A looks up that service, the proxy is, in turn, streamed out to the consumer. A proxy contains codebase with a URL of an HTTP server, the service code (usually Java byte-code) that implements the proxy object can be served up from that HTTP server by its URL, which is located arbitrarily in or outside the geographical domain of the enterprise.</p>
<p id="p-0174" num="0190">The above-described approach to registering a service proxy in a local service registrar that employs a leasing approach to registration constitutes prior art, specifically embodied by the Jini technology suite from Sun Microsystems. This approach to proximity-based, local service lookup is itself not a part of the present invention, but is used by the present invention in conjunction with novel techniques that expand the visibility of network services to enterprise scope.</p>
<p id="p-0175" num="0191">B. Proxies</p>
<p id="p-0176" num="0192">In its simplest form, a proxy merely forwards requests from a consumer, for instance, on to service <b>910</b>A. However, the proxy might also contain any code that could be executed in a client environment before, after or instead of forwarding the request. Such a proxy is known as a &#x201c;smart proxy.&#x201d; This model is in sharp contrast to CORBA, where a registry simply stores a reference (a sort of address) that allows a consumer of a CORBA service to make a connection to some remotely-deployed service process. The present invention allows proxies that implement the service interface to be moved out to consumers at runtime.</p>
<p id="p-0177" num="0193">The technique of using smart proxies in the context of distributed object systems was known within the CORBA development community (and explicitly discussed in Iona CORBA documentation). However, the approach taken to implementing smart proxies within a CORBA context was highly constrained and awkward. A developer needed to manually insert source-code modifications into the stubs that were generated by the IDL compiler, an inelegant work-around. The Jini technology from Sun Microsystems, greatly added to the state-of-the-art with regard to the usefulness, power and practicality of smart proxies. This storage of serialized smart proxies within service lookup engines, and the streaming of such proxies to service consumer processes obviated the need to manually modify generated stub code, as well as freeing client applications from the requirement to link in required stub implementation code at program build time. The current invention makes extensive use of smart proxies, for example, in its handles to remote entity instances and the interfaces to logical association engines (discussed in depth below). However, such smart proxy techniques themselves are part of the prior art that is used in novel ways to support and enable the current invention.</p>
<p id="p-0178" num="0194">The proxy that gets stored in domain registrar <b>914</b>A, and subsequently streamed out to clients, can be absolutely any object that is serializable. A smart proxy can do anything that can be done in Java code. This model of moving smart proxies and service code to clients at runtime is different from CORBA, where a stub object can only act as a proxy that forwards requests to and responses from a remote server process. According to the one embodiment of the present invention, a smart proxy may perform computations that are purely local within the client's process space. According to another embodiment of the present invention, it might store state information local to the client. Alternatively, and in accordance with still another embodiment of the present invention, it might interact with a remote server process (outside its local domain)&#x2014;the real implementor of a service.</p>
<p id="p-0179" num="0195">Essentially, the client proxy hides code from the client, thus when the client makes a request for a NW service, a smart proxy will be returned with service interaction code that is hidden from the client. The client might &#x201c;think&#x201d; it is interacting with the requested service, while in fact the smart proxy provides the client with a means for executing the service locally, or interacting with the requested service, or interacting with services, sequentially or concurrently, without the client being aware of the interactions. The client proxy can hide any code, thus allowing the client to communicate with a remote service using any protocol or middleware or many services. Alternatively, client proxy can hide any code allowing the client to perform all logic locally or even implement an entire client application, including GUI.</p>
<p id="p-0180" num="0196">It should be understood that even in the degenerate case, where the service object simply forwards requests to a remote process, NewWave services become roughly equivalent to CORBA or RMI services. One of the most common forms of NW services uses an RMI stub object as the proxy object that is downloaded from a domain registrar's lookup to a client. But this is simply the most common case. A smart proxy encapsulates code that interacts with a remote service using any one of a variety of protocols or middleware, such as sockets, RMI, CORBA, IBM MQSeries, and the like. Or a smart proxy interacts with two or more remote services using the same or even different middleware or protocols. Or a smart proxy interacts with zero remote processes, implementing the entire service interface locally within the client's process space. Over the course of time, a smart proxy might have an implementation that changes to a different communications protocol, unbeknownst to the client. For example, as vendors and vendor services evolve, the implementation code in the smart proxy changes to reflect new services. Alternatively, the proxy might communicate with one or another remote server processes, depending upon the time of day, lading or other configurable factors. In still another example, the proxy might parasitically use the communication channel of an object that is passed to it as an argument, not using its own communication channel.</p>
<p id="p-0181" num="0197">Recall that looking up a service means fetching the service code for the service from a code server located remotely. The proxy contains a codebase that includes the address(es) (URL(s)) of code server(s) <b>922</b>A which are able to serve up the code for the proxy. Thus, the proxy code is loaded remotely in the client space through its codebase. Through this proxy clients can access the service via the remotely-located service code that is streamed to the client. In contrast with the prior art, looking up a service means fetching the service's proxy from registrar <b>914</b> and the proxy's service code is streamed out to the client from HTTP server <b>920</b>A.</p>
<p id="p-0182" num="0198">C. Non-Local Registration</p>
<p id="p-0183" num="0199">Once a service has registered in a local domain (and acquired an enterprise lease), the service is visible to any local client looking for a service of a similar type of attributes (potential service consumers) listed in domain registrar <b>914</b>A's lookup. Non-local clients have no mechanism for perusing registrar directories that are non-local to themselves (i.e., in a non-local domain). Therefore, registration with a registrar only ensures that a service is visible to local clients. Registering in non-local domains requires that a service list itself with an enterprise level directory that is accessible by all clients in the enterprise. In accordance with an exemplary embodiment of the present invention, a service that wishes to be visible to non-local passes the URL address(es) local registrar(s) to enterprise repository <b>926</b> to make itself visible to clients in non-local domains. The present invention envisions multiple methods of registering with enterprise repository <b>926</b>. One mechanism involves the use of enterprise repository trawler services that trawl all the registrars' lookups for services that indicate the intention to be visible non-locally. The trawler service then returns the registration information, at least the service's attributes, and the registrar's URL address, to the enterprise repository(ies). Another mechanism involves the service itself finding an enterprise repository lookup service. The enterprise repository lookup service then finds an enterprise level repository and registers the service with it by depositing registration information and the registrar's URL address, to the enterprise repository(ies). However, a salient point here with regard to non-local registration is that enterprise repository <b>926</b> lists, at least, the service's attributes and a URL to a local registrar that contains other registration information, such as administrative information and the proxy.</p>
<p id="p-0184" num="0200">Finally, there might be cases when a service is running and yet must become invisible to potential consumers, for instance, when a service is executing processes on all available threads. Therefore, in accordance with another embodiment, registrars <b>914</b> track the amount of services running on threads of another service, especially container services, in the local domain. Once a threshold number of running services is reached, registrar <b>914</b> makes the service unavailable for potential consumers of the service and notifies the enterprise repository, using one of the techniques described above, that the service is no longer available to clients. Of course, this may be run on a separate service that communicates with the registrar directly. Services that need a service with the particular attributes of a service that is unavailable must either find another service with those attributes, wait for the service to free up, or initiate a process to start another instance of the service on another (or possibly the same) VM container.</p>
<p id="p-0185" num="0201">2. Enterprise Leasing</p>
<p id="p-0186" num="0202">Another important facet of the NW service architecture is the notion of enterprise leasing. The leasing mechanism, in general, allows enterprise resources to be reserved on behalf of a requesting client (or any consumer of the resource) in the enterprise. These enterprise resources may include services, databases, enterprise engines (rules, etc.), transaction managers, and communications (publish and subscribe, messaging, event, etc.). With respect to registrars <b>914</b>, the enterprise leasing mechanism allow services <b>910</b> to bind themselves to the registrar's directory and lookup, and then periodically renew their binding to the directories of registrars <b>914</b>. It should be understood that if the client is responsible for registering with all registrars in a domain, it is also responsible for contracting with each registrar for an enterprise lease. The act of enterprise leasing reserves registrar resources to the service that are necessary for the service to make itself visible to service consumers.</p>
<p id="p-0187" num="0203">Any time resources are reserved on behalf of some participant in the enterprise, the reservation of those resources adheres to a leasing convention, sometimes known as time-limited resource allocation. In accordance with one embodiment, the client that requests the reservation of resources may specify a lease duration, a time period over which a client-party can assume the resource reservation will be maintained. The requesting client will be issued a lease object that indicates the amount of time for which the lease has been granted (a duration that might be shorter than that requested). Alternatively, the enterprise lease duration is set at a default time period which is known to all participants in a domain. Once a lease is established with a resource, it is the responsibility of the client reserving the resource to know the lease duration and then to renew the lease, if necessary, prior to the known time period elapsing. Whenever it is necessary to maintain the resource past the term of the original lease, the requesting party should always request a lease renewal before the lease expires. In practice, this might entail requesting several lease renewals from various registrars in the local domain. If the requesting party should fail to renew the lease and it expires, the provider of the resource will do whatever cleanup is appropriate. For registrars <b>914</b>, cleanup includes deleting the service from the lookup table, including removing all attributes, administrative information and proxies (service objects).</p>
<p id="p-0188" num="0204">This technique of enterprise leasing facilitates the implementation of self-healing services. If a process, on whose behalf a resource is leased, should abruptly crash, the lease will eventually expire and the system can de-allocate the resource. Things get cleaned up all by themselves. Moreover, with respect to the registrar, whenever an enterprise lease for service expires, the registrar can notify the self-healing services of the lease expiration. The self-healing services can then attempt to restart the service, either in the same or different container. In certain cases, a process might include several transactions that are dependent on one another. If, as will be discussed below, a transaction has not been completed, the participants will be instructed by transaction manager <b>912</b> to roll back the process to a state prior to the commencement of the transaction, thus the participants are unaffected by a failure during a transaction. However, if several transactions have been successfully accomplished, the results of those transactions might be cached to a storage resource awaiting further processing. If the service hosting the resource fails, or even if a service fails that is crucial to the remaining transactions, it is likely that the cached data will not be recoverable. In the best case, the client can restart the process for the beginning and reestablish the data. In the worst case, the states of the service resources being used have been changed during the previous transactions making restarting the process impossible. The solution is a mirror resource that mirrors inter-process results for a running process. In case of a failure resulting in a lease expiration (service, communications or resource), the client or the client proxy maintains an object for the mirror and when the self-healing services restart the service(s), the client can continue the process with the mirrored interim results.</p>
<p id="p-0189" num="0205">In accordance with one embodiment of the present invention, individual registrars may be responsible for tracking the enterprise leases for all services listed in their respective lookups. In accordance with another embodiment of the present invention, the registrars are responsible for notifying each other through replication and the like (and possibly the enterprise repository) of a lease to a expiring service. Finally, in accordance with still another embodiment, specialized enterprise leasing services track individual leases for services and notify the directories (domain level and possibly enterprise level) whenever an enterprise lease expires. With regard to NW service leases, the main construct is to de-list any service that has failed in any directory that the service is visible to clients (i.e., domain registrars and enterprise repositories).</p>
<p id="p-0190" num="0206">The premise is that all enterprise leases are managed in the local domain that the service is running. Some component(s) in the local domain (i.e., one or all local domain registrars or a leasing service) must recognize that a service's enterprise lease has expired. The service must then be de-listed from local directories that client can access and then re-listed in non-local directories that clients can access. Enterprise leases are managed at the domain level while the resources that they reserve might concern a service that is available to clients across the enterprise. Such is the case when a service registers itself locally, making itself visible to local clients, and then makes itself visible to non-local clients (i.e., clients in non-local domains). Registering in non-local domains requires that a service list itself with enterprise repository <b>926</b> to make itself visible to clients in non -local domains. Therefore, whenever an enterprise lease expires in a local registrar, that service must be de-listed from the local registrar(s) and then the lease expiration must be communicated to enterprise level directories in order to make that service invisible to potential clients. Several mechanisms are useful for this task depending on the functionality of registrar <b>914</b>.</p>
<p id="p-0191" num="0207">The first leasing mechanism involves an individual registrar managing only the enterprise leases for service that it registered. It is expected that self-contained registrar models that operate only at the domain level, such as Jini technology registrars, will utilize this mechanism. In accordance with this mechanism, when a lease expires in a registrar, clean up is automatic and the registrar does not communicate the lease expiration to either other registrars in the local domain or to the enterprise repository. In this case, each registrar is responsible for managing its own leases as eventually the failed service's enterprise leases will expire in all of the registrars that it registered (i.e., local registrars <b>914</b>A<b>1</b>-<b>914</b>AN). However, if the service was listed in enterprise repository(ies) <b>926</b>, it will remain listed until the repository is notified that of the lease expiration. Notifying enterprise repository(ies) <b>926</b> of lease expirations is the job of the enterprise repository scavenger services. Recall that trawler services originally found all services listed in local domain registrars that intended to be visible non-locally and returned the service's attributes and the URL address(es) of the registrar(s) in which the services were listed. Scavengers are the antithesis of the trawler services as these scavenger services de-list services that leases expired in a domain registrar from the enterprise repository(ies). Recall also that a service might be listed in an enterprise repository with one or several URL address(es) for the registrars with which the service is registered. A scavenger daemon is a background service that compares the contents of registrar's lookup table between scheduled checks. Registrar entries for services that have been cleaned up between checks, for whatever reason (i.e., enterprise lease expiration, explicit shutdown, etc.), will be communicated to enterprise repository <b>926</b>. Enterprise repository <b>926</b> can then de-list the service from the registrar's address from its directory. If the service has only one associated URL, then the service is completely de-listed from the enterprise repository's lookup and the service will be rendered invisible to potential consumers.</p>
<p id="p-0192" num="0208">In accordance with another mechanism, each of registrars <b>914</b>A<b>1</b>-<b>914</b>AN communicate lease expirations from their respective directories directly to enterprise repository <b>926</b>. Direct communications between registrar <b>914</b> and enterprise repository <b>926</b> is possible only if registrar <b>914</b> maintains a reference or address for enterprise repository <b>926</b> itself (or possibly for enterprise repository lookup <b>916</b>, which can then be accessed by the registrar). In that case, when a service's lease expires, registrar <b>914</b> communicates the lease expiration to enterprise repository <b>916</b>. Enterprise repository <b>916</b> can then de-list the reference to the registrar from its lookup or, if only one URL address/reference is listed, enterprise repository <b>916</b> can then de-list the service completely as described immediately above.</p>
<p id="p-0193" num="0209">3. Enterprise Level Listing/Lookup</p>
<p id="p-0194" num="0210">Clients seeking services outside their local domain and services wishing to be visible outside their local domain must have a mechanism to utilize a non-local directory. The present invention uses an enterprise repository for global service listing thereby making services visible from outside their local domain. As alluded to above, registrar <b>914</b> may or may not provide clients and consumers with a reference or location information (URL) for enterprise repository <b>926</b>. Certain domain level registrars, notably Jini technology registrars, do not themselves provide multi-tiered domain structures (i.e., a local level and non-local or enterprise level). Those domain level registrars cannot be easily modified themselves, but can be integrated with enterprise-scoped directory services to expand service visibility to enterprise range. Therefore, in accordance with one embodiment of the present invention, a reference to a &#x201c;find&#x201d; service such as enterprise repository lookup service <b>916</b>A, is held in the registrar's lookup. Enterprise repository lookup service <b>916</b>A is then utilized by local clients and service for finding enterprise level directories, and finding or listing service in those directories. In the case of service, enterprise lookup service <b>914</b>A looks up an enterprise repository and then registers the service by listing the service's attributes and the service's registrars' URLs in the enterprise repository. In the case of a global client, enterprise lookup service <b>914</b>A looks up an enterprise repository and finds a service listed in enterprise repository <b>926</b> based on the attributes listed for the service. Enterprise lookup service <b>914</b>A either returns the service's registrars' URLs to the client and the client accesses the registrar for the service proxy, or alternatively enterprise lookup service <b>914</b>A accesses one of the service's registrars directly and causes that registrar to pass the service's proxy to the client.</p>
<p id="p-0195" num="0211">In accordance with an alternative embodiment of the present invention, enterprise repository <b>926</b> is treated like any other service and a reference for enterprise repository <b>926</b> is copied directly into registrars <b>914</b>. In this case, enterprise repository lookup <b>916</b> would check for enterprise repositories starting up or shutting down and list or de-list the repositories accordingly. Newly-launched services, as well as local consumers, can then discover enterprise repository <b>926</b> from the reference in the registrar without having to access a separate lookup service for the address. In addition, once having a reference to the enterprise repository, registrars <b>914</b>A<b>1</b>-<b>914</b>AN can replicate service registration information and lease updates directly to enterprise repository <b>926</b> without the need for trawling and scavenger services.</p>
<p id="p-0196" num="0212">What is novel about this approach to enterprise service lookup is that, by combining multicast-based local service lookup with enterprise-scope directory services, the client can bootstrap its way to finding a service anywhere in the enterprise. This bootstrapping occurs without an a priori knowledge of the IP address, URL, DNS host name or other detailed location information detailing how to connect to the enterprise service directory. Prior approaches to finding enterprise services, such as CORBA naming or RMI Registry, require the client to know, or be able to find, the contact information for the enterprise service directory. Other service location technologies, based upon multicast discovery (notably Jini technology) enable spontaneous discovery of services without such a priori address knowledge, but are limited to local service discovery, unless augmented by additional techniques. The NW multi-stage approach to enterprise service lookup achieves a &#x201c;best of both worlds,&#x201d; allowing spontaneous boot-strapping by the client to find services anywhere in the enterprise.</p>
<p id="p-0197" num="0213">4. Replication</p>
<p id="p-0198" num="0214">Replication between registrars <b>914</b>A<b>1</b>-<b>914</b>AN is unnecessary if services are responsible for discovering all registrars in their respective local domains (e.g., registrars <b>914</b>A<b>1</b>-<b>914</b>AN in local domain A), and if the individual registrars are responsible for their own lease management. Otherwise, the separate registrars' lookups must be reconciled with one another by including one another's updates. The simplest means for rectifying registration and leasing information between registrars is through a replication mechanism. Therefore, in accordance with one embodiment of the present invention, registrars <b>914</b>A<b>1</b>-<b>914</b>AN provide a replicating service for replicating listing changes (i.e., registrations, lease expirations, lease renewals, explicit shutdown or reset, etc.) to each of the other registrars in the domain.</p>
<p id="p-0199" num="0215">As mentioned above, registrar <b>914</b> may have a reference to enterprise repository <b>926</b>. If so, then the enterprise repository could also be updated from the registrar during replication. In that case, domain services <b>910</b> would then be relieved from the responsibility of registering with all of registrars <b>914</b>A<b>1</b>-<b>914</b>AN in the domain, as well as renewing leases with all registrars in the domain. A service merely discovers one registrar in the domain and registers with it. The registrar replicates the registration information throughout the domain and to enterprise repository <b>926</b> if necessary. However, if the registrar known to the client fails or becomes unresponsive to the client, the client must discover and register with another registrar prior to the enterprise lease expiring.</p>
<p id="p-0200" num="0216">Alternatively, the individual services are responsible for replicating service related information throughout the local domain. Services discover all running registrar services in their local domain and then register themselves with each registrar. Additionally, services make and renews enterprise leases with the individual domain registrars. In that case, the client also registers with all newly-launched registrar services in its local domain and, through a process that will be described below, registers with enterprise repository <b>926</b> if the service desires to be visible and usable by non-local clients. In accordance with still another embodiment of the present invention, a series of enterprise repository services are responsible for trawling the registrars <b>914</b> for registrations and promoting any enterprise-visible service registration up to the enterprise level. Enterprise lease expirations are handled by comparing the content of the registrar's lookup between trawls.</p>
<heading id="h-0015" level="1">Enterprise Directory Services</heading>
<p id="p-0201" num="0217">NW services may make themselves visible to clients in their local domain or may intend to the visible to all enterprise clients, whether local or non-local. Enterprise repository <b>926</b> provides a lookup service for clients, but at an enterprise level (non-local) rather than domain level (local) registration provided by domain registrar <b>914</b>. As described above, registering a service outside its local domain is the responsibility of either the service itself, enterprise repository lookup service <b>916</b>A or a series of enterprise registrar services that trawl local registrars <b>914</b> for registrations. Each of these mechanisms promote any service wishing to be visible outside its local domain the means to be enterprise-visible, through registration at the enterprise level.</p>
<p id="p-0202" num="0218">In addition to being a registry, enterprise repository <b>926</b> is a directory for clients needing a service. Enterprise repository <b>926</b> provides a means for non-local clients to access services that are not available in their own domains. Therefore, the lookup for enterprise repository <b>926</b> must include, at a minimum, all attributes for listed services, along with addresses (URL addresses or host names or some other references) for the services' registrars. With that information, a potential consumer can look up a needed service by its attributes and, by using the associated URL, go to one of the service's registrars for a proxy to the service.</p>
<p id="p-0203" num="0219">The enterprise utilizes multiple enterprise repositories <b>926</b> that are strategically located around the enterprise's geographic domain. A potential service consumer might access any of enterprise repositories <b>926</b> for finding a service. Therefore, each of enterprise repositories <b>926</b> must list all running services in the enterprise that wish to be visible to clients in non-local domains (i.e., at the enterprise level). Thus, enterprise repository <b>926</b> must replicate service information received from enterprise registrars with every other enterprise repository in the enterprise.</p>
<p id="p-0204" num="0220">The Lightweight Directory Access Protocol (LDAP) is a protocol used to access directory listings and is supported by web browsers and e-mail programs, and the like, which can query a LDAP-compliant directory. LDAP provides a common method for searching e-mail addresses on the Internet, similar to a global white pages. LDAP is a sibling protocol to HTTP and FTP and uses the Idap:// prefix in its URL, thus familiar to use. LDAP provides good replication around the world and therefore provides the necessary level of replication needed for an enterprise repository. However, the LDAP protocol and directory also have shortcomings which make them unsuitable for use as an enterprise repository in the present invention.</p>
<p id="p-0205" num="0221">It is not possible to support the full range of attributes and lookup required by enterprise registrar <b>914</b> in an LDAP directory as LDAP directories do not support all of the configuration information for a container that is necessary for launching a service in that container. The LDAP directory is not able to store logical domain mappings that are defined along any relevant dimensions (e.g., geography, line-of-business, etc.). This aspect of the present invention will be discussed below with the description of the DataBus service.</p>
<p id="p-0206" num="0222">In an effort to overcome the above shortcomings of the LDAP and its directory, and in accordance with an exemplary embodiment of the present invention, enterprise repository <b>926</b> supports all service attributes that may be used by a client for finding a service. These attributes are available to local clients in registrars <b>914</b>A<b>1</b>-<b>914</b>AN and therefore must be available in enterprise repository <b>926</b> for a client to find a service in a non-local domain. It should be remembered that a client finds a service that it needs by comparing the type and attributes for the services running in the enterprise and are listed in a lookup to the attributes needed by the client. Service lookup is based on type and attributes and not on unique name, and therefore the enterprise repository must support service type and attribute information.</p>
<p id="p-0207" num="0223">Another shortcoming with LDAP is that it was never intended to store database schema. Services that use a resource which must be local must be able to automatically provision that resource. For instance, if a service uses a database locally, it must be able to start with a completely empty database, adding the tables needed on the fly. To do this, database schema information is stored in enterprise repository <b>926</b> by any method, including proprietary. XML-based schemas (Extensible or XML Structure Definitions (XSD)) are popular because they can be created with any XML tools.</p>
<p id="p-0208" num="0224">NW service must be mobile from the point of view of machine-specific configuration information. Configuration information cannot be tied to a specific machine because the service might run anywhere, and configurations cannot be redefine at runtime. It must be available from anywhere in the world, and a service must be able to be launched using configuration information that is not local to the service. To do this, all configuration information is stored in enterprise repository <b>926</b> and replicated throughout the world on other enterprise repositories. Launch scripts access enterprise repository <b>926</b> to get the configuration information and forward the configuration information to VM container <b>910</b>A where the service is launched. Therefore, in accordance with another exemplary embodiment of the present invention, enterprise repository <b>926</b> supports all configuration information needed by a VM container to launch a service and the configuration information needed by the service itself.</p>
<p id="p-0209" num="0225">Recall that a VM container is actually a running NW service that is launched from the operating system and not from within another container. Conceptually, VM container services might be considered as an integral part of the operating environment. Other NW services, such as those that run inside VM containers, must be programmatically launched from a remote location according to the NW conventions. In order to launch a service in a specific container, the administrator must have the configuration information for the VM container that the service will run in, as well as configuration information concerning the service itself. Thus, enterprise repository <b>926</b> contains all configuration information for every VM container service currently running in the enterprise, so an administrator merely accesses the repository for all container configure information. In actuality, when a service is launched in a container, the container is provided with certain configuration information, including the service's codebase. The codebase contains the URLs of the code servers which are able to serve up the service's code. Therefore, when the service is launched, its code is loaded from HTTP servers at a remote location, for instance from HTTP server <b>920</b>A.</p>
<p id="p-0210" num="0226">Finally, the enterprise repository supports logical domain mapping information in accordance with an exemplary embodiment of the present invention. In accordance with the present invention, enterprise data is no longer owned by an application but instead is owned by the enterprise. Enterprise data is, however, stored at various locations around the enterprise in specialized resource servers called &#x201c;entity&#x201d; servers. Separate entities will generally be housed in separate storage servers. Even a given entity is likely to be physically partitioned across many separate storages. Partitions of a given entity are often collocated at a given operations center, but the same entity might alternatively be physically partitioned across geographically distributed sites, for example, by siting one subset of customer data in the U.S. and another in Europe. Logical domains are used to narrow the context of an operation to a scope that is smaller than the entire enterprise. Logical domains are, in a sense, orthogonal to the dimension of entity type or subject area, and thereby cut across different entity boundaries. These could be along geographic lines or along lines of business, or according to some other classification. With the entities being highly partitioned across distributed data stores, the multi-hop finder is used for finding any particular data object of interest. Entity instances can then be found from anywhere in the enterprise, no matter where it is physically located, by a Primary Key (PK). A multi-stage finder strategy allows the navigation to any entity instance from anywhere in the enterprise given its primary key. This strategy, of course, requires that a primary key is mapped onto the partition number where the entity is stored. Mappings from the PKs onto respective partition numbers that uniquely identifies a relevant container where the entity is stored are then stored on the enterprise repository.</p>
<p id="p-0211" num="0227">Also included in each of domains A-N are enterprise repository lookups <b>916</b>A-N, respectively. Enterprise repository lookup <b>916</b> is an alternative embodiment as its functionality may be incorporated directly into each of domain registrars <b>914</b>A<b>1</b>-<b>914</b>AN and is therefore represented in the Figure as a dashed block. As discussed immediately above, the sole function of enterprise repository lookup <b>916</b> is to track the location of at least one enterprise repository <b>926</b> for newly-launched services wishing to be visible outside their local domains, and for clients needing to find a service from outside their local domains. It is the function of the enterprise repositories to track every service running to the enterprise, at least those running services that wish to be visible enterprise-wide, and make that information available, either directly or indirectly, to clients that cannot find a needed service in the client's own domain. Notice that, in accordance with an exemplary embodiment of the present invention, N enterprise repositories are used which tends to prevent the administrative interactions and discovery/registration and find stages from becoming a bottleneck.</p>
<heading id="h-0016" level="1">HTTP Servers</heading>
<p id="p-0212" num="0228">NewWave services are mobile, in other words, the services can be quickly deployed on any machine, anywhere, without human intervention. As such, NW services can be launched on a server without any code specific to the service being pre-installed on the server and without any configuration information being pre-installed on the server. All resources used by the service can be accessed remotely and are not dependent on the resource being present on the local machine. Databases can be created on the fly by a service which creates the necessary database tables from a schema that is likewise remotely loaded. Additionally, NW services can be launched on a server without an administrator logging onto the server to initiate the launch. Re-homing of services is also performed at runtime from one server to another without human intervention.</p>
<p id="p-0213" num="0229">To create this environment, the NW service platform deploys many HyperText Transport Protocol (HTTP) servers in place to serve up code, that is, Java class files and resources. In addition to the NW components described above, a plurality of web servers <b>920</b>A to <b>920</b>D are also located in the enterprise. Each HTTP web server (HTTP Daemon) <b>920</b>A-<b>920</b>C holds a plurality of mobile code <b>922</b>A-<b>922</b>C including, for example, service code <b>922</b>A, application classes <b>922</b>B and vendor code <b>922</b>C. Through administrative APIs, the service supplier indicates the URL address that identifies where which one of servers <b>920</b>A-<b>920</b>C service code <b>922</b> resides, which can be essentially anywhere on the Internet. The API method allows a requestor to start a service executing in the service container, supplying parameters that identify the URL for the code-base of the service code, the fully-qualified class name of the Java object that is the service's root object, and initialization payload object. Other methods are provided to allow a service to be abruptly shut down, allow the service to be gracefully quiesced (requested to stop accepting incoming requests, but carry to completion in-flight requests), and allow one to query whether the service is in a quiescent state. A generic service container service, such as VM container <b>918</b>A loads code <b>922</b> via one of HTTP web servers <b>920</b>A-<b>920</b>C and runs the service in its own thread of control.</p>
<heading id="h-0017" level="1">Transaction Managers</heading>
<p id="p-0214" num="0230">Notice that within each local domain a plurality of transaction managers <b>912</b>A<b>1</b>-<b>912</b>AN are available for creating transactions which are used for the purpose of transacting with host servers. In accordance with an exemplary embodiment of the present invention, transaction managers <b>912</b>A<b>1</b>-<b>912</b>AN are NewWave service and as such discover and register with local registrars <b>914</b>A<b>1</b> as any other service. In an environment in which a function is the collaboration of many services taking action cooperatively, an important ingredient is the notion of a distributed unit-of-work. A unit-of-work is managed by transaction managers <b>912</b>A at the domain level. The NW approach to transaction semantics relies on a transaction that is passed around like a football each time a service request is made. There is no central transaction manager managing the transaction, to be a bottleneck, instead a client finds any transaction manager in the domain and creates a transaction. Finally, resource managers must support bi-directional communications between a transaction manager (TP monitor) and resource managers such as eXtended transActions (XA) for providing two-phase commit to persistence.</p>
<p id="p-0215" num="0231">The distributed nature of transaction managers <b>912</b>A is facilitated by the highly-distributed world of the NW services. Any service, running anywhere, needs only to find a transaction manager running close by. If load is high, up to N transaction managers may be deployed across a domain thereby allowing highly-distributed services to gain access to a transaction manager and for scalability&#x2014;as load increases the transaction manager does not become a bottleneck. In accordance with another exemplary embodiment of the present invention, all transactions have a lease associated with them, similar to the NW services described above. A transaction has a predetermined time-to-live. Transaction manager <b>912</b> issues enterprise leases on newly-created transactions in much the same manner as registrar <b>914</b> issues enterprise leases on services. However, the participants in the transaction can renew the lease if the activity takes longer than expected, but absent a renewal, an uncommitted transaction will expire and roll back. Any NW service which maintains state about other services or clients should implement a leasing scheme to keep its state clean.</p>
<p id="p-0216" num="0232">Because of the use of Jini transactions, resources used in the GIB that are expected to participate in transactions must be managed by resource managers exposing a two-phase commit interface, such as XA or the Jini transaction participant interface. A typical resource manager is a database management system, for example, Oracle or Versant. However, recall that in <figref idref="DRAWINGS">FIG. 8</figref> enterprise network elements might be NW-enabled and thus access NW services on GIB <b>802</b> by incorporating NW distributive intelligence services <b>824</b> onboard. In those cases, network elements <b>824</b> plug directly into GIB <b>802</b>. In those cases, the network elements implement the relevant XA interfaces XAResource and XAConnection so that it could participate in the transaction as part of a transaction.</p>
<heading id="h-0018" level="1">NewWave Functionality</heading>
<p id="p-0217" num="0233">In the NewWave environment, an application is a collection of services operating in concert with each other. These NW services may or may not know of each other, but their collective action makes up the functional whole that is an application. To work as an application, NW services &#x201c;find,&#x201d; communicate and function with one another.</p>
<p id="p-0218" num="0234">1. Find</p>
<p id="p-0219" num="0235">NW services can be found, either locally (within a multicast domain), within a non-local domain, or anywhere in the enterprise. Services register in lookups by their respective attributes and interfaces, and thus they are found by whatever attributes with which they service registers. Locally, a service registers with all domain registrars in the service's local domain. Non-locally, a service that wishes to be visible to clients from outside the local domain registers with an enterprise level registration and lookup service, the enterprise repository. The transition from local level to enterprise level visibility is bridged by an enterprise repository lookup that provides a reference to an enterprise repository for services and clients in a local domain.</p>
<p id="p-0220" num="0236">2. Communication</p>
<p id="p-0221" num="0237">NewWave services communicate differently, depending on the type of service and the level of coupling between services desired. A distributed intelligent agent for network elements, for instance, is normally highly de-coupled, depending on little and thus able to continue processing regardless of the state of other NW services. It generally relies on highly, de-coupled forms of communication. The following different forms of communication are supported in the GIB:</p>
<p id="p-0222" num="0238">Tightly coupled: The service implements a remote interface with exposed methods. Clients find the service and make specific requests of it by calling methods on the interface. The coupling is reduced by registrar lookup, thus still a code-level dependency between client and service.</p>
<p id="p-0223" num="0239">Two-way tight coupling: The client opens a session of some sort with the service. The service maintains state about the client. There is then a runtime dependency that exceeds a single request.</p>
<p id="p-0224" num="0240">Moderate coupling, event notification: A client registers with a service to be notified when certain events occur. There is a direct runtime dependency, as the service will hold a reference to the client (listener). However, the reference will be generic. The service will not know the actual interface of the client beyond the listening interface. This minimizes compile-time dependency, but still has runtime dependency. This essentially is a session between client and service, the service could be blocked while the notification is sent, and transaction semantics must be handled carefully. This is good is some circumstances to reduce messaging traffic by having notifications directly from the source to the listener with no intermediary.</p>
<p id="p-0225" num="0241">Loosely coupled, peer-to-peer: Messages are sent through an intermediary, but directed to a particular destination by name. In this case, client and service know about each other, but only via a destination name as they can never directly access each other.</p>
<p id="p-0226" num="0242">Loosely coupled, publish-subscribe: Messages are sent to a topic queue and are delivered to destinations that have issued subscriptions for particular kinds of messages. The sender and receiver of the message are never aware of each other at all. The only coupling is on message topic and message attributes.</p>
<p id="p-0227" num="0243">Loosely coupled, XML: Messages are sent via publish-subscribe or peer-to-peer, but contains only XML, no objects. This removes any class-level dependencies. This is good when unrelated components are involved.</p>
<p id="p-0228" num="0244">3. Interactions</p>
<heading id="h-0019" level="1">Tightly Coupled Interactions</heading>
<p id="p-0229" num="0245">In a tightly-coupled interaction, a client or service acting as a client finds a target service via a registrar lookup or some other means, obtains a proxy to the target service, and calls methods on the proxy. A proxy, in accordance with the present invention, may communicate to the target service by any means. One exemplary method is Java Remote Method Invocation (RMI). The proxy communicates back to its service via direct sockets, IIOP, HTTP, JMS messages or any other middleware. However, the communication method selected for these transactions must be able to be reasonably effected from the client meaning that it cannot rely on the installation of any runtime component on the client. Code is remotely loaded from the codebase, but must be limited in size. It can be reasonably assumed that sockets, IIOP and HTTP would be generally available. RMI provides remote loading of arguments to the method call via the codebase.</p>
<heading id="h-0020" level="1">Moderately Coupled Interactions using an Event Model</heading>
<p id="p-0230" num="0246">All services must support a standardized event model, the Jini event model or the like. NW services accept requests to receive notifications from listeners and are used for certain administrative events. However, a service can use this model to extend the way in which it interacts with all clients. In this model, NW services maintain event notification registrations, and directly call each listener when an event occurs matching the event registration. Each listener must first find a service and then makes a registration. All event registrations are maintained and the service accepts lease renewals and cleans out registrations when their lease expires. Services have the proxies to the listeners loaded in their respective virtual machines, requiring the remote loading of all required classes and the services will block waiting on a reply from each listener. This mode of interaction is moderately coupled because the interaction is through standard listener interfaces, rather than specific service interfaces, but it is more coupled than the loosely coupled approaches below. However, it is appropriate for some types of interactions as it is faster than the more loosely coupled approaches and useful when the client must find the service anyway.</p>
<heading id="h-0021" level="1">Loosely Coupled Interactions using Publish-Subscribe or Peer-to-Peer Messaging</heading>
<p id="p-0231" num="0247">Messaging involves the sending of peer-to-peer and publish-subscribe messages through an intermediary. A variety of messaging services are available, including the Java Message Service (JMS) specification as the interface for messaging (available from Sun Microsystem Corporation). A client could publish a message to a topic queue or send a message to a logical destination. Subscribers would receive a publication if their subscription matched the message published. Loosely coupled interactions can be made even looser by using XML as the primary message format. JMS messages can include objects, but this adds a code-level dependency between sender and receiver; however, XML schemas or XML document-type definitions are not code level dependent.</p>
<heading id="h-0022" level="1">Launching and Registering a Service</heading>
<p id="p-0232" num="0248">In enterprise computing, the platform provider, the supplier of services (programs) and the consumers of services are often all the same corporate entity, residing within the same enterprise. The NewWave infrastructure fills the gap left by other paradigms by providing a dynamic service deployment architecture, that is not domain bound. Essentially, a service provider/supplier launches its services onto host servers at their own enterprise facilities, or at a third-party facility, through the exercising of administrative APIs and/or an administrative console application. This model of dynamic service deployment onto awaiting facilities is radically different from more traditional hosting arrangements that might involve extensive business negotiations. Thus, a service provider deploying its services onto live hosts out on the network amounts to API calls&#x2014;not phone calls to support personnel. This model of service deployment is termed &#x201c;frictionless&#x201d; because of its ease of interaction. It allows service providers/suppliers to get tomorrow's services running in the field in Internet time. The concept of frictionless, dynamic deployment of services onto the network is all enabled by the constructs of code-mobility. As discussed above, code-mobility allows NewWave systems (HTTP servers) to move code out to consumers of services. By the same token, this mobility allows developers of services to also dynamically load the code that implements their services onto these third party host servers. This is very much analogous to the way that Java applets are streamed out to a user's PC web browser and run in a virtual machine process that serves as a sort of software container for applet code. The present invention service deployment platform simply applies this software container concept to backend-hosted services. Every server in a hosting facility runs at least one of generic container processes (VM container) into which service deployers inject the code for their services. The actual implementation code gets served up from any ordinary web server (http daemon) located anywhere in the Internet.</p>
<p id="p-0233" num="0249">Through administrative APIs, the service supplier indicates the URL that identifies where the service code resides out there somewhere on the Internet. The generic service container process loads the code via the HTTP server and runs the service in its own thread of control. <figref idref="DRAWINGS">FIGS. 10 and 11</figref> depict launching and registering service in a local domain or the enterprise, as and well as looking up a service that is running either locally or non-locally, and then interacting with the service in accordance with an exemplary embodiment of the present invention. <figref idref="DRAWINGS">FIGS. 10A-10C</figref> at diagrams that depict the logical flow of the processes depict on corresponding flowcharts in <figref idref="DRAWINGS">FIGS. 11A-11C</figref>.</p>
<p id="p-0234" num="0250"><figref idref="DRAWINGS">FIGS. 10A and 11A</figref> are a diagram and flowchart, respectively, depicting a process for launching and registering service in a global ecosystem of interrelated services in accordance with an exemplary embodiment of the present invention. The process begins with an administrator <b>1004</b> searching enterprise repository <b>1026</b> for suitable VM container to run a service (step <b>1102</b>). Recall that a VM container is merely a service and, as such, can be defined by name or as a set of attributes under which it is registered. While some NW services defer enterprise visibility, it is expected that due to the unique nature of VM container processes, as compared to most other NW services, containers will be registered, and thus visible, at the enterprise level for ease of interaction with service providers that need specific VM container attributes. For example, many services, perhaps most, run perfectly well in a generic VM container. Others, however, need a particular resource to be local to the service as it runs (e.g., as database, rules engine, etc.) The administrator can, therefore, analyze all enterprise VM container services for necessary attribute and select only the VM container(s) that have attributes matching the service's requirements. Once administrator <b>1104</b> has selected a group of candidate VM containers, the administrator can further differentiate between specific VM containers by logical location based on the URL address of the containers matching the requirements. By making service containers enterprise-class services, one can centralize administration in an enterprise, while nonetheless making service deployment highly distributed.</p>
<p id="p-0235" num="0251">Once an appropriate VM container is selected, administrator <b>1004</b> launches the service in the selected VM container by passing a reference (URL address or host name) for the HTTP server holding the service code to the VM container (step <b>1104</b>). With URL, the VM container fetches the service code from the HTTP server at runtime (step <b>1106</b>) and the service begins running in the container (step <b>1108</b>).</p>
<p id="p-0236" num="0252">Once running, service <b>1010</b>A must make itself visible to potential consumers of the service, whether the consumers are located locally or non-locally to the container. In accordance with an exemplary embodiment of the present invention, NewWave uses multicast packets to allow service provider processes and consumer processes to spontaneously discover lookup servers within multicast radius, thus bootstrapping the process of registering and finding services. Local registration involves the service broadcasting of a message to all registrars in the domain and then registering with them. Enterprise registration involves service <b>1000</b>A using a &#x201c;Find&#x201d; service to find an enterprise level directory and then registering there. Local registration begins with registrar discovery, or service <b>1010</b>A broadcasts multicast &#x201c;ping&#x201d; into the multicast radius that defines the local domain, domain <b>1002</b>A (step <b>1110</b>). All domain registrars that are &#x201c;listening&#x201d; in domain <b>1102</b>A will return a &#x201c;pong&#x201d; with their address information, usually URL addresses or host names (step <b>1112</b>). As depicted in the Figure, only domain registrar <b>1014</b>A is present, but any quantity of registrars could actually be present in accordance with the present invention.</p>
<p id="p-0237" num="0253">With the addresses of local domain registrar <b>1014</b>A, service <b>1010</b>A can register locally with registrar <b>1014</b>A. Service <b>1010</b>A registers by passing information to registrar <b>1014</b>A that makes service <b>1010</b>A visible to clients looking for a service in domain <b>1002</b>A and information that facilitates clients' interaction with service <b>1010</b>A step <b>1114</b>. Service <b>1010</b>A registers with local domain registrar <b>1014</b>A by passing registration information to registrar <b>1014</b>A, including service attributes (name(s), domain-type information and implementation interfaces). The registration information may also include administrative information such as display icons or user interface objects for an administrator to use. Finally, service <b>1010</b>A must pass a serialized proxy object (Obj. in the Figure) to registrar <b>1014</b>A which will be passed to clients looking up the service. The proxy includes code and a codebase for fetching service code for implementing the proxy. The service code is remotely located in an HTTP server, server <b>1020</b> for example, and the codebase contains an address for that server. At this point, service <b>1010</b>A is registered locally with registrar <b>1014</b>A making it visible to any clients looking in registrar <b>1014</b>A.</p>
<p id="p-0238" num="0254">However, service <b>1010</b>A is not visible clients located in non-local domains. To be visible to more than just local clients, service <b>1010</b>A must register at the enterprise level in an appropriate enterprise directory&#x2014;enterprise repository <b>1026</b> is such a directory. However, hopping from a local level domain to an enterprise level has been a shortcoming of the prior art that heretofore has been insurmountable. Services can discover only those services that are within their own multicast domain because the multicast message is not transmitted beyond the multicast radius. Therefore, another mechanism is necessary for &#x201c;finding&#x201d; non-local directories in order to make service <b>1010</b>A visible to clients which look up service in them. In accordance with one embodiment of the present invention, a service wishing to be registered at the enterprise level utilizes a &#x201c;find&#x201d; service to find enterprise level components, such as enterprise repository <b>1026</b>, that are not in their multicast domain.</p>
<p id="p-0239" num="0255">The &#x201c;find&#x201d; service is represented in the Figure as enterprise repository <b>1016</b>A and as a service running in domain <b>1002</b>A and it is listed in domain registrar <b>1014</b>A. Therefore, a service wishing to be visible to a client located outside its local domain need only look up enterprise repository lookup service <b>1016</b>A while registering with the registrar (step <b>1116</b>). As will be described below, service <b>1010</b>A retrieves a proxy from the registrar for interacting with enterprise repository lookup service <b>1016</b>A (not shown in the Figure). Service <b>110</b>A then requests enterprise repository lookup service <b>1016</b>A to service &#x201c;finds&#x201d; enterprise repository <b>1026</b> and register it with the repository (step <b>1118</b>). Service <b>1010</b>A passes its registration information, usually limited to its service attributes and also the address of all registrars with which it is registered, registrar <b>1014</b>A (URLs) to enterprise repository lookup service <b>1016</b>A. Enterprise repository lookup service <b>1016</b>A then finds an enterprise repository in the current example enterprise repository <b>1026</b> and registers a newly-launched service with that enterprise repository. Service <b>1010</b>A is now running in domain <b>1002</b>A and registered for clients that may be located in local domain <b>1002</b>A or any non-local domain.</p>
<heading id="h-0023" level="1">Finding a Local Service</heading>
<p id="p-0240" num="0256">The reciprocal of registering a service in the NewWave environment is finding a running service. <figref idref="DRAWINGS">FIGS. 10B and 11B</figref> are a diagram and flowchart, respectively, depicting a process for finding and implementing a local service in a global ecosystem of interrelated services in accordance with an exemplary embodiment of the present invention. Recall that the term &#x201c;client&#x201d; is used herein to represent any consumer or user of a service, notably, many clients or other services, especially another service that builds upon more primitive services. A client may also be any application, software module or tool that utilizes the processes of a service, or alternatively, a client might refer to an end-user in the enterprise. A client perceives a need to invoke a process, but in accordance with an exemplary embodiment of the present invention, the client need not identify the service by its interface, as is common in the prior art. Instead, client <b>1008</b> might identify the service process by some service attribute that is important to the client.</p>
<p id="p-0241" num="0257">Therefore, in accordance with an exemplary embodiment of the present invention, a client need not know the identity of the service it wishes to invoke or even where the service is running in the enterprise. Client <b>1008</b> uses the identical multicasting processes described above with respect to <figref idref="DRAWINGS">FIGS. 10A and 11A</figref> to find registrar <b>1014</b>A (not shown). Thus, a NewWave client may come up cold and discover registrars and services in its local domain. The lookup process begins with client <b>1008</b> perusing one of the local domain registrar, here domain registrar <b>1014</b>A, for a needed service (step <b>1122</b>). Client <b>1008</b> searches local domain registrar <b>1014</b>A's lookup for services with service attributes matching those needed. Once a service is identified, client <b>1008</b> has no information whatsoever about the running service (e.g., its location, its configuration information, implementing code). Therefore, client <b>1008</b> retrieves, and registrar <b>1014</b>A returns, a proxy or object (Obj. in the Figure) to use for interacting with the selected service, service <b>1010</b>A (step <b>1124</b>). The code for the proxy is loaded remotely in the client space through its codebase. Thus, once implemented in the client, the proxy fetches service code at runtime from HTTP server <b>1020</b> using URL in the proxy's codebase (step <b>1126</b>). This code in invisible to client <b>1008</b>. Client <b>1008</b> uses a series of APIs to interact with the proxy, but the client actually intends to interact with a remote service (step <b>1128</b>). This does not always happen, even though the client <b>1008</b> &#x201c;thinks&#x201d; it is communicating with the service. In fact, several interactions are possible and each one is hidden from client <b>1008</b>. Client <b>1008</b> might actually be communicating client requests to remote service <b>1010</b>A as its thinks. Alternatively, client <b>1008</b> may be interacting only with the remotely-loaded service code and the code is locally performing logic to process the client requests in the client's own space. Finally, client <b>1008</b> may be communicating client requests to multiple remote services, via the service code, which may or may not be the service selected by client <b>1008</b>. This feature allows a client's requests to be processed anywhere and in any manner that is convenient to the enterprise. For example, since the client did not identify the service by a specific interface, the service may have been provided by any vendor that produces service with attributes that matches the client's needs. Alternatively, while the attributes listed with the registrar's lookup might remain constant, throughout the lifecycle of the service its functionally or resource requirements might change (i.e., a service that utilized a particular OEM's resource might switch to another's resource). Loading and scope parameters can be managed by hooks implemented in the service code that interact with different services based on dynamic parameters, such as the time of day, day of week, frequency of use, bus loading, service loading, history, complexity of the application running the service.</p>
<heading id="h-0024" level="1">Finding a Non-Local Service</heading>
<p id="p-0242" num="0258">One shortcoming of the prior art is that instances of services, other than infrastructure services, must be running in every domain that a consumer for that service is located. If not, the consumer will not be able to provide some aspect of its functionality. The other alternative is to eliminate logical domain demarcations and make all services available to all consumers in the enterprise. However, here bandwidth and directory listing become an impediment to efficiency. The present invention eliminates the need for either unnecessary duplication of service or eliminating logical domains by providing a mechanism for services and service consumers to see each other outside their own local domains. This has been referred to above as the &#x201c;two-hop&#x201d; process, a local hop, and a non-local or enterprise hop. <figref idref="DRAWINGS">FIGS. 10B and 11B</figref> illustrate a mechanism for finding and implementing a service that is local (the local hop or first hop) while <figref idref="DRAWINGS">FIGS. 10C and 11C</figref> illustrate a mechanism for finding and implementing a service that is not local (referred to alternatively as the non-local, enterprise or second hop) in a global ecosystem of interrelated services in accordance with an exemplary embodiment of the present invention. With respect to <figref idref="DRAWINGS">FIGS. 10C and 11C</figref>, service <b>1010</b>A registers itself with domain registrar <b>1014</b>A in exactly the same manner as was described with respect to <figref idref="DRAWINGS">FIGS. 10A and 11A</figref>, above. However, with respect to <figref idref="DRAWINGS">FIG. 10C</figref>, client <b>1006</b>, located in domain <b>1002</b>B, must find and implement a service. The process begins with client <b>1006</b> searching local domain registrar <b>1014</b>B's lookup for a service that matches service attributes needed to accomplish some task (step <b>1132</b>). However, rather than finding a service, local domain registrar <b>1014</b>B returns a fault. In practice, whenever a service cannot be located in a client's local domain registrar, either the registrar or the client initiate a &#x201c;find&#x201d; service that will ultimately lead to finding a non-local service. However, client <b>1006</b> cannot see outside its local domain, so client <b>1006</b> must implement a local service for finding an enterprise level directory; that service is enterprise repository lookup <b>1016</b>B. Client <b>1006</b> looks up enterprise repository lookup service <b>1016</b>B in domain registrar <b>1014</b>B's lookup and returns a proxy for enterprise repository lookup <b>1016</b>B that is used to interact with the service (step <b>1134</b>). Client <b>1006</b> then interacts with enterprise repository lookup <b>1016</b>B, through its proxy, for finding the service it needs somewhere in the enterprise (step <b>1136</b>).</p>
<p id="p-0243" num="0259">Here, enterprise repository lookup <b>1016</b>B searches for an enterprise repository from which to access its lookup and find a service (step <b>1138</b>). Enterprise repository lookup <b>1016</b>B finds enterprise repository <b>1026</b>, and then accesses its lookup for a service that matches the service attributes required by client <b>1006</b>. Upon finding a matching service, enterprise repository lookup <b>1016</b>B returns an address (URL address, host name or some other reference) for the non-local domain registrar with which the service is registered, domain registrar <b>1014</b>A. Next, enterprise repository lookup <b>1016</b>B attempts to find a service that matches the requirements of client <b>1006</b> in domain registrar <b>1014</b>A's lookup (step <b>1140</b>). Domain registrar <b>1014</b>A returns a proxy object (Obj. in the Figure) for matching service <b>1010</b>A to client <b>1006</b> (either directly or via enterprise repository lookup <b>1016</b>B) (step <b>1142</b>). The code for the proxy is loaded remotely in the client space through the proxy's codebase. Thus, once implemented in the client, the proxy fetches service code at runtime from HTTP server <b>1020</b> using URL in the proxy's codebase (step <b>1144</b>). Again, this code in invisible to client <b>1006</b>, and although client <b>1006</b> intends to interact with remote service <b>10101</b>A using APIs for the service, the code might redirect or locally process the calls (step <b>1146</b>). Thus, while client <b>1006</b> might intend to communicate with service <b>1010</b>A, the actual computations may be performed by logic in the service code locally, in the client's own space. Alternatively, client <b>1006</b>'s request might be processed by remote service <b>1010</b>A, or by some combination of remote services such as service <b>1010</b>B (that is actually local to the client).</p>
<heading id="h-0025" level="1">Registrar Functionality</heading>
<p id="p-0244" num="0260"><figref idref="DRAWINGS">FIGS. 12A-12C</figref> are flowcharts depicting the methodology implemented in registrar <b>914</b> for providing the four primary NW functions in accordance with exemplary embodiments of the present invention. It should be understood that these services (domain level listing/lookup for services; resource leasing; enterprise level service listing/lookup; and replication) are available or necessary for each embodiment of to the present invention. Because some of theses service are performed simultaneously, the four registrar services are illustrated in three separate flowcharts. <figref idref="DRAWINGS">FIG. 12A</figref> is a flowchart depicting the process employed by the registrar for registering services in accordance with an exemplary embodiment of the present invention. <figref idref="DRAWINGS">FIG. 12B</figref> is a flowchart depicting the process for enterprise leasing in accordance with an exemplary embodiment of the present invention, while <figref idref="DRAWINGS">FIG. 12C</figref> is a flowchart depicting a process employed by the registrar for looking up a service in accordance with an exemplary embodiment of the present invention.</p>
<p id="p-0245" num="0261">The service registration process begins with the registrar in a listening state, waiting for messages to arrive on the network. The signals may be generated by a service (including a container service) or a client (any consumer or user of a service) located in a local or non-local domain or in another registrar in the local domain, thus allowing for many possible permutations for incoming signals. With regard to the exemplary process, a ping( ) is handled first. If, at step <b>1202</b>, the registrar receives a ping( ), the registrar immediately returns (pong( )) its location to the service initiated the ping( ) (step <b>1204</b>). The registrar then waits for the service to return its registration information. If, at step <b>1202</b>, no ping( ) is received, the process flows to step <b>1206</b> where a check is made to determine if registration information has been received by the registrar. If the information has not been received by the registrar, the process iteratively reverts to step <b>1202</b> until registration information is received. Here it should be understood that the registrar is merely in a listening state, listening for events and messages that it must process. [Checks <b>1202</b> and <b>1206</b> merely represent an iterative process used to simultaneously listen for both a ping( ) and registration information from a variety of services in the domain.]</p>
<p id="p-0246" num="0262">Returning to step <b>1206</b>, if the registrar receives registration information, the process continues to step <b>1208</b> where the registrar receives registration information about the service, which may include attributes for helping clients find services such as one or more name, domain-type information, implementation interfaces (i.e., what the service does for a client or a description of the service's functions). Additionally, the registration information may contain administrative information for manually administering the service, such as a display icon or a user interface object. Finally, the registration information may contain a serialized proxy object. It is possible for there to be cases where a service registers with only a URL or host name, but as a practical matter, most clients will need a proxy to interact with the service. Clients access the service with the proxy. The proxy could then contain any code which could be executed in a client environment before, after or instead of forwarding the request. The type of proxy, a smart proxy, may invoke services and functionality unknown to the clients. For example, the proxy might call more than one service for concurrently executing the client's request. In another example, the proxy might call for services executing ancillary functions unrelated to the client's service request (e.g., a client might intend to execute a network management function (profit center) and proxy calls billing services (cost center) to perform client and billing procedures that are ancillary to the client's request). The proxy also contains a codebase which is, at least, the URL address of an HTTP server which contains the implementation code for the proxy. That URL is used when the proxy is passed to a client to load the implementation code to the client, unbeknownst to the client.</p>
<p id="p-0247" num="0263">Regardless of the type of proxy, the registrar may check the lookup for an instance of the service (step <b>1210</b>). In accordance with one embodiment of the present invention, the domain registrar will receive registration information only from services wishing to register themselves in the registrar's domain. However, in accordance with other embodiments, the domain registrar will receive registration information from another registrar in the local domain through a domain level replication process. The present flowchart envisions either eventuality. Here it should be understood the domain registrar of the present invention is extremely flexible. A domain registrar may communicate changes in its table to any service that is listening, for instance at the local domain to other registrar, re-start services, trawling services, scavenger daemons, enterprise repository lookup services and find services.</p>
<p id="p-0248" num="0264">If the registration information is from another registrar in the local domain, it might be possible for a record of the service to already exist in the lookup table. This record might exist due to a previous replication from another third registrar, or from a re-start and re-registration where the service was not properly communicated to all of the other registrars throughout the local domain. While either of these cases is unlikely, it is good practice to continually monitor the registrar's lookup table for duplicative registrations. Therefore, if a copy of the service's registration information exists in the registrar's lookup table, it should be assumed that the service was re-started and the enterprise lease for the service should then be extended (step <b>1224</b>). However, with regard to enterprise leasing, it is possible for enterprise leases to be managed independently at each registrar in the local domain (assuming that more than one instance of a registrar exists), or managed at one registrar, typically the registrar that initially registered the service. That registrar would be expected to communicate the lookup information to all registrars throughout the domain. Thus, if the service registration information received by the current registrar is from another registrar in the domain and that registrar manages that service's enterprise lease, the process would then end without renewing the service's lease.</p>
<p id="p-0249" num="0265">Returning to step <b>1210</b>, if the service is not listed in the registrar's lookup, the registrar makes an entry for the service in the lookup table (step <b>1212</b>). Typically, attribute information would be listed in the registrar's lookup table for easy access when looking up services corresponding to clients' requests. Administrative information and the serialized proxy object may be stored separate from the attribute information in another location, but referenced from the attribute information for quick retrieval after a match has been found. Next, the registrar determines whether or not the registration information has been received directly from a newly-launched service or another registrar (step <b>1214</b>). If the registration information is not directly from the service, the registrar then creates an enterprise lease for the newly-registered service, assuming that each registrar in the domain manages its own leases (step <b>1224</b>). The process then ends.</p>
<p id="p-0250" num="0266">Returning to step <b>1214</b>, if the information has been received from the service directly, it is the responsibility of the registrar to replicate the information in each of the registrars in the domain. In that case, the registrar must update the enterprise repository with registration information from each service wishing to be locally visible in only the local domain (step <b>1216</b>). Next, the registrar determines whether the service intends to be visible in only the local domain (step <b>1218</b>). If so, the process reverts to step <b>1224</b> where the registrar creates an enterprise lease for the service and then the process ends. Alternatively, at step <b>1218</b>, if the service intends to be non-locally visible (i.e., in the enterprise, outside the local domain), the registrar passes the registration information to the enterprise repository. As discussed above, finding the location of the enterprise registrar may be performed internally, inside the registrar, or externally via an enterprise repository lookup. If registering with the enterprise repository is handled internally, the registrar merely looks up the enterprise repository's location (step <b>1220</b>) and passes the device's registration information to the repository step (step <b>1222</b>). Otherwise, the registrar looks up the location of the enterprise repository lookup and passes the device's registration information to the enterprise repository lookup (step <b>1220</b>), which in turn passes the device's registration information to the repository (step <b>1222</b>).</p>
<p id="p-0251" num="0267">Two things should be made clear here. First, it is apparent that creating an entirely independent lookup just for finding the enterprise repository is counterproductive. That is normally true except in the present case where technology exists to perform some of the registrar's functionality that is usable, but not easily adapted, from a local domain-type environment to an enterprise consisting of multiple domains. One such technology is Jini technology that performs certain registrar functions at a domain level, but is not suited to multi-domain functionality. Secondly, enterprise registration might not be synonymous with domain registration. In some situations it might be acceptable to merely pass the location of the registrar to the enterprise repository. Whenever a client cannot find a service in its own domain and hops to the enterprise repository, the client can pick up the host name, or URL, for a registrar in the service's domain. From there the client can retrieve the serialized proxy in the same manner as if the client had retrieved it from a local registrar. Moreover, it might be that all services have an entry in the enterprise repository, even though some are not visible in non-local domains because it is expected that administrative functions will almost always be performed at the enterprise level. Administrators can then access administrative information, icons, interface and other service tools for services that are not visible in the non-local domains (enterprise) which is especially important for launching a service. Since containers are service, there might be a case where the intent is not to be visible in the enterprise, but be available for administrative use (i.e., launching a new service).</p>
<p id="p-0252" num="0268">Regardless of whether or not an enterprise repository lookup is used, the registrar must create a lease for the newly-started service (step <b>1224</b>) prior to ending the process.</p>
<p id="p-0253" num="0269">Regarding <figref idref="DRAWINGS">FIG. 12B</figref>, a flowchart depicts a process for managing enterprise leases in accordance with a preferred embodiment of the present invention. Every service running in any of the enterprise's domains must have a lease. When the registrar accepts a service registration, it issues a lease for the registration. The service must periodically renew the lease or the registrar will dispose of the registration, thus allowing the registrar to remain stable. If a service goes away or is inoperative, the lease will not be renewed and the registrar will eventually clean up its tables. The principle of lease management is a fundamental principle of the NW infrastructure and is used throughout the GIB. Any GIB service which maintains state about other services or clients should implement a leasing scheme to keep its state clean. Services typically run a background thread that periodically wakes up to perform the lease-renewal chore. A service remains registered only so long as it keeps expressing interest via lease renewal. The renewal is passed, if necessary, from the registering registrar to other local registrars or to the enterprise repository. However, the task of lease maintenance might be left to the registering registrar and renewals are replicated around the enterprise.</p>
<p id="p-0254" num="0270">Lease maintenance, as depicted in the flowchart, is a continuous process that always reverts to an enterprise lease monitoring state (step <b>1230</b>). Leases remain valid for a predetermined amount of time. That duration of time may be fixed or specifiable by the service making the enterprise lease. Therefore, the registrar must have a sense of time from which to make expiration determinations, for instance, from outputs from the internal CPU oscillator clock. Whenever a lease is created, a counter may be initialized that, based on the duration time of the lease, counts down to a lease expiration event. The lease expiration event may be circumvented by the service renewing the enterprise lease anytime prior to an expiration event. Therefore, the registrar is cognizant of lease creation or extension events and lease expiration events. If, at step <b>1232</b>, the registrar detects an enterprise leasing or renewal event, the registrar must first identify the service associated with the event (step <b>1234</b>). Next, the registrar creates or extends the service's enterprise lease by postponing the lease expiration event for a period of time equal to the preset lease duration (step <b>1238</b>). The process may end here or in accordance with another exemplary embodiment of the present invention, the registrar may determine if the container running the service is being fully utilized (i.e., the threshold amount of threads are currently being processed (step <b>1240</b>)). Recall that generic service containers are multi-threaded processes allowing many separate service instances to be run in their own threads. However, if all of the container's threads are used by services, the container cannot support another service and a load error will occur. A threshold number of services may be defined for a container and, whenever the number of services being run exceeds that threshold, the container service simply de-lists itself until some services' leases expire. Thus, if the threshold is not exceeded by the addition of the new enterprise lease, the process reverts to step <b>1230</b> where the registrar continues to monitor the enterprise leases. Conversely, if the threshold number of services are now being run in the container, the container can no longer support new services, so the registrar notifies the enterprise repository to make the container service invisible to potential clients (step <b>1242</b>). It is expected that, in most instances, container services are discovered at the enterprise level most likely by an administrator; thus, the registration must be hidden at least the enterprise level. However, it is also possible that the container service may be discovered at the local domain level so each registration instance of the container service in the local registrars might also be hidden from view, depending upon the discovery process for containers. Once the fully-loaded container service is hidden, the process reverts to step <b>1230</b>.</p>
<p id="p-0255" num="0271">The second type event being watched for by the registrar is a lease expiration event (step <b>1244</b>). If one is detected, the registrar identifies the service whose enterprise lease expired (step <b>1246</b>). Next, in accordance with an alternative exemplary embodiment of the present invention, the registrar determines if the container service is running at threshold capacity (step <b>1248</b>). If so, the registrar notifies the enterprise repository to unhide the container service and make the container visible to enterprise clients looking for a service (step <b>1250</b>). At this point, the registrar's listing of the container service must also be made visible if the container service was hidden in the registrar's lookup. However, the listing of a service whose lease expired must be removed from the lookup (step <b>1252</b>) and that removal be replicated to the other registrars in the local domain (step <b>1254</b>). Finally, the registrar must notify the enterprise repository that the service's lease expired and the service's registration information be removed from the enterprise repository (step <b>1256</b>). The process then reverts to step <b>1230</b>.</p>
<p id="p-0256" num="0272">Regarding <figref idref="DRAWINGS">FIG. 12C</figref>, a flowchart depicts a process employed by a registrar in response to a &#x201c;find&#x201d; request from a client in accordance with a preferred embodiment of the present invention. The present invention allows a service to register itself with a local registrar by providing service attributes in the registration to make it easier for clients to find and interact with the service. These attributes may include one or more names, domain-type information and/or the interfaces which the service implements. &#x201c;Finding&#x201d; a service is potentially a two-hop process for a client, a local hop; and if a suitable service is not found in the local domain, a non-local hop. Registrars store all attribute information for each service running in their respective local domain for finding a service, and a proxy for each running service is passed to a requesting client to use for interacting with the service. While the registrar performs certain functionality associated with finding a service in its local domain, registrars do not provide attribute information for each service running in all non-local domains (i.e., the enterprise). The enterprise repository provides a requesting client with a mechanism for finding a needed service in a non-local domain by listing all running services in the enterprise. A client needing a service that is not running in its local domain can access the enterprise repository for the location of a registrar having a running copy of the service. In accordance with one embodiment of the present invention, the client can then go to that registrar for the service's proxy and interact with the service. In accordance with another embodiment of the present invention, the enterprise repository also maintains a proxy for each running service in the enterprise so the client can get the proxy directly from the enterprise repository rather than going to the service's registrar.</p>
<p id="p-0257" num="0273">Turning now to <figref idref="DRAWINGS">FIG. 12C</figref>, the process begins with a registrar receiving a &#x201c;find&#x201d; request for a particular service (step <b>1270</b>). It should be understood that the client may be in the registrar's local domain and, in fact, with respect to the first, or local, hop the client is in the registrar's local domain. However, in accordance with some embodiments of the present invention, the &#x201c;find&#x201d; request may have been referred to the present registrar by an enterprise repository. The registrar then checks its lookup for service using information in the request, such as service name or any other attribute information in the request (step <b>1272</b>). Next, the registrar decides whether or not the service is running in the local domain (i.e., if there is a match between the attribute information contained in the &#x201c;find&#x201d; request and the service attributes contained in the registrar's lookup table (step <b>1274</b>)). On the first hop, the service needed by the client may or may not be found in the local domain, and thus registered with the registrar and listed in the lookup table. It is, however, expected that administrators will attempt to locate services proximate to clients that utilize those services; therefore, in many cases the service needed by the client will be found on the first hop in the client's local domain. With respect to the present flowchart, the client may not be local to the registrar, but might have been referred to the present registrar by the enterprise repository. In that case, it is highly unlikely that the service will not be found in the registrar lookup table because the present registrar registers the service with the enterprise repository. In any case, if the service is found in the registrar's lookup, the registrar gets the proxy object for the service from a storage location associated with the lookup table (step <b>1276</b>) and returns the proxy to the requesting client (step <b>1278</b>). The process then ends.</p>
<p id="p-0258" num="0274">Returning to step <b>1274</b>, if the service cannot be found by the registrar in its lookup table, then the registrar must pass the client request on to another registrar, albeit indirectly, in which the service is registered. Here, two alternate embodiments are possible. The first requires that the registrar track the location of at least one enterprise repository, while the second embodiment involves the registrar merely pointing to an enterprise repository lookup containing the location of an enterprise repository. As discussed above, the alternate embodiments are brought about due to technologies for performing some of the registrar's functionality actually existing, and due to the varying ease in which these technologies may be transformed from a domain-type environment to an enterprise environment consisting of multiple domains. Regardless, if the service information cannot be found in the registrar's lookup, the registrar must get next hop information for the client (step <b>1280</b>). The next hop information may be either the location of the enterprise repository itself or might instead be the location of the enterprise repository lookup. In that case, the location of the enterprise repository must be acquired from the enterprise repository lookup. In either case, the location of the enterprise repository is found and passed to the client (step <b>1282</b>) and the process ends. Alternatively, the registrar passes the client's request directly to either the enterprise repository lookup or the enterprise repository to checks it records for a service that is compatible with the client's request. Once found, the client request would then be passed to the service's registrar and the present process would return to step <b>1270</b> for the new registrar.</p>
<heading id="h-0026" level="1">Transaction Processing</heading>
<p id="p-0259" num="0275">With regard to <figref idref="DRAWINGS">FIGS. 13A-13B</figref>, a flowchart depicting the transaction process employed by the transaction manager is illustrated in accordance with a preferred embodiment of the present invention. The process begins with the client sending a transaction request to the transaction manager (step <b>1302</b>). The transaction manager may be any of transaction managers <b>912</b>A<b>1</b>-<b>912</b>AN depicted in <figref idref="DRAWINGS">FIG. 9</figref> and the client may be one of the services being run in containers <b>906</b>. Upon receiving the request, the transaction manager creates a transaction for the client, issues an enterprise lease for the transaction, and then returns the transaction content to the client as a transaction object (TXN) (step <b>1304</b>). The transaction manager will manage the transaction only as long as a valid enterprise lease exists for the transaction. Should the enterprise lease expire, the transaction manager will clean up the client's transaction. By using the enterprise leasing concept, the client need not notify the transaction manager in case of a transaction failure. Should the client not be able to complete a transaction, the transaction manager automatically cleans up after the enterprise lease expires. However, if the transaction is proceeding at a slower than expected pace, the client can always renew the enterprise lease with the transaction manager. The enterprise lease maintenance process will not be further described for the transaction manager as the process has been fully described for the registrar with respect to <figref idref="DRAWINGS">FIG. 11B</figref>.</p>
<p id="p-0260" num="0276">Returning to <figref idref="DRAWINGS">FIG. 13A</figref>, the client then requests various resources to join the transaction by passing the TXN to a resource in a request to join the transaction (step <b>1306</b>). Recall that the client may be communicating with resources via traditional resource managers or might instead be communicating with NW-enable devices and network elements that are managing a resource. Next, if the resource manager notifies the client that it intends to join the transaction, the process flows to step <b>1308</b> where the resource manager also passes a participant interface to the transaction manager (step <b>1314</b>). The client then determines whether or not another resource is needed in the transaction (step <b>1316</b>). If another resource is necessary, the process returns to step <b>1306</b> where the client invites another resource to join the transaction and the process continues as described immediately above. If, on the other hand, another resource is not necessary for the transaction and the client has joined the necessary resources in the transaction, the client makes a &#x201c;commit&#x201d; call to the transaction manager (step <b>1318</b>). At that point, the transaction manger implements the two-phase commit process which is invoked by the transaction manager on all participants joined in the current transaction (step <b>1318</b>).</p>
<p id="p-0261" num="0277">Returning to step <b>1308</b>, should the resource manager not join the transaction, either expressly or by failing to respond to the client's request, the client may attempt to find another resource (step <b>1312</b>). The process implemented by the client for finding a resource is similar to that described above with respect to <figref idref="DRAWINGS">FIG. 10</figref> for finding a service and will be discussed further with respect to the DataBus. Should the client find another resource that is suitable for the transaction, the process reverts to step <b>1306</b> and continues as described above. However, if the client cannot find a suitable resource to transact with, the transaction ends. At some point, the transaction's enterprise lease expires with the transaction manager and the transaction manager cleans up itself.</p>
<p id="p-0262" num="0278">Turning now to <figref idref="DRAWINGS">FIG. 13B</figref>, the two-phase commit process implemented by the transaction manager is described. After the client makes a &#x201c;commit&#x201d; call to the transaction manager via the TXN object, the transaction manager makes a &#x201c;prepare&#x201d; call to all participants (resource managers) that have joined the transaction with the client (step <b>1330</b>). If all participants accept the &#x201c;prepare&#x201d; call, then the transaction manager issues a &#x201c;commit&#x201d; call to all participants (step <b>1334</b>). Here again, the participant may accept the call or abort the transaction (step <b>1336</b>). Should every participant acknowledge that it accepts the commit, the participants then perform the requested transaction and the transaction manager notifies the client that the transaction has been accomplished (step <b>1338</b>), and the process ends. However, at times a participant cannot complete a transaction, thus returning to steps <b>1332</b> and <b>1336</b>. At any time during the two-phase commit process a participant aborts the transaction, the client is notified of the failure (step <b>1340</b>) and the transaction is rolled back at all of the participants due to the failure (step <b>1342</b>). Roll back is a mechanism for returning participants to the state in which they each were prior to the participant accepting the transaction request. Rolling the transaction back ensures that no participant has partially completed the transaction.</p>
<heading id="h-0027" level="1">Service Failures and Self-Healing Services</heading>
<p id="p-0263" num="0279">It is a fundamental principle of NewWave that it is a normal occurrence for the operating environment to be unstable for a time, but that it must return to stability independently. Maintaining a healthy environment depends first on finding out the health of the environment. As such, two techniques are used. The first involves the reporting requirements of all services. All NW service must answer ping( ) and healthCheck( ) requests. The ping( ) only establishes that the service is alive. The healthCheck( ) establishes that the service is alive and is able to perform all of its required functions. This includes accessing any needed resources, such as a database and a transaction manager. It also includes the ability to perform a task in a predetermined time period, depending on the task.</p>
<p id="p-0264" num="0280">Enterprise leasing provides information to the registrar about the health of the services registered in its tables. If a lease is renewed, the registrar rightly assumes that it is alive, but not its condition. If the lease expires, the registrar assumes that the service is no longer functioning. This information is used to keep the registrar's tables clean and avoid giving out any stale references. The registrar will also notify any interested parties when a change is made to its tables. Certain NewWave infrastructure services monitor the registrar and use lease expirations as information about the state of the environment. Different types of monitoring services take different actions, such as restarting services or replicating registrations outside of the domain of the registrar.</p>
<p id="p-0265" num="0281">Remote code loading, remote configuration and remote launching of services make easier the task of keeping the NewWave infrastructure and GIB running all of its services. When a service abnormally goes down, it must be restarted without human intervention if at all possible. This is done using an Arch Angel concept&#x2014;a number of agents whose job it is to watch other services, know what services should be running, and start them if they are not running. The job of the Arch Angel is made easier because services have limited constraints on where they run&#x2014;if one server goes down, the services that were running on it can usually be immediately re-homed on another server. However, some services have special requirements, local resources and the like.</p>
<p id="p-0266" num="0282">As discussed above, some services require special resources and find it necessary to maintain mirrored state information in case of a service failure. Some services cannot be re-homed on a different service because those services have some state that must be restored when restarted. If a restarted service must re-establish the previous state, then that state information must be stored or mirrored in a place that would not go away if the server the service is running fails (i.e., on a non-local resource for instance). One solution is using virtual bulletin boards that allocate space to running application or service. State information is updated to a service's space until needed to recover from a failure. One approach for maintaining this type of private state managed by a service and another is for maintaining state that is shared by multiple services.</p>
<p id="p-0267" num="0283">When a service goes away, it is not enough to just restart it. This may restore the services to the ecosystem, but not the interconnectedness of the ecosystem. There will still be stale references to the old service. So, even if all of the services are running, the NewWave environment may still be broken because collaborative services can no longer get to each other. A simple and effective way to handle this problem is by means of smart proxies, which have been discussed above. Recall that the proxy used to access a service from a client (which may be another service) is provided by the service itself. A proxy can encapsulate any code that can be executed in the client space. Self-healing services provide proxies which handle connection-related errors and re-find their respective target services, and finally re-execute the previous request. In this way, when a service is restarted, the stale references will eventually heal themselves.</p>
<p id="p-0268" num="0284"><figref idref="DRAWINGS">FIG. 14</figref> is a diagram depicting a service failure and re-homing the service to a different server and further depicting self-healing a proxy reference using a smart proxy in a global ecosystem of interrelated services in accordance with an exemplary embodiment of the present invention, and further illustrates self-healing a proxy reference using a smart proxy. <figref idref="DRAWINGS">FIG. 15A</figref> is a flowchart depicting a service restarting process in a global ecosystem of interrelated services in accordance with the present invention, while <figref idref="DRAWINGS">FIG. 15B</figref> is a flowchart depicting a process for self-healing stale references using a smart proxy in accordance with the present invention. With respect to <figref idref="DRAWINGS">FIGS. 14 and 15A</figref>, a monitoring service known as an &#x201c;Arch Angel&#x201d; is configured with information about the services for which it has the responsibility of monitoring. At a minimum, Arch Angel <b>1412</b> must know the identity of the services being monitored, their VM container requirements (what type of local resources, server platform, etc.), and the location of their service code (an address or reference for the remote HTTP server holding the service's code). Arch Angel <b>1412</b> is charged with attempting to restart failed services, ones that die an unnatural death for any reason. However, when a service's natural life is over, it will go away gracefully, executing normal shutdown procedures. In this case, Arch Angel <b>1412</b> recognizes that the service must not be restarted. One mechanism used to tell abnormal service failures from normal shutdowns is through enterprise leasing. A lease expiration is considered an abnormal event in the life of a service so if one occurs, the service must be re-started to bring the ecosystem back in balance.</p>
<p id="p-0269" num="0285">Turning now to <figref idref="DRAWINGS">FIG. 15A</figref>, the process begins with Arch Angel <b>1412</b> performing an iterative check to determine if a service, service <b>1406</b> for instance, has failed (step <b>1502</b>). Recall that this check may be precipitated by a variety of events, or even combinations of events. For example, a lease expiration where registrar <b>1410</b> notifies, or publishes, a monitor service of lease expiration. Alternatively, service <b>1406</b> might fail a healthCheck( ) request while still maintaining its lease(s). Regardless, if the service failure metric is exceeded, service <b>1406</b> must be restarted and its previous registrations cleaned up. In that case, Arch Angel <b>1412</b> identifies the service that has failed and checks its lookup for any VM container requirements required by the service (step <b>1504</b>). Next, Arch Angel <b>1412</b> must find a suitable container for service <b>1406</b> and so it accesses domain registrar <b>1410</b>'s lookup for VM service container service attributes (step <b>1506</b>). Once a VM container is found that matches the service container attribute needs of service <b>1406</b>, Arch Angel <b>1412</b> retrieves a reference to that container (URL address, etc.). Next, Arch Angel <b>1412</b> must lookup the URL for the HTTP server with service <b>1404</b>'s service code (step <b>1508</b>). Arch Angel <b>1412</b> then re-launches service <b>1406</b> by passing the service code server's URL out to the container service using the container's URL (step <b>1510</b>). This is exactly the process employed for manually launching a service for an administrator's console described above with respect to <figref idref="DRAWINGS">FIG. 11A</figref>. The service can then register itself as shown above with respect to <figref idref="DRAWINGS">FIG. 11A</figref> for step <b>1106</b>. However, in the case of service <b>1406</b> being restarted prior to a lease expiration, such as might occur when using the healthCheck( ) request, a number of stale references might still reside in registrar <b>1410</b> as well as the enterprise repositories, assuming that service <b>1406</b> was registered globally. Therefore, once service <b>1406</b> has been successfully re-started, Arch Angel <b>1412</b> can issue a shutdown request that appears to the registrar and enterprise repository that service <b>1406</b> has executed its normal shutdown procedure. Thus, registrar <b>1410</b> and the enterprise repositories can clean their respective lookups of stale references to service <b>1406</b> in its previous VM container.</p>
<p id="p-0270" num="0286"><figref idref="DRAWINGS">FIG. 15B</figref> is a flowchart depicting a process using smart proxy for the self-healing of stale references in accordance with the present invention. This process is performed entirely by the service's smart proxy that was passed to a client during lookup, thus the process is actually performed internal to the client (unbeknownst to the client). The process begins with smart proxy <b>1420</b> performing an iterative check to determine if requests to a service, service <b>1406</b> for instance, result in a stale exception (step <b>1522</b>). If not, the check continues to iterate through. If a stale exception is returned, then smart proxy <b>1420</b> attempts to relocate service <b>1460</b> in its new container (step <b>1524</b>). Smart proxy <b>1420</b> looks up service <b>14056</b> in registrar <b>1410</b> for an updated URL to service <b>1406</b>'s location. However, merely because the service is not responding to requests from client <b>1408</b> does not necessarily mean that service <b>1406</b> has been restarted elsewhere in another VM container. If service <b>1406</b> is not listed in registrar <b>1410</b>, then smart proxy <b>1420</b> will periodically recheck registrar <b>1410</b>'s lookup for service <b>1406</b>'s new URL, provided the rechecking process does not timeout (step <b>1528</b>). If the process times out prior to relocating the service, the self-healing process ends and client <b>1408</b> will be forced to roll back its operation to whatever state is necessary for finding and using a different service. Returning to step <b>1526</b>, once service <b>1406</b> has been looked up in registrar <b>1410</b>'s lookup, smart proxy reissues the request to newly restarted service <b>1406</b> in its new VM container. Once service <b>1406</b> responds, the stale reference is healed and the process ends.</p>
<heading id="h-0028" level="1">DataBus</heading>
<p id="p-0271" num="0287">The traditional approach to data management in an enterprise was that the applications own the data. Independent stovepipe applications are based on this approach as depicted above in <figref idref="DRAWINGS">FIG. 4</figref>. In this approach, data scaled well (divide and conquer), but also led to incoherent data images due to each application having its own, independent view of the data. Additionally, the stovepipe approach limits an enterprise's ability to integrate business, as it tends to wall the enterprise into the current model.</p>
<p id="p-0272" num="0288">A second approach to data management in an enterprise recognized that new applications invariably need data from older applications, thus data was replicated between applications in a peer-to-peer fashion. The peer-to-peer data transfer approach is depicted above in <figref idref="DRAWINGS">FIG. 1A</figref> and is often considered a type of Enterprise Application Integration (EAI). Because each application has an opportunity to access more than its traditionally owned data, this approach facilitates a more &#x201c;enterprise view&#x201d; of the data; however, transferring the data from its current location to where it is needed often makes it problematic. Applications using this approach often have to devote time and resources to wait for necessary data and/or caches for temporarily storing requested data during an execution cycle. Moreover, data replication approaches often require a spaghetti of data feeds between peers to effectively and harmoniously replicate data.</p>
<p id="p-0273" num="0289">A final approach to data management in an enterprise involved another EAI between stovepipe applications and warehousing application data to make enterprise data centrally accessible to all enterprise clients. The EAI approach to data management using a hub and spoke configuration is depicted above in <figref idref="DRAWINGS">FIG. 1B</figref>. Application integration, using the hub and spoke configuration of feeds, is a mechanism for providing cleaner data transfer than peer-to-peer (i.e., often less spaghetti), but it still emphasizes shuttling data around the enterprise to finally end up in an enterprise data warehouse. This might be the preferred data management mechanism for integrating disparate legacy systems into an enterprise without wholesale migration to a standard enterprise system. Because the enterprise data is ultimately warehoused, the enterprise controls the data and access to it. The enterprise determines the mode of data access and handles security. While the hub and spoke EAI approach may be the best and most widespread data management approach in use, it still suffers from having duplicative data between stovepipe applications and the enterprise warehouse and bottlenecking at the hub. Improvements in the hub and spoke approach include federated architectures wherein the applications are able to statically connect to a single integration server or hub and to exchange information with each other. While the bottlenecking problem has been somewhat alleviated, data transfer is much less clean because an application can transact only with a single hub due to the constraint that each application's messages must be processed on its own hub. Thus, there is more spaghetti between hubs to get all application data to a central enterprise warehouse, a &#x201c;spaghetti data warehouse.&#x201d;</p>
<p id="p-0274" num="0290">As briefly discussed above, the DataBus of the present invention provides a mechanism for alleviating the shortcomings in the prior art by decoupling data from the services and applications that historically owned the data. The DataBus makes enterprise data available to all authorized users without consulting with an &#x201c;owner&#x201d; application. The DataBus is a data management architecture for the NewWave service platform that presents an architecture for creating a consistent, enterprise-wide data persistence layer which allows clients to access shared enterprise data. The DataBus achieves this enterprise-wide look by decoupling shared enterprise data from specific applications (breaking down the stovepipes) and opening up the data layer to across-the-enterprise access (given proper authorization). The DataBus architecture is designed from the ground up for global scalability and accommodation of evolving business data models in a highly-distributed physical deployment. Scaling is realized predominantly through the partitioning, while individual partitions are mapped to logical data domains that are defined along more relevant dimensions than entity-type dimensions (e.g., geography, line of business, etc.), thus cutting across traditional entity boundaries.</p>
<p id="p-0275" num="0291">Central to the DataBus data model is the notion that a data layer represents a shared asset of the corporation that is decoupled from the separate production applications requiring access to this data. This view represents a significant departure from currently dominant models where vertical applications have ownership of data described above. In accordance with the DataBus Architecture, a clean separation is made between applications (i.e., the dynamic elements of the system, which carry out use-cases) and the data resources or persistent business objects (i.e., somewhat static, passive elements) that are accessed by those applications. The data tier is an horizontal substrate underlying any and all corporate applications requiring access to that data. Where appropriate, there are, of course, exceptions to allow private data that is truly isolated to specific applications.</p>
<p id="p-0276" num="0292"><figref idref="DRAWINGS">FIG. 16</figref> is a diagram depicting a conceptual realization of the DataBus two-tier infrastructure concept for mediating data transactions and an enterprise-wide data persistence layer which allows clients to access shared enterprise data in accordance with an exemplary embodiment of the present invention. Briefly, requests for data made by applications or components from the underlying (database) storage technology are mediated in the data mediation layer, the one, pandemic DataBus. The mediation layer further provides uniform, ubiquitous access to corporately-controlled business objects, such as customer, product, service or device, by dissociating data from applications so that no service or product application controls and rations data needed by another application. In the place of application ownership, persistent objects and data are created and a steward entity is given the responsibility for owning and controlling the persistence objects and data. Finally, the DataBus provides shared copies of data and manages updates to data with globally-guaranteed transactions.</p>
<p id="p-0277" num="0293">Transaction management, and the role of the transaction manager, has been described above with respect to <figref idref="DRAWINGS">FIGS. 13A and 13B</figref> which describe the two-phase commitment process and roll back contingency if all parties do not successfully implement their part of the required change. However, these functions are implemented under a process model used by applications for changing data and data associations.</p>
<p id="p-0278" num="0294">The DataBus comprises a data layer with an object-oriented interface. All interactions with data are through methods on objects. If relational technology is used for actual backing store, then this implies that the data layer is actually two distinct tiers: 1) a persistent business object layer; and 2) the underlying relational database which stores the state of these business objects. If object-oriented database technology is used, the data layer might be realized as a single tier. In any case, we assume throughout this document that a distributed object-oriented approach is applied to the entire architecture, even if the wording of this document sometimes lapses into database terminology.</p>
<p id="p-0279" num="0295">Any services contemplated for creating or retrieving instances of business objects must observe some fundamental principles. First, there is the notion that entity types (the nodes in an E-R diagram discussed in detail below) are deployed in runtime container processes. All access to persistent business object data is effected through remote calls to the object interface of the entity instances that are managed by the container. The entity instances are simply Java objects which conform to some strict conventions and live in a container environment. The entity instances themselves will interact with the backing data store, typically via Structured Query Language (SQL) calls to a Relational DataBase Management System (RDBMS). However, all application interaction with data is mediated through the instances, thus applications do not directly interact with the data store level of the DataBus. All entity instances must offer both a home interface and an instance interface. The home interface supports class-level functions, such as creation and initialization of new entity instances; finders allow query for existing entity instances matching specified criteria and methods for permanently deleting existing entities from persistent storage. Finally, the containers should have a sophisticated model for caching entity instances in-core, managing the life-cycle of cached instances as they move in and out of cache and are created and destroyed, management of concurrent access by multiple users, and management of security (access control) and transactions.</p>
<p id="p-0280" num="0296">All application interactions with entity instances, as well as interactions between entity instances, transpire via remote method calls. In other words, the data objects are fixed in space, and interaction with them occurs over the wire. However, there are situations where it is more desirable to move data out to clients for a local style of interaction. Thus, the remote access mode of data access is supplemented with a mode of access entailing interaction with a local data copy.</p>
<p id="p-0281" num="0297">The DataBus data architecture combines several main features or facets, such as partitioning, multi-hop finder strategies, externalized associations, object layer mediating access to underlying data storage, support for logical domains and transaction management. These separate facets of the architecture are briefly summarized in the following:
<ul id="ul0009" list-style="none">
    <li id="ul0009-0001" num="0000">
    <ul id="ul0010" list-style="none">
        <li id="ul0010-0001" num="0298">The proposed solution is Java-centric, with major systems based upon server-side Java and Application Server implementations.</li>
        <li id="ul0010-0002" num="0299">Entity Partition Containers define a model where container processes provide an environment in which business objects live. Access to business objects is obtained via remote method calls to stationary objects that are fixed to a physical container. Each partition container provides a &#x201c;home&#x201d; interface which can be located and used to create or access instances of the class.</li>
        <li id="ul0010-0003" num="0300">The Data layer allows for an alternative access style where clones of business objects may be streamed out to satellite cache servers or directly into an application's process space. Any number of satellite cache servers can be deployed as needed.</li>
        <li id="ul0010-0004" num="0301">Loosely-coupled concurrency control idioms are provided, such as optimistic concurrency control, to detect stale data when multiple applications concurrently hold local copies of the same data. This approach allows data replication to many local sites, but operates at the business objects level rather than wholesale replication of database tables. Data is maintained in volatile storage since non-master data does not need the full robustness of a database.</li>
        <li id="ul0010-0005" num="0302">Scalability is enhanced by the ability to partition any object class or data type across multiple, independent physical stores. Both business object containers (entity partitions) and corresponding database stores can be partitioned (horizontally) and further distributed across different operations centers if desired. Partitioning is emphasized over replication as the means for scalability.</li>
        <li id="ul0010-0006" num="0303">A central steward assigned for each entity type provides coordination and management of unique primary keys across all partitions. Most operations, other than instance creation, involve no access to the steward. Significant effort is made to prevent the steward from becoming a bottleneck. Given its primary key, a multi-stage finder strategy allows navigation to any entity instance from anywhere in the enterprise. The first stage of the finder provides a &#x201c;map&#x201d; from the primary key onto the physical partition where the corresponding entity instance is stored. A second stage operation can then locate the specified object within the partition.</li>
        <li id="ul0010-0007" num="0304">The information managed by the steward can be cached within the satellite cache servers so that, in most cases, an object is obtained without consulting the central steward.</li>
        <li id="ul0010-0008" num="0305">The data layer architecture allows logical domains, cutting across entity-type boundaries to be defined and used to scope down the context of operations to a relevant size. Domains are conceptually orthogonal to entities, and serve as a logical overlay on top of the physical partitions. For finder operations more complex than find-by-primary-key, the specification of a domain narrows the range of a search to a small number of relevant physical partitions, thereby avoiding a broad search. Create operations can specify the logical domain to link with the object.</li>
        <li id="ul0010-0009" num="0306">Externalized associative engines allow the creation of relationships between entity types. These constitute the literal realization of the links in an E-R diagram or object diagram. Foreign keys are not embedded within entities; rather, associations are externalized as first-class persistent objects allowing for a highly de-coupled, adaptive data/object model.</li>
        <li id="ul0010-0010" num="0307">Existing entities can be made to participate in new associations without impacting existing links. Evolving business needs can be met by appending supplementary business objects to existing core objects through the agency of associations. Since the data storage for associations can itself be partitioned, association storage size grows independently of entity partition size and is not limited in terms of scale. At the same time, the architecture permits entities to be managed entirely from within. To the applications programmer, relationship traversal from entity to entity is completely transparent and seems centralized.</li>
        <li id="ul0010-0011" num="0308">The proposed infrastructure supports a variety of integrity constraints upon associations, such as cardinality, as needed.</li>
        <li id="ul0010-0012" num="0309">Subject areas are used to classify entities into broad categories of data areas in the company, such as Customer, Inventory, etc. Within each subject area, there can be many subordinate entities. These subordinate entities can be expected to evolve on a faster time scale as the details of the business evolve; however, the subject area model is expected to be much more stable.</li>
        <li id="ul0010-0013" num="0310">Each subject area is defined by a principle entity that serves as an anchor point for the remainder of the information within the grouping. These standardized anchor objects represent major corporate elements. Subordinate data classes can be added as needed whenever required by new products and services.</li>
        <li id="ul0010-0014" num="0311">Subordinate object classes within a given subject area may often have the character of local data; local in a logical sense of being relevant only in the context of a particular line of business. As pointed out above, externalized associations lend a great deal of flexibility for evolving the data model as new entities and relationships are added to the model.</li>
        <li id="ul0010-0015" num="0312">Alternatively, the data administrators may choose to use more conventional, tightly-coupled intra-database relational mechanisms. However, it is intended that associations across major subject areas are exclusively built using externalized associative constructs.</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0282" num="0313">Replication of databases using conventional commercial products can be used for purposes of fault tolerance and disaster recovery. However, in general, traditional wholesale replication of database tables is not viewed as being a sustainable basis for a scalable architecture. For example, if one database of size N served a company's current needs and the company were to grow ten-fold, the database would need to be of size 10&#xd7;N. It would also need to be replicated to N distributed copies to hold access rates constant. The total amount of data storage using full replication strategies thus scales as the square of the company size. In the Data layer proposal, the extensive partitioning and distribution of business objects to form a loosely-coupled web or mesh of associated objects is considered to be the path to a sustainable, linearly-scaling data architecture.</p>
<heading id="h-0029" level="1">Entity-Relationship Model</heading>
<p id="p-0283" num="0314">With respect to the present invention, the term &#x201c;entity&#x201d; will be understood in the context of a conventional entity-relationship diagram. An entity-relationship (E-R) model is a data modeling technique that creates a graphical representation of entities and the relationships between entities within an information system. The E-R model figures prominently into this data architecture in general. <figref idref="DRAWINGS">FIG. 17A</figref> is a traditional representation of an E-R diagram, nodes <b>1700</b>, <b>1702</b>, <b>1704</b>, <b>1706</b> and <b>1708</b> represent entity classes for &#x201c;Customers,&#x201d; &#x201c;Accounts,&#x201d; &#x201c;Account Service,&#x201d; &#x201c;Billing Address&#x201d; and &#x201c;Pending Orders,&#x201d; respectively. An &#x201c;entity&#x201d; is any person, object, place or event for which data is collected. For example, in a business's information system, entities are business customers <b>1700</b>, the customers' addresses <b>1702</b>, orders <b>1708</b>, etc. The entity is represented in a conventional entity-relationship model as a geometric shape, normally a rectangle, but in this case an ellipse labeled with a singular noun that describes the entity. A relationship is defined as the interaction between the entities. For instance, customer <b>1700</b> of the aforementioned business maintains account <b>1702</b> and account <b>1702</b> lists pending order <b>1708</b>. Thus, the word &#x201c;maintains&#x201d; defines the relationship between a customer and the account or accounts that they maintain, while the word &#x201c;pending&#x201d; defines the relationship between an account and the pending order or orders. A relationship is normally denoted in a conventional entity-relationship diagram by either a diamond shape, or more simply, a line terminated with arrowheads which connects the entities. In either case, verbs may be used to label the relationships. Cardinality defines the association between the entities in terms of numbers. An entity may be optional or mandatory. For example, a sales representative could have no customers, or one or many customers, or there must be at least one product listed in an order. There are several different types of cardinality notation, but with respect to <figref idref="DRAWINGS">FIG. 17A</figref>, a single arrowhead represents a unit of one, while a double arrowhead represents a unit of many. The three main cardinal relationships are: 1) one-to-one, expressed as 1:1, representing the relationship between customer <b>1700</b> and account <b>1704</b>; 2) one-to-many, expressed as 1:M, representing the relationship between customer <b>1700</b> and bill address <b>1706</b>; and 3) many-to-many, expressed as M:N (not shown in the Figure).</p>
<p id="p-0284" num="0315">A central concept of this data architecture is that the nodes and arcs of the E-R diagram are literally mapped onto entity engine processes and association engine processes on the network. <figref idref="DRAWINGS">FIG. 17B</figref> is a representation of nodes and arcs of the E-R diagram being mapped onto entity engine processes and association engine processes. Customer entity <b>1700</b> is mapped to customer entity engine <b>1710</b>; account entity <b>1702</b> is mapped to account entity engine <b>1712</b>; account service entity <b>1704</b> is mapped to service entity engine <b>1714</b>; billing address entity <b>1706</b> is mapped to billing address entity engine <b>1716</b>; and pending order entity <b>1708</b> is mapped to pending order entity engine <b>1708</b>. Associations between entities can also be externalized. Externalized associative engines allow the creation of relationships between entity types. These relationships constitute the literal realization of the links in an E-R diagram or object diagram. With regard to <figref idref="DRAWINGS">FIG. 17B</figref>, these external associations between entity types are shown as boxes between each entity engine. Three types of association engines are: 1) one-to-one; 2) one-to-many; or 3) many-to-many, depending upon the cardinal relationship between the specific entity classes. For example, each customer entity in customer entity class <b>1700</b> is associated with only a single billing address entity within bill address entity class <b>1706</b>, thus Cust/BillAddr association engine <b>1724</b> is a &#x201c;1-1&#x201d; association engine, whereas customer entity might be associated with several accounts. Thus, Customer/AccAssociation engine <b>1720</b> is a &#x201c;1-M&#x201d; association engine serving associations between Acc/AccCustomer entity engine <b>1710</b> and account entity engine <b>1712</b>.</p>
<p id="p-0285" num="0316">As the <figref idref="DRAWINGS">FIGS. 17A and 17B</figref> illustrate, the E-R diagram of a business object model is directly recognized as a web of processes linked together over the network. This model is similar is some aspects of the so-called &#x201c;network databases,&#x201d; and to the World Wide Web model where any object can have links to any other object. However, there is greater discipline here in that associations are structured, follow a schema defined by the E-R model, and obey integrity constraints such as cardinality.</p>
<p id="p-0286" num="0317">Further, <figref idref="DRAWINGS">FIGS. 17A and 17B</figref> underscore the notion that associations and entities receive equal treatment as first class objects supported by deployed processes. Both entity engines and association engines have their own backing store as well. The backing store for entities will typically store records of attributes that represent the state of the various entity instances managed by a given entity engine. The backing store for association engines will contain tables of link records, which are pairs of foreign references to the entities that stand in relation to each other. In database language, the association storage is sometimes called a &#x201c;correlation table.&#x201d;</p>
<p id="p-0287" num="0318">Further, with respect to <figref idref="DRAWINGS">FIG. 17B</figref>, the lines connecting the boxes representing the various engines convey two points. First, they connote the foreign references to the entities that the association links together. Second, they correspond to interprocess communication (IPC) channels that are exercised at runtime as applications establish new links between entity instances and traverse existing relationship paths among associated entities. This simplified view of the mapping of E-R diagrams onto process engines has glossed over some details that will be filled in below. In particular, the fact that each given entity class may actually have its instances partitioned horizontally across several distributed stores has been ignored. &#x201c;Horizontal partitioning&#x201d; is database jargon for deploying different &#x201c;rows&#x201d; in a table across different stores, the image being of a horizontal slice through the table, as opposed to vertical partitioning where different attributes of the same record are stored in separate physical areas.</p>
<heading id="h-0030" level="1">Entity Partitions</heading>
<p id="p-0288" num="0319">As discussed throughout the present disclosure, the DataBus architecture relies very heavily upon data partitioning to achieve the scalability. Data is deployed throughout an enterprise network in a highly decentralized, distributed manner, but at the same time, remains logically unified. Thus, an enterprise user (service, client or even end user) can easily navigate to any data item from anywhere in the enterprise. Even though the data deployment is unconventional, conventional databases are relied upon for implementing highly-independent physical data partitions which have essentially no direct knowledge of each other. As described in detail below, external navigational mechanisms, such as finders and associations (described above and below), are the glue that binds these highly independent partitions together.</p>
<p id="p-0289" num="0320">Separate entities will generally be housed in separate storage servers. Even a given entity is likely to be physically partitioned across many separate storages. Practically speaking, an enterprise may strive to co-locate partitions of a given entity at a single physical facility, an operations center, for instance, on separate nodes of an SP\2 multiprocessor complex. However, the same entity might often be physically partitioned across geographically-distributed sites (e.g., siting one subset of customer data in the United States, and another in Europe).</p>
<p id="p-0290" num="0321"><figref idref="DRAWINGS">FIG. 18</figref> is a diagram illustrating entity A <b>1802</b>, entity B <b>1804</b> and entity C <b>1806</b> which are partitioned in accordance with an exemplary embodiment of the present invention. Each of entities A-C (<b>1802</b>-<b>1806</b>) is partitioned in as few as two and as many as four separate partitions; however, the diagram is merely illustrative. In practice, an entity might be partitioned in literally hundreds, and possibly thousands, of separate partitions. Note that the grouping of partitions within the entity boxes does not imply physical proximity in actual deployment. In fact, the deployment of some entities may be quite widespread across an enterprise. Remember, it is expected that data which is repeatedly accessed by a client will most likely be physically located proximate to that client. Thus, clients that are geographically disparate, while utilizing records or instances of the same entity, will result in the entity instances being geographically divided up by partitioning the entity.</p>
<p id="p-0291" num="0322">Interestingly, entity partitioning is not limited to the records of the underlying database storage media. Partitioning also includes the entity instance containers that house the object representation of the business entities. In other words, both the business objects tier and the data storage tier of the N-tier DataBus architecture are partitioned. In accordance with one embodiment of the present invention, only one object container instance is deployed for each corresponding database partition. <figref idref="DRAWINGS">FIG. 19</figref> is a diagram illustrating three container-database partition pair in accordance with an exemplary embodiment of the present invention. Note that VM container 1 (<b>1910</b>-<b>1</b>) is deployed for database <b>1918</b>-<b>1</b>; VM container 2 (<b>1910</b>-<b>2</b>) is deployed for database <b>1918</b>-<b>2</b>; and VM container 3 (<b>1910</b>-<b>3</b>) is deployed for database <b>1918</b>-<b>3</b>. It should be understood that while databases <b>1918</b>-<b>1</b>-<b>1918</b>-<b>3</b> are physically partitioned, and likely to be deployed to physically distinct server hosts, deployers may often wish to locate the database and corresponding entity partition container onto the same host. For example, to co-locate container <b>1910</b>-<b>1</b> and database <b>1918</b>-<b>1</b> on the same host, etc. In fact, it is logical to pair the object instance container and its matching database store on the same processor node so as to make container to database communications very fast.</p>
<heading id="h-0031" level="1">DataBus Architecture</heading>
<p id="p-0292" num="0323">With DataBus entities highly partitioned across distributed data stores, a suitable strategy or set of strategies for finding any particular object of interest is needed. These strategies include using a multi-stage finder mechanism to find objects given their primary key and employing a scoping mechanism, for limiting the scope of an arbitrary, criteria-based finding operation to a subset to all partitions in which the entity must be found. The final strategy uses an externalized associative engine mechanism for following association links between entities. The multi-hop finder is especially suited for finding an entity instance by primary key from anywhere in the enterprise, regardless of where it is physically located.</p>
<p id="p-0293" num="0324">However, before discussing the multistage finder, it might be helpful to discuss the DataBus architecture in more detail and the process for creating an entity instance in a partition in accordance with an exemplary embodiment of the present invention. <figref idref="DRAWINGS">FIG. 20</figref> is a diagram depicting DataBus components necessary for creating an entity instance in accordance with an exemplary embodiment of the present invention. For each entity in an enterprise, there exists one steward service, depicted as steward <b>2010</b>. This steward is logically central, but for access, availability and latency considerations, could be physically composed of federated, cooperating components constituting a logically unified steward service. Within every multicast domain, there exists a plurality of satellites, depicted as satellites <b>2012</b>-<b>2018</b>. Steward <b>2010</b> provides a measure of central management to the present invention. With the storage and container servers for each entity being partitioned and distributed across physically separate server hosts, as described directly above, there is a need for a central manger, one for each entity class. The entity manager serves as a central authority for those aspects of the entity needing to be centralized, as represented in <figref idref="DRAWINGS">FIG. 20</figref> as steward <b>2010</b>. In spite of the emphasis of the DataBus architecture on decentralization and distribution, however, is in situations where there is no way of avoiding some central control. This is where the central manager comes into play. While the central manager is necessary, we go to great lengths to avoid this manager becoming a bottleneck to throughput, and avoid excessive accesses to this central steward or manager.</p>
<heading id="h-0032" level="1">Roles of the Entity Manager</heading>
<p id="p-0294" num="0325">One of the main roles of this central manager is to provide coordination and management of unique primary keys (PKs) across all partitions. In the present architecture, all entities follow the convention of defining a candidate primary key consisting of a unique 64-bit integer called the UID (unique identifier). This UID provides a convenient foreign key that is used by externalized association engines to store references to entity instances, as will be further described below. In accordance with one exemplary embodiment of the present invention, one of the primary responsibilities of central entity manager <b>2010</b> is to maintain a block-up counter for generating new UIDs when a new block of primary keys is called for by any of satellites <b>2012</b>-<b>2018</b>. Satellites <b>2012</b>-<b>2018</b> actually issue a primary key whenever an entity instance is created and not steward <b>2010</b>. This approach avoids the necessity of accessing the manager upon every creation of a new entity instance. The satellite need only consult the steward during entity creation in the event that the satellite runs out of keys in its allocated block of keys. It must then go back to the steward to request another block of keys. This approach avoids the necessity of accessing the manager upon every creation of a new entity instance. In accordance with another exemplary embodiment of the present invention, steward <b>2010</b> validates that a primary key proposed by a user for a new instance is not already in use by an existing instance. This latter sort of PK contrasts with the block-up UID generated by the central manager in that its form is dictated by the type of business object it represents. For example, the PK for a given entity might be a string or an integer, or it might be a composite key having more than one component. These domain-specific PKs would often be proposed by the application, or by custom logic within the entity implementation, and checked for uniqueness by the central entity manager, using for example, a hashing or directory service.</p>
<p id="p-0295" num="0326">In accordance with another exemplary embodiment of the present invention, steward <b>2010</b> serves as a place to keep the master data for the mapping of primary keys onto partition identifiers that indicate where each given object is stored. This is an alternative embodiment and is discussed more below with respect to multi-stage finders. However, in that case, when a cache miss is suffered out at a satellite server, the finder service faults over to the master data managed by steward <b>2010</b> to determine which partition contains the entity having a given PK. When a new entity is created, steward <b>2010</b> places a new entry in its master copy of the PK-to-partition map. This role of steward <b>2010</b>, as the master record for this mapping, assumes that the multi-hop finder is based on distributed caches. If, as is discussed with respect to another embodiment of the present invention, enterprise repository <b>2030</b> is used for storing PK-to-partition maps, then burden for this data management shifts entirely to enterprise repository <b>2030</b>. However, if, and only if, the embodiment requires steward <b>2010</b> to generate new primary keys when new instances are created, and its responsibility for recording the PK-to-partition association, then the central logic of the home interface's create operation can also be located within steward <b>2010</b>.</p>
<p id="p-0296" num="0327">Finally, steward <b>2010</b> is responsible for finding an instance's partition container if the guidance stage of the find operation fails. As will be discussed above, a find operation may consist of a guidance stance and a local find stage. Steward <b>2010</b> issues parallel query to all entity partition containers if a PK-partition map is not listed in the satellite or enterprise repository for the partition holding the instance for the primary key.</p>
<heading id="h-0033" level="1">Avoiding Entity Manager Becoming a Bottleneck</heading>
<p id="p-0297" num="0328">Despite the central nature of the entity manager within a federation of entity partitions, one is not to think of the steward as being strictly layered over the physical partitions in a top-down sense. In other words, all operations on an entity instance or on the entity home interface are not channeled through the manager. On the contrary, we seek to avoid, as far as we can, directing traffic through the manager, turning only to the entity manager in those situations, such as instance creation, where consulting it cannot be avoided. This point is key to the scalability of the proposed architecture. We wish to avoid having the central entity manager turn into a constriction point.</p>
<p id="p-0298" num="0329">It should be mentioned that, in contrast with the prior art, when the client application holds a proxy or handle to an entity instance and invokes methods on that instance, steward <b>2010</b> is completely bypassed, and the remote invocation goes directly to the partition container where the instance is stored. Thus, instance-level operations entirely short circuit both steward <b>2010</b> and satellite <b>2012</b>-<b>2018</b>.</p>
<p id="p-0299" num="0330">The find-by-primary-key methods in the entity's home interface are handled by the satellite cache servers as discussed above in the section on multi-hop finders. These caches are consulted first to find the partition where a desired entity instance is located; the entity manager is consulted only whenever there is a cache miss. The hope is that most of the find operations will never need to consult the central entity manager. Association traversal and association creation (link) operations likewise never need to touch the central entity manager.</p>
<p id="p-0300" num="0331">Finally, in accordance with another exemplary embodiment of the present invention, steward <b>2010</b> is responsible for allocating blocks of primary keys to the satellites for its entity class and for locating the partition containing an entity instance, given the instance's primary key in case of cache faults in enterprise repository <b>2030</b> and/or at satellites <b>2012</b>-<b>2018</b>. In accordance with this embodiment, steward <b>2010</b> issues parallel query to all entity partition containers only if a PK-partition map does not have a copy of its own or the PK-partition map is not listed in enterprise repository <b>2030</b> and/or satellites <b>2012</b>-<b>2018</b>. In that case, the parallel query is issued and steward <b>2010</b> retains a copy for itself prior to sending it to satellites <b>2012</b>-<b>2018</b>, possibly saving a parallel query in the future.</p>
<p id="p-0301" num="0332">Satellites <b>2012</b>-<b>2018</b>, on the other hand, are responsible for two class level tasks. The first is finding a suitable container for a new partition. Satellites <b>2012</b>-<b>2018</b> select a specific partition container to place the entity instance based on some algorithm, such as proximity to the creating client, partition container loading, distribution leveling or some combination of the above. Satellites <b>2012</b>-<b>2018</b> also cache the PK-partition map and may pass that information on the steward <b>2010</b> after creating an instance.</p>
<p id="p-0302" num="0333">In addition to client <b>2030</b>, steward <b>2010</b> and satellites <b>2012</b>-<b>2018</b>, the local multicast domain also contains a plurality of domain registers <b>2032</b> for registering and looking up local NW services. External to the local multicast domain is enterprise repository <b>2030</b> which maintains enterprise level service and data registration as described above with respect to the processes described in <figref idref="DRAWINGS">FIGS. 11A</figref>, <b>11</b>C, <b>12</b>A and <b>12</b>C. Additionally, enterprise repository may contain PK-partition mapping information as described immediately above.</p>
<p id="p-0303" num="0334">Also shown in <figref idref="DRAWINGS">FIG. 20</figref> are servers <b>2002</b>A-<b>2002</b>D which may be physically located in the local domain, but are more probably scattered throughout the geography of the enterprise. For instance, server <b>2002</b>A might be situated in Paris, while server <b>2002</b>B is situated in Moscow. Also depicted in <figref idref="DRAWINGS">FIG. 20</figref> are arrows depicting the interaction between DataBus components. For the reader's convenience, these lines represent the correspondingly-numbered step in the flowchart depicted in <figref idref="DRAWINGS">FIG. 25</figref>, which will be described below.</p>
<p id="p-0304" num="0335"><figref idref="DRAWINGS">FIG. 21</figref> is a flowchart depicting a process for creating an entity instance in accordance with an exemplary embodiment of the present invention. The process begins with client <b>1920</b> accessing an interface for interacting with a satellite by finding a satellite service for the entity class in domain registrar <b>1932</b> (step <b>2102</b>). Client <b>1920</b> looks up and retrieves the proxy (or a smart proxy) for satellite <b>1912</b>. It should be understood that because each local domain should have satellite services for each entity class running, it should never be necessary for the client to hop to the enterprise repository for a non-local satellite. Of course, if a satellite service is not found in registrar <b>1932</b>, client <b>1920</b> can find enterprise repository <b>1930</b> and then look up a non-local registrar with a listing for a satellite service as described above with respect to <figref idref="DRAWINGS">FIG. 12C</figref>. If client <b>1920</b> already has the interface to satellites <b>1910</b>, then steps <b>2102</b> and <b>2104</b> can be omitted.</p>
<p id="p-0305" num="0336">Next, client <b>1910</b> requests an entity instance be created in a partition (step <b>2106</b>). Once the request is received by satellite <b>2112</b>, it checks its cache for primary keys (step <b>2108</b>). If satellite <b>1910</b> does not have a primary key on hand for creating a new entity instance, it requests a block of key from steward <b>1910</b>, which is forwarded to satellite <b>1912</b> (step <b>2110</b>). Once satellite <b>1912</b> has a key, it determines the best entity container partition to create an entity instance in step <b>2112</b>. Satellite <b>1912</b> might base the decision on proximity to client <b>1920</b>, container loading or some other quantifiable factor. The partition container may also be specified explicitly by the caller. Or the caller may specify a logical domain where the new entity instance is to be located. In this latter usage, the satellite would query an enterprise mapping of logical domains onto qualifying entity partitions. The steward would select from the set of qualifying partitions belonging to a domain a given partition to house the new entity instance. This selection could be random round-robin or based upon available capacity, determined by policy. Then, satellite <b>1912</b> caches the PK-partition mapping, passes it to steward <b>1910</b> and forwards the create(PK) request to the selected partition container (step <b>2112</b>). From there, the partition container creates the entity instance and passes a proxy for the instance to client <b>2014</b>. Additionally, the newly-created data object can register itself with the enterprise, like services as described above with respect to <figref idref="DRAWINGS">FIG. 12A</figref>. The process then ends.</p>
<p id="p-0306" num="0337">Once the entity instance has been created, there must be a coherent strategy to find it again when needed by a client. A multi-stage finder strategy allows the navigation to any entity instance from anywhere in the enterprise, given its primary key. The basic idea is that a first stage is used to map the primary key (PK), or candidate PK, onto the partition number where the entity is stored. The second stage is to invoke the &#x201c;local&#x201d; finder interface out at the relevant physical partition to produce the actual entity instance of interest. This second stage of the find operation is implemented with a SQL select statement for backing store that uses a RDBMS. However, before discussing the multi-finder strategy, in might be useful to review various protocols employed by the DataBus for accessing and safeguarding data objects.</p>
<heading id="h-0034" level="1">Modes of Data Access</heading>
<p id="p-0307" num="0338">The present invention envisions three distinct types of data access: 1) remote calls to fixed entities; 2) streaming copies of the data to client; and 3) moving a mobile agent into the entity's space. The core strategy has all client access to business objects effected by remote method calls into stationary data locations, the containers. This mode is similar to that described above with respect to services where a client intending to interact with an entity acquires a proxy to the entity instance and uses the proxy to interact with the instance.</p>
<p id="p-0308" num="0339">With respect to the data-movement approach, copies of data objects are moved out to the locales of the clients, thereby allowing client applications to exercise the business objects locally. By locale, we might mean a process close to the client, say on the same LAN, or even the process address space of the client application, where there is room for variations. At some point, changes to the copies need to be synchronized back to a master copy of the data. This approach generally implies the possibility that multiple copies corresponding to the same underlying objects may exist concurrently in different users' application spaces. Therefore, this approach to data access requires the adoption of well-thought-out concurrency control strategies.</p>
<p id="p-0309" num="0340">The third style of access to data, in addition to remote calls to stationary business objects and moving of object copies out to clients, is to again keep the business objects stationary, but dispatch client code in the form of mobile agents out to the business objects. The agent does work on behalf of the client then reports back to the client when there are results. This is somewhat similar in spirit to the familiar stored procedures from the relational database world where an application can install functionality inside the database engine.</p>
<p id="h-0035" num="0000">Remote Access to Stationary Business Objects</p>
<p id="p-0310" num="0341">As the remote calls to fixed entities mode of data access has been thoroughly discussed above, the notion is that clients obtain (using create, find, or association methods) remote handles to entity instances. These remote handles are similar in some respects to the familiar RMI proxies or CORBA proxies from ORB computing. However, the remote handles to entity instances are implemented with their own code which may be remotely loaded and hidden from the client in accordance with an exemplary embodiment of the present invention. These handles of remotely-loaded code are the smart proxies discussed above with respect to NewWave services. Recall that a smart proxy is a local object streamed to the client's process space which may contain both local data, logic and behavior, as well as references to remote server-side objects. In accordance with another exemplary embodiment of the present invention, the smart proxy that serves as a remote handle to entity instances encapsulates local state (i.e., the entity primary key), the name of the entity class or the partition number where the entity instance is actually stored. Additionally, the smart proxy will also encapsulate an RMI proxy to the container managing the entity instance.</p>
<p id="h-0036" num="0000">Streaming Data Copies to Client: Two Variations</p>
<p id="p-0311" num="0342">In the second mode of access to entities, a copy or clone of the business object is streamed out to the locale of the client application. Two modes of streaming supported by the present invention are direct streaming of a clone object into the process space of the client application and caching the clone object in a satellite cache server. <figref idref="DRAWINGS">FIGS. 22 and 23</figref> are diagrams depicting both modes of streamed data copies in accordance with an exemplary embodiment of the present invention. <figref idref="DRAWINGS">FIG. 22</figref> is a diagram showing a read/write copy of the entity instance being streamed directly to the client, while <figref idref="DRAWINGS">FIG. 23</figref> shows the cache server approach where a copy of the entity instance is streamed to a cache server rather than the copy being directly steamed to the client. In the latter approach, the client accesses the copy via the cache server. With respect to <figref idref="DRAWINGS">FIG. 22</figref>, a copy or clone <b>2206</b> is shown streaming from container <b>2212</b> directly to client <b>2204</b> for the client's use. Client <b>2204</b> issues a getClone( ) to container <b>2212</b> which obliges with clone <b>2206</b>. Client <b>2204</b> can then interact with the clone of entity instance <b>2202</b> including updating the instance using a updateFromClient( ). Here client <b>2204</b> is implemented in Java and therefore has the space to accommodate clone <b>2206</b>.</p>
<p id="p-0312" num="0343">By contrast, with respect to the cache server approach depicted in <figref idref="DRAWINGS">FIG. 23</figref>, client <b>2314</b> does not interact directly with clone <b>2306</b>. Instead, clone <b>2306</b> is streamed to satellite <b>2310</b> rather than directly to client <b>2314</b>. The cache server approach is mandatory if the client application is non-Java client <b>2314</b>. Some Java &#x201c;proxy&#x201d; space is needed to store the clone object on behalf of client <b>2314</b>.</p>
<p id="p-0313" num="0344">In order to support this streaming of clones out to the client, the entities must support a convention of supplying a getClone( ) method and an updateFromClone( ) method. For each entity type, there also must also be a serializable clone class defined (sometimes called a state object) which represents the thing that actually gets streamed out to the client. The entity's getClone( ) method creates a 0clone object reflecting the entity's current state, then streams the clone object out to the caller's address space. The updateFromClone( ) method of the entity takes the clone instance as an argument and updates the state of the master to match the attributes of the clone object.</p>
<p id="p-0314" num="0345">The above approach of having each entity support a getClone( ) method implies that there is one fixed type of clone object for each entity. In an enterprise, different applications may have differing needs for making up the exact internal data in a clone object (e.g., nested entities to varying levels.) The DataBus architecture accommodates these varying needs by offering a factory mechanism whereby clients can stream a factory object into an entity container during the request to create a clone of an entity. The entity container will ask the custom factory to create the clone, passing a reference to itself (i.e., to the entity) in order that the factory may call back the entity to extract entity state information during the construction of the clone. With this methodology, clients can create customized copies suitable for their purposes. By streaming factory code from clients into the entity containers at runtime, the entity container's abilities for stamping out data copies becomes extensible, much as a computer-controlled machining tool's behavior is extensible through uploading instructions. Note that the factory can imbed, within the primary copy, any number of copies of associated entities to whatever depth of recursion the application deems desirable. Clients can thereby stream into a custom factory that tailors copies to the clients' specific needs. The DataBus uses the approach of streaming client code into &#x201c;the system&#x201d; in another context, apart from clone factories. The DataBus also allows the client to provide a filter object during association traversal or find-by-criteria method calls. The filter implements custom Java code that can narrow a result set. In so doing, primarily only &#x201c;good&#x201d; objects are returned to the client, rather than all objects that match a &#x201c;find&#x201d; or &#x201c;get&#x201d; request. Recall that the &#x201c;getAccountsForCustomer( )&#x201d; method returns all destination objects that are associated with a given source object and that the solution requires either extra remote calls and data passing, or the client sequencing through the unfiltered array of accounts and performing its own filtering. By contrast, with the factory, the client streams objects into DataBus that act like the SQL &#x201c;where&#x201d; clause to perform custom filtering inside the entity container. Thus, the entity containers (the partition services), as well as the association engines, can apply filter objects to narrow results based on some preset criteria determined by the client.</p>
<p id="h-0037" num="0000">Concurrency Control</p>
<p id="p-0315" num="0346">Clearly, the streaming of clones to the client mode of data access has potential problems under concurrent usage scenarios. For example, in the lost update problem, two users fetch a copy of an entity instance. The first user modifies one copy and submits the changes. Thereafter, the second user modifies another copy and submits the changes, thus eliminating the modifications made to copy by the first user. The present invention solves the concurrent user problems by implementing one of two mechanisms. The first approach is used in scenarios where the client is using the data copies in a read-only fashion. That approach involves notifying the user of a read-only copy that a modification has been made to the original data and notifies the user of the changes in accordance with one embodiment of the present invention. The second approach is used in scenarios where the client is using the data copy in a read/write fashion. The second approach involves tracking version number of clones and rejecting any updates from clones that are not current in accordance with one embodiment of the present invention.</p>
<p id="p-0316" num="0347"><figref idref="DRAWINGS">FIGS. 24 and 25</figref> are diagrams depicting both approaches for maintaining concurrency control implemented by DataBus in accordance with an exemplary embodiment of the present invention. <figref idref="DRAWINGS">FIG. 24</figref> is a diagram showing the event notification approach where the client is using only read-only copies of the entity instance and receiving change notifications whenever an update is received. The optimistic concurrency approach in <figref idref="DRAWINGS">FIG. 25</figref>, on the other hand, depicts the client using a read/write copy that must stay in sync with a master copy in order for updates to be accepted.</p>
<p id="p-0317" num="0348">With respect to <figref idref="DRAWINGS">FIG. 24</figref>, client <b>2404</b> is using read-only clone <b>2406</b>, while client <b>2405</b> is using a second copy, clone <b>2406</b>, which is not read only. In the read-only scenario, event services keep the client copy reasonably in sync with the master data <b>2402</b>. Whenever client <b>2404</b> obtains a clone copy <b>2406</b>, the system registers with the event service the interest of client <b>2404</b> in obtaining refresh events whenever the master data gets updated by anyone else. A flag is also set on entity <b>2402</b> so that every time an update gets stored to the database, the system publishes a change event to the event bus so that the client is notified of the change. Here, client <b>2404</b> takes out an enterprise lease on the event service which, as described above, requires that client <b>2404</b> actively renew the lease if interested. Essentially, the event service publishes event notification to any service or clients wanting to subscribe and stay interested as long to the enterprise lease is current. Should client <b>2404</b> lose interest and let the lease expire, client <b>2404</b>'s subscriptions of interest are purged. As discussed previously, if client <b>2404</b> disappears ungracefully, the lease is expunged from the record; however, should client <b>2404</b> eloquently shut down or decide not to take a data copy, the lease is removed gracefully. Recall from the description of <figref idref="DRAWINGS">FIGS. 13A and 13B</figref> that the transaction process implemented by the transaction manager is a two-step commit process. All invited participants must join in the transaction prior to the transaction manager issuing the &#x201c;prepare&#x201d; and &#x201c;commit&#x201d; commands. Therefore, in accordance with an exemplary embodiment of the present invention, the change notification to client <b>2404</b> depends on the update transaction actually being committed. Should all participants in a transaction actually commit to the transaction, as opposed to joining it, the change notification is sent to client <b>2404</b>. Conversely, should the participants only confirm that the update transaction has been received to (tentative) store back to the database, the change notification is withheld, no matter how certain the impending change looks.</p>
<p id="p-0318" num="0349">With respect to <figref idref="DRAWINGS">FIG. 24</figref>, client <b>2404</b> is using read/write clone <b>2408</b>, as is client <b>2405</b>. Thus, either of clients <b>2404</b> and <b>2405</b> can update master entity instance <b>2402</b>. The second approach to concurrency control is when there are clone copies in the so-called optimistic concurrency control strategy. This strategy assumes a lack of locking due to the fact that there is optimism that collisions will be infrequent. In the optimistic concurrency-control idiom, a version number (a one-up count will do) is maintained on every entity instance. Each time an update to an instance occurs, the counter is incremented. Whenever a client obtains an entity clone, the clone contains the version number among its attributes. Whenever the client does a copy-back, using the updateFromClone( ) method, the system compares the clone's version number with the current version in the database. If there is an inconsistency, this means that some other user has performed an update since the first user originally fetched their copy. Under these conditions, the updateFromClone( ) method throws a &#x201c;StaleData&#x201d; exception and the update is aborted. With respect to <figref idref="DRAWINGS">FIG. 25</figref>, when client <b>2504</b> takes clone <b>2508</b>, the copy comes with a version number. It is assumed that client <b>2504</b> will be able to make any necessary modifications to clone <b>2508</b> prior to another client, for instance client <b>2505</b>, taking a clone of entity instance <b>2502</b>, and thus another version. If so, client <b>2504</b> can update instance <b>2502</b> without incident. If, however, client <b>2505</b> does take out another copy, now clone copy <b>2509</b>, then updated clone <b>2508</b> from client <b>2504</b> will not be accepted and a StaleData exception is returned because clone <b>2508</b> is not in sync with instance <b>2502</b>. In that case, client <b>2504</b> merely rolls back the entire transaction and runs internal application logic that redoes the use-case on a new version of instance <b>2502</b>. There is the possibility that the transaction cannot be successfully rolled back and client <b>2504</b> is then forced to re-key clone <b>2508</b> (i.e., create another instance with its unique primary key). It should be noted that under the optimistic idiom, one generally fetches the clone under one transaction, works with the clone under no transactional control, and then finally updates the original data store from the clone state under a second transaction.</p>
<heading id="h-0038" level="1">Multi-Hop Finder Process</heading>
<p id="p-0319" num="0350">One aspect of the present invention is that, despite the fact that two stages are involved in the find operation, this fact is hidden from the applications programmer. The find operation appears to the user as a single seamless operation. There is quite a range of possible implementation strategies and technologies that could be used for building the first stage of the finder, sometimes referred to as the guidance stage, for example, relational database tables to correlate keys and partition identifiers. This would really be overkill for a number of reasons. First, there is no real need for the first stage data store to be transactional. Less than 100% clean data is acceptable in the first stage. If the guidance stage occasionally points one to the wrong place, or to nowhere, the find procedure is backed up by a brute force parallel query to all entity class partition containers. Thus, the system can always find out where, if anywhere, the desired object is actually stored. Moreover, directing all find queries to the same database invites bottlenecks.</p>
<p id="p-0320" num="0351">Additionally, in accordance with an exemplary embodiment of the present invention, a non-transactional guidance stage can be self-healing. Strictly speaking, the guidance stage does not even need to be persistent, but instead can take on the form of cache held in volatile memory. This is so because guidance data is, in principle, recoverable using the parallel query approach outlined above. The PK-partition mapping results returned from the parallel query are replicated down to each entity class satellite. The idea is that distribution and replication of the guidance data (which allows availability and scaling to meet access volumes) is more important than transactional integrity or absolute fault tolerance.</p>
<p id="p-0321" num="0352">One approach to building a guidance stage of the multi-hop finder is to use an enterprise level directory service, such as an LDAP-based service or the enterprise repository, to store the mapping from PK onto partition number or whatever information uniquely identifies the relevant container where the entity is stored. This approach has the advantage of being automatic because newly-created entity objects can register themselves similar to services whenever they are started. However, due to the increased traffic to the enterprise repository, more repositories must be utilized and the PK-partition mapping replicated across all the enterprise lookups in order to guard against bottlenecking at the enterprise lookup (or LDAP-based service).</p>
<p id="p-0322" num="0353">An alternative to the enterprise lookup approach is to incorporate a cache architecture in certain entity class components, such as the steward and/or the satellites. In this approach, a cache of PK-to-partitionId entries is maintained in volatile storage out in the various satellite servers that has already been configured for holding streamed object clones. The guidance cache is in the form of a finite size, in-core hash table, following LRU (least recently used) chain semantics typical of caches. One feature is that the satellite caches exist in any number across the enterprise, as appropriate, to prevent the guidance stage from becoming a bottleneck (similar to how the problem of bottlenecking at the domain registrars is handled). The cached guidance stages are largely self-maintaining and present one level of a multi-level faulting approach to handle cache misses. When a find-by-PK operation is invoked by the user, the satellite cache is checked for a match. If found, the find request is sent to the relevant entity partition container. If there is a cache miss at the satellite, the process faults over to a centralized master store of the complete set of guidance data. This store may actually be present in two locations, the enterprise repository and the steward. Thus, the enterprise repository, populated with PK-partition mapping from data object registrations, is free. The other central store of guidance data is maintained by an entity management engine (the steward). It is expected that some embodiments of the present invention will utilize the guidance data in the steward, while others will use the guidance data in both the enterprise lookup and the steward. However, it should be noted that if the enterprise repository is checked, then the steward should also be checked because the process faults over to the steward automatically.</p>
<p id="p-0323" num="0354">However, if for whatever reason a match is not found in either the steward or enterprise lookup, the process then faults over to a brute force parallel query out to all known entity partitions to find who has the data. Note that it is the steward who remains aware of all current partitions and who is responsible for initiating this brute-force query to all known partitions. Also note that this query to all partitions proceeds in parallel in concurrent threads. In accordance with exemplary alternative embodiments of the present invention, the query takes one of two forms. First, query all known partitions for the partition holding the data that is identified by the specific primary key being sought. Alternatively, the query might instead be a request for all partitions to declare their primary key identifier of all entity instances. In that case, the response will repopulate all guidance data held by the steward, along with PK-partition mapping information held in the satellites.</p>
<p id="p-0324" num="0355"><figref idref="DRAWINGS">FIG. 27</figref> is a flowchart depicting a multi-hop find process in accordance with an exemplary embodiment of the present invention described above. <figref idref="DRAWINGS">FIG. 26</figref> is a diagram depicting DataBus components necessary for performing the multi-hop find process described in the flowchart of <figref idref="DRAWINGS">FIG. 27</figref>. Each of the relevant process steps is depicted in <figref idref="DRAWINGS">FIG. 26</figref> as an arrow accompanied with the corresponding step number for <figref idref="DRAWINGS">FIG. 27</figref>. The process begins with client <b>2620</b> looking up satellite service <b>2612</b> in domain registrar <b>2632</b> (step <b>2702</b>). As discussed above with respect to <figref idref="DRAWINGS">FIG. 12A</figref>, a NW service can be found in the lookup table by its attributes rather than by its interface. Client <b>2620</b> returns the proxy object for interacting with satellite <b>2612</b> (step <b>2704</b>). Should client <b>2720</b> already have the interface for satellite <b>2612</b>, then steps <b>2702</b> and <b>2704</b> can be omitted.</p>
<p id="p-0325" num="0356">The find operation is a two-step process wherein the first step locates the partition holding the entity instance and the second step is a local find where the partition is requested to return an interface for the entity instance. The process begins with client <b>2620</b> issuing a findByPk( ) to satellite <b>2612</b> via the satellite's proxy (step <b>2706</b>). If satellite <b>2612</b> has the PK-partition mapping listed, the satellite identifies the partition holding the entity instance and the process moves on to the second step wherein the satellite performs the local find (step <b>2708</b>). If, however, the PK-partition map is not in the satellite <b>2612</b>'s cache, the satellite looks up the primary key in enterprise repository <b>2630</b> (step <b>2710</b>). (Note that the satellite will cache the new information.) If, at this point, satellite <b>2612</b> finds the primary key in enterprise repository <b>2630</b>, the satellite retrieves partition information and performs a local find in that partition (step <b>2712</b>). If, however, the primary key is not listed in the enterprise repository, the process faults over to steward <b>2610</b>. Here Steward <b>2610</b> can perform various alternative processes. First, if steward <b>2610</b> has a listing for the primary key in its cache, it merely passes the partition identifier to satellite <b>2612</b>. Alternatively, steward <b>2612</b> executes a parallel query for the partition holding the primary key. Once the partition identifies itself to steward <b>2610</b>, that information is again passed to satellite <b>2612</b>. Further, in accordance with another embodiment of the present invention, steward <b>2610</b> executes a parallel query for all entity-class partitions to report the primary keys for their entity instances. In that case, steward <b>2610</b> can repopulate its own cache with the PK-partition mappings received from the individual partitions. That information is then passed down to the entity-class satellites (<b>2612</b>-<b>2618</b>) which repopulate their caches with the PK-partition mappings (step <b>2714</b>).</p>
<p id="p-0326" num="0357">In any case, at this point satellite <b>2612</b> will have identified the partition holding the entity instance and performs a local find (step <b>2716</b>). Satellite <b>2612</b> makes the findByPk( ) to the home interface of the partition identified as having the entity instance. The partition container returns a proxy for the entity instance to client <b>2620</b> for interacting with the instance (step <b>2718</b>). The process then ends.</p>
<p id="p-0327" num="0358">Logical domains are used to narrow the context of an operation to a scope that is smaller than the entire enterprise. <figref idref="DRAWINGS">FIG. 28</figref> is a diagram representing a logical domain boundary defined from partitions in each of several entities in accordance with one embodiment of the present invention. Domains are, in a sense, orthogonal to the dimension of entity type or subject area cutting across different entity boundaries.</p>
<p id="p-0328" num="0359">Individual domains may be defined along with any pertinent grouping, for example, along geographic lines or along lines of business, or according to some other classification. Logical domains supplement the methods of finding entity instances, such as by using either multi-stage finder strategy using primary keys described above, or to chase relationship paths from a known entity to related entities using the mechanism of externalized associative engines, the description of which follows.</p>
<p id="p-0329" num="0360">Logical domains are particularly useful with respect to situations in which a user needs to locate one or more entities, starting cold, by criteria that are more complex than a search by primary key. In these situations, the where clause of the SQL select query may be used for the more complex find-by-criteria operations and can be performed in parallel out at the separate partition containers for a given entity, and then the results can be coalesced. However, there is no need to perform these parallel find operations at entity partitions where the entity could not possibly be located by searching a U.K. customer base when trying to find a U.S. customer. In these situations, it is desirable to scope the range of an operation to a logical subset of all partitions. Logical domains provide the means to perform this narrowing of scope.</p>
<p id="p-0330" num="0361">In formal terms, the organization of data into logical domains is represented by a mapping from the pair
<ul id="ul0011" list-style="none">
    <li id="ul0011-0001" num="0000">
    <ul id="ul0012" list-style="none">
        <li id="ul0012-0001" num="0362">(entity class name, domain common-name)</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0331" num="0363">onto the set of all partitions where entities of that type and logical domain are stored:
<ul id="ul0013" list-style="none">
    <li id="ul0013-0001" num="0000">
    <ul id="ul0014" list-style="none">
        <li id="ul0014-0001" num="0364">D: (entity type, domain name)|&#x2192;{partitions}</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0332" num="0365">Domains are closely related to the notion of data partitions serving as a logical overlay on top of the physical partitions. In the simplest form, a domain could amount to nothing more than an alias for a specific partition of some entity providing a more user-friendly common-name in place of a physical partition identifier. For example, domain &#x201c;UK&#x201d; might map onto partition #8 for the Customer entity. However, a given domain for a given entity may span several partitions. More than one domain could coexist and overlap to represent the dissection of the enterprise along different dimensions (e.g., geographic and line of business).</p>
<p id="p-0333" num="0366">Logical domain mapping may be stored in a directory service that would be used during find operations to identify all the physical partitions that are relevant for a given entity within a desired logical domain. When a partition is created after the fact, the partition can be assigned to one or more logical domains.</p>
<p id="p-0334" num="0367">At runtime, the use of the logical domains is particularly relevant in the entity creator methods and the entity finder methods. It can be understood from the description of creating an entity as described with respect to <figref idref="DRAWINGS">FIG. 21</figref> above, that there is no explicit notion of where to create it; the &#x201c;where&#x201d; question is answered implicitly by the entity container that the client has an interface to. With respect to the present invention, creator methods are introduced that allow the specification of where to create the instance. Each entity's create interface (implemented by the satellites) needs to supply a createInPartition( ) method that explicitly indicates the physical partition in which the new instance should be created. Also required is a createInDomain(String domain) method that allows the user to specify in which domain the instance should be created. This method would first use directory services to map the specified domain name onto the set of partitions that belonged to that domain. It would then use some policy (e.g., random selection or greatest available capacity) to select one physical partition from the set of qualifying partitions; the new instance would then be created in that partition. In accordance with a further embodiment of the present invention, a createInDomains(String[] domains) method searches the directory for all partitions belonging to all specified domains (intersection) to deploy a new entity instance in a partition that concurrently belonged to two or more domains (e.g., placing an entity simultaneously in Europe and Internet LOB domains).</p>
<p id="p-0335" num="0368">In accordance with another embodiment of the present invention, another major area where domains would be visible in the user interfaces is in the complex finders for an entity. These find-by-criteria methods are given an extra argument for naming one or more domains to be intersected. The find operation is then performed in parallel out at all partitions matching the specified domain(s). The results of the parallel queries would then be coalesced and returned to the requestor.</p>
<heading id="h-0039" level="1">Externalization of Associations</heading>
<p id="p-0336" num="0369">The above-described data architecture externalizes relationships between entities using association data storage that is completely de-coupled from the participating entities themselves. This model departs from traditional relational practice of using foreign keys within entity tables to represent relationships, or the analogous object-oriented practice of &#x201c;burying&#x201d; object references within other objects. In essence, the entities themselves have no immediate awareness of the associations in which they participate. This knowledge is completely encapsulated within an outside authority, the association engine that manages the association and ensures that integrity constraints are not violated.</p>
<p id="p-0337" num="0370">The externalization of associations is extremely flexible in that new associations may be added to existing entities as business models evolve. Thus, new entities can be introduced and associated with existing entities without any impact upon those existing entity classes or the instances themselves. This externalization is possible because neither the entity class nor the entity instance internally track any information relating to associating, or linking through association, to other entities. Rather, the external association engine is modified with association information (the links) for the additional entities which makes for an extremely loosely-coupled fabric of business objects. As an example of this flexibility, a new association can be easily defined to append supplementary information to an existing entity to support the needs of a new service. This is somewhat like object subclassing (inheritance), but is in some ways, more powerful. The supplementary information can even be applied after the fact to entity instances already in deployment which is not possible with object inheritance. Furthermore, externalized associations allow any objects housed in any store across the enterprise to be linked together with any other object in the enterprise. Externalized associations also have less rigidity in the face of evolving business models than does the conventional approach of realizing a data schema as foreign keys within entity tables.</p>
<p id="p-0338" num="0371">The association engines that manage relationships between entities are built from reusable infrastructure. A number of different specialized association engines are supplied to support the different common association types. For example, specialized association engines will support the common cardinalities of one-to-one, one-to-many and many-to-many relationships. Another possible variation is the addition of an ordering property to one-to-many or many-to-many relationships which is useful in, for example, ordering the circuit legs that comprise the end-to-end path of a complete circuit. Other more specialized associations are possible, such as ternary associations linking triplets of entities.</p>
<p id="p-0339" num="0372">The following pseudo-code gives a sketch of how an application programmer might find a Customer instance by primary key, then traverse a one-to-many association to fetch all the Account instances belonging to that customer:</p>
<p id="p-0340" num="0373">
<tables id="TABLE-US-00001" num="00001">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="21pt" align="left"/>
<colspec colname="1" colwidth="196pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>//</entry>
</row>
<row>
<entry/>
<entry>// We assume an interface to a lookup service:</entry>
</row>
<row>
<entry/>
<entry>Lookup lookup;</entry>
</row>
<row>
<entry/>
<entry>// The Customer PK:</entry>
</row>
<row>
<entry/>
<entry>long customerId = 1234L;</entry>
</row>
<row>
<entry/>
<entry>// Use the lookup service to get a finder interface for</entry>
</row>
<row>
<entry/>
<entry>// the Customer entity:</entry>
</row>
<row>
<entry/>
<entry>CustomerFinder finder = (CustomerFinder)</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="35pt" align="left"/>
<colspec colname="1" colwidth="182pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>lookup.getService(&#x2033;entity.finder.Customer&#x2033;);</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="21pt" align="left"/>
<colspec colname="1" colwidth="196pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>// Use the lookup service to get the interface to the</entry>
</row>
<row>
<entry/>
<entry>// Customer/Account association engine:</entry>
</row>
<row>
<entry/>
<entry>CustomerAccountAssoc assoc = (CustomerAccountAssoc)</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="35pt" align="left"/>
<colspec colname="1" colwidth="182pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>Lookup.getService(&#x2033;assoc.1-m.customer.account&#x2033;);</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="21pt" align="left"/>
<colspec colname="1" colwidth="196pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>// Use the finder interface to obtain remote reference to</entry>
</row>
<row>
<entry/>
<entry>// relevant Customer entity:</entry>
</row>
<row>
<entry/>
<entry>Customer cust = finder.findByPk(customerId);</entry>
</row>
<row>
<entry/>
<entry>// Traverse the association from the Customer source object</entry>
</row>
<row>
<entry/>
<entry>// to obtain an array of all associated Account objects:</entry>
</row>
<row>
<entry/>
<entry>Account [ ] accounts = assoc.getAccountsForCustomer(cust);</entry>
</row>
<row>
<entry/>
<entry>// Exercise the functionality of the Customer and Account</entry>
</row>
<row>
<entry/>
<entry>// objects through their remote interfaces:</entry>
</row>
<row>
<entry/>
<entry>cust.doSomething ( );</entry>
</row>
<row>
<entry/>
<entry>// etc.</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0341" num="0374">This sample code illustrates the use of class-level entity functionality through an entity's finder interface, the exercising of association functionality through an association engine interface, and the use of an entity's instance-level interface (i.e., cust.doSomething( )). The most striking aspect about this sample code is that the program asks the association interface to return the Accounts related to the Customer, rather than the more familiar object-oriented practice of asking the Customer object for its Accounts. Note that the entity and association engines and their storage might be physically located anywhere across the enterprise, while access should, nevertheless, remain this simple and transparent. Finally, the entity and association engines appear to the client as centralized services deployed somewhere &#x201c;out there.&#x201d; This centralization is purely logical . . . an illusion that hides the distributed, de-centralized nature of the implementation.</p>
<p id="p-0342" num="0375">The above-described routine for navigating to all the Account instances belonging to a particular Customer instance based on the Customer's primary key will now be described in the NewWave environment with respect to <figref idref="DRAWINGS">FIGS. 29 and 30</figref>. <figref idref="DRAWINGS">FIGS. 29 and 30</figref> are a diagram and a flowchart, respectively, depicting a process for fetching all the Account instances belonging to that Customer instance based on the Customer's primary key in accordance with an exemplary embodiment of the present invention.</p>
<p id="p-0343" num="0376">With reference to <figref idref="DRAWINGS">FIG. 29</figref>, a diagram of NW service platform infrastructure of interrelated services relating to an enterprise is illustrated in accordance with an exemplary embodiment of the present invention. There, entity servers <b>2902</b>A and <b>2902</b>B are shown with the respective databases <b>2904</b>A and <b>2906</b>A for server <b>2902</b>A, while databases <b>2904</b>B and <b>2906</b>B are hosted by server <b>2902</b>B. In the depicted Figure, each server has two VM containers <b>2908</b> and <b>2910</b> running, and each container has two NW partition services running within. Partitions <b>2908</b> and <b>2910</b> are responsible for two main things&#x2014;retrieving one or more instances of a business object and creating a new instance of a business object. Typically, client <b>2940</b> would not directly invoke methods of the partition, but would utilize instead a satellite service. Notice that the Figure depicts four entity classes, A-D, representative of, for example, Customer, Account, Billing Address and Pending Order entity classes. Notice also that each of the entity classes is partitioned. With respect to the present Figure, each entity has two partitions, but in practice, most entities would have many more partitions. Each partition is responsible for a plurality of entity instances which are identifiable by a primary key. Also depicted is registrar <b>2930</b> which may be a domain registrar as described above with respect to <figref idref="DRAWINGS">FIG. 9</figref>. It is expected that the business objects normally used by a client are proximate to that client, thus a fair assumption is that all components represented in <figref idref="DRAWINGS">FIG. 29</figref> are in a local domain, such as the local domains defined by a multicast radius as further described above with respect to <figref idref="DRAWINGS">FIG. 9</figref>. However, as has been alluded to above, and which will be described in greater detail below, a client may interact with business objects located anywhere in the enterprise, locally or non-locally. Thus, servers <b>2902</b>A and <b>2902</b>B may or may not be local, while registrar <b>2930</b> and finder <b>2932</b> are local to client <b>2940</b>. However, the operations that each of these services perform might lead to hops in other non-local domains.</p>
<p id="p-0344" num="0377">Also shown in <figref idref="DRAWINGS">FIG. 29</figref> is 1:M entity A-B association engine <b>2934</b> which provides the logic and table resources for tracking all instances of class A (Customer class) to instances of class B (Account calls) through 1:M associations between Customer entity instances and Account entity instances. In practice, an association engine service will be available for the enterprise for each association between entities (similar to the association engines depicted in the E-R diagram on <figref idref="DRAWINGS">FIG. 16B</figref>). The table resource list links the instance between the Customer entity class A and the Account entity class B. Each time a customer makes a new enterprise account, a new Account entity is created in a partition and a link is added to engine <b>2934</b> from the customer instance to the newly-created account instance.</p>
<p id="p-0345" num="0378">Finder service <b>2932</b> may be a satellite service which will be described below. Briefly stated, a satellite is responsible for two main things, finding existing entity instances and creating new entity instances of the business object. Satellites are helper services to a steward service that allocates blocks of primary keys to the satellites and locates a partition based on a specific primary key. It should be understood that in the enterprise there is only one steward for each entity class in the enterprise, but there might be many satellites distributed across the domain for that entity class whose purpose is to help the steward. Finally, <figref idref="DRAWINGS">FIG. 29</figref> further depicts the interaction between components with lines that are representative of the correspondingly-numbered step in the flowchart depicted in <figref idref="DRAWINGS">FIG. 30</figref>.</p>
<p id="p-0346" num="0379">With respect to the process depicted on the flowchart illustrated in <figref idref="DRAWINGS">FIG. 30</figref>, the process begins with client <b>2940</b> possessing a primary key that identifies a Customer entity instance for a customer. Client <b>2940</b>, needing account information for the client, looks up the address (URL, URI) of the finder service <b>2932</b> in registrar <b>2930</b>'s lookup (step <b>3002</b>). As discussed in great detail above, the registrar returns a proxy to finder service <b>2932</b> which allows client <b>2940</b> to interact with finder service <b>2932</b> (step <b>3004</b>). A similar lookup is performed for the Customer/Account Association Engine service <b>2934</b> (step <b>3006</b>) where an appropriate proxy is returned for client <b>2940</b> to interact with engine <b>2934</b> (step <b>3008</b>). Client <b>2940</b> then uses the finder service to obtain a remote reference to the customer entity instance identified by the primary key (step <b>3010</b>). With a reference to the Customer instance, client <b>2940</b> can access the data using one of the data access modes to be described below. Next, client <b>2940</b> conveys the Customer instance primary key to Association Engine <b>2934</b> which traverses its association table and returns references to all Account entity instances associated with (link to) the Customer primary key (step <b>3012</b>). Alternatively, Association Engine <b>2934</b> might pass the primary keys to all associated Account entity instances making client <b>2940</b> responsible for looking up each key. Finally, client <b>2940</b> uses the reference to the Customer and client entity instances to exercise the functionality of the entity instances (step <b>3014</b>).</p>
<p id="p-0347" num="0380">Due to the pattern of relationship traversal implicit in a method like &#x201c;getAccountsForCustomer( ),&#x201d; the method returns all destination objects that are associated with a given source object. The complete set of entity instances may be more than necessary. A lack of filtering during a relationship traversal is a shortcoming of the proposed network-style of distributed data management in comparison to the full expressive power of the SQL &#x201c;where&#x201d; clause to narrow a join operation. One way of compensating for this shortcoming is to adopt the pattern of implementing narrowing or filtering methods at the class level in entity implementations. A narrowing method would take as an input an array of entity instance references, apply filtering criteria (probably using a SQL select), and return the filtered array of the subset of entities matching the criteria. With such a narrowing method available, the more restricted relationship traversal would be effected by calling upon the association engine to perform the initial traversal, then passing the resulting array of destination objects to the entity home interface for the narrowing operation resulting in extraneous remote calls and data passing. This pattern is illustrated in the following pseudo-code:</p>
<p id="p-0348" num="0381">
<tables id="TABLE-US-00002" num="00002">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217pt" align="left"/>
<thead>
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry>// Find all accounts for given customer:</entry>
</row>
<row>
<entry>Account [ ] accounts = assoc.getAccountsForcustomer(cust);</entry>
</row>
<row>
<entry>// Look up the Account home interface:</entry>
</row>
<row>
<entry>AccountHome acctHome =</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="203pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>lookup.getService(&#x2033;entity.home.account&#x2033;);</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217pt" align="left"/>
<tbody valign="top">
<row>
<entry>// Filter the accounts to those older than 48 months:</entry>
</row>
<row>
<entry>acctHome.narrowToOlderThan(accounts, 48);</entry>
</row>
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0349" num="0382">As an alternative, a client could also sequence through the unfiltered array of accounts and perform its own filtering via some criteria; however, this approach is very network intensive.</p>
<p id="p-0350" num="0383">A third alternative, mentioned above, is for the client to pass in a Java filter object to the association engine during association traversal. The filter is a serializable Java object, whole code is fetchable at runtime by the Java language infrastructure from its codebase URL. The association engine can apply the client-supplied, custom filter to an association traversal result set before returning the result set to the client.</p>
<p id="p-0351" num="0384">Merely gathering a suitably-filtered solution set of entity instances is not the only challenge of the process described above. Another challenge to be overcome is that the architecture depicted in <figref idref="DRAWINGS">FIG. 29</figref> is not overly scalable. Two factors thwart scalability after a certain point. First, there is an absolute threshold number of entity instances in an entity class that can be supported by association engine <b>2934</b>. Beyond that number, performance is rapidly reduced. Secondly, the quantity of links between the entity instances is reduced. Obviously, this is not a concern with 1:1 cardinality association engines, but the performance of 1:M and N:M cardinality association engines drops off as the number of links increases. Moreover, 1:M and N:M cardinality association engine performance decreases as a nonlinear rate with increased entity loading because the possible number of links increases by M with the addition of a single entity instance to the data. However, before discussing solutions to the above-described shortcomings, data access and the role partitioning plays in system scalability will be discussed.</p>
<heading id="h-0040" level="1">The Scaling Problem</heading>
<p id="p-0352" num="0385">As described above, extensive entity partitioning and distribution is central to the DataBus scalability strategy. Entities are scaled to nearly unlimited volumes of data by simply adding more and more partitions of relatively constant size in accordance with the present invention. However, as the volume of data grows, the central association engine must also expand to accommodate the new data and associations. However, at some point this growth becomes constrictive. The centralized nature of the external association engine architecture results in an overall reduction in DataBus navigation capacity due to bottlenecking inefficiencies inherent in handling the shear quantity of entity association requests with a correspondingly scaled central association engine for the data size.</p>
<p id="p-0353" num="0386">In accordance with one embodiment of the present invention, the bottlenecking problem is alleviated by applying some of the same concepts in the central association engine that are applied to entities for scaling (i.e., the association engine is partitioned, or more properly, &#x2018;fragmented&#x2019; by partition). Fragmenting the association does two things. It decentralizes the association engine, allowing the association links to be kept proximate to clients that would normally use them, and reduce to a manageable amount the quantity of association links kept in any one location.</p>
<p id="p-0354" num="0387">It should be understood that a link record exists to represent every pair of entities involved in an association describes an association relationship between two instances from the respective entities. Of course, with respect to the present invention, each of these instances must be contained in a separate partition (i.e., from the separate entities). Therefore, in accordance with an exemplary embodiment of the present invention, each of these link records is redundantly stored in two locations. The first link record is stored in an association engine fragment that is physically proximate to the entity partition where the source object is located. In fact, the engine fragment is logically coupled to that entity partition. The duplicate link is stored in a second location that is physically proximate to the entity partition in which the destination object is located. It is also referenced or coupled to the entity partition where the destination object resides. Thus, there is a fragment of the association link records co-located with respect to each entity partition. The association engine is logically central, but physically composed of fragments that may be widely dispersed. To traverse a relationship from a specific source object, the association fragment coupled to that source object's partition is used. Likewise, the association storage fragment coupled to the destination entity's partition is used for traversing the relationship in the backward direction. This approach to partitioning the associations allows both the association and entity storage to remain relatively constant in size as one adds more and more partitions.</p>
<p id="p-0355" num="0388">The precise structure of the association engine fragments might be better understood with respect to the description of <figref idref="DRAWINGS">FIG. 31</figref> which is a diagram showing external central association engine <b>3102</b> consisting of a plurality of link records which describe associative relationships between Customer entity instances and Account entity instances. A client merely accesses engine <b>3102</b> with a unique identifier for a Customer entity and utilizes the association link records to find any association relationships that might exist to any and all Account entity instances. In accordance with an exemplary embodiment of the present invention, external central entity association engine <b>3102</b> is &#x2018;fragmented&#x2019; into association engine fragments <b>3112</b>, <b>3114</b>, <b>3116</b>, <b>3118</b>, <b>3122</b> and <b>3124</b>, one for each entity partition from the participating entities. Each association engine fragment is proximately coupled to a specific entity partition. In practice, a partition references its association engine fragment, though this record of links should remain physically close to the partition as the partition will call on the engine fragment for association link records. Association links between entity instances recorded in central engine <b>3102</b> are divided up between the partitions' engine fragments resulting in twice as many link records as in central engine <b>3102</b>. This occurs because each link that was previously recorded for an association between two instances is now recorded in the partition's association engine fragment for each instance's partition. Notice t, although entity instances in central engine <b>3102</b> are identified only by their unique identifier (primary key), the entity instances in the engine fragments <b>3112</b>, <b>3114</b>, <b>3116</b>, <b>3118</b>, <b>3122</b> and <b>3124</b> are associated with a particular entity partition. It should be understood that this is merely an exemplary embodiment and that destination instances might be identified only by their unique identifiers because the client can always look up the partition container with a find service from the instance's identity as described elsewhere and above.</p>
<p id="p-0356" num="0389">Storing link records in engine fragments for both the source instance and the destination instance results in doubling the amount of records to be stored. External association engine <b>3102</b> is depicted as having sixteen links between instances from two entity classes (thirteen instances in the Customer entity class and nine instances in the Account entity class). Thus, resultant association engine fragments <b>3112</b>, <b>3114</b>, <b>3116</b>, <b>3118</b>, <b>3122</b> and <b>3124</b> contain thirty-two association link records, thirteen link records for instances in partition containers for the Customer entity and thirteen link records instances in partition containers for the Account entity.</p>
<p id="p-0357" num="0390">The quantity of association engine fragments corresponds with the total number of partitions between the entities. If, for instance, one of the participating entities (i.e., Customer) is divided into four partitions, and the other, Account, is partitioned two ways, then six association engine fragments would result. It should be understood that it might be possible for the instances in one or more entity partitions to not have associations with the instances in one or more partitions of a second entity. In that case, the total amount of records would still be twice that of the non-fragmented engine, but one or some of the resultant engine fragments would not have association link records.</p>
<p id="p-0358" num="0391">With reference now to <figref idref="DRAWINGS">FIG. 32</figref>, a diagram of NW service platform infrastructure of interrelated services relating to an enterprise is illustrated in accordance with an exemplary embodiment of the present invention. <figref idref="DRAWINGS">FIG. 32</figref> is identical to <figref idref="DRAWINGS">FIG. 29</figref> and therefore will not be described further except to add that arrows depicting the interaction between DataBus components are shown with regard to the process described in <figref idref="DRAWINGS">FIG. 33</figref>.</p>
<p id="p-0359" num="0392"><figref idref="DRAWINGS">FIG. 33</figref>, on the other hand, is a flowchart depicting a process for getting all accounts instances that are associated with an identified customer instance in accordance with an exemplary embodiment of the present invention. It is assumed that the client has already found an association service and has association proxy <b>3230</b> to interface with the service. The process begins by identifying the partition container holding the entity instance (step <b>3302</b>). Although this might be accomplished via finder service <b>3232</b>, as described above, this extra lookup is not necessary. The smart proxy that serves as a remote handle to an entity actually encapsulates a remote reference (typically an RMI stub) to the entity partition container, as well as other information like PK. In either case, the partition container must be found for the entity instance in order to locate the association engine fragment that is coupled to it (step <b>3304</b>). Once the container is found, the interface to the coupled association engine fragment is gotten (typically via local registrar service lookup) and the Customer/Account association engine fragment traversed starting from the Customer instance to find all associated Account instances (step <b>3306</b>). Those instances are then returned to the association engine (step <b>3308</b>) which passes them on to client <b>3240</b> (step <b>3310</b>). At step <b>3308</b>, it is assumed that the remote interfaces are returned for the Account instances and the client interacts with the Account instances as need be. In one embodiment of the present invention, the link records held in the association fragment engines consist of the triplets (primary key, entity type, partition number) for both source entity and destination entity that are linked. In traversing the association, the association fragment engine must query its link record store for all link records matching a given source entity. Then, given a set of link records, it must resolve the PK, entity type and partition number for destination entities into remote smart proxies for those entities. This could be done via the multi-hop find-by-PK. In practice, we optimize this by caching, in the association fragment engine, a map from (entity-type, partition #) onto the remote RMI stub to the corresponding entity partitions. Should this stub lookup suffer a cache &#x201c;miss,&#x201d; the interface to the partition service is fetched via enterprise service lookup described above via a partition naming convention formed from the entity type and partition number. In either case, once remote reference to destination partition or partitions is available, the association fragment engine can request those partitions to return smart proxies corresponding to all the destination entities matching the destination PKs.</p>
<p id="p-0360" num="0393">In accordance with another embodiment of the present invention, the client need only to be able to identify a particular entity instance to efficiently navigate to all data stores associated with that instance using the association engine fragments. Thus, a client merely invokes an assoc. getAccountsForCustomer (cust) method, just as described above with respect to the process depicted in <figref idref="DRAWINGS">FIG. 30</figref>. It appears to the user that they are exercising a remote interface to a central association engine, while there is in fact no such central association engine. This slight-of-hand is accomplished by using smart proxies, a concept we have already mentioned in a number of other contexts above. Thus, many of the steps described in the process immediately above are being performed out of view from client <b>3230</b>.</p>
<p id="p-0361" num="0394">Now, by way of contrast, the process described above from the flowchart in <figref idref="DRAWINGS">FIG. 33</figref> will be described below, but using smart proxies. <figref idref="DRAWINGS">FIG. 34</figref> is a flowchart depicting a process for getting all accounts instances that are associated with an identified customer instance using smart proxies in accordance with an exemplary embodiment of the present invention. The process begins with the client invoking a traversal method, assoc.getAccountsForCustomer (aCustomer), with the association engine (not shown). This method invokes logic local to the association smart proxy that queries the Customer entity argument (which is itself a smart proxy) for its primary key, partition identifier and its remote interface to the entity container where the actual Customer entity instance is stored (step <b>3402</b>). The association smart proxy then makes a remote request to the Customer entity's partition container to traverse the &#x201c;assoc.1-m.customer.account&#x201d; association from the source entity with the given PK (step <b>3404</b>). The Customer entity container has no built-in knowledge of how to traverse a Customer/Account association. Remember that in loosely coupled DataBus architecture, entities know nothing of associations, and new associations can be added at any time without breaking existing entities in deployment. The entity partition container can look up the interface to the association engine fragment for the association named &#x201c;assoc. 1-m.customer.account&#x201d; which is paired with that entity partition (step <b>3406</b>). The entity partition can also keep a cache of references to these association fragments so it does not have to go out to a lookup service every time. Once the entity partition has found the remote interface to the relevant association engine fragment, it forwards the association traversal request to that association engine fragment, which in turn can accomplish the relationship traversal (step <b>3408</b>). The association engine fragment queries association database based on Customer PK and requests remote interface (Smart Proxy) for the separate account partition that holds instances associated with the customer. After the Account remote references are passed to the association engine fragment, they get passed back the invocation chain all the way to the requesting client (step <b>3410</b>), thus ending the process.</p>
<p id="p-0362" num="0395">One aspect of one embodiment of the association approach of the current invention is the novel use of smart proxies in the interfaces to the logical association engine services. In this embodiment, the association engines are accessed through a service interface that is implemented with a smart proxy that, itself, contains no inherent remote references (proxies in stubs) to a remote object. The association engine smart proxies &#x201c;piggyback&#x201d; on the communications channels of the entity smart proxies that are passed to it as parameters in &#x201c;linko&#x201d; or &#x201c;traverseAssociation( )&#x201d; requests. For example, when the association interface is told to &#x201c;link&#x201d; entities A and B, the association smart proxy will extract from A and B their remote handles to their respective partition containers. The smart proxy will then proceed to send parallel link requests (in separate threads) to these two entity containers, which in turn forward the requests to the appropriate association fragments. This is a highly novel and a typical example of the use of a smart proxy. It has no communications &#x201c;channels&#x201d; of its own, but rather &#x201c;parasitically&#x201d; employs the communications channels of objects with which it comes into contact.</p>
<p id="p-0363" num="0396">Another feature of one embodiment of the present invention is the manner in which the virtual association engine deals with violations of cardinality integrity. Specifically, when a client requests that a one-to-many association add a new link record, the system must check for cardinality violations. Due to the asymmetric nature of a one-to-many association and the DataBus approach of partitioning entities, only the fragment engine on the &#x201c;many&#x201d; side can reliably detect a cardinality violation. A simple-minded implementation would serialize the link requests to the association fragments on either side of the relation, first to the &#x201c;many&#x201d; side, then only if successful, sending the link request to the &#x201c;one&#x201d; side. In one embodiment of the current invention, these link requests are forwarded in parallel (using two background threads) to the two &#x201c;sides&#x201d; of the association. If the &#x201c;many&#x201d; side detects a cardinality violation, it will throw an exception. The &#x201c;one&#x201d; side will, in any case, proceed to add a link record, all-the-while ignorant of whether doing so violates cardinality constraints. But all such link operations are performed under the oversight of a global transaction. Thus, when the caller of the (illegal) link request catches the cardinality exception, they will (according to the &#x201c;contract&#x201d; they are expected to obey) &#x201c;roll back&#x201d; the global transaction. The &#x201c;one&#x201d; side's inappropriate adding of an illegal link record will be effectively undone.</p>
<heading id="h-0041" level="1">Management Operations Center Overview</heading>
<p id="p-0364" num="0397">The Management Operations Center (MOC) is an application for providing support for people addressing problems similar to those handled in a Network Operations Center (NOC), but not limited to only network problems. As such, it is intended to support problem management in many forms, including those typically handled by customer support centers and tactical assistance centers. The MOC represents a tool that assumes a fundamental re-engineering of the processes and tools used in these environments. It should not be compared directly against the tools that currently support these environments (trouble tickets, workflows, network management consoles, etc.), but should be analyzed as to how it supports the new re-engineered process. As such, it will not support many things currently expected in these environments because some activities are not needed.</p>
<p id="p-0365" num="0398">The current NOC environment can be described in simple terms as an approach involving monitoring of activity, identification of problems, selection of problems to work on off of a queue, and resolving the problem. By contrast, in accordance with an exemplary embodiment of the present invention, the MOC monitors and identifies problems based on rules set up by experts. Additionally, rather than an ad hoc personnel deployment, the MOC determines the best available personnel for a particular problem based on circumstances and policy rules and then directly invites those persons to work on the problem. Therefore, the work team is composed based on differing roles and skill sets required for the problem, and might involve people from different organizations. Because the MOC is an integration of services, the MOC is able to handle problem cases that are not limited to one area, as is the practice of Network Operations, but to any affected areas. For instance, a problem may bind together a network event, customer tickets, application events, etc. Finally, in accordance with an exemplary embodiment of the present invention, a work event can be worked on and accessed by anyone with connectivity to the NewWave environment, so people involved do not have to be in one center, but could be at home, on the other side of the world, etc. Thus, in stark contrast with prior art attempts, the MOC's emphasis is on collaboration tools and world-wide access.</p>
<p id="p-0366" num="0399">Operations support systems today tend to be large, closed applications that perform part of the work needed by OSS personnel. OSS personnel usually end up using several systems that overlap and do not talk to each other. As opposed to a closed application that provides merely a partial solution, the MOC of the present invention represents an example of a new way of designing applications: the inside-out design. In this approach to building systems, rather than building monolithic application systems, the &#x201c;application&#x201d; is a collaboration of many smaller units acting on common objects, possibly without knowledge of each other, but with their actions affecting each other. This design also makes heavy use of rules external to code executed by rules engines or policy specific objectives. This allows for changing the behavior of the system without changing the code. Those behaviors which represent organizational policy are removed into rules, and can then be managed by experts in those organizations.</p>
<p id="p-0367" num="0400"><figref idref="DRAWINGS">FIG. 35</figref> is a diagram of the MOC and associated NewWave services necessary for collecting events into policy-based work documents, and then directly routing work to the best currently available operations staff that is automatically assembled based on the individual staff members' aptitude for particular tasks in a process flow in accordance with an exemplary embodiment of the present invention. The primary MOC component services are assessor <b>3504</b>, aggregator <b>3506</b>, workspace <b>3502</b>, dispatcher <b>3508</b>, distributor <b>3510</b>, avatar <b>3512</b>, archive <b>3514</b> and work rendezvous <b>3516</b>. Before describing the other aspects of the MOC, the functionality of each of the above identified MOC services will be briefly described. Assessor <b>3504</b> initially receives most events from pub/sub bus <b>3528</b> and applies operations-specified policy to the treatment of those events using, for example, a rules agent in a commonly shared rule server. Authorized operation staff can change and update policy rules in near-real time using behavior service <b>3530</b> described below. Highly distributed and individually customizable, typically many (customized) assessors will exist in the MOC system, thus allowing different treatment of events by different operations teams.</p>
<p id="p-0368" num="0401">Aggregator <b>3506</b> receives event information from pub/sub bus <b>3528</b> and assessor <b>3504</b> which it associates and binds together according to an operation's requested organization of work integration to produce work document <b>3630</b>. Aggregator <b>3506</b> also provides real-time binding of associated corporate business objects to the document including binding an event to many different documents. To that end, aggregator <b>3506</b> contains the templates for documents for, for example, different functional areas/teams. Additionally, many different aggregators will exist and run simultaneously providing different work documents to different teams. Dispatcher <b>3508</b> applies current policy rules to associate work documents and events with specific operators, customer contacts and other service care staff. Dispatcher <b>3508</b> assigns work with an understanding of who is free and able to do that work and implements priority rules for understanding relative priority, thus dispatcher <b>3508</b> can bump work in progress for higher priority tasks. Additionally, dispatcher <b>3508</b> implement alternates strategies to handle cases where work is refused or overdue. Distributor <b>3510</b> handles outbound and remote communication notifications for the MOC based on decisions from dispatcher <b>3508</b>.</p>
<p id="p-0369" num="0402">Each avatar object <b>3512</b> represents a virtual image of a specific operator's or customer contact's skills and responsibilities. Operators, provisions, customer contacts, service support staff and any other management-tasked staff in the customer and network care environment will have an avatar. Avatar <b>3512</b> provides the MOC with a skills assessment of care staff including reference to a history of past work, interactions and success ratings and a means for contacting and communicating with these individuals.</p>
<p id="p-0370" num="0403">Archive service <b>3514</b> updates and otherwise modifies work documents for or in storage based on recent experiences. Finally, work rendezvous <b>3516</b> associates later arriving processed events with events that initially generated a work stream/task. With this service, different people working on the same route or associated task can learn of the complementary work going on. Rendezvous <b>3516</b> notifies different work documents about all other references to a common event and associates processed events with a work document that contain a reference to the source event. With respect to <figref idref="DRAWINGS">FIG. 35</figref>, the GIB services have been discussed thoroughly above and will not be discussed again.</p>
<p id="p-0371" num="0404">The key features of the MOC design are:
<ul id="ul0015" list-style="none">
    <li id="ul0015-0001" num="0000">
    <ul id="ul0016" list-style="none">
        <li id="ul0016-0001" num="0405">Rather than a single monolithic application, the MOC employs an inside-out design in which many small components act largely independently of each other, but affecting each other by:
        <ul id="ul0017" list-style="none">
            <li id="ul0017-0001" num="0406">directly interacting with shared resources;</li>
        </ul>
        </li>
        <li id="ul0016-0002" num="0407">registering for notification of updates to shared resources;</li>
        <li id="ul0016-0003" num="0408">finding each other and communicating via the GIB services of registration and lookup; and</li>
        <li id="ul0016-0004" num="0409">publishing messages over the GIB publish/subscribe bus;</li>
        <li id="ul0016-0005" num="0410">Providing a mechanism wherein automation and current policy can be applied to managing process;</li>
        <li id="ul0016-0006" num="0411">Providing a team to analyze the situation and effect the solution, rather than a succession of individuals, doing a piece and handing off to the next in line;</li>
        <li id="ul0016-0007" num="0412">Providing a server side, peer-to-peer interaction environment in which all participants can access the same, real-time information.</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0372" num="0413">In general, the overall behavior of the MOC can be changed by adding new components, work templates, or changing policy rules, without directly modifying existing components. All MOC components are NewWave services, using the NewWave registration, lookup and enterprise lookup services. The MOC extends the behavior of its code through the use of external rules engines using the NewWave behavior service. This allows organizations with the expert knowledge of operations support to be in control of the behaviors implementing operations support policy, instead of programming organizations. The MOC must communicate with systems outside of its direct control. It uses XML messages sent over the GIB publish/subscribe buses to do so in a highly decoupled way. In this way, it uses a common approach for receiving events from disparate sources: external sources such as the network, customer service systems and legacy systems; and internal sources such as MOC or NewWave components. Events received are assessed by an assessing component. It is the job of this assessor to apply organizational policy dealing with how a event should be addressed.</p>
<p id="p-0373" num="0414">Work documents are constructed by an aggregating component. It is the job of this aggregating component to put together a document (a software construct) containing what information is needed to resolve the problem, including aggregating related network, customer and application events, setting initial milestones, applying rules which deal with the understanding or categorization of the problem, and binding in related information (such as necessary topology information). Work documents are first class objects accessible through the NewWave DataBus. They are not just data, as they have a controlling feature that allows state changes throughout its life. All components are able to interact with and change it using distributed transaction semantics.</p>
<p id="p-0374" num="0415">People are invited to participate in work groups by a dispatching component running dispatching rules. It is the job of this dispatcher to apply organization policy dealing with who should deal with a problem.</p>
<p id="p-0375" num="0416">People are represented by in-memory &#x201c;avatars&#x201d; which are responsible for knowing the manner in which to communicate with the person, that person's current workload and information about the person. Technologies for communication are encapsulated within the avatar, allowing other components to not be knowledgeable about or bound to those technologies. An avatar is a first-class object running as a service and can be found and interacted with using standard NewWave techniques. A workspace (<figref idref="DRAWINGS">FIG. 39</figref>) is the interaction, peer-to-peer, of those services about a single work item.</p>
<p id="p-0376" num="0417"><figref idref="DRAWINGS">FIG. 36</figref> is a functional diagram of the MOC depicting interactions between key MOC components which interact in accordance with an exemplary embodiment of the present invention. Note that <figref idref="DRAWINGS">FIG. 36</figref> contains component representations from the MOC, NewWave infrastructure and rule agents <b>3632</b>. The MOC is responsible for coordinating the response to events which occur within individual components bound into workspace <b>3640</b> developed for the NewWave environment. Components in workspace <b>3640</b> might be NewWave-enabled devices, and applications and services developed on NewWave or are detected by NewWave surrogates for external systems, for instance, agents monitoring devices or other resources, and bridges to legacy (non-NewWave) systems. None of these components and surrogates have any special knowledge of the MOC or its functionality and thus are not modified in any special way to interact with the MOC. These components and surrogates are responsible only for knowing when a problem has occurred, and for publishing an XML document describing the problem on the publish/subscribe bus. The only coordination which occurs between the MOC and components <b>3630</b> is in the definition of the XML document and the topic that it is published with it.</p>
<p id="p-0377" num="0418">To make any component able to be supported by the MOC, it must be able to interact with the MOC components, even though components <b>3630</b> do not have any specific know-upon format and transmission media. To that end, any component wishing to be supported by the MOC must publish events to the GIB publish/subscribe bus, or to an external publish/subscribe bus with a bridge to the GIB, shown generally as pub/sub service <b>3618</b>. Each event message must use an agreed-upon XML schema for the format and follow an agreed-upon structure for the topic of the event message.</p>
<p id="p-0378" num="0419">The precise XML document standards are not important for the purposes herein, but some exemplary events are listed below.
<ul id="ul0018" list-style="none">
    <li id="ul0018-0001" num="0000">
    <ul id="ul0019" list-style="none">
        <li id="ul0019-0001" num="0420">FMEvent XML (Fault Management Event) XML document, topic ngn.nfp.fm;</li>
        <li id="ul0019-0002" num="0421">Application Event XML document, topic ngn.service.admin;</li>
        <li id="ul0019-0003" num="0422">Customer Service Event XML document, topic ngn.customerservice; and</li>
        <li id="ul0019-0004" num="0423">UUNet Ping Alarm FMEvent XML document, topic ngn.uunet.fm.</li>
    </ul>
    </li>
</ul>
</p>
<heading id="h-0042" level="1">Building a Work Document Describing an Event</heading>
<p id="h-0043" num="0000">Assessing Events</p>
<p id="p-0379" num="0424">When events are received by the MOC over publish/subscribe bus <b>3618</b>, they are optionally received by assessor <b>3604</b>. An assessor is responsible for applying organizational policy dealing with how the organization responds to events of that type. An organization may set policy saying that certain events are ignored; others are problems that must be addressed immediately, etc.</p>
<p id="p-0380" num="0425">Simply put, assessor <b>3604</b> runs rules agent <b>3632</b> against an incoming event received from publish/subscribe bus <b>3618</b>. In accordance with an exemplary embodiment of the present invention, assessor <b>3604</b> determines, based on the rules, whether the event is a primary event, which must be investigated and then classified by type. The function of assessor <b>3604</b> is then entirely dependent upon the rules that are set up and executed by the rules engine. These rules would be defined by experts in an organization or set of organizations responsible for handling problem events. An exemplary rules engine for implementing policy based rules is Brokat Advisor and the Brokat Advisor Server (both available form Brokat Aktiengesellschaft Industriestrasse 3, D-70565 Stuttgart, Germany). Because the present invention is supported by the NewWave infrastructure, and relies on remote loading of services which in some forms rely on the Java programming language, a rule engine that is also written in Java would better match the operating environment of the MOC in its use of the mobile rules agents.</p>
<p id="p-0381" num="0426">Referring to <figref idref="DRAWINGS">FIG. 37</figref>, an assessor is depicted for assessing events based on organizational rules in accordance with an exemplary embodiment of the present invention. Notice that the present invention envisions implementing rules in the normal manner by developers in development <b>3710</b>. However, the present invention recognizes that the developers are not always the best implementers for rules, nor the timeliest, especially those based on organizational policy, such as from operations <b>3712</b>. Therefore, the rules may be adjusted, modified, supplemented or even replaced by experts in an organization or set of organizations responsible for handling problem events at, for instance, code server <b>3720</b>. Code server <b>3720</b> then serves up the rules to rules agents in behavior service <b>3730</b>, which are fired whenever an event is received.</p>
<heading id="h-0044" level="1">Work Item Aggregation</heading>
<p id="p-0382" num="0427">The primary process involves building the case, involving the separate activities of:
<ul id="ul0020" list-style="none">
    <li id="ul0020-0001" num="0000">
    <ul id="ul0021" list-style="none">
        <li id="ul0021-0001" num="0428">1. the correlation of the primary event and related events into a single bundle;</li>
        <li id="ul0021-0002" num="0429">2. the building of a work document containing the bundled events and the other related information;</li>
        <li id="ul0021-0003" num="0430">3. the running of rules designed to help determine the cause of the problem; and</li>
        <li id="ul0021-0004" num="0431">4. the control of the life of the work to be done including coordinating the actors involved in the process.</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0383" num="0432">A common approach used in both cases to alert the MOC of an anomalous condition is the NewWave publish/subscribe service. As described elsewhere, the publish/subscribe service is part of the NewWave GIB and represents a contract between components for sharing information.</p>
<p id="p-0384" num="0433">Many separate aggregators will be generally deployed within the MOC. It is entirely reasonable for an aggregator to begin work before the assessor, bringing the case up to a certain point to give the assessor adequate information to make its assessment. Then, it could continue its work conditional on the assessment.</p>
<p id="p-0385" num="0434">The basic design of an aggregator is shown in <figref idref="DRAWINGS">FIG. 38</figref> in accordance with an exemplary embodiment of the present invention. <figref idref="DRAWINGS">FIG. 38</figref> also describes the basic workings of aggregator <b>3606</b> in accordance with the present invention. Accordingly, events flow into aggregator <b>3806</b> and pass through a &#x201c;gate,&#x201d; logic gate <b>3748</b>, which applies some logic to determine whether this event represents a new or existing opportunity for packaging work. Logic gate <b>3748</b> acts as a logical IF to determine if the event represents new or existing opportunities.</p>
<p id="p-0386" num="0435">If new, aggregator <b>3606</b> starts a new state machine, and the associated bucket for collecting events and data, depicted as state machine <b>3850</b>, for controlling the work. It must select a template <b>3848</b> (<figref idref="DRAWINGS">FIG. 38</figref>) for the state machine that is appropriate for the particular event. For instance, a failure of a Sonet Ring would be handled differently than a failure of a modem. In the MOC, the state machine is a micro-workflow and description of the life cycle of a telecommunications process. State machine <b>3850</b> performs a number for functions regarding the event, including determining other related events needing to be bundled with the primary event and what events would signify closure of the primary event. Additionally, the state machine might need additional information so the state machine must be equipped to determine the additional information that is needed, such as topology or customer service level agreement (SLA). Finally, the state machine <b>3850</b> must determine what milestones in the life of a particular event are important. The state machine, the events that are to be associated, the milestones, the means of gathering additional information is represented in the template.</p>
<p id="p-0387" num="0436">If, on the other hand, the event represents an existing opportunity, aggregator <b>3606</b> joins the incoming event to running state machine <b>3850</b> that has expressed interest in it. At some point, the state machine ultimately produces a work document and makes this document known (publishes it) to other components via distributor <b>3810</b>. In accordance with another embodiment of the present invention, a behavior engine (rules engine) can be used both to implement logic gate <b>3848</b> and by the state machine to control its actions or to provide some root cause analysis of the problem.</p>
<p id="p-0388" num="0437"><figref idref="DRAWINGS">FIG. 39</figref> is a diagram of a simplified version of a workspace showing a controlling state machine in accordance with an exemplary embodiment of the present invention. Many separate workspaces may exist simultaneously. State machine <b>3850</b> controls the actual work in the aggregator.</p>
<p id="p-0389" num="0438">As can be seen in <figref idref="DRAWINGS">FIG. 39</figref>, state machine <b>3950</b> is responsible for receiving incoming events, binding them together (the tree of E's in the figure) and responding to any state change as a result of the new event, or binding information into the work document (the network of circles in the figure). State machine <b>3950</b> continues operating until closure conditions are reached, which may be based on completeness or time elapsed. Then, state machine <b>3950</b> publishes the work document in some manner (for instance, persist on DataBus or publish via publish/subscribe) and in some agreed-upon form (for instance, XML document or Java objects).</p>
<p id="p-0390" num="0439">The aggregator may be implemented in a number of different ways, even by the functional workings of the other services (i.e., in accordance with one embodiment of the present invention, there is no physical component called the aggregator). When a work task is always present, a resource manager can create the required number of workspaces and state machines. In that case, state machine <b>3950</b> subscribes with the publish/subscribe bus for the events in which it is interested. As such, state machine <b>3950</b> receives the events directly without going through a &#x201c;gate,&#x201d; thus performing the join function implicitly. Additionally, the MOC rendezvous service, discussed below, is used to prevent an event which has gone directly to state machine <b>3950</b> from also causing the creation of a new state machine, thereby also performing the gate function. Finally, the assessor is allowed to create the state machine if the event is determined to be primary and the rendezvous service says it is not being handled already, thus performing the start function of the aggregator.</p>
<p id="p-0391" num="0440">State machines are a common way of handling a process that goes through many states and responds to events, with the response being dependent upon the current state. Many implementations of state machines exist and many that may be applicable to the present invention could have been used here. The MOC implementation follows along somewhat non-traditional lines because the state transactions are not complex, but the determination of the event coming in is. The implementation, then, does not optimize the state transition (as one would see in, for instance, a source code parser).</p>
<p id="p-0392" num="0441">In the normal course of action, the state machine continues operating for the life of the work. This is necessary because, even after the document is produced, related events will still keep coming in and need to be joined to the existing work document. Rather than create a new component for doing this function after the work document was created, the state machine continues to live on its own for:
<ul id="ul0022" list-style="none">
    <li id="ul0022-0001" num="0000">
    <ul id="ul0023" list-style="none">
        <li id="ul0023-0001" num="0442">care staff&#x2014;skills assessment;</li>
        <li id="ul0023-0002" num="0443">customer and network care staff&#x2014;a reference to history of past work;</li>
        <li id="ul0023-0003" num="0444">interactions and success ratings (knowledge base);</li>
        <li id="ul0023-0004" num="0445">data on domains of responsibility (assignments);</li>
        <li id="ul0023-0005" num="0446">physical location; and</li>
        <li id="ul0023-0006" num="0447">availability.
<br/>
One exemplary state machine is implemented as an extension of the base class WorkItemActor. The particulars of this exemplary implementation are that the publication of the document is done through publish/subscribe and after publishing the document, the state machine does not go away.
</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0393" num="0448">With respect to a given enterprise, many state machine templates <b>3852</b> should be developed to handle different classes of problems for the enterprise that share characteristics. With respect to the WorkItemActor state machine example where the enterprise is a telecommunications company, state machines might be developed to handle, for example, SonetLinearFailure, ModemReset, StandbyRequest, and ApplicationRestartFailure. An XML template can then be used to describe the control differences between state machines. The template document contains the settings for milestones, related events, and information to be bound in.</p>
<heading id="h-0045" level="1">Event and Work Item Rendezvous</heading>
<p id="p-0394" num="0449">As mentioned above, the MOC depends on a rendezvous service to tell if an event is being handled by a work item (or a state machine controlling a work item), represented in <figref idref="DRAWINGS">FIG. 36</figref> as rendezvous <b>3616</b>. A rendezvous service is responsible for determining if a given event is already being handled and if the problem represented by a work item document overlaps with an existing work item document. It then routes that event to the proper work item. The client role of the rendezvous service dynamically registers work-items for subscriptions to related events. It also finds if any specific event is already registered in the service register as being processed by a state machine/workspace. The server side continuously skims the service register for work items which should be informed of each other or joined into one work process unit.</p>
<p id="p-0395" num="0450">As with many other MOC components, many rendezvous services can be deployed simultaneously in a MOC environment. Rendezvous service <b>3616</b> can use rules to make its determinations, or any appropriate logic. Different rendezvous services may be deployed with different rules for determining overlap by different parameters. For instance, different services could consult different views of topology, for instance, one service could look at layer 2, a second a layer 3, a third looking only at cross domain interactions. By deploying many such rendezvous services, and by allowing work documents already started to be merged together, it is not necessary to apply all rendezvous rules before starting work. Therefore, some rendezvous rules could be quite slow and still result in alerting people to the fact that a problem spans multiple areas. Asynchronous processing allows parallel work to occur in a dynamic environment, at its own pace, and then be merged with other work upon reaching a certain resolution.</p>
<p id="p-0396" num="0451">In accordance with an uncomplicated implementation of rendezvous service <b>3616</b>, it applies simple rules to determine if an event has been handled and if there is overlap between different work item documents. Rendezvous service <b>3616</b> dynamically subscribes with publish/subscribe services to be made aware of any new work item document as the item is created (but before it is published for all). Rendezvous service <b>3616</b> pulls the events off of the document and keeps an index of events based on their type and based on the network element affected. Whenever it is asked about a new event, it can compare the new event against the network element to see if any existing work item document references that element.</p>
<heading id="h-0046" level="1">The Work Document</heading>
<p id="p-0397" num="0452">WorkItem <b>3630</b> in <figref idref="DRAWINGS">FIG. 36</figref> holds all of the objects, or references to the objects, associated with the item of work (i.e., the problem described in the initial event that is being addressed). In accordance with an exemplary embodiment of the present invention, WorkItem <b>3630</b> will have many types of objects, bound in, including:
<ul id="ul0024" list-style="none">
    <li id="ul0024-0001" num="0000">
    <ul id="ul0025" list-style="none">
        <li id="ul0025-0001" num="0453">events&#x2014;the primary event and associated/correlated events;</li>
        <li id="ul0025-0002" num="0454">status information describing the current state of the problem resolution, for instance, status, probable cause, priority, time to resolve, actual cause;</li>
        <li id="ul0025-0003" num="0455">informational objects, such as:
        <ul id="ul0026" list-style="none">
            <li id="ul0026-0001" num="0456">customer information and service level agreement information;</li>
            <li id="ul0026-0002" num="0457">topology information;</li>
            <li id="ul0026-0003" num="0458">basic instructions regarding the problem;</li>
            <li id="ul0026-0004" num="0459">progress notes; and</li>
            <li id="ul0026-0005" num="0460">sundry information such as configuration information on the elements in question;</li>
        </ul>
        </li>
        <li id="ul0025-0004" num="0461">user avatars for the people participating in the work group;</li>
        <li id="ul0025-0005" num="0462">proxies to devices or services related to the problem, for instance, a proxy to the device or agent for the device that is reporting the problem; and</li>
        <li id="ul0025-0006" num="0463">tools needed to resolve the problem, including collaboration tools for interacting with the work group, or getting information about the problem elements.</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0398" num="0464">It should be understood that some of the information in Workspace <b>3940</b> and Work Item <b>3630</b> are required to be persisted permanently, or for some time, while other objects need only be in memory where they can be accessed. In accordance with one embodiment of the present invention, the work document is the DataBus-enabled WorkItem (implemented, according to DataBus standards, as the WorkItemBean class and related classes). There, WorkItem <b>3630</b> is completely persisted on the DataBus. With respect to an alternative embodiment, a technique similar to the Jini Registrar and the Jini JavaSpace is employed for storing any serializable object and also attaching external &#x201c;attributes&#x201d; to be used when looking for the object (a serializable object, as described above, is an object which Java is able to &#x201c;serialize&#x201d; the object in a form suitable for storing or transporting across processes&#x2014;this is a standard Java technique). The external attributes are selected by the storer.</p>
<heading id="h-0047" level="1">The Workspaces</heading>
<p id="p-0399" num="0465">Similar to WorkItem <b>3630</b>, the MOC design has the concept of the work group space Workspace <b>3940</b>, a space for the work group collaborating on a problem to share relevant objects. This allows the client's avatars to interact as if the workspace were a peer-to-peer environment. One implementation is to convert WorkItem <b>3630</b> into an in-memory work group space with a simple interface for finding objects and retrieving them, and a persistent work item document for persisting data about the work item. This is an in-memory shared space capable of holding objects that the participants may need, including:
<ul id="ul0027" list-style="none">
    <li id="ul0027-0001" num="0000">
    <ul id="ul0028" list-style="none">
        <li id="ul0028-0001" num="0466">the work item document itself;</li>
        <li id="ul0028-0002" num="0467">proxies to user avatars for communicating with other participants;</li>
        <li id="ul0028-0003" num="0468">work flow objects;</li>
        <li id="ul0028-0004" num="0469">an active object controlling the lifecycle;</li>
        <li id="ul0028-0005" num="0470">proxies to intelligent devices and agents for devices to directly interact with these devices;</li>
        <li id="ul0028-0006" num="0471">user interfaces to access the work item information (allowing different user interfaces for different roles&#x2014;technical support, customer support, etc.); and</li>
        <li id="ul0028-0007" num="0472">collaboration tools.</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0400" num="0473">The work group space must support the putting of objects into and the getting of objects from the space, the remote downloading of the classes needed to use the objects, the registration for and notification of events relating to the objects, and the tailoring of the contents of the space to the particular problem using rules. These concepts are features of the NewWave infrastructure and GIB architecture, and are easily implemented. Alternatively, with the exception of the rules, this resembles the responsibilities of a Jini JavaSpace, which could be also used as a component in implementing a workspace.</p>
<p id="p-0401" num="0474">WorkItem <b>3630</b> is very similar to the work space concept of the present invention and performs most functions of the work this function; however, as a DataBus object, WorkItem <b>3630</b> is not practical to support those objects that are not really intended to be persistent. In accordance with an exemplary embodiment of the present invention, there are three alternative implementations of the work group space. The first implementation is a NewWave service, described in detail above, registers itself in the domain registrar and the enterprise repository. This implementation allows the work group to be accessed via normal administrative tools for services; however, large numbers of work group spaces could get unwieldy. A second implementation involves creating an in-memory DataBus object. This would scale well to large numbers, but would not be directly accessible via normal service administrative methods. Finally, the work group can be implemented as a JavaSpace. This would require the addition of proxies so that one JavaSpace could service a number of work group spaces.</p>
<heading id="h-0048" level="1">Creating a Work Group to Handle the Event user Avatar Service (user Proxy)</heading>
<p id="p-0402" num="0475">In accordance with an exemplary embodiment of the present invention, contacts (e.g., Operators, Provisions, Customer Contacts, Service Support staff, any other management-tasked staff in the customer and network care environment, Customers, etc.) may participate in the resolution of, or may need notification of, WorkItem <b>3630</b>. As such, it is necessary to understand what the operations staff is currently working on real-time, what the task priority is, and when is it due to be completed&#x2014;workload, and how to route messages and work to a contact.</p>
<p id="p-0403" num="0476">In some cases, additional information is needed in order to support the dispatching function of the MOC:
<ul id="ul0029" list-style="none">
    <li id="ul0029-0001" num="0000">
    <ul id="ul0030" list-style="none">
        <li id="ul0030-0001" num="0477">for care staff&#x2014;skills assessment;</li>
        <li id="ul0030-0002" num="0478">for customer and network care staff&#x2014;a reference to history of past work, interactions, and success ratings (knowledge base);</li>
        <li id="ul0030-0003" num="0479">data on domains of responsibility (assignments);</li>
        <li id="ul0030-0004" num="0480">physical location; and</li>
        <li id="ul0030-0005" num="0481">availability.</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0404" num="0482">Contact data can then be saved in an appropriate location, for instance, persisted within a Contact DataBus Entity.</p>
<p id="p-0405" num="0483">The user avatar is a representation of a person as a service, invoke-able by other software services; a virtualization of the individual, the current state of the individual and the current interface to the individual. In accordance with an exemplary embodiment of the present invention, a user avatar, depicted as user avatar <b>3604</b> on <figref idref="DRAWINGS">FIG. 36</figref> represents a virtual image of a specific operator's or customer contact's skills and responsibilities. A user avatar is depicted as user avatar <b>3604</b> on <figref idref="DRAWINGS">FIG. 36</figref> that serves as a proxy for a contact within the MOC. Optimally, each contact has an associated user avatar. This concept is better understood with respect to <figref idref="DRAWINGS">FIG. 40</figref> that depicts a user avatar in accordance with an exemplary embodiment of the present invention.</p>
<p id="h-0049" num="0000">Lookup</p>
<p id="p-0406" num="0484">Each UA <b>4012</b> registers in registration service <b>4022</b>, which may be a domain registrar, started with group &#x201c;Users.&#x201d; UA <b>4012</b> is registered with attributes including primary key (PK), login ID and name. Any service requesting information from, or sending messages or work to, UA <b>4012</b> locates this proxy using existing NewWave protocols for lookup described above.</p>
<p id="h-0050" num="0000">Contact DataBus Entity</p>
<p id="p-0407" num="0485">UA <b>4012</b> is initially populated from the Contact DataBus Entity stored in DataBus <b>4024</b>. Once created, UA <b>4012</b> has the ability to synchronize its data with the DataBus. Additionally, UA <b>4012</b> provides &#x201c;helper&#x201d; convenience methods so that data persisted with the Contact DataBus Entity can be accessed through UA <b>4012</b>.</p>
<p id="h-0051" num="0000">Contact Means</p>
<p id="p-0408" num="0486">As a proxy to the contact, the User Avatar knows all available contact means for a contact and is responsible for forwarding all communications, messages and work to the contact via the appropriate contact mean(s). All logon/logoff requests from the WorkSpace applet (GUI) will be made through UA <b>4012</b>. A remote proxy to the WorkSpace will be retained as an available contact mean after a &#x201c;logon&#x201d; request from the WorkSpace GUI has been successfully processed. Likewise, all logon/logoff requests from the PDA service will be made through UA <b>4012</b>. Again, a proxy to the PDA Service will be retained as an available contact mean once a &#x201c;logon&#x201d; request from the PDA service is successfully processed. Other contact means supported by the current implementation include text messages sent to pagers via email, text messages sent to cellular phones via email, and email.</p>
<p id="p-0409" num="0487">UA <b>4012</b> is also responsible for determining whether a message should be sent via one or more available contact means. This determination is made by evaluating the priority of the message or work. More urgent messages may be distributed via multiple, or even all, available contact means.</p>
<p id="h-0052" num="0000">Workload</p>
<p id="p-0410" num="0488">In addition to providing a communication vehicle for a Contact, UA <b>4012</b> knows what a Contact is currently working on (workload). Workload is primarily used by dispatching function <b>3608</b> to determine the &#x201c;most available&#x201d; Contact to participate in the resolution of a WorkItem. Workload is provided by the UserAvatar as XML. Again, workload is defined as what the operations staff is currently working on real-time, the task priority, and when is it due to be completed. Individuals can be participants in more than one workspace at the same time. The UA sees/stores this collection of work of an individual and the workspace client for an individual can reference any work-item for which an invitation is active and/or accepted.</p>
<p id="h-0053" num="0000">Subscriptions</p>
<p id="p-0411" num="0489">UA <b>4012</b> has the ability to publish and subscribe via the GIB's pub/sub bus <b>3618</b>. In the MOC, UA <b>4012</b> subscribes for WorkItem status changes so that UA <b>4012</b> can forward status change messages to the Contact via the available contact means. Contacts also subscribe for items of interest within the MOC via their established contact means. These subscriptions are established with UA <b>4012</b> as profile information. Once UA <b>4012</b> receives a subscribed item, it is responsible for forwarding the corresponding messages in the proper format to the Contact via the established contact mean(s).</p>
<p id="h-0054" num="0000">Statistics</p>
<p id="p-0412" num="0490">UA <b>4012</b>, just as every other MOC service, implements the MOC's Service Admin interface, and provides statistics as XML including health/heartbeat, and additionally, the MOC specific statistics such as workload and profile information (current subscriptions, contact means, etc.).</p>
<heading id="h-0055" level="1">Avatar Service (Generic Service)</heading>
<p id="p-0413" num="0491">In the MOC, avatar service <b>4013</b> serves as a container for UA(s) <b>4012</b>. Optimally, one avatar service is deployed for each Contact logical domain. Avatar service <b>4013</b> has all of the behavior associated with a NewWave service and therefore can initially create and register (with the domain registrar) the user avatar(s), in addition to maintaining user avatar(s) leases with the registrar. Finally, avatar service <b>4013</b> provides convenience methods to the DataBus for the user avatar synchronization functions.</p>
<p id="h-0056" num="0000">Dispatcher Service</p>
<p id="p-0414" num="0492">As discussed above, the GIB architecture implements &#x201c;policy-based&#x201d; rules that can be modified in &#x201c;near-real-time&#x201d; to handle predicate logic requirements. Various off-the-shelf services might be integrated into the GIB architecture to provide this functionality (i.e., the Brokat product(s), Advisor Builder and Advisor Rule Engine). Below is an exemplary description of the function of the dispatching rules in accordance with an exemplary embodiment of the present invention. It should be understood that the account detailed below is merely exemplary and any specific policy might be applied to any policy based MOC component. Also, policy can be implemented in any rules agent as a relocatable service, including as a java object.</p>
<p id="p-0415" num="0493">It should also be noted that the data, rules, subscriptions, and templates for this described exemplary implementation of the dispatcher service have been limited in scope to a particular telecommunications challenge business scenario to aid in explanation (actual rule sets can be quite large). As such, this explanation is intended to describe this service as a participant in the Management Operations Center (MOC). No attempt has been made to describe all data, rules, subscriptions, and templates needed to support all policy functions necessary for the MOC.</p>
<p id="p-0416" num="0494">The Dispatcher Service (GenericGIBService) provides the MOC the ability to:
<ul id="ul0031" list-style="none">
    <li id="ul0031-0001" num="0000">
    <ul id="ul0032" list-style="none">
        <li id="ul0032-0001" num="0495">1. apply current policy rules to associate work documents and events with specific operators, customer contacts and other service care staff;</li>
        <li id="ul0032-0002" num="0496">2. assign work (WorkItems) with an understanding of who is free and able to do that work;</li>
        <li id="ul0032-0003" num="0497">3. understand relative priority and can bump work in progress for higher priority tasks; and</li>
        <li id="ul0032-0004" num="0498">4. identify Customer Contact(s) that should be notified of WorkItems based on their Service Level Agreement (SLA).</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0417" num="0499">The Dispatcher Service accomplishes the above stated objectives by implementing the following functions:</p>
<p id="h-0057" num="0000">1. Register to Receive WorkItem Change Events via the Publish/subscribe Bus.</p>
<p id="p-0418" num="0500">As a GenericGIBService, the Dispatcher Service inherits the ability to participate in the publish/subscribe bus. Upon service start-up, the Dispatcher Service registers as a subscriber for WorkItem Events that include, but are not limited to:
<ul id="ul0033" list-style="none">
    <li id="ul0033-0001" num="0000">
    <ul id="ul0034" list-style="none">
        <li id="ul0034-0001" num="0501">WorkItems that have had a status change such as &#x201c;opened&#x201d; or &#x201c;escalated&#x201d;;</li>
        <li id="ul0034-0002" num="0502">WorkItems whose key information has changed requiring a rerun of the dispatching rules;</li>
        <li id="ul0034-0003" num="0503">Invitations to participate in a WorkItem that have been &#x201c;declined&#x201d; by a candidate Contact; and</li>
        <li id="ul0034-0004" num="0504">Invitations that have &#x201c;expired&#x201d; (i.e., not accepted or declined by a candidate contact), and need to have an alternate contact assigned to the associated role.</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0419" num="0505">Once the Dispatcher Service receives a WorkItem Event, it is ready to run the dispatching rules. As a GenericGIBService, the Dispatcher Service inherits the ability to directly interface with a behavior (rules) engine. The current Dispatcher Service implements the Brokat products to define, via Brokat Advisor, and then process, via Brokat Rules Engine, the dispatching rules.</p>
<p id="h-0058" num="0000">2. Run Dispatching Rules.</p>
<p id="p-0420" num="0506">The Dispatcher Service passes the WorkItem to the rules engine for processing. Upon receipt of the WorkItem, the dispatching rules must determine which rules, e.g. rules agent, to run based on the type of WorkItem Event. It is important to understand that this function would run at every milestone in the controlling state machine. In most cases, the first task is for the rule engine to determine:</p>
<p id="p-0421" num="0507">1. Identification of Contacts that Need to Participate in the WorkItem.</p>
<p id="p-0422" num="0508">The dispatching rules are responsible for determining which contacts need to be invited to participate in, and ultimately resolve, the WorkItem. In order to define the participation needed to resolve the WorkItem, rules identify roles to be filled by &#x201c;appropriately skilled&#x201d; Contact(s). The roles are determined by rules that evaluate the Workltem's data. Although the WorkItem contains comprehensive information, the event data currently evaluated by the dispatching rules for the purpose of determining roles includes:
<ul id="ul0035" list-style="none">
    <li id="ul0035-0001" num="0000">
    <ul id="ul0036" list-style="none">
        <li id="ul0036-0001" num="0509">the primary event type;</li>
        <li id="ul0036-0002" num="0510">the primary event location;</li>
        <li id="ul0036-0003" num="0511">the type of equipment involved; and</li>
        <li id="ul0036-0004" num="0512">the severity of the primary event.</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0423" num="0513">An example of the roles identified, via rules, for a Sonet Linear Failure network event have been included BELOW:
<ul id="ul0037" list-style="none">
    <li id="ul0037-0001" num="0000">
    <ul id="ul0038" list-style="none">
        <li id="ul0038-0001" num="0514">if the currentWorkItem.primaryEventType &#x201c;Sonet Linear Failure&#x201d;</li>
        <li id="ul0038-0002" num="0515">assign role=&#x201c;Router Technician&#x201d;</li>
        <li id="ul0038-0003" num="0516">assign role=&#x201c;Customer Service Representative&#x201d;</li>
        <li id="ul0038-0004" num="0517">assign role=&#x201c;Transport Engineer&#x201d;</li>
        <li id="ul0038-0005" num="0518">assign role=&#x201c;Dispatch Truck&#x201d;</li>
        <li id="ul0038-0006" num="0519">assign role=&#x201c;Supervisor&#x201d;</li>
        <li id="ul0038-0007" num="0520">end if</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0424" num="0521">In addition to evaluating the event data on the WorkItem, the dispatching rules evaluate customers who have been impacted by the event(s). Impacted customers and their corresponding Service Level Agreement information have been bound into the WorkItem prior to receipt of the WorkItem by the Dispatcher Service. The dispatching rules determine whether direct customer participation in the WorkItem is required. Additionally, the dispatching rules determine whether it is necessary to assign a Contact specifically to the impacted customer. The customer participation rules evaluate:
<ul id="ul0039" list-style="none">
    <li id="ul0039-0001" num="0000">
    <ul id="ul0040" list-style="none">
        <li id="ul0040-0001" num="0522">the customer's Service Level Agreement (SLA) to determine whether their notification of the WorkItem is required; or</li>
        <li id="ul0040-0002" num="0523">whether the customer has been located on the customer service special handling list.</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0425" num="0524">A WorkItem status change may identify additional roles through the involvement of additional rules. In the case of the milestone, WorkItem &#x201c;escalated&#x201d; status change, management and more highly-skilled personnel may be invited to participate in the WorkItem via the dispatching rules.</p>
<p id="p-0426" num="0525">Once the roles have been identified by the dispatching rules, a second set of rules are run to determine the &#x201c;most appropriate&#x201d; Contact(s) to fill the roles. Contacts can be defined as interested parties, not limited to people, that have been identified by the dispatching rules as being available for participation in a particular WorkItem. In order to determine the &#x201c;most appropriate&#x201d; Contact(s), the dispatching rules perform pattern matches on Contacts' characteristics. In this exemplary Dispatcher Service implementation, the dispatching rules define Contact characteristics as:
<ul id="ul0041" list-style="none">
    <li id="ul0041-0001" num="0000">
    <ul id="ul0042" list-style="none">
        <li id="ul0042-0001" num="0526">skills&#x2014;Does the Contact possess the appropriate skill type and level to fulfill the role?</li>
        <li id="ul0042-0002" num="0527">experiences&#x2014;Has this Contact solved this problem or a problem like this before&#x2014;history?</li>
        <li id="ul0042-0003" num="0528">assignments&#x2014;Is this Contact currently assigned to this Customer, Vendor, System, or piece of equipment?</li>
        <li id="ul0042-0004" num="0529">physical location&#x2014;Does the fulfillment of this role require physical proximity to the event location?</li>
        <li id="ul0042-0005" num="0530">availability&#x2014;Does the Contact's current workload allow participation in the WorkItem?</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0427" num="0531">2. Invitation Creation</p>
<p id="p-0428" num="0532">As each candidate Contact is identified by the rules, a function is invoked to create an Invitation object and bind it to the WorkItem. Each Invitation contains base WorkItem information, such as event type, priority, contact's proposed role, contact's ID and WorkItem ID. The initial invitation status is &#x201c;ready for dispatch.&#x201d;</p>
<p id="p-0429" num="0533">3. Instructions/Scripts Bound into the WorkItem</p>
<p id="p-0430" num="0534">The dispatching rules evaluate the roles, customers' SLAs, and event information to determine whether instructions or scripts need to be bound into the WorkItem for the candidate contacts. Once all contacts have been identified, invitations have been created, and instructions have been bound into the WorkItem, the dispatching rules engine returns to the Dispatcher Service for further processing.</p>
<p id="p-0431" num="0535">3. Dispatch the Invitation to the Contact's Proxy.</p>
<p id="p-0432" num="0536">The Dispatcher Service queries the WorkItem for a list of invitations that need to be dispatched and then performs a registrar lookup for the Contact's proxy (UserAvatar) by Contact ID. Upon return of the contact proxy from lookup, the Dispatcher Service performs a &#x201c;send&#x201d; request passing the invitation. The contact proxy is responsible for determining where the invitation should be sent and how it should be formatted.</p>
<p id="h-0059" num="0000">Distributor Services</p>
<p id="p-0433" num="0537">In accordance with an exemplary embodiment of the present invention, messages in the Management Operations Center (MOC) need to be distributed to contacts. Within the MOC, messages take several formats: XML, HTML, text, and direct communication with a remote proxy. The messages may be disbursed via a variety of communication mechanisms: PDA, email (WorkSpace servlet), pager, mobile phone, and WorkSpace GUI Client (applet).</p>
<p id="p-0434" num="0538">In order to support the MOC requirement of distributing messages to Contacts using such varied communication mechanisms, adapters have been developed by the team. Adapters are Generic Services that register with a domain registrar. As Generic Services, they inherit all associated behavior. Two such adapters are described below.</p>
<p id="h-0060" num="0000">Distributor Message Service</p>
<p id="p-0435" num="0539">The Distributor Message Service of the MOC is responsible for distributing messages via email. This exemplary implementation of the Distributor Service implements the Java Mail classes and distributes messages to mobile phones, pagers, and email.</p>
<p id="p-0436" num="0540">The Distributor Service implements a simple interface with one public method for sending messages. The send method takes two parameters, the first indicating whether the message is to be sent in HTML or text format, and the second parameter is the message to be sent.</p>
<p id="h-0061" num="0000">PDA Adapter Service</p>
<p id="p-0437" num="0541">The PDA Adapter, a service of the MOC, is responsible for distributing messages to a PDA client. This exemplary implementation of the PDA Adapter distributes XML messages to the PDA.</p>
<p id="p-0438" num="0542">The PDA Adapter implements a simple interface with one public method for sending messages. The send method takes a single parameter which is the message to be sent.</p>
<p id="h-0062" num="0000">Archiving Work Documents</p>
<p id="p-0439" num="0543">When a work item is closed, the experience of the people who participated in the work group needs to be updated. An archive service is provided for this and any other cleanup activity that is needed. In fact, multiple archive services could be deployed, each doing different activities such as one concentrating solely on updating experiences; packaging up the work item for long-term storage; calculating statistics for trend analysis, etc.</p>
<p id="p-0440" num="0544">The exemplary archive service implementation for the MOC performs a simple calculation on the experience level of each person in the role played in the work group. Each time a person participates in a successful resolution of the problem, that person's experience level is modified according to the following formula: current+((max&#x2212;current)*0.5). This gives the person a lot of credit the first time that person is successful, but less credit each time until the score is close to the maximum.</p>
<p id="p-0441" num="0545">The description of the present invention has been presented for purposes of illustration and description, but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art. The embodiment was chosen and described in order to best explain the principles of the invention, the practical application of the invention and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A method for implementing a Global Information Bus (GIB) system for managing a global ecosystem of interrelated services in an enterprise, the method comprising:
<claim-text>deploying a service in a network domain, the enterprise comprising a plurality of non-local network domains in addition to the network domain, where each network domain is at least partially defined by a multicast radius;</claim-text>
<claim-text>discovering a domain registrar, the domain registrar being in the network domain and where discovery of the domain registrar is based on the multicast radius of the network domain;</claim-text>
<claim-text>registering the service with the domain registrar by passing information related to the service to the domain registrar, said information related to the service being one of location information for the domain registrar in the network domain where the service is registered or an implementation interface, and where said information is only visible to a client in the network;</claim-text>
<claim-text>finding a global lookup in the enterprise, the global lookup being outside the network domain; and</claim-text>
<claim-text>listing the service with the global lookup by passing information related to the service to the global lookup, said information related to the service being visible to a client in the enterprise.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method recited in <claim-ref idref="CLM-00001">claim 1</claim-ref>, where deploying a service in a network domain further comprises launching said service in a container running in the network domain.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method recited in <claim-ref idref="CLM-00002">claim 2</claim-ref>, where launching said service in a container running in the network domain further comprises:
<claim-text>receiving location information for a service code for implementing the service; and</claim-text>
<claim-text>fetching said service code based on the location information.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method recited in <claim-ref idref="CLM-00003">claim 3</claim-ref> further comprising:
<claim-text>selecting the container running in the network domain.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method recited in <claim-ref idref="CLM-00001">claim 1</claim-ref>, where discovering a domain registrar in the network domain is performed by the service and further comprises:
<claim-text>pinging the network domain for the domain registrar; and</claim-text>
<claim-text>receiving a response from the domain registrar in the network domain, where the response includes location information for the domain registrar.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method recited in <claim-ref idref="CLM-00005">claim 5</claim-ref>, where the location information is a Universal Resource Locator (URL) for the domain registrar.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The method recited in <claim-ref idref="CLM-00001">claim 1</claim-ref>, where said information related to the service passed to the domain registrar is a proxy object for the service.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The method recited in <claim-ref idref="CLM-00001">claim 1</claim-ref>, where said information related to the service passed to the domain registrar is one of a service attribute or administrative information to the domain registrar.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The method recited in <claim-ref idref="CLM-00008">claim 8</claim-ref>, where a service attribute comprises one of service identity information, domain information or implementing interface.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The method recited in <claim-ref idref="CLM-00008">claim 8</claim-ref>, where administrative information comprises one of a display icon or a user interface object.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The method recited in <claim-ref idref="CLM-00001">claim 1</claim-ref>, where finding a global lookup in the enterprise is performed by the service and further comprises:
<claim-text>looking up location information for a global lookup finding service in the domain registrar.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The method recited in <claim-ref idref="CLM-00011">claim 11</claim-ref>, where listing the service with the global lookup further comprises:
<claim-text>passing the information related to the service from the service to the global lookup finding service; and</claim-text>
<claim-text>passing the information related to the service from the global lookup finding service to the global lookup.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The method recited in <claim-ref idref="CLM-00012">claim 12</claim-ref>, where information related to the service is one of a proxy reference for the service, service attributes for the service, location information for the domain registrar in the network domain where the service is registered, or an implementation interface.</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The method recited in <claim-ref idref="CLM-00011">claim 11</claim-ref>, where listing the service with the global lookup further comprises:
<claim-text>passing the location information for the global lookup from the global lookup service to the service; and</claim-text>
<claim-text>passing the information related to the service from the service to the global lookup.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The method recited in <claim-ref idref="CLM-00001">claim 1</claim-ref>, where listing the service with the global lookup further comprises passing a proxy reference for the service to the global lookup.</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The method recited in <claim-ref idref="CLM-00001">claim 1</claim-ref>, where deploying a service in a network domain further comprises:
<claim-text>finding a service container running in the network domain; and</claim-text>
<claim-text>launching said service in a container service.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The method recited in <claim-ref idref="CLM-00016">claim 16</claim-ref>, where finding a service container further comprises:
<claim-text>looking up location information for a suitable service container in a global repository based on an attribute for the service container, said attribute being listed in the global repository.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The method recited in <claim-ref idref="CLM-00016">claim 16</claim-ref>, where launching said service in a container service further comprises:
<claim-text>passing service code location information for a service code for implementing the service to the service container, where said service container fetches the service code based on the service code location information.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. The method recited in <claim-ref idref="CLM-00001">claim 1</claim-ref> further comprises:
<claim-text>deploying an additional service in another network domain in the plurality of network domains;</claim-text>
<claim-text>registering the additional service with another domain registrar;</claim-text>
<claim-text>finding the global lookup in the enterprise; and</claim-text>
<claim-text>listing the additional service with the global lookup.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. The method recited in <claim-ref idref="CLM-00001">claim 1</claim-ref> further comprising:
<claim-text>creating an enterprise lease for the service with the domain registrar.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00021" num="00021">
<claim-text>21. The method recited in <claim-ref idref="CLM-00020">claim 20</claim-ref> where creating an enterprise lease with the domain registrar further comprises specifying a lease period for the service.</claim-text>
</claim>
<claim id="CLM-00022" num="00022">
<claim-text>22. The method recited in <claim-ref idref="CLM-00021">claim 21</claim-ref> further comprising:
<claim-text>renewing the enterprise lease for the service with the domain registrar.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00023" num="00023">
<claim-text>23. The method recited in <claim-ref idref="CLM-00021">claim 21</claim-ref> further comprises:
<claim-text>determining that the lease period for the enterprise lease lapsed; and</claim-text>
<claim-text>de-registering the service with the domain registrar, where the information related to the service at the domain registrar is not visible to a client in the network domain.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00024" num="00024">
<claim-text>24. The method recited in <claim-ref idref="CLM-00023">claim 23</claim-ref> further comprising:
<claim-text>monitoring the information related to the service at the domain registrar;</claim-text>
<claim-text>determining that the service has been de-registered with the domain registrar; and</claim-text>
<claim-text>deleting information related to the service from the global lookup.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00025" num="00025">
<claim-text>25. The method recited in <claim-ref idref="CLM-00024">claim 24</claim-ref> further comprising:
<claim-text>monitoring enterprise leases created with the domain registrar;</claim-text>
<claim-text>determining that the service has been de-registered with the domain registrar;</claim-text>
<claim-text>re-deploying the service in another network domain in the enterprise based on the service being de-registered with the domain registrar;</claim-text>
<claim-text>discovering another domain registrar in the other network domain, where the other network domain is one of the plurality of network domains in the enterprise;</claim-text>
<claim-text>registering the service with the other domain registrar;</claim-text>
<claim-text>finding the global lookup in the enterprise; and</claim-text>
<claim-text>listing the service with the global lookup.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00026" num="00026">
<claim-text>26. The method recited in <claim-ref idref="CLM-00024">claim 24</claim-ref> further comprising:
<claim-text>deploying another service in a network domain, where the enterprise comprises a plurality of network domains;</claim-text>
<claim-text>discovering a domain registrar in the network domain; and</claim-text>
<claim-text>registering the other service with the domain registrar, where the other service is only visible to a client in the network domain.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00027" num="00027">
<claim-text>27. The method recited in <claim-ref idref="CLM-00017">claim 17</claim-ref>, where the attribute for the service container listed in said global repository relates to one of resource availability or loading.</claim-text>
</claim>
<claim id="CLM-00028" num="00028">
<claim-text>28. The method recited in <claim-ref idref="CLM-00016">claim 16</claim-ref>, where the service container is a generic service container comprising a CPU process executed on a host server into which an arbitrary service is homed at runtime.</claim-text>
</claim>
<claim id="CLM-00029" num="00029">
<claim-text>29. A method for implementing a Global Information Bus (GIB) system for managing a global ecosystem of interrelated services in an enterprise, the method comprising:
<claim-text>defining a plurality of network domains, each of a plurality of network domains comprising a plurality of host servers, where each of the plurality of network domains is partially defined by a multicast radius;</claim-text>
<claim-text>homing a plurality of arbitrary services on each of the plurality of host servers;</claim-text>
<claim-text>registering a first arbitrary service of the plurality of arbitrary services in a first network domain of the plurality of network domains in which the first arbitrary service is running, where the first arbitrary service is visible to a client running within the first network domain and not visible to a client running outside the first network domain based on the multicast radius of the first network domain; and</claim-text>
<claim-text>registering a second arbitrary service of the plurality of arbitrary services, where the registering comprises listing the second arbitrary service with a global lookup service that provides enterprise-wide visibility for services listed within the global lookup service, where the second arbitrary service is registered in a second network domain of the plurality of network domains in which the second arbitrary service is running, and where the second arbitrary service is visible to a client running within the second network domain and visible to a client running outside the second network domain.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00030" num="00030">
<claim-text>30. The method recited in <claim-ref idref="CLM-00029">claim 29</claim-ref>, where the first network domain and the second network domain are the same network domain.</claim-text>
</claim>
<claim id="CLM-00031" num="00031">
<claim-text>31. The method recited in <claim-ref idref="CLM-00029">claim 29</claim-ref>, where the first network domain and the second network domain are unique network domains.</claim-text>
</claim>
<claim id="CLM-00032" num="00032">
<claim-text>32. The method recited in <claim-ref idref="CLM-00029">claim 29</claim-ref> further comprising:
<claim-text>running a plurality of generic service containers on each of the plurality of host servers, where each of the plurality of arbitrary services is homed to a generic service container on each of the plurality of host servers.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00033" num="00033">
<claim-text>33. A program product embodied on a non-transitory computer processing system readable medium, having instructions executable by at least one processor, for implementing a method for implementing a Global Information Bus (GIB) system for managing a global ecosystem of interrelated services in an enterprise, the program product comprising:
<claim-text>instructions, when executed by the at least one processor, cause the processor to:
<claim-text>deploy a service in a network domain, where the enterprise comprises a plurality of network domains and each network domain is at least partially defined by a multicast radius;</claim-text>
<claim-text>discover a domain registrar, where the domain registrar is in the network domain and where discovery of the domain registrar is based in part on the multicast radius of the network domain;</claim-text>
<claim-text>register the service with the domain registrar by passing information related to the service to the domain registrar, where said information related to the service is visible to a client from the domain registrar and comprises a proxy reference for the service, service attributes for the service, location information for the domain registrar in the network domain where the service is registered, or an implementation interface, the service being visible only to a client in the network domain;</claim-text>
<claim-text>find a global lookup in the enterprise, where the global lookup is outside the network domain; and</claim-text>
<claim-text>list the service with the global lookup by passing information related to the service to the global lookup, where said information related to the service is visible to a client in the enterprise.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00034" num="00034">
<claim-text>34. The program product recited in <claim-ref idref="CLM-00033">claim 33</claim-ref>, where the instructions for deploying a service in a network domain further comprise instructions for launching said service in a container when the container is running in the network domain.</claim-text>
</claim>
<claim id="CLM-00035" num="00035">
<claim-text>35. The program product recited in <claim-ref idref="CLM-00034">claim 34</claim-ref>, where the instructions for launching said service in the container running in the network domain, when executed by the at least one processor, cause the processor to:
<claim-text>receive location information for a service code for implementing the service; and</claim-text>
<claim-text>fetch said service code based on the location information.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00036" num="00036">
<claim-text>36. The program product recited in <claim-ref idref="CLM-00035">claim 35</claim-ref>, further comprising, instructions, when executed by the at least one processor, cause the process to:
<claim-text>select the container running in the network domain.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00037" num="00037">
<claim-text>37. The program product recited in <claim-ref idref="CLM-00033">claim 33</claim-ref>, where the instructions for discovering a domain registrar in the network domain are performed by the service, when executed by the at least one processor, cause the processor to:
<claim-text>ping the network domain for the domain registrar; and</claim-text>
<claim-text>receive a response from the domain registrar in the network domain, where the response includes location information for the domain registrar.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00038" num="00038">
<claim-text>38. The program product recited in <claim-ref idref="CLM-00033">claim 33</claim-ref>, where the location information is a Universal Resource Locator (URL) for the domain registrar.</claim-text>
</claim>
<claim id="CLM-00039" num="00039">
<claim-text>39. The program product recited in <claim-ref idref="CLM-00037">claim 37</claim-ref>, where said information related to the service passed to the domain registrar is a proxy object for the service.</claim-text>
</claim>
<claim id="CLM-00040" num="00040">
<claim-text>40. The program product recited in <claim-ref idref="CLM-00033">claim 33</claim-ref>, where said information related to the service passed to the domain registrar is one of a service attribute or administrative information related to the domain registrar.</claim-text>
</claim>
<claim id="CLM-00041" num="00041">
<claim-text>41. The program product recited in <claim-ref idref="CLM-00040">claim 40</claim-ref>, where a service attribute comprises one of service identity information, domain information or an implementing interface.</claim-text>
</claim>
<claim id="CLM-00042" num="00042">
<claim-text>42. The program product recited in <claim-ref idref="CLM-00040">claim 40</claim-ref>, where the administrative information comprises one of a display icon or a user interface object.</claim-text>
</claim>
<claim id="CLM-00043" num="00043">
<claim-text>43. The program product recited in <claim-ref idref="CLM-00033">claim 33</claim-ref>, where the instructions for finding a global lookup in the enterprise are performed by the service, when executed by the at least one processor, cause the processor to:
<claim-text>look up a location for a global lookup finding service in the domain registrar.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00044" num="00044">
<claim-text>44. The program product recited in <claim-ref idref="CLM-00043">claim 43</claim-ref>, where the instructions for listing the service with the global lookup, when executed by the at least one processor, cause the processor to:
<claim-text>pass the information related to the service from the service to the global lookup finding service; and</claim-text>
<claim-text>pass the information related to the service from the global lookup finding service to the global lookup.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00045" num="00045">
<claim-text>45. The program product recited in <claim-ref idref="CLM-00043">claim 43</claim-ref>, where the instructions for listing the service with the global lookup, when executed by the at least one processor, cause the processor to:
<claim-text>pass location for the global lookup from the global lookup service to the service; and</claim-text>
<claim-text>pass the information related to the service from the service to the global lookup.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00046" num="00046">
<claim-text>46. The program product recited in <claim-ref idref="CLM-00045">claim 45</claim-ref>, where information related to the service is one of a proxy reference for the service, service attributes for the service, location information for the domain registrar in the network domain in which the service is registered, or an implementation interface.</claim-text>
</claim>
<claim id="CLM-00047" num="00047">
<claim-text>47. The program product recited in <claim-ref idref="CLM-00033">claim 33</claim-ref>, where the instructions for listing the service with the global lookup, when executed by the at least one processor, cause the processor to:
<claim-text>pass a proxy reference for the service to the global lookup.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00048" num="00048">
<claim-text>48. The program product recited in <claim-ref idref="CLM-00033">claim 33</claim-ref>, where the instructions for deploying a service in a network domain, when executed by the at least one processor, cause the processor to:
<claim-text>find a service container running in the network domain; and</claim-text>
<claim-text>launch said service in the container service.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00049" num="00049">
<claim-text>49. The program product recited in <claim-ref idref="CLM-00048">claim 48</claim-ref>, where the instructions for finding a service container, when executed by the at least one processor, cause the processor to:
<claim-text>look up location information for a suitable service container in a global repository based on an attribute for the service container, said attribute listed in the global repository.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00050" num="00050">
<claim-text>50. The program product recited in <claim-ref idref="CLM-00048">claim 48</claim-ref>, where the instructions for launching said service in a container service, when executed by the at least one processor, cause the processor to:
<claim-text>pass service code location information for a service code for implementing the service to the service container, where said service container fetches the service code based on the service code location information.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00051" num="00051">
<claim-text>51. The program product recited in <claim-ref idref="CLM-00033">claim 33</claim-ref>,further comprising instructions, when executed by the at least one processor, cause the processor to:
<claim-text>deploy an additional service in another network domain in the plurality of network domains;</claim-text>
<claim-text>register the additional service with another domain registrar;</claim-text>
<claim-text>find the global lookup in the enterprise; and</claim-text>
<claim-text>list the additional service with the global lookup.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00052" num="00052">
<claim-text>52. The program product recited in <claim-ref idref="CLM-00033">claim 33</claim-ref>, further comprising instructions, when executed by the at least one processor, cause the processor to:
<claim-text>create an enterprise lease for the service with the domain registrar.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00053" num="00053">
<claim-text>53. The program product recited in <claim-ref idref="CLM-00052">claim 52</claim-ref>, where the instructions for creating an enterprise lease with the domain registrar, when executed by the at least one processor, cause the processor to:
<claim-text>specify a lease period for the service.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00054" num="00054">
<claim-text>54. The program product recited in <claim-ref idref="CLM-00052">claim 52</claim-ref>, further comprising instructions, when executed by the at least one processor, cause the processor to:
<claim-text>renew the enterprise lease for the service with the domain registrar.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00055" num="00055">
<claim-text>55. The program product recited in <claim-ref idref="CLM-00053">claim 53</claim-ref>, further comprising instructions, when executed by the at least one processor, cause the processor to:
<claim-text>determine that the lease period for the enterprise lease lapsed; and</claim-text>
<claim-text>de-register the service with the domain registrar, where the information related to the service at the domain registrar is not visible to a client at the domain registrar.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00056" num="00056">
<claim-text>56. The program product recited in <claim-ref idref="CLM-00055">claim 55</claim-ref>, further comprising instructions, when executed by the at least one processor, cause the processor to:
<claim-text>monitor the information related to the service at the domain registrar;</claim-text>
<claim-text>determine that the service has been de-registered with the domain registrar; and</claim-text>
<claim-text>delete information related to the service from the global lookup.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00057" num="00057">
<claim-text>57. The program product recited in <claim-ref idref="CLM-00056">claim 56</claim-ref>, further comprising instructions, when executed by the at least one processor, cause the processor to:
<claim-text>monitor enterprise leases created with the domain registrar;</claim-text>
<claim-text>determine that the service has been de-registered with the domain registrar;</claim-text>
<claim-text>re-deploy the service in another network domain in the enterprise based on the service being de-registered with the domain registrar;</claim-text>
<claim-text>discover another domain registrar in the other network domain, where the other network domain is one of the plurality of network domains in the enterprise;</claim-text>
<claim-text>register the service with the other domain registrar;</claim-text>
<claim-text>find the global lookup in the enterprise; and</claim-text>
<claim-text>list the service with the global lookup.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00058" num="00058">
<claim-text>58. The program product recited in <claim-ref idref="CLM-00056">claim 56</claim-ref>, further comprising instructions, when executed by the at least one processor, cause the processor to:
<claim-text>deploy another service in a network domain, where the enterprise comprises a plurality of network domains;</claim-text>
<claim-text>discover a domain registrar in the network domain; and</claim-text>
<claim-text>register the other service with the domain registrar, where the other service is visible to a client at the domain registrar.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00059" num="00059">
<claim-text>59. The program product recited in <claim-ref idref="CLM-00049">claim 49</claim-ref>, where the attribute for the service container listed in said global repository relates to one of resource availability or loading.</claim-text>
</claim>
<claim id="CLM-00060" num="00060">
<claim-text>60. The program product recited in <claim-ref idref="CLM-00048">claim 48</claim-ref>, where the service container is a generic service container comprising a CPU process executed on a host server into which an arbitrary service is homed at runtime.</claim-text>
</claim>
<claim id="CLM-00061" num="00061">
<claim-text>61. A program product embodied on a non-transitory computer processing system readable medium, having instructions executable by at least one processor, for implementing a method for implementing a Global Information Bus (GIB) system for managing a global ecosystem of interrelated services in an enterprise, the program product comprising:
<claim-text>instructions, when executed by the at least one processor, cause the processor to:
<claim-text>define a plurality of network domains, each of a plurality of network domains comprising a plurality of host servers, where each of the plurality of network domains is partially defined by a multicast radius;</claim-text>
<claim-text>home a plurality of arbitrary services on each of the plurality of host servers;</claim-text>
<claim-text>register a first arbitrary service of the plurality of arbitrary services in a first network domain of the plurality of network domains in which the first arbitrary service is running, where the first arbitrary service is visible to a client running within the first network domain and not visible to a client running outside the first network domain based on the multicast radius of the first network domain; and</claim-text>
<claim-text>register a second arbitrary service of the plurality of arbitrary services in a second network domain of the plurality of network domains in which the second arbitrary service is running, where the second arbitrary service is visible to a client running within the second network domain and visible to a client running outside the second network domain, and</claim-text>
</claim-text>
<claim-text>where the registering comprises listing the second arbitrary service with a global lookup service that provides enterprise-wide visibility for services within the global lookup service.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00062" num="00062">
<claim-text>62. The program product recited in <claim-ref idref="CLM-00061">claim 61</claim-ref>, where the first network domain and the second network domain are the same network domain.</claim-text>
</claim>
<claim id="CLM-00063" num="00063">
<claim-text>63. The program product recited in <claim-ref idref="CLM-00061">claim 61</claim-ref>, where the first network domain and the second network domain are unique network domains.</claim-text>
</claim>
<claim id="CLM-00064" num="00064">
<claim-text>64. The program product recited in <claim-ref idref="CLM-00061">claim 61</claim-ref>, further comprising instructions, when executed by the at least one processor, cause the processor to:
<claim-text>run a plurality of generic service containers on each of the plurality of host servers, where each of the plurality of arbitrary services is homed to a generic service container on each of the plurality of host servers.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00065" num="00065">
<claim-text>65. A system for implementing a Global Information Bus (GIB) for managing a global ecosystem of interrelated services in an enterprise, the system comprising:
<claim-text>a first host processor for implementing an enterprise repository for the enterprise, where the enterprise repository receives related information for an arbitrary service and lists the related information therein for a client in the enterprise;</claim-text>
<claim-text>a first network domain of a plurality of network domains, where the first network domain is at least partially defined by a first multicast radius; and</claim-text>
<claim-text>a second network domain of the plurality of network domains, where the second network domain is at least partially defined by a second multicast radius, comprising:
<claim-text>a second host processor for running a domain registry service for the second network domain, where the domain registry service receives related information for an arbitrary service, where the related information includes a proxy reference for the arbitrary service, service attributes for the arbitrary service, location information for the domain registry service or an implementation interface related to the arbitrary service, where the domain registry service lists the related information for the arbitrary service therein, and where discovery of the domain registry service is based in part on the second multicast radius of the second network domain;</claim-text>
</claim-text>
<claim-text>a third host processor for running a first arbitrary service, where the first arbitrary service discovers the domain registry service and passes related information to the domain registry service; and</claim-text>
<claim-text>a fourth host processor for running a second arbitrary service, where the second arbitrary service discovers the domain registry service, passes related information to the domain registry service, finds the enterprise repository, and passes related information to the enterprise repository.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00066" num="00066">
<claim-text>66. The system recited in <claim-ref idref="CLM-00065">claim 65</claim-ref>, where the first arbitrary service and the second arbitrary service are launched in a respective first service container running on the third host processor, and the second service container running on the fourth host processor, each of the first service container and the second service container running in the second network domain.</claim-text>
</claim>
<claim id="CLM-00067" num="00067">
<claim-text>67. The system recited in <claim-ref idref="CLM-00066">claim 66</claim-ref> further comprising:
<claim-text>a code server for holding service code for implementing the arbitrary service; and</claim-text>
<claim-text>a fifth host processor for running a launcher service, where the launcher service receives location information related to the code server for the service code for the arbitrary service, fetches the service code for the arbitrary service based on the location information and launches the service code for the arbitrary service based on container service.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00068" num="00068">
<claim-text>68. The system recited in <claim-ref idref="CLM-00067">claim 67</claim-ref>, where the launcher service selects the container service for the arbitrary service based on service attributes of the arbitrary service.</claim-text>
</claim>
<claim id="CLM-00069" num="00069">
<claim-text>69. The system recited in <claim-ref idref="CLM-00067">claim 67</claim-ref>, where the network domain registry service running on the second host processor receives a ping from the first arbitrary service and returns a response, said response including location information for the network domain registry service running on the second host processor.</claim-text>
</claim>
<claim id="CLM-00070" num="00070">
<claim-text>70. The system recited in <claim-ref idref="CLM-00069">claim 69</claim-ref>, where the location information is a Universal Resource Locator (URL) for the domain registrar.</claim-text>
</claim>
<claim id="CLM-00071" num="00071">
<claim-text>71. The system recited in <claim-ref idref="CLM-00067">claim 67</claim-ref>, where the related information is a proxy object.</claim-text>
</claim>
<claim id="CLM-00072" num="00072">
<claim-text>72. The system recited in <claim-ref idref="CLM-00067">claim 67</claim-ref>, where the related information is one of a service attribute or administrative information.</claim-text>
</claim>
<claim id="CLM-00073" num="00073">
<claim-text>73. The system recited in <claim-ref idref="CLM-00072">claim 72</claim-ref>, where a service attribute comprises one of service identity, domain information or implementing interface.</claim-text>
</claim>
<claim id="CLM-00074" num="00074">
<claim-text>74. The system recited in <claim-ref idref="CLM-00072">claim 72</claim-ref>, where administrative information comprises one of display icon or user interface object.</claim-text>
</claim>
<claim id="CLM-00075" num="00075">
<claim-text>75. The system recited in <claim-ref idref="CLM-00065">claim 65</claim-ref> further comprising:
<claim-text>a fifth host processor for running a global lookup finding service, where the global lookup finding service registers with a domain registrar running in the second network domain, where the second arbitrary service looks up location information for the global lookup finding service in a network domain registrar.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00076" num="00076">
<claim-text>76. The system recited in <claim-ref idref="CLM-00075">claim 75</claim-ref> where the second arbitrary service passes the related information to the enterprise repository finding service and the enterprise repository finding service passes the related information to the enterprise repository.</claim-text>
</claim>
<claim id="CLM-00077" num="00077">
<claim-text>77. The system recited in <claim-ref idref="CLM-00076">claim 76</claim-ref>, where the related information is one of a proxy reference for the service, service attributes for the service, location information for the domain registry service, or an implementation interface.</claim-text>
</claim>
<claim id="CLM-00078" num="00078">
<claim-text>78. The system recited in <claim-ref idref="CLM-00075">claim 75</claim-ref>, where the second arbitrary service receives location information for the enterprise repository from the enterprise repository finding service and passes the related information to the enterprise repository.</claim-text>
</claim>
<claim id="CLM-00079" num="00079">
<claim-text>79. The system recited in <claim-ref idref="CLM-00065">claim 65</claim-ref>, where the second arbitrary service lists with the enterprise repository by passing a proxy reference for the second arbitrary service to the enterprise repository.</claim-text>
</claim>
<claim id="CLM-00080" num="00080">
<claim-text>80. The system recited in <claim-ref idref="CLM-00065">claim 65</claim-ref>, where the third host processor runs a container service and the first arbitrary service launches in the container service.</claim-text>
</claim>
<claim id="CLM-00081" num="00081">
<claim-text>81. The system recited in <claim-ref idref="CLM-00080">claim 80</claim-ref>, where the container service lists an attribute in the enterprise repository and the attribute is comparable to the first arbitrary service.</claim-text>
</claim>
<claim id="CLM-00082" num="00082">
<claim-text>82. The system recited in <claim-ref idref="CLM-00080">claim 80</claim-ref> further comprising:
<claim-text>a code server for holding service code for implementing the first arbitrary service; and</claim-text>
<claim-text>a fifth host processor for running a launcher service, where the launcher service receives location information for the code server holding the service code for the first arbitrary service, fetches the service code for the first arbitrary service based on the location information and launches the service code for the first arbitrary service based on the container service.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00083" num="00083">
<claim-text>83. The system recited in <claim-ref idref="CLM-00065">claim 65</claim-ref> further comprising:
<claim-text>a fifth host processor for running a second domain registry service for the first network domain, where the second domain registry service receives related information for an arbitrary service and lists the related information therein; and</claim-text>
<claim-text>a sixth host processor for running a third arbitrary service, where the third arbitrary service passes related information to the enterprise repository and passes related information to the second domain registry service.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00084" num="00084">
<claim-text>84. The system recited in <claim-ref idref="CLM-00065">claim 65</claim-ref>, where the domain registry service manages enterprise leases for arbitrary services, and the first arbitrary service creates an enterprise lease with the domain registry service.</claim-text>
</claim>
<claim id="CLM-00085" num="00085">
<claim-text>85. The system recited in <claim-ref idref="CLM-00084">claim 84</claim-ref>, where the domain registry service manages enterprise leases for arbitrary services for a specified lease period.</claim-text>
</claim>
<claim id="CLM-00086" num="00086">
<claim-text>86. The system recited in <claim-ref idref="CLM-00084">claim 84</claim-ref>, where the first arbitrary service renews the enterprise lease with the domain registry service.</claim-text>
</claim>
<claim id="CLM-00087" num="00087">
<claim-text>87. The system recited in <claim-ref idref="CLM-00085">claim 85</claim-ref>, where the domain registry service determines that the lease period for the enterprise lease lapsed and de-registers the first arbitrary service, where the related information held in the first registry service is deleted.</claim-text>
</claim>
<claim id="CLM-00088" num="00088">
<claim-text>88. The system recited in <claim-ref idref="CLM-00087">claim 87</claim-ref> further comprising:
<claim-text>a fifth host processor for running a scavenger service, where the scavenger service monitors enterprise leases created in the domain registry service, determines that an arbitrary service has been de-registered with the domain registry service and deletes related information for the arbitrary service from the enterprise repository.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00089" num="00089">
<claim-text>89. The system recited in <claim-ref idref="CLM-00088">claim 88</claim-ref> further comprising:
<claim-text>a sixth host processor for running a re-starter service for re-starting an arbitrary service, where the re-starter service monitors enterprise leases created in the domain registry service and determines that an arbitrary service has been de-registered with the domain registry service, and then re-starts the arbitrary service.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00090" num="00090">
<claim-text>90. The system recited in <claim-ref idref="CLM-00088">claim 88</claim-ref> further comprising:
<claim-text>a seventh host processor for running a second domain registry service for the first network domain, where the second domain registry service receives related information for an arbitrary service and lists the related information therein; and</claim-text>
<claim-text>an eighth host processor for running a third arbitrary service, where the third arbitrary service discovers the second domain registry service, passes related information to the second domain registry service, finds the enterprise repository, and passes related information to the enterprise repository.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00091" num="00091">
<claim-text>91. The system recited in <claim-ref idref="CLM-00081">claim 81</claim-ref>, where the attribute relates to one of resource availability and loading.</claim-text>
</claim>
<claim id="CLM-00092" num="00092">
<claim-text>92. The system recited in <claim-ref idref="CLM-00080">claim 80</claim-ref>, where the service container is a generic service container comprising a CPU process executed on a host server into which an arbitrary service is homed at runtime.</claim-text>
</claim>
<claim id="CLM-00093" num="00093">
<claim-text>93. A data processing system for managing a global ecosystem of interrelated services in an enterprise, the system comprising:
<claim-text>a plurality of network domains, each of the plurality of network domains comprising a plurality of host servers, the host servers being implemented at least partially in hardware, each of the plurality of network domains being at least partially defined by a multicast radius, where one or more of the plurality of host servers comprising an enterprise repository for registering one or more arbitrary services so that the one or more arbitrary services have enterprise-wide visibility;</claim-text>
<claim-text>a plurality of arbitrary services homed on each of the plurality of host servers;</claim-text>
<claim-text>a first arbitrary service of the plurality of arbitrary services in a first network domain of the plurality of network domains in which the first arbitrary service is running, where the first arbitrary service registers in the first network domain and becomes visible to a client running within the first network domain and not visible to a client running outside the first network domain based in part on the multicast radius of the network domain; and</claim-text>
<claim-text>a second arbitrary service of the plurality of arbitrary services in a second network domain of the plurality of network domains in which the second arbitrary service is running, where the second arbitrary service registers in the second network domain and becomes visible to a client running within the second network domain, and lists in the enterprise and becomes visible to a client running outside the second network domain in the enterprise.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00094" num="00094">
<claim-text>94. The system recited in <claim-ref idref="CLM-00093">claim 93</claim-ref>, where the first network domain and the second network domain are the same network domain.</claim-text>
</claim>
<claim id="CLM-00095" num="00095">
<claim-text>95. The system recited in <claim-ref idref="CLM-00093">claim 93</claim-ref>, where the first network domain and the second network domain are unique network domains.</claim-text>
</claim>
<claim id="CLM-00096" num="00096">
<claim-text>96. The system recited in <claim-ref idref="CLM-00093">claim 93</claim-ref>, where on each of the plurality of host servers runs a plurality of generic service containers, where each of the plurality of arbitrary services is homed to a generic service container on each of the plurality of host servers.</claim-text>
</claim>
<claim id="CLM-00097" num="00097">
<claim-text>97. A method for implementing a Global Information Bus (GIB) system for managing a global ecosystem of interrelated services in an enterprise that comprises a plurality of logical domains, the method comprising:
<claim-text>receiving a request for a service from a client in a first one of the plurality of logical domains of the enterprise, where the first one of the plurality of logical domains is at least partially defined by a multicast radius, where the request is received in the first one of the plurality of logical domains and further includes a service identifier for the requested service, and where the service identifier includes an attribute of the service or an interface for the service;</claim-text>
<claim-text>looking up the service identifier in a domain registry for the first one of the plurality of logical domains, where said domain registry lists services registered in the first one of the plurality of logical domains that are only visible to clients in the first one of the plurality of logical domains and not visible to clients outside of the first one of the plurality of logical domains based in part on the multicast radius of the first one of the plurality of logical domains;</claim-text>
<claim-text>receiving an indication that the requested service is not available in the first one of the logical domains;</claim-text>
<claim-text>upon receiving the indication, accessing an enterprise repository for the requested service using the service identifier, where the enterprise repository lists services running in at least two of the plurality of the logical domains of the enterprise, where the list of the enterprise repository is visible to clients of more than one logical domain of the plurality of logical domains of the enterprise; and</claim-text>
<claim-text>returning information related to the requested service to the client.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00098" num="00098">
<claim-text>98. A data processing system implemented in a Global Information Bus (GIB) system for managing a global ecosystem of interrelated services in an enterprise, the system comprising:
<claim-text>one or more processors to implement:</claim-text>
<claim-text>a plurality of services running in the enterprise, the enterprise comprising a plurality of network domains and at least one of the plurality of services running in each of the plurality of network domains, where each network domain is at least partially defined by a multicast radius, said plurality of services comprising:
<claim-text>a plurality of generic container services for running services, where each of the plurality of generic container services is running on a server in one of the plurality of network domains;</claim-text>
<claim-text>a plurality of domain registrar services for registering services running on a server in one of the plurality of network domains, where at least one of the plurality of domain registrar services is running in each of the plurality of network domains for registering services running in the each of the respective plurality of network domains;</claim-text>
<claim-text>a plurality of health services for monitoring and responding to changes in the health of a service, where at least one of the plurality of health services is running in each of the plurality of network domains;</claim-text>
<claim-text>a plurality of loader services for loading service code to a server in a network domain from a remotely located code server, where each of the plurality of loader services responds to communications from a health service with respect to changes in the health of a service;</claim-text>
<claim-text>a plurality of trawler services, where each of the trawler services trawls a domain registrar service from the plurality of domain registrar services for information regarding changes in services running in the respective plurality of network domains;</claim-text>
<claim-text>a plurality of scavenger services for receiving information regarding changes in services running in the respective plurality of network domains from at least one of the plurality of trawler services and updating information related to at least some of the plurality of services running in the enterprise with the information regarding changes in services running in the respective plurality of network domains;</claim-text>
<claim-text>a plurality of transaction management services for creating and managing transactions for services running on a plurality of servers in the plurality of network domains, where the plurality of transaction management services is to create transactions for certain of the plurality of services when the certain of the plurality of services requests one or more transactions; and</claim-text>
<claim-text>a plurality of find services for finding components of the enterprise;</claim-text>
</claim-text>
<claim-text>a plurality of mobile codes for a respective plurality of services, where the plurality of mobile codes reside on a code server; and</claim-text>
<claim-text>a global lookup for storing information related to at least some of the plurality of services running in the enterprise.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00099" num="00099">
<claim-text>99. The system in <claim-ref idref="CLM-00098">claim 98</claim-ref>, where a service is deployed in a generic container service running on a server in one of the plurality of network domains by a loader service loading service code for the service in the generic container service from a remotely located code server.</claim-text>
</claim>
<claim id="CLM-00100" num="00100">
<claim-text>100. The system recited in <claim-ref idref="CLM-00099">claim 99</claim-ref>, where the launching service receives location information for service code for the service from a health service.</claim-text>
</claim>
<claim id="CLM-00101" num="00101">
<claim-text>101. The method recited in <claim-ref idref="CLM-00100">claim 100</claim-ref>, where the location information is a reference to a code server.</claim-text>
</claim>
<claim id="CLM-00102" num="00102">
<claim-text>102. The method recited in <claim-ref idref="CLM-00100">claim 100</claim-ref>, where the launching service receives resource information from the health service and selects a container service based on the resource information.</claim-text>
</claim>
<claim id="CLM-00103" num="00103">
<claim-text>103. The system recited in <claim-ref idref="CLM-00098">claim 98</claim-ref> further comprising:
<claim-text>a plurality of messaging services for communicating between services running on servers in the plurality of network domains.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00104" num="00104">
<claim-text>104. The system recited in <claim-ref idref="CLM-00099">claim 99</claim-ref>, where the service deployed in the generic container running on a server in one of the plurality of network domains discovers at least one of the plurality of domain registrar services and the at least one of the plurality of domain registrar services is running on a server in a network domain common to the one of the plurality of network domains for the container.</claim-text>
</claim>
<claim id="CLM-00105" num="00105">
<claim-text>105. The system recited in <claim-ref idref="CLM-00104">claim 104</claim-ref>, where the service passes information related to one of a service attribute and administrative information to the at least one of the plurality of domain registrar services.</claim-text>
</claim>
<claim id="CLM-00106" num="00106">
<claim-text>106. The system recited in <claim-ref idref="CLM-00105">claim 105</claim-ref>, where a service attribute comprises one of service identity information, domain information or an implementing interface.</claim-text>
</claim>
<claim id="CLM-00107" num="00107">
<claim-text>107. The system recited in <claim-ref idref="CLM-00105">claim 105</claim-ref>, where administrative information comprises one of a display icon or a user interface object.</claim-text>
</claim>
<claim id="CLM-00108" num="00108">
<claim-text>108. The system recited in <claim-ref idref="CLM-00098">claim 98</claim-ref> further comprising:
<claim-text>a plurality of arbitrary resource services, where each of the plurality of arbitrary resource services provides resource support for service running in the enterprise.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00109" num="00109">
<claim-text>109. The system recited in <claim-ref idref="CLM-00099">claim 99</claim-ref>, where the service deployed in the generic container running on a server in one of the plurality of network domains finds a global lookup by looking up location information for a global lookup finding service in one of the plurality of domain registrar services.</claim-text>
</claim>
<claim id="CLM-00110" num="00110">
<claim-text>110. The system recited in <claim-ref idref="CLM-00098">claim 98</claim-ref>, where the one of the plurality of transaction management services issues a lease for the transaction, where the lease defines a predetermined time-to-live for transaction.</claim-text>
</claim>
<claim id="CLM-00111" num="00111">
<claim-text>111. The system recited in <claim-ref idref="CLM-00110">claim 110</claim-ref>, where the service and the participant service are set to a state prior to commencement of the transaction by the transaction manager service, where the transaction manager service is related to a transaction process and where the state is based on a failure of one of the services or the participant service prior to a completion of the transaction.</claim-text>
</claim>
<claim id="CLM-00112" num="00112">
<claim-text>112. The system recited in <claim-ref idref="CLM-00110">claim 110</claim-ref>, where one of the service or the participant service renews the lease for the transaction to extend the predetermined time to-live for the transaction.</claim-text>
</claim>
<claim id="CLM-00113" num="00113">
<claim-text>113. The system recited in <claim-ref idref="CLM-00098">claim 98</claim-ref>, where registering services running in the each of the respective plurality of network domains further comprises passing proxy objects for the services to the at least one of the plurality of domain registrar services for services running in each of the respective plurality of network domains.</claim-text>
</claim>
<claim id="CLM-00114" num="00114">
<claim-text>114. The method of <claim-ref idref="CLM-00097">claim 97</claim-ref>, where at least one service registered in the first one of the plurality of logical domains is not listed in the enterprise repository, where clients outside of the first one of the plurality of logical domains are not able to access the at least one service registered in the first one of the plurality of logical domains.</claim-text>
</claim>
<claim id="CLM-00115" num="00115">
<claim-text>115. The method of <claim-ref idref="CLM-00097">claim 97</claim-ref>, where at least one service registered in the first one of the plurality of logical domains is also listed in the enterprise repository, where clients outside of the first one of the plurality of logical domains are able to access the at least one service registered in the first one of the plurality of logical domains.</claim-text>
</claim>
</claims>
</us-patent-grant>

<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08626975-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08626975</doc-number>
<kind>B1</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>13247864</doc-number>
<date>20110928</date>
</document-id>
</application-reference>
<us-application-series-code>13</us-application-series-code>
<us-term-of-grant>
<us-term-extension>144</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>13</main-group>
<subgroup>40</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>13</main-group>
<subgroup>36</subgroup>
<symbol-position>L</symbol-position>
<classification-value>N</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>H</section>
<class>04</class>
<subclass>L</subclass>
<main-group>12</main-group>
<subgroup>28</subgroup>
<symbol-position>L</symbol-position>
<classification-value>N</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>710307</main-classification>
<further-classification>710315</further-classification>
<further-classification>370401</further-classification>
</classification-national>
<invention-title id="d2e53">Communication interface with reduced signal lines</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>6098130</doc-number>
<kind>A</kind>
<name>Wang</name>
<date>20000800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>710100</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>7098685</doc-number>
<kind>B1</kind>
<name>Agrawal et al.</name>
<date>20060800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>326 38</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>7881332</doc-number>
<kind>B2</kind>
<name>Basso et al.</name>
<date>20110200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>370465</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>8051349</doc-number>
<kind>B2</kind>
<name>Whetsel</name>
<date>20111100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714729</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>8358553</doc-number>
<kind>B2</kind>
<name>Schultz et al.</name>
<date>20130100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>365219</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>2003/0196022</doc-number>
<kind>A1</kind>
<name>Cruz</name>
<date>20031000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>710315</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>2010/0095034</doc-number>
<kind>A1</kind>
<name>Zhang et al.</name>
<date>20100400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>710105</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>2012/0082166</doc-number>
<kind>A1</kind>
<name>Sala et al.</name>
<date>20120400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>370401</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>2012/0317452</doc-number>
<kind>A1</kind>
<name>Whetsel</name>
<date>20121200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714727</main-classification></classification-national>
</us-citation>
</us-references-cited>
<number-of-claims>18</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>710307</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>710315</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>370401</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>7</number-of-drawing-sheets>
<number-of-figures>9</number-of-figures>
</figures>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Sala</last-name>
<first-name>Leonardo</first-name>
<address>
<city>Cornaredo</city>
<country>IT</country>
</address>
</addressbook>
<residence>
<country>IT</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Sala</last-name>
<first-name>Leonardo</first-name>
<address>
<city>Cornaredo</city>
<country>IT</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>TIPS Group</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>Maxim Integrated Products, Inc.</orgname>
<role>02</role>
<address>
<city>San Jose</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Myers</last-name>
<first-name>Paul R</first-name>
<department>2111</department>
</primary-examiner>
<assistant-examiner>
<last-name>Daley</last-name>
<first-name>Christopher A</first-name>
</assistant-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">Communication interfaces having reduced signal lines. In one aspect, a physical layer circuit, set forth by way of example and not limitation, interfaces a link controller and a device communication bus, and includes a wrapper coupled to a first interface bus having only six or less communication lines and coupled to a second interface bus having a larger number of communication lines than the first interface bus. The wrapper can communicate first signals with the link controller over the first interface bus and perform conversion between the first signals and second signals communicated on the second interface bus. A core, coupled to the wrapper by the second interface bus, can communicate device signals with the device communication bus by performing conversion between the second signals and the device signals.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="156.80mm" wi="244.77mm" file="US08626975-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="245.36mm" wi="164.00mm" orientation="landscape" file="US08626975-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="246.38mm" wi="184.40mm" orientation="landscape" file="US08626975-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="247.31mm" wi="187.71mm" orientation="landscape" file="US08626975-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="188.72mm" wi="183.47mm" orientation="landscape" file="US08626975-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="238.42mm" wi="188.72mm" file="US08626975-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="246.38mm" wi="187.03mm" file="US08626975-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="235.80mm" wi="179.49mm" file="US08626975-20140107-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">BACKGROUND</heading>
<p id="p-0002" num="0001">Digital communication interfaces have become widespread with modern technology's emphasis on rapid transfer and communication of digital data for an ever-increasing amount of important functions, including data storage, output transmission, and device control. These interfaces are used in a number of applications for electronic devices, and include standard communication specifications such as Universal Serial Bus (USB), Serial Advanced Technology Attachment (SATA), Firewire, etc. USB, for example, is a commonly-used device interface standard that allows data communication between a host and one or more peripheral devices. A link controller (or &#x201c;link&#x201d;) is typically used to interface data and signals to and from processors of a system for use with the USB bus. For example, the USB link controller is often embedded in a system on a chip (SoC).</p>
<p id="p-0003" num="0002">There is increasing demand for smaller products having less cost and power consumption. As smaller deep sub-micron processes are introduced and become widely used, integrating physical layer analog circuitry required by technologies such as USB becomes more challenging. To reduce time-to-market and cost, the link controller SoC can include most of the USB digital logic and a physical layer transceiver (PHY) can be provided in a separate (external) integrated circuit chip which interfaces the link controller with the USB bus.</p>
<p id="p-0004" num="0003">One standard communication interface used between the USB link controller and the external PHY chip is known as ULPI (UTMI+ Low Pin Interface). This interface is a standard for high-speed USB systems such as USB 2.0 and is an extension of the UTMI+ interface standard (USB Transceiver Macrocell Interface) for managing USB communications. This interface provides data communication of USB packets as well as control signals and a clock signal.</p>
<p id="p-0005" num="0004">For example, the link controller on the SoC can include a UTMI+ link core and a link wrapper for adapting a large set of UTMI+ signals from the link core to a smaller set of signals used by the ULPI interface and transmitted to the PHY. The PHY chip performs a similar function, having a ULPI wrapper that receives the smaller set of signals from the SoC's link wrapper and adapts and serializes that smaller set of signals to the larger set of UTMI+ signals which can be sent to and processed by a UTMI+ PHY core within the PHY. The PHY core adapts these signals and sends out appropriate signals on the connected USB bus.</p>
<p id="p-0006" num="0005">The ULPI standard is popular because it allows the number of lines between SoC and PHY to be reduced to 8 or 12 signals by using three control signal lines, a clock line, and eight bi-directional data lines in the widely-used single data rate (SDR) implementation (four bi-directional data lines are specified for double data rate (DDR) implementations). Reducing the number of lines as in the ULPI interface allows a smaller pin count on the PHY and SoC compared to using UTMI, which is advantageous for smaller-scale and higher-frequency integrated circuits since it lowers the cost of integrated circuits and allows a smaller printed circuit board (PCB).</p>
<p id="p-0007" num="0006">However, despite the reduced pin count allowed by the ULPI interface, the number of pins provided by the ULPI standard can still pose a burden on the use of USB interfaces in today's smaller devices, especially if multiple USB connections are managed simultaneously. Pin count reductions reduce the cost and footprint of the PHY chip on a printed circuit board and reduce the number of pins dedicated to USB for the link controller. Therefore designers and manufacturers of more recent USB devices are interested in ways to reduce this pin count even further.</p>
<p id="p-0008" num="0007">Some attempts have been made to further reduce the number of pins in the ULPI interface. However, these approaches all have had significant limitations. For example, some approaches require a specialized analog front-end (AFE) rather than the more common CMOS I/O circuits, thus requiring more cost to manufacture. In some approaches, changes are required to the USB software stack, creating further complications in adapting these approaches to the existing standard. In other approaches, a new system PHY is provided (e.g., integrated on chip or package), but this PHY departs significantly from existing hardware and this increases the cost of the system significantly. Interface specifications such as High Speed Inter-Chip (HSIC) and Superspeed Inter-Chip (SSIC) require connections to an entire USB hub core. Thus, these solutions require extensive changes to the standard designs. Furthermore, the long term feasibility of one or more of these approaches may be in question due to rapidly advancing technology threatening to make obsolete such specialized and expensive solutions.</p>
<p id="p-0009" num="0008">These and other limitations of the prior art will become apparent to those of skill in the art upon a reading of the following descriptions and a study of the several figures of the drawing.</p>
<heading id="h-0002" level="1">SUMMARY</heading>
<p id="p-0010" num="0009">A physical layer circuit for interfacing a link controller and a device communication bus, set forth by way of example and not limitation, includes a wrapper coupled to a first interface bus having only six or less communication lines and coupled to a second interface bus having a larger number of communication lines than the first interface bus. The wrapper is operative to communicate first signals with the link controller over the first interface bus and to perform conversion between the first signals and second signals communicated on the second interface bus. A core is coupled to the wrapper by the second interface bus, the core operative to communicate device signals with the device communication bus coupled to the core by performing conversion between the second signals and the device signals.</p>
<p id="p-0011" num="0010">A link controller for interfacing with a physical layer circuit connected to a device communication bus, set forth by way of example and not limitation, includes a wrapper coupled to a first interface bus having only six or less communication lines and coupled to a second interface bus having a larger number of communication lines than the first interface bus. The wrapper is operative to communicate first signals with the physical layer circuit over the first interface bus and to perform conversion between the first signals and second signals communicated on the second interface bus. A core coupled to the wrapper by the second interface bus, the core operative to communicate with at least one controller of a device incorporating the link controller and the physical layer circuit, the core performing conversion between the second signals and signals operable by the at least one controller</p>
<p id="p-0012" num="0011">A method for interfacing a link controller and a device communication bus, set forth by way of example and not limitation, includes converting signals between a first interface protocol and a second interface protocol, the second interface protocol having a larger number of signals than the first interface protocol. The signals are communicated using the first interface protocol on an interface bus having only six or less communication lines between the device communication bus and the link controller.</p>
<p id="p-0013" num="0012">A system providing an interface between at least one device controller and a device communication bus, set forth by way of example and not limitation, includes a link controller provided on a first chip, the link controller coupled to a first interface bus having only six or less communication lines and coupled to the at least one device controller. The link controller is operative to communicate first signals with the physical layer chip over the first interface bus and to perform conversion between the first signals and signals communicated to the at least one device controller. A physical layer chip is provided externally to the first chip and coupled to the first interface bus and the device communication bus. The physical layer chip is operative to communicate first signals with the link controller over the first interface bus and to perform conversion between the first signals and device signals communicated on the device communication bus.</p>
<p id="p-0014" num="0013">These and other combinations and advantages and other features disclosed herein will become apparent to those of skill in the art upon a reading of the following descriptions and a study of the several figures of the drawing.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0015" num="0014">Several examples will now be described with reference to the drawings, wherein like components are provided with like reference numerals. The examples are intended for the purpose of illustration and not limitation. The drawings include the following figures:</p>
<p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. 1</figref> is a block diagram of an example system suitable for use with one or more features or embodiments described herein;</p>
<p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. 2</figref> is a schematic diagram illustrating one example of a serdes for use in the link wrapper of the SoC in <figref idref="DRAWINGS">FIG. 1</figref>;</p>
<p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. 3</figref> is a schematic diagram illustrating one example of a serdes for use in the PHY wrapper of the PHY in <figref idref="DRAWINGS">FIG. 1</figref>;</p>
<p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. 4</figref> is a diagrammatic illustration of an example set of signals for the reduced-line protocol between the SoC and PHY in which five signal lines are used;</p>
<p id="p-0020" num="0019"><figref idref="DRAWINGS">FIGS. 5A-5D</figref> are diagrammatic illustrations of different examples of reduced-line protocols in which four signal lines are used; and</p>
<p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. 6</figref> is a flow diagram illustrating one example of a method for interfacing a link controller and a PHY with a reduced number of signal lines, in which data is sent from the SoC to the PHY.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0004" level="1">DETAILED DESCRIPTION OF EXAMPLE EMBODIMENTS</heading>
<p id="p-0022" num="0021">In the following descriptions, interface components will be discussed with reference to the specific examples such as the USB device interface standard. These examples are not to be seen as limiting but, rather, illustrative of the general concepts set forth herein.</p>
<p id="p-0023" num="0022">Herein, the term &#x201c;communicate with&#x201d; is intended to include communication in one (either) direction or bi-directionally. The term &#x201c;converting between&#x201d; or &#x201c;conversion between&#x201d; is intended to include converting a signal in either direction or bi-directionally. The term &#x201c;data&#x201d; is intended to refer to any information suitable for communication between devices.</p>
<p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. 1</figref> is a block diagram of an example system <b>10</b> suitable for use with one or more features or embodiments described herein. System <b>10</b> is coupled to a device communication interface and can communicate data over the communication interface to other electronic devices. System <b>10</b> can be provided in a computer or other type of electronic device <b>11</b>, which can be a computer, laptop, server, portable device, cell phone, tablet, personal digital assistant (PDA), e-book reader, peripheral device, storage device, or other device.</p>
<p id="p-0025" num="0024">System <b>10</b> includes components such as a system on a chip (SoC) <b>12</b> which communicates with a physical layer (PHY) transceiver chip <b>14</b>. The PHY <b>14</b> communicates in turn with a standard device communication bus <b>16</b>. In some examples described herein, the Universal Serial Bus (USB) standard is referred to as an implementation of device communication bus <b>16</b>. Any of the applicable USB versions or standards can be used with features described herein, including USB 2.0 and USB 3.0. Other embodiments can use other communication standards for bus <b>16</b>, such as Serial Advanced Technology Attachment (SATA), Firewire, etc.</p>
<p id="p-0026" num="0025">The SoC <b>12</b> controls the interface of the electronic device with the device communication bus <b>16</b>. The SoC <b>12</b> is provided on an integrated circuit chip, and can be implemented in any of various forms, such as an application-specific integrated circuit (ASIC), field programmable gate array (FPGA), serial interface engine (SIE), or other processors of circuits. Various components can be included in the SoC <b>12</b> relating to communication over interface bus <b>16</b> as well as (optionally) other device functions.</p>
<p id="p-0027" num="0026">A link controller <b>20</b> is provided on the SoC <b>12</b> to control functions related to the device communication bus <b>16</b>, including interfacing between the communication bus <b>16</b> and one or more device controllers of the electronic device <b>11</b> (such as processors, processing circuits, or other controllers). The link controller can act as a bridge between software running on the device controllers and the PHY <b>14</b>, and can use interface signals and protocol for operations of the system <b>10</b>. For example, the link controller <b>20</b> can control the mode and protocol settings of the PHY <b>14</b>, report timeout events to software on the electronic device <b>11</b>, buffer data during receive and transmit operations, format data into transactions, etc.</p>
<p id="p-0028" num="0027">The link controller can include a link core <b>22</b> and a link wrapper <b>24</b>. The link core <b>22</b> is coupled to one or more device controllers (such as one or more processors) of the electronic device <b>11</b> via a processor bus <b>26</b> or other communication channel. When the electronic device <b>11</b> outputs signals onto the communication bus <b>16</b>, the link core <b>22</b> can receive data from one or more device controllers (e.g., from software running on processors) and adapt that data into a form suitable for communication over bus <b>16</b>. In an example embodiment, the link core <b>22</b> can adapt received data from the electronic device <b>11</b> into a core interface protocol suitable for transmission from a link to a transceiver such as PHY <b>14</b>. For example, core interface protocol can be UTMI or UTMI+. These standards provide signals enabling communication between a link controller and a PHY, including data lines and control lines. The control lines, for example, enable the link core to control settings of the PHY and receive statuses from the PHY relating to bus <b>16</b> communication, enable speed modes, etc. The UTMI+ standard, for example, typically includes at least 35 separate lines, such as 56 lines in some embodiments, including data and control signals. In other embodiments, different interface standards can be used for the core interface protocol.</p>
<p id="p-0029" num="0028">The link core <b>22</b> provides the signals of the core interface protocol to the link wrapper <b>24</b> over a core protocol bus <b>28</b>. In some embodiments, the link wrapper <b>24</b> adapts the signals of the core interface protocol into an intermediate interface protocol having fewer lines than the core interface protocol. The intermediate protocol combines the functionality of the core protocol into a reduced number of lines and therefore requires less I/O pins at its interface between chips. In one example, the intermediate interface protocol can be UTMI+ Low Pin Interface (ULPI), which provides an interface bus having 12 lines in standard implementations: eight bi-directional data lines and four uni-directional control signals (an 8-line option is also defined and rarely used, providing four bi-directional data lines). The ULPI protocol specifies that the eight data lines are bi-directional between the SoC <b>12</b> and PHY <b>14</b>, NXT and DIR control signals are provided from the PHY <b>14</b> to the SoC <b>12</b>, an STP control signal is provided from the SoC <b>12</b> to the PHY <b>14</b>, and a clock signal CLK can be provided from the PHY <b>14</b> to the SoC <b>12</b> (or alternatively can be provided from the SoC to the PHY). For example, the NXT signal can be used for signaling readiness for a next datum on the data bus, the DIR signal for signaling direction of signals of the data bus, and the STP signal for stopping data communication. The ULPI standard provides lines that include the information from all the data and control signals of the core interface protocol and preserves the core protocol requirements such as clock frequency, duty cycle, etc., while providing its own requirements, modes, and options. In other embodiments, no intermediate protocol is used, and the core protocol signals are provided directly to the serdes <b>32</b>.</p>
<p id="p-0030" num="0029">In the embodiments described herein, the link wrapper <b>24</b> additionally includes a serializer/deserializer (&#x201c;serdes&#x201d;) <b>32</b> for providing features described herein. Serdes <b>32</b> receives the signals of the intermediate protocol bus from other components in the link wrapper <b>24</b> and further reduces the number of lines, thus adapting the signals into a reduced-line interface protocol that is used to transmit the signals to the PHY <b>14</b> on bus <b>34</b>. This enables greater reduction of the number of pins connecting the SoC to the PHY <b>14</b> and therefore reduces cost and space required on the integrated circuit chips of the SoC <b>12</b> and the PHY <b>14</b>, freeing up space on these chips.</p>
<p id="p-0031" num="0030">An advantage to the serdes <b>32</b> is that it interfaces with and is compatible with the existing intermediate interface protocol, such as ULPI. This allows the reduced-line interface implementation to be easily incorporated into existing designs that utilize the intermediate interface standard. Thus, no new software is needed for the link controller <b>20</b> nor for the device controllers of the electronic device <b>11</b>. Furthermore, the serdes <b>32</b> adds only a small amount of hardware to a standard link wrapper. For example, some implementations need add only as little as 10,000 gates for the serdes <b>32</b> functionality.</p>
<p id="p-0032" num="0031">The serdes <b>32</b> reduces the number of lines by encoding the information of the intermediate protocol bus into the reduced-line protocol having a bus with the reduced number of lines. In some example embodiments described herein, the serdes <b>32</b> can adapt the intermediate protocol signals to the reduced-line protocol having six or less total lines. Some examples include the embodiments using five lines as described below with respect to <figref idref="DRAWINGS">FIG. 4</figref>, and embodiments using four lines as described below with respect to <figref idref="DRAWINGS">FIGS. 5A-5D</figref>. However, other embodiments of the reduced-line protocol can allow an even further reduced number of lines, such as three lines, two lines, or one line. Such embodiments can serialize a greater number of the intermediate protocol signals onto a reduced number of lines in a similar way to the 4- or 5-line embodiments described herein, and, in some embodiments, can use higher frequencies/data rates to serialize additional signals. An example serdes <b>32</b> that adapts the second interface signals to five lines is described in greater detail below with respect to <figref idref="DRAWINGS">FIG. 2</figref>. In addition, some embodiments of the serdes <b>32</b> can include an optional encoder/decoder (codec) that can encode auxiliary data onto the reduced-line protocol signals, as described with reference to the examples of <figref idref="DRAWINGS">FIGS. 2 and 3</figref>.</p>
<p id="p-0033" num="0032">Link serdes <b>32</b> outputs appropriate signals of the reduced-line protocol over interface bus <b>34</b> to the PHY <b>14</b>. In some embodiments, bus <b>34</b> uses physical pins of the SoC <b>12</b> to connect to corresponding physical pins of the PHY <b>14</b> provided on a separate integrated circuit chip implementing the PHY <b>14</b>. In the example of <figref idref="DRAWINGS">FIG. 1</figref> showing ULPI signals, five total lines are used in bus <b>34</b>, including two data lines DAT and three control lines CTRL, STP, and CLK. The serdes <b>32</b> can send data signals over the two data lines DAT as well as the STP control signal, and can send the CLK signal in alternate embodiments. The link serdes <b>32</b> can receive the DAT signals as well as the NXT and DIR control signals. Additional auxiliary data can also be included in the control signals such as the STP signal, as described in greater detail with respect to <figref idref="DRAWINGS">FIGS. 2-4</figref>.</p>
<p id="p-0034" num="0033">PHY <b>14</b> is a circuit that acts as an interfacing component between the SoC <b>12</b> and the device communication bus <b>16</b>. In the described examples, the PHY <b>14</b> is provided on an integrated circuit chip external to and separate from the SoC <b>12</b> and can include an analog transceiver and digital processing logic. The PHY <b>14</b> can transmit and receive data on the bus <b>16</b> conforming with the bus <b>16</b> requirements of frequency, jitter and duty cycle, and can provide several functions for the link controller <b>20</b> to use. In one example of a USB communication interface bus <b>16</b>, the PHY <b>14</b> can act as the USB transceiver and transmit and receive data at various speeds allowed by the USB interface, such as High Speed (480 Mbit/sec), Full Speed (12 Mbit/sec), and Low Speed (1.5 Mbit/sec). The PHY <b>14</b> can serialize parallel data from the link controller <b>20</b> for transmission on the USB cable, and deserialize data from the USB cable into parallel data for the link controller <b>20</b>. The PHY <b>14</b> can also provide flow control for both transmit and receive data, perform particular encoding and decoding for transmitting and receiving data, provide packet timing functions, and provide control signals for settings such as selection of speed, operational mode, bus resistors, and power settings. In some embodiments, the PHY can be completely under control of the link controller <b>20</b>.</p>
<p id="p-0035" num="0034">PHY <b>14</b> can include a wrapper block <b>36</b> and a PHY core <b>38</b>. The wrapper block <b>36</b> includes a PHY wrapper <b>40</b> and a register map <b>42</b>. The PHY wrapper <b>40</b> is coupled to the interface bus <b>34</b> providing communication using the reduced-line protocol signals from the link controller. The PHY wrapper <b>40</b> performs an analogous function for the PHY as the link wrapper <b>24</b> performs for the link controller <b>20</b>, adapting signals of the intermediate interface protocol (such as ULPI) to and from the reduced-line interface protocol. For example, when the device <b>11</b> sending data onto the communication bus <b>16</b>, PHY wrapper <b>24</b> receives signals over bus <b>34</b>. A serdes <b>44</b> is included in the PHY wrapper and adapts the reduced-line protocol signals to the intermediate interface protocol having a bus with a higher number of signal lines. In the example shown in <figref idref="DRAWINGS">FIG. 1</figref>, the serdes <b>44</b> receives three signals over bus <b>34</b>, including two data lines DAT and one control line STP. The serdes <b>44</b> can send data on bus <b>34</b> on the two data lines DAT and the control lines NXT and DIR. One example of a serdes <b>44</b> suitable for use in the PHY wrapper <b>40</b> is described below with respect to <figref idref="DRAWINGS">FIG. 3</figref>.</p>
<p id="p-0036" num="0035">An advantage of the serdes <b>44</b> is that it is interfaces with and is compatible with the existing intermediate interface protocol standard, such as ULPI. This allows the reduced-line interface implementation to be easily incorporated into existing designs that utilize the intermediate protocol bus. Thus, no new software or firmware is needed for the PHY <b>14</b>. Furthermore, the serdes <b>44</b> adds only a small amount of hardware to a standard PHY used without the reduced-line protocol.</p>
<p id="p-0037" num="0036">Other components in the PHY wrapper <b>44</b> send and receive the standard set of intermediate protocol signals on an intermediate bus to and from the serdes. These components perform standard functions of the PHY wrapper, including converting intermediate protocol signals into a larger number of core protocol signals. The PHY wrapper <b>40</b> outputs the core interface protocol signals on a core protocol bus <b>46</b> to the PHY cote <b>38</b>. For example, in some embodiments the intermediate interface protocol is ULPI (typically having 12 lines on the intermediate bus) and the core interface protocol is UTMI or UTMI+ (typically having 35 to 56 lines on the core bus <b>46</b>).</p>
<p id="p-0038" num="0037">In some embodiments, a register map <b>42</b> can also be included in the wrapper block <b>40</b>. Register map <b>42</b> includes a set of registers defined for the PHY <b>14</b> which can be used in one or more of the interface protocols to store various settings and status information. For example, the registers can store signals for the core interface protocol which are useful during use of the intermediate interface protocol when not transmitting or receiving data to and from the communication bus <b>16</b>. In some embodiments, register map <b>42</b> can also be used for the reduced-line interface protocol if needed.</p>
<p id="p-0039" num="0038">The PHY core <b>38</b> receives the core protocol signals from the core bus <b>46</b> and coverts these signals to a form needed to send the signals over the device communication bus <b>16</b>. For example, in some embodiments, the PHY core <b>38</b> can receive UTMI or UTMI+ signals from the PHY wrapper <b>40</b> and convert the signals to a form suitable for USB bus <b>16</b>. This can include, for example, serializing parallel data in the core interface protocol for use on a serial communication bus <b>16</b>.</p>
<p id="p-0040" num="0039">Similarly, when the electronic device <b>10</b> receives signals on the communication bus <b>16</b>, signals are communicated in the opposite direction of communication described above, namely from the communication bus <b>16</b>, to the PHY <b>14</b>, and to the SoC <b>12</b>. In this direction, the PHY <b>14</b> core converts the communication bus signals to the core interface protocol, and then outputs these core protocol signals to the PHY wrapper over bus <b>46</b>. The PHY wrapper converts the core protocol signals to a lesser number of intermediate protocol signals, and then provides these signals on an intermediate bus to the PHY serdes <b>44</b>. The serdes <b>44</b> converts the intermediate protocol signal lines to a lesser number of reduced-line protocol signal lines, and outputs the reduced-line protocol signals over bus <b>34</b> to the SoC <b>12</b>. The link serdes <b>32</b> in the link wrapper <b>24</b> receives the reduced-line protocol signals, converts the signals to the larger number of intermediate protocol signal lines, and provides the intermediate protocol signals on an intermediate bus to other components in the link wrapper <b>24</b>. These other components convert the intermediate protocol signals to a larger number of core protocol signals, and communicate the signals to the link core <b>22</b> over bus <b>28</b>. Link core <b>22</b> converts the core protocol signals to signals suitable for communication with other components in the electronic device <b>11</b>, such as one or more device controllers.</p>
<p id="p-0041" num="0040"><figref idref="DRAWINGS">FIG. 2</figref> is a schematic diagram illustrating an example of a serdes <b>32</b> for use in the link wrapper <b>24</b> of the SoC <b>12</b> shown in <figref idref="DRAWINGS">FIG. 1</figref>. Serdes <b>32</b> can be implemented within the link wrapper <b>24</b> and can be connected to the other standard components of the link wrapper. For sending signals in a direction from the electronic device <b>11</b> to the PHY <b>14</b>, serdes <b>32</b> includes auxiliary data merger block <b>106</b>, encoding block <b>120</b>, and parallel to serial converter block <b>130</b>.</p>
<p id="p-0042" num="0041">When receiving signals from the link core <b>22</b> for output by the electronic device <b>11</b>, the serdes <b>32</b> receives intermediate protocol signals. In some embodiments, such as the example of <figref idref="DRAWINGS">FIG. 2</figref>, the signals are provided according to the ULPI standard. These intermediate protocol signals include data signals <b>100</b> and STP control signal <b>102</b>. An auxiliary data merger block <b>106</b> can optionally be included in serdes <b>32</b> in some embodiments, which receives these signals and an auxiliary data signal <b>106</b>. The auxiliary data merger block <b>106</b> passes through the data signals <b>100</b> and outputs them as data signals <b>108</b>, and passes through the STP signal <b>102</b> and outputs it as STP signal <b>110</b>. The merger block <b>106</b> also processes the auxiliary data signal <b>112</b> by merging the auxiliary data line into the intermediate protocol. Specifically, the merger block <b>106</b> takes serial data received on the auxiliary data signal <b>112</b> and splits it into three output auxiliary lines <b>114</b> (e.g., signals CB1, CB2, and CB3 in the example of <figref idref="DRAWINGS">FIG. 4</figref>) suitable for serializing into the reduced-line protocol at a later stage. The auxiliary data on auxiliary data signal <b>112</b> can be extra data in excess of the data carried by the intermediate protocol and used for various purposes, such as bits used in encoding by the encoding block <b>120</b>, and/or extra data (headers, control signals, etc.) which the electronic device <b>11</b> may desire to send to the PHY <b>14</b> or send to another device or host on the communication bus <b>16</b> in addition to the data provided on data lines <b>100</b> and control signals. For example, an application processor on the device <b>11</b> can send additional inputs to the PHY <b>14</b>, and/or extra status information regarding the PHY <b>14</b> can be conveyed via the auxiliary signals.</p>
<p id="p-0043" num="0042">An encoding block <b>120</b> optionally can be included to receive the data signals <b>108</b>, STP signal <b>110</b>, and auxiliary signals <b>114</b>. The encoding block <b>120</b> can perform an encoding process to encode the received information into another form suitable for particular uses. Extra data needed for the encoding can be provided on one or more of the auxiliary data signals <b>114</b>. For example, in some embodiments the encoding block <b>120</b> can perform low power encoding on the data of data signals <b>108</b>, which provides the data in a form allowing less power consumption. One example of low power encoding is encoding providing less signal transitions, such as transition-minimized differential signaling, which converts an input of 8 bits into a 10-bit code. In one example, the encoding block <b>120</b> can use the 8 bits from the data signals <b>108</b> and two encoding bits from the auxiliary data signals <b>114</b> to encode a 10-bit code providing reduced power consumption for the interface. Eight bits of the 10-bit code can be output from encoding block <b>120</b> as data signals <b>122</b>, and the two other bits can be output as auxiliary signals <b>124</b>. Other types of encoding can be used in other embodiments. The STP signal <b>110</b> is passed through and output as STP signal <b>126</b>, and any auxiliary signals not used in the encoding can be passed through encoding block <b>120</b> and output in auxiliary signals <b>124</b>. In other embodiments, no encoding is performed by the encoding block <b>120</b> and/or the encoding block <b>120</b> is not included in the serdes <b>32</b>.</p>
<p id="p-0044" num="0043">In some embodiments, the auxiliary lines <b>112</b>, <b>114</b>, and <b>124</b> are used only for providing encoding bits used to encode the data by the encoding block <b>120</b>. Other embodiments can use the auxiliary lines <b>112</b>, <b>114</b>, and <b>124</b> only to provide auxiliary data unrelated to encoding. In still other embodiments, a hybrid approach can use one or more of the auxiliary signals for encoding and other auxiliary signal(s) for extra (non-encoding) data.</p>
<p id="p-0045" num="0044">A parallel to serial converter block <b>130</b> receives the data signals <b>122</b>, the auxiliary signals <b>124</b>, and the STP signal <b>126</b>. Converter block <b>130</b> converts these signals into a reduced number of signals and lines in the reduced-line protocol (three out of five interface signals used in this example) and outputs these signals on lines of the interface bus <b>34</b>. In the example of <figref idref="DRAWINGS">FIG. 2</figref>, eight data signals <b>122</b> are received which are converted to two NIB_OUT signals <b>132</b>, each of the output signals <b>132</b> providing the equivalent data of four of the data signals <b>122</b>. For example, output signal <b>132</b><i>a </i>can provide the data from signals L_DATA_OUT[4]-[8] and output signal <b>132</b><i>b </i>can provide the data from signals L_DATA_OUT[0]-[3]. The STP signal <b>126</b> is provided in the STP&#x2032; output signal <b>134</b>. In addition, the converter block <b>130</b> can in some embodiments combine the STP signal <b>126</b> with any auxiliary signals on the three auxiliary lines <b>124</b>, providing a combination of signals on the output STP&#x2032; signal <b>134</b>.</p>
<p id="p-0046" num="0045">The three signals <b>132</b><i>a</i>, <b>132</b><i>b</i>, and <b>134</b> output by the parallel to serial converter <b>130</b> are received by an I/O block <b>140</b>, which can be included in serdes <b>32</b> or be external to the serdes. I/O block <b>140</b> includes data output buffers <b>142</b> for receiving and buffering the data signals <b>132</b><i>a </i>and <b>132</b><i>b </i>and outputting them as signals <b>144</b><i>a </i>and <b>144</b><i>b </i>on the interface bus <b>34</b>. Buffers <b>142</b> can be enabled or disabled by an ENB signal <b>143</b> provided by device controller(s) of the electronic device <b>11</b>, such as one or more processors. I/O block <b>140</b> also includes an output buffer <b>146</b> for receiving and buffering the STP&#x2032; signal <b>134</b> and outputting it as signal <b>148</b> on the interface bus <b>34</b>.</p>
<p id="p-0047" num="0046">On the receiving side of serdes <b>32</b>, a similar set of functional blocks is provided to interface signals received from the PHY <b>14</b> and provided to other components of the electronic device <b>11</b>. The receiving side includes a serial to parallel converter block <b>160</b>, a decoding block <b>170</b>, and an auxiliary data extractor block <b>180</b>.</p>
<p id="p-0048" num="0047">The I/O block <b>140</b> includes a number of input buffers receiving the incoming signals from the PHY <b>14</b> over the interface bus <b>34</b>. These buffers include input data buffers <b>150</b> which receive the data signals <b>144</b><i>a </i>and <b>144</b><i>b </i>on the bus <b>34</b> and output equivalent signals <b>162</b><i>a </i>and <b>162</b><i>b</i>. An input buffer <b>152</b> receives and buffers an incoming CTRL signal <b>154</b> and outputs it as signal <b>164</b>. An input clock buffer <b>156</b> receives a CLK signal <b>192</b> from the PHY <b>14</b> over the interface bus <b>34</b>. The clock buffer <b>190</b> receives the CLK signal <b>158</b> from the PHY <b>14</b> and provides the clock signal to the components of the serdes <b>32</b>, including the blocks <b>106</b>, <b>120</b>, and <b>130</b> on one side, and the blocks <b>160</b>, <b>170</b>, and <b>180</b> on the other side.</p>
<p id="p-0049" num="0048">The serial to parallel converter block <b>160</b> receives some of the signals of the reduced-line protocol from the I/O block <b>140</b>, which in this example include the NIB_IN[0] and [1] signals <b>162</b><i>a </i>and <b>162</b><i>b</i>, respectively. The serial to parallel converter block <b>160</b> converts these signals into the eight data signals of the intermediate protocol which the two signals <b>162</b><i>a </i>and <b>162</b><i>b </i>are carrying, and outputs these as signals <b>166</b>. The converter block <b>160</b> also receives a CTRL signal <b>164</b> from the I/O block <b>140</b>, which can carry control signals of the intermediary protocol, such as two control signals in this example. The converter block <b>160</b> converts the CTRL signal <b>164</b> into the DIR and NXT signals used by the intermediary protocol and outputs these as signals <b>166</b>. In addition, if auxiliary data is included in the received signals for encoding or extra data, then the converter block <b>160</b> converts these signals (e.g., CF1 and/or CF2 in <figref idref="DRAWINGS">FIG. 4</figref>) in the CTRL signal <b>164</b> to the output auxiliary signals <b>169</b>.</p>
<p id="p-0050" num="0049">The decoding block <b>170</b> receives the data signals <b>166</b>, the control signals (e.g., DIR and NXT) <b>168</b>, and the auxiliary data signals <b>169</b> from the serial to parallel converter <b>160</b>. If encoding and decoding is being used, the decoding block <b>170</b> decodes the encoded data on the signals <b>166</b> and <b>169</b>. For example, low power encoding may have been provided on the data by the PHY <b>14</b> from which this data was received. The decoded data is output by the decoding block <b>170</b> as data signals <b>172</b>, and any (non-encoding) auxiliary extra data is output on auxiliary signals <b>176</b>, with the control signals <b>174</b> being passed through.</p>
<p id="p-0051" num="0050">In some embodiments, an auxiliary data extractor <b>180</b> can be included in serdes <b>32</b> to receive the data signals <b>172</b>, the control signals <b>174</b>, and the auxiliary signals <b>176</b> from the decoding block <b>170</b>. The extractor block <b>180</b> passes through the data signals <b>172</b> and outputs them as signals <b>182</b>, and passes through control signals <b>174</b> as signals <b>184</b>. The extractor block <b>180</b> processes any auxiliary signals <b>176</b> by combining these signals into a single output auxiliary signal <b>186</b> suitable for reception by components of the electronic device <b>11</b>. For example, the signals <b>176</b> can be serialized into signal <b>186</b>, where serial data can be used for extra information communicated over the bus <b>34</b>, as explained above. Extractor block <b>180</b> outputs the signals <b>182</b>, <b>184</b>, and <b>186</b> to components of the electronic device, thus conveying the information received on the device communication bus <b>16</b>.</p>
<p id="p-0052" num="0051"><figref idref="DRAWINGS">FIG. 3</figref> is a schematic diagram illustrating an example of a serdes <b>44</b> for use in the PHY wrapper <b>40</b> of the PHY <b>14</b> shown in <figref idref="DRAWINGS">FIG. 1</figref>. Serdes <b>44</b> can be implemented within the PHY wrapper <b>44</b> and can be connected to the other standard components of the PHY wrapper.</p>
<p id="p-0053" num="0052">Serdes <b>44</b> can include an I/O block <b>202</b> for receiving the signals of the reduced-line protocol, or the I/O block <b>202</b> can be provided external to the serdes <b>44</b> within the PHY <b>14</b>. The I/O block <b>202</b> includes a number of input buffers receiving the incoming signals from the link controller <b>20</b> over the interface bus <b>34</b>. These buffers include input data buffers <b>204</b> which receive the data signals <b>144</b><i>a </i>and <b>144</b><i>b </i>on the bus <b>34</b> and output equivalent signals <b>208</b><i>a </i>and <b>208</b><i>b</i>. An input buffer <b>210</b> receives and buffers the incoming STP&#x2032; signal <b>148</b> and outputs it as signal <b>212</b> to the serdes <b>44</b>.</p>
<p id="p-0054" num="0053">For receiving signals from the link controller <b>20</b> and providing the data to the PHY wrapper and communication bus <b>16</b>, serdes <b>44</b> includes a serial to parallel converter block <b>220</b>, a decoding block <b>230</b>, and an auxiliary data extractor block <b>240</b>.</p>
<p id="p-0055" num="0054">The serial to parallel converter block <b>220</b> receives the signals of the reduced-line protocol from the I/O block <b>202</b>, including the NIB_IN[0] and [1] signals <b>208</b><i>a </i>and <b>208</b><i>b</i>, respectively. The serial to parallel converter block <b>220</b> converts these signals into the eight data signals which the two signals <b>208</b><i>a </i>and <b>208</b><i>b </i>are carrying, and outputs these as signals <b>222</b>. The converter block <b>220</b> also receives the STP&#x2032; signal <b>212</b> which includes a STP signal output as signal <b>224</b>, having been extracted from the STP&#x2032; signal. In embodiments in which the STP&#x2032; signal includes auxiliary data (such as signals CB1, CB2, and CB3 as described below with respect to <figref idref="DRAWINGS">FIG. 4</figref>), the converter block <b>220</b> also extracts these signals from the STP&#x2032; signal <b>212</b> and outputs each of them in the group of auxiliary signals <b>226</b>. The data signals <b>222</b> and control signals <b>224</b> may at this point be in the intermediate protocol if no encoding has been used.</p>
<p id="p-0056" num="0055">The decoding block <b>230</b> receives the data signals <b>222</b>, the control signals (e.g., STP) <b>224</b>, and the auxiliary signals <b>226</b> from the serial to parallel converter <b>220</b>. If encoding and decoding is being used, the decoding block <b>230</b> decodes any encoded data on the signals <b>222</b> and <b>226</b>. For example, low power encoding may have been provided by the link controller <b>20</b>, including encoded bits on the data signals <b>222</b> and one or more of the auxiliary signals <b>226</b>. The decoded data is output by the decoding block <b>230</b> as data signals <b>232</b> and any extra data is output in auxiliary signals <b>236</b>, with the control signals <b>234</b> having been passed through. Decoded data signals <b>232</b> and control signals <b>234</b> are in the format of the intermediate protocol.</p>
<p id="p-0057" num="0056">In some embodiments, an auxiliary data extractor <b>240</b> can be included in serdes <b>44</b> to receive the data signals <b>232</b>, the control signals <b>234</b>, and the auxiliary signals <b>236</b> from the decoding block <b>230</b>. The extractor block <b>240</b> passes through the data signals <b>232</b> and outputs them as signals <b>242</b>, and passes through control signals <b>234</b> as signals <b>244</b>. The extractor block <b>240</b> processes the auxiliary signals <b>236</b> by extracting an auxiliary data signal <b>246</b> from the intermediate protocol format of auxiliary signals <b>236</b>. The single output auxiliary data signal <b>246</b> is suitable for reception by components of the PHY <b>14</b>. For example, the signals <b>236</b> can be serialized into auxiliary signal <b>246</b>, where the serial data can be used for extra data communicated over the bus <b>34</b>, as explained for the serdes <b>32</b> of <figref idref="DRAWINGS">FIG. 2</figref>.</p>
<p id="p-0058" num="0057">Extractor block <b>240</b> outputs the signals <b>242</b>, <b>244</b>, and <b>246</b> to components of the PHY wrapper <b>40</b>, thus conveying the information received from the link controller <b>20</b> to standard components capable of reading the signals <b>182</b> and <b>184</b> provided in the intermediate protocol. The PHY <b>14</b> converts the signals to necessary formats to output the signals on the communication bus <b>16</b>.</p>
<p id="p-0059" num="0058">When receiving signals from the communication bus <b>16</b> to be provided to the SoC <b>12</b> and components of the electronic device <b>11</b>, the serdes <b>44</b> receives intermediate protocol signals from other components of the PHY wrapper <b>40</b> to provide output in the reduced-line protocol over the bus <b>34</b> to the link controller <b>20</b>. The serdes <b>44</b> includes an auxiliary data merger block <b>250</b>, an encoding block <b>260</b>, and a parallel to serial converter <b>270</b> to process these signals.</p>
<p id="p-0060" num="0059">An auxiliary data merger block <b>250</b> can optionally be included in some embodiments, which receives the intermediate protocol data signals <b>252</b>, control signals <b>254</b>, and an auxiliary data signal <b>256</b>. In the described example, there are eight data signals <b>252</b> and two control signals <b>254</b> (DIR and NXT). The auxiliary data merger block <b>250</b> passes through the data signals <b>252</b> and outputs them as data signals <b>262</b>, and passes through the control signals <b>254</b> and outputs them as control signals <b>266</b>. The merger block <b>250</b> also processes the auxiliary data signal <b>256</b> by merging the auxiliary data line into the intermediate protocol signal format. Specifically, the merger block <b>250</b> takes data received on the auxiliary data signal <b>256</b> and splits it into two output auxiliary lines <b>266</b> (e.g., signals CF1 and CF2 in the example of <figref idref="DRAWINGS">FIG. 4</figref>) suitable for serializing into the reduced-line protocol at a later stage. The data on auxiliary data signal <b>256</b> can be bits used in encoding by the encoding block <b>260</b>, and/or extra data provided in addition to the data provided on data lines <b>100</b> and control signals, as explained above.</p>
<p id="p-0061" num="0060">An encoding block <b>260</b> optionally can be included to receive the data signals <b>262</b>, controls signals <b>264</b>, and auxiliary signals <b>266</b>. The encoding block <b>260</b> can perform an encoding process to encode the received information into another form suitable for particular uses. Extra data needed for the encoding can be provided on one or more of the auxiliary signals <b>266</b>. For example, in some embodiments the encoding block <b>260</b> can perform low power encoding on the data of data signals <b>262</b>, which provides the data in a form allowing less power consumption, e.g., transition-minimized differential signaling that converts an input of 8 bits into a 10-bit code. In one example, the encoding block <b>260</b> can use the 8 bits from the data signals <b>262</b> and two encoding bits from the auxiliary signals <b>266</b> to encode a 10-bit code providing reduced power consumption for the interface. Eight bits of the 10-bit code can be output as data signals <b>272</b>, and the two other bits can be output as auxiliary data signals <b>276</b>. Other types of encoding can be used in other embodiments. The control signals <b>264</b> are passed through and output as control signals <b>274</b>, and any auxiliary signals not used in the encoding can be passed through encoding block <b>260</b> and output as auxiliary signals <b>276</b>. In other embodiments, no encoding is performed by the encoding block <b>260</b> and/or the encoding block <b>260</b> is not included in the serdes <b>44</b>.</p>
<p id="p-0062" num="0061">In some embodiments, the auxiliary lines <b>256</b>, <b>266</b>, and <b>276</b> are used only for providing encoding bits used to encode the data by the encoding block <b>260</b>. Other embodiments can use the auxiliary lines <b>256</b>, <b>266</b>, and <b>276</b> only to provide auxiliary data unrelated to encoding. In still other embodiments, a hybrid approach can use one or more of the auxiliary signals for encoding and other auxiliary signal(s) for extra (non-encoding) data.</p>
<p id="p-0063" num="0062">A parallel to serial converter block <b>270</b> receives the data signals <b>272</b>, the control signals <b>274</b>, and the auxiliary signals <b>276</b>. Converter block <b>270</b> converts these signals into a reduced number of signals in the reduced-line protocol (three out of five interface signals used in this example) and outputs these signals on lines of the interface bus <b>34</b>. In the example of <figref idref="DRAWINGS">FIG. 3</figref>, eight data signals <b>272</b> are received which are converted to two NIB_OUT signals <b>280</b><i>a </i>and <b>280</b><i>b</i>, each of the output signals <b>280</b> providing the equivalent data of four of the data signals <b>272</b>. For example, output signal <b>280</b><i>a </i>can provide the data from signals L_DATA_OUT[4]-[8] and output signal <b>280</b><i>b </i>can provide the data from signals L_DATA_OUT[0]-[3]. The NXY and DIR control signals <b>214</b> are provided in the CTRL output signal <b>282</b>. In addition, the converter block <b>270</b> can in some embodiments combine the control signals <b>274</b> with any auxiliary signals on the two auxiliary lines <b>276</b>, providing a combination of signals on the output CTRL signal <b>282</b>.</p>
<p id="p-0064" num="0063">The three signals <b>280</b><i>a</i>, <b>280</b><i>b</i>, and <b>282</b> output by the parallel to serial converter <b>270</b> are received by I/O block <b>202</b>. I/O block <b>202</b> includes data output buffers <b>284</b> for receiving and buffering the data signals <b>280</b><i>a </i>and <b>280</b><i>b </i>and outputting them as signals <b>144</b><i>a </i>and <b>144</b><i>b </i>on the interface bus <b>34</b>. Buffers <b>284</b> can be enabled or disabled by an ENB signal <b>285</b> provided by controller(s) of the PHY <b>14</b>, such as one or more processors in the PHY core <b>46</b>. I/O block <b>202</b> also includes an output buffer <b>286</b> for receiving and buffering the CTRL signal <b>282</b> and outputting it as signal <b>154</b> on the interface bus <b>34</b>.</p>
<p id="p-0065" num="0064">An output clock buffer <b>288</b> in I/O block <b>202</b> receives a CLK signal <b>290</b> from the PHY <b>14</b>. In some embodiments, the clock signal CLK is generated by the PHY <b>14</b> and is provided to the components of the serdes <b>44</b>, including the blocks <b>220</b>, <b>230</b>, and <b>240</b> on one side, and the blocks <b>250</b>, <b>260</b>, and <b>270</b> on the other side. The clock buffer <b>288</b> receives the CLK signal <b>290</b> and outputs it on line <b>158</b> to the SoC <b>12</b> and link controller <b>20</b> as one of the signal lines of the bus <b>34</b>.</p>
<p id="p-0066" num="0065"><figref idref="DRAWINGS">FIG. 4</figref> is a diagrammatic illustration of an example of a set of signals which can be used in some embodiments for the reduced-line protocol between SoC <b>12</b> and PHY <b>14</b> to convey information on a reduced number of lines. In this example, five signal lines are provided for the reduced-line protocol bus <b>34</b>.</p>
<p id="p-0067" num="0066">Timing signal <b>302</b> is a lower frequency (e.g., 60 MHz) signal shown as a reference to indicate the timing clock used for a standard implementations of a second interface protocol such as a ULPI interface. In most ULPI implementations, eight data lines and three control signal lines (NXT, DIR, and STP) are used at a data rate of 60 MHz. Timing signal <b>304</b> is a higher-frequency (e.g., 240 MHz) signal shown to indicate the data rate used for some implementations of the reduce-line protocol described herein, including the implementation of <figref idref="DRAWINGS">FIG. 4</figref>, to allow a reduction of the number of signal lines. For example, when using a single data rate (SDR) configuration, 240 MHz can be used. When using a double data rate (DDR) configuration, 120 MHz can be used. The data rate of four times the standard ULPI rate allows four times as much data to be transferred on a bus line in the same amount of time</p>
<p id="p-0068" num="0067">A first data signal <b>310</b> provides data on the interface bus <b>34</b>. In the example of <figref idref="DRAWINGS">FIG. 4</figref>, first data signal <b>310</b> combines the data signals D4 through D7 of the second protocol. If there are eight signal lines D1-D8 in the intermediate protocol, as in ULPI implementations, then lines D4-D7 are the high nibble of these lines. First data signal <b>310</b> serializes these high nibble lines onto a single line and provides them at a frequency that is, for example, four times as great as in the intermediate protocol.</p>
<p id="p-0069" num="0068">Similarly, second data signal <b>312</b> provides data on the interface bus <b>34</b>. In the example of <figref idref="DRAWINGS">FIG. 4</figref>, second data signal <b>312</b> combines the data signals D0 through D3 of the intermediate protocol, and thus provides the low nibble of the second protocol data lines. Second data signal <b>310</b> serializes these low nibble lines onto a single line and provides them at a frequency greater than in the intermediate protocol, similarly to first data signal <b>310</b>.</p>
<p id="p-0070" num="0069">First control signal <b>314</b> provides multiple control signals on the interface bus <b>34</b>. In the example of <figref idref="DRAWINGS">FIG. 4</figref>, the first control signal <b>314</b> is called CTRL and combines the ULPI control signals NXT and DIR onto a single signal. In addition, in some embodiments the first control signal <b>314</b> can include additional, auxiliary signals. In the example shown, up to two auxiliary signals CF1 and CF2 can also be serialized on the first protocol signal <b>314</b>. One or more of these auxiliary signals can carry extra data similarly to the data signals D0-D7, and/or can be extra control signals. In some embodiments providing encoding as described with reference to <figref idref="DRAWINGS">FIGS. 2 and 3</figref>, one or more of the auxiliary signals CF1 and CF2 can be used to communicate additional data used in the encoding scheme, for example. In one example, the extra bits of the CF1 and/or CF2 signals can indicate which coding operations were used on the 8 data bits to provide minimal transitions in the signal and conserve power. Some embodiments can also provide a hybrid approach in which one of the auxiliary signals is used for encoding, and the other is used for additional data.</p>
<p id="p-0071" num="0070">Second control signal <b>314</b> provides multiple control signals on the interface bus <b>34</b>. In the example of <figref idref="DRAWINGS">FIG. 4</figref>, the second control signal <b>314</b> is called STP&#x2032; and provides the ULPI control signal STP. In addition, in some embodiments the second control signal <b>314</b> can include additional, auxiliary signals. In the example shown, up to three auxiliary signals CB1, CB2, and CB3 can be serialized on the second protocol signal <b>314</b>. One or more of these auxiliary signals can carry extra data similarly to the data signals D0-D7, and/or can be additional control signals. In some embodiments providing encoding as described with reference to <figref idref="DRAWINGS">FIGS. 2 and 3</figref>, the auxiliary signals can be used as additional bits used in the encoding scheme, for example, similarly as described above for signals CF1 and CF2. Some embodiments can also provide a hybrid approach in which one or more of the auxiliary signals are used for encoding, and the other signals are used for extra (non-encoding) data.</p>
<p id="p-0072" num="0071">A clock signal <b>318</b> is also provided on one of the lines of the third protocol. As shown, the clock signal <b>318</b> is at the higher frequency/data rate of signal <b>304</b>, to allow the serializing of multiple intermediate protocol signals onto a single reduced-line protocol signal.</p>
<p id="p-0073" num="0072"><figref idref="DRAWINGS">FIGS. 5A-5D</figref> are example diagrams showing different embodiments of reduced-line protocols in which only four signal lines are used. Each of the embodiments of <figref idref="DRAWINGS">FIGS. 5A-5D</figref> combines the control signals and/or clock signal in a different way.</p>
<p id="p-0074" num="0073">In <figref idref="DRAWINGS">FIG. 5A</figref>, one embodiment <b>330</b> of the third protocol is shown in which control signals are combined with the clock signal. In some embodiments, a 240 MHz clock can be used (SDR) as shown by signal <b>332</b>. The first data signal <b>334</b> and second data signal <b>336</b> can be similar to the data signals <b>310</b> and <b>312</b> of <figref idref="DRAWINGS">FIG. 4</figref>, in which four intermediate protocol data signals are serialized onto each data signal <b>334</b> and <b>336</b>.</p>
<p id="p-0075" num="0074">In this embodiment, the first control signal <b>338</b> includes the two control signals NXT and DIR, as well as the clock signal. For example, the NXT and DIR signals can be provided in serial order on the signal, and the clock signal can be embedded in the signal <b>338</b>. In one implementation, the signal <b>338</b> is encoded with a Manchester encoding scheme that allows the signal to be self-clocking and allows a clock signal to be recovered from signal <b>338</b>. For example, a decoder can be provided on the SoC <b>12</b> on the link controller side of the interface bus <b>34</b> to recover the clock signal from signal <b>338</b>. A second control signal <b>340</b> provides the STP control signal. In some embodiments, additional auxiliary signals can be included on the signal <b>338</b> and/or the signal <b>340</b>, as described above for the embodiment of <figref idref="DRAWINGS">FIG. 4</figref>.</p>
<p id="p-0076" num="0075">In <figref idref="DRAWINGS">FIG. 5B</figref>, a second embodiment <b>350</b> is shown in which control signals are combined with the clock signal. In some embodiments, a 120 MHz clock can be used (DDR) as shown by signal <b>352</b>. The first data signal <b>354</b> and second data signal <b>356</b> can be similar to the data signals <b>310</b> and <b>312</b> of <figref idref="DRAWINGS">FIG. 4</figref>, in which four intermediate protocol data signals are serialized onto each data signal <b>354</b> and <b>356</b>.</p>
<p id="p-0077" num="0076">As in the embodiment of <figref idref="DRAWINGS">FIG. 5A</figref>, the second control signal <b>360</b> includes the STP signal and can include auxiliary data in some embodiments. Also similar to <figref idref="DRAWINGS">FIG. 5A</figref>, the first control signal <b>358</b> includes the two control signals NXT and DIR as well as the clock signal. However, in this example, the clock is not Manchester-encoded, but is provided as a clock signal having every other clock pulse replaced with a control signal transmitting NXT or DIR. For example, the NXT and DIR signals can alternate after every clock pulse as shown. Although the NXT and DIR signals are replacing the clock signal at these times, the clock signal is still used by the SoC as based on an internal delay line of the link controller (or other component of the SoC <b>12</b>). The link controller keeps track of and uses this internal clock signal during NXT and DIR signal transmission based on the last previous clock pulse received by the SoC from the PHY <b>14</b>. The internal clock line can be corrected of any deviation from the actual clock signal when an actual clock pulse is received on the signal <b>358</b>.</p>
<p id="p-0078" num="0077">In <figref idref="DRAWINGS">FIG. 5C</figref>, another embodiment <b>370</b> is shown in which control signals are combined with the clock signal. In some embodiments, a 120 MHz clock can be used (DDR) as shown by signal <b>372</b>. The first data signal <b>374</b> and second data signal <b>376</b> can be similar to the data signals <b>310</b> and <b>312</b> of <figref idref="DRAWINGS">FIG. 4</figref>, in which four data signals are serialized onto each data signal <b>374</b> and <b>376</b>.</p>
<p id="p-0079" num="0078">In this embodiment, the first control signal <b>378</b> includes the NXT and DIR signals similar to signal <b>338</b> of <figref idref="DRAWINGS">FIG. 5A</figref>, and can include auxiliary data in some embodiments. However, the clock is not included on signal <b>378</b>. Instead, the STP and CLK signals are combined on control signal <b>380</b>. In this embodiment, the clock signal CLK can be provided by SoC <b>12</b> to the PHY <b>14</b> instead of the PHY <b>14</b> providing the CLK signal to the SoC (this configuration is allowed by the ULPI standard, for example). The CLK signal is provided by the SoC <b>12</b> as a clock signal having every fourth clock pulse replaced with a control signal transmitting the STP signal. Although the STP signal is replacing the clock signal at these times, the clock signal is still being used by the PHY as based on an internal delay clock line of the PHY <b>14</b>. The PHY <b>14</b> keeps track of and uses this internal clock signal during NXT and DIR signal transmission based on the last previous clock pulse received by the PHY <b>14</b> from the SoC. The internal clock line can be corrected of any deviation from the actual clock signal when an actual clock pulse is received on the signal <b>358</b>.</p>
<p id="p-0080" num="0079">In <figref idref="DRAWINGS">FIG. 5D</figref>, another embodiment <b>390</b> is shown in which control signals are combined with the clock signal. In some embodiments, a 240 MHz clock can be used (SDR) as shown by signal <b>392</b>. The first data signal <b>394</b> and second data signal <b>396</b> can be similar to the data signals <b>310</b> and <b>312</b> of <figref idref="DRAWINGS">FIG. 4</figref>, in which four intermediate protocol data signals are serialized onto each data signal <b>394</b> and <b>396</b>.</p>
<p id="p-0081" num="0080">In this embodiment, the first control signal <b>398</b> includes the NXT and DIR signals similar to signal <b>338</b> of <figref idref="DRAWINGS">FIG. 5A</figref>, and can include auxiliary data if desired. However, the clock is not included on signal <b>398</b>. Instead, the STP and CLK signals are combined on control signal <b>399</b>. In this embodiment, the clock signal CLK can be provided by PHY <b>14</b> to the SoC <b>12</b>, and the STP signal can be provided by the SoC <b>12</b> to the PHY <b>14</b>. To perform this communication in alternating directions on bus <b>34</b>, a high-impedance (&#x201c;Hi-Z&#x201d;) signal is provided after each CLK signal pulse and STP signal to allow a bus turn-around operation to be performed by the system.</p>
<p id="p-0082" num="0081">In other four-line embodiments, the NXT, DIR, and STP signals can be combined into a single control signal. Since one of these signals (STP) is transmitted in an opposite direction to the other signals, the use of two additional bus turn-around signals (Hi-Z) may be needed similarly to the embodiment of <figref idref="DRAWINGS">FIG. 5D</figref>. This may require serializing five signals on the single line, and in some implementations may require a clock speed five times the original 60 MHz.</p>
<p id="p-0083" num="0082"><figref idref="DRAWINGS">FIG. 6</figref> is a flow diagram illustrating one example of a method <b>400</b> for interfacing a link controller with a PHY with a reduced number of signal lines, in which data is sent from the SoC <b>12</b> to the PHY <b>14</b>. Method <b>400</b> can be implemented, for appropriate steps, by the serdes <b>32</b> of the SoC or by the serdes <b>44</b> of the PHY. Method <b>400</b> can be implemented using software, hardware, or a combination of software and hardware elements. A software embodiment can include but is not limited to firmware, resident software, microcode, etc. Furthermore, some embodiments can take the form of a computer program product accessible from a computer-usable or computer-readable medium providing program code for use by or in connection with a computer or any instruction execution system. For the purposes of this description, a computer-usable or computer readable medium can be any apparatus that can contain, store, communicate, propagate, or transport the program for use by or in connection with the instruction execution system, apparatus, or device. The medium can be an electronic, magnetic, optical, electromagnetic, infrared, or semiconductor system (or apparatus or device) or a propagation medium. Examples of a computer-readable storage medium include a semiconductor or solid-state memory, magnetic tape, a removable computer diskette, a random access memory (RAM), a read-only memory (ROM), a rigid magnetic disk and an optical disk.</p>
<p id="p-0084" num="0083">The method begins at <b>402</b>, and in step <b>404</b>, signals of the intermediate protocol are received at the link serdes <b>32</b>. These signals are provided by components of the link wrapper <b>24</b> which in previous implementations would output these intermediate protocol signals on a bus to the PHY. For example, in some embodiments the intermediate protocol is ULPI. In step <b>406</b>, it is checked whether auxiliary data is being used, such as for encoding and/or for extra data communication. If not, then the process continues at step <b>410</b>, below. If auxiliary data is being used, then in step <b>408</b> the link serdes <b>32</b> merges the auxiliary data signal <b>112</b> (<figref idref="DRAWINGS">FIG. 2</figref>) into the intermediate protocol by creating auxiliary signals similar to the data signals of the intermediate protocol.</p>
<p id="p-0085" num="0084">In step <b>410</b>, it is checked whether encoding is being used. For example, low power encoding may be provided in some embodiments, or a different type of encoding. If not, then the process continues at step <b>414</b>, below. If encoding is being used, then in step <b>412</b> the link serdes <b>32</b> encodes data signals on the data lines and one or more of the auxiliary signals according to the encoding scheme. In step <b>414</b>, the link serdes <b>32</b> serializes intermediate protocol signals (and any auxiliary signals) onto reduced-line protocol signals and outputs the reduced-line protocol signals on the bus <b>34</b> to the PHY. For example, in some embodiments described above, the reduced-line protocol signals can include two data signals and a number of control signals, such as STP&#x2032; as shown in <figref idref="DRAWINGS">FIG. 2</figref>.</p>
<p id="p-0086" num="0085">In step <b>416</b>, the PHY serdes <b>44</b> receives the reduced-line protocol signals sent by the SoC serdes <b>32</b> on the bus <b>34</b>. In step <b>418</b>, the PHY serdes <b>44</b> deserializes the signals into intermediate protocol signals, such as ULPI signals, and any auxiliary signals. In step <b>420</b>, it is checked whether encoding is being used. If not, then the process continues at step <b>424</b>, below. If encoding is used, then in step <b>422</b> the PHY serdes <b>44</b> decodes data signals on the data lines and one or more of the auxiliary signals according to the encoding/decoding scheme.</p>
<p id="p-0087" num="0086">In step <b>424</b>, it is checked whether auxiliary data is being used (e.g., for non-encoding purposes, such as for communication of extra data). If not, then the process continues at step <b>428</b> below. If auxiliary data is being used, then in step <b>426</b> the PHY serdes <b>44</b> extracts the auxiliary data signal <b>112</b> (<figref idref="DRAWINGS">FIG. 3</figref>) from the intermediate protocol signals by creating a combined (e.g. serialized) auxiliary data signal as a separate communication channel. In step <b>428</b>, the PHY serdes <b>44</b> provides the resulting intermediate protocol signals and auxiliary data signal (if used) to the PHY wrapper <b>40</b> for normal processing. For example, the PHY wrapper can process ULPI signals into UTMI or UTMI+ signals for use by the PHY core, which translates the signals into a form appropriate for output on the communication interface <b>16</b>. The process is complete at <b>430</b>.</p>
<p id="p-0088" num="0087">When communicating signals in the opposite signal direction, i.e., such that data is sent from the PHY <b>14</b> to the SoC <b>12</b>, a similar process to method <b>400</b> can be used. When using the example signals described in <figref idref="DRAWINGS">FIGS. 2-4</figref>, the main difference of this data direction compared to the method <b>400</b> is that the PHY serdes <b>44</b> outputs a different set of reduced-line protocol signals on the bus <b>34</b> to the SoC <b>12</b>. For example, the PHY <b>14</b> can output two data signals, a CTRL signal (including NXT and DIR control signals), and a CLK signal. In addition, more auxiliary signals may be able to be sent in one direction than the other if less control signals are provided in one of the directions. For example, three auxiliary signals can be received and processed by the PHY serdes <b>44</b> while two auxiliary signals can be received and processed by the link serdes <b>32</b> in the examples described above.</p>
<p id="p-0089" num="0088">It should be noted that the order of steps described in <figref idref="DRAWINGS">FIG. 6</figref> is only one example, and that different orders can be used in other embodiments, and/or some steps performed simultaneously.</p>
<p id="p-0090" num="0089">The embodiments described herein allow the use of a reduced-line interface in a system communicating using a common interface standard, such as USB. Although the embodiments described herein are with reference to the USB interface, other interface standards can be used in other embodiments in accordance with features described herein.</p>
<p id="p-0091" num="0090">The reduced-line protocol interface described above can significantly reduce the number of lines needed for communication between an SoC and a PHY in a communication interface, thus allowing a reduced number of I/O pins on integrated circuits and consequently less expense in manufacturing components and more options in component placement.</p>
<p id="p-0092" num="0091">The protocol described herein lets the rest of the link controller and PHY systems outside the serdes <b>32</b> and <b>44</b> to consider the communication as if it were the standard intermediate protocol at the standard frequency or data rate, thus preserving the standard and reducing the amount of software and hardware changes needed to implement the systems described herein. For example, in ULPI systems, the interface described herein allows SoC integrators to reduce the number of pins while able to re-use the entire ULPI ecosystem, including the USB software stack, UTMI components, ULPI_BRIDGE, ULPI partitioning, and CMOS I/Os. The reduced-line interface can have no impact or changes from standardized software approaches and small added cost to hardware.</p>
<p id="p-0093" num="0092">Although various embodiments have been described using specific terms and devices, such description is for illustrative purposes only. The words used are words of description rather than of limitation. It is to be understood that changes and variations may be made by those of ordinary skill in the art without departing from the spirit or the scope of various inventions supported by the written disclosure and the drawings. In addition, it should be understood that aspects of various other embodiments may be interchanged either in whole or in part. It is therefore intended that the claims be interpreted in accordance with the true spirit and scope of the invention without limitation or estoppel.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A physical layer circuit for interfacing a link controller and a device communication bus, the physical layer circuit comprising:
<claim-text>a wrapper coupled to a first interface bus having five communication lines and coupled to a second interface bus having a larger number of communication lines than the first interface bus, wherein the wrapper is operative to communicate first signals with the link controller over the first interface bus and to perform conversion between the first signals and second signals communicated on the second interface bus; and</claim-text>
<claim-text>a core coupled to the wrapper by the second interface bus, the core operative to communicate device signals with the device communication bus coupled to the core by performing conversion between the second signals and the device signals;</claim-text>
<claim-text>wherein two lines of the first interface bus are used to provide data, two lines of the first interface bus are used to provide control signals, and one line of the first interface bus is used to provide a clock signal.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The physical layer circuit as recited in <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the wrapper includes a serdes to convert between the first signals and intermediate signals of an intermediate protocol having a greater number of lines than the first interface bus, wherein the intermediate signals are converted by the wrapper to a second protocol for the second interface bus.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The physical layer circuit as recited in <claim-ref idref="CLM-00002">claim 2</claim-ref> wherein the serdes is a first serdes, and wherein the link controller includes a second serdes compatible with the first serdes and operative to convert between the first signals and intermediate signals of the intermediate protocol having a greater number of lines than the first interface bus.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The physical layer circuit as recited in <claim-ref idref="CLM-00003">claim 3</claim-ref> wherein the second interface bus follows the UTMI or UTMI+ protocol (USB Transceiver Macrocell Interface) protocol, and wherein the intermediate protocol is ULPI (UTMI+ Low Pin Interface).</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The physical layer circuit as recited in <claim-ref idref="CLM-00002">claim 2</claim-ref> wherein at least one of the lines of the first interface bus includes at least one auxiliary signal.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The physical layer circuit as recited in <claim-ref idref="CLM-00005">claim 5</claim-ref> wherein the auxiliary signal carries data used to encode data on data lines of the intermediate protocol.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The physical layer circuit as recited in <claim-ref idref="CLM-00005">claim 5</claim-ref> wherein the auxiliary signal carries extra data in excess of data carried by the intermediate protocol.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The physical layer circuit as recited in <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the physical layer circuit is on a physical layer chip, and wherein the link controller is provided on a system on a chip (SoC) external to the physical layer chip.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The physical layer circuit as recited in <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the device communication bus is Universal Serial Bus (USB).</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. A physical layer circuit for interfacing a link controller and a device communication bus, the physical layer circuit comprising:
<claim-text>a wrapper coupled to a first interface bus having four communication lines and coupled to a second interface bus having a larger number of communication lines than the first interface bus, wherein the wrapper is operative to communicate first signals with the link controller over the first interface bus and to perform conversion between the first signals and second signals communicated on the second interface bus; and</claim-text>
<claim-text>a core coupled to the wrapper by the second interface bus, the core operative to communicate device signals with the device communication bus coupled to the core by performing conversion between the second signals and the device signals;</claim-text>
<claim-text>wherein two lines of the first interface bus are used to provide data, and two lines of the first interface bus are used to provide control signals and a clock signal combined with one of the control signals.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The physical layer circuit as recited in <claim-ref idref="CLM-00010">claim 10</claim-ref> wherein the wrapper includes a serdes to convert between the first signals and intermediate signals of an intermediate protocol having a greater number of lines than the first interface bus, wherein the intermediate signals are converted by the wrapper to a second protocol for the second interface bus.</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The physical layer circuit as recited in <claim-ref idref="CLM-00011">claim 11</claim-ref> wherein the serdes is a first serdes, and wherein the link controller includes a second serdes compatible with the first serdes and operative to convert between the first signals and intermediate signals of the intermediate protocol having a greater number of lines than the first interface bus.</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The physical layer circuit as recited in <claim-ref idref="CLM-00012">claim 12</claim-ref> wherein the second interface bus follows the UTMI or UTMI+ protocol (USB Transceiver Macrocell Interface) protocol, and wherein the intermediate protocol is ULPI (UTMI+ Low Pin Interface).</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The physical layer circuit as recited in <claim-ref idref="CLM-00010">claim 10</claim-ref> wherein the physical layer circuit is on a physical layer chip, and wherein the link controller is provided on a system on a chip (SoC) external to the physical layer chip.</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The physical layer circuit as recited in <claim-ref idref="CLM-00011">claim 11</claim-ref> wherein at least one of the lines of the first interface bus includes at least one auxiliary signal.</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The physical layer circuit as recited in <claim-ref idref="CLM-00015">claim 15</claim-ref> wherein the auxiliary signal carries data used to encode data on data lines of the intermediate protocol.</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The physical layer circuit as recited in <claim-ref idref="CLM-00015">claim 15</claim-ref> wherein the auxiliary signal carries extra data in excess of data carried by the intermediate protocol.</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The physical layer circuit as recited in <claim-ref idref="CLM-00010">claim 10</claim-ref> wherein the device communication bus is Universal Serial Bus (USB).</claim-text>
</claim>
</claims>
</us-patent-grant>

<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08627298-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08627298</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>12637207</doc-number>
<date>20091214</date>
</document-id>
</application-reference>
<us-application-series-code>12</us-application-series-code>
<us-term-of-grant>
<us-term-extension>942</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>9</main-group>
<subgroup>45</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>717145</main-classification>
</classification-national>
<invention-title id="d2e53">Using appropriate level of code to be executed in runtime environment using metadata describing versions of resources being used by code</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>7577951</doc-number>
<kind>B2</kind>
<name>Partamian et al.</name>
<date>20090800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>2007/0220481</doc-number>
<kind>A1</kind>
<name>Gabel et al.</name>
<date>20070900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>2008/0134156</doc-number>
<kind>A1</kind>
<name>Osminer et al.</name>
<date>20080600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>2008/0256510</doc-number>
<kind>A1</kind>
<name>Auerbach</name>
<date>20081000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>2009/0119651</doc-number>
<kind>A1</kind>
<name>Slattery</name>
<date>20090500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>2009/0271772</doc-number>
<kind>A1</kind>
<name>Stephenson et al.</name>
<date>20091000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>2011/0145801</doc-number>
<kind>A1</kind>
<name>Kaplinger et al.</name>
<date>20110600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>2012/0159439</doc-number>
<kind>A1</kind>
<name>Kaplinger et al.</name>
<date>20120600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717121</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>WO</country>
<doc-number>2008087633</doc-number>
<kind>A2</kind>
<date>20080700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00010">
<othercit>Office Action from U.S. Appl. No. 13/405,276 dated Jul. 30, 2012.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00011">
<othercit>Bond et al., &#x201c;Tomcat Kick Start,&#x201d; Chapter 5&#x2014;Basic Principles of JSPs, http://java.sun.com/developer/Books/javaserverpages/tomcat/index.html, pp. 77-96, Jun. 2003.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00012">
<othercit>Ball et al., &#x201c;The Java EE 5 Tutorial,&#x201d; Sun Microsystems, Inc., Chapters 2-13, pp. 35-481, Jun. 2006.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00013">
<othercit>Final Office Action from U.S. Appl. No. 13/405,276 dated Nov. 21, 2012.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>24</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>717136-137</main-classification>
<additional-info>unstructured</additional-info>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>717140-161</main-classification>
<additional-info>unstructured</additional-info>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>4</number-of-drawing-sheets>
<number-of-figures>4</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20110145801</doc-number>
<kind>A1</kind>
<date>20110616</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Kaplinger</last-name>
<first-name>Todd E.</first-name>
<address>
<city>Durham</city>
<state>NC</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Kenna</last-name>
<first-name>Stephen J.</first-name>
<address>
<city>Research Triangle Park</city>
<state>NC</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Kaplinger</last-name>
<first-name>Todd E.</first-name>
<address>
<city>Durham</city>
<state>NC</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Kenna</last-name>
<first-name>Stephen J.</first-name>
<address>
<city>Research Triangle Park</city>
<state>NC</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<last-name>Voigt, Jr.</last-name>
<first-name>Robert A.</first-name>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
<agent sequence="02" rep-type="attorney">
<addressbook>
<orgname>Winstead, P.C.</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>International Business Machines Corporation</orgname>
<role>02</role>
<address>
<city>Armonk</city>
<state>NY</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Vo</last-name>
<first-name>Ted T</first-name>
<department>2191</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">A system and computer program product for using an appropriate level of code to be executed in a runtime environment. Code in a non-Java format is translated into a Java source file. During the translation process, metadata is generated from a configuration file where the metadata includes version information of the resources (e.g., JSTL) being used by the code written in the non-Java format. A determination is made as to whether to recompile the non-Java code based on software components, referred herein as &#x201c;listener components,&#x201d; determining whether the versions of the resources being used by the non-Java code performs acceptably well in the runtime environment. If a listener component determines that a version of a resource being used is not acceptable, then the non-Java code is recompiled with a newer version of the resource. In this manner, an appropriate level of code is executed by the runtime environment.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="202.95mm" wi="175.94mm" file="US08627298-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="206.25mm" wi="136.06mm" orientation="landscape" file="US08627298-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="158.50mm" wi="123.87mm" file="US08627298-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="212.17mm" wi="183.22mm" file="US08627298-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="217.76mm" wi="178.22mm" file="US08627298-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">TECHNICAL FIELD</heading>
<p id="p-0002" num="0001">The present invention relates to tools for computer software development, and more particularly to using the appropriate level of code to be executed in a runtime environment using metadata describing versions of resources being used by the code.</p>
<heading id="h-0002" level="1">BACKGROUND OF THE INVENTION</heading>
<p id="p-0003" num="0002">Currently, there are many technologies that allow developers to write code in a non-Java format (e.g., a scripting language such as JavaServer Pages (JSP) or Groovy, Web Services Description Language (WSDL), Enterprise JavaBeans (EJB)) which is translated into a Java source file. The Java source file may be compiled by a compiler into what is known as Java bytecodes, which are stored in a binary class file. Java bytecodes refer to an intermediate language that is later executed by a runtime program, such as a Java Virtual Machine (JVM).</p>
<p id="p-0004" num="0003">During the translation process described above, the Java source code may be generated using particular versions of resources or technologies. For example, JSP may use the ISP Standard Tag Library (JSTL) resource. JSTL refers to a set of software routines that are used in JSP pages by referencing them with tags. In another example, JSP may use the JavaServerFaces (JSF) framework. JSF is a framework for building user interfaces for Java applications. Oftentimes, the generated Java source code is kept in binary format and used on future versions of these resources and technologies, including the future versions of the runtime environment (e.g., version of the runtime program).</p>
<p id="p-0005" num="0004">However, the specifications for these software resources, technologies and runtime environments are constantly being updated and revised. Additional functionality and features may be deployed. Particular code may no longer be needed. As a result, the Java source code used on future versions of these resources, technologies and runtime environments may not be the most efficient in terms of performance.</p>
<heading id="h-0003" level="1">BRIEF SUMMARY OF THE INVENTION</heading>
<p id="p-0006" num="0005">In one embodiment of the present invention, a computer program product embodied in a computer readable storage medium for using an appropriate level of code to be executed in a runtime environment comprises the programming instructions for translating code from a first format into a source file of a second format. The computer program product further comprises the programming instructions for generating metadata during the translation to include version information of one or more resources used by the code of the first format. Furthermore, the computer program product comprises the programming instructions for storing the generated metadata in a file. Additionally, the computer program product comprises the programming instructions for compiling the source file of the second format. In addition, the computer program product comprises the programming instructions for storing the compiled source file of the second format in the file. Further, the computer program product comprises the programming instructions for loading the file in a memory. Furthermore, the computer program product comprises the programming instructions for registering the loading with one or more listener components, where each of the one or more listener components determines a version of a particular resource being used by the code of the first format. In addition, the computer program product comprises the programming instructions for recompiling the code of the first format if one of the one or more listener components indicates that a version of a first resource being used by the code of the first format is not acceptable to be used by a runtime environment. The code of the first format is recompiled using a newer version of the first resource.</p>
<p id="p-0007" num="0006">In another embodiment of the present invention, a computer program product embodied in a computer readable storage medium for using an appropriate level of code to be executed in a runtime environment comprises the programming instructions for translating code from a first format into a source file of a second format. The computer program product further comprises the programming instructions generating metadata during the translation to include version information of one or more resources used by the code of the first format. Furthermore, the computer program product comprises the programming instructions for storing the generated metadata in a file. Additionally, the computer program product comprises the programming instructions for compiling the source file of the second format. Further, the computer program product comprises the programming instructions for storing the compiled source file of the second format in the file. In addition, the computer program product comprises the programming instructions for recompiling the code in the first format using versions of resources to be implemented by a runtime environment. Furthermore, the computer program product comprises the programming instructions for evaluating performance of the recompiled code. In addition, the computer program product comprises the programming instructions for executing the recompiled code by a runtime program of the runtime environment if the performance exceeds a threshold.</p>
<p id="p-0008" num="0007">Other forms of the embodiments of the computer program product described above are in a system.</p>
<p id="p-0009" num="0008">The foregoing has outlined rather generally the features and technical advantages of one or more embodiments of the present invention in order that the detailed description of the present invention that follows may be better understood. Additional features and advantages of the present invention will be described hereinafter which may form the subject of the claims of the present invention.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE SEVERAL VIEWS OF THE DRAWING</heading>
<p id="p-0010" num="0009">A better understanding of the present invention can be obtained when the following detailed description is considered in conjunction with the following drawings, in which:</p>
<p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. 1</figref> is a hardware configuration of a computer system configured in accordance with an embodiment of the present invention;</p>
<p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. 2</figref> illustrates the software components of an application server in accordance with an embodiment of the present invention;</p>
<p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. 3</figref> is a flowchart of a method for using an appropriate level of code to be executed in a runtime environment; and</p>
<p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. 4</figref> is a flowchart of an alternative method for using an appropriate level of code to be executed in a runtime environment.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0005" level="1">DETAILED DESCRIPTION OF THE INVENTION</heading>
<p id="p-0015" num="0014">The present invention comprises a method, system and computer program product for using an appropriate level of code to be executed in a runtime environment. In one embodiment of the present invention, code in a first format, such as a scripting language code, is translated into a Java source file. During the translation process, metadata is generated from a configuration file (e.g., tag library descriptor file) where the metadata includes version information of the resources (e.g., JSTL) being used by the code written in the first format. A determination is made as to whether to recompile the code written in the first format based on software components, referred herein as &#x201c;listener components,&#x201d; determining whether the versions of the resources being used by the code written in the first format performs acceptably well in the runtime environment. If a listener component determines that a version of a resource being used is not acceptable, then the code written in the first format is recompiled with a newer version of the resource. Alternatively, the code written in the first format may be automatically recompiled using the latest versions of the resources to be implemented by the runtime environment. The performance of the recompiled code is then evaluated. If the performance exceeds a threshold, then the recently recompiled code is executed by the runtime environment. Otherwise, the earlier version of the compiled Java source file is executed by the runtime environment. In this manner, an appropriate level of code is executed by the runtime environment.</p>
<p id="p-0016" num="0015">While the following discusses the present invention in connection with translating a scripting language, such as JSP, into a Java source file implementing Java components, the principles of the present invention may be implemented to translate code from any format to a different format. For example, the principles of the present invention may be implemented in connection with translating WSDL or EJBs into code that is interpreted and then compiled, such as Java source files. A person of ordinary skill in the art would be capable of applying the principles of the present invention to such implementations. Further, embodiments applying the principles of the present invention to such implementations would fall within the scope of the present invention.</p>
<p id="p-0017" num="0016">In the following description, numerous specific details are set forth to provide a thorough understanding of the present invention. However, it will be apparent to those skilled in the art that the present invention may be practiced without such specific details. In other instances, well-known circuits have been shown in block diagram form in order not to obscure the present invention in unnecessary detail. For the most part, details considering timing considerations and the like have been omitted inasmuch as such details are not necessary to obtain a complete understanding of the present invention and are within the skills of persons of ordinary skill in the relevant art.</p>
<p id="h-0006" num="0000">FIG. <b>1</b>&#x2014;Hardware Configuration of Computer System</p>
<p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. 1</figref> illustrates an embodiment of a hardware configuration of a computer system <b>100</b> which is representative of a hardware environment for practicing the present invention. Referring to <figref idref="DRAWINGS">FIG. 1</figref>, computer system <b>100</b> may have a processor <b>101</b> coupled to various other components by system bus <b>102</b>. An operating system <b>103</b> may run on processor <b>101</b> and provide control and coordinate the functions of the various components of <figref idref="DRAWINGS">FIG. 1</figref>. An application <b>104</b> in accordance with the principles of the present invention may run in conjunction with operating system <b>103</b> and provide calls to operating system <b>103</b> where the calls implement the various functions or services to be performed by application <b>104</b>. Application <b>104</b> may include, for example, an application server configured to use an appropriate level of code to be executed in a runtime environment as discussed further below in association with <figref idref="DRAWINGS">FIGS. 3 and 4</figref>. A more detail description of the application server is provided below in connection with <figref idref="DRAWINGS">FIG. 2</figref>.</p>
<p id="p-0019" num="0018">Referring again to <figref idref="DRAWINGS">FIG. 1</figref>, read-only memory (&#x201c;ROM&#x201d;) <b>105</b> may be coupled to system bus <b>102</b> and include a basic input/output system (&#x201c;BIOS&#x201d;) that controls certain basic functions of computer device <b>100</b>. Random access memory (&#x201c;RAM&#x201d;) <b>106</b> and disk adapter <b>107</b> may also be coupled to system bus <b>102</b>. It should be noted that software components including operating system <b>103</b> and application <b>104</b> may be loaded into RAM <b>106</b>, which may be computer system's <b>100</b> main memory for execution. Disk adapter <b>107</b> may be an integrated drive electronics (&#x201c;IDE&#x201d;) adapter that communicates with a disk unit <b>108</b>, e.g., disk drive. It is noted that the program for using an appropriate level of code to be executed in a runtime environment, as discussed further below in association with <figref idref="DRAWINGS">FIGS. 3 and 4</figref>, may reside in disk unit <b>108</b> or in application <b>104</b>.</p>
<p id="p-0020" num="0019">Computer system <b>100</b> may further include a communications adapter <b>109</b> coupled to bus <b>102</b>. Communications adapter <b>109</b> may interconnect bus <b>102</b> with an outside network (not shown) thereby allowing computer system <b>100</b> to communicate with other similar devices.</p>
<p id="p-0021" num="0020">As will be appreciated by one skilled in the art, aspects of the present invention may be embodied as a system, method or computer program product. Accordingly, aspects of the present invention may take the form of an entirely hardware embodiment, an entirely software embodiment (including firmware, resident software, micro-code, etc.) or an embodiment combining software and hardware aspects that may all generally be referred to herein as a &#x201c;circuit,&#x201d; &#x201c;module&#x201d; or &#x201c;system.&#x201d; Furthermore, aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium(s) having computer readable program code embodied thereon.</p>
<p id="p-0022" num="0021">Any combination of one or more computer readable medium(s) may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be, for example, but not limited to, an electronic, magnetic, optical, electromagnetic, infrared, or semiconductor system, apparatus, or device, or any suitable combination of the foregoing. More specific examples (a non-exhaustive list) of the computer readable storage medium would include the following: an electrical connection having one or more wires, a portable computer diskette, a hard disk, a random access memory (RAM), a read-only memory (ROM), an erasable programmable read-only memory (EPROM or flash memory), a portable compact disc read-only memory (CD-ROM), an optical storage device, a magnetic storage device, or any suitable combination of the foregoing. In the context of this document, a computer readable storage medium may be any tangible medium that can contain, or store a program for use by or in connection with an instruction execution system, apparatus, or device.</p>
<p id="p-0023" num="0022">A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein, for example, in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms, including, but not limited to, electro-magnetic, optical, or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate, propagate, or transport a program for use by or in connection with an instruction execution system, apparatus or device.</p>
<p id="p-0024" num="0023">Program code embodied on a computer readable medium may be transmitted using any appropriate medium, including but not limited to wireless, wireline, optical fiber cable, RF, etc., or any suitable combination of the foregoing.</p>
<p id="p-0025" num="0024">Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages, including an object oriented programming language such as Java, Smalltalk, C++ or the like and conventional procedural programming languages, such as the &#x201c;C&#x201d; programming language or similar programming languages. The program code may execute entirely on the user's computer, partly on the user's computer, as a stand-alone software package, partly on the user's computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario, the remote computer may be connected to the user's computer through any type of network, including a local area network (LAN) or a wide area network (WAN), or the connection may be made to an external computer (for example, through the Internet using an Internet Service Provider).</p>
<p id="p-0026" num="0025">Aspects of the present invention are described below with reference to flowchart illustrations and/or block diagrams of methods, apparatus (systems) and computer program products according to embodiments of the present invention. It will be understood that each block of the flowchart illustrations and/or block diagrams, and combinations of blocks in the flowchart illustrations and/or block diagrams, can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer, special purpose computer, or other programmable data processing apparatus to product a machine, such that the instructions, which execute via the processor of the computer or other programmable data processing apparatus, create means for implementing the function/acts specified in the flowchart and/or block diagram block or blocks.</p>
<p id="p-0027" num="0026">These computer program instructions may also be stored in a computer readable medium that can direct a computer, other programmable data processing apparatus, or other devices to function in a particular manner, such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function/act specified in the flowchart and/or block diagram block or blocks.</p>
<p id="p-0028" num="0027">The computer program instructions may also be loaded onto a computer, other programmable data processing apparatus, or other devices to cause a series of operational steps to be performed on the computer, other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the function/acts specified in the flowchart and/or block diagram block or blocks.</p>
<p id="p-0029" num="0028">As stated in the Background section, during the translation of code written in a non-Java format (e.g., scripting language such as JSP) into a Java source file, the Java source code may be generated using particular versions of resources or technologies. For example, JSP uses the JSTL resource. In another example, JSP uses the JSF framework. Oftentimes, the generated Java source code is kept in binary format and used on future versions of these resources and technologies, including the future versions of the runtime environment (e.g., version of runtime program). However, the specifications for these software resources, technologies and runtime environments are constantly being updated and revised. Additional functionality and features may be deployed. Particular code may no longer be needed. As a result, the Java source code used on future versions of these resources, technologies and runtime environments may not be the most efficient in terms of performance.</p>
<p id="p-0030" num="0029">The principles of the present invention provide a technique for using an appropriate level of code (i.e., using code with the appropriate resources that is sufficiently efficient in terms of performance) to be executed in a runtime environment as discussed below in connection with <figref idref="DRAWINGS">FIGS. 2-4</figref>. <figref idref="DRAWINGS">FIG. 2</figref> illustrates an application server with software components used in determining an appropriate level of code to be executed in a runtime environment. <figref idref="DRAWINGS">FIG. 3</figref> is a flowchart of a method for using an appropriate level of code to be executed in a runtime environment. <figref idref="DRAWINGS">FIG. 4</figref> is a flowchart of an alternative method for using an appropriate level of code to be executed in a runtime environment.</p>
<p id="p-0031" num="0030">A description of the software components of the application server for practicing the principles of the present invention is provided below in connection with <figref idref="DRAWINGS">FIG. 2</figref>.</p>
<p id="h-0007" num="0000">FIG. <b>2</b>&#x2014;Software Components of Application Server</p>
<p id="p-0032" num="0031"><figref idref="DRAWINGS">FIG. 2</figref> illustrates an embodiment of the present invention of an application server <b>200</b> configured to use an appropriate level of code to be executed in a runtime environment as discussed further below in association with <figref idref="DRAWINGS">FIGS. 3 and 4</figref>. Referring to <figref idref="DRAWINGS">FIG. 2</figref>, application server <b>200</b> includes a container <b>201</b>, such as a JavaServer Page (JSP) container. Container <b>201</b> may refer to software that acts as a parent program to hold and execute other software routines. In one embodiment, container <b>201</b> includes a translator <b>202</b> (e.g., JSP translator) configured to translate code written in a non-Java format (e.g., a scripting language such as JavaServer Pages. (JSP) or Groovy, Web Services Description Language (WSDL), Enterprise JavaBeans (EJB)) into a Java source file. Translator <b>202</b> is further configured to generate metadata during the translation process which is used to determine an appropriate level of code to be executed in a runtime environment as discussed below in connection with <figref idref="DRAWINGS">FIGS. 3 and 4</figref>. Metadata may refer to data that describes other data. In one embodiment, metadata is used to describe the versions of resources being used by the code written in a non-Java format. It is noted that the term &#x201c;resources&#x201d; used herein refers to at least resources, technologies and frameworks. Examples of resources, though not limiting, include a component library, such as JSTL and JSF.</p>
<p id="p-0033" num="0032">JSP container <b>201</b> further includes software components referred to herein as listener components <b>203</b>A-N. Listener components <b>203</b>A-N may collectively or individually be referred to as listener components <b>203</b> or listener component <b>203</b>, respectively. While <figref idref="DRAWINGS">FIG. 2</figref> illustrates N number of listener components <b>203</b>, JSP container <b>201</b> may contain zero or more number of listener components <b>203</b>.</p>
<p id="p-0034" num="0033">Listener components <b>203</b> are used to determine if the version of the resource being used by the code written in the non-Java format performs acceptably well in the runtime environment as discussed below in connection with <figref idref="DRAWINGS">FIGS. 3 and 4</figref>. Each listener component <b>203</b> is associated with a particular resource. For example, listener component <b>203</b>A may be associated with the JSTL resource and listener component <b>203</b>B may be associated with the JSF resource. In this manner, listener component <b>203</b>A determines the version of the JSTL resource being used and whether that version is satisfactory to be executed by the runtime environment. Similarly, listener component <b>203</b>B determines the version of the JSF resource being used and whether that version is satisfactory to be executed by the runtime environment. In one embodiment, listener component <b>203</b> determines whether the version of its associated resource performs acceptably well to be used by the runtime environment from a performance perspective. For example, metrics, such as requests per second that a server can handle, memory consumption, thread usage, and so forth, may be used. In one embodiment, application server <b>200</b> can define the criteria to be used by listener component <b>203</b> for determining what should be considered acceptable performance.</p>
<p id="p-0035" num="0034">Additionally, application server <b>200</b> includes a Java Virtual Machine (JVM) <b>204</b>. JVM <b>204</b> includes a compiler <b>205</b> configured to compile the Java source file into Java bytecodes which are stored in a binary class file. Java bytecodes refer to an intermediate language that is later Converted into machine language and executed by JVM <b>204</b>.</p>
<p id="p-0036" num="0035">Furthermore, JVM <b>204</b> includes a software component, referred to herein as the classloader <b>206</b>, configured to load Java classes into JVM <b>204</b>.</p>
<p id="p-0037" num="0036">In addition, JVM <b>204</b> includes a software component, referred to herein as the evaluator <b>207</b>, configured to evaluate the performance of the recompiled code written in the non-Java format (e.g., scripting language code) as discussed below in connection with <figref idref="DRAWINGS">FIG. 4</figref>.</p>
<p id="p-0038" num="0037">While <figref idref="DRAWINGS">FIG. 2</figref> illustrates the use of application server <b>200</b> using software components to convert JSPs into Java bytecodes to be executed by a JVM, the principles of the present invention are not to be limited to converting JSPs to Java bytecodes. The principles of the present invention may be implemented to convert code from any format to a different format. For example, the principles of the present invention may be applied for translating WSDL or EJBs into code that is interpreted and then compiled. A person of ordinary skill in the art would be capable of applying the principles of the present invention to such implementations. Further, embodiments applying the principles of the present invention to such implementations would fall within the scope of the present invention.</p>
<p id="p-0039" num="0038">A discussion of an embodiment for using an appropriate level of code to be executed in a runtime environment is provided below in connection with <figref idref="DRAWINGS">FIG. 3</figref>.</p>
<p id="h-0008" num="0000">FIG. <b>3</b>&#x2014;Method for Using an Appropriate Level of Code to be Executed in a Runtime Environment</p>
<p id="p-0040" num="0039"><figref idref="DRAWINGS">FIG. 3</figref> is a flowchart of a method <b>300</b> for using an appropriate level of code to be executed in a runtime environment in accordance with an embodiment of the present invention.</p>
<p id="p-0041" num="0040">Referring to <figref idref="DRAWINGS">FIG. 3</figref>, in conjunction with <figref idref="DRAWINGS">FIGS. 1 and 2</figref>, in step <b>301</b>, translator <b>202</b> translates code written in a scripting language (e.g., JSP, Groovy) into a Java source file.</p>
<p id="p-0042" num="0041">In step <b>302</b>, translator <b>202</b> generates metadata during the translation process of step <b>301</b> to include version information of the resources (e.g., a component library such as JSTL) used by the code written in the scripting language. In one embodiment, the version information acquired by translator <b>202</b> is stored in a configuration file, such as a tag library descriptor as illustrated below. A tag library descriptor may refer to an XML document that contains information about a library as a whole and about each tag contained in the library.</p>
<p id="p-0043" num="0042">An example portion of a tag library descriptor from JSTL is shown below:</p>
<p id="p-0044" num="0043">
<tables id="TABLE-US-00001" num="00001">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="203pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>&#x3c;taglib xmlns=http://java.sun.com/xml/ns/javaee&#x201d;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="28pt" align="left"/>
<colspec colname="1" colwidth="189pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>xmlns:xsi=http://www.w3.org/2001/XMLSchema-instance</entry>
</row>
<row>
<entry/>
<entry>xsi:schemaLocation=&#x201c;http://java.sun.com/xml/ns/javaee</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="203pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>http://java.sun.com/xml/ns/javaee/web-jsptaglibrary_2_1.xsd&#x201d;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="28pt" align="left"/>
<colspec colname="1" colwidth="189pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>version=&#x201c;2.1&#x201d;&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x3c;description&#x3e;JSTL 1.2 core library&#x3c;description&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x3c;display-name&#x3e;JSTL_core&#x3c;/display-name&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x3c;tlib-version&#x3e;1.2&#x3c;/tlib-version&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x3c;short-name&#x3e;c&#x3c;/short-name&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x3c;uri&#x3e;http://java.sun.com/jsp/jstl/core&#x3c;/uri&#x3e;</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0045" num="0044">Translator <b>202</b> would then generate the following metadata based on the information provided in the tag library descriptor shown above:</p>
<p id="p-0046" num="0045">
<tables id="TABLE-US-00002" num="00002">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="28pt" align="left"/>
<colspec colname="1" colwidth="189pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>private static Map_jspx_versionInfo = new</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="203pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>HashMap&#x3c;String,&#x3c;Map&#x3c;String,String&#x3e;&#x3e;;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="28pt" align="left"/>
<colspec colname="1" colwidth="189pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>static{</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="42pt" align="left"/>
<colspec colname="1" colwidth="175pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>_jspx_versionInfo.put ( &#x201c;version&#x201d;, &#x201c;6.0&#x201d;);</entry>
</row>
<row>
<entry/>
<entry>Map_tldInfo = new HashMap&#x3c;String,String&#x3e;( );</entry>
</row>
<row>
<entry/>
<entry>tldInfo.put (&#x201c;JSTL core&#x201d;, &#x201c;1.2&#x201d;);</entry>
</row>
<row>
<entry/>
<entry>_jspx_versionInfo.put (http://java.sun.com/jsp/jstl/core,</entry>
</row>
<row>
<entry/>
<entry>_tldInfo);<sub>&#x2014;</sub></entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="28pt" align="left"/>
<colspec colname="1" colwidth="189pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>}</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0047" num="0046">In this example, translator <b>202</b> indicates that the version of JSTL being used is version 1.2.</p>
<p id="p-0048" num="0047">In step <b>303</b>, translator <b>202</b> stores the metadata generated in step <b>302</b> in a class file. In one embodiment, the class file is stored in memory, such as memory <b>106</b>.</p>
<p id="p-0049" num="0048">In step <b>304</b>, compiler <b>205</b> compiles the Java source file into a Java bytecode. In step <b>305</b>, compiler <b>205</b> stores the Java bytecode in the class file, where the metadata is persisted as part of the class file.</p>
<p id="p-0050" num="0049">In step <b>306</b>, classloader <b>206</b> loads the class file into memory, such as memory <b>106</b>, for JVM <b>204</b>.</p>
<p id="p-0051" num="0050">In step <b>307</b>, classloader <b>206</b> registers the load event to all listener components <b>203</b>, where each listener component <b>203</b> is associated with a particular resource.</p>
<p id="p-0052" num="0051">In step <b>308</b>, a determination is made as to whether to recompile the scripting language code. This determination is based on listener components <b>203</b> determining whether the version of the resources being used by the scripting language code is acceptable to be used by the runtime environment. As stated above, each listener component <b>203</b> (e.g., listener component <b>203</b>A) is associated with a particular resource (e.g., JSTL). Each listener component <b>203</b> determines the version of its associated resource being used by the scripting language code and determines whether this version is acceptable to be used by the runtime environment, such as from a performance perspective. If a listener component <b>203</b> determines that the version of its associated resource being used is not acceptable, then an indication to recompile the scripting language code with the newer version of the resource is generated by listener component <b>203</b>.</p>
<p id="p-0053" num="0052">If an indication is received from a listener component <b>203</b> that the scripting language code needs to be recompiled, then, in step <b>309</b>, the scripting language code is recompiled with the newer version of the resources indicated by listener components <b>203</b>.</p>
<p id="p-0054" num="0053">In step <b>310</b>, the recompiled scripting language code is executed by the runtime program, such as JVM <b>204</b>.</p>
<p id="p-0055" num="0054">If, however, there are no indications received from listener components <b>203</b> that the scripting language code needs to be recompiled, then, in step <b>311</b>, the currently compiled Java source file is executed by the runtime program, such as JVM <b>204</b>.</p>
<p id="p-0056" num="0055">Method <b>300</b> may include other and/or additional steps that, for clarity, are not depicted. Further, method <b>300</b> may be executed in a different order presented and that the order presented in the discussion of <figref idref="DRAWINGS">FIG. 3</figref> is illustrative. Additionally, certain steps in method <b>300</b> may be executed in a substantially simultaneous manner or may be omitted.</p>
<p id="p-0057" num="0056">An alternative method for using an appropriate level of code to be executed in a runtime environment is provided below in connection with <figref idref="DRAWINGS">FIG. 4</figref>.</p>
<p id="h-0009" num="0000">FIG. <b>4</b>&#x2014;Alternative Method for Using an Appropriate Level of Code to be Executed in a Runtime Environment</p>
<p id="p-0058" num="0057"><figref idref="DRAWINGS">FIG. 4</figref> is a flowchart of an alternative method <b>400</b> for using an appropriate level of code to be executed in a runtime environment in accordance with an embodiment of the present invention.</p>
<p id="p-0059" num="0058">Referring to <figref idref="DRAWINGS">FIG. 4</figref>, in conjunction with <figref idref="DRAWINGS">FIGS. 1 and 2</figref>, in step <b>401</b>, translator <b>202</b> translates code written in a scripting language (e.g., JSP, Groovy) into a Java source file.</p>
<p id="p-0060" num="0059">In step <b>402</b>, translator <b>202</b> generates metadata during the translation process of step <b>401</b> to include version information of the resources (e.g., a component library such as JSTL) used by the code written in the scripting language. In one embodiment, the version information acquired by translator <b>202</b> is stored in a configuration file, such as a tag library descriptor as illustrated above.</p>
<p id="p-0061" num="0060">In step <b>403</b>, translator <b>202</b> stores the metadata generated in step <b>402</b> in a class file. In one embodiment, the class file is stored in memory, such as memory <b>106</b>.</p>
<p id="p-0062" num="0061">In step <b>404</b>, compiler <b>205</b> compiles the Java source file into a Java bytecode. In step <b>405</b>, compiler <b>205</b> stores the Java bytecode in the class file, where the metadata is persisted as part of the class file.</p>
<p id="p-0063" num="0062">In step <b>406</b>, classloader <b>206</b> loads the class file into memory, such as memory <b>106</b>, for JVM <b>204</b>.</p>
<p id="p-0064" num="0063">In step <b>407</b>, the scripting language code is recompiled by compiler <b>205</b> using versions of the resources (which may be later versions in comparison to the versions of the resources used in the translation process of step <b>401</b>) to be implemented by the runtime environment. In one embodiment, the recompiled scripting language code is stored in memory, such as memory <b>106</b>.</p>
<p id="p-0065" num="0064">In step <b>408</b>, the performance of the recompiled code is evaluated by evaluator <b>207</b>. For example, a website may now be able to handle ten (10) times the number of users with the recompiled code using the latest versions of the resources to be implemented by the runtime environment. In another example, the recompiled code may use less memory. These examples are not to be limiting to the type of performance metrics that may be used to evaluate the recompiled code by evaluator <b>207</b>.</p>
<p id="p-0066" num="0065">In step <b>409</b>, a determination is made by evaluator <b>207</b> as to whether the performance of the recompiled scripting language code exceeds a threshold. A &#x201c;threshold,&#x201d; as used herein, may include any type of performance metric whose level of performance indicates that the recompiled code should be executed by the runtime program.</p>
<p id="p-0067" num="0066">If the performance of the recompiled scripting language code exceeds the threshold, then, in step <b>410</b>, the recently recompiled version of the scripting language code is executed by the runtime program such as JVM <b>204</b>.</p>
<p id="p-0068" num="0067">If, however, the performance of the recompiled scripting language code does not exceed the threshold, then, in step <b>411</b>, the earlier version of the compiled Java source file is executed by the runtime program, such as JVM <b>204</b>.</p>
<p id="p-0069" num="0068">Method <b>400</b> may include other and/or additional steps that, for clarity, are not depicted. Further, method <b>400</b> may be executed in a different order presented and that the order presented in the discussion of <figref idref="DRAWINGS">FIG. 4</figref> is illustrative. Additionally, certain steps in method <b>400</b> may be executed in a substantially simultaneous manner or may be omitted.</p>
<p id="p-0070" num="0069">Although the method, system and computer program product are described in connection with several embodiments, it is not intended to be limited to the specific forms set forth herein, but on the contrary, it is intended to cover such alternatives, modifications and equivalents, as can be reasonably included within the spirit and scope of the invention as defined by the appended claims. It is noted that the headings are used only for organizational purposes and not meant to limit the scope of the description or claims.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>The invention claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A computer program product embodied in a computer readable storage medium for using an appropriate level of code to be executed in a runtime environment, the computer program product comprising the programming instructions for:
<claim-text>translating code from a first format into a source file of a second format;</claim-text>
<claim-text>generating metadata during said translation to include version information of one or more resources used by said code of said first format;</claim-text>
<claim-text>storing said generated metadata in a file;</claim-text>
<claim-text>compiling said source file of said second format;</claim-text>
<claim-text>storing said compiled source file of said second format in said file;</claim-text>
<claim-text>loading said file in a memory;</claim-text>
<claim-text>registering said loading with one or more listener components, wherein each of said one or more listener components determines a version of a particular resource being used by said code of said first format; and</claim-text>
<claim-text>recompiling said code of said first format if one of said one or more listener components indicates that a version of a first resource being used by said code of said first format is not acceptable to be used by a runtime environment, wherein said code of said first format is recompiled using a newer version of said first resource.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The computer program product as recited in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein said code of said first format comprises scripting language code.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The computer program product as recited in <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein said source file of said second format comprises code that is interpreted and then compiled.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The computer program product as recited in <claim-ref idref="CLM-00001">claim 1</claim-ref> further comprising the programming instructions for:
<claim-text>executing said recompiled code of said first format by a runtime program.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The computer program product as recited in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein said version information of resources used by said code of said first format is stored in a configuration file.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The computer program product as recited in <claim-ref idref="CLM-00001">claim 1</claim-ref> further comprising the programming instructions for:
<claim-text>executing said compiled source file of said second format if none of said one or more listener components indicates that a version of a resource being used by said code of said first format is not acceptable to be used by said runtime environment.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The computer program product as recited in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein said first resource comprises a component library.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. A computer program product embodied in a computer readable storage medium for using an appropriate level of code to be executed in a runtime environment, the computer program product comprising the programming instructions for:
<claim-text>translating code from a first format into a source file of a second format;</claim-text>
<claim-text>generating metadata during said translation to include version information of one or more resources used by said code of said first format;</claim-text>
<claim-text>storing said generated metadata in a file;</claim-text>
<claim-text>compiling said source file of said second format;</claim-text>
<claim-text>storing said compiled source file of said second format in said file;</claim-text>
<claim-text>recompiling said code in said first format using versions of resources to be implemented by a runtime environment;</claim-text>
<claim-text>evaluating performance of said recompiled code; and</claim-text>
<claim-text>executing said recompiled code by a runtime program of said runtime environment if said performance exceeds a threshold.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The computer program product as recited in <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein said code of said first format comprises scripting language code.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The computer program product as recited in <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein said source file of said second format comprises code that is interpreted and then compiled.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The computer program product as recited in <claim-ref idref="CLM-00008">claim 8</claim-ref> further comprising the programming instructions for:
<claim-text>executing said compiled source file of said second format by said runtime program of said runtime environment if said performance does not exceed said threshold.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The computer program product as recited in <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein said resources comprise a component library.</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. A system, comprising:
<claim-text>a memory unit for storing a computer program for using an appropriate level of code to be executed in a runtime environment; and</claim-text>
<claim-text>a processor coupled to said memory unit, wherein said processor, responsive to said computer program, comprises:
<claim-text>circuitry for translating code from a first format into a source file of a second format;</claim-text>
<claim-text>circuitry for generating metadata during said translation to include version information of one or more resources used by said code of said first format;</claim-text>
<claim-text>circuitry for storing said generated metadata in a file;</claim-text>
<claim-text>circuitry for compiling said source file of said second format;</claim-text>
<claim-text>circuitry for storing said compiled source file of said second format in said file;</claim-text>
<claim-text>circuitry for loading said file in a memory;</claim-text>
<claim-text>circuitry for registering said loading with one or more listener components, wherein each of said one or more listener components determines a version of a particular resource being used by said code of said first format; and</claim-text>
<claim-text>circuitry for recompiling said code of said first format if one of said one or more listener components indicates that a version of a first resource being used by said code of said first format is not acceptable to be used by a runtime environment, wherein said code of said first format is recompiled using a newer version of said first resource.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The system as recited in <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein said code of said first format comprises scripting language code.</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The system as recited in <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein said source file of said second format comprises code that is interpreted and then compiled.</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The system as recited in <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein said processor further comprises:
<claim-text>circuitry for executing said recompiled code of said first format by a runtime program.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The system as recited in <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein said version information of resources used by said code of said first format is stored in a configuration file.</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The system as recited in <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein said processor further comprises:
<claim-text>circuitry for executing said compiled source file of said second format if none of said one or more listener components indicates that a version of a resource being used by said code of said first format is not acceptable to be used by said runtime environment.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. The system as recited in <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein said first resource comprises a component library.</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. A system, comprising:
<claim-text>a memory unit for storing a computer program for using an appropriate level of code to be executed in a runtime environment; and</claim-text>
<claim-text>a processor coupled to said memory unit, wherein said processor, responsive to said computer program, comprises:
<claim-text>circuitry for translating code from a first format into a source file of a second format;</claim-text>
<claim-text>circuitry for generating metadata during said translation to include version information of one or more resources used by said code of said first format;</claim-text>
<claim-text>circuitry for storing said generated metadata in a file;</claim-text>
<claim-text>circuitry for compiling said source file of said second format;</claim-text>
<claim-text>circuitry for storing said compiled source file of said second format in said file;</claim-text>
<claim-text>circuitry for recompiling said code in said first format using versions of resources to be implemented by a runtime environment;</claim-text>
<claim-text>circuitry for evaluating performance of said recompiled code; and</claim-text>
<claim-text>circuitry for executing said recompiled code by a runtime program of said runtime environment if said performance exceeds a threshold.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00021" num="00021">
<claim-text>21. The system as recited in <claim-ref idref="CLM-00020">claim 20</claim-ref>, wherein said code of said first format comprises scripting language code.</claim-text>
</claim>
<claim id="CLM-00022" num="00022">
<claim-text>22. The system as recited in <claim-ref idref="CLM-00021">claim 21</claim-ref>, wherein said source file of said second format comprises code that is interpreted and then compiled.</claim-text>
</claim>
<claim id="CLM-00023" num="00023">
<claim-text>23. The system as recited in <claim-ref idref="CLM-00020">claim 20</claim-ref>, wherein said processor further comprises:
<claim-text>circuitry for executing said compiled source file of said second format by said runtime program of said runtime environment if said performance does not exceed said threshold.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00024" num="00024">
<claim-text>24. The system as recited in <claim-ref idref="CLM-00020">claim 20</claim-ref>, wherein said resources comprise a component library. </claim-text>
</claim>
</claims>
</us-patent-grant>

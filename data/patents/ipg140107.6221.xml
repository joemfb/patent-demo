<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08627345-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08627345</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>11762682</doc-number>
<date>20070613</date>
</document-id>
</application-reference>
<us-application-series-code>11</us-application-series-code>
<us-term-of-grant>
<us-term-extension>1540</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>3</main-group>
<subgroup>00</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>9</main-group>
<subgroup>44</subgroup>
<symbol-position>L</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>9</main-group>
<subgroup>46</subgroup>
<symbol-position>L</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>13</main-group>
<subgroup>00</subgroup>
<symbol-position>L</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>719330</main-classification>
</classification-national>
<invention-title id="d2e53">Apparatus, system, and method for soap access to data source procedures</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>6721807</doc-number>
<kind>B2</kind>
<name>Vlissides</name>
<date>20040400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
<classification-national><country>US</country><main-classification>709315</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>2003/0145103</doc-number>
<kind>A1</kind>
<name>Pruyne et al.</name>
<date>20030700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709237</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>2003/0163450</doc-number>
<kind>A1</kind>
<name>Borenstein et al.</name>
<date>20030800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707  1</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>2003/0208533</doc-number>
<kind>A1</kind>
<name>Farquharson et al.</name>
<date>20031100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
<classification-national><country>US</country><main-classification>709203</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>2004/0088713</doc-number>
<kind>A1</kind>
<name>Myllymaki et al.</name>
<date>20040500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
<classification-national><country>US</country><main-classification>719315</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>2004/0193635</doc-number>
<kind>A1</kind>
<name>Hsu et al.</name>
<date>20040900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707102</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>2004/0205187</doc-number>
<kind>A1</kind>
<name>Sayal et al.</name>
<date>20041000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709224</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>2004/0225724</doc-number>
<kind>A1</kind>
<name>Pavlik et al.</name>
<date>20041100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
<classification-national><country>US</country><main-classification>709219</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>2004/0243944</doc-number>
<kind>A1</kind>
<name>Sabiers et al.</name>
<date>20041200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
<classification-national><country>US</country><main-classification>715853</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>2005/0015491</doc-number>
<kind>A1</kind>
<name>Koeppel</name>
<date>20050100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709226</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>2006/0136351</doc-number>
<kind>A1</kind>
<name>Angrish et al.</name>
<date>20060600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707  1</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>2006/0206883</doc-number>
<kind>A1</kind>
<name>Sabbouh</name>
<date>20060900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717146</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00013">
<document-id>
<country>US</country>
<doc-number>2007/0294133</doc-number>
<kind>A1</kind>
<name>Lasker et al.</name>
<date>20071200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>705 14</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00014">
<document-id>
<country>EP</country>
<doc-number>1696633</doc-number>
<date>20060800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
<classification-cpc-text>H04L 29/08</classification-cpc-text>
</us-citation>
<us-citation>
<patcit num="00015">
<document-id>
<country>JP</country>
<doc-number>2005/322222</doc-number>
<date>20051100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
<classification-cpc-text>H04L 12/66</classification-cpc-text>
</us-citation>
<us-citation>
<nplcit num="00016">
<othercit>Myerson et al., &#x201c;How to Call DB2 Stored Procedures in Visual Basic 6.0 Applications&#x201d;, Mar. 2003, 34pgs.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00017">
<othercit>Fielding et al., &#x201c;Hypertext Transfer Protocol HTTP/1.1&#x201d;, Jun. 1999, http://www.ietf.org/rfc/rfc2616.txt, 116pgs.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00018">
<othercit>Franks et al., &#x201c;HTTP Authentication: Basic and Digest Access Authentication&#x201d;, Jun. 1999 ftp://ftp.isi.edu/in-notes/rfc2617.txt, 23pgs.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>33</number-of-claims>
<us-exemplary-claim>33</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>719330</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>6</number-of-drawing-sheets>
<number-of-figures>6</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20080313660</doc-number>
<kind>A1</kind>
<date>20081218</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Malik</last-name>
<first-name>Amir</first-name>
<address>
<city>Fremont</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Singh</last-name>
<first-name>Hardeep</first-name>
<address>
<city>Fremont</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Malik</last-name>
<first-name>Amir</first-name>
<address>
<city>Fremont</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Singh</last-name>
<first-name>Hardeep</first-name>
<address>
<city>Fremont</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Kunzler Law Group, PC</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>International Business Machines Corporation</orgname>
<role>02</role>
<address>
<city>Armonk</city>
<state>NY</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Ho</last-name>
<first-name>Andy</first-name>
<department>2194</department>
</primary-examiner>
<assistant-examiner>
<last-name>Mudrick</last-name>
<first-name>Timothy A</first-name>
</assistant-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">An apparatus, system, and method are disclosed for web service access to a remote data source procedure. The method includes receiving a web service request from a client and identifying the procedure call identifier within the web service request. The web service request includes a procedure call identifier and zero or more parameters. The method includes creating a procedure call to a data source procedure accessible through an Application Program Interface. The procedure call is created at least in part by ordering parameters of the procedure call based on an order of the zero or more parameters in the web service request. The parameters of the procedure call are ordered without using an explicit parameter mapping. The method includes sending a web service response to the client in response to receiving a response from the data source procedure. The web service response includes information responsive to the procedure call.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="160.95mm" wi="102.45mm" file="US08627345-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="236.81mm" wi="182.96mm" orientation="landscape" file="US08627345-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="236.90mm" wi="153.75mm" file="US08627345-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="177.21mm" wi="113.88mm" file="US08627345-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="230.21mm" wi="151.89mm" file="US08627345-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="231.82mm" wi="168.06mm" file="US08627345-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="238.51mm" wi="192.53mm" orientation="landscape" file="US08627345-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">BACKGROUND OF THE INVENTION</heading>
<p id="p-0002" num="0001">1. Field of the Invention</p>
<p id="p-0003" num="0002">This invention relates to web services and more particularly relates to Simple Object Access Protocol (&#x201c;SOAP&#x201d;) access to data source procedures.</p>
<p id="p-0004" num="0003">2. Description of the Related Art</p>
<p id="p-0005" num="0004">A popular computer network architecture is a client-server network. In this architecture, a client sends requests over a computer network to a server, which responds to the requests. The client-server architecture may be implemented with many network types. The Internet is and example of a computer network that relies on client-server relationships. Clients are typically personal computers, laptop computers, etc. with a web browser. The client sends out requests over the Internet to web servers around the world for web services. Web servers, in turn, may request other web services to formulate a response to the client's request.</p>
<p id="p-0006" num="0005">A client request may be for a file or a directory, but may also be a request to access a data source procedure. A data source procedure, once called, executes a computer program, a subroutine, or the like, which typically returns information from a data source. Typically a data source procedure requires zero or more parameters to be passed to the data source procedure by way of a procedure call. The data source procedure then may return requested information or results or may also return some kind of message, such as an error message.</p>
<p id="p-0007" num="0006">One common type of data source is a database. A database is typically managed by a database server or a database management system. A procedure call to the database server may be used to retrieve data from the database managed by the database server. The database server may respond to database commands. Each database command typically performs a different function to manipulate and/or extract data in the database to provide desired information or a desired result. Typically, one or more parameters are passed to a database command using a procedure call. The database command executes and returns requested information or other message. For example, a banking database server may respond to a procedure call containing an account number as a parameter to prepare an account statement.</p>
<p id="p-0008" num="0007">A data source procedure, or database command if a database is the data source, typically differs from a request for a request for a file, etc. in that the data source procedure requires more than merely retrieving a particular table entry, file, or directory. Many files, directories, tables, etc. are currently available over the Internet by way of a web service in a client-server relationship. Currently, web services are being developed as part of a Service Oriented Architecture (&#x201c;SOA&#x201d;). A SOA is advantageous because a client can access information from a server independent of the data path between the client and the server and does not require a connection to be maintained until the response is sent.</p>
<p id="p-0009" num="0008">One protocol that follows the SOA standard is Simple Object Access Protocol (&#x201c;SOAP&#x201d;). SOAP is a protocol for exchanging Extensible Markup Language (&#x201c;XML&#x201d;) messages over computer networks such as the Internet, typically using Hypertext Transfer Protocol (&#x201c;HTTP&#x201d;). SOAP provides a basic message messaging framework upon which more abstract layers can build. SOAP messages commonly use a Remote Procedure Call (&#x201c;RPC&#x201d;) pattern, in which one network node (the client) sends a request message to another network node (the server), and the server sends a response message back to the client. SOAP messages are typically for data source procedures and are distinguished from other HTTP messages that may request a file or directory. SOAP is a popular protocol for XML messages. However, other protocols are also available and provide similar benefits, such as XML Remote Procedure Call (&#x201c;XML-SOAP&#x201d;) and Representational State Transfer (&#x201c;REST&#x201d;).</p>
<p id="p-0010" num="0009">Many databases and other data sources are legacy data sources and may not have been designed as a web service. Significant resources may be invested in legacy databases and the owners typically would rather make a database available as a web service rather than converting a database to a type that allows web access. Examples of legacy database programs are DB2&#xae; from International Business Machines, Oracle&#xae; from Oracle Corporation, MySQL&#xae; from MySQL AB, and Sybase&#xae; from Sybase Inc. Many other legacy data sources not contained in database form contain useful information that may be made available to users if offered as a web service.</p>
<p id="p-0011" num="0010">Legacy database systems may, for example, be available through a user through a user interface. Currently, making a database available as a web service requires a change to a web server to include explicit mapping of database commands and parameters necessary to expose database procedures as a web service. Typically the Web Services Description Language (&#x201c;WSDL&#x201d;) is used to communicate details about how a client may call and use a web service. In addition, the web server or application server references an explicit mapping that defines how the web service name and parameters map to database procedure names and parameters. This is a disadvantage because data source owners and/or database developers must create a custom mapping for every database procedure. This mapping must be deployed to the web server configured to communicate with the data source. Requiring a database owner or developer to create an explicit mapping to make a data source and/or its database procedures accessible as a web service is cumbersome and inefficient. Data source administrators may be exposed to client technologies with which they might not be familiar or comfortable.</p>
<heading id="h-0002" level="1">SUMMARY OF THE INVENTION</heading>
<p id="p-0012" num="0011">From the foregoing discussion, it should be apparent that a need exists for an apparatus, system, and method that would eliminate a requirement for explicit mapping for a data source procedure to make a data source available as a web service. Beneficially, such an apparatus, system, and method would use an implicit mapping of a web service request with a data source procedure and accompanying ordered parameters to create a procedure call. The apparatus, system, and method would not require a data source owner to create a custom middle layer with explicit mapping of the data source procedure and parameters.</p>
<p id="p-0013" num="0012">The present invention has been developed in response to the present state of the art, and in particular, in response to the problems and needs in the art that have not yet been fully solved by currently available methods to provide web access to data source procedures. Accordingly, the present invention has been developed to provide a method, apparatus, and system for web service access to a remote data source procedure that overcome many or all of the above-discussed shortcomings in the art.</p>
<p id="p-0014" num="0013">A method of the present invention is also presented for web service access to a remote data source procedure. The method in the disclosed embodiments substantially includes the steps necessary to carry out the functions presented below with respect to the operation of the described apparatus and system. In one embodiment, the method includes receiving a web service request from a client and identifying the procedure call identifier within the web service request. The web service request includes a procedure call identifier and zero or more parameters. The method includes creating a procedure call to a data source procedure accessible by way of an Application Program Interface (&#x201c;API&#x201d;). The data source procedure is identified by the procedure call identifier without an explicit procedure call identifier mapping. The procedure call is created at least in part by ordering parameters of the procedure call based on an order of the zero or more parameters in the web service request and the parameters of the procedure call are ordered without using an explicit parameter mapping. The method includes sending a web service response to the client in response to receiving a response from the data source procedure. The web service response includes information responsive to the procedure call.</p>
<p id="p-0015" num="0014">In one embodiment, the method includes confirming that the data source procedure associated with the procedure call identifier is supported by a coupled data source server. In another embodiment, the method includes verifying that the type of data for the zero or more parameters of the web service request matches zero or more parameters of the data source procedure. In another embodiment, the web service request is in the form of a Simple Object Access Protocol (&#x201c;SOAP&#x201d;) request. In yet another embodiment, the SOAP request is coded using an extended markup language (&#x201c;XML&#x201d;) and a Hyper Text Transfer Protocol (&#x201c;HTTP&#x201d;).</p>
<p id="p-0016" num="0015">The procedure call, in one embodiment, includes a database call and the data source procedure includes a database stored procedure managed by a database server. In another embodiment, the method includes identifying a database type from the web service request and selecting a servlet. The servlet is capable of creating a procedure call compatible with the database type. The method also includes creating a web service response based on a response from a database server of the database type. In another embodiment, the database call includes a native call to a database server where the native call is compatible with a client interface supported by the database server. In a further embodiment, the client interface is Java Database Connectivity (&#x201c;JDBC&#x201d;), Object Linking and Embedding Database (&#x201c;OLE DB&#x201d;), Open Database Connectivity (&#x201c;ODBC&#x201d;), or Call Level Interface (&#x201c;CLI&#x201d;). In yet another embodiment, the database server is DB2, Oracle, MySQL, or Sybase.</p>
<p id="p-0017" num="0016">In one embodiment, ordering the zero or more parameters of the procedure call without using an explicit parameter mapping includes ordering the zero or more parameters of the procedure call without referencing an explicit mapping defined for an application server receiving the web service request. In another embodiment, the web service request is an XML Remote Procedure Call (&#x201c;XML-RPC&#x201d;) request or a Representational State Transfer (&#x201c;REST&#x201d;) request.</p>
<p id="p-0018" num="0017">The apparatus for web service access to a remote data source procedure is provided with a plurality of modules configured to functionally execute the necessary steps of receiving a web service request, creating a procedure call, and sending a response back to a client. These modules in the described embodiments include a receive module that receives a web service request from a client. The web service request includes a procedure call identifier and zero or more parameters. The apparatus includes an identification module that identifies the procedure call identifier within the web service request. The apparatus includes a call module that creates a procedure call to a data source procedure by way of an API. The data source procedure is identified by the procedure call identifier without an explicit procedure call identifier mapping. The procedure call is created at least in part by ordering parameters of the procedure call based on an order of the zero or more parameters in the web service request and the parameters of the procedure call is ordered without using an explicit parameter mapping. The apparatus includes a response module that sends a web service response to the client in response to receiving a response from the data source procedure. The web service response includes information responsive to the procedure call.</p>
<p id="p-0019" num="0018">A system of the present invention is also presented for web service access to a remote data source procedure. The system may be embodied by a data source and a web server with a processor and a memory in communication with the data source and a client. In particular, the web server includes a receive module that receives a web service request from a client. The web service request includes a procedure call identifier and zero or more parameters. The web server includes an identification module that identifies the procedure call identifier within the web service request. The web server includes a call module that creates a procedure call to a data source procedure by way of an API. The data source procedure is identified by the procedure call identifier without an explicit procedure call identifier mapping. The procedure call is created at least in part by ordering parameters of the procedure call based on an order of the zero or more parameters in the web service request and the parameters of the procedure call is ordered without using an explicit parameter mapping. The web server includes a response module that sends a web service response to the client in response to receiving a response from the data source procedure. The web service response includes information responsive to the procedure call.</p>
<p id="p-0020" num="0019">In one embodiment, the data source server is a database server and the data source is a database. In a further embodiment, the database server is a DB2 server, an Oracle server, a MySQL server, or a Sybase server and the database is encoded in a format compatible with the database server.</p>
<p id="p-0021" num="0020">Reference throughout this specification to features, advantages, or similar language does not imply that all of the features and advantages that may be realized with the present invention should be or are in any single embodiment of the invention. Rather, language referring to the features and advantages is understood to mean that a specific feature, advantage, or characteristic described in connection with an embodiment is included in at least one embodiment of the present invention. Thus, discussion of the features and advantages, and similar language, throughout this specification may, but do not necessarily, refer to the same embodiment.</p>
<p id="p-0022" num="0021">Furthermore, the described features, advantages, and characteristics of the invention may be combined in any suitable manner in one or more embodiments. One skilled in the relevant art will recognize that the invention may be practiced without one or more of the specific features or advantages of a particular embodiment. In other instances, additional features and advantages may be recognized in certain embodiments that may not be present in all embodiments of the invention.</p>
<p id="p-0023" num="0022">These features and advantages of the present invention will become more fully apparent from the following description and appended claims, or may be learned by the practice of the invention as set forth hereinafter.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0024" num="0023">In order that the advantages of the invention will be readily understood, a more particular description of the invention briefly described above will be rendered by reference to specific embodiments that are illustrated in the appended drawings. Understanding that these drawings depict only typical embodiments of the invention and are not therefore to be considered to be limiting of its scope, the invention will be described and explained with additional specificity and detail through the use of the accompanying drawings, in which:</p>
<p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. 1</figref> is a schematic block diagram illustrating one embodiment of a system for web service access to a remote data source procedure in accordance with the present invention;</p>
<p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. 2</figref> is a schematic block diagram illustrating one embodiment of an apparatus for web service access to a remote data source procedure in accordance with the present invention;</p>
<p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. 3</figref> is a schematic flow chart diagram illustrating one embodiment of a method for web service access to a remote data source procedure in accordance with the present invention;</p>
<p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. 4A</figref> is a schematic flow chart diagram illustrating a first part of another embodiment of a method for web service access to a remote data source procedure in accordance with the present invention;</p>
<p id="p-0029" num="0028"><figref idref="DRAWINGS">FIG. 4B</figref> is a schematic flow chart diagram illustrating a second part of another embodiment of a method for web service access to a remote data source procedure in accordance with the present invention; and</p>
<p id="p-0030" num="0029"><figref idref="DRAWINGS">FIG. 5</figref> is a schematic block diagram illustrating a particular example of a system for web service access to a remote data source procedure in accordance with the present invention.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0004" level="1">DETAILED DESCRIPTION OF THE INVENTION</heading>
<p id="p-0031" num="0030">Many of the functional units described in this specification have been labeled as modules, in order to more particularly emphasize their implementation independence. For example, a module may be implemented as a hardware circuit comprising custom VLSI circuits or gate arrays, off-the-shelf semiconductors such as logic chips, transistors, or other discrete components. A module may also be implemented in programmable hardware devices such as field programmable gate arrays, programmable array logic, programmable logic devices or the like.</p>
<p id="p-0032" num="0031">Modules may also be implemented in software for execution by various types of processors. An identified module of executable code may, for instance, comprise one or more physical or logical blocks of computer instructions which may, for instance, be organized as an object, procedure, or function. Nevertheless, the executables of an identified module need not be physically located together, but may comprise disparate instructions stored in different locations which, when joined logically together, comprise the module and achieve the stated purpose for the module. Where modules or portions of modules are implemented in software, the software is stored on a computer readable medium.</p>
<p id="p-0033" num="0032">Indeed, a module of executable code maybe a single instruction, or many instructions, and may even be distributed over several different code segments, among different programs, and across several memory devices. Similarly, operational data may be identified and illustrated herein within modules, and may be embodied in any suitable form and organized within any suitable type of data structure. The operational data may be collected as a single data set, or may be distributed over different locations including over different storage devices.</p>
<p id="p-0034" num="0033">Reference throughout this specification to &#x201c;one embodiment,&#x201d; &#x201c;an embodiment,&#x201d; or similar language means that a particular feature, structure, or characteristic described in connection with the embodiment is included in at least one embodiment of the present invention. Thus, appearances of the phrases &#x201c;in one embodiment,&#x201d; &#x201c;in an embodiment,&#x201d; and similar language throughout this specification may, but do not necessarily, all refer to the same embodiment.</p>
<p id="p-0035" num="0034">Reference to a signal bearing medium may take any form capable of generating a signal, causing a signal to be generated, or causing execution of a program of machine-readable instructions on a digital processing apparatus. A signal bearing medium may be embodied by a transmission line, a compact disk, digital-video disk, a magnetic tape, a Bernoulli drive, a magnetic disk, a punch card, flash memory, integrated circuits, or other digital processing apparatus memory device.</p>
<p id="p-0036" num="0035">Furthermore, the described features, structures, or characteristics of the invention may be combined in any suitable manner in one or more embodiments. In the following description, numerous specific details are provided, such as examples of programming, software modules, user selections, network transactions, database queries, database structures, hardware modules, hardware circuits, hardware chips, etc., to provide a thorough understanding of embodiments of the invention. One skilled in the relevant art will recognize, however, that the invention may be practiced without one or more of the specific details, or with other methods, components, materials, and so forth. In other instances, well-known structures, materials, or operations are not shown or described in detail to avoid obscuring aspects of the invention.</p>
<p id="p-0037" num="0036">The schematic flow chart diagrams included herein are generally set forth as logical flow chart diagrams. As such, the depicted order and labeled steps are indicative of one embodiment of the presented method. Other steps and methods may be conceived that are equivalent in function, logic, or effect to one or more steps, or portions thereof, of the illustrated method. Additionally, the format and symbols employed are provided to explain the logical steps of the method and are understood not to limit the scope of the method. Although various arrow types and line types may be employed in the flow chart diagrams, they are understood not to limit the scope of the corresponding method. Indeed, some arrows or other connectors may be used to indicate only the logical flow of the method. For instance, an arrow may indicate a waiting or monitoring period of unspecified duration between enumerated steps of the depicted method. Additionally, the order in which a particular method occurs may or may not strictly adhere to the order of the corresponding steps shown.</p>
<p id="p-0038" num="0037"><figref idref="DRAWINGS">FIG. 1</figref> is a schematic block diagram illustrating one embodiment of a system <b>100</b> for web service access to a remote data source procedure in accordance with the present invention. <figref idref="DRAWINGS">FIG. 1</figref> is a general diagram describing one possible system <b>100</b> for the present invention. A more detailed description of the present invention is included in <figref idref="DRAWINGS">FIG. 2</figref>. The system <b>100</b> includes a web server <b>102</b> and a client <b>104</b>. The web server <b>102</b> includes a processor <b>106</b>, a memory <b>108</b>, a Hypertext Transfer Protocol (&#x201c;HTTP&#x201d;) handler <b>110</b>, a Simple Object Access Protocol (&#x201c;SOAP&#x201d;) handler <b>112</b>, and servlets <b>114</b>. The servlets <b>114</b> each include a stored procedure translator <b>116</b> and a SOAP return handler <b>118</b>.</p>
<p id="p-0039" num="0038">The client <b>104</b> includes an HTTP request <b>120</b>. The HTTP request <b>120</b> is an Extensible Markup Language (&#x201c;XML&#x201d;) message <b>122</b>. The XML message <b>122</b> is a SOAP request <b>124</b> with a procedure call identifier <b>126</b> and zero or more parameters <b>128</b>. The system <b>100</b> includes a DB2 database server <b>130</b> communicating with a DB2 database <b>132</b>, an Oracle database server <b>134</b> communicating with an Oracle database <b>136</b>, and a MySQL database server <b>138</b> communicating with a MySQL database <b>140</b>. The database servers <b>130</b>, <b>134</b>, <b>136</b> are in communication with the web server <b>102</b>. Each element of the system <b>100</b> is described below in more detail.</p>
<p id="p-0040" num="0039">In general, the present invention overcomes the limitations of the prior art by allowing a client <b>104</b> to a send web service request to a data source without explicit mapping done by middleware such as a web server <b>102</b>. Software comprising the present invention may be installed on a web server <b>102</b> serving a data source such as a database <b>132</b>, <b>136</b>, <b>140</b> without customizations specific to the database <b>132</b>, <b>136</b>, <b>140</b> such as adding explicit mapping instructions for data source procedures and related parameters. The present invention provides an implicit mapping between a procedure identifier <b>126</b> and parameters <b>128</b> of a web service request and a procedure call to the data source.</p>
<p id="p-0041" num="0040">In a preferred embodiment, the present invention identifies the procedure call identifier <b>126</b> and parameters <b>128</b> with the structure of a SOAP request <b>124</b> written as an XML message <b>122</b> and sent as an HTTP request <b>120</b>. The present invention then creates a procedure call based on the procedure call identifier <b>126</b> as a namespace of the SOAP request <b>124</b>. The present invention formats the procedure call with the parameters <b>128</b> of the SOAP request <b>124</b> based on the order of the parameters found within the SOAP request <b>126</b>. The present invention then makes a blind procedure call to the data source. The present invention then formats results received in a reply from the data source into a SOAP return message that is then sent to the client <b>104</b>.</p>
<p id="p-0042" num="0041">Beneficially, a data source owner (or database <b>132</b>, <b>136</b>, <b>140</b> owner) need not modify any middleware to provide access to the data source as a web service. A client <b>104</b> also does not require knowledge of explicit mapping rules defined for the web server <b>102</b> receiving the web service request. The client <b>104</b> must simply have knowledge of the data source procedure and related parameters and parameter ordering. The client <b>104</b> can then simply create a SOAP request <b>124</b> (or similar request) with the correct procedure call identifier in the namespace of the SOAP request <b>124</b> and then place the proper parameters in order in the SOAP request <b>124</b> without any regard to what is happening in the middleware (web server <b>102</b>).</p>
<p id="p-0043" num="0042">The system <b>100</b> includes a web server <b>102</b> in communication with at least one client <b>104</b> over a computer network such as the Internet. The computer network may includes switches, routers, other web servers, cables, wireless connections, and other equipment known to those of skill in the art. The web server <b>102</b> includes a computer with one or more processors <b>106</b> and memory <b>108</b>. The web server <b>102</b> may include other servers and processes for facilitating communication with a client and for providing web services. One of skill in the art will recognize other features and functions of a web server <b>102</b>.</p>
<p id="p-0044" num="0043">The web server <b>102</b> includes an HTTP handler <b>110</b> that receives and processes HTTP requests, responses, messages, etc. <b>120</b>. In one embodiment, the HTTP handler <b>110</b> receives HTTP requests <b>120</b> and parses SOAP requests <b>124</b> from other requests and then sends the SOAP requests <b>124</b> to the SOAP handler <b>112</b>. The HTTP handler <b>110</b> may include other servers, processes, handlers, etc. to handle various web service requests. The HTTP handler <b>110</b> may also parse out SOAP requests <b>124</b> from an HTTP request <b>120</b> and then send the SOAP request <b>124</b> to the SOAP handler <b>112</b> while processing or otherwise handling the non-SOAP portions of the HTTP request <b>120</b>. In other embodiments, the SOAP handler <b>112</b> may receive SOAP requests <b>124</b> from other types of web service requests other than HTTP requests <b>120</b>.</p>
<p id="p-0045" num="0044">The SOAP handler <b>112</b> handles web service requests and portions of web service requests that include embedded SOAP requests <b>124</b>. In one embodiment, the SOAP handler <b>112</b> handles SOAP requests <b>124</b> that are part of an HTTP request <b>120</b>. A SOAP request <b>124</b> is typically distinguished from other HTTP requests <b>120</b> without a SOAP message in that SOAP requests <b>124</b> typically involve a call to some type of data source procedure, function, subroutine, etc. where other HTTP requests <b>120</b> typically include a request for a specific file, directory, table entry, etc. and often does not invoke a function, subroutine, etc.</p>
<p id="p-0046" num="0045">In one embodiment, the SOAP handler <b>112</b> determines which database type is requested and then sends the SOAP request <b>124</b> to a servlet <b>114</b> that handles database requests of the database type. For example, if the SOAP handler <b>112</b> determines that a SOAP request <b>124</b> is a request to a DB2 database <b>132</b>, the SOAP handler <b>112</b> sends the SOAP request to a DB2 servlet <b>114</b>.</p>
<p id="p-0047" num="0046">A stored procedure translator <b>116</b> in the DB2 servlet <b>114</b> then creates a procedure call from the SOAP request <b>124</b>. The stored procedure translator <b>116</b> may then send a generated procedure call to the appropriate database server <b>130</b>, <b>134</b>, <b>138</b>. In another embodiment, another part of the web server <b>102</b> sends the procedure call to the appropriate database server <b>130</b>, <b>134</b>, <b>138</b>. In another embodiment, the web server <b>102</b> is in communication with a single data source so that the SOAP handler <b>112</b> sends the SOAP request <b>124</b> to a stored procedure translator <b>116</b> that creates a procedure call for that data source.</p>
<p id="p-0048" num="0047">The web server <b>102</b>, in one embodiment, includes a SOAP return handler <b>118</b> that handles results from a data source, such as a database server <b>130</b>, <b>134</b>, <b>138</b> and formats the results in a SOAP message that is returned to the client <b>104</b> in response to a SOAP request <b>124</b> corresponding to the results. The SOAP return handler <b>118</b> may be part of a servlet <b>114</b> of a particular data source or database <b>132</b>, <b>136</b> <b>140</b>, may be in communication with a servlet <b>114</b>, or, in the case of a single data source or database <b>132</b>, <b>136</b>, <b>140</b>, may reside in the web server <b>102</b>. In another embodiment, the SOAP return handler <b>118</b> is included with the SOAP handler <b>112</b>. The SOAP return handler <b>118</b> formats the results using the SOAP protocol. The SOAP return handler <b>118</b>, in one embodiment, returns the SOAP return message to the client <b>104</b>. In another embodiment, the HTTP handler <b>110</b> or other function within the web server <b>102</b> returns the SOAP return message <b>104</b> to the client <b>102</b>.</p>
<p id="p-0049" num="0048">The system <b>100</b> includes at least one client <b>104</b>. The client <b>104</b> may be a personal computer, a laptop computer, a workstation, a server accessed by other computers, a hand held device such as a personal digital assistant (&#x201c;PDA&#x201d;), a cellular phone, or the like, a mainframe computer, a cable box, or other computing device capable of sending a web service request. The client <b>104</b> makes a web service request in the form of a SOAP request <b>124</b>. In one embodiment, the SOAP request <b>124</b> is formatted using an Extensible Markup Language (&#x201c;XML&#x201d;) <b>122</b>. The SOAP request <b>124</b>, in another embodiment, is comprises or is a part of an HTTP request <b>120</b>. In other embodiments, the SOAP request <b>124</b> may be formatted using another programming language or may be sent using a protocol other than HTTP.</p>
<p id="p-0050" num="0049">The SOAP request <b>124</b> includes a procedure call identifier <b>126</b> and zero or more parameters <b>128</b>. The procedure call identifier <b>126</b> is a name of a data source procedure or some other designated way to signify to the web server <b>102</b> that the client <b>104</b> intends to call the data source procedure by way of the SOAP request <b>124</b>. In one embodiment, the data source procedure is a stored procedure. In another embodiment, the data source procedure is a remote procedure call (&#x201c;RPC&#x201d;). The procedure call identifier <b>126</b> invokes the RPC or stored procedure for executing a function or retrieving data from a data source. The data source may be a database <b>132</b>, <b>136</b>, <b>140</b> or other location where data is stored. One of skill in the art will recognize other procedure call identifiers <b>126</b> used to invoke a data source procedure by way of a SOAP request <b>124</b>.</p>
<p id="p-0051" num="0050">The procedure call identifier <b>126</b> is implicitly mapped to the data source procedure without any explicit mapping. Prior art methods required an explicit mapping between the name of the data source procedure and a procedure call identifier <b>126</b> received from a client <b>104</b>. With explicit mapping, the name of the data source procedure and the procedure call identifier <b>126</b> could be different. However, a data source <b>132</b>, <b>136</b>, <b>138</b> administrator was required to provide the explicit mapping to the middleware web server <b>102</b> defining what procedure call identifiers would be allowed and would trigger creation of a data call with the name of the data source procedure derived from the explicit mapping. The present invention does not require the explicit mapping, but instead provides an implicit mapping by blindly mapping the procedure call identifier <b>126</b> to a data source procedure name slot within a created procedure call. The same procedure call identifier <b>126</b> that is received from the client <b>104</b> in a web service request is used to form the procedure call.</p>
<p id="p-0052" num="0051">The SOAP request <b>124</b> also includes zero or more parameters <b>128</b>. Each parameter <b>128</b> is formatted in the SOAP request <b>124</b> to be used with the procedure call identifier <b>126</b> to create a procedure call to the data source procedure. A parameter <b>128</b> may be a number, an array, a range, a string, a data structure, or any other form required by the data source procedure. The parameters <b>128</b> are arranged in order in the SOAP request <b>124</b> so that the data source procedure translator <b>116</b> can create a procedure call to the data source based on the order of the parameters without any explicit mapping between the parameter <b>128</b> and required parameters of the data source procedure. The significance of placement of the parameters <b>128</b> in the SOAP message will be discussed in further detail in the discussion of <figref idref="DRAWINGS">FIG. 2</figref>.</p>
<p id="p-0053" num="0052">The system <b>100</b> includes one or more data sources. <figref idref="DRAWINGS">FIG. 1</figref> depicts a system <b>100</b> with three databases <b>132</b>, <b>136</b>, <b>140</b> and accompanying database servers <b>130</b>, <b>134</b>, <b>138</b>. A system <b>100</b> of the present invention may include any number of data sources in communication with a web server <b>102</b>. Each database server <b>130</b>, <b>134</b>, <b>138</b> communicates with the web server <b>102</b> over a client interface. The client interface may be Java Database Connectivity (&#x201c;JDBC&#x201d;), Object Linking and Embedding Database (&#x201c;OLE DB&#x201d;), Open Database Connectivity (&#x201c;ODBC&#x201d;), Call Level Interface (&#x201c;CLI&#x201d;), or any other client interface that allows the web server <b>102</b> to issue requests and receive responses from a database <b>132</b>, <b>136</b>, <b>140</b> through a database server <b>130</b>, <b>124</b>, <b>138</b>. The client interface may use an application programming interface (&#x201c;API&#x201d;). One of skill in the art will recognize other ways that a web server <b>102</b> may send requests to and receive responses from a database <b>132</b>, <b>136</b>, <b>140</b>.</p>
<p id="p-0054" num="0053">Each database server <b>130</b>, <b>134</b>, <b>138</b> is running on one or more computers and includes a database management system to access data in an associated database <b>132</b>, <b>136</b>, <b>140</b>. For example, a DB2 database server <b>130</b> includes a database management system with software, connections, etc. sufficient to access the DB2 database <b>132</b>. Each database <b>132</b>, <b>136</b>, <b>140</b> comprises data storage devices of some form. For example, each database <b>132</b>, <b>136</b>, <b>140</b> may include one or more hard disk drives, tape storage drives, optical drives, and the like. The data storage devices may be individually accessible, may be in a Redundant Array of Independent/Inexpensive Disks/Drives (&#x201c;RAID&#x201d;), may be part of a storage area network (&#x201c;SAN&#x201d;), etc. Each database <b>132</b>, <b>136</b>, <b>140</b> may have a backup copy which may comprise a synchronous mirror, and asynchronous mirror, or the like. One of skill in the art will recognize other ways that a database <b>132</b>, <b>136</b>, <b>140</b> may be implemented and managed by a database server <b>130</b>, <b>134</b>, <b>138</b>.</p>
<p id="p-0055" num="0054"><figref idref="DRAWINGS">FIG. 2</figref> is a schematic block diagram illustrating one embodiment of an apparatus <b>200</b> for web service access to a remote data source procedure in accordance with the present invention. The apparatus <b>200</b> includes a web server <b>102</b> with an HTTP handler <b>110</b>, a SOAP handler <b>112</b>, and a servlet <b>114</b> with a data source procedure translator <b>116</b> and a SOAP return handler <b>118</b>, which are substantially similar to those described in relation to the system <b>100</b> of <figref idref="DRAWINGS">FIG. 1</figref>. The apparatus <b>100</b> also includes a receive module <b>202</b>, an identification module <b>204</b>, a database selection module <b>206</b>, a response module <b>210</b>, and a call module <b>208</b> which are described below.</p>
<p id="p-0056" num="0055">The apparatus <b>200</b> includes a receive module <b>202</b> that receives a web service request from a client <b>104</b>. The web service request comprises a procedure call identifier <b>126</b> and zero or more parameters <b>128</b>. Typically the receive module <b>202</b> is part of the HTTP handler <b>110</b> when the web service request is in the form of an HTTP request <b>120</b>. The receive module <b>202</b>, in another embodiment, may also be incorporated in some other way in the web server <b>102</b> and may receive non-HTTP web service requests with a procedure call identifier <b>126</b> and zero or more parameters <b>128</b>. The HTTP handler <b>110</b> may receive other HTTP requests <b>120</b> as well that do not include SOAP call having a procedure call identifier <b>126</b>. Such requests may be serviced by the HTTP handler <b>110</b> to retrieve file, directory, table entry, etc.</p>
<p id="p-0057" num="0056">The apparatus <b>200</b> includes an identification module <b>204</b> that identifies the procedure call identifier <b>126</b> within the web service request. In one embodiment, the identification module <b>204</b> is part of the SOAP handler <b>112</b>. In another embodiment, the identification module <b>204</b> operates partially or completely separate from the SOAP handler <b>112</b>.</p>
<p id="p-0058" num="0057">The identification module <b>204</b>, in one embodiment, determines if a web service request is an HTTP request <b>120</b>. In another embodiment, the identification module <b>204</b> determines if the web service request uses an HTTP POST method (or verb). Typically, HTTP requests <b>120</b> may be in the form of the following methods: HEAD, GET, POST, PUT, DELETE, TRACE, OPTIONS, and CONNECT. A POST method submits data to be processed to an identified resource and the data is included in the body of the request. Typically, a SOAP request <b>124</b> with a procedure call identifier <b>126</b> and parameters <b>128</b> is submitted using a POST method in order to submit data. Determining if an HTTP request <b>120</b> uses a POST method or uses other HTTP methods, such as a GET or a HEAD, can be used as a test to distinguish between a web service request not accessing a data source procedure and a web service request accessing a data source procedure.</p>
<p id="p-0059" num="0058">In another embodiment, the identification module <b>204</b> determines if the web service request is a SOAP request <b>124</b>. In another embodiment, the identification module determines if a web service request is an XML message <b>122</b>. Optionally, the identification module <b>204</b> determines if parameters <b>128</b> of the web service request are of a correct type. When the identification module <b>204</b> determines that a web service request does not comply with a requirement, the identification module <b>204</b> may generate an error, return the web service request for further processing, trigger another function, etc. The filtering functions of the identification module <b>204</b> provide a way to verify that the web service request complies with formatting requirements prior to further processing by the call module <b>208</b>.</p>
<p id="p-0060" num="0059">Where protocols other than SOAP are used, such as XML Remote Procedure Call (&#x201c;XML-RPC&#x201d;) and Representational State Transfer (&#x201c;REST&#x201d;), the identification module <b>204</b> may be altered to verify that a web service request complies with the requirements of the particular protocol being used. In another option, the identification module <b>204</b> confirms that data source procedure associates with the procedure call identifier <b>126</b> identified as part of the web service request is supported by a coupled data source server. For example, the identification module <b>206</b> may confirm that a database procedure of a coupled DB2 database <b>132</b> associated with a DB2 procedure call identifier in a SOAP request <b>124</b> is supported by the DB2 database server <b>130</b>. One of skill in the art will recognize other ways that the identification module <b>204</b> may be used to filter web service requests to ensure that a web service request complies with formatting requirements prior to further processing.</p>
<p id="p-0061" num="0060">Where the web server <b>102</b> communicates with multiple data sources, the web server <b>102</b> includes a database selection module <b>206</b> that identifies a data source or database type <b>132</b>, <b>136</b>, <b>140</b> from the web service request and selects a servlet <b>114</b> capable of creating a procedure call compatible with the data source or database type <b>132</b>, <b>136</b>, <b>140</b>. The servlet <b>114</b>, through a SOAP return handler <b>118</b>, also creates a web service response based on a response from a data source or database server <b>130</b>, <b>134</b>, <b>138</b> of the data source or database type <b>132</b>, <b>136</b>, <b>140</b>. A web server <b>102</b> may then service multiple data sources by having a servlet <b>114</b> for each data source. In another embodiment, a servlet <b>114</b> may communicate with two or more data sources. The database selection module <b>206</b> may reside in the SOAP handler <b>112</b> or another location in the web server <b>102</b>. Typically the database selection module <b>206</b> acts as a switch to redirect a web service request to a data source identified in the web service request.</p>
<p id="p-0062" num="0061">The web server <b>102</b> includes a call module <b>208</b> that creates a procedure call to a data source procedure by way of an Application Program Interface (&#x201c;API&#x201d;). The data source procedure is identified by the procedure call identifier <b>126</b> without an explicit procedure call identifier mapping. The procedure call is created at least in part by ordering parameters <b>128</b> of the procedure call based on an order of the parameters <b>128</b> in the web service request. The parameters <b>128</b> of the procedure call are ordered without using an explicit parameter mapping. The call module <b>208</b> relies on the structure of the web service request to construct a procedure call from the procedure call identifier <b>126</b> and parameters <b>128</b>.</p>
<p id="p-0063" num="0062">For example, where the web service request is a SOAP request <b>124</b>, the call module <b>208</b> relies on the known structure of the SOAP request <b>124</b> to create a procedure call based on the contents of the SOAP request <b>124</b> and ordering of parameters <b>128</b> in the SOAP request <b>124</b>. The call module <b>208</b> may be part of a data source procedure translator <b>116</b> of a servlet <b>114</b> or may reside in the web server <b>102</b> and may cooperate with a servlet <b>114</b> or data source procedure translator <b>116</b>. In another embodiment, the call module <b>208</b> acts independently to create a procedure call.</p>
<p id="p-0064" num="0063">By relying on the structure of the SOAP request <b>124</b>, the call module <b>208</b> does not need to look to any explicit mapping of parameters. Instead, the call module <b>208</b> may use implicit mapping of the procedure call identifier <b>126</b> and parameters <b>128</b> to construct a procedure call and to send it to a coupled data source server <b>130</b>, <b>134</b>, <b>138</b>. The data source owner does not need to create explicit mapping for the web server <b>102</b> acting as a middle layer.</p>
<p id="p-0065" num="0064">The client <b>104</b> also does not need to have any special knowledge about the web server <b>102</b>, but instead only needs to have knowledge of the data source procedure and associated parameter type and order. The client <b>104</b> can then create a SOAP request <b>124</b> that complies with SOAP standards and requirements while placing the procedure call identifier <b>126</b> and related parameters <b>128</b> in the SOAP request <b>124</b>. By following the simple formatting rules of SOAP and knowing the formatting requirements of the data source procedure being invoked, the client <b>104</b> does not need to worry about other information on the web server <b>102</b> relating to the data source procedure.</p>
<p id="p-0066" num="0065">The web server <b>102</b> includes a response module <b>210</b> that sends a web service response to the client <b>104</b> in response to receiving a response from the data source procedure. The web service response includes information responsive to the procedure call generated by the call module <b>206</b>. The response module <b>210</b> may be part of or cooperate with the SOAP return handler <b>118</b> of a servlet <b>114</b> or may act independently. For example, after the call module <b>208</b> generates a procedure call to a data source, such as a DB2 database <b>132</b>, the DB2 database server <b>130</b> typically executes the procedure call and generates a result, which is returned to the web server <b>102</b>. The response module <b>210</b> creates a response based on the results from the DB2 database server <b>130</b> and sends the response to the client <b>104</b>.</p>
<p id="p-0067" num="0066">If the web service request upon which the procedure call was based is a SOAP request <b>124</b>, the response module <b>210</b> uses the results from the DB2 database server <b>130</b> to generate a SOAP message with the results and sends the SOAP message to the client <b>104</b> as a response. Typically, the response module <b>210</b> would be part of a DB2 servlet <b>114</b> (and a SOAP return handler <b>118</b> within the servlet <b>114</b>) if the web server <b>102</b> is coupled to a DB2 database <b>132</b>. In the case where the web server <b>102</b> is coupled to only one source, the response module <b>210</b> may not be part of a servlet <b>114</b> and may act independently or within a SOAP return handler <b>118</b>. In another embodiment, the response module <b>210</b> generates a response to a client <b>104</b> using another protocol other than SOAP, such as XML-RPC or REST. One of skill in the art will recognize other possible implementations of a response module <b>210</b> that sends a web service response to a client <b>104</b> in response to receiving results from an executed data source procedure.</p>
<p id="p-0068" num="0067"><figref idref="DRAWINGS">FIG. 3</figref> is a schematic flow chart diagram illustrating one embodiment of a method <b>300</b> for web service access to a remote data source procedure in accordance with the present invention. The method <b>300</b> begins <b>302</b> and the receive module <b>202</b> receives <b>304</b> a web service request from a client <b>104</b>. The web service request includes a procedure call identifier <b>126</b> and zero or more parameters <b>128</b>. The web service request, in one embodiment, is an HTTP request <b>120</b>. In another embodiment, the web service request is an XML message <b>122</b>. In yet another embodiment, the web service request is a SOAP request <b>124</b>.</p>
<p id="p-0069" num="0068">The identification module <b>204</b> identifies <b>306</b> a procedure call identifier <b>126</b> within the web service request. The call module <b>206</b> creates <b>308</b> a procedure call to a data source procedure accessible by way of an API. The data source procedure is identified by the procedure call identifier without an explicit procedure call identifier mapping. The procedure call identifier is mapped to the name of the data source procedure in the procedure call. The procedure call is created at least in part by ordering parameters <b>128</b> of the procedure call based on an order of the zero or more parameters <b>128</b> in the web service request. The parameters <b>128</b> of the procedure call are ordered without using an explicit parameter mapping. The response module <b>210</b> sends <b>310</b> a web service response to the client <b>104</b> after receiving a response from the data source procedure and the method <b>300</b> ends <b>312</b>. The web service response includes information responsive to the procedure call.</p>
<p id="p-0070" num="0069"><figref idref="DRAWINGS">FIGS. 4A and 4B</figref> are two parts of a schematic flow chart diagram illustrating another embodiment of a method <b>400</b> for web service access to a remote data source procedure in accordance with the present invention. The method <b>400</b> begins and the receive module <b>202</b> receives <b>404</b> a web service request from a client <b>104</b>. The identification module <b>204</b> determines <b>406</b> if a web service request is an XML message <b>122</b>. If the identification module <b>204</b> determines <b>406</b> that the web service request is not an XML message <b>122</b>, the web server <b>102</b> or HTTP handler <b>110</b> continues <b>408</b> processing the web service request and the method <b>400</b> ends <b>410</b> (follow A on <figref idref="DRAWINGS">FIG. 4A</figref> to A on <figref idref="DRAWINGS">FIG. 4B</figref>).</p>
<p id="p-0071" num="0070">If the identification module <b>204</b> determines <b>406</b> that the web service request is an XML message <b>122</b>, the identification module <b>204</b> determines <b>412</b> if the XML message <b>122</b> is a SOAP request <b>124</b>. If the identification module determines <b>412</b> that the XML message <b>122</b> is not a SOAP request <b>124</b>, the web server <b>102</b> or HTTP handler <b>110</b> continues <b>408</b> processing the web service request and the method <b>400</b> ends <b>410</b> (follow A on <figref idref="DRAWINGS">FIG. 4A</figref> to A on <figref idref="DRAWINGS">FIG. 4B</figref>).</p>
<p id="p-0072" num="0071">Optionally, prior to determining <b>412</b> if the XML message <b>122</b> is a SOAP request <b>124</b>, the identification module <b>204</b> may determine if the XML message <b>122</b> is an as HTTP request <b>120</b> using an HTTP POST method. If the XML message <b>122</b> is not an HTTP request <b>120</b> using an HTTP POST method, the HTTP handler <b>110</b> continues <b>408</b> processing the request. In an alternate embodiment, the web server <b>102</b> or HTTP handler <b>110</b> may process a web service request received <b>404</b> by the receive module <b>202</b> and may only invoke the identification module <b>204</b> if the web service request cannot be processed by the HTTP handler <b>110</b> or similar handler in the web server <b>102</b>. Web service requests can be either filtered or parsed out prior to processing by the HTTP handler <b>110</b> or may be first processed and then filtered using the identification module <b>204</b> after the web service request is unsuccessfully processed by the HTTP handler <b>110</b> or similar handler in the web server <b>102</b>.</p>
<p id="p-0073" num="0072">If the identification module <b>204</b> determines <b>412</b> that the XML message <b>122</b> is a SOAP message <b>124</b>, the database selection module <b>206</b> identifies <b>414</b> the data source or database <b>132</b>, <b>136</b>, <b>140</b> listed in the SOAP request <b>124</b> and selects <b>416</b> the applicable data source or database <b>132</b>, <b>136</b>, <b>140</b>. The identification module <b>204</b> determines <b>418</b> if the SOAP request <b>124</b> includes a procedure call identifier <b>126</b> and if the procedure call identifier <b>126</b> matches a data source procedure supported by the data source or database <b>132</b>, <b>136</b>, <b>140</b> coupled to the web server <b>102</b> (follow &#x201c;B&#x201d; on <figref idref="DRAWINGS">FIG. 4A</figref> to &#x201c;B&#x201d; on <figref idref="DRAWINGS">FIG. 4B</figref>). If the identification module <b>204</b> determines <b>418</b> that the SOAP request <b>124</b> does not includes a procedure call identifier <b>126</b> or if the identification module <b>204</b> determines <b>418</b> that the procedure call identifier <b>126</b> does not match a supported data source procedure, the identification module <b>204</b> generates <b>420</b> an error and the method <b>400</b> ends <b>410</b>.</p>
<p id="p-0074" num="0073">If the identification module <b>204</b> identifies <b>418</b> a procedure call identifier <b>126</b> and if the procedure call identifier <b>126</b> matches a supported data source procedure of a coupled data source or database <b>132</b>, <b>136</b>, <b>140</b>, the identification module <b>204</b> determines <b>422</b> if the parameters <b>128</b> are of a correct type, range, etc. based on requirements of the data source procedure. If the identification module <b>204</b> determines <b>422</b> that the parameters <b>128</b> are not correct, the identification module <b>204</b> generates <b>420</b> an error and the method <b>400</b> ends <b>410</b>.</p>
<p id="p-0075" num="0074">If the identification module <b>204</b> determines <b>422</b> that the parameters <b>128</b> are correct, the call module <b>208</b> creates <b>424</b> a procedure call to the data source procedure based on the procedure call identifier <b>126</b> and the parameters <b>128</b> of the SOAP request <b>124</b>. The call module <b>208</b> creates <b>424</b> the procedure call by using the procedure call identifier <b>126</b> as the name of the stored procedure and by ordering the parameters <b>128</b> of the SOAP request <b>124</b> in the same order that the parameters <b>128</b> are listed in the SOAP request <b>124</b> without an explicit mapping. Note that creating <b>424</b> a procedure call also includes transmitting the call to the coupled data source.</p>
<p id="p-0076" num="0075">The response module <b>210</b> determines <b>426</b> if a response to the procedure call has been received from the coupled data source. In one embodiment, the response module <b>210</b> continues to wait for a response from the coupled data source. In another embodiment (not shown), if the response module <b>210</b> determines <b>426</b> that no response has been received, for example after a timeout period has expired, the response module <b>210</b> generates <b>414</b> an error and the method <b>400</b> ends.</p>
<p id="p-0077" num="0076">Once the response module <b>210</b> determines <b>426</b> that a response has been received, the response module <b>210</b> sends <b>428</b> a web service response to the client <b>104</b> that is based on the response from the coupled data source, and the method <b>400</b> ends <b>410</b>. The response module <b>210</b> formats the response to the client <b>104</b> using the same protocol as the web service request. In the depicted embodiment, the response module <b>210</b> formats a SOAP response using the results returned from the coupled data source.</p>
<p id="p-0078" num="0077">The method <b>400</b> depicted in <figref idref="DRAWINGS">FIGS. 4A and 4B</figref> may be modified and customized as necessary based on a chosen protocol of the web service request and the number and type of coupled data sources. The method <b>400</b> may be implemented in the web server <b>102</b> in a generic way so without explicit mapping based on data source procedures of one or more coupled data sources. This allows a client <b>104</b> to use a standard protocol, such as SOAP, to format a web service request and to simply use the procedure call identifier as the name of the data source procedure and order parameters based on data source procedure requirements without having to follow additional requirements of a middle layer explicit mapping.</p>
<p id="p-0079" num="0078"><figref idref="DRAWINGS">FIG. 5</figref> is a schematic block diagram illustrating a particular example of a system <b>500</b> for web service access to a remote data source procedure in accordance with the present invention. The system <b>500</b> includes a web server <b>102</b> with an HTTP handler <b>110</b>, a SOAP handler <b>112</b>, and a DB2 servlet <b>114</b> with a Data Source Procedure Translator <b>116</b> and a SOAP return handler <b>118</b>, which are substantially similar to those described above. The system <b>500</b> also includes a client <b>104</b> as described above with a web service request <b>502</b> formatted as a SOAP request <b>124</b> and an XML message <b>122</b> and is an HTTP request <b>120</b>. The client <b>104</b> also includes a received response <b>504</b> that again is formatted as a SOAP request <b>124</b> and an XML message <b>122</b> and is an HTTP request <b>120</b>. The web service request <b>502</b> and received response <b>504</b> are described below. The system <b>500</b> also includes a DB2 database server <b>130</b> and a DB2 database <b>132</b> substantially similar to those described above, but does not include an explicit web services mapping <b>506</b> on the web server <b>102</b> for the DB2 database <b>506</b>.</p>
<p id="p-0080" num="0079">The client <b>104</b> may generate a web service request <b>502</b> for a data source procedure called getProduct with a procedure call identifier <b>126</b>, or namespace, of &#x201c;getProduct.&#x201d; The web service request <b>502</b> includes a parameter <b>128</b> &#x201c;100-101-1,&#x201d; which is a string representing a serial number. The client <b>104</b> sends the web service request <b>502</b> to the DB2 database server <b>130</b> by way of the web server <b>102</b> to invoke the &#x201c;getProduct&#x201d; procedure in the DB2 database server <b>130</b>. The web service request <b>502</b> is formatted an XML SOAP request <b>122</b>, <b>124</b> and send using an HTTP POST method.</p>
<p id="p-0081" num="0080">The following is one example of a SOAP request for the &#x201c;getProduct&#x201d; data source procedure:</p>
<p id="p-0082" num="0081">
<tables id="TABLE-US-00001" num="00001">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217pt" align="left"/>
<thead>
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry>POST /DEMO HTTP/1.1</entry>
</row>
<row>
<entry>Host: localhost</entry>
</row>
<row>
<entry>Connection: Keep-Alive</entry>
</row>
<row>
<entry>User-Agent: PHP SOAP 0.1</entry>
</row>
<row>
<entry>Content-Type: text/xml; charset=utf-8</entry>
</row>
<row>
<entry>SOAPAction: &#x201c;http://ibm.com/db2/soap#getProduct&#x201d;</entry>
</row>
<row>
<entry>Content-Length: nnn</entry>
</row>
<row>
<entry>&#x3c;?xml version=&#x201c;1.0&#x201d; encoding=&#x201c;UTF-8&#x201d;?&#x3e;</entry>
</row>
<row>
<entry>&#x3c;SOAP-ENV:Envelope</entry>
</row>
<row>
<entry>&#x2002;xmlns:SOAP-ENV=&#x201c;http://schemas.xmlsoap.org/soap/envelope/&#x201d;</entry>
</row>
<row>
<entry>&#x2002;xmlns:ns1=&#x201c;http://ibm.com/db2/soap&#x201d;</entry>
</row>
<row>
<entry>&#x2002;xmlns:xsd=&#x201c;http://www.w3.org/2001/XMLSchema&#x201d;</entry>
</row>
<row>
<entry>&#x2002;xmlns:xsi=&#x201c;http://www.w3.org/2001/XMLSchema-instance&#x201d;</entry>
</row>
<row>
<entry>&#x2002;xmlns:SOAP-ENC=&#x201c;http://schemas.xmlsoap.org/soap/encoding/&#x201d;</entry>
</row>
<row>
<entry>&#x2002;SOAP-ENV:encodingStyle=&#x201c;http://schemas.xmlsoap.org/soap/encoding/&#x201d;</entry>
</row>
<row>
<entry>&#x2002;&#x3e;</entry>
</row>
<row>
<entry>&#x2002;&#x3c;SOAP-ENV:Body&#x3e;</entry>
</row>
<row>
<entry>&#x2003;&#x3c;ns1:getProduct&#x3e;</entry>
</row>
<row>
<entry>&#x2003;&#x2002;&#x3c;param0 xsi:type=&#x201c;xsd:string&#x201d;&#x3e;100-101-01&#x3c;/param0&#x3e;</entry>
</row>
<row>
<entry>&#x2003;&#x3c;/ns1:getProduct&#x3e;</entry>
</row>
<row>
<entry>&#x2002;&#x3c;/SOAP-ENV:Body&#x3e;</entry>
</row>
<row>
<entry>&#x3c;/SOAP-ENV:Envelope&#x3e;</entry>
</row>
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0083" num="0082">In this example web service request <b>502</b>, the procedure call identifier <b>126</b> is defined as a namespace or &#x201c;signature&#x201d; as &#x201c;http://ibm.com/db2/soap#getProduct.&#x201d; This signature also identifies the database <b>132</b> as DB2. In this simple example, only one parameter <b>128</b> is included and is labeled param0. Where other parameters <b>128</b> are submitted, they must be ordered in the SOAP request <b>124</b> based on an order requirement of the getProduct data source procedure.</p>
<p id="p-0084" num="0083">The receive module <b>202</b> in the HTTP handler <b>110</b> receives the web service request <b>502</b>. The identification module <b>204</b> in the SOAP Handler <b>112</b> verifies that the web service request <b>502</b> is a SOAP request <b>124</b> as well as verifies that the web service request is an XML message <b>122</b> (not shown). The database selection module <b>122</b> determines that the web service request <b>502</b> is directed to the DB2 database <b>132</b> (&#x201c;xmlns:ns 1=http://ibm.com/db2/soap&#x201d;) and sends the request <b>502</b> to the DB2 servlet <b>114</b>.</p>
<p id="p-0085" num="0084">The identification module <b>204</b> (or a portion of the identification module residing in the DB2 servlet <b>114</b>) if the procedure call identifier <b>126</b>, &#x201c;getProduct,&#x201d; is a data source procedure (stored procedure) supported by the DB2 database server <b>130</b> and optionally if the &#x201c;100-101-1&#x201d; parameter <b>128</b> is a string. The call module <b>210</b> in data source procedure translator <b>116</b> within the DB2 servlet <b>114</b> then creates a procedure call to the DB2 database server <b>130</b>. Because the DB2 servlet <b>114</b> handles DB2 stored procedures, the data source procedure translator <b>116</b> within the DB2 servlet <b>114</b> is able to format procedure calls specific to the DB2 database server <b>130</b>. The DB2 servlet <b>114</b> or data source procedure translator <b>116</b> submits the procedure call to the DB2 database server <b>130</b> by way of a client interface using an API. Typically the client interface is JDBC is used, but ODBC, OLE DB, CLI, or the like may be used.</p>
<p id="p-0086" num="0085">The DB2 database server <b>130</b> executes the &#x201c;getProduct&#x201d; procedure call and retrieves data from the DB2 database <b>132</b> responsive to the &#x201c;100-101-1&#x201d; parameter <b>128</b> and the &#x201c;getProduct&#x201d; procedure. In this example, the results are the string &#x201c;Sugar &#x26; Spice.&#x201d; The DB2 database server <b>130</b> returns results to the web server <b>102</b> and response module <b>210</b> in the SOAP return handler <b>118</b> of the DB2 servlet <b>114</b> creates a SOAP response based on the response received from the DB2 database server <b>130</b> that relates to the &#x201c;getProduct&#x201d; procedure call. The SOAP response is then returned to the client <b>104</b> (depicted as the received response <b>504</b>).</p>
<p id="p-0087" num="0086">In this example, the &#x201c;Sugar &#x26; Spice&#x201d; string may be coded in a SOAP message as follows:</p>
<p id="p-0088" num="0087">
<tables id="TABLE-US-00002" num="00002">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217pt" align="left"/>
<thead>
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry>HTTP/1.1 200 OK</entry>
</row>
<row>
<entry>Date: Tue, 01 Aug 2006 20:34:45 GMT</entry>
</row>
<row>
<entry>Server: Apache/2.0.58</entry>
</row>
<row>
<entry>Content-Length: nnn</entry>
</row>
<row>
<entry>Keep-Alive: timeout=15, max=100</entry>
</row>
<row>
<entry>Connection: Keep-Alive</entry>
</row>
<row>
<entry>Content-Type: text/xml; charset=utf-8</entry>
</row>
<row>
<entry>&#x3c;?xml version=&#x201c;1.0&#x201d; encoding=&#x201c;UTF-8&#x201d;?&#x3e;</entry>
</row>
<row>
<entry>&#x3c;SOAP-ENV:Envelope</entry>
</row>
<row>
<entry>&#x2002;xmlns:SOAP-ENV=&#x201c;http://schemas.xmlsoap.org/soap/envelope/&#x201d;</entry>
</row>
<row>
<entry>&#x2002;xmlns:SOAP-ENC=&#x201c;http://schemas.xmlsoap.org/soap/encoding/&#x201d;</entry>
</row>
<row>
<entry>&#x2002;xmlns:xsd=&#x201c;http://www.w3.org/1999/XMLSchema&#x201d;</entry>
</row>
<row>
<entry>&#x2002;xmlns:xsi=&#x201c;http://www.w3.org/1999/XMLSchema-instance&#x201d;</entry>
</row>
<row>
<entry>&#x2002;xmlns:ns1=&#x201c;http://ibm.com/db2/soap&#x201d;</entry>
</row>
<row>
<entry>&#x2002;&#x3e;</entry>
</row>
<row>
<entry>&#x2002;&#x3c;SOAP-ENV:Body&#x3e;</entry>
</row>
<row>
<entry>&#x2003;&#x3c;ns1:getProductResponse&#x3e;</entry>
</row>
<row>
<entry>&#x2003;&#x2002;&#x3c;return xsi:type=&#x201c;xsd:string&#x201d;&#x3e;Sugar &#x26;<sub>&#x2009;</sub>amp; Creamer&#x3c;/return&#x3e;</entry>
</row>
<row>
<entry>&#x2003;&#x3c;/ns1:getProductResponse&#x3e;</entry>
</row>
<row>
<entry>&#x2002;&#x3c;/SOAP-ENV:Body&#x3e;</entry>
</row>
<row>
<entry>&#x3c;/SOAP-ENV:Envelope&#x3e;</entry>
</row>
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0089" num="0088">The system <b>500</b> is beneficial because another stored procedure may be added to the DB2 database <b>132</b> without explicit mapping being added to the web server <b>102</b>. In this example, the DB2 database <b>132</b> includes a stored procedure called &#x201c;New Stored Procedure&#x201d; and requires two parameters, param0 and param1. As long at the client <b>104</b> knows the name of the stored procedure and the order and type of the parameters <b>128</b>, the client <b>104</b> can create a SOAP request <b>124</b> with the proper procedure call identifier <b>126</b> and parameters <b>128</b> ordered correctly and can have confidence that the SOAP message will be translated properly into an effective procedure call to the DB2 database <b>132</b>. The database owner does not need to create an explicit web services mapping on the web server <b>102</b> for the DB2 database <b>506</b>.</p>
<p id="p-0090" num="0089">The present invention may be embodied in other specific forms without departing from its spirit or essential characteristics. The described embodiments are to be considered in all respects only as illustrative and not restrictive. The scope of the invention is, therefore, indicated by the appended claims rather than by the foregoing description. All changes which come within the meaning and range of equivalency of the claims are to be embraced within their scope.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A computer program product comprising a storage device storing executable code executed by a processor to perform operations for web service access to a remote data source procedure, the operations of the computer program product comprising:
<claim-text>receiving a web service request from a client, the web service request comprising a procedure call identifier and first parameters;</claim-text>
<claim-text>identifying a database type from the web service request;</claim-text>
<claim-text>selecting a servlet compatible with the database type;</claim-text>
<claim-text>identifying the procedure call identifier within the web service request with the selected servlet;</claim-text>
<claim-text>creating a procedure call to a data source procedure for a database server of the database type and accessible by way of an Application Program Interface (&#x201c;API&#x201d;), the data source procedure identified by the procedure call identifier without an explicit procedure call identifier mapping, the procedure call created using the procedure call identifier as a data source procedure name with the first parameters appended to the data source procedure name as second parameters and ordering the second parameters of the procedure call with a same order as the first parameters in the web service request, the second parameters of the procedure call ordered without using an explicit parameter mapping;</claim-text>
<claim-text>transmitting the procedure call to the database server; and</claim-text>
<claim-text>sending a web service response to the client in response to receiving a response from the data source procedure, the web service response comprising information responsive to the procedure call.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The computer program product of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising confirming that the data source procedure associated with the procedure call identifier is supported by the database server.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The computer program product of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising verifying that the type of data for the first parameters of the web service request matches the second parameters of the data source procedure.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The computer program product of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the web service request comprises a Simple Object Access Protocol (&#x201c;SOAP&#x201d;) request.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The computer program product of <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein the SOAP request is coded using an extended markup language (&#x201c;XML&#x201d;) and a Hyper Text Transfer Protocol (&#x201c;HTTP&#x201d;).</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The computer program product of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the procedure call comprises a database call and the data source procedure comprises a database stored procedure managed by the database server.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The computer program product of <claim-ref idref="CLM-00006">claim 6</claim-ref>, the servlet creating the procedure call compatible with the database type and creating the web service response being based on a response from the database server.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The computer program product of <claim-ref idref="CLM-00006">claim 6</claim-ref>, wherein the database call comprises a native call to the database server, the native call compatible with a client interface supported by the database server.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The computer program product of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the client interface comprises one of Java Database Connectivity (&#x201c;JDBC&#x201d;), Object Linking and Embedding Database (&#x201c;OLE DB&#x201d;), Open Database Connectivity (&#x201c;ODBC&#x201d;), and Call Level Interface (&#x201c;CLI&#x201d;).</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The computer program product of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the database server comprises one of DB2, Oracle, MySQL, and Sybase.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The computer program product of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein ordering the second parameters of the procedure call without using an explicit parameter mapping further comprises ordering the second parameters of the procedure call without referencing an explicit mapping defined for an application server receiving the web service request.</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The computer program product of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the web service request comprises one of an XML Remote Procedure Call (&#x201c;XML-RPC&#x201d;) request and a Representational State Transfer (&#x201c;REST&#x201d;) request.</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. An apparatus for web service access to a remote data source procedure, the apparatus comprising:
<claim-text>a storage device storing executable code;</claim-text>
<claim-text>a processor executing the executable code, the executable code comprising:</claim-text>
<claim-text>a receive module receiving a web service request from a client, the web service request comprising a procedure call identifier and first parameters;</claim-text>
<claim-text>a database module identifying a database type from the web service request and selecting a servlet compatible with the database type;</claim-text>
<claim-text>an identification module identifying the procedure call identifier within the web service request with the servlet;</claim-text>
<claim-text>a call module creating a procedure call to a data source procedure for a database server of the database type and accessible by way of an Application Program Interface (&#x201c;API&#x201d;), the data source procedure identified by the procedure call identifier without an explicit procedure call identifier mapping, the procedure call created using the procedure call identifier as a data source procedure name with the first parameters appended to the data source procedure name as second parameters and ordering the second parameters of the procedure call with a same order as the first parameters in the web service request, the second parameters of the procedure call ordered without using an explicit parameter mapping, and transmitting the procedure call to the database server; and</claim-text>
<claim-text>a response module sending a web service response to the client in response to receiving a response from the data source procedure, the web service response comprising information responsive to the procedure call.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The apparatus of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the identification module further comprises confirming that the data source procedure associated with the procedure call identifier is supported by the database server.</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The apparatus of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the identification module further comprises verifying that the type of data for the first parameters of the web service request matches the second parameters of the data source procedure.</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The apparatus of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the web service request comprises a Simple Object Access Protocol (&#x201c;SOAP&#x201d;) request.</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The apparatus of <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein the SOAP request is coded using an extended markup language (&#x201c;XML&#x201d;) and a Hyper Text Transfer Protocol (&#x201c;HTTP&#x201d;).</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The apparatus of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the procedure call comprises a database call and the data source procedure comprises a database stored procedure.</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. The apparatus of <claim-ref idref="CLM-00018">claim 18</claim-ref>, the servlet creating the procedure call compatible with the database type and creating the web service response being based on a response from the database server.</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. The apparatus of <claim-ref idref="CLM-00018">claim 18</claim-ref>, wherein the database call comprises a call to the database server.</claim-text>
</claim>
<claim id="CLM-00021" num="00021">
<claim-text>21. The apparatus of <claim-ref idref="CLM-00020">claim 20</claim-ref>, wherein the database server comprises one of DB2, Oracle, MySQL, and Sybase.</claim-text>
</claim>
<claim id="CLM-00022" num="00022">
<claim-text>22. The apparatus of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the call module orders the second parameters of the procedure call without referencing an explicit mapping defined for an application server receiving the web service request.</claim-text>
</claim>
<claim id="CLM-00023" num="00023">
<claim-text>23. The apparatus of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the web service request comprises one of an XML Remote Procedure Call (&#x201c;XML-RPC&#x201d;) request and a Representational State Transfer (&#x201c;REST&#x201d;) request.</claim-text>
</claim>
<claim id="CLM-00024" num="00024">
<claim-text>24. A system for web service access to a remote data source procedure, the system comprising:
<claim-text>a database server;</claim-text>
<claim-text>a web server comprising at least one processor and a memory, the web server in communication with the database server and a client, the web server comprising:
<claim-text>a receive module receiving a web service request from the client, the web service request comprising a procedure call identifier and first parameters;</claim-text>
<claim-text>a database selection module identifying a database type from the web service request and selecting a servlet compatible with the database type;</claim-text>
<claim-text>an identification module identifying the procedure call identifier within the web service request with the servlet;</claim-text>
<claim-text>a call module creating a procedure call to a data source procedure for the database server of the database type and accessible by way of an Application Program Interface (&#x201c;API&#x201d;), the data source procedure identified by the procedure call identifier without an explicit procedure call identifier mapping, the procedure call created using the procedure call identifier as a data source procedure name with the first parameters appended to the data source procedure name as second parameters and ordering the second parameters of the procedure call with a same order as the first parameters in the web service request, the second parameters of the procedure call ordered without using an explicit parameter mapping, and transmitting the procedure call to the database server; and</claim-text>
<claim-text>a response module sending a web service response to the client in response to receiving a response from the data source procedure, the web service response comprising information responsive to the procedure call.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00025" num="00025">
<claim-text>25. The system of <claim-ref idref="CLM-00024">claim 24</claim-ref>, wherein the database server comprises one of a DB2 server, an Oracle server, a MySQL server, and a Sybase server and the database comprises a format compatible with the database server.</claim-text>
</claim>
<claim id="CLM-00026" num="00026">
<claim-text>26. A method for making a computer implemented process to enable web service access to a remote data source procedure, the method comprising:
<claim-text>instantiating first computer instructions onto a storage device, the first instructions receiving a web service request from a client, the web service request comprising a procedure call identifier and at least one first parameters;</claim-text>
<claim-text>instantiating fifth computer instructions onto the storage device, the fifth instructions identifying a database type from the web service request and selecting a servlet compatible with the database type;</claim-text>
<claim-text>instantiating second computer instructions onto the storage device, the second instructions identifying the procedure call identifier within the web service request with the servlet;</claim-text>
<claim-text>instantiating third computer instructions onto the storage device, the third instructions configured to create a procedure call to a data source procedure for a database server of the database type and accessible by way of an Application Program Interface (&#x201c;API&#x201d;), the data source procedure identified by the procedure call identifier without an explicit procedure call identifier mapping, the procedure call created using the procedure call identifier as a data source procedure name with the first parameters appended to the data source procedure name as second parameters and ordering the second parameters of the procedure call with a same order as the first parameters in the web service request, the second parameters of the procedure call ordered without using an explicit parameter mapping, and transmitting the procedure call to the database server; and</claim-text>
<claim-text>instantiating fourth computer instructions onto the storage device, the fourth instructions configured to send a web service response to the client in response to receiving a response from the data source procedure, the web service response comprising information responsive to the procedure call.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00027" num="00027">
<claim-text>27. The method of <claim-ref idref="CLM-00026">claim 26</claim-ref>, further comprising confirming that the data source procedure associated with the procedure call identifier is supported by the databa server.</claim-text>
</claim>
<claim id="CLM-00028" num="00028">
<claim-text>28. The method of <claim-ref idref="CLM-00026">claim 26</claim-ref>, further comprising verifying that the type of data for the first parameters of the web service request matches the second parameters of the data source procedure.</claim-text>
</claim>
<claim id="CLM-00029" num="00029">
<claim-text>29. The method of <claim-ref idref="CLM-00026">claim 26</claim-ref>, wherein the web service request comprises a Simple Object Access Protocol (&#x201c;SOAP&#x201d;) request.</claim-text>
</claim>
<claim id="CLM-00030" num="00030">
<claim-text>30. The method of <claim-ref idref="CLM-00029">claim 29</claim-ref>, wherein the SOAP request is coded using an extended markup language (&#x201c;XML&#x201d;) and a Hyper Text Transfer Protocol (&#x201c;HTTP&#x201d;).</claim-text>
</claim>
<claim id="CLM-00031" num="00031">
<claim-text>31. The method of <claim-ref idref="CLM-00026">claim 26</claim-ref>, wherein the procedure call comprises a database call and the data source procedure comprises a database stored procedure.</claim-text>
</claim>
<claim id="CLM-00032" num="00032">
<claim-text>32. The method of <claim-ref idref="CLM-00031">claim 31</claim-ref>, the servlet creating the procedure call compatible with the database type and creating the web service response based on a response from the database server.</claim-text>
</claim>
<claim id="CLM-00033" num="00033">
<claim-text>33. A method for deploying a web access computer program for web service access to a remote data source procedure, the method comprising:
<claim-text>determining customer requirements for database access via a web server; and</claim-text>
<claim-text>deploying a web access computer program, the web access computer program comprising
<claim-text>receiving a web service request from a client, the web service request comprising a procedure call identifier and first parameters;</claim-text>
<claim-text>identifying a database type from the web service request;</claim-text>
<claim-text>selecting a servlet compatible with the database type;</claim-text>
<claim-text>identifying the procedure call identifier within the web service request with the selected servlet;</claim-text>
<claim-text>creating a procedure call to a data source procedure for a database server of the database type and accessible by way of an Application Program Interface (&#x201c;API&#x201d;), the data source procedure identified by the procedure call identifier without an explicit procedure call identifier mapping, the procedure call created using the procedure call identifier as a data source procedure name with the first parameters appended to the data source procedure name as second parameters and ordering the second parameters of the procedure call with a same order as the first parameters in the web service request, the second parameters of the procedure call ordered without using an explicit parameter mapping;</claim-text>
<claim-text>transmitting the procedure call to the database server; and</claim-text>
<claim-text>sending a web service response to the client in response to receiving a response from the data source procedure, the web service response comprising information responsive to the procedure call. </claim-text>
</claim-text>
</claim-text>
</claim>
</claims>
</us-patent-grant>

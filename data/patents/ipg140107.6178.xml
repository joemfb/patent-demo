<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08627302-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08627302</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>11945989</doc-number>
<date>20071127</date>
</document-id>
</application-reference>
<us-application-series-code>11</us-application-series-code>
<us-term-of-grant>
<us-term-extension>1509</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>9</main-group>
<subgroup>44</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>9</main-group>
<subgroup>45</subgroup>
<symbol-position>L</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>717158</main-classification>
<further-classification>717124</further-classification>
<further-classification>717127</further-classification>
<further-classification>717151</further-classification>
</classification-national>
<invention-title id="d2e53">Sampling based runtime optimizer for efficient debugging of applications</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>6622300</doc-number>
<kind>B1</kind>
<name>Krishnaswamy et al.</name>
<date>20030900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717151</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>6971091</doc-number>
<kind>B1</kind>
<name>Arnold et al.</name>
<date>20051100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717145</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>7058928</doc-number>
<kind>B2</kind>
<name>Wygodny et al.</name>
<date>20060600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717127</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>7480902</doc-number>
<kind>B2</kind>
<name>Patil et al.</name>
<date>20090100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717158</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>7735073</doc-number>
<kind>B1</kind>
<name>Kosche et al.</name>
<date>20100600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717158</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>7770157</doc-number>
<kind>B2</kind>
<name>Arnold et al.</name>
<date>20100800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717151</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>7900201</doc-number>
<kind>B1</kind>
<name>Qureshi et al.</name>
<date>20110300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717124</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>7954090</doc-number>
<kind>B1</kind>
<name>Qureshi et al.</name>
<date>20110500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717127</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>7996814</doc-number>
<kind>B1</kind>
<name>Qureshi et al.</name>
<date>20110800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717151</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>8001527</doc-number>
<kind>B1</kind>
<name>Qureshi et al.</name>
<date>20110800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717127</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>8181170</doc-number>
<kind>B2</kind>
<name>Patil et al.</name>
<date>20120500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717158</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>8214817</doc-number>
<kind>B2</kind>
<name>Mendelson et al.</name>
<date>20120700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717158</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00013">
<document-id>
<country>US</country>
<doc-number>8312435</doc-number>
<kind>B2</kind>
<name>Wygodny et al.</name>
<date>20121100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717124</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00014">
<document-id>
<country>US</country>
<doc-number>2002/0087949</doc-number>
<kind>A1</kind>
<name>Golender et al.</name>
<date>20020700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717124</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00015">
<document-id>
<country>US</country>
<doc-number>2004/0049768</doc-number>
<kind>A1</kind>
<name>Matsuyama et al.</name>
<date>20040300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717151</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00016">
<document-id>
<country>US</country>
<doc-number>2005/0251792</doc-number>
<kind>A1</kind>
<name>Smith</name>
<date>20051100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717131</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00017">
<document-id>
<country>US</country>
<doc-number>2006/0010431</doc-number>
<kind>A1</kind>
<name>Patil et al.</name>
<date>20060100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717151</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00018">
<document-id>
<country>US</country>
<doc-number>2006/0242627</doc-number>
<kind>A1</kind>
<name>Wygodny et al.</name>
<date>20061000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717128</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00019">
<document-id>
<country>US</country>
<doc-number>2007/0288908</doc-number>
<kind>A1</kind>
<name>Cain et al.</name>
<date>20071200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717158</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00020">
<document-id>
<country>US</country>
<doc-number>2008/0184209</doc-number>
<kind>A1</kind>
<name>LaFrance-Linden</name>
<date>20080700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717130</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00021">
<document-id>
<country>US</country>
<doc-number>2009/0133008</doc-number>
<kind>A1</kind>
<name>Patil et al.</name>
<date>20090500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717158</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00022">
<document-id>
<country>US</country>
<doc-number>2012/0278793</doc-number>
<kind>A1</kind>
<name>Jalan et al.</name>
<date>20121100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717158</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00023">
<document-id>
<country>US</country>
<doc-number>2013/0061210</doc-number>
<kind>A1</kind>
<name>Chung et al.</name>
<date>20130300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717124</main-classification></classification-national>
</us-citation>
<us-citation>
<nplcit num="00024">
<othercit>Kim Elms; Debugging Optimised Code Using Function Interpretation, 1997; retrieved online on Aug. 22, 2013; pp. 1-10; Retrieved from the Internet: &#x3c;URL: http://cutebugs.net/files/debugging/elms97debugging.pdf&#x3e;.</othercit>
</nplcit>
<category>cited by examiner</category>
</us-citation>
<us-citation>
<nplcit num="00025">
<othercit>Kazunori Ogata et al.; Replay Compilation: Improving Debuggability of a Just-in Time Compiler; 2006; retrieved online on Aug. 22, 2013; pp. 241-251; Retrieved from the Internet: &#x3c;URL: http://delivery.acm.org/10.1145/1170000/1167493/p241-ogata.pdf?&#x3e;.</othercit>
</nplcit>
<category>cited by examiner</category>
</us-citation>
<us-citation>
<nplcit num="00026">
<othercit>Yuhei Kawakoya et al., Memory Behavior-Based Automatic Malware Unpacking in Stealth Debugging Environment; 2010; retrieved online on Aug. 22, 2013; pp. 39-46; Retrieved from the Internet: &#x3c;URL: http://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&#x26;arnumber=5665794&#x3e;.</othercit>
</nplcit>
<category>cited by examiner</category>
</us-citation>
</us-references-cited>
<number-of-claims>14</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>None</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>4</number-of-drawing-sheets>
<number-of-figures>6</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20090138859</doc-number>
<kind>A1</kind>
<date>20090528</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Chen</last-name>
<first-name>William Y.</first-name>
<address>
<city>Los Altos</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Lu</last-name>
<first-name>Jiwei</first-name>
<address>
<city>Pleasanton</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Chen</last-name>
<first-name>William Y.</first-name>
<address>
<city>Los Altos</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Lu</last-name>
<first-name>Jiwei</first-name>
<address>
<city>Pleasanton</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Martine Penilla Group, LLP</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>Oracle America, Inc.</orgname>
<role>02</role>
<address>
<city>Redwood City</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Dao</last-name>
<first-name>Thuy</first-name>
<department>2192</department>
</primary-examiner>
<assistant-examiner>
<last-name>Bui</last-name>
<first-name>Hanh T</first-name>
</assistant-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">A method of reproducing runtime environment for debugging an application includes reading an optimizer file from a non-volatile storage medium. The optimizer file includes a runtime environment, application definition information, and a log. The log includes summaries of events, actions, and a time mark of occurrence for each of the actions. A runtime environment for debugging the application is then defined and the application runtime is set up using the application definition information in the optimizer file. Further, the method includes running the application, attaching an optimizer, and triggering each of the actions to occur at a time mark of occurrence associated with each of the actions. Then, each of the actions and associated events is analyzed by comparing the events produced by running the application with the events in the optimizer file. If a fault is produced by the triggering, a debugger is invoked to analyze the fault.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="75.69mm" wi="119.97mm" file="US08627302-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="197.02mm" wi="156.80mm" file="US08627302-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="220.64mm" wi="178.82mm" file="US08627302-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="225.98mm" wi="155.87mm" file="US08627302-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="165.27mm" wi="169.42mm" file="US08627302-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">BACKGROUND</heading>
<p id="p-0002" num="0001">The present invention generally relates to debugging applications. More particularly, the present invention is directed to efficient debugging of applications by the use of a sampling based runtime optimizer.</p>
<p id="p-0003" num="0002">Various events are triggered during a runtime of applications in a computing system. Collecting and analyzing these events help in debugging of the applications if a need arises to investigate or reproduce a fault that may have occurred during the application runtime. A fault is not necessarily an explicit runtime error seen by the user, it can be subtle mismatch of a certain micro-processor state that is only visible through system development tools. However, to check every runtime state at each single execution step is time-consuming and often a prohibitive task. Traditionally, performing sampling on hardware performance counters in a computing system is practiced to reduce overhead while maintaining statistical correctness of the measurements. However, there is a drawback of the sampling method. When the sampling rate is below the rate of occurrence of the events, the sampling method fails to capture all the events, thereby preventing reproduction of same runtime environment for debugging. Inconsistency on the support of hardware performance counters across runtime platforms also prevents the same event behavior from being monitored on different runtime platforms.</p>
<p id="p-0004" num="0003">Thus, there is a need for an event-record and action-reproduce system to assist the sampling-based debugging.</p>
<heading id="h-0002" level="1">SUMMARY OF THE INVENTION</heading>
<p id="p-0005" num="0004">A sampling based runtime optimizer and methods for efficient debugging of optimized applications are disclosed. Embodiments of the present invention discloses methods of creating optimizer files including a log and using the optimizer file to reproduce a substantially similar debugging environment to reproduce a substantially similar behavior of applications in different runtime and hardware environments.</p>
<p id="p-0006" num="0005">In one embodiment, a method of event sampling for an application is disclosed. The method includes attaching a runtime optimizer to the application at runtime, running the application, and recording a plurality of events during runtime, the recording of the plurality of events includes capturing an event type for each of the plurality of events. The method further includes recording a plurality of actions, the recording of the plurality of actions includes capturing a time mark at which each of the plurality of actions occurred. The method concludes by creating an optimizer file including the recorded events, actions and time marks for the actions. The optimizer file is stored on a non-volatile storage medium.</p>
<p id="p-0007" num="0006">In another embodiment, a method of reproducing runtime environment for debugging an application is disclosed. The method includes reading an optimizer file from a non-volatile storage medium. The optimizer file includes a runtime environment, application definition information, and a log. The log includes summaries of a plurality of events, the plurality of actions, and a time mark of occurrence for each of the plurality of actions. The method further includes defining a runtime environment for debugging the application and setting up the application runtime using the application definition information in the optimizer file. Further, the method includes running the application and attaching an optimizer, then triggering each of the plurality of actions to occur at each time mark of occurrence associated with the each of the plurality of actions, and analyzing each of the plurality of actions and the plurality of events associated with the each of the plurality of actions, the analyzing includes comparing the events produced by running the application with the plurality of events in the optimizer file. If a fault is produced by the triggering, a debugger is invoked to analyze the fault.</p>
<p id="p-0008" num="0007">In yet another embodiment, a computer readable medium having program instructions for reproducing runtime environment for debugging an application is disclosed. The computer readable medium includes program instructions for reading an optimizer file from a non-volatile storage medium. The optimizer file includes a runtime environment, application definition information, and a log. The log includes summaries of a plurality of events, the plurality of actions, and a time mark of occurrence for each of the plurality of actions. The computer readable medium further includes program instructions for defining a runtime environment for debugging the application, the defining uses the runtime environment provided by the optimizer file, program instructions for setting up the application runtime using the application definition information in the optimizer file, and program instructions for running the application and attaching an optimizer. The computer readable medium also includes program instructions for triggering each of the plurality of actions to occur at each time mark of occurrence associated with the each of the plurality of actions, and program instructions for analyzing each of the plurality of actions and the plurality of events associated with the each of the plurality of actions. The analyzing includes comparing the events produced by running the application with the plurality of events in the optimizer file. If a fault is produced by the triggering, a debugger is invoked to analyze the fault.</p>
<p id="p-0009" num="0008">The advantages of the embodiments of the present invention are numerous. Most notably, the systems and methods described herein provide reproduction of a debugging environment for applications to enable the applications capable of being debugged independent of hardware or software environment.</p>
<p id="p-0010" num="0009">Other aspects and advantages of the present invention will become apparent from the following detailed description, taken in conjunction with the accompanying drawings, illustrating by way of example the principles of the present invention.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0011" num="0010">The present invention can be best understood by reference to the following description taken in conjunction with the accompanying figures, in which like parts may be referred to by like numerals.</p>
<p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. 1</figref> illustrates a simplified block diagram showing the runtime optimizer attached to an application and in communication with a computer readable media, in accordance with one embodiment of the present invention.</p>
<p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. 2</figref> is a simplified flow diagram illustrating occurrence of events and actions as application instructions execute, in accordance with one embodiment of the present invention</p>
<p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. 3</figref> is a simplified log data illustrating summarized events, actions, and the time marks of occurrence of the actions, in accordance with one embodiment of the present invention.</p>
<p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. 4</figref> is a simplified block diagram representation of an optimizer file created by the optimizer, in accordance with one embodiment of the present invention.</p>
<p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. 5</figref> illustrates a flow diagram of the process of recreating environment for debugging the application based on the data provided by the optimizer file, in accordance with one embodiment of the present invention.</p>
<p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. 6</figref> illustrates an exemplary computer system including the runtime optimizer module, processor, and computer readable media, in accordance with one embodiment of the present invention.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<p id="p-0018" num="0017">The figures are provided in order to provide a thorough understanding of the present invention. The figures should not be construed as limiting the breath of the invention in any manner.</p>
<heading id="h-0004" level="1">DETAILED DESCRIPTION OF THE INVENTION</heading>
<p id="p-0019" num="0018">A sampling based runtime optimizer and methods for efficient debugging of applications are disclosed. Embodiments of the present invention discloses methods of creating optimizer files including a log and using the optimizer file to reproduce a substantially similar debugging environment to reproduce a substantially similar behavior of applications in different runtime and hardware environments. While the present invention has been particularly shown and described with reference to the foregoing preferred embodiments, those skilled in the art will understand that many variations may be made therein without departing from the spirit and scope of the invention as defined in the following claims. The scope of the invention should be not therefore, not be limited to the description of the invention; rather, the scope of the invention should be defined by the claims including the full scope of equivalents thereof.</p>
<p id="p-0020" num="0019">Sampling on hardware performance counter is a powerful tool for reducing overhead while maintaining statistical correctness for most measurements. A runtime optimizer, in one embodiment uses sampling to reduce the overhead of application monitoring. However, there is a drawback to this use of the sampling. It is not possible to reproduce the results when the sampling rate is below the period of occurrence of the events, i.e., sampling is being done slower than occurrence of the events. Further, inconsistencies on the hardware performance counters across platforms also prevent the same event behaviors from being monitored on different micro-architectures. However, reproducibility of the results is necessary when performing effective debugging and testing of the runtime system or application.</p>
<p id="p-0021" num="0020">In general, debugging is best done on the same system because the new system may have variation in hardware and software settings and these variations can perturb system or application action performance. However, in practice, it is not always possible to use the same system for debugging and fault finding in the application. For example, a customer may report issues with the application execution or performance optimization of the application. However, the vendor of the application and/or system may not be co-located and would want to reproduce the issues on a different system at a remote location.</p>
<p id="p-0022" num="0021">In one embodiment, the hardware system information, runtime application information, various paths and creation times, execution options, environment variables, and other information that is necessary to run the application being debugged are recorded. Further, time marks of actions along with event types and the frequency of the events that occurred prior to the timestamp of each of the actions are also recorded. The executable name, path and creation time, execution options, and environment variables are used to obtain and re-execute the execution binary. The re-execution can be performed on a different system having different hardware and runtime environment. The hardware system information and timestamps of the occurrence of each of the actions are used to determine when to apply the exact action at a correct time mark during the re-execution so that a reproduction of a substantially similar application runtime can be obtained. The event types and frequency are used to guide the exact action at the approximately same time during the re-execution.</p>
<p id="p-0023" num="0022">In one embodiment, the time mark is defined as a point in time with respect to a previously occurred point in time. The time mark is represented in terms of milliseconds elapsed since a fixed point in time. In another embodiment, the time mark can be represented in terms of executed instructions since the beginning of the application execution. In yet another embodiment, number of execution cycles since the beginning of the application execution can also be used for representing the time mark. In yet another embodiment, any other scheme can be used to represent the time mark so long as a length of a period between the occurrence of an event or action with respect to a fix point in time can be measured and such scheme is supported by the underlying platform.</p>
<p id="p-0024" num="0023">The recording of the necessary information allows the runtime results to be reproduced. In addition, a different system that can run the application using the same execution criteria can be used for debugging of the application. This is true even if the new system does not provide hardware performance counters or the performance counters works differently in comparison with the system that was used for initial execution of the application. With this overview in mind, the following figures will illustrate example structure and functionality of sampling based runtime optimizer for efficient debugging of applications.</p>
<p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. 1</figref> illustrates an exemplary block diagram of attaching a runtime optimizer <b>52</b> to an application <b>50</b>. The runtime optimizer <b>52</b>, in one embodiment, includes a sampler <b>56</b> to perform sampling of events and actions and a logger <b>54</b> to write the information regarding captured events and actions to an optimizer file. In one embodiment, both the sampler <b>56</b> and the logger <b>54</b> can be combined in one programming module. A computer readable media <b>58</b> is included to store application programming modules, programming modules for sampling and logging, and the optimizer file.</p>
<p id="p-0026" num="0025">The runtime optimizer <b>52</b> provides the application execution optimization. When the application <b>50</b> is launched, the runtime optimizer <b>52</b> is attached to the application binary executable image in memory. For example, in UNIX and UNIX-like runtime environments, LD_PRELOAD environment variable may be used to attach the runtime optimizer <b>52</b> to the application <b>50</b>. Other runtime environments also provide similar instructions or commands for attaching external libraries or external applications to an application <b>50</b> at runtime. The runtime optimizer <b>52</b> makes necessary modifications to the executable code to improve application execution performance. The sampler <b>56</b> and the logger <b>54</b> are invoked to monitor and log system or processor events and actions. Cache miss operations and memory write operations, memory page miss operations and input/output write operations are few examples of processor events. In one embodiment, an action is an application action. In another embodiment, the action is a system action.</p>
<p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. 2</figref> illustrates a simplified flow of the occurrence of events and actions on a time mark scale. As illustrated exemplarily in <figref idref="DRAWINGS">FIG. 2</figref>, a plurality of events such as e<b>1</b>, e<b>2</b>, e<b>3</b>, etc., occurred before the occurrence of the action A. In one embodiment, the sampler <b>56</b> and the logger <b>54</b> monitor and record occurrence of both the events and the actions.</p>
<p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. 3</figref> illustrates an exemplary log data <b>96</b> compiled from the occurrence of events. The log data <b>96</b> broadly includes event summary <b>80</b>, action <b>82</b>, and the time mark of occurrence <b>84</b> of actions. The event summary <b>80</b>, in one embodiment, includes summary of events that occurred before the occurrence of a corresponding action. The summary of events, in one embodiment, includes even types and a number of times a particular event occurred. In other embodiments, other information about the event that could be helpful in recreating or reproducing the event can also be recorded. As illustrated exemplarily, the first row of the log data <b>96</b> includes fifty occurrences of event e<b>1</b>, seventy occurrences of event e<b>2</b>, and <b>20</b> occurrences of event e<b>3</b>. Further, these events occurred before (or simultaneous) action A, and action A occurred at instruction number <b>700</b>. The log data <b>96</b>, in other embodiments, may contain other data that is relevant to the reproduction of the actions and events at or about the time mark of occurrence, on other computer systems.</p>
<p id="p-0029" num="0028"><figref idref="DRAWINGS">FIG. 4</figref> illustrates an exemplary structure of the optimizer file <b>90</b>. The optimizer file <b>90</b>, in one embodiment, includes system runtime environment information <b>92</b>, application definition information <b>94</b>, and log data <b>96</b>. Runtime environments or operating systems provide specific commands or instructions to retrieve system runtime environment information <b>92</b> from a computer system. For example, an operating system or runtime environment provides &#x201c;env&#x201d; command to retrieve system environment. Other runtime environments or operating systems also provide similar command or instructions to retrieve or set system runtime environment information <b>92</b>. The runtime optimizer <b>52</b> uses the specific command provided by the runtime environment to retrieve the system runtime environment information <b>92</b>. In one embodiment, the system runtime environment includes PATH variables to enable loading specific libraries at the reproduction of the system runtime environment. The system runtime environment information <b>92</b> includes all information that is necessary to reproduce same or substantially same system runtime environment on a different computer system.</p>
<p id="p-0030" num="0029">Still referring to <figref idref="DRAWINGS">FIG. 4</figref>, the runtime optimizer <b>52</b> also retrieves application definition information <b>94</b>. The application definition information <b>94</b> pertains to the application <b>50</b> with which the runtime optimizer <b>52</b> is attached at runtime. In one embodiment, the application definition information <b>94</b> includes name, version info, security info, input variables, and command line inputs for the application <b>50</b>. In another embodiment, the application definition information includes all necessary information that is relevant to running the application <b>50</b> in a same or similar state on a different computer system. Further, the optimizer file <b>90</b> includes the log data <b>96</b>. The details of the log data have been discussed in <figref idref="DRAWINGS">FIG. 3</figref>. In other embodiments, the optimizer file <b>90</b> can include other information that is relevant to the reproduction of runtime environment, application environment, events, and actions so long as the information can be retrieved from the computer system on which the application <b>50</b> runs.</p>
<p id="p-0031" num="0030">Referring now to <figref idref="DRAWINGS">FIG. 5</figref> which illustrates a flow diagram of reproduction of the runtime environment, application environment, events, and actions. In one embodiment, the process illustrated in <figref idref="DRAWINGS">FIG. 5</figref> is performed on computer system that is different from the computer system on which the application <b>50</b> previously ran and a fault in the optimization was reported during the execution of the application <b>50</b>. The flow starts at operation <b>110</b> in which the optimizer file <b>90</b> is read. The optimizer file is created during a previous run of the application <b>50</b> on a different computer system. The system runtime environment information <b>92</b> is retrieved from the optimizer file <b>90</b> and a same or similar system runtime environment is reproduced using the information included in the system runtime environment information <b>92</b>. The control then moves to operation <b>114</b> in which the application setup is performed using the information provided by the application definition information <b>94</b>. Then in operation <b>116</b>, the application <b>50</b> is run and the runtime optimizer <b>52</b> is attached in a same or similar manner as in the previous run of the application <b>50</b> on a different computer system.</p>
<p id="p-0032" num="0031">Still referring to <figref idref="DRAWINGS">FIG. 5</figref>. The control then moves to operation <b>118</b> in which the log information <b>96</b> is read from the optimizer file <b>90</b>. In one embodiment, the entire log information <b>96</b> is read and cached in the memory. In other embodiment, the log information <b>96</b> is read one row at a time. From the first row of the log information <b>96</b>, the time mark of the occurrence of the first action is identified. The system waits for that time mark of occurrence of the action and in operation <b>120</b>, the action is invoked at that time mark. From the time of the attachment of the runtime optimizer <b>52</b> to the application <b>50</b>, all relevant events are monitored. Before the invocation of the action in operation <b>120</b>, the runtime optimizer <b>52</b> ensures that all events that occurred during the previous run of the application <b>50</b> and during which time the optimizer file <b>96</b> was created including the event summary <b>80</b>, are forced to occur during the current run of the application <b>50</b>. Hence, for example if event e<b>1</b> occurred fifty times during the previous run of the application <b>50</b> before action A occurred (see <figref idref="DRAWINGS">FIG. 3</figref>), the runtime optimizer <b>52</b> ensures that during the current run of the application <b>50</b>, event e<b>1</b> (such as &#x201c;cache miss&#x201d;) is forced to occur fifty times before action A is invoked in operation <b>120</b>. The purpose of this method is to ensure the application <b>50</b> in its current run is provided with the same or substantially similar runtime environment so as to enable reproduction of faults (because a fault that occurred on one system during one run of the application often times can't be reproduced in another run of the application on same or different system). It may be noted that even though term &#x201c;different computer system&#x201d; is being used to illustrate the methods, in another embodiment, the process described herein can also be used to reproduce faults on the same system.</p>
<p id="p-0033" num="0032">Next, in operation <b>122</b>, the system checks for an occurrence of a fault. If no fault occurs, the control goes back to operation <b>118</b> in which a next row is read from the log information <b>96</b>. If the fault occurs, a debugger is invoked to debug the application <b>50</b> and runtime optimizer <b>52</b> code to pinpoint the source of the fault.</p>
<p id="p-0034" num="0033"><figref idref="DRAWINGS">FIG. 6</figref> illustrates an exemplary computer system <b>51</b> including the runtime optimizer <b>52</b> module including logger <b>54</b> module and sampler <b>56</b> module. The computer system <b>51</b> further includes a runtime environment to run applications <b>50</b>, a processor <b>68</b>, a memory <b>70</b>, and a bus <b>66</b> to enable communication and addressing of various modules and components of the computer system <b>51</b>. The computer system <b>51</b> includes an interface to a debugger <b>72</b>. In one embodiment, the debugger <b>72</b> could be included in the computer system <b>51</b>. The computer system <b>51</b> also includes an externally connected computer readable media <b>58</b>. The externally connected computer readable media, in one embodiment, includes programming instructions of the runtime optimizer <b>52</b> including logger <b>54</b> and sampler <b>56</b>. These programming instructions, in one embodiment, can also be stored in the memory <b>70</b>. The programming instructions when executed by the computer system <b>51</b>, implements the runtime optimizer <b>52</b> including the logger <b>54</b> and the sampler <b>56</b>. In one embodiment, the memory <b>70</b> also includes application <b>50</b> programming instructions. In one embodiment, the optimizer file <b>90</b> is included on the computer readable media <b>58</b>. In another embodiment, the optimizer file <b>90</b> is written to the memory <b>70</b> by another computer system that is connected to the computer system <b>51</b>.</p>
<p id="p-0035" num="0034">With the above embodiments in mind, it should be understood that the invention may employ various computer-implemented operations involving data stored in computer systems. These operations are those requiring physical manipulation of physical quantities. Usually, though not necessarily, these quantities take the form of electrical or magnetic signals capable of being stored, transferred, combined, compared, and otherwise manipulated. Further, the manipulations performed are often referred to in terms, such as producing, identifying, determining, or comparing.</p>
<p id="p-0036" num="0035">Any of the operations described herein that form part of the invention are useful machine operations. The invention also relates to a device or an apparatus for performing these operations. The apparatus may be specially constructed for the required purposes, such as the carrier network discussed above, or it may be a general purpose computer selectively activated or configured by a computer program stored in the computer. In particular, various general purpose machines may be used with computer programs written in accordance with the teachings herein, or it may be more convenient to construct a more specialized apparatus to perform the required operations.</p>
<p id="p-0037" num="0036">The programming modules, page modules, and, subsystems described in this document can be implemented using a programming language such as Flash, JAVA, C++, C, C#, Visual Basic, JAVA Script, PHP, XML, HTML etc., or a combination of programming languages. Commonly available application programming interface (API) such as HTTP API, XML API and parsers etc. are used in the implementation of the programming modules. As would be known to those skilled in the art that the components and functionality described above and elsewhere in this document may be implemented on any desktop operating system which provides a support for a display screen, such as different versions of Microsoft Windows, Apple Mac, Unix/X-Windows, Linux etc. using any programming language suitable for desktop software development.</p>
<p id="p-0038" num="0037">The programming modules and ancillary software components, including configuration file or files, along with setup files required for installing the widget dock and related functionality as described in this document, are stored on a computer readable medium. Any computer medium such as a flash drive, a CD-ROM disk, an optical disk, a floppy disk, a hard drive, a shared drive, and an storage suitable for providing downloads from connected computers, could be used for storing the programming modules and ancillary software components. It would be known to a person skilled in the art that any storage medium could be used for storing these software components so long as the storage medium can be read by a computer system.</p>
<p id="p-0039" num="0038">The invention may be practiced with other computer system configurations including hand-held devices, microprocessor systems, microprocessor-based or programmable consumer electronics, minicomputers, mainframe computers and the like. The invention may also be practiced in distributing computing environments where tasks are performed by remote processing devices that are linked through a network.</p>
<p id="p-0040" num="0039">The invention can also be embodied as computer readable code on a computer readable medium. The computer readable medium is any data storage device that can store data, which can thereafter be read by a computer system. Examples of the computer readable medium include hard drives, network attached storage (NAS), read-only memory, random-access memory, CD-ROMs, CD-Rs, CD-RWs, DVDs, Flash, magnetic tapes, and other optical and non-optical data storage devices. The computer readable medium can also be distributed over a network coupled computer systems so that the computer readable code is stored and executed in a distributed fashion.</p>
<p id="p-0041" num="0040">While this invention has been described in terms of several preferable embodiments, it will be appreciated that those skilled in the art upon reading the specifications and studying the drawings will realize various alternation, additions, permutations and equivalents thereof. It is therefore intended that the present invention includes all such alterations, additions, permutations, and equivalents as fall within the true spirit and scope of the invention.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A method of event sampling for an application, comprising:
<claim-text>attaching a runtime optimizer to the application at runtime;</claim-text>
<claim-text>running the application on a first computer having a runtime environment;</claim-text>
<claim-text>recording a plurality of events during runtime, the recording of the plurality of events includes capturing an event type and number of occurrences for each of the plurality of events;</claim-text>
<claim-text>recording a plurality of actions, the recording of the plurality of actions includes capturing a time mark at which each of the plurality of actions occurred; and</claim-text>
<claim-text>creating an optimizer file including the recorded events, actions and time marks for the actions, wherein creating the optimizer file includes providing in the optimization file environment variables of the runtime environment of the first computer on which the application was run;</claim-text>
<claim-text>reading the optimizer file to reproduce the runtime environment on a second computer system that is different from the first computer system;</claim-text>
<claim-text>running the application for debugging on the second computer using the runtime environment and the time marks for the actions obtained from the optimizer file, the running of the application for debugging being executed using the second computer system without using performance counters of the second computer system, the optimizer file being stored on a non-volatile storage medium</claim-text>
<claim-text>wherein the optimizer file includes an application definition information, and a log, the log includes summaries of the plurality of events and the plurality of actions.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method as recited in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein creating of the optimizer file further includes summarizing each of the plurality of events and associating each of the plurality of events with one of the plurality of actions, the one of the plurality of action occurred after the each of the plurality of events.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method as recited in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein each of the plurality of action is one of a user action or a system action.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method as recited in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the time mark being defined as a number of executed instructions counted from a fix point in time.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method as recited in <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein creating of the optimizer file further includes retrieving an application definition information from the runtime environment.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method as recited in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein attaching a runtime optimizer includes invoking a sampler to capture of the plurality of events.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The method as recited in <claim-ref idref="CLM-00006">claim 6</claim-ref>, wherein attaching a runtime optimizer further includes invoking a logger to store of the plurality of events and the plurality of actions.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. A method of reproducing runtime environment for debugging an application, comprising:
<claim-text>reading an optimizer file from a non-volatile storage medium, the optimizer file includes a runtime environment of a first computer system, an application definition information, and a log, the log includes summaries of a plurality of events including an event type and number of occurrences for each of the plurality of events, the plurality of actions, and a time mark of occurrence for each of the plurality of actions;</claim-text>
<claim-text>defining a runtime environment for debugging the application, the defining uses the runtime environment provided by the optimizer file;</claim-text>
<claim-text>setting up the application runtime on a second computer system that is different than the first computer system using the application definition information in the optimizer file;</claim-text>
<claim-text>running the application and attaching an optimizer;</claim-text>
<claim-text>triggering each of the plurality of actions to occur at each time mark of occurrence associated with each of the plurality of actions, wherein using the time marks in the optimizer file enable the triggering of each of the plurality of actions on the second computer without using timing from performance counters of the second computer system; and</claim-text>
<claim-text>analyzing each of the plurality of actions and the plurality of events associated with the each of the plurality of actions, the analyzing includes comparing the events produced by running the application with the plurality of events in the optimizer file,</claim-text>
<claim-text>wherein, if a fault is produced by the triggering, a debugger is invoked to analyze the fault;</claim-text>
<claim-text>wherein producing the fault further includes forcing the each of the plurality of events to occur as many times as described in the summaries of the plurality of events while waiting for the time mark of occurrence for the each of the plurality of actions.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The method as recited in <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein producing the fault further includes invoking the each of the plurality of actions at the time mark of occurrence for the each of the plurality of actions, if a fault occurs, invoking a debugger to debug the application.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. A non-transitory computer readable medium having program instructions for reproducing runtime environment for debugging an application, the computer readable medium comprising:
<claim-text>program instructions for reading an optimizer file from a non-volatile storage medium, the optimizer file includes a runtime environment of a first computer system, an application definition information, and a log, the log includes summaries of a plurality of events including an event type and number of occurrences for each of the plurality of events, the plurality of actions, and a time mark of occurrence for each of the plurality of actions;</claim-text>
<claim-text>program instructions for defining a runtime environment for debugging the application, the defining uses the runtime environment provided by the optimizer file;</claim-text>
<claim-text>program instructions for setting up the application runtime on a second computer system that is different than the first computer system using the application definition information in the optimizer file;</claim-text>
<claim-text>program instructions for running the application and attaching an optimizer;</claim-text>
<claim-text>program instructions for triggering each of the plurality of actions to occur at each time mark of occurrence associated with the each of the plurality of actions, wherein using the time marks in the optimizer file enable the triggering of each of the plurality of actions on the second computer without using timing from performance counters of the second computer system; and</claim-text>
<claim-text>program instructions for analyzing each of the plurality of actions and the plurality of events associated with the each of the plurality of actions, the analyzing includes comparing the events produced by running the application with the plurality of events in the optimizer file, wherein, if a fault is produced by the triggering, a debugger is invoked to analyze the fault, wherein the program instructions for producing the fault further includes program instructions for forcing the each of the plurality of events to occur as many times as described in the summaries of the plurality of events during the waiting for the time mark of occurrence for the each of the plurality of actions.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The computer readable medium as recited in <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the program instructions for producing the fault includes program instructions for reading each of the plurality of actions from the summaries of the plurality of events in the log.</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The computer readable medium as recited in <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the program instructions for producing the fault further includes program instructions for reading the time mark of occurrence for the each of the plurality of actions.</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The computer readable medium as recited in <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the program instructions for producing the fault further includes program instructions for waiting for the time mark of occurrence for the each of the plurality of actions.</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The computer readable medium as recited in <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the program instructions for producing the fault further includes program instructions for invoking the each of the plurality of actions at the time mark of occurrence for the each of the plurality of actions, if a fault occurs, invoking a debugger to debug the application. </claim-text>
</claim>
</claims>
</us-patent-grant>

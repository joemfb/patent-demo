<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08626715-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08626715</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>13776995</doc-number>
<date>20130226</date>
</document-id>
</application-reference>
<us-application-series-code>13</us-application-series-code>
<us-term-of-grant>
<disclaimer>
<text>This patent is subject to a terminal disclaimer.</text>
</disclaimer>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>17</main-group>
<subgroup>00</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>707640</main-classification>
<further-classification>707641</further-classification>
<further-classification>707653</further-classification>
</classification-national>
<invention-title id="d2e51">Generic editor for databases</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>5926823</doc-number>
<kind>A</kind>
<name>Okumura</name>
<date>19990700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>5983234</doc-number>
<kind>A</kind>
<name>Tietjen</name>
<date>19991100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>6745209</doc-number>
<kind>B2</kind>
<name>Holenstein</name>
<date>20040600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>6782085</doc-number>
<kind>B1</kind>
<name>Becker et al.</name>
<date>20040800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>379126</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>6976029</doc-number>
<kind>B2</kind>
<name>Venkatesh</name>
<date>20051200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>7143112</doc-number>
<kind>B2</kind>
<name>Yagawa</name>
<date>20061100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>7296037</doc-number>
<kind>B1</kind>
<name>Kruy</name>
<date>20071100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>7580970</doc-number>
<kind>B2</kind>
<name>Bank et al.</name>
<date>20090800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709202</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>7676492</doc-number>
<kind>B2</kind>
<name>Bodily et al.</name>
<date>20100300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707999103</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>7707177</doc-number>
<kind>B2</kind>
<name>Bank et al.</name>
<date>20100400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707617</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>7822825</doc-number>
<kind>B2</kind>
<name>De Luca</name>
<date>20101000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>7826842</doc-number>
<kind>B2</kind>
<name>Buckley</name>
<date>20101100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00013">
<document-id>
<country>US</country>
<doc-number>7881959</doc-number>
<kind>B2</kind>
<name>Ramsey et al.</name>
<date>20110200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>705  736</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00014">
<document-id>
<country>US</country>
<doc-number>7917495</doc-number>
<kind>B1</kind>
<name>Chapman et al.</name>
<date>20110300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707713</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00015">
<document-id>
<country>US</country>
<doc-number>2004/0128165</doc-number>
<kind>A1</kind>
<name>Block</name>
<date>20040700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00016">
<document-id>
<country>US</country>
<doc-number>2005/0015400</doc-number>
<kind>A1</kind>
<name>Yoneda</name>
<date>20050100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00017">
<document-id>
<country>US</country>
<doc-number>2005/0102314</doc-number>
<kind>A1</kind>
<name>Howard et al.</name>
<date>20050500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707102</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00018">
<document-id>
<country>US</country>
<doc-number>2008/0270983</doc-number>
<kind>A1</kind>
<name>Ahadian</name>
<date>20081000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00019">
<document-id>
<country>US</country>
<doc-number>2009/0061807</doc-number>
<kind>A1</kind>
<name>Zigler</name>
<date>20090300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00020">
<document-id>
<country>US</country>
<doc-number>2009/0132554</doc-number>
<kind>A1</kind>
<name>Nagoya</name>
<date>20090500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00021">
<document-id>
<country>US</country>
<doc-number>2009/0178116</doc-number>
<kind>A1</kind>
<name>Nagoya</name>
<date>20090700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00022">
<document-id>
<country>US</country>
<doc-number>2009/0319588</doc-number>
<kind>A1</kind>
<name>Gandhi et al.</name>
<date>20091200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707206</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00023">
<document-id>
<country>US</country>
<doc-number>2010/0027889</doc-number>
<kind>A1</kind>
<name>Zhang</name>
<date>20100200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00024">
<document-id>
<country>US</country>
<doc-number>2010/0107261</doc-number>
<kind>A1</kind>
<name>Nagoya</name>
<date>20100400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00025">
<document-id>
<country>US</country>
<doc-number>2010/0138382</doc-number>
<kind>A1</kind>
<name>Nagoya</name>
<date>20100600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00026">
<othercit>Sage Software; &#x201c;Database Editor&#x201d;; 2006; pp. 1-2; http://www.enabling.net/download/brochures/sage/timberline/office/database<sub>&#x2014;</sub>editor.pdf.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00027">
<othercit>Pohlmann, Charl; &#x201c;SQL Database Editor&#x201d;; Aug. 25, 2004; pp. 1-8; http://www.codeproject.com/KB/database/SQLEditor.aspx.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00028">
<othercit>Oraspeed; &#x201c;Oraspeed SQL Editor&#x201d;; Aug. 30, 2007; pp. 1-2; http://oraspeed-sql-editor.lastdownload.com/.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00029">
<othercit>MSDN; &#x201c;Integration Services User Interface&#x201d;; Jan. 2009; pp. 1-3; http://msdn.microsoft.com/en-us/library/ms141730.aspx.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00030">
<othercit>Wikipedia; &#x201c;Toolkit for Conceptual Modeling&#x201d;; Nov. 17, 2008; p. 1; http://en.wikipedia.org/wiki/Toolkit<sub>&#x2014;</sub>for<sub>&#x2014;</sub>Conceptual<sub>&#x2014;</sub>Modeling.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00031">
<othercit>Villanova; &#x201c;Content Management System&#x201d;; 2005; pp. 1-4; http://villanova.edu/unit/assets/documents/web/ws<sub>&#x2014;</sub>content<sub>&#x2014;</sub>management<sub>&#x2014;</sub>system.pdf.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00032">
<othercit>Severance, Dennis G.; &#x201c;Differential Files: Their Application to the Maintenance of Large Databases&#x201d;; Sep. 1976 pp. 256-267; http://portal.acm.org/citation.cfm?doid=320473.320484.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00033">
<othercit>Office Action cited in U.S. Appl. No. 12/416,009 dated May 10, 2011.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00034">
<othercit>Office Action cited in U.S. Appl. No. 12/416,009 dated Jan. 18, 2012.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00035">
<othercit>Notice of Allowance cited in U.S. Appl. No. 12/416,009 dated Oct. 24, 2012.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00036">
<othercit>Zhizhin, Mikhail; Environmental Scenario Search and Visualization, 2007, ACM, 10 pages, &#x3c;URL: http://delivery.acm.org/10.1145/1350000/1341047/a27-zhizhin.pdf&#x3e;.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00037">
<othercit>Cheatham, Thomas; &#x201c;Process Programming and Process Models&#x201d;, 1990, ACM, 3 pages, &#x3c;URL: http://delivery.acm.org/10.1145/320000/317696/p49-cheatham.pdf&#x3e;.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00038">
<othercit>Li, Jianzhong; InfiniteDB: a PC-CLuster based Parallel Massive Database Management System, 2007, ACM, 11 pages, &#x3c;URL: http://delivery.acm.org/10.1145/1250000/1247585/p899-li.pdf&#x3e;.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00039">
<othercit>Smith, Jim; Polar: An Architecture for a Parallel ODMG Compliant Object Database, 2000, ACM, 8 pages, &#x3c;URL: http://delivery.acm.org/10.1145/360000/354840/p352-smith.pdf&#x3e;.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00040">
<othercit>Lundquist, Carol; &#x201c;A Parallel Relational Database Management System Approach to Relevance Feedback in Information Retrieval&#x201d;, 2009, Google Scholar, 28 pages, &#x3c;URL: http://mail.ir.iit.edu/&#x2dc;dagr/1999aparallelrelational.pdf&#x3e;.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00041">
<othercit>Sujithan, Ronald K.; Collection Types for Database Programming in the BSP Model, 1997, Google Scholar, 10 pages, &#x3c;URL: http://reference.kfupm.edu.sa/content/c/o/collection<sub>&#x2014;</sub>types<sub>&#x2014;</sub>for<sub>&#x2014;</sub>database<sub>&#x2014;</sub>programmin<sub>&#x2014;</sub>1529649.pdf&#x3e;.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>20</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>None</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>2</number-of-drawing-sheets>
<number-of-figures>3</number-of-figures>
</figures>
<us-related-documents>
<continuation>
<relation>
<parent-doc>
<document-id>
<country>US</country>
<doc-number>12416009</doc-number>
<date>20090331</date>
</document-id>
<parent-grant-document>
<document-id>
<country>US</country>
<doc-number>8386429</doc-number>
</document-id>
</parent-grant-document>
</parent-doc>
<child-doc>
<document-id>
<country>US</country>
<doc-number>13776995</doc-number>
</document-id>
</child-doc>
</relation>
</continuation>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20130173672</doc-number>
<kind>A1</kind>
<date>20130704</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only" applicant-authority-category="assignee">
<addressbook>
<orgname>Microsoft Corporation</orgname>
<address>
<city>Redmond</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Manis</last-name>
<first-name>William A.</first-name>
<address>
<city>Sammamish</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Bastien</last-name>
<first-name>Lonny</first-name>
<address>
<city>Bellevue</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="003" designation="us-only">
<addressbook>
<last-name>Williams</last-name>
<first-name>Antony Scott</first-name>
<address>
<city>Mercer Island</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="004" designation="us-only">
<addressbook>
<last-name>Bloesch</last-name>
<first-name>Anthony Christopher</first-name>
<address>
<city>Vashon</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="005" designation="us-only">
<addressbook>
<last-name>Leeb</last-name>
<first-name>Gunter</first-name>
<address>
<city>Redmond</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="006" designation="us-only">
<addressbook>
<last-name>Ahmed</last-name>
<first-name>Haroon</first-name>
<address>
<city>Bellevue</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="007" designation="us-only">
<addressbook>
<last-name>Kimmerly</last-name>
<first-name>Randy S.</first-name>
<address>
<city>Woodinville</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="008" designation="us-only">
<addressbook>
<last-name>Gittelman</last-name>
<first-name>Arye</first-name>
<address>
<city>Mercer Island</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="009" designation="us-only">
<addressbook>
<last-name>Box</last-name>
<first-name>Donald F.</first-name>
<address>
<city>Bellevue</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Workman Nydegger</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>Microsoft Corporation</orgname>
<role>02</role>
<address>
<city>Redmond</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Kim</last-name>
<first-name>Matt</first-name>
<department>2171</department>
</primary-examiner>
<assistant-examiner>
<last-name>Lu</last-name>
<first-name>Hua</first-name>
</assistant-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">Facilitating generic database editing to allow for data to be received from a user for entry into a database without requiring the data to conform to schema constraints for the database. A method includes examining a first schema for a first database. The first schema including a first set of constraints specified in the first schema on data to be entered into the first database. The method further includes, based on the examination, constructing a second database corresponding to the first database. The second database is associated with a second schema with a second set of constraints. The second set of constraints is a relaxed version of the first set of constraints specified in the first schema.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="112.44mm" wi="164.51mm" file="US08626715-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="140.97mm" wi="164.17mm" file="US08626715-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="209.80mm" wi="132.84mm" file="US08626715-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?RELAPP description="Other Patent Relations" end="lead"?>
<heading id="h-0001" level="1">CROSS-REFERENCE TO RELATED APPLICATIONS</heading>
<p id="p-0002" num="0001">This application is a continuation of and claims benefit of co-pending U.S. patent application Ser. No. 12/416,009 entitled &#x201c;Generic Editor for Databases&#x201d;, filed on Mar. 31, 2009, the specification of which is incorporated herein by reference in its entirety.</p>
<?RELAPP description="Other Patent Relations" end="tail"?>
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0002" level="1">BACKGROUND</heading>
<heading id="h-0003" level="1">Background and Relevant Art</heading>
<p id="p-0003" num="0002">Computers and computing systems have affected nearly every aspect of modern living. Computers are generally involved in work, recreation, healthcare, transportation, entertainment, household management, etc.</p>
<p id="p-0004" num="0003">Computing systems can include databases for storing, organizing and linking data. Data is often stored in database according to a tightly controlled schema which includes constraints on how data is to be organized in the database. Data can be edited in the database or entered into the database if the constraints are strictly followed. However, if the constraints are not followed, the database will typically not allow the data to be entered. For example, a schema may specify that entries into a particular column or field be of a certain type, say for example, an integer type. If a user attempts to input an entry that is not of the integer type into such a field, the database will reject the entry and not allow the user to enter the data into the database.</p>
<p id="p-0005" num="0004">Databases may have other constraints as well. For example, a database may have a schema with a constraint that indicates that if certain entries are made, other entries must be made as well for the certain entries to be committed to the database. For example, a database may have a constraint that indicates that if a name is entered into a name field, corresponding address and telephone numbers must be entered as well for the name to be committed (and finally entered into) the database. If a user attempts to enter a name, or group of names, into a database but does not have immediate ready access to either the address or telephone number, the name entries may be lost and need to be reentered once the user has access to the address and/or telephone information.</p>
<p id="p-0006" num="0005">Additionally, a user may be able to enter data directly into an editing interface directly associated with the database, but may have difficulty using generic data editors to enter data into a database. In particular, the generic editor may not be aware of schema constraints, and thus cannot direct a user to make appropriate entries. In particular, the generic editor may not be aware of triggers, stored procedures, checks, concurrency requirements, etc. or may not be able to provide sufficient context in that the generic editor does not have access to data for foreign key, unique key, and primary key information.</p>
<p id="p-0007" num="0006">The subject matter claimed herein is not limited to embodiments that solve any disadvantages or that operate only in environments such as those described above. Rather, this background is only provided to illustrate one exemplary technology area where some embodiments described herein may be practiced.</p>
<heading id="h-0004" level="1">BRIEF SUMMARY</heading>
<p id="p-0008" num="0007">One embodiment described herein includes a method that may be practiced in a computing environment. The method includes acts for facilitating generic database editing to allow for data to be received from a user for entry into a database without requiring the data to conform to schema constraints for the database. The method includes examining a first schema for a first database. The first schema including a first set of constraints specified in the first schema on data to be entered into the first database. The method further includes, based on the examination, constructing a second database corresponding to the first database. The second database is associated with a second schema with a second set of constraints. The second set of constraints is a relaxed version of the first set of constraints specified in the first schema.</p>
<p id="p-0009" num="0008">Another embodiment includes a method that may be practiced in a computing environment. The method includes acts for facilitating generic database editing to allow for data to be received from a user for a first database without requiring the data to conform to a first schema for a first database. The first schema includes a first set of constraints on data to be entered into the first database. Method steps may be performed at a second database corresponding to the first database. The second database is associated with a second schema with a second set of constraints. The second set of constraints are a relaxed version of the first set of constraints specified in the first schema. The method includes receiving user input for the second database. The user input includes data complying with the second schema. The method further include storing the user input in the second database separate from the first database.</p>
<p id="p-0010" num="0009">This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter, nor is it intended to be used as an aid in determining the scope of the claimed subject matter.</p>
<p id="p-0011" num="0010">Additional features and advantages will be set forth in the description which follows, and in part will be obvious from the description, or may be learned by the practice of the teachings herein. Features and advantages of the invention may be realized and obtained by means of the instruments and combinations particularly pointed out in the appended claims. Features of the present invention will become more fully apparent from the following description and appended claims, or may be learned by the practice of the invention as set forth hereinafter.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0005" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0012" num="0011">In order to describe the manner in which the above-recited and other advantages and features can be obtained, a more particular description of the subject matter briefly described above will be rendered by reference to specific embodiments which are illustrated in the appended drawings. Understanding that these drawings depict only typical embodiments and are not therefore to be considered to be limiting in scope, embodiments will be described and explained with additional specificity and detail through the use of the accompanying drawings in which:</p>
<p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. 1</figref> illustrates a computing environment including a first database and a parallel database to the first database;</p>
<p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. 2</figref> illustrates a method of facilitating generic database editing; and</p>
<p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. 3</figref> illustrates another method of generic database editing.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0006" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0016" num="0015">Some embodiments described herein are directed to storing database entries for a first database in a parallel database. The parallel database is associated with a parallel schema with constraints that are not as strict as constraints in a schema for the first database. For example, even though the first database has a row or field with constraints in a schema that requires entries in that row or field to be of type integer, the second database may include a schema with no type constraints in a corresponding row or field. In some embodiments, this may allow a user to edit data for entry into the first database without being constrained by the stricter requirements of the first database. In some embodiments, this allows a user to enter what data they have available and to persist such information until the information can be made to comply with the stricter requirements of the first database. In other embodiments, this allows for generic data editors to be used to enter information for the first database.</p>
<p id="p-0017" num="0016">Embodiments may also be implemented which allow for a user to enter the data for the first database into the parallel database without conforming strictly to constraints for the first database, but yet the embodiments provide warnings or messages to a user indicating that the data does not comply with constraints for the first database. This allows a user to take corrective actions before trying to merge the data from the parallel database into the first database. Embodiments may be able to accomplish this functionality by examining the schema for the first database such that a system can determine if entries into the parallel database comply with constraints from a schema for the first database.</p>
<p id="p-0018" num="0017">Additionally or alternatively, embodiments may include functionality for surfacing warnings from the first database to a user. For example, if an attempt is made to merge data from the parallel database into the first database, and the merge is not able to be completed due to the first database throwing an exception, information about the exception can be surfaced to a user. Illustrating a number of specific examples, errors may be raised by the first database as a result of actuation of triggers, a check, or a concurrency violation. Additionally or alternatively, when errors are raised, these may be logged to allow a developer to develop embodiments that can alert a user entering data into the parallel database without needing to attempt to merge data from the parallel database into the first database. In particular, a developer may not be able to ascertain some database requirements simply by examining constraints in the schema for the first database, as those requirements are only manifest as the result of a trigger in the database being actuated, a check predicate not being satisfied, data not being able to be committed due to concurrency violations, etc.</p>
<p id="p-0019" num="0018">Referring now to <figref idref="DRAWINGS">FIG. 1</figref>, an example embodiment is illustrated. <figref idref="DRAWINGS">FIG. 1</figref> illustrates a first database <b>102</b>. The first database <b>102</b> includes a data table <b>104</b>. Associated with the data table <b>104</b> is a schema which includes a set of constraints <b>106</b>. The constraints <b>106</b> specify restrictions on data that can be entered into the data table <b>104</b> and the database <b>102</b>. For example, the constraints may indicate that entries into a particular column or field of the table <b>104</b> be of a certain type, say for example, an integer type. If a user attempts to input an entry that is not of the integer type into such a field, the database will reject the entry and not allow the user to enter the data into the database <b>102</b>. In another example, the database <b>102</b> may have a schema with a constraint that indicates that if certain entries are made, other entries must be made as well for the certain entries to be committed to the database <b>102</b>. For example, a database may have a constraint that indicates that if a name is entered into a name field, corresponding address and telephone numbers must be entered as well for the name to be committed (and finally entered into) the database.</p>
<p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. 1</figref> further illustrates a parallel database <b>108</b> which acts as a local repository for data that can later be entered into the database <b>102</b>. The parallel database <b>108</b> includes a data table <b>110</b>. The data table <b>110</b> has columns rows and/or fields that correspond to columns rows and/or fields in the data table <b>104</b>. However, the data table <b>110</b> is associated with a schema with a set of constraints <b>112</b> that are not as restrictive as the set of constraints <b>106</b>. Thus, data that may not normally be able to be entered into the data table <b>104</b> can be entered into the parallel data table <b>110</b>. Problems with the data in the data table <b>110</b> can later be resolved so that the data can then be entered into the data table <b>104</b>.</p>
<p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. 1</figref> further illustrates a data editor application <b>114</b>. The data editor application <b>114</b> may be, for example, a generic editor that does not necessarily understand constraints or other requirements for data being entered into the database <b>102</b>.</p>
<p id="p-0022" num="0021">The following discussion now refers to a number of methods and method acts that may be performed. It should be noted, that although the method acts may be discussed in a certain order or illustrated in a flow chart as occurring in a particular order, no particular ordering is necessarily required unless specifically stated, or required because an act is dependent on another act being completed prior to the act being performed.</p>
<p id="p-0023" num="0022">Referring now to <figref idref="DRAWINGS">FIG. 2</figref>, a method <b>200</b> is illustrated. The method <b>200</b> may be practiced in a computing environment. The method <b>200</b> includes acts for facilitating generic database editing to allow for data to be received from a user for entry into a database without requiring the data to conform to schema constraints for the database. The method <b>200</b> includes examining a first schema for a first database (act <b>202</b>). The first schema may include a first set of constraints specified in the first schema on data to be entered into the first database. For example, <figref idref="DRAWINGS">FIG. 1</figref> illustrates constraints <b>106</b> on data entered into the database <b>102</b>. By examining the schema that includes the constraints, a user can determine constraints, or fields for a second database.</p>
<p id="p-0024" num="0023">The method <b>200</b> further includes constructing a second database corresponding to the first database (act <b>204</b>). The second database is associated with a second schema with a second set of constraints. The second set of constraints is a relaxed version of the first set of constraints specified in the first schema. Constructing a second database may include constructing the database in main memory and/or in one or more computer readable storage media of a computing system. The computing system may include appropriate processing hardware for interacting with the computer readable storage media. In one example, processing hardware may include functionality for reading from and writing to the database. <figref idref="DRAWINGS">FIG. 1</figref> illustrates an example of a parallel database <b>108</b> which is one example of the second database. <figref idref="DRAWINGS">FIG. 1</figref> further illustrates constraints <b>112</b> which may be part of a schema with relaxed constraints. In particular, the constraints <b>112</b> may be relaxed constraints for the second schema.</p>
<p id="p-0025" num="0024">Illustratively, in one embodiment, the first set of constraints may include a constraint that restricts field entries in a field in the first database to a limited set of one or more types. In contrast, the second set of constraints for the second database includes a corresponding constraint that allows corresponding field entries in a corresponding field in the second database to be of a type not included in the limited set of one or more types. For example, constraints for the first database may limit entries in fields to integer type objects. In contrast, constraints for corresponding fields in the second database my allow integers, floating points, strings, or other data types to be entered.</p>
<p id="p-0026" num="0025">Illustrating another example, the first set of constraints may include a constraint that restricts field entries in a field in the first database to be unique or primary keys. A unique key is a given entry in a column in which no other entries in the column are identical to the given entry. Similarly, a primary key is a given entry in a column in which no other entries in the column are identical to the given entry and where no entries in the column can be null. Embodiments may be implemented where the second set of constraints includes a corresponding constraint that allows corresponding field entries in a corresponding field (i.e. the corresponding field in the second database corresponds to a field in the first database) in the second database to be entries that are not unique or valid primary keys.</p>
<p id="p-0027" num="0026">In one embodiment, the first set of constraints may include a constraint that restricts field entries in a field in the first database to a limited set of foreign keys. The second set of constraints includes a corresponding constraint that allows corresponding field entries in a corresponding field in the second database to not be limited to a limited set of foreign keys.</p>
<p id="p-0028" num="0027">The second database may be associated with a set of one or more computer implemented modules configured to receive data from a user, determine that the data received from the user complies with the constraints in the second schema, in response to determining that the data received from the user complies with the second set of constraints in the second schema, store the data received from the user in the second database, in spite of the data received from the user being stored in the second database, determine that the data received from the user does not comply with the first set of constraints for the first schema for the first database; and in response to determining that the data received from the user does not comply with the first set of constraints for the first schema for the first database, surface to the user that the data does not comply with the first set of constraints for the first schema for the first data base. For example in some embodiments, the second database may be associated with computer modules that are able to determine that even though data may comply with the constraints for the second database, the data would not comply with constraints for the first database. Considering that the ultimate goal may be to enter data from the second database into the first database, it may be useful to assist a user in making data compliant with the constraints on data for the first database. In one embodiment, when the second database is associated with computer modules that can evaluate data to the constraints for the first database, the computer modules may also send a message to a user indicating that the data does not comply with the constraints for the first database and/or that the information on why the data does not comply with the constraints for the first database.</p>
<p id="p-0029" num="0028">As noted, it may ultimately be an objective to merge the data in second database into the first database. Thus, in some embodiments, the second database may be associated with a set of one or more modules configured to attempt to merge data from the second database into the first database. For example, these modules may be able to invoke database commands on the first database to move entries from the second database to the first database. However, in some situations, data may not be able to be merged from the second database to the first database. Thus, in some embodiments, the second database is associated with computer modules configured to receive a notification from the first database that the data from the second database cannot be merged into the first database including information about why the data from the second database cannot be merged into the first database and surface information about why data from the second database cannot be merged into the first database. The second database may continue to store the data in the second database in the second database to allow the user an opportunity to correct defects in the data in the second database that prevent the data in the second database from being merged into the first database.</p>
<p id="p-0030" num="0029">Data may not be able to be merged for any one of a number of different reasons. For example, data from the second database may not be able to be merged into the first database for at least one of data in the second database not complying with a predicate of a check for the first database, data being rejected as a result of a executing program scripts like triggers in the first database based on data from the second database, or data being rejected as a result of a concurrency exception in the first database when an attempt is made to enter data from the second database into the first database.</p>
<p id="p-0031" num="0030">Fields of a database may often be associated with one or more checks to determine valid data that may be entered into the fields. These checks are not typically reflected in the constraints of the schema of the database. Rather, the database includes programmatic modules configured to evaluate one or more predicates of a check, and if the predicates are satisfied when an attempt to enter data into the database is made, then the data can be entered. Otherwise, an error is raised and the data is not allowed to be entered. Because often the predicates for the checks cannot be determined from the schema, in some embodiments, the second database and programmatic code associated with it may not be aware of these checks until an attempt to merge data from the second database into the first database is made. Thus, embodiments may include functionality for surfacing errors and/or related messages due to not meeting the requirements of a check predicate to a user of the second database so that the user can correct any problems with the data.</p>
<p id="p-0032" num="0031">Similarly, databases may include programmatic code with trigger functionality. For example, data being entered into a database my trigger actions by the database, which may invalidate other database entries or add additional requirements for certain fields in the database. Again, typically the results of these triggers is not able to be ascertained by examining the schema, such that in the present examples, the second database and associated computing modules may not be aware of trigger results until an attempt is made to merge data from the second database into the first database. Thus, embodiments may include functionality for surfacing errors to a user of the second database for errors caused by triggers in the first database.</p>
<p id="p-0033" num="0032">Concurrency violations may also be detected in a database. Concurrency errors are typically raised when an attempt is made to commit data to a database where the data is out of date or other dependencies have not been met. For example some entries into some fields may only be valid so long as no changes have been made to some particular other fields. Again, these requirements can typically not be ascertained by examination of the schema. Thus, embodiments may include functionality for surfacing errors to a user of the second database for violations caused by concurrency in the first database.</p>
<p id="p-0034" num="0033">However, embodiments may include adaptive features that allow a database developer of the second database to later include programmatic code to alert a user of the second database to check, trigger and concurrency requirements without the need to attempt to merge the data from the second database into the first database once such requirements are know, for example once learned by previous attempts to merge data. For example, the second database may be associated with a set of one or more modules configured to store information on one or more computer readable media about why data from the second database cannot be merged into the first database so as to allow a developer to modify characteristics or constraints of the second database.</p>
<p id="p-0035" num="0034">Referring now to <figref idref="DRAWINGS">FIG. 3</figref>, another method <b>300</b> is illustrated. The method <b>300</b> may be practiced in a computing environment and include acts for facilitating generic database editing to allow for data to be received from a user for a first database without requiring the data to conform to a first schema for a first database. The first schema includes a first set of constraints on data to be entered into the first database. In this example, the acts of the method <b>300</b> are performed at a second database corresponding to the first database. The second database is associated with a second schema which has a second set of constraints. The second set of constraints is a relaxed version of the first set of constraints specified in the first schema. For example, as illustrated in <figref idref="DRAWINGS">FIG. 1</figref>, the constraints <b>112</b> may be a relaxed version of the constraints <b>106</b>. In one specific example, a constraint in the first set of constraints may limit entries into fields to integer type, while a corresponding constraint in the second set of constraints may allow for integers, floating points, strings, and/or other data types.</p>
<p id="p-0036" num="0035">The method <b>300</b> includes receiving user input for the second database, the user input comprising data complying with the second schema (act <b>302</b>). For example, and with reference to <figref idref="DRAWINGS">FIG. 1</figref>, data may be received that complies with the constraints <b>112</b>. The method <b>300</b> further includes storing the user input in the second database separate from the first database (act <b>304</b>). For example, parallel corresponding data for the first database is stored separate from the first database in the second database. In some embodiments, this allows for a parallel version of data that may not comply with requirements for the first database, but can nonetheless be stored and edited and in some embodiments corrected so that it can later be merged into the first database.</p>
<p id="p-0037" num="0036">In some embodiments of the method <b>300</b>, the method <b>300</b> may further include importing data from the first database, storing the data from the first database in fields in the second database corresponding to fields in the first database, and storing the user input with the data from the first database in the second database. For example, if there is a need or desire to maintain a database that is fairly true to the first database, then existing data in the first database can be imported into the second database. Data in the second database can then be added or edited in light of the existing data from the first database. Additionally, in some embodiments, this allows for known check requirements, triggers, and concurrency requirements from the first database to be complied with in the second database.</p>
<p id="p-0038" num="0037">In an alternative embodiment, the method of claim <b>300</b> may include only storing data in the second database that is intended to replace data in the first database or that is new data not yet included in the first database. For example, only data in fields in the second database that is different in value or format from data in corresponding fields in the second database, or data that is entered by a user in the second database but that has not yet been merged into the first database is stored in the second database.</p>
<p id="p-0039" num="0038">The method <b>300</b> may further include determining that the user input received for the second database does not comply with the first set of constraints for the first schema for the first database, and in response to determining that the user input for the second database does not comply with the first set of constraints for the first schema for the first database, surfacing to the user that the user input for the second database does not comply with the first set of constraints for the first schema for the first data base. For example, the second database may be aware of schema constraints for the first database, and while allowing data to be entered into the second database that does not comply with those constraints, the second database may nonetheless surface information indicating that data entered into the second database does not comply with schema constraints for the first database.</p>
<p id="p-0040" num="0039">In another embodiment of the method <b>300</b>, the method <b>300</b> may further include attempting to merge data from second database into the first database, receiving indication from the first database that the data from the second database cannot be merged into the first database, and surfacing a message to the user that the data from the second database cannot be merged into the first database.</p>
<p id="p-0041" num="0040">As noted, the inability for data to be merged may be caused by one or more of a number of different conditions. For example, in one embodiment, the indication from the first database that the data from the second database cannot be merged into the first database may be a result of data from the second database not complying with a check predicate specified by constraints in the first schema for the first database. In another embodiment, the indication from the first database that the data from the second database cannot be merged into the first database is a result of a trigger executing in the first database based on data from the second database. In yet another alternative, the indication from the first database that the data from the second database cannot be merged into the first database is a result of a concurrency violations in the first database when an attempt is made to enter data from the second database into the first database.</p>
<p id="p-0042" num="0041">Embodiments of the present invention may comprise or utilize a special purpose or general-purpose computer including computer hardware, as discussed in greater detail below. Embodiments within the scope of the present invention also include physical and other computer-readable media for carrying or storing computer-executable instructions and/or data structures. Such computer-readable media can be any available media that can be accessed by a general purpose or special purpose computer system. Computer-readable media that store computer-executable instructions are physical storage media. Computer-readable media that carry computer-executable instructions are transmission media. Thus, by way of example, and not limitation, embodiments of the invention can comprise at least two distinctly different kinds of computer-readable media: physical storage media and transmission media.</p>
<p id="p-0043" num="0042">Physical storage media includes RAM, ROM, EEPROM, CD-ROM or other optical disk storage, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store desired program code means in the form of computer-executable instructions or data structures and which can be accessed by a general purpose or special purpose computer.</p>
<p id="p-0044" num="0043">A &#x201c;network&#x201d; is defined as one or more data links that enable the transport of electronic data between computer systems and/or modules and/or other electronic devices. When information is transferred or provided over a network or another communications connection (either hardwired, wireless, or a combination of hardwired or wireless) to a computer, the computer properly views the connection as a transmission medium. Transmissions media can include a network and/or data links which can be used to carry or desired program code means in the form of computer-executable instructions or data structures and which can be accessed by a general purpose or special purpose computer. Combinations of the above should also be included within the scope of computer-readable media.</p>
<p id="p-0045" num="0044">Further, upon reaching various computer system components, program code means in the form of computer-executable instructions or data structures can be transferred automatically from transmission media to physical storage media (or vice versa). For example, computer-executable instructions or data structures received over a network or data link can be buffered in RAM within a network interface module (e.g., a &#x201c;NIC&#x201d;), and then eventually transferred to computer system RAM and/or to less volatile physical storage media at a computer system. Thus, it should be understood that physical storage media can be included in computer system components that also (or even primarily) utilize transmission media.</p>
<p id="p-0046" num="0045">Computer-executable instructions comprise, for example, instructions and data which cause a general purpose computer, special purpose computer, or special purpose processing device to perform a certain function or group of functions. The computer executable instructions may be, for example, binaries, intermediate format instructions such as assembly language, or even source code. Although the subject matter has been described in language specific to structural features and/or methodological acts, it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the described features or acts described above. Rather, the described features and acts are disclosed as example forms of implementing the claims.</p>
<p id="p-0047" num="0046">Those skilled in the art will appreciate that the invention may be practiced in network computing environments with many types of computer system configurations, including, personal computers, desktop computers, laptop computers, message processors, hand-held devices, multi-processor systems, microprocessor-based or programmable consumer electronics, network PCs, minicomputers, mainframe computers, mobile telephones, PDAs, pagers, routers, switches, and the like. The invention may also be practiced in distributed system environments where local and remote computer systems, which are linked (either by hardwired data links, wireless data links, or by a combination of hardwired and wireless data links) through a network, both perform tasks. In a distributed system environment, program modules may be located in both local and remote memory storage devices.</p>
<p id="p-0048" num="0047">The present invention may be embodied in other specific forms without departing from its spirit or essential characteristics. The described embodiments are to be considered in all respects only as illustrative and not restrictive. The scope of the invention is, therefore, indicated by the appended claims rather than by the foregoing description. All changes which come within the meaning and range of equivalency of the claims are to be embraced within their scope.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A computer program product for performing a method of facilitating generic database editing to allow for data to be received from a user for entry into a database without requiring the data to conform to schema constraints for the database, the schema including a set of constraints on data to be entered into the database, the computer program product comprising computer readable memory having encoded thereon computer executable instructions which when executed within a computing environment perform the method comprising:
<claim-text>examining a first schema for a first database, the first database comprising one or more database tables, columns, rows and a first set of fields, the first schema including a first set of constraints specified in the first schema on data to be entered into the first database, wherein at least some of the constraints are specified for a particular table, column or row and wherein the first set of constraints specified in the first schema requires that a first field of the first database can only accept a data value which is one of a particular set of data types; and</claim-text>
<claim-text>constructing a second database corresponding to the first database, the second database being parallel to the first database and comprising a second set of fields such that each field in the first set of fields has a corresponding field in the second set of fields, wherein the second database is associated with a second schema with a second set of constraints, the second set of constraints includes zero or more constraints on a first database table column or row in the second database that are less strict than a constraint from the first set of constraints on a database column or row in the first database to which the first database table column or row corresponds and wherein the second set of constraints allows a second field of the second database corresponding to the first field of the first database to accept a data value of a data type which is not among the particular set of data types required by the field of the first database and allows the second field of the second database corresponding to the first field of the first database to accept a data value of a data type which is among the particular set of data types required by the field of the first database.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The computer program product of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the second database further is associated with a set of one or more modules configured to:
<claim-text>receive data from a user;</claim-text>
<claim-text>determine that the data received from the user complies with the constraints in the second schema;</claim-text>
<claim-text>in response to determining that the data received from the user complies with the second set of constraints in the second schema, store the data received from the user in the second database;</claim-text>
<claim-text>in spite of the data received from the user being stored in the second database, determine that the data received from the user does not comply with the first set of constraints for the first schema for the first database; and</claim-text>
<claim-text>in response to determining that the data received from the user does not comply with the first set of constraints for the first schema for the first database, surfacing to the user that the data does not comply with the first set of constraints for the first schema for the first data base.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The computer program product of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the first set of constraints includes a constraint that restricts field entries in a field in the first database to be unique or primary keys and the second set of constraints includes a corresponding constraint that allows corresponding field entries in a corresponding field in the second database to be entries that are not unique or valid primary keys, and wherein when data from the second database is merged into the first database, non conformant fields entries reports constraints violation and are not merged into the first database.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The computer program product of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the first set of constraints includes a constraint that restricts field entries in a field in the first database to a limited set of foreign keys and the second set of constraints includes a corresponding constraint that allows corresponding field entries in a corresponding field in the second database to not be limited to a limited set of foreign keys.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The computer program product of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the second database is further associated with a set of one or more modules configured to:
<claim-text>attempt to merge data from the second database into the first database;</claim-text>
<claim-text>receive a notification from the first database that the data from the second database cannot be merged into the first database including information about why the data from the second database cannot be merged into the first database;</claim-text>
<claim-text>surface information about why data from the second database cannot be merged into the first database; and</claim-text>
<claim-text>continue to store the data in the second database in the second database to allow the user an opportunity to correct defects in the data in the second database that prevent the data in the second database from being merged into the first database.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The computer program product of <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein data from the second database cannot be merged into the first database for at least one of data in the second database not complying with a predicate of a check for the first database; data being rejected as a result of a trigger executing in the first database based on data from the second database; or data being rejected as a result of a concurrency exception in the first database when an attempt is made to enter data from the second database into the first database.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The computer program product of <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein the second database is further associated with a set of one or more modules configured to store information about why data from the second database cannot be merged into the first database so as to allow a user to modify characteristics or constraints of the second database.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. A computer program product for performing a method of facilitating generic database editing to allow for data to be received from a user for a first database without requiring the data to conform to a first schema for a first database, the first schema including a first set of constraints on data to be entered into the first database, the computer program product comprising computer readable memory having encoded thereon computer executable instructions which when executed within a computing environment perform the method comprising:
<claim-text>at a second database corresponding to the first database, the second database being parallel to the first database and comprising a second set of fields such that each field in the first database has a corresponding field in the second database, wherein the second database is associated with a second schema with a second set of constraints, the second set of constraints includes zero or more constraints on a first database table column or row in the second database that are less strict than a constraint from the first set of constraints on a database column or row in the first database to which the first database table column or row corresponds and wherein the second set of constraints allows a second field of the second database corresponding to the first field of the first database to accept a data value of a data type which is not among the particular set of data types required by the field of the first database and allows the second field of the second database corresponding to the first field of the first database to accept a data value of a data type which is among the particular set of data types required by the field of the first database:</claim-text>
<claim-text>receiving user input for the second database, the user input comprising data complying with the second schema but not complying with the first schema for the first database; and</claim-text>
<claim-text>storing the user input in the second database separate from the first database.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The computer program product of <claim-ref idref="CLM-00008">claim 8</claim-ref> further comprising:
<claim-text>importing data from the first database;</claim-text>
<claim-text>storing the data from the first database in fields in the second database corresponding to fields in the first database; and</claim-text>
<claim-text>storing the user input with the data from the first database in the second database.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The computer program product of <claim-ref idref="CLM-00008">claim 8</claim-ref> further comprising only storing data in the second database that is intended to replace data in the first database or that is new data not yet included in the first database.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The computer program product of <claim-ref idref="CLM-00008">claim 8</claim-ref> further comprising:
<claim-text>determining that the user input received for the second database does not comply with the first set of constraints for the first schema for the first database; and</claim-text>
<claim-text>in response to determining that the user input for the second database does not comply with the first set of constraints for the first schema for the first database, surfacing to the user that the user input for the second database does not comply with the first set of constraints for the first schema for the first data base.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The computer program product of <claim-ref idref="CLM-00008">claim 8</claim-ref> further comprising:
<claim-text>attempting to merge data from second database into the first database;</claim-text>
<claim-text>receiving indication from the first database that the data from the second database cannot be merged into the first database; and</claim-text>
<claim-text>surfacing a message to the user that the data from the second database cannot be merged into the first database.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The computer program product of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the indication from the first database that the data from the second database cannot be merged into the first database is a result of data from the second database not complying with a check predicate specified by constraints in the first schema for the first database.</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The computer program product of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the indication from the first database that the data from the second database cannot be merged into the first database is a result of a trigger executing in the first database based on data from the second database.</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The computer program product of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the indication from the first database that the data from the second database cannot be merged into the first database is a result of a concurrency violations in the first database when an attempt is made to enter data from the second database into the first database.</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. A system for performing a method of facilitating generic database editing to allow for data to be received from a user for a first database without requiring the data to conform to a first schema for a first database, the first schema including a first set of constraints on data to be entered into the first database, the system comprising one or more computer processors upon which are executed computer executable instructions for performing the method comprising:
<claim-text>at a second database corresponding to the first database, the second database being parallel to the first database and comprising a second set of fields such that each field in the first database has a corresponding field in the second database, wherein the second database is associated with a second schema with a second set of constraints, the second set of constraints includes zero or more constraints on a first database table column or row in the second database that are less strict than a constraint from the first set of constraints on a database column or row in the first database to which the first database table column or row corresponds and wherein the second set of constraints allows a second field of the second database corresponding to the first field of the first database to accept a data value of a data type which is not among the particular set of data types required by the field of the first database and allows the second field of the second database corresponding to the first field of the first database to accept a data value of a data type which is among the particular set of data types required by the field of the first database:
<claim-text>receiving user input for the second database, the user input comprising data complying with the second schema but not complying with the first schema for the first database; and</claim-text>
<claim-text>storing the user input in the second database separate from the first database.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The system of <claim-ref idref="CLM-00016">claim 16</claim-ref> further comprising:
<claim-text>importing data from the first database;</claim-text>
<claim-text>storing the data from the first database in fields in the second database corresponding to fields in the first database; and</claim-text>
<claim-text>storing the user input with the data from the first database in the second database.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The system of <claim-ref idref="CLM-00016">claim 16</claim-ref> further comprising only storing data in the second database that is intended to replace data in the first database or that is new data not yet included in the first database.</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. The system of <claim-ref idref="CLM-00016">claim 16</claim-ref> further comprising:
<claim-text>determining that the user input received for the second database does not comply with the first set of constraints for the first schema for the first database; and</claim-text>
<claim-text>in response to determining that the user input for the second database does not comply with the first set of constraints for the first schema for the first database, surfacing to the user that the user input for the second database does not comply with the first set of constraints for the first schema for the first data base.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. The system of <claim-ref idref="CLM-00016">claim 16</claim-ref> further comprising:
<claim-text>attempting to merge data from second database into the first database;</claim-text>
<claim-text>receiving indication from the first database that the data from the second database cannot be merged into the first database; and</claim-text>
<claim-text>surfacing a message to the user that the data from the second database cannot be merged into the first database. </claim-text>
</claim-text>
</claim>
</claims>
</us-patent-grant>

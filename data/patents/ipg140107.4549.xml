<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08625635-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08625635</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>13073948</doc-number>
<date>20110328</date>
</document-id>
</application-reference>
<us-application-series-code>13</us-application-series-code>
<us-term-of-grant>
<us-term-extension>260</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>H</section>
<class>04</class>
<subclass>J</subclass>
<main-group>3</main-group>
<subgroup>24</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>370474</main-classification>
<further-classification>707609</further-classification>
<further-classification>709201</further-classification>
<further-classification>709208</further-classification>
<further-classification>709209</further-classification>
<further-classification>711100</further-classification>
</classification-national>
<invention-title id="d2e53">Dispersed storage network frame protocol header</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>4092732</doc-number>
<kind>A</kind>
<name>Ouchi</name>
<date>19780500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>5454101</doc-number>
<kind>A</kind>
<name>Mackay et al.</name>
<date>19950900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>5485474</doc-number>
<kind>A</kind>
<name>Rabin</name>
<date>19960100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>5774643</doc-number>
<kind>A</kind>
<name>Lubbers et al.</name>
<date>19980600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>5802364</doc-number>
<kind>A</kind>
<name>Senator et al.</name>
<date>19980900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>5809285</doc-number>
<kind>A</kind>
<name>Hilland</name>
<date>19980900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>5890156</doc-number>
<kind>A</kind>
<name>Rekieta et al.</name>
<date>19990300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>5987622</doc-number>
<kind>A</kind>
<name>Lo Verso et al.</name>
<date>19991100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>5991414</doc-number>
<kind>A</kind>
<name>Garay et al.</name>
<date>19991100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>6012159</doc-number>
<kind>A</kind>
<name>Fischer et al.</name>
<date>20000100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>6058454</doc-number>
<kind>A</kind>
<name>Gerlach et al.</name>
<date>20000500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>6128277</doc-number>
<kind>A</kind>
<name>Bruck et al.</name>
<date>20001000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00013">
<document-id>
<country>US</country>
<doc-number>6175571</doc-number>
<kind>B1</kind>
<name>Haddock et al.</name>
<date>20010100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00014">
<document-id>
<country>US</country>
<doc-number>6192472</doc-number>
<kind>B1</kind>
<name>Garay et al.</name>
<date>20010200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00015">
<document-id>
<country>US</country>
<doc-number>6256688</doc-number>
<kind>B1</kind>
<name>Suetaka et al.</name>
<date>20010700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00016">
<document-id>
<country>US</country>
<doc-number>6272658</doc-number>
<kind>B1</kind>
<name>Steele et al.</name>
<date>20010800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00017">
<document-id>
<country>US</country>
<doc-number>6301604</doc-number>
<kind>B1</kind>
<name>Nojima</name>
<date>20011000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00018">
<document-id>
<country>US</country>
<doc-number>6356949</doc-number>
<kind>B1</kind>
<name>Katsandres et al.</name>
<date>20020300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00019">
<document-id>
<country>US</country>
<doc-number>6356951</doc-number>
<kind>B1</kind>
<name>Gentry, Jr.</name>
<date>20020300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709250</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00020">
<document-id>
<country>US</country>
<doc-number>6366995</doc-number>
<kind>B1</kind>
<name>Vilkov et al.</name>
<date>20020400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00021">
<document-id>
<country>US</country>
<doc-number>6374336</doc-number>
<kind>B1</kind>
<name>Peters et al.</name>
<date>20020400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00022">
<document-id>
<country>US</country>
<doc-number>6415373</doc-number>
<kind>B1</kind>
<name>Peters et al.</name>
<date>20020700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00023">
<document-id>
<country>US</country>
<doc-number>6418539</doc-number>
<kind>B1</kind>
<name>Walker</name>
<date>20020700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00024">
<document-id>
<country>US</country>
<doc-number>6449688</doc-number>
<kind>B1</kind>
<name>Peters et al.</name>
<date>20020900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00025">
<document-id>
<country>US</country>
<doc-number>6567948</doc-number>
<kind>B2</kind>
<name>Steele et al.</name>
<date>20030500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00026">
<document-id>
<country>US</country>
<doc-number>6571282</doc-number>
<kind>B1</kind>
<name>Bowman-Amuah</name>
<date>20030500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00027">
<document-id>
<country>US</country>
<doc-number>6609223</doc-number>
<kind>B1</kind>
<name>Wolfgang</name>
<date>20030800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00028">
<document-id>
<country>US</country>
<doc-number>6718361</doc-number>
<kind>B1</kind>
<name>Basani et al.</name>
<date>20040400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00029">
<document-id>
<country>US</country>
<doc-number>6760808</doc-number>
<kind>B2</kind>
<name>Peters et al.</name>
<date>20040700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00030">
<document-id>
<country>US</country>
<doc-number>6785768</doc-number>
<kind>B2</kind>
<name>Peters et al.</name>
<date>20040800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00031">
<document-id>
<country>US</country>
<doc-number>6785783</doc-number>
<kind>B2</kind>
<name>Buckland</name>
<date>20040800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00032">
<document-id>
<country>US</country>
<doc-number>6826711</doc-number>
<kind>B2</kind>
<name>Moulton et al.</name>
<date>20041100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00033">
<document-id>
<country>US</country>
<doc-number>6879596</doc-number>
<kind>B1</kind>
<name>Dooply</name>
<date>20050400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00034">
<document-id>
<country>US</country>
<doc-number>7003688</doc-number>
<kind>B1</kind>
<name>Pittelkow et al.</name>
<date>20060200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00035">
<document-id>
<country>US</country>
<doc-number>7024451</doc-number>
<kind>B2</kind>
<name>Jorgenson</name>
<date>20060400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00036">
<document-id>
<country>US</country>
<doc-number>7024609</doc-number>
<kind>B2</kind>
<name>Wolfgang et al.</name>
<date>20060400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00037">
<document-id>
<country>US</country>
<doc-number>7080101</doc-number>
<kind>B1</kind>
<name>Watson et al.</name>
<date>20060700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00038">
<document-id>
<country>US</country>
<doc-number>7103824</doc-number>
<kind>B2</kind>
<name>Halford</name>
<date>20060900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00039">
<document-id>
<country>US</country>
<doc-number>7103915</doc-number>
<kind>B2</kind>
<name>Redlich et al.</name>
<date>20060900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00040">
<document-id>
<country>US</country>
<doc-number>7111115</doc-number>
<kind>B2</kind>
<name>Peters et al.</name>
<date>20060900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00041">
<document-id>
<country>US</country>
<doc-number>7140044</doc-number>
<kind>B2</kind>
<name>Redlich et al.</name>
<date>20061100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00042">
<document-id>
<country>US</country>
<doc-number>7146644</doc-number>
<kind>B2</kind>
<name>Redlich et al.</name>
<date>20061200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00043">
<document-id>
<country>US</country>
<doc-number>7171493</doc-number>
<kind>B2</kind>
<name>Shu et al.</name>
<date>20070100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00044">
<document-id>
<country>US</country>
<doc-number>7222133</doc-number>
<kind>B1</kind>
<name>Raipurkar et al.</name>
<date>20070500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00045">
<document-id>
<country>US</country>
<doc-number>7240236</doc-number>
<kind>B2</kind>
<name>Cutts et al.</name>
<date>20070700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00046">
<document-id>
<country>US</country>
<doc-number>7272613</doc-number>
<kind>B2</kind>
<name>Sim et al.</name>
<date>20070900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00047">
<document-id>
<country>US</country>
<doc-number>8296386</doc-number>
<kind>B1</kind>
<name>Micalizzi, Jr.</name>
<date>20121000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709212</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00048">
<document-id>
<country>US</country>
<doc-number>2002/0062422</doc-number>
<kind>A1</kind>
<name>Butterworth et al.</name>
<date>20020500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00049">
<document-id>
<country>US</country>
<doc-number>2002/0124111</doc-number>
<kind>A1</kind>
<name>Desai</name>
<date>20020900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00050">
<document-id>
<country>US</country>
<doc-number>2002/0166079</doc-number>
<kind>A1</kind>
<name>Ulrich et al.</name>
<date>20021100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00051">
<document-id>
<country>US</country>
<doc-number>2003/0018927</doc-number>
<kind>A1</kind>
<name>Gadir et al.</name>
<date>20030100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00052">
<document-id>
<country>US</country>
<doc-number>2003/0037261</doc-number>
<kind>A1</kind>
<name>Meffert et al.</name>
<date>20030200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00053">
<document-id>
<country>US</country>
<doc-number>2003/0051195</doc-number>
<kind>A1</kind>
<name>Bosa</name>
<date>20030300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00054">
<document-id>
<country>US</country>
<doc-number>2003/0065617</doc-number>
<kind>A1</kind>
<name>Watkins et al.</name>
<date>20030400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00055">
<document-id>
<country>US</country>
<doc-number>2003/0084020</doc-number>
<kind>A1</kind>
<name>Shu</name>
<date>20030500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00056">
<document-id>
<country>US</country>
<doc-number>2004/0024963</doc-number>
<kind>A1</kind>
<name>Talagala et al.</name>
<date>20040200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00057">
<document-id>
<country>US</country>
<doc-number>2004/0078683</doc-number>
<kind>A1</kind>
<name>Buia</name>
<date>20040400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00058">
<document-id>
<country>US</country>
<doc-number>2004/0122917</doc-number>
<kind>A1</kind>
<name>Menon et al.</name>
<date>20040600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00059">
<document-id>
<country>US</country>
<doc-number>2004/0215998</doc-number>
<kind>A1</kind>
<name>Buxton et al.</name>
<date>20041000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00060">
<document-id>
<country>US</country>
<doc-number>2004/0228493</doc-number>
<kind>A1</kind>
<name>Ma et al.</name>
<date>20041100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00061">
<document-id>
<country>US</country>
<doc-number>2005/0100022</doc-number>
<kind>A1</kind>
<name>Ramprashad</name>
<date>20050500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00062">
<document-id>
<country>US</country>
<doc-number>2005/0114594</doc-number>
<kind>A1</kind>
<name>Corbett et al.</name>
<date>20050500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00063">
<document-id>
<country>US</country>
<doc-number>2005/0125593</doc-number>
<kind>A1</kind>
<name>Karpoff et al.</name>
<date>20050600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00064">
<document-id>
<country>US</country>
<doc-number>2005/0131993</doc-number>
<kind>A1</kind>
<name>Fatula, Jr.</name>
<date>20050600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00065">
<document-id>
<country>US</country>
<doc-number>2005/0132070</doc-number>
<kind>A1</kind>
<name>Redlich et al.</name>
<date>20050600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00066">
<document-id>
<country>US</country>
<doc-number>2005/0144382</doc-number>
<kind>A1</kind>
<name>Schmisseur</name>
<date>20050600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00067">
<document-id>
<country>US</country>
<doc-number>2005/0229069</doc-number>
<kind>A1</kind>
<name>Hassner</name>
<date>20051000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00068">
<document-id>
<country>US</country>
<doc-number>2006/0047907</doc-number>
<kind>A1</kind>
<name>Shiga et al.</name>
<date>20060300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00069">
<document-id>
<country>US</country>
<doc-number>2006/0136448</doc-number>
<kind>A1</kind>
<name>Cialini et al.</name>
<date>20060600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00070">
<document-id>
<country>US</country>
<doc-number>2006/0156059</doc-number>
<kind>A1</kind>
<name>Kitamura</name>
<date>20060700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00071">
<document-id>
<country>US</country>
<doc-number>2006/0224603</doc-number>
<kind>A1</kind>
<name>Correll, Jr.</name>
<date>20061000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00072">
<document-id>
<country>US</country>
<doc-number>2007/0079081</doc-number>
<kind>A1</kind>
<name>Gladwin et al.</name>
<date>20070400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00073">
<document-id>
<country>US</country>
<doc-number>2007/0079082</doc-number>
<kind>A1</kind>
<name>Gladwin et al.</name>
<date>20070400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00074">
<document-id>
<country>US</country>
<doc-number>2007/0079083</doc-number>
<kind>A1</kind>
<name>Gladwin et al.</name>
<date>20070400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00075">
<document-id>
<country>US</country>
<doc-number>2007/0088970</doc-number>
<kind>A1</kind>
<name>Buxton et al.</name>
<date>20070400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00076">
<document-id>
<country>US</country>
<doc-number>2007/0174192</doc-number>
<kind>A1</kind>
<name>Gladwin et al.</name>
<date>20070700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00077">
<document-id>
<country>US</country>
<doc-number>2007/0214285</doc-number>
<kind>A1</kind>
<name>Au et al.</name>
<date>20070900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00078">
<document-id>
<country>US</country>
<doc-number>2007/0234110</doc-number>
<kind>A1</kind>
<name>Soran et al.</name>
<date>20071000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00079">
<document-id>
<country>US</country>
<doc-number>2007/0263618</doc-number>
<kind>A1</kind>
<name>Ornes</name>
<date>20071100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00080">
<document-id>
<country>US</country>
<doc-number>2007/0283167</doc-number>
<kind>A1</kind>
<name>Venters, III et al.</name>
<date>20071200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00081">
<document-id>
<country>US</country>
<doc-number>2008/0008183</doc-number>
<kind>A1</kind>
<name>Takagaki et al.</name>
<date>20080100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>370392</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00082">
<document-id>
<country>US</country>
<doc-number>2008/0162811</doc-number>
<kind>A1</kind>
<name>Steinmetz</name>
<date>20080700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00083">
<document-id>
<country>US</country>
<doc-number>2009/0094251</doc-number>
<kind>A1</kind>
<name>Gladwin et al.</name>
<date>20090400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00084">
<document-id>
<country>US</country>
<doc-number>2009/0094318</doc-number>
<kind>A1</kind>
<name>Gladwin et al.</name>
<date>20090400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00085">
<document-id>
<country>US</country>
<doc-number>2010/0017531</doc-number>
<kind>A1</kind>
<name>Dhuse</name>
<date>20100100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00086">
<document-id>
<country>US</country>
<doc-number>2010/0023524</doc-number>
<kind>A1</kind>
<name>Gladwin et al.</name>
<date>20100100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00087">
<document-id>
<country>US</country>
<doc-number>2012/0030371</doc-number>
<kind>A1</kind>
<name>Baptist et al.</name>
<date>20120200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709236</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00088">
<document-id>
<country>US</country>
<doc-number>2012/0047226</doc-number>
<kind>A1</kind>
<name>Shinomiya</name>
<date>20120200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709217</main-classification></classification-national>
</us-citation>
<us-citation>
<nplcit num="00089">
<othercit>Shamir; How to Share a Secret; Communications of the ACM; vol. 22, No. 11; Nov. 1979; pp. 612-613.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00090">
<othercit>Rabin; Efficient Dispersal of Information for Security, Load Balancing, and Fault Tolerance; Journal of the Association for Computer Machinery; vol. 36, No. 2; Apr. 1989; pp. 335-348.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00091">
<othercit>Chung; An Automatic Data Segmentation Method for 3D Measured Data Points; National Taiwan University; pp. 1-8; 1998.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00092">
<othercit>Plank, T1: Erasure Codes for Storage Applications; FAST2005, 4th Usenix Conference on File Storage Technologies; Dec. 13-16, 2005; pp. 1-74.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00093">
<othercit>Wildi; Java iSCSi Initiator; Master Thesis; Department of Computer and Information Science, University of Konstanz; Feb. 2007; 60 pgs.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00094">
<othercit>Legg; Lightweight Directory Access Protocol (LDAP): Syntaxes and Matching Rules; IETF Network Working Group; RFC 4517; Jun. 2006; pp. 1-50.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00095">
<othercit>Zeilenga; Lightweight Directory Access Protocol (LDAP): Internationalized String Preparation; IETF Network Working Group; RFC 4518; Jun. 2006; pp. 1-14.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00096">
<othercit>Smith; Lightweight Directory Access Protocol (LDAP): Uniform Resource Locator; IETF Network Working Group; RFC 4516; Jun. 2006; pp. 1-15.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00097">
<othercit>Smith; Lightweight Directory Access Protocol (LDAP): String Representation of Search Filters; IETF Network Working Group; RFC 4515; Jun. 2006; pp. 1-12.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00098">
<othercit>Zeilenga; Lightweight Directory Access Protocol (LDAP): Directory Information Models; IETF Network Working Group; RFC 4512; Jun. 2006; pp. 1-49.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00099">
<othercit>Sciberras; Lightweight Directory Access Protocol (LDAP): Schema for User Applications; IETF Network Working Group; RFC 4519; Jun. 2006; pp. 1-33.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00100">
<othercit>Harrison; Lightweight Directory Access Protocol (LDAP): Authentication Methods and Security Mechanisms; IETF Network Working Group; RFC 4513; Jun. 2006; pp. 1-32.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00101">
<othercit>Zeilenga; Lightweight Directory Access Protocol (LDAP): Technical Specification Road Map; IETF Network Working Group; RFC 4510; Jun. 2006; pp. 1-8.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00102">
<othercit>Zeilenga; Lightweight Directory Access Protocol (LDAP): String Representation of Distinguished Names; IETF Network Working Group; RFC 4514; Jun. 2006; pp. 1-15.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00103">
<othercit>Sermersheim; Lightweight Directory Access Protocol (LDAP): The Protocol; IETF Network Working Group; RFC 4511; Jun. 2006; pp. 1-68.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00104">
<othercit>Satran, et al.; Internet Small Computer Systems Interface (iSCSI); IETF Network Working Group; RFC 3720; Apr. 2004; pp. 1-257.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00105">
<othercit>Xin, et al.; Evaluation of Distributed Recovery in Large-Scale Storage Systems; 13th IEEE International Symposium on High Performance Distributed Computing; Jun. 2004; pp. 172-181.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00106">
<othercit>International Search Report and Written Opinion; PCT Application No. PCT/US11/33745; Jun. 28, 2011; 12 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>14</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>370241-252</main-classification>
<additional-info>unstructured</additional-info>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>370464-472</main-classification>
<additional-info>unstructured</additional-info>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>370474</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>707  1</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>707 10</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709201</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709208-219</main-classification>
<additional-info>unstructured</additional-info>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>711100-173</main-classification>
<additional-info>unstructured</additional-info>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>27</number-of-drawing-sheets>
<number-of-figures>51</number-of-figures>
</figures>
<us-related-documents>
<us-provisional-application>
<document-id>
<country>US</country>
<doc-number>61328000</doc-number>
<date>20100426</date>
</document-id>
</us-provisional-application>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20110261838</doc-number>
<kind>A1</kind>
<date>20111027</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Baptist</last-name>
<first-name>Andrew</first-name>
<address>
<city>Chicago</city>
<state>IL</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Leggette</last-name>
<first-name>Wesley</first-name>
<address>
<city>Oak Park</city>
<state>IL</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="003" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Resch</last-name>
<first-name>Jason K.</first-name>
<address>
<city>Chicago</city>
<state>IL</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="004" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Motwani</last-name>
<first-name>Manish</first-name>
<address>
<city>Chicago</city>
<state>IL</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="005" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Quigley</last-name>
<first-name>John</first-name>
<address>
<city>Chicago</city>
<state>IL</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Baptist</last-name>
<first-name>Andrew</first-name>
<address>
<city>Chicago</city>
<state>IL</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Leggette</last-name>
<first-name>Wesley</first-name>
<address>
<city>Oak Park</city>
<state>IL</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="003" designation="us-only">
<addressbook>
<last-name>Resch</last-name>
<first-name>Jason K.</first-name>
<address>
<city>Chicago</city>
<state>IL</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="004" designation="us-only">
<addressbook>
<last-name>Motwani</last-name>
<first-name>Manish</first-name>
<address>
<city>Chicago</city>
<state>IL</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="005" designation="us-only">
<addressbook>
<last-name>Quigley</last-name>
<first-name>John</first-name>
<address>
<city>Chicago</city>
<state>IL</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Garlick &#x26; Markison</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
<agent sequence="02" rep-type="attorney">
<addressbook>
<last-name>Markison</last-name>
<first-name>Timothy W.</first-name>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>Cleversafe, Inc.</orgname>
<role>02</role>
<address>
<city>Chicago</city>
<state>IL</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Jiang</last-name>
<first-name>Charles C</first-name>
<department>2472</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">A method to generate a protocol header of a dispersed storage network (DSN) frame begins by a processing module generating a protocol class field and generating a protocol class version field. The method continues with the processing module generating an operation code (opcode) field and generating a request/response field. The method continues with the processing module generating a request number field and generating a payload length field. The method continues with the processing module outputting, in order, the protocol class field, the protocol class version field, the opcode field, the request/response field, the request number field, and the payload length field.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="149.94mm" wi="91.78mm" file="US08625635-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="229.19mm" wi="179.32mm" orientation="landscape" file="US08625635-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="216.75mm" wi="162.22mm" orientation="landscape" file="US08625635-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="235.03mm" wi="179.92mm" orientation="landscape" file="US08625635-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="237.91mm" wi="182.63mm" orientation="landscape" file="US08625635-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="234.19mm" wi="171.37mm" orientation="landscape" file="US08625635-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="237.07mm" wi="170.77mm" orientation="landscape" file="US08625635-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="197.19mm" wi="177.12mm" orientation="landscape" file="US08625635-20140107-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00008" num="00008">
<img id="EMI-D00008" he="230.63mm" wi="173.91mm" orientation="landscape" file="US08625635-20140107-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00009" num="00009">
<img id="EMI-D00009" he="229.70mm" wi="186.35mm" orientation="landscape" file="US08625635-20140107-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00010" num="00010">
<img id="EMI-D00010" he="224.87mm" wi="177.12mm" orientation="landscape" file="US08625635-20140107-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00011" num="00011">
<img id="EMI-D00011" he="230.12mm" wi="177.46mm" orientation="landscape" file="US08625635-20140107-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00012" num="00012">
<img id="EMI-D00012" he="229.19mm" wi="175.18mm" orientation="landscape" file="US08625635-20140107-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00013" num="00013">
<img id="EMI-D00013" he="227.50mm" wi="172.80mm" orientation="landscape" file="US08625635-20140107-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00014" num="00014">
<img id="EMI-D00014" he="226.31mm" wi="167.22mm" orientation="landscape" file="US08625635-20140107-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00015" num="00015">
<img id="EMI-D00015" he="229.19mm" wi="155.28mm" orientation="landscape" file="US08625635-20140107-D00015.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00016" num="00016">
<img id="EMI-D00016" he="227.92mm" wi="167.22mm" orientation="landscape" file="US08625635-20140107-D00016.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00017" num="00017">
<img id="EMI-D00017" he="224.37mm" wi="153.50mm" orientation="landscape" file="US08625635-20140107-D00017.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00018" num="00018">
<img id="EMI-D00018" he="229.19mm" wi="166.96mm" orientation="landscape" file="US08625635-20140107-D00018.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00019" num="00019">
<img id="EMI-D00019" he="231.56mm" wi="155.02mm" orientation="landscape" file="US08625635-20140107-D00019.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00020" num="00020">
<img id="EMI-D00020" he="226.65mm" wi="168.57mm" orientation="landscape" file="US08625635-20140107-D00020.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00021" num="00021">
<img id="EMI-D00021" he="232.24mm" wi="155.19mm" orientation="landscape" file="US08625635-20140107-D00021.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00022" num="00022">
<img id="EMI-D00022" he="227.16mm" wi="175.09mm" orientation="landscape" file="US08625635-20140107-D00022.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00023" num="00023">
<img id="EMI-D00023" he="242.23mm" wi="194.82mm" orientation="landscape" file="US08625635-20140107-D00023.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00024" num="00024">
<img id="EMI-D00024" he="229.62mm" wi="171.28mm" orientation="landscape" file="US08625635-20140107-D00024.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00025" num="00025">
<img id="EMI-D00025" he="243.50mm" wi="187.11mm" orientation="landscape" file="US08625635-20140107-D00025.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00026" num="00026">
<img id="EMI-D00026" he="231.06mm" wi="168.06mm" orientation="landscape" file="US08625635-20140107-D00026.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00027" num="00027">
<img id="EMI-D00027" he="232.24mm" wi="170.10mm" orientation="landscape" file="US08625635-20140107-D00027.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?RELAPP description="Other Patent Relations" end="lead"?>
<heading id="h-0001" level="1">CROSS REFERENCE TO RELATED PATENTS</heading>
<p id="p-0002" num="0001">This patent application is claiming priority under 35 U.S.C. &#xa7;119(e) to a provisionally filed patent application entitled &#x201c;DISPERSED STORAGE SYSTEM ACCESS PROTOCOL FORMAT AND METHOD&#x201d;, having a provisional filing date of Apr. 26, 2010, and a provisional Ser. No. 61/328,000, pending, which is hereby incorporated herein by reference in its entirety and made part of the present U.S. Utility Patent Application for all purposes.</p>
<?RELAPP description="Other Patent Relations" end="tail"?>
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0002" level="1">STATEMENT REGARDING FEDERALLY SPONSORED RESEARCH OR DEVELOPMENT</heading>
<p id="p-0003" num="0002">NOT APPLICABLE</p>
<heading id="h-0003" level="1">INCORPORATION-BY-REFERENCE OF MATERIAL SUBMITTED ON A COMPACT DISC</heading>
<p id="p-0004" num="0003">NOT APPLICABLE</p>
<heading id="h-0004" level="1">BACKGROUND OF THE INVENTION</heading>
<p id="p-0005" num="0004">1. Technical Field of the Invention</p>
<p id="p-0006" num="0005">This invention relates generally to computing systems and more particularly to data storage solutions within such computing systems.</p>
<p id="p-0007" num="0006">2. Description of Related Art</p>
<p id="p-0008" num="0007">Computers are known to communicate, process, and store data. Such computers range from wireless smart phones to data centers that support millions of web searches, stock trades, or on-line purchases every day. In general, a computing system generates data and/or manipulates data from one form into another. For instance, an image sensor of the computing system generates raw picture data and, using an image compression program (e.g., JPEG, MPEG, etc.), the computing system manipulates the raw picture data into a standardized compressed image.</p>
<p id="p-0009" num="0008">With continued advances in processing speed and communication speed, computers are capable of processing real time multimedia data for applications ranging from simple voice communications to streaming high definition video. As such, general-purpose information appliances are replacing purpose-built communications devices (e.g., a telephone). For example, smart phones can support telephony communications but they are also capable of text messaging and accessing the internet to perform functions including email, web browsing, remote applications access, and media communications (e.g., telephony voice, image transfer, music files, video files, real time video streaming. etc.).</p>
<p id="p-0010" num="0009">Each type of computer is constructed and operates in accordance with one or more communication, processing, and storage standards. As a result of standardization and with advances in technology, more and more information content is being converted into digital formats. For example, more digital cameras are now being sold than film cameras, thus producing more digital pictures. As another example, web-based programming is becoming an alternative to over the air television broadcasts and/or cable broadcasts. As further examples, papers, books, video entertainment, home video, etc. are now being stored digitally, which increases the demand on the storage function of computers.</p>
<p id="p-0011" num="0010">A typical computer storage system includes one or more memory devices aligned with the needs of the various operational aspects of the computer's processing and communication functions. Generally, the immediacy of access dictates what type of memory device is used. For example, random access memory (RAM) memory can be accessed in any random order with a constant response time, thus it is typically used for cache memory and main memory. By contrast, memory device technologies that require physical movement such as magnetic disks, tapes, and optical discs, have a variable response time as the physical movement can take longer than the data transfer, thus they are typically used for secondary memory (e.g., hard drive, backup memory, etc.).</p>
<p id="p-0012" num="0011">A computer's storage system will be compliant with one or more computer storage standards that include, but are not limited to, network file system (NFS), flash file system (FFS), disk file system (DFS), small computer system interface (SCSI), internet small computer system interface (iSCSI), file transfer protocol (FTP), and web-based distributed authoring and versioning (WebDAV). These standards specify the data storage format (e.g., files, data objects, data blocks, directories, etc.) and interfacing between the computer's processing function and its storage system, which is a primary function of the computer's memory controller.</p>
<p id="p-0013" num="0012">Despite the standardization of the computer and its storage system, memory devices fail; especially commercial grade memory devices that utilize technologies incorporating physical movement (e.g., a disc drive). For example, it is fairly common for a disc drive to routinely suffer from bit level corruption and to completely fail after three years of use. One solution is to a higher-grade disc drive, which adds significant cost to a computer.</p>
<p id="p-0014" num="0013">Another solution is to utilize multiple levels of redundant disc drives to replicate the data into two or more copies. One such redundant drive approach is called redundant array of independent discs (RAID). In a RAID device, a RAID controller adds parity data to the original data before storing it across the array. The parity data is calculated from the original data such that the failure of a disc will not result in the loss of the original data. For example, RAID 5 uses three discs to protect data from the failure of a single disc. The parity data, and associated redundancy overhead data, reduces the storage capacity of three independent discs by one third (e.g., n&#x2212;1=capacity). RAID 6 can recover from a loss of two discs and requires a minimum of four discs with a storage capacity of n&#x2212;2.</p>
<p id="p-0015" num="0014">While RAID addresses the memory device failure issue, it is not without its own failures issues that affect its effectiveness, efficiency and security. For instance, as more discs are added to the array, the probability of a disc failure increases, which increases the demand for maintenance. For example, when a disc fails, it needs to be manually replaced before another disc fails and the data stored in the RAID device is lost. To reduce the risk of data loss, data on a RAID device is typically copied on to one or more other RAID devices. While this addresses the loss of data issue, it raises a security issue since multiple copies of data are available, which increases the chances of unauthorized access. Further, as the amount of data being stored grows, the overhead of RAID devices becomes a non-trivial efficiency issue.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0005" level="1">BRIEF DESCRIPTION OF THE SEVERAL VIEWS OF THE DRAWING(S)</heading>
<p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. 1</figref> is a schematic block diagram of an embodiment of a computing system in accordance with the invention;</p>
<p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. 2</figref> is a schematic block diagram of an embodiment of a computing core in accordance with the invention;</p>
<p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. 3</figref> is a schematic block diagram of an embodiment of a distributed storage processing unit in accordance with the invention;</p>
<p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. 4</figref> is a schematic block diagram of an embodiment of a grid module in accordance with the invention;</p>
<p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. 5</figref> is a diagram of an example embodiment of error coded data slice creation in accordance with the invention;</p>
<p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. 6A</figref> is a schematic block diagram of another embodiment of a computing system in accordance with the invention;</p>
<p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. 6B</figref> is a diagram of an embodiment of a message format in accordance with the invention;</p>
<p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. 6C</figref> is a schematic block diagram of another embodiment of a computing system in accordance with the invention;</p>
<p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. 6D</figref> is a flowchart illustrating an example of generating a protocol header of a dispersed storage network (DSN) frame in accordance with the invention;</p>
<p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. 7A</figref> is a diagram illustrating an example of a read request message format in accordance with the invention;</p>
<p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. 7B</figref> is a flowchart illustrating an example of generating a read request message in accordance with the invention;</p>
<p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. 8A</figref> is a diagram illustrating an example of a read response message format in accordance with the invention;</p>
<p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. 8B</figref> is a flowchart illustrating an example of generating a read response message in accordance with the invention;</p>
<p id="p-0029" num="0028"><figref idref="DRAWINGS">FIG. 9A</figref> is a diagram illustrating an example of a write request message format in accordance with the invention;</p>
<p id="p-0030" num="0029"><figref idref="DRAWINGS">FIG. 9B</figref> is a flowchart illustrating an example of generating a write request message in accordance with the invention;</p>
<p id="p-0031" num="0030"><figref idref="DRAWINGS">FIG. 10A</figref> is a diagram illustrating an example of a write response message format in accordance with the invention;</p>
<p id="p-0032" num="0031"><figref idref="DRAWINGS">FIG. 10B</figref> is a table illustrating an example of a write response status code format in accordance with the invention;</p>
<p id="p-0033" num="0032"><figref idref="DRAWINGS">FIG. 10C</figref> is a flowchart illustrating an example of generating a write response message in accordance with the invention;</p>
<p id="p-0034" num="0033"><figref idref="DRAWINGS">FIG. 11A</figref> is a diagram illustrating an example of a checked write request message format in accordance with the invention;</p>
<p id="p-0035" num="0034"><figref idref="DRAWINGS">FIG. 11B</figref> is a flowchart illustrating an example of generating a checked write request message in accordance with the invention;</p>
<p id="p-0036" num="0035"><figref idref="DRAWINGS">FIG. 12A</figref> is a diagram illustrating an example of a checked write response message format in accordance with the invention;</p>
<p id="p-0037" num="0036"><figref idref="DRAWINGS">FIG. 12B</figref> is a table illustrating an example of a checked write response status code format in accordance with the invention;</p>
<p id="p-0038" num="0037"><figref idref="DRAWINGS">FIG. 12C</figref> is a flowchart illustrating an example of generating a checked write response message in accordance with the invention;</p>
<p id="p-0039" num="0038"><figref idref="DRAWINGS">FIG. 13A</figref> is a diagram illustrating an example of a write commit request message format in accordance with the invention;</p>
<p id="p-0040" num="0039"><figref idref="DRAWINGS">FIG. 13B</figref> is a flowchart illustrating an example of generating a write commit request message in accordance with the invention;</p>
<p id="p-0041" num="0040"><figref idref="DRAWINGS">FIG. 14A</figref> is a diagram illustrating an example of a write commit response message format in accordance with the invention;</p>
<p id="p-0042" num="0041"><figref idref="DRAWINGS">FIG. 14B</figref> is a flowchart illustrating an example of generating a write commit response message in accordance with the invention;</p>
<p id="p-0043" num="0042"><figref idref="DRAWINGS">FIG. 15A</figref> is a diagram illustrating an example of a write rollback request message format in accordance with the invention;</p>
<p id="p-0044" num="0043"><figref idref="DRAWINGS">FIG. 15B</figref> is a flowchart illustrating an example of generating a write rollback request message in accordance with the invention;</p>
<p id="p-0045" num="0044"><figref idref="DRAWINGS">FIG. 16A</figref> is a diagram illustrating an example of a write rollback response message format in accordance with the invention;</p>
<p id="p-0046" num="0045"><figref idref="DRAWINGS">FIG. 16B</figref> is a flowchart illustrating an example of generating a write rollback response message in accordance with the invention;</p>
<p id="p-0047" num="0046"><figref idref="DRAWINGS">FIG. 17A</figref> is a diagram illustrating an example of a finalize write request message format in accordance with the invention;</p>
<p id="p-0048" num="0047"><figref idref="DRAWINGS">FIG. 17B</figref> is a flowchart illustrating an example of generating a finalize write request message in accordance with the invention;</p>
<p id="p-0049" num="0048"><figref idref="DRAWINGS">FIG. 18A</figref> is a diagram illustrating an example of a finalize write response message format in accordance with the invention;</p>
<p id="p-0050" num="0049"><figref idref="DRAWINGS">FIG. 18B</figref> is a flowchart illustrating an example of generating a finalize write response message in accordance with the invention;</p>
<p id="p-0051" num="0050"><figref idref="DRAWINGS">FIG. 19A</figref> is a diagram illustrating an example of an undo write request message format in accordance with the invention;</p>
<p id="p-0052" num="0051"><figref idref="DRAWINGS">FIG. 19B</figref> is a flowchart illustrating an example of generating an undo write request message in accordance with the invention;</p>
<p id="p-0053" num="0052"><figref idref="DRAWINGS">FIG. 20A</figref> is a diagram illustrating an example of an undo write response message format in accordance with the invention;</p>
<p id="p-0054" num="0053"><figref idref="DRAWINGS">FIG. 20B</figref> is a flowchart illustrating an example of generating an undo write response message in accordance with the invention;</p>
<p id="p-0055" num="0054"><figref idref="DRAWINGS">FIG. 21A</figref> is a diagram illustrating an example of a check request message format in accordance with the invention;</p>
<p id="p-0056" num="0055"><figref idref="DRAWINGS">FIG. 21B</figref> is a flowchart illustrating an example of generating a check request message in accordance with the invention;</p>
<p id="p-0057" num="0056"><figref idref="DRAWINGS">FIG. 22A</figref> is a diagram illustrating an example of a check response message format in accordance with the invention;</p>
<p id="p-0058" num="0057"><figref idref="DRAWINGS">FIG. 22B</figref> is a flowchart illustrating an example of generating a check response message in accordance with the invention;</p>
<p id="p-0059" num="0058"><figref idref="DRAWINGS">FIG. 23A</figref> is a diagram illustrating an example of a list range request message format in accordance with the invention;</p>
<p id="p-0060" num="0059"><figref idref="DRAWINGS">FIG. 23B</figref> is a flowchart illustrating an example of generating a list range request message in accordance with the invention;</p>
<p id="p-0061" num="0060"><figref idref="DRAWINGS">FIG. 24A</figref> is a diagram illustrating an example of a list range response message format in accordance with the invention;</p>
<p id="p-0062" num="0061"><figref idref="DRAWINGS">FIG. 24B</figref> is a flowchart illustrating an example of generating a list range response message in accordance with the invention;</p>
<p id="p-0063" num="0062"><figref idref="DRAWINGS">FIG. 25A</figref> is a diagram illustrating an example of a list digest request message format in accordance with the invention;</p>
<p id="p-0064" num="0063"><figref idref="DRAWINGS">FIG. 25B</figref> is a flowchart illustrating an example of generating a list digest request message in accordance with the invention;</p>
<p id="p-0065" num="0064"><figref idref="DRAWINGS">FIG. 26A</figref> is a diagram illustrating an example of a list digest response message format in accordance with the invention; and</p>
<p id="p-0066" num="0065"><figref idref="DRAWINGS">FIG. 26B</figref> is a flowchart illustrating an example of generating a list digest response message in accordance with the invention.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0006" level="1">DETAILED DESCRIPTION OF THE INVENTION</heading>
<p id="p-0067" num="0066"><figref idref="DRAWINGS">FIG. 1</figref> is a schematic block diagram of a computing system <b>10</b> that includes one or more of a first type of user devices <b>12</b>, one or more of a second type of user devices <b>14</b>, at least one distributed storage (DS) processing unit <b>16</b>, at least one DS managing unit <b>18</b>, at least one storage integrity processing unit <b>20</b>, and a distributed storage network (DSN) memory <b>22</b> coupled via a network <b>24</b>. The network <b>24</b> may include one or more wireless and/or wire lined communication systems; one or more private intranet systems and/or public internet systems; and/or one or more local area networks (LAN) and/or wide area networks (WAN).</p>
<p id="p-0068" num="0067">The DSN memory <b>22</b> includes a plurality of distributed storage (DS) units <b>36</b> for storing data of the system. Each of the DS units <b>36</b> includes a processing module and memory and may be located at a geographically different site than the other DS units (e.g., one in Chicago, one in Milwaukee, etc.). The processing module may be a single processing device or a plurality of processing devices. Such a processing device may be a microprocessor, micro-controller, digital signal processor, microcomputer, central processing unit, field programmable gate array, programmable logic device, state machine, logic circuitry, analog circuitry, digital circuitry, and/or any device that manipulates signals (analog and/or digital) based on hard coding of the circuitry and/or operational instructions. The processing module may have an associated memory and/or memory element, which may be a single memory device, a plurality of memory devices, and/or embedded circuitry of the processing module. Such a memory device may be a read-only memory, random access memory, volatile memory, non-volatile memory, static memory, dynamic memory, flash memory, cache memory, and/or any device that stores digital information. Note that if the processing module includes more than one processing device, the processing devices may be centrally located (e.g., directly coupled together via a wired and/or wireless bus structure) or may be distributedly located (e.g., cloud computing via indirect coupling via a local area network and/or a wide area network). Further note that when the processing module implements one or more of its functions via a state machine, analog circuitry, digital circuitry, and/or logic circuitry, the memory and/or memory element storing the corresponding operational instructions may be embedded within, or external to, the circuitry comprising the state machine, analog circuitry, digital circuitry, and/or logic circuitry. Still further note that, the memory element stores, and the processing module executes, hard coded and/or operational instructions corresponding to at least some of the steps and/or functions illustrated in <figref idref="DRAWINGS">FIGS. 1-26B</figref>.</p>
<p id="p-0069" num="0068">Each of the user devices <b>12</b>-<b>14</b>, the DS processing unit <b>16</b>, the DS managing unit <b>18</b>, and the storage integrity processing unit <b>20</b> may be a portable computing device (e.g., a social networking device, a gaming device, a cell phone, a smart phone, a personal digital assistant, a digital music player, a digital video player, a laptop computer, a handheld computer, a video game controller, and/or any other portable device that includes a computing core) and/or a fixed computing device (e.g., a personal computer, a computer server, a cable set-top box, a satellite receiver, a television set, a printer, a fax machine, home entertainment equipment, a video game console, and/or any type of home or office computing equipment). Such a portable or fixed computing device includes a computing core <b>26</b> and one or more interfaces <b>30</b>, <b>32</b>, and/or <b>33</b>. An embodiment of the computing core <b>26</b> will be described with reference to <figref idref="DRAWINGS">FIG. 2</figref>.</p>
<p id="p-0070" num="0069">With respect to the interfaces, each of the interfaces <b>30</b>, <b>32</b>, and <b>33</b> includes software and/or hardware to support one or more communication links via the network <b>24</b> and/or directly. For example, interfaces <b>30</b> support a communication link (wired, wireless, direct, via a LAN, via the network <b>24</b>, etc.) between the first type of user device <b>14</b> and the DS processing unit <b>16</b>. As another example, DSN interface <b>32</b> supports a plurality of communication links via the network <b>24</b> between the DSN memory <b>22</b> and the DS processing unit <b>16</b>, the first type of user device <b>12</b>, and/or the storage integrity processing unit <b>20</b>. As yet another example, interface <b>33</b> supports a communication link between the DS managing unit <b>18</b> and any one of the other devices and/or units <b>12</b>, <b>14</b>, <b>16</b>, <b>20</b>, and/or <b>22</b> via the network <b>24</b>.</p>
<p id="p-0071" num="0070">In general and with respect to data storage, the system <b>10</b> supports three primary functions: distributed network data storage management, distributed data storage and retrieval, and data storage integrity verification. In accordance with these three primary functions, data can be distributedly stored in a plurality of physically different locations and subsequently retrieved in a reliable and secure manner regardless of failures of individual storage devices, failures of network equipment, the duration of storage, the amount of data being stored, attempts at hacking the data, etc.</p>
<p id="p-0072" num="0071">The DS managing unit <b>18</b> performs distributed network data storage management functions, which include establishing distributed data storage parameters, performing network operations, performing network administration, and/or performing network maintenance. The DS managing unit <b>18</b> establishes the distributed data storage parameters (e.g., allocation of virtual DSN memory space, distributed storage parameters, security parameters, billing information, user profile information, etc.) for one or more of the user devices <b>12</b>-<b>14</b> (e.g., established for individual devices, established for a user group of devices, established for public access by the user devices, etc.). For example, the DS managing unit <b>18</b> coordinates the creation of a vault (e.g., a virtual memory block) within the DSN memory <b>22</b> for a user device (for a group of devices, or for public access). The DS managing unit <b>18</b> also determines the distributed data storage parameters for the vault. In particular, the DS managing unit <b>18</b> determines a number of slices (e.g., the number that a data segment of a data file and/or data block is partitioned into for distributed storage) and a read threshold value (e.g., the minimum number of slices required to reconstruct the data segment).</p>
<p id="p-0073" num="0072">As another example, the DS managing module <b>18</b> creates and stores, locally or within the DSN memory <b>22</b>, user profile information. The user profile information includes one or more of authentication information, permissions, and/or the security parameters. The security parameters may include one or more of encryption/decryption scheme, one or more encryption keys, key generation scheme, and data encoding/decoding scheme.</p>
<p id="p-0074" num="0073">As yet another example, the DS managing unit <b>18</b> creates billing information for a particular user, user group, vault access, public vault access, etc. For instance, the DS managing unit <b>18</b> tracks the number of times user accesses a private vault and/or public vaults, which can be used to generate a per-access bill. In another instance, the DS managing unit <b>18</b> tracks the amount of data stored and/or retrieved by a user device and/or a user group, which can be used to generate a per-data-amount bill.</p>
<p id="p-0075" num="0074">The DS managing unit <b>18</b> also performs network operations, network administration, and/or network maintenance. As at least part of performing the network operations and/or administration, the DS managing unit <b>18</b> monitors performance of the devices and/or units of the system <b>10</b> for potential failures, determines the devices and/or unit's activation status, determines the devices' and/or units' loading, and any other system level operation that affects the performance level of the system <b>10</b>. For example, the DS managing unit <b>18</b> receives and aggregates network management alarms, alerts, errors, status information, performance information, and messages from the devices <b>12</b>-<b>14</b> and/or the units <b>16</b>, <b>20</b>, <b>22</b>. For example, the DS managing unit <b>18</b> receives a simple network management protocol (SNMP) message regarding the status of the DS processing unit <b>16</b>.</p>
<p id="p-0076" num="0075">The DS managing unit <b>18</b> performs the network maintenance by identifying equipment within the system <b>10</b> that needs replacing, upgrading, repairing, and/or expanding. For example, the DS managing unit <b>18</b> determines that the DSN memory <b>22</b> needs more DS units <b>36</b> or that one or more of the DS units <b>36</b> needs updating.</p>
<p id="p-0077" num="0076">The second primary function (i.e., distributed data storage and retrieval) begins and ends with a user device <b>12</b>-<b>14</b>. For instance, if a second type of user device <b>14</b> has a data file <b>38</b> and/or data block <b>40</b> to store in the DSN memory <b>22</b>, it send the data file <b>38</b> and/or data block <b>40</b> to the DS processing unit <b>16</b> via its interface <b>30</b>. As will be described in greater detail with reference to <figref idref="DRAWINGS">FIG. 2</figref>, the interface <b>30</b> functions to mimic a conventional operating system (OS) file system interface (e.g., network file system (NFS), flash file system (FFS), disk file system (DFS), file transfer protocol (FTP), web-based distributed authoring and versioning (WebDAV), etc.) and/or a block memory interface (e.g., small computer system interface (SCSI), internet small computer system interface (iSCSI), etc.). In addition, the interface <b>30</b> may attach a user identification code (ID) to the data file <b>38</b> and/or data block <b>40</b>.</p>
<p id="p-0078" num="0077">The DS processing unit <b>16</b> receives the data file <b>38</b> and/or data block <b>40</b> via its interface <b>30</b> and performs a distributed storage (DS) process <b>34</b> thereon (e.g., an error coding dispersal storage function). The DS processing <b>34</b> begins by partitioning the data file <b>38</b> and/or data block <b>40</b> into one or more data segments, which is represented as Y data segments. For example, the DS processing <b>34</b> may partition the data file <b>38</b> and/or data block <b>40</b> into a fixed byte size segment (e.g., 2<sup>1 </sup>to 2<sup>n </sup>bytes, where n=&#x3e;2) or a variable byte size (e.g., change byte size from segment to segment, or from groups of segments to groups of segments, etc.).</p>
<p id="p-0079" num="0078">For each of the Y data segments, the DS processing <b>34</b> error encodes (e.g., forward error correction (FEC), information dispersal algorithm, or error correction coding) and slices (or slices then error encodes) the data segment into a plurality of error coded (EC) data slices <b>42</b>-<b>48</b>, which is represented as X slices per data segment. The number of slices (X) per segment, which corresponds to a number of pillars n, is set in accordance with the distributed data storage parameters and the error coding scheme. For example, if a Reed-Solomon (or other FEC scheme) is used in an n/k system, then a data segment is divided into n slices, where k number of slices is needed to reconstruct the original data (i.e., k is the threshold). As a few specific examples, the n/k factor may be 5/3; 6/4; 8/6; 8/5; 16/10.</p>
<p id="p-0080" num="0079">For each slice <b>42</b>-<b>48</b>, the DS processing unit <b>16</b> creates a unique slice name and appends it to the corresponding slice <b>42</b>-<b>48</b>. The slice name includes universal DSN memory addressing routing information (e.g., virtual memory addresses in the DSN memory <b>22</b>) and user-specific information (e.g., user ID, file name, data block identifier, etc.).</p>
<p id="p-0081" num="0080">The DS processing unit <b>16</b> transmits the plurality of EC slices <b>42</b>-<b>48</b> to a plurality of DS units <b>36</b> of the DSN memory <b>22</b> via the DSN interface <b>32</b> and the network <b>24</b>. The DSN interface <b>32</b> formats each of the slices for transmission via the network <b>24</b>. For example, the DSN interface <b>32</b> may utilize an internet protocol (e.g., TCP/IP, etc.) to packetize the slices <b>42</b>-<b>48</b> for transmission via the network <b>24</b>.</p>
<p id="p-0082" num="0081">The number of DS units <b>36</b> receiving the slices <b>42</b>-<b>48</b> is dependent on the distributed data storage parameters established by the DS managing unit <b>18</b>. For example, the DS managing unit <b>18</b> may indicate that each slice is to be stored in a different DS unit <b>36</b>. As another example, the DS managing unit <b>18</b> may indicate that like slice numbers of different data segments are to be stored in the same DS unit <b>36</b>. For example, the first slice of each of the data segments is to be stored in a first DS unit <b>36</b>, the second slice of each of the data segments is to be stored in a second DS unit <b>36</b>, etc. In this manner, the data is encoded and distributedly stored at physically diverse locations to improved data storage integrity and security. Further examples of encoding the data segments will be provided with reference to one or more of <figref idref="DRAWINGS">FIGS. 2-26B</figref>.</p>
<p id="p-0083" num="0082">Each DS unit <b>36</b> that receives a slice <b>42</b>-<b>48</b> for storage translates the virtual DSN memory address of the slice into a local physical address for storage. Accordingly, each DS unit <b>36</b> maintains a virtual to physical memory mapping to assist in the storage and retrieval of data.</p>
<p id="p-0084" num="0083">The first type of user device <b>12</b> performs a similar function to store data in the DSN memory <b>22</b> with the exception that it includes the DS processing. As such, the device <b>12</b> encodes and slices the data file and/or data block it has to store. The device then transmits the slices <b>11</b> to the DSN memory via its DSN interface <b>32</b> and the network <b>24</b>.</p>
<p id="p-0085" num="0084">For a second type of user device <b>14</b> to retrieve a data file or data block from memory, it issues a read command via its interface <b>30</b> to the DS processing unit <b>16</b>. The DS processing unit <b>16</b> performs the DS processing <b>34</b> to identify the DS units <b>36</b> storing the slices of the data file and/or data block based on the read command. The DS processing unit <b>16</b> may also communicate with the DS managing unit <b>18</b> to verify that the user device <b>14</b> is authorized to access the requested data.</p>
<p id="p-0086" num="0085">Assuming that the user device is authorized to access the requested data, the DS processing unit <b>16</b> issues slice read commands to at least a threshold number of the DS units <b>36</b> storing the requested data (e.g., to at least 10 DS units for a 16/10 error coding scheme). Each of the DS units <b>36</b> receiving the slice read command, verifies the command, accesses its virtual to physical memory mapping, retrieves the requested slice, or slices, and transmits it to the DS processing unit <b>16</b>.</p>
<p id="p-0087" num="0086">Once the DS processing unit <b>16</b> has received a read threshold number of slices for a data segment, it performs an error decoding function and de-slicing to reconstruct the data segment. When Y number of data segments has been reconstructed, the DS processing unit <b>16</b> provides the data file <b>38</b> and/or data block <b>40</b> to the user device <b>14</b>. Note that the first type of user device <b>12</b> performs a similar process to retrieve a data file and/or data block.</p>
<p id="p-0088" num="0087">The storage integrity processing unit <b>20</b> performs the third primary function of data storage integrity verification. In general, the storage integrity processing unit <b>20</b> periodically retrieves slices <b>45</b>, and/or slice names, of a data file or data block of a user device to verify that one or more slices have not been corrupted or lost (e.g., the DS unit failed). The retrieval process mimics the read process previously described.</p>
<p id="p-0089" num="0088">If the storage integrity processing unit <b>20</b> determines that one or more slices is corrupted or lost, it rebuilds the corrupted or lost slice(s) in accordance with the error coding scheme. The storage integrity processing unit <b>20</b> stores the rebuild slice, or slices, in the appropriate DS unit(s) <b>36</b> in a manner that mimics the write process previously described.</p>
<p id="p-0090" num="0089"><figref idref="DRAWINGS">FIG. 2</figref> is a schematic block diagram of an embodiment of a computing core <b>26</b> that includes a processing module <b>50</b>, a memory controller <b>52</b>, main memory <b>54</b>, a video graphics processing unit <b>55</b>, an input/output (IO) controller <b>56</b>, a peripheral component interconnect (PCI) interface <b>58</b>, at least one IO device interface module <b>62</b>, a read only memory (ROM) basic input output system (BIOS) <b>64</b>, and one or more memory interface modules. The memory interface module(s) includes one or more of a universal serial bus (USB) interface module <b>66</b>, a host bus adapter (HBA) interface module <b>68</b>, a network interface module <b>70</b>, a flash interface module <b>72</b>, a hard drive interface module <b>74</b>, and a DSN interface module <b>76</b>. Note the DSN interface module <b>76</b> and/or the network interface module <b>70</b> may function as the interface <b>30</b> of the user device <b>14</b> of <figref idref="DRAWINGS">FIG. 1</figref>. Further note that the IO device interface module <b>62</b> and/or the memory interface modules may be collectively or individually referred to as IO ports.</p>
<p id="p-0091" num="0090">The processing module <b>50</b> may be a single processing device or a plurality of processing devices. Such a processing device may be a microprocessor, micro-controller, digital signal processor, microcomputer, central processing unit, field programmable gate array, programmable logic device, state machine, logic circuitry, analog circuitry, digital circuitry, and/or any device that manipulates signals (analog and/or digital) based on hard coding of the circuitry and/or operational instructions. The processing module <b>50</b> may have an associated memory and/or memory element, which may be a single memory device, a plurality of memory devices, and/or embedded circuitry of the processing module <b>50</b>. Such a memory device may be a read-only memory, random access memory, volatile memory, non-volatile memory, static memory, dynamic memory, flash memory, cache memory, and/or any device that stores digital information. Note that if the processing module <b>50</b> includes more than one processing device, the processing devices may be centrally located (e.g., directly coupled together via a wired and/or wireless bus structure) or may be distributedly located (e.g., cloud computing via indirect coupling via a local area network and/or a wide area network). Further note that when the processing module <b>50</b> implements one or more of its functions via a state machine, analog circuitry, digital circuitry, and/or logic circuitry, the memory and/or memory element storing the corresponding operational instructions may be embedded within, or external to, the circuitry comprising the state machine, analog circuitry, digital circuitry, and/or logic circuitry. Still further note that, the memory element stores, and the processing module <b>50</b> executes, hard coded and/or operational instructions corresponding to at least some of the steps and/or functions illustrated in <figref idref="DRAWINGS">FIGS. 1-26B</figref>.</p>
<p id="p-0092" num="0091"><figref idref="DRAWINGS">FIG. 3</figref> is a schematic block diagram of an embodiment of a dispersed storage (DS) processing module <b>34</b> of user device <b>12</b> and/or of the DS processing unit <b>16</b>. The DS processing module <b>34</b> includes a gateway module <b>78</b>, an access module <b>80</b>, a grid module <b>82</b>, and a storage module <b>84</b>. The DS processing module <b>34</b> may also include an interface <b>30</b> and the DSnet interface <b>32</b> or the interfaces <b>68</b> and/or <b>70</b> may be part of user <b>12</b> or of the DS processing unit <b>14</b>. The DS processing module <b>34</b> may further include a bypass/feedback path between the storage module <b>84</b> to the gateway module <b>78</b>. Note that the modules <b>78</b>-<b>84</b> of the DS processing module <b>34</b> may be in a single unit or distributed across multiple units.</p>
<p id="p-0093" num="0092">In an example of storing data, the gateway module <b>78</b> receives an incoming data object that includes a user ID field <b>86</b>, an object name field <b>88</b>, and the data field <b>40</b> and may also receive corresponding information that includes a process identifier (e.g., an internal process/application ID), metadata, a file system directory, a block number, a transaction message, a user device identity (ID), a data object identifier, a source name, and/or user information. The gateway module <b>78</b> authenticates the user associated with the data object by verifying the user ID <b>86</b> with the managing unit <b>18</b> and/or another authenticating unit.</p>
<p id="p-0094" num="0093">When the user is authenticated, the gateway module <b>78</b> obtains user information from the management unit <b>18</b>, the user device, and/or the other authenticating unit. The user information includes a vault identifier, operational parameters, and user attributes (e.g., user data, billing information, etc.). A vault identifier identifies a vault, which is a virtual memory space that maps to a set of DS storage units <b>36</b>. For example, vault <b>1</b> (i.e., user <b>1</b>'s DSN memory space) includes eight DS storage units (X=8 wide) and vault <b>2</b> (i.e., user <b>2</b>'s DSN memory space) includes sixteen DS storage units (X=16 wide). The operational parameters may include an error coding algorithm, the width n (number of pillars X or slices per segment for this vault), a read threshold T, a write threshold, an encryption algorithm, a slicing parameter, a compression algorithm, an integrity check method, caching settings, parallelism settings, and/or other parameters that may be used to access the DSN memory layer.</p>
<p id="p-0095" num="0094">The gateway module <b>78</b> uses the user information to assign a source name <b>35</b> to the data. For instance, the gateway module <b>60</b> determines the source name <b>35</b> of the data object <b>40</b> based on the vault identifier and the data object. For example, the source name may contain a file identifier (ID), a vault generation number, a reserved field, and a vault identifier (ID). As another example, the gateway module <b>78</b> may generate the file ID based on a hash function of the data object <b>40</b>. Note that the gateway module <b>78</b> may also perform message conversion, protocol conversion, electrical conversion, optical conversion, access control, user identification, user information retrieval, traffic monitoring, statistics generation, configuration, management, and/or source name determination.</p>
<p id="p-0096" num="0095">The access module <b>80</b> receives the data object <b>40</b> and creates a series of data segments <b>1</b> through Y <b>90</b>-<b>92</b> in accordance with a data storage protocol (e.g., file storage system, a block storage system, and/or an aggregated block storage system). The number of segments Y may be chosen or randomly assigned based on a selected segment size and the size of the data object. For example, if the number of segments is chosen to be a fixed number, then the size of the segments varies as a function of the size of the data object. For instance, if the data object is an image file of 4,194,304 eight bit bytes (e.g., 33,554,432 bits) and the number of segments Y=131,072, then each segment is 256 bits or 32 bytes. As another example, if segment sized is fixed, then the number of segments Y varies based on the size of data object. For instance, if the data object is an image file of 4,194,304 bytes and the fixed size of each segment is 4,096 bytes, the then number of segments Y=1,024. Note that each segment is associated with the same source name.</p>
<p id="p-0097" num="0096">The grid module <b>82</b> receives the data segments and may manipulate (e.g., compression, encryption, cyclic redundancy check (CRC), etc.) each of the data segments before performing an error coding function of the error coding dispersal storage function to produce a pre-manipulated data segment. After manipulating a data segment, if applicable, the grid module <b>82</b> error encodes (e.g., Reed-Solomon, Convolution encoding, Trellis encoding, etc.) the data segment or manipulated data segment into X error coded data slices <b>42</b>-<b>44</b>.</p>
<p id="p-0098" num="0097">The value X, or the number of pillars (e.g., X=16), is chosen as a parameter of the error coding dispersal storage function. Other parameters of the error coding dispersal function include a read threshold T, a write threshold W, etc. The read threshold (e.g., T=10, when X=16) corresponds to the minimum number of error-free error coded data slices required to reconstruct the data segment. In other words, the DS processing module <b>34</b> can compensate for X-T (e.g., 16&#x2212;10=6) missing error coded data slices per data segment. The write threshold W corresponds to a minimum number of DS storage units that acknowledge proper storage of their respective data slices before the DS processing module indicates proper storage of the encoded data segment. Note that the write threshold is greater than or equal to the read threshold for a given number of pillars (X).</p>
<p id="p-0099" num="0098">For each data slice of a data segment, the grid module <b>82</b> generates a unique slice name <b>37</b> and attaches it thereto. The slice name <b>37</b> includes a universal routing information field and a vault specific field and may be 48 bytes (e.g., 24 bytes for each of the universal routing information field and the vault specific field). As illustrated, the universal routing information field includes a slice index, a vault ID, a vault generation, and a reserved field. The slice index is based on the pillar number and the vault ID and, as such, is unique for each pillar (e.g., slices of the same pillar for the same vault for any segment will share the same slice index). The vault specific field includes a data name, which includes a file ID and a segment number (e.g., a sequential numbering of data segments <b>1</b>-Y of a simple data object or a data block number).</p>
<p id="p-0100" num="0099">Prior to outputting the error coded data slices of a data segment, the grid module may perform post-slice manipulation on the slices. If enabled, the manipulation includes slice level compression, encryption, CRC, addressing, tagging, and/or other manipulation to improve the effectiveness of the computing system.</p>
<p id="p-0101" num="0100">When the error coded data slices of a data segment are ready to be outputted, the grid module <b>82</b> determines which of the DS storage units <b>36</b> will store the EC data slices based on a dispersed storage memory mapping associated with the user's vault and/or DS storage unit attributes. The DS storage unit attributes may include availability, self-selection, performance history, link speed, link latency, ownership, available DSN memory, domain, cost, a prioritization scheme, a centralized selection message from another source, a lookup table, data ownership, and/or any other factor to optimize the operation of the computing system. Note that the number of DS storage units <b>36</b> is equal to or greater than the number of pillars (e.g., X) so that no more than one error coded data slice of the same data segment is stored on the same DS storage unit <b>36</b>. Further note that EC data slices of the same pillar number but of different segments (e.g., EC data slice <b>1</b> of data segment <b>1</b> and EC data slice <b>1</b> of data segment <b>2</b>) may be stored on the same or different DS storage units <b>36</b>.</p>
<p id="p-0102" num="0101">The storage module <b>84</b> performs an integrity check on the outbound encoded data slices and, when successful, identifies a plurality of DS storage units based on information provided by the grid module <b>82</b>. The storage module <b>84</b> then outputs the encoded data slices <b>1</b> through X of each segment <b>1</b> through Y to the DS storage units <b>36</b>. Each of the DS storage units <b>36</b> stores its EC data slice(s) and maintains a local virtual DSN address to physical location table to convert the virtual DSN address of the EC data slice(s) into physical storage addresses.</p>
<p id="p-0103" num="0102">In an example of a read operation, the user device <b>12</b> and/or <b>14</b> sends a read request to the DS processing unit <b>14</b>, which authenticates the request. When the request is authentic, the DS processing unit <b>14</b> sends a read message to each of the DS storage units <b>36</b> storing slices of the data object being read. The slices are received via the DSnet interface <b>32</b> and processed by the storage module <b>84</b>, which performs a parity check and provides the slices to the grid module <b>82</b> when the parity check was successful. The grid module <b>82</b> decodes the slices in accordance with the error coding dispersal storage function to reconstruct the data segment. The access module <b>80</b> reconstructs the data object from the data segments and the gateway module <b>78</b> formats the data object for transmission to the user device.</p>
<p id="p-0104" num="0103"><figref idref="DRAWINGS">FIG. 4</figref> is a schematic block diagram of an embodiment of a grid module <b>82</b> that includes a control unit <b>73</b>, a pre-slice manipulator <b>75</b>, an encoder <b>77</b>, a slicer <b>79</b>, a post-slice manipulator <b>81</b>, a pre-slice de-manipulator <b>83</b>, a decoder <b>85</b>, a de-slicer <b>87</b>, and/or a post-slice de-manipulator <b>89</b>. Note that the control unit <b>73</b> may be partially or completely external to the grid module <b>82</b>. For example, the control unit <b>73</b> may be part of the computing core at a remote location, part of a user device, part of the DS managing unit <b>18</b>, or distributed amongst one or more DS storage units.</p>
<p id="p-0105" num="0104">In an example of write operation, the pre-slice manipulator <b>75</b> receives a data segment <b>90</b>-<b>92</b> and a write instruction from an authorized user device. The pre-slice manipulator <b>75</b> determines if pre-manipulation of the data segment <b>90</b>-<b>92</b> is required and, if so, what type. The pre-slice manipulator <b>75</b> may make the determination independently or based on instructions from the control unit <b>73</b>, where the determination is based on a computing system-wide predetermination, a table lookup, vault parameters associated with the user identification, the type of data, security requirements, available DSN memory, performance requirements, and/or other metadata.</p>
<p id="p-0106" num="0105">Once a positive determination is made, the pre-slice manipulator <b>75</b> manipulates the data segment <b>90</b>-<b>92</b> in accordance with the type of manipulation. For example, the type of manipulation may be compression (e.g., Lempel-Ziv-Welch, Huffman, Golomb, fractal, wavelet, etc.), signatures (e.g., Digital Signature Algorithm (DSA), Elliptic Curve DSA, Secure Hash Algorithm, etc.), watermarking, tagging, encryption (e.g., Data Encryption Standard, Advanced Encryption Standard, etc.), adding metadata (e.g., time/date stamping, user information, file type, etc.), cyclic redundancy check (e.g., CRC32), and/or other data manipulations to produce the pre-manipulated data segment.</p>
<p id="p-0107" num="0106">The encoder <b>77</b> encodes the pre-manipulated data segment <b>92</b> using a forward error correction (FEC) encoder (and/or other type of erasure coding and/or error coding) to produce an encoded data segment <b>94</b>. The encoder <b>77</b> determines which forward error correction algorithm to use based on a predetermination associated with the user's vault, a time based algorithm, user direction, DS managing unit direction, control unit direction, as a function of the data type, as a function of the data segment <b>92</b> metadata, and/or any other factor to determine algorithm type. The forward error correction algorithm may be Golay, Multidimensional parity, Reed-Solomon, Hamming, Bose Ray Chauduri Hocquenghem (BCH), Cauchy-Reed-Solomon, or any other FEC encoder. Note that the encoder <b>77</b> may use a different encoding algorithm for each data segment <b>92</b>, the same encoding algorithm for the data segments <b>92</b> of a data object, or a combination thereof.</p>
<p id="p-0108" num="0107">The encoded data segment <b>94</b> is of greater size than the data segment <b>92</b> by the overhead rate of the encoding algorithm by a factor of X/T, where X is the width or number of slices, and T is the read threshold. In this regard, the corresponding decoding process can accommodate at most X-T missing EC data slices and still recreate the data segment <b>92</b>. For example, if X=16 and T=10, then the data segment <b>92</b> will be recoverable as long as 10 or more EC data slices per segment are not corrupted.</p>
<p id="p-0109" num="0108">The slicer <b>79</b> transforms the encoded data segment <b>94</b> into EC data slices in accordance with the slicing parameter from the vault for this user and/or data segment <b>92</b>. For example, if the slicing parameter is X=16, then the slicer <b>79</b> slices each encoded data segment <b>94</b> into 16 encoded slices.</p>
<p id="p-0110" num="0109">The post-slice manipulator <b>81</b> performs, if enabled, post-manipulation on the encoded slices to produce the EC data slices. If enabled, the post-slice manipulator <b>81</b> determines the type of post-manipulation, which may be based on a computing system-wide predetermination, parameters in the vault for this user, a table lookup, the user identification, the type of data, security requirements, available DSN memory, performance requirements, control unit directed, and/or other metadata. Note that the type of post-slice manipulation may include slice level compression, signatures, encryption, CRC, addressing, watermarking, tagging, adding metadata, and/or other manipulation to improve the effectiveness of the computing system.</p>
<p id="p-0111" num="0110">In an example of a read operation, the post-slice de-manipulator <b>89</b> receives at least a read threshold number of EC data slices and performs the inverse function of the post-slice manipulator <b>81</b> to produce a plurality of encoded slices. The de-slicer <b>87</b> de-slices the encoded slices to produce an encoded data segment <b>94</b>. The decoder <b>85</b> performs the inverse function of the encoder <b>77</b> to recapture the data segment <b>90</b>-<b>92</b>. The pre-slice de-manipulator <b>83</b> performs the inverse function of the pre-slice manipulator <b>75</b> to recapture the data segment <b>90</b>-<b>92</b>.</p>
<p id="p-0112" num="0111"><figref idref="DRAWINGS">FIG. 5</figref> is a diagram of an example of slicing an encoded data segment <b>94</b> by the slicer <b>79</b>. In this example, the encoded data segment <b>94</b> includes thirty-two bits, but may include more or less bits. The slicer <b>79</b> disperses the bits of the encoded data segment <b>94</b> across the EC data slices in a pattern as shown. As such, each EC data slice does not include consecutive bits of the data segment <b>94</b> reducing the impact of consecutive bit failures on data recovery. For example, if EC data slice <b>2</b> (which includes bits <b>1</b>, <b>5</b>, <b>9</b>, <b>13</b>, <b>17</b>, <b>25</b>, and <b>29</b>) is unavailable (e.g., lost, inaccessible, or corrupted), the data segment can be reconstructed from the other EC data slices (e.g., <b>1</b>, <b>3</b> and <b>4</b> for a read threshold of 3 and a width of 4).</p>
<p id="p-0113" num="0112"><figref idref="DRAWINGS">FIG. 6A</figref> is a schematic block diagram of another embodiment of a computing system that includes a user device <b>12</b> and a dispersed storage (DS) unit <b>36</b>. The user device <b>12</b> includes a computing core <b>26</b> and a dispersed storage network (DSN) interface <b>32</b>. The computing core <b>26</b> includes a DS processing <b>34</b>. The DS unit <b>36</b> includes a computing core <b>26</b> and the DSN interface <b>32</b>. The user device <b>12</b> and the DS unit <b>36</b> are operably coupled via a local area network, a wide area network, the Internet, etcetera to enable the DSN interface <b>32</b> of the user device <b>12</b> and of the DS unit <b>36</b> to communicate. The DSN interface <b>32</b> of the user device <b>12</b> and/or of the DS unit <b>36</b> generates one or more DSN frames to communicate a message <b>102</b> therebetween. The DSN frame includes a protocol header and may further include a payload. A format of the DSN frame is discussed in greater detail with reference to <figref idref="DRAWINGS">FIG. 6B</figref>.</p>
<p id="p-0114" num="0113">A message <b>102</b> may be a request message <b>104</b>, <b>108</b> (e.g., read, write, checked write, write commit, write rollback, write finalize, write undo, check request, list request, and/or list digest request) or a response message <b>106</b>, <b>110</b>. For example, user device <b>12</b>, as a requester, generates a request message <b>104</b>, <b>108</b> and sends it to DS unit <b>38</b>. DS unit <b>38</b>, as a responder, generates a response message <b>106</b>, <b>110</b> and sends it to user device <b>12</b>. In this example, the DS processing <b>34</b> of the user device <b>12</b> (e.g., the requester) generates a request and outputs the request to the DSN interface <b>32</b> of the user device <b>12</b>. The DSN interface <b>32</b> of the user device <b>12</b> formats the request into the request message <b>104</b> (which includes a DSN frame or DSN frames) and sends it to the DS unit <b>36</b> (e.g., the responder). The DSN interface of the DS unit <b>36</b> extracts the request from the request message <b>104</b> and provides to the computing core <b>26</b>, which generates a response thereto. The computing core <b>26</b> provides the response to the DSN interface <b>32</b> of the DS unit <b>36</b>, which formats the response into the response message <b>106</b> (which includes one or more DSN frames) and sends it to user device <b>12</b>.</p>
<p id="p-0115" num="0114">Requester and responder roles may change depending on which device of the system initiates the request/response message pair. For example, DS unit <b>36</b> (e.g., the requester) generates a request message <b>108</b> and sends it to the user device <b>12</b> (e.g., the responder). The user device <b>12</b> generates a response message <b>110</b> and sends it to the DS unit <b>36</b>. Various modules and/or units of the system may utilize the request/response message pairs. In addition, a request may send a request message <b>104</b>, <b>108</b> to multiple responders in a series and/or parallel manner as will be discussed in greater detail with reference to <figref idref="DRAWINGS">FIG. 6C</figref>.</p>
<p id="p-0116" num="0115"><figref idref="DRAWINGS">FIG. 6B</figref> is a diagram of an embodiment of a response or request message formatted as a dispersed storage network (DSN) frame. The DSN frame includes a protocol header <b>112</b> and may further include a payload <b>114</b>. The protocol header <b>112</b> includes information to request action and/or provide status. The payload <b>114</b> includes M payload bytes of supplemental information utilized in further action and/or in a response related to the information in the protocol header <b>112</b>.</p>
<p id="p-0117" num="0116">In an example, the protocol header <b>112</b> includes one or more of a protocol class field <b>116</b>, a protocol class version field <b>118</b>, an operation code field <b>120</b>, a request/response field <b>122</b>, a request number field <b>124</b>, and a payload length field <b>126</b>. The protocol class field <b>116</b> contains a number of bytes to specify a sub-protocol identifier to enable a plurality of families of protocols to be utilized. For example, the protocol class field <b>116</b> is one byte in length and includes a protocol class value of 01 hex to signify a first protocol class. The protocol class version field <b>118</b> contains a number of bytes to specify a sub-protocol version associated with the protocol class <b>116</b> enabling a plurality of versions of protocols to be utilized with each protocol class. For example, the protocol class version field is one byte in length and includes a protocol class version value of 01 hex to signify a first protocol class version.</p>
<p id="p-0118" num="0117">The operation code field <b>120</b> contains a number of bytes to specify an operation code associated with a requested action providing message interpretation instructions to a message target. For example, the operation code field is one byte in length and includes an operation code value of a read operation. The request/response field <b>122</b> contains a number of bytes to specify whether the message is a request message or a response message. For example, the request/response field <b>122</b> is one byte in length and a one-bit flag of the byte (e.g., a most significant bit of the byte) indicates a response/reserve value. For example, a flag value of zero indicates that the message is a request message and a flag value of one indicates that the message is a response message.</p>
<p id="p-0119" num="0118">The request number field <b>124</b> contains a number of bytes to include a request number value to associate at least one request message with at least one response message. The request number value may be produced as at least one of a random number, a random number plus a predetermined number, and based on a previous request number. For example, the request number field <b>124</b> is four bytes in length and includes a request number value of 457 to associate a read request message with a read response message when the previous request number value is 456. As another example, the request number field <b>124</b> includes a request number value of 5,358 to associate a read response message with a read request message when a request number value of 5,358 is extracted from the read request message.</p>
<p id="p-0120" num="0119">The payload length field <b>126</b> contains a number of bytes to include a payload length value to indicate a number of bytes contained in the payload <b>114</b>. The payload length value may be determined based on one or more of counting bytes of the payload <b>114</b>, utilizing a predetermined number based on one or more of the protocol class value, the protocol class version value, the operation code value, and the response/reserved value. For example, the payload length field <b>126</b> is four bytes in length and includes a payload length value of zero when the operation code value is associated with a write rollback response operation and the response/reserved value is associated with a response message. As another example, the payload length field <b>126</b> includes a payload length value of 104 when the operation code value is associated with a read request message and a predetermined formula of 48n+8 associated with the read request message is utilized (e.g., where n=2 corresponding to 2 slice names).</p>
<p id="p-0121" num="0120">The payload <b>114</b> may be organized into one or more payload fields in accordance with one or more of the values of the protocol class field <b>116</b>, protocol class version field <b>118</b>, the operation code field <b>120</b>, and the request/response field <b>122</b>. The one or more payload fields include payload bytes <b>0</b>-M, wherein values of the payload bytes <b>0</b>-M are established in accordance with the one or more payload fields. For example, the one or more payload fields include slice name fields when the payload <b>114</b> is associated with a read request DSN frame. As another example, the one or more payload fields include one or more encoded data slices when the payload <b>114</b> is associated with a read response DSN frame. Various methods to generate the fields of the DSN frame and/or to generate values for the fields are discussed in greater detail with reference to <figref idref="DRAWINGS">FIGS. 6D-26B</figref>.</p>
<p id="p-0122" num="0121"><figref idref="DRAWINGS">FIG. 6C</figref> is a schematic block diagram of another embodiment of a computing system that includes a dispersed storage (DS) processing unit <b>16</b> and dispersed storage network (DSN) memory <b>22</b> operable to process a plurality of payload scenarios A-D. The DS processing unit <b>16</b> includes a DS processing <b>34</b> and a DSN interface <b>32</b>. The DSN memory <b>22</b> includes DS units <b>1</b>-<b>4</b> when dispersed storage error coding parameters include a pillar width of 4. The DS processing unit <b>16</b> generates one or more request DSN frames (e.g., a common DSN frame for the DS units or an individual frame for each DS unit) wherein each DSN frame includes a payload. The DS processing unit <b>16</b> sends the one or more request DSN frames to DS units <b>1</b>-<b>4</b>. For example, the DS processing unit <b>16</b> sends a first DSN frame that includes a payload <b>105</b> to DS unit <b>1</b>, sends a second DSN frame that includes a payload <b>107</b> to DS unit <b>2</b>, sends a third DSN frame that includes a payload <b>107</b> to DS unit <b>3</b>, and sends a fourth DSN frame that includes a payload <b>111</b> to DS unit <b>4</b>. Each payload <b>105</b>-<b>111</b> may contain unique data or may contain the same data. As a specific example, the DS processing unit <b>16</b> produces a plurality of encoded data slices, generates one or more write request messages that include the plurality of encoded data slices within one or more write request DSN frames, and sends the one or more write request DSN frames to the DSN memory <b>22</b> to facilitate storing the plurality of encoded data slices in the DS units <b>1</b>-<b>4</b>.</p>
<p id="p-0123" num="0122">In an example of operation, the DS processing <b>34</b> dispersed storage error encodes data utilizing the dispersed storage error coding parameters to produce 3 sets of encoded data slices <b>1</b>_<b>1</b> through <b>3</b>_<b>4</b> (e.g., set one includes slices <b>1</b>-<b>1</b> through <b>1</b>_<b>4</b>). The DS processing <b>34</b> outputs a write request that includes three sets of encoded data slices to the DSN interface <b>32</b>. The DSN interface <b>32</b> generates at least one write request DSN frame that includes a payload section, which includes an encoded data slice(s) of the three sets of encoded data slices. The DSN interface <b>32</b> sends the write request DSN frame(s) to the DS units <b>1</b>-<b>4</b>. For instance, the DS interface <b>32</b> sends the write request DSN frame that includes payload <b>105</b> to DS unit <b>1</b>; sends the write request DSN frame that includes payload <b>107</b> to DS unit <b>2</b>; sends the write request DSN frame that includes payload <b>109</b> to DS unit <b>3</b>: and sends the write request DSN frame that includes payload <b>111</b> to DS unit <b>4</b>.</p>
<p id="p-0124" num="0123">The DS processing unit <b>16</b> selects an encoded data slice to include in each of the payloads <b>105</b>-<b>111</b> in one of a variety of ways. For example, the DS processing unit <b>16</b> selects slices having the same pillar number to include in a payload (e.g., pillar one slices of the sets of encoded data slices are included in the payload <b>105</b>). As another example, DS processing unit <b>16</b> selects the encoded data slices of a set of encoded data slices to include in a payload. As yet another example, the DS processing unit <b>16</b> selects a slice to include in the payload. As a further example, the DS processing unit <b>16</b> selects the encoded data slices of the three sets of encoded data slices to include in the payload.</p>
<p id="p-0125" num="0124">The payload scenarios A-D represent example scenarios indicating which encoded data slices of the three sets of encoded data slices are included in the payloads <b>105</b>-<b>107</b>. Payload scenario A represents a scenario where the DS processing unit <b>16</b> selects all slices of the corresponding pillar of the three sets of encoded data slices per payload. For example, the DS processing unit <b>16</b> selects slices <b>1</b>_<b>1</b>, <b>2</b>_<b>1</b>, and <b>3</b>_<b>1</b> of pillar <b>1</b> to be included in payload <b>105</b>, slices <b>1</b>_<b>2</b>, <b>2</b>_<b>2</b>, and <b>3</b>_<b>2</b> of pillar <b>2</b> to be included in payload <b>107</b>, slices <b>1</b>_<b>3</b>, <b>2</b>_<b>3</b>, and <b>3</b>_<b>3</b> of pillar <b>3</b> to be included in payload <b>109</b>, and slices <b>1</b>_<b>4</b>, <b>2</b>_<b>4</b>, and <b>3</b>_<b>4</b> of pillar <b>4</b> to be included in payload <b>111</b>. Payload scenario B represents a scenario where the DS processing unit <b>16</b> selects one slice of the corresponding pillar of the three sets of encoded data slices per payload. For example, the DS processing unit <b>16</b> selects slice <b>1</b>_<b>1</b> of pillar <b>1</b> to be included in payload <b>105</b>, slice <b>1</b>_<b>2</b> of pillar <b>2</b> to be included in payload <b>107</b>, slice <b>1</b>_<b>3</b> of pillar <b>3</b> to be included in payload <b>109</b>, and slice <b>1</b>_<b>4</b> of pillar <b>4</b> to be included in payload <b>111</b>.</p>
<p id="p-0126" num="0125">Payload scenario C represents a scenario where the DS processing unit <b>16</b> selects all encoded data slices of the three sets of encoded data slices for all payloads <b>105</b>-<b>111</b>. For example, the DSN interface <b>32</b> selects slices <b>1</b>_<b>1</b>, <b>1</b>_<b>2</b>, <b>1</b>_<b>3</b>, <b>1</b>_<b>4</b>, <b>2</b>_<b>1</b>, <b>2</b>_<b>2</b>, <b>2</b>_<b>3</b>, <b>2</b>_<b>4</b>, <b>3</b>_<b>1</b>, <b>3</b>_<b>2</b>, <b>3</b>_<b>3</b>, and <b>3</b>_<b>4</b> to be included in each payload of payloads <b>105</b>-<b>111</b>. Payload scenario D represents a scenario where the DS processing unit <b>16</b> selects one of encoded data slices of the three sets of encoded data slices for all payloads <b>105</b>-<b>111</b>. For example, the DSN interface <b>32</b> selects slices <b>1</b>_<b>1</b>, <b>1</b>_<b>2</b>, <b>1</b>_<b>3</b>, and <b>1</b>_<b>4</b> to be included in each payload of payloads <b>105</b>-<b>111</b>.</p>
<p id="p-0127" num="0126"><figref idref="DRAWINGS">FIG. 6D</figref> is a flowchart illustrating an example of generating a protocol header of a dispersed storage network (DSN) frame. The method begins at step <b>128</b> where a processing module generates values for a protocol class field, a protocol class version field, and an operation code (opcode) field based on an operational function being communicated by the DSN frame. The operational function includes at least one of a read operation, a check operation, a list range operation, a write operation, a checked write operation, a commit operation, a rollback operation, a finalize operation, an undo operation, and a list digest operation.</p>
<p id="p-0128" num="0127">The processing module generates a protocol class value for the protocol class field by at least one of: retrieving the protocol class value from a protocol class list based on the operational function, utilizing the protocol class value of a request DSN frame (e.g., a DSN frame that includes a request message) when the DSN frame is a response DSN frame (e.g., a DSN frame that includes a response message), retrieving the protocol class value from a support protocol class list, retrieving the protocol class value from a unit-module type protocol class list, and extracting the protocol class value from a negotiation result. For example, the processing module generates a protocol class value of 01 when the protocol class value of a corresponding read request DSN frame has value of 01 and the operational function is a read response.</p>
<p id="p-0129" num="0128">The method continues at step <b>130</b> where the processing module generates a protocol class version field. The processing module generates a protocol class version value for the protocol class version field by at least one of utilizing a most recent protocol class version value, retrieving the protocol class version value from a protocol class version list based on the operational function, utilizing the protocol class version value of a request DSN frame when the DSN frame is a response DSN frame, retrieving the protocol class version value from a support protocol class version list, retrieving the protocol class version value from a unit-module protocol class version list, and extracting the protocol class version value from a negotiation result. For example, the processing module generates a protocol class version value of 03 based on retrieving the most recent protocol class version value from the support protocol class version list. As another example, processing module initiates a negotiation sequence when a protocol class error message is received (e.g., indicating that a present protocol class value and/or a present protocol class version value is unacceptable). Such a negotiation sequence includes one or more of generating a supported protocol class message, outputting the supported protocol class message, receiving a message that includes a supported protocol class list indicating supported protocol classes and/or protocol class versions, selecting at least one of a supported protocol class value and a protocol class version value from the supported protocol class list, and utilizing the at least one of the supported protocol class value and the supported protocol class version value.</p>
<p id="p-0130" num="0129">The method continues at step <b>132</b> where the processing module generates an operation code field that includes an opcode value based on one or more of an operational function being communicated by the DSN frame, an opcode list, and a predetermination. For example, the processing module generates the operation code field to include an opcode value of 40 hex when the operational function being communicated by the DSN frame is a read request operation, the protocol class field value is 01, and the protocol class version field value is 03.</p>
<p id="p-0131" num="0130">The method continues at step <b>134</b> where the processing module generates a request/response field to indicate a request message for a request message DSN frame or a response message for a response message DSN frame. For example, processing module generates the request/response field to include a value of zero when the DSN frame is the request message DSN frame. As another example, the processing module generates the request/response field to include a value of one when the DSN frame is the response message DSN frame.</p>
<p id="p-0132" num="0131">The method continues at step <b>136</b> where the processing module generates a request number field that includes a request number value by at least one of transforming a random number generator output to produce the value, transforming a variable reference number to produce the value (e.g., a hash or block cipher encryption of the variable reference number which increments by one for each new request number value), adding an increment to a previous request number value to produce the value, selecting a predetermined number to produce the value, and utilizing a request number value of a request DSN frame when the DSN frame is a response DSN frame. For example, the processing module generates a request number value of 39,239 in a four byte wide request number field based on the random number generator output. As another example, the processing module generates a request number value of 9,093 when the previous request number value is 9,083 and the increment is 10. As yet another example, the processing module generates a request number value of 277 when the request number value of the request DSN frame is 277 and the DSN frame is a response DSN frame.</p>
<p id="p-0133" num="0132">The method continues at step <b>138</b> where the processing module arranges, in order, the protocol class field, the protocol class version field, the opcode field, the request/response field, the request number field, and a payload length field to produce the protocol header. The method continues at step <b>140</b> where the processing module determines whether the DSN frame is to have a payload based on one or more values of one or more of the fields of the protocol header. For example, the processing module determines that the DSN frame is not to have the payload when the opcode value indicates a write commit response operation. As another example, the processing module determines that the DSN frame is to have the payload when the opcode value indicates a read request operation. The method branches to step <b>151</b> when the processing module determines that the DSN frame is not to have the payload. The method continues to step <b>142</b> when the processing module determines that the DSN frame is to have the payload.</p>
<p id="p-0134" num="0133">At step <b>142</b>, the processing module determines the payload as one of a request payload for a request message DSN frame and a response payload for a response message DSN frame. Such a determination may be based on one or more of the operational function, the values for the protocol class field, the protocol class version field, the request/response field, and the opcode field. The method to determine the payload is discussed in greater detail with reference to <figref idref="DRAWINGS">FIGS. 7A-26B</figref>.</p>
<p id="p-0135" num="0134">The method continues at step <b>144</b> where the processing module sums a number of bytes of the payload to produce a value for the payload length field. Alternatively, the processing module determines the value utilizing one or more of a payload length formula and a fixed value. Such a determination may be based on one or more of the operational function, the values for the protocol class field, the protocol class version field, the request/response field, and the opcode field. For example, the processing module determines to utilize a payload length formula of 8T to produce the value as a four byte payload length field, where T is the number of transaction numbers, when the operational function is a write commit request operation. As another example, the processing module determines to utilize a fixed value of zero when the operational function is an undo write response operation. As yet another example, the processing module determines to sum number of bytes of the payload to produce the value as a four byte payload length field when the operational function is a checked write request operation.</p>
<p id="p-0136" num="0135">The method continues at step <b>146</b> where the processing module appends the payload to the protocol header to produce the DSN frame. The method continues at step <b>148</b> where the processing module outputs the DSN frame. For example, the processing module sends a request message DSN frame to one or more DS unit for a write request operation. As another example, the processing module sends a response message DSN to a requesting device that initiated a write request.</p>
<p id="p-0137" num="0136">The method continues at step <b>150</b> where the processing module establishes a value for the payload length field as a predetermined value. For example, processing module establishes the value as zero for the payload field when the DSN frame is not to have a payload. The method continues at step <b>152</b> where the processing module establishes the protocol header as the DSN frame. The method continues at step <b>148</b> where the processing module outputs the DSN frame.</p>
<p id="p-0138" num="0137"><figref idref="DRAWINGS">FIG. 7A</figref> is a diagram illustrating an example of a read request message format as a request dispersed storage network (DSN) frame that includes a protocol header <b>112</b> and a payload <b>156</b>. The protocol header <b>112</b> includes one or more of a protocol class field <b>116</b>, a protocol class version field <b>118</b>, an operation code field <b>120</b>, a request/response field <b>122</b>, a request number field <b>124</b>, and a payload length field <b>126</b>. For example, the operation code field <b>120</b> includes an operation code value of 40 hex and the request/response field <b>122</b> includes a value of zero when the request DSN frame is associated with the read request operational function.</p>
<p id="p-0139" num="0138">The payload <b>114</b> includes a transaction number field <b>158</b> that includes a transaction number value and one or more slice name fields <b>1</b>-<i>n </i>that include one or more slice names associated with the transaction number value. The transaction number field <b>158</b> may be utilized to associate two or more request/response DSN frames when a multistep sequence is utilized to accomplish a desired overall function. The transaction number value may be based on elapsed seconds since Jan. 1, 1970 UTC with nanosecond, millisecond, and/or seconds of precision when the operational function is to be completed in a transactional manner and may be set to zero when the operational function is to be completed in a non-transactional manner (e.g., one step or without regard to concurrent operational functions). For example, a read request DSN frame and a corresponding response DSN frame may each use the same an eight-byte value for the transaction number.</p>
<p id="p-0140" num="0139">Each slice name of a slice name field <b>1</b>-<i>n </i>is associated with one or more encoded data slices, which are to be read and returned in an associated read response operation. For example, to read encoded data slices <b>1</b> and <b>2</b>, the payload <b>156</b> includes a transaction number <b>158</b> and two 48 bytes slice name fields that includes slice names <b>1</b> and slice name <b>2</b>.</p>
<p id="p-0141" num="0140"><figref idref="DRAWINGS">FIG. 7B</figref> is a flowchart illustrating an example of generating a read request message for a request dispersed storage network (DSN) frame to support a read request operation. The method begins at step <b>160</b> where a processing module generates values for fields of a protocol header. Step <b>160</b> includes steps <b>128</b>-<b>130</b> of <figref idref="DRAWINGS">FIG. 6D</figref> where the processing module generates a protocol class value for a protocol class field and generates a protocol class version value for a protocol class version field. Such generation of the fields of the protocol header includes generating the protocol class field to indicate a protocol class for the read request operation and generating the protocol class version field to indicate a protocol class version for the read request operation.</p>
<p id="p-0142" num="0141">The method continues at step <b>162</b>, which includes steps <b>132</b>-<b>134</b> of <figref idref="DRAWINGS">FIG. 6D</figref>, where the processing module generates an operation code field to indicate a read request operation (e.g., an operation code value of 40 hex) and generates a request/response value of zero for a request/response field. The method continues at step <b>136</b> of <figref idref="DRAWINGS">FIG. 6D</figref> where the processing module determines a request number value for a request number field.</p>
<p id="p-0143" num="0142">The method continues at step <b>166</b> where the processing module generates a payload section of the read request DSN frame to include one or more slice name fields containing one or more slice names. The processing module may generate the one or more slice names based on information received in a previous read request, a list, a predetermination, a retrieval command, an error message, and/or a table lookup. For example, the processing module generates five slice names based on receiving a retrieval command that includes the five slice names to retrieve one or more encoded data slices associated with the five slice names.</p>
<p id="p-0144" num="0143">The method continues at step <b>168</b> where the processing module generates a payload length field of the protocol header to include a payload length that represents a length of the payload section. Such generation of the payload length may include one or more of determining a length of a transaction number, determining a length for each of the one or more slices names, determining a number of slice names of the one or more slices names and generating the payload length for the payload length field based on the length of the transaction number, the length for each of the one or more slices names, and the number of slice names of the one or more slices names.</p>
<p id="p-0145" num="0144">The method continues at step <b>170</b> where the processing module generates a transaction number field of the payload section to include a transaction number value corresponding to the read request operation. The method continues at step <b>172</b> where the processing module populates the protocol header and the payload to produce the read request message.</p>
<p id="p-0146" num="0145">The method continues at step <b>174</b> where the processing module outputs the request DSN frame in order of the protocol header, the transaction number field, and the one or more slice name fields. Alternatively, or in addition to, the processing module generates a plurality of DSN frames regarding the read request operation, wherein the plurality of DSN frames includes the request DSN frame. In addition, the processing module may update a slice status table to indicate that the one or more slice names are associated with a read-lock status to prevent any further modifications of associated encoded data slices until steps associated with the read request operation are completed (e.g., encoded data slices are received in response to the read request message).</p>
<p id="p-0147" num="0146"><figref idref="DRAWINGS">FIG. 8A</figref> is a diagram illustrating an example of a read response dispersed storage network (DSN) frame that includes a protocol header <b>112</b> and a payload <b>178</b>. The protocol header <b>112</b> includes one or more of a protocol class field <b>116</b>, a protocol class version field <b>118</b>, an operation code field <b>120</b>, a request/response field <b>122</b>, a request number field <b>124</b>, and a payload length field <b>126</b>. For example, the operation code field <b>120</b> includes an operation code value of 40 hex and the request/response field <b>122</b> includes a value of one when the response DSN frame is associated with the read response operational function.</p>
<p id="p-0148" num="0147">The payload <b>178</b> includes one or more slice payload sections <b>1</b>-<i>n </i>that correspond to one or more slice names <b>1</b>-<i>n </i>of an associated read request operational function (e.g., one or more slice names <b>1</b>-<i>n </i>extracted from a read request DSN frame). Each slice payload section <b>1</b>-<i>n </i>includes a slice revision count field <b>180</b>, one or more slice revision numbering fields <b>1</b>-<i>r</i>, one or more slice length fields <b>1</b>-<i>r</i>, and one or more slice payload fields <b>1</b>-<i>r</i>, where r represents a slice revision count value of the slice revision count field <b>180</b>. The slice revision count value indicates a number of visible revisions of an associated slice name included in the slice payload section. For example, the slice revision count field is four bytes in length and includes a slice revision count value of 10 when 10 encoded data slices of 10 revisions are visible associated with the corresponding slice name. As another example, the slice revision count value is set to zero when there is no encoded data slice that is associated with the corresponding slice name (e.g., the slice may have been deleted).</p>
<p id="p-0149" num="0148">Each slice revision numbering field <b>1</b>-<i>r </i>includes a revision number of the associated slice name. For example, a slice revision numbering field is eight bytes in length and includes a revision number that is greater than other revision numbers of the slice name (e.g., most current revision of the slice). Each slice length field <b>1</b>-<i>r </i>includes a length of a corresponding encoded data slice. For example, a slice length field value is set to 4,096 as a number of bytes of the corresponding encoded data slice. As another example, the slice length field value is set to zero when an encoded data slice of the revision of the corresponding slice name does not exist (e.g., the slice was deleted). Each slice payload field <b>1</b>-<i>r </i>includes the corresponding encoded data slice. The slice payload field may be set to zero if the corresponding encoded data slice does not exist.</p>
<p id="p-0150" num="0149"><figref idref="DRAWINGS">FIG. 8B</figref> is a flowchart illustrating an example of generating a read response message for a response dispersed storage network (DSN) frame to support a read response operation, which include similar steps to <figref idref="DRAWINGS">FIG. 6D</figref>. The method begins with step <b>182</b> where a processing module generates fields of a protocol header to include values of the fields of the protocol header. Step <b>182</b> includes steps <b>128</b>-<b>130</b> of <figref idref="DRAWINGS">FIG. 6D</figref> where the processing module generates a protocol class value for a protocol class field and generates a protocol class version value for a protocol class version field. Such generation of the fields of the protocol header includes generating the protocol class field to indicate a protocol class for the read response operation and generating the protocol class version field to indicate a protocol class version for the read response operation.</p>
<p id="p-0151" num="0150">The method continues at step <b>184</b> that includes steps <b>132</b>-<b>134</b> of <figref idref="DRAWINGS">FIG. 6D</figref> where the processing module generates an operation code field to indicate a read response operation (e.g., an operation code value of 40 hex) and generates a request/response value of one for a request/response field. The method continues at step <b>136</b> of <figref idref="DRAWINGS">FIG. 6D</figref> where the processing module determines a request number value for a request number field by utilizing a request number value of a request DSN frame when the DSN frame is a response DSN frame (e.g., corresponding to the read response operation).</p>
<p id="p-0152" num="0151">The method continues at step <b>188</b> where the processing module generates a payload of the response DSN frame regarding one or more slice names of a read response operation to include one or more slice payload sections, wherein generating a slice payload section of the one or more slice payload sections of a slice name of the one or more slice names includes generating a slice revision count field to indicate a number of revisions of the slice name included in the slice payload section and generating a slice revision numbering field for each of the revisions of the slice name to include a revision number. Such a slice revision count field may be set to zero when there are no revisions of the slice name (e.g., a deleted encoded data slice).</p>
<p id="p-0153" num="0152">The method continues at step <b>190</b> where the processing module generates a slice length field for each of the revisions of the slice name to include a length of a corresponding encoded data slice and generates a slice payload field for each of the revisions of the slice name to include the corresponding encoded data slice. The method continues at step <b>192</b> where the processing module generates a payload length field of the protocol header to include a payload length that represents a length of the one or more slice payload sections. The method continues at step <b>194</b> where the processing module populates the protocol header and the payload to produce the read response message.</p>
<p id="p-0154" num="0153">The method continues at step <b>196</b> where the processing module outputs the response DSN frame in order of the protocol header, and the one or more slice payload sections, wherein, within each slice payload section of the one or more slice payload sections, in an order of the slice revision count field, and for each of the revisions of the slice name, the slice revision numbering field, the slice length field, and the slice payload field. In addition, the processing module may establish an error condition based on one or more of the one or more slice names being associated with a locked encoded data slice state, a transaction number error (e.g., a slice name is locked by a second transaction number different from any transaction number associated with a corresponding read request message), the one or more slice names are associated with one or more encoded data slices that are not locally stored (e.g., a wrong DSN address), and a read request message is not authorized (e.g., a requester is not authorized to access such a portion of a DSN). The processing module discards the response DSN frame when the error condition is established.</p>
<p id="p-0155" num="0154"><figref idref="DRAWINGS">FIG. 9A</figref> is a diagram illustrating an example of a write request dispersed storage network (DSN) frame <b>200</b> that includes a protocol header <b>112</b> and a payload <b>202</b>. The protocol header <b>112</b> includes one or more of a protocol class field <b>116</b>, a protocol class version field <b>118</b>, an operation code field <b>120</b>, a request/response field <b>122</b>, a request number field <b>124</b>, and a payload length field <b>126</b>. For example, the operation code field <b>120</b> includes an operation code value of 50 hex and the request/response field <b>122</b> includes a value of zero when the request DSN frame corresponds to an associated write request operational function.</p>
<p id="p-0156" num="0155">The payload <b>202</b> includes a transaction number field <b>158</b> and one or more slice payload sections <b>1</b>-<i>n </i>associated with the transaction number. Each slice payload section <b>1</b>-<i>n </i>corresponds to a slice name <b>1</b>-<i>n </i>of the associated write request operational function and includes a slice name field, a slice revision numbering field, a slice length field, and a slice payload field. For example, a slice payload section <b>1</b> includes slice name field <b>1</b>, slice revision numbering field <b>1</b>, slice length field <b>1</b>, and slice payload field <b>1</b>, and a slice payload section <b>2</b> includes slice name field <b>2</b>, slice revision numbering field <b>2</b>, slice length field <b>2</b>, slice payload field <b>2</b> when two slice names are associated with the write request operational function (e.g., two encoded data slices to write).</p>
<p id="p-0157" num="0156">The slice name field includes a slice name <b>1</b>-<i>n </i>of the associated write request operational function. The slice revision numbering field includes a revision number of a corresponding encoded data slice of the slice name. The slice length field includes a length of the corresponding encoded data slice when the corresponding encoded data slice is to be stored. The slice length field includes a value of zero when the corresponding encoded data slice is to be deleted (e.g., the corresponding encoded data slice is a previously stored encoded data slice). The slice payload field includes the corresponding encoded data slice when the corresponding encoded data slice is to be stored.</p>
<p id="p-0158" num="0157"><figref idref="DRAWINGS">FIG. 9B</figref> is a flowchart illustrating an example of generating a write request message for a dispersed storage network (DSN) frame to support a write request operation, which include similar steps to <figref idref="DRAWINGS">FIGS. 6D and 7B</figref>. The method begins with step <b>204</b> where a processing module generates fields of a protocol header to include values of the fields of the protocol header. Step <b>204</b> includes steps <b>128</b>-<b>130</b> of <figref idref="DRAWINGS">FIG. 6D</figref> where the processing module generates a protocol class value for a protocol class field and generates a protocol class version value for a protocol class version field. Such generation of the fields of the protocol header includes generating the protocol class field to indicate a protocol class for the write request operation and generating the protocol class version field to indicate a protocol class version for the write request operation.</p>
<p id="p-0159" num="0158">The method continues at step <b>206</b> that includes steps <b>132</b>-<b>134</b> of <figref idref="DRAWINGS">FIG. 6D</figref> where the processing module generates an operation code field to indicate the write request operation (e.g., an operation code value of 50 hex) and generates a request/response value of zero for a request/response field (e.g., indicating a request message). The method continues at step <b>136</b> of <figref idref="DRAWINGS">FIG. 6D</figref> where the processing module determines a request number value for a request number field.</p>
<p id="p-0160" num="0159">The method continues at step <b>210</b> where the processing module generates one or more payload sections of the request DSN frame regarding the write request operation. Such generation of a slice payload section of the one or more slice payload sections includes generating a slice name field to include a slice name of one or more slice names corresponding to an encoded data slice of one or more encoded data slices, generating a slice revision numbering field to include a revision number of the slice name, generating a slice length field to include a length of the encoded data slice, and generating a slice payload field to include the encoded data slice.</p>
<p id="p-0161" num="0160">The method continues at step <b>170</b> of <figref idref="DRAWINGS">FIG. 7B</figref> where the processing module determines a transaction number field of the payload to include a transaction number corresponding to the write request operation. The method continues at step <b>212</b> where the processing module generates a payload length field of the protocol header to include a payload length that represents length of the transaction number field and length of the one or more slice payload sections. Such a length of a slice payload section of the one or more slice payload sections includes a length of the slice name field, a length of the slice revision numbering field, a length of the slice length field, and a length of the slice payload field.</p>
<p id="p-0162" num="0161">The method continues at step <b>216</b> where the processing module populates the protocol header and the payload to produce the write request message. The method continues at step <b>218</b> where the processing module outputs the request DSN frame in order of the protocol header, the transaction number field, and the one or more slice payload sections. Alternatively, or in addition to, the processing module generates a plurality of DSN frames regarding the write request operation, wherein the plurality of DSN frames includes the request DSN frame. In addition, the processing module may update a slice status table to indicate that the one or more slice names are associated with a write-lock status to prevent any modifications of the associated encoded data slices until steps associated with the write request operation are completed (e.g., a favorable number of write commit response messages have been received associated with the write request operation).</p>
<p id="p-0163" num="0162"><figref idref="DRAWINGS">FIG. 10A</figref> is a diagram illustrating an example of a write response dispersed storage network (DSN) frame <b>220</b> that includes a protocol header <b>112</b> and a payload <b>222</b>. The protocol header <b>112</b> includes one or more of a protocol class field <b>116</b>, a protocol class version field <b>118</b>, an operation code field <b>120</b>, a request/response field <b>122</b>, a request number field <b>124</b>, and a payload length field <b>126</b>. For example, the operation code field <b>120</b> includes an operation code value of 50 hex and the request/response field <b>122</b> includes a value of one when the response DSN frame is associated with the write response operational function.</p>
<p id="p-0164" num="0163">The payload <b>222</b> includes one or more status fields <b>1</b>-<i>n</i>, wherein each status field of the one or more status fields <b>1</b>-<i>n </i>includes a status code regarding storing of an encoded data slice associated with a slice name of one or more slice names (e.g., n slice names) of the write response operation. The write response message <b>220</b> may be generated in response to receiving a write request message. For example, status field <b>1</b> corresponds to a slice name <b>1</b> of the write request message, status field <b>2</b> corresponds to slice name <b>2</b> of the write request message, etc. The status code may be generated in accordance with a write response status code format, wherein the write response status code format indicates a disposition of the storing of the encoded data slice.</p>
<p id="p-0165" num="0164"><figref idref="DRAWINGS">FIG. 10B</figref> is a table illustrating an example of a write response status code format table that includes a write response status code format description field <b>224</b> and a status code field <b>226</b>. The write response status code format description field <b>224</b> includes one or more dispositions of storing of an encoded data slice and the status code field <b>226</b> includes one or more corresponding status codes. Such a status code of the one or more corresponding status codes is included in an associated status field of a write response message. In an example of operation, a processing module associated with a dispersed storage (DS) unit receives a write request message from a requester, determines a disposition of storing an encoded data slice associated with the write request message, matches the disposition to an entry of the write response status code format description field <b>224</b>, generates a write response message that includes a corresponding status code of the status code field <b>226</b>, and sends the write response message to the requester.</p>
<p id="p-0166" num="0165">In an instance of generating a status code, a status code of 00 hex is generated when a write sequence associated with the encoded data slice succeeded with no errors. In another instance, a status code of 01 hex is generated when the encoded data slice is associated with a locked status by another transaction (e.g., a transaction conflict wherein a transaction number received in a write request message does not match a transaction number associated with a pending operation that invoked the locked status). In another instance, a status code of 02 hex is generated when a slice name associated with the encoded data slice is not associated with an assigned slice name range (e.g., an addressing error). In another instance, a status code of 04 hex is generated when the write request message is unauthorized.</p>
<p id="p-0167" num="0166"><figref idref="DRAWINGS">FIG. 10C</figref> is a flowchart illustrating an example of generating a write response message for a response dispersed storage network (DSN) frame to support a write response operation, which include similar steps to <figref idref="DRAWINGS">FIG. 6D</figref>. The method begins at step <b>228</b> where a processing module generates fields of a protocol header to include values of the fields of the protocol header. Step <b>228</b> includes steps <b>128</b>-<b>130</b> of <figref idref="DRAWINGS">FIG. 6D</figref> where the processing module generates a protocol class value for a protocol class field and generates a protocol class version value for a protocol class version field. Such generation of the fields of the protocol header includes generating the protocol class field to indicate a protocol class for the write response operation and generating the protocol class version field to indicate a protocol class version for the write response operation.</p>
<p id="p-0168" num="0167">The method continues at step <b>230</b> that includes steps <b>132</b>-<b>134</b> of <figref idref="DRAWINGS">FIG. 6D</figref> where the processing module generates an operation code field to indicate a write response operation (e.g., an operation code value of 50 hex) and generates a request/response value of one for a request/response field to indicate a response message. The method continues at step <b>136</b> of <figref idref="DRAWINGS">FIG. 6D</figref> where the processing module determines a request number value for a request number field.</p>
<p id="p-0169" num="0168">The method continues at step <b>234</b> where the processing module generates a payload of the response DSN frame regarding one or more slice names of the write response operation to include one or more status fields, wherein generating a status field of the one or more status fields to indicate a status code regarding storing of an encoded data slice associated with a slice name of the one or more slice names. Such a status code includes one of an indication that the encoded data slice was successful stored, an indication of a transaction conflict, an indication of an addressing error, an indication that a corresponding write request message is unauthorized and an indication that the encoded data slice was not stored.</p>
<p id="p-0170" num="0169">The method continues at step <b>236</b> where the processing module generates a payload length field of the protocol header to include a payload length that represents a length of the one or more status fields. For example, the processing module generates the payload length field to include a payload length of five when a length each of the one or more status fields is one byte each and there are five status codes included in the payload of the response DSN frame. The method continues at step <b>238</b> where the processing module populates the protocol header and the payload to produce the write response message. The method continues at step <b>240</b> where the processing module outputs the response DSN frame in order of the protocol header and the one or more status fields, wherein the order of the one or more status fields corresponds to an order of slice names of the corresponding write request message.</p>
<p id="p-0171" num="0170"><figref idref="DRAWINGS">FIG. 11A</figref> is a diagram of an example of a checked write request dispersed storage network (DSN) frame <b>242</b> that includes a protocol header <b>112</b> and a payload <b>244</b>. The protocol header <b>112</b> includes one or more of a protocol class field <b>116</b>, a protocol class version field <b>118</b>, an operation code field <b>120</b>, a request/response field <b>122</b>, a request number field <b>124</b>, and a payload length field <b>126</b>. For example, the operation code field <b>120</b> includes an operation code value of 51 hex and the request/response field <b>122</b> includes a value of zero when the request DSN frame corresponds to the checked write request operational function.</p>
<p id="p-0172" num="0171">The payload <b>244</b> includes a transaction number field <b>158</b> and one or more slice payload sections <b>1</b>-<i>n </i>associated with a transaction number value of the transaction number field <b>158</b>. Such one or more slice payload sections <b>1</b>-<i>n </i>correspond to one or more slice names <b>1</b>-<i>n </i>of the associated checked write request operational function. Each slice payload section of the one or more slice payload sections <b>1</b>-<i>n </i>includes a slice name field, a last known slice revision numbering field, a new slice revision numbering field, a slice length field, and a slice payload field. For example, a slice payload section <b>1</b> includes slice name field <b>1</b>, last known slice revision numbering field <b>1</b>, new slice revision numbering field <b>1</b>, slice length field <b>1</b>, and slice payload field <b>1</b>, and a slice payload section <b>2</b> includes slice name field <b>2</b>, last known slice revision numbering field <b>2</b>, new slice revision numbering field <b>2</b>, slice length field <b>2</b>, slice payload field <b>2</b> when two slice names are associated with the checked write request operational function (e.g., two encoded data slices to write).</p>
<p id="p-0173" num="0172">Each of the slice name field includes a slice name <b>1</b>-<i>n </i>of the associated checked write request operational function. The last known slice revision numbering field includes a last known revision number of a previously stored encoded data slice of the slice name. The new slice revision numbering field includes a new revision number of a corresponding encoded data slice (e.g., in the payload of the checked write request message) of the slice name. The slice length field includes a length of the corresponding encoded data slice when the corresponding encoded data slice is to be stored. The slice length field includes a value of zero when the previously stored encoded data slice is to be deleted. The slice payload field includes the corresponding encoded data slice when the corresponding encoded data slice is to be stored.</p>
<p id="p-0174" num="0173"><figref idref="DRAWINGS">FIG. 11B</figref> is a flowchart illustrating an example of generating a checked write request message for a request dispersed storage network (DSN) frame to support a checked write request operation, which include similar steps to <figref idref="DRAWINGS">FIGS. 6D and 7B</figref>. The method begins with step <b>246</b> where a processing module generates fields of a protocol header to include values of the fields of the protocol header. Step <b>246</b> includes steps <b>128</b>-<b>130</b> of <figref idref="DRAWINGS">FIG. 6D</figref> where the processing module generates a protocol class value for a protocol class field and generates a protocol class version value for a protocol class version field. Such generation of the fields of the protocol header includes generating the protocol class field to indicate a protocol class for the checked write request operation and generating the protocol class version field to indicate a protocol class version for the write request operation.</p>
<p id="p-0175" num="0174">The method continues at step <b>248</b> that includes steps <b>132</b>-<b>134</b> of <figref idref="DRAWINGS">FIG. 6D</figref> where the processing module generates an operation code field to indicate the checked write request operation (e.g., an operation code value of 51 hex) and generates a request/response value of zero for a request/response field (e.g., indicating a request message). The method continues at step <b>136</b> of <figref idref="DRAWINGS">FIG. 6D</figref> where the processing module determines a request number value for a request number field.</p>
<p id="p-0176" num="0175">The method continues at step <b>252</b> where the processing module generates one or more payload sections of the request DSN frame regarding the checked write request operation. The generation of a slice payload section includes generating a slice name field to include a slice name of one or more slice names corresponding to an encoded data slice, generating a last known slice revision numbering field to include a last known revision number of the slice name, generating a new slice revision numbering field to include a new revision number of the slice name corresponding to the checked write request operation, generating a slice length field to include a length of the encoded data slice, and generating a slice payload field to include the encoded data slice.</p>
<p id="p-0177" num="0176">The generation of the last known revision number includes selecting the last known revision number from a revision number list (e.g., select a most recent revision from a local directory cache), extracting the last known slice revision number from a check response message (e.g., a query response of the most recent revision number), and/or extracting the last known slice revision number from a read response message (e.g., the most recent revision number). The method continues at step <b>170</b> of <figref idref="DRAWINGS">FIG. 7B</figref> where the processing module determines a transaction number field of the payload to include a transaction number corresponding to the checked write request operation.</p>
<p id="p-0178" num="0177">The method continues at step <b>256</b> where the processing module generates a payload length field of the protocol header to include a payload length that represents length of the transaction number field and length of the one or more slice payload sections. The length of a slice payload section includes a length of the slice name field, a length of the last known slice revision numbering field, a length of the new slice revision numbering field, a length of the slice length field, and a length of the slice payload field.</p>
<p id="p-0179" num="0178">The method continues at step <b>258</b> where the processing module populates the protocol header and the payload to produce the write request message. The method continues at step <b>260</b> where the processing module outputs the request DSN frame in order of the protocol header, the transaction number field, and the one or more slice payload sections. Alternatively, or in addition to, the processing module generates a plurality of DSN frames regarding the checked write request operation, wherein the plurality of DSN frames includes the request DSN frame. In addition, the processing module may update a slice status table to indicate that the one or more slice names are associated with a write-lock status to prevent any modifications of the associated encoded data slices until steps associated with the write request operation are completed (e.g., a favorable number of write commit response messages have been received associated with the write request operation).</p>
<p id="p-0180" num="0179"><figref idref="DRAWINGS">FIG. 12A</figref> is a diagram of an example of a checked write response dispersed storage network (DSN) frame <b>262</b> that includes a protocol header <b>112</b> and a payload <b>264</b>. The protocol header <b>112</b> includes one or more of a protocol class field <b>116</b>, a protocol class version field <b>118</b>, an operation code field <b>120</b>, a request/response field <b>122</b>, a request number field <b>124</b>, and a payload length field <b>126</b>. For example, the operation code field <b>120</b> includes an operation code value of 51 hex and the request/response field <b>122</b> includes a value of one when the response DSN frame is associated with the checked write response operational function.</p>
<p id="p-0181" num="0180">The payload <b>264</b> includes one or more status fields <b>1</b>-<i>n</i>, wherein each status field includes a status code regarding storing of an encoded data slice associated with a slice name of one or more slice names (e.g., n slice names). For example, status field <b>1</b> corresponds to a slice name <b>1</b> of the checked write request message, status field <b>2</b> corresponds to slice name <b>2</b> of the checked write request message, etc. The status code may be generated in accordance with a checked write response status code format, which indicates a disposition of the storing of the encoded data slice.</p>
<p id="p-0182" num="0181"><figref idref="DRAWINGS">FIG. 12B</figref> is a table illustrating an example of a checked write response status code format that includes a checked write response status code format description field <b>265</b> and a status code field <b>226</b>. The checked write response status code format description field <b>265</b> includes one or more dispositions of storing of an encoded data slice and the status code field <b>226</b> includes one or more corresponding status codes. In an example of operation, a processing module associated with a dispersed storage (DS) unit receives a checked write request message from a requester, determines a disposition of storing an encoded data slice associated with the checked write request message, matches the disposition to an entry of the checked write response status code format description field <b>265</b>, generates a checked write response message that includes a corresponding status code in the status code field <b>226</b>, and sends the checked write response message to the requester.</p>
<p id="p-0183" num="0182">In an instance of generating a status code, a status code of 00 hex is generated when a checked write sequence associated with the encoded data slice succeeded with no errors. In another instance, a status code of 01 hex is generated when the encoded data slice is associated with a locked status by another transaction (e.g., a transaction conflict wherein a transaction number received in a checked write request message does not match a transaction number associated with a pending operation that invoked the locked status). In a further instance, a status code of 02 hex is generated when a slice name associated with the encoded data slice is not associated with an assigned slice name range (e.g., an addressing error). In yet another instance, a status code of 03 hex is generated when the slice name associated with the encoded data slice does not meet criteria for a checked operation (e.g., a last known revision of the slice name is not present). In still another instance, a status code of 04 hex is generated when the checked write request message is unauthorized.</p>
<p id="p-0184" num="0183"><figref idref="DRAWINGS">FIG. 12C</figref> is a flowchart illustrating an example of generating a checked write response message for a response dispersed storage network (DSN) frame to support a checked write response operation, which include similar steps to <figref idref="DRAWINGS">FIGS. 6D and 10C</figref>. The method begins with step <b>268</b> where a processing module generates fields of a protocol header to include values of the fields of the protocol header. Step <b>268</b> includes steps <b>128</b>-<b>130</b> of <figref idref="DRAWINGS">FIG. 6D</figref> where the processing module generates a protocol class value for a protocol class field and generates a protocol class version value for a protocol class version field. The generation of the fields of the protocol header includes generating the protocol class field to indicate a protocol class for the checked write response operation and generating the protocol class version field to indicate a protocol class version for the checked write response operation.</p>
<p id="p-0185" num="0184">The method continues at step <b>270</b>, which includes steps <b>132</b>-<b>134</b> of <figref idref="DRAWINGS">FIG. 6D</figref>, where the processing module generates an operation code field to indicate a write response operation (e.g., an operation code value of 51 hex) and generates a request/response value of one for a request/response field to indicate a response message. The method continues at step <b>136</b> of <figref idref="DRAWINGS">FIG. 6D</figref> where the processing module determines a request number value for a request number field.</p>
<p id="p-0186" num="0185">The method continues at step <b>274</b> where the processing module generates a payload of the response DSN frame regarding one or more slice names of the checked write response operation to include one or more status fields, wherein generating a status field of the one or more status fields to indicate a status code regarding storing of an encoded data slice associated with a slice name of the one or more slice names. A status code includes an indication that the encoded data slice was successful stored, a transaction conflict, an addressing error, a revision check error (e.g., a last known revision number received in a checked write request message is not substantially the same as a latest revision number of the slice name), a corresponding write request message is unauthorized, and/or the encoded data slice was not stored.</p>
<p id="p-0187" num="0186">The method continues with step <b>236</b> of <figref idref="DRAWINGS">FIG. 10C</figref> where the processing module generates a payload length field of the protocol header to include a payload length that represents a length of the one or more status fields. The method continues at step <b>278</b> where the processing module populates the protocol header and the payload to produce the checked write response message. The method continues at step <b>280</b> where the processing module outputs the response DSN frame in order of the protocol header and the one or more status fields, wherein the order of the one or more status fields corresponds to an order of slice names of the corresponding checked write request message.</p>
<p id="p-0188" num="0187"><figref idref="DRAWINGS">FIG. 13A</figref> is a diagram illustrating an example of a write commit request DSN frame <b>282</b> that protocol header <b>112</b> and a payload <b>284</b>. The write commit request is one of an intermediate write request operations that is generated subsequent to the generation of a write request operation or a checked write request operation and precedes the generation of a conclusive write request operation (e.g., a finalize write request operational function, an undo write request operational function). The protocol header <b>112</b> includes one or more of a protocol class field <b>116</b>, a protocol class version field <b>118</b>, an operation code field <b>120</b>, a request/response field <b>122</b>, a request number field <b>124</b>, and a payload length field <b>126</b>. For example, the operation code field <b>120</b> includes an operation code value of 21 hex and the request/response field <b>122</b> includes a value of zero when the request DSN frame corresponds to the write commit request operational function.</p>
<p id="p-0189" num="0188">The payload <b>284</b> includes one or more transaction number fields <b>1</b>-T that includes one or more transaction numbers corresponding to the write request operation (e.g., the write request operation that precedes the write commit request operation). For example, the payload <b>284</b> includes 2 transaction number fields, where the first transaction number field includes a transaction number of <b>314</b> for the write operation and the second transaction number field includes a transaction number of <b>647</b> for the write commit operation.</p>
<p id="p-0190" num="0189"><figref idref="DRAWINGS">FIG. 13B</figref> is a flowchart illustrating an example of generating a write commit request DSN frame, which includes similar steps to <figref idref="DRAWINGS">FIG. 6D</figref>. The method begins at step <b>286</b> where a processing module generates fields of a protocol header to include values of the fields of the protocol header. Step <b>286</b> includes steps <b>128</b>-<b>130</b> of <figref idref="DRAWINGS">FIG. 6D</figref> where the processing module generates a protocol class value for a protocol class field and generates a protocol class version value for a protocol class version field. The generation of the fields of the protocol header includes generating the protocol class field to indicate a protocol class for the write commit request operation and generating the protocol class version field to indicate a protocol class version for the write commit request operation.</p>
<p id="p-0191" num="0190">The method continues at step <b>288</b> that includes steps <b>132</b>-<b>134</b> of <figref idref="DRAWINGS">FIG. 6D</figref> where the processing module generates an operation code field to indicate a write commit request operation (e.g., an operation code value of 21 hex) and generates a request/response value of zero for a request/response field (e.g., indicating a request message). The method continues at step <b>136</b> of <figref idref="DRAWINGS">FIG. 6D</figref> where the processing module determines a request number value for a request number field.</p>
<p id="p-0192" num="0191">The method continues at step <b>292</b> where the processing module generates a payload of the request DSN frame by generating one or more transaction number fields to include one or more transaction numbers corresponding to a write request operation. The generation of a transaction number includes receiving the transaction number (e.g., included in a command) and/or selecting the transaction number from a transaction number list (e.g., the transaction number list includes transaction numbers associated with the write request operation). For example, processing module selects the transaction number from the transaction number list when the one or more transaction numbers are associated one or more successful write request operations (e.g., favorable write response messages were received corresponding to a write threshold number of encoded data slices per data segment associated with the one or more transaction numbers).</p>
<p id="p-0193" num="0192">The method continues at step <b>294</b> where the processing module generates a protocol header of the request DSN frame by generating a payload length field to include a payload length that represents a length of the one or more transaction number fields. For example, the processing module generates the payload length field to include a payload length of twenty-four when a length of each of three transaction number fields is eight bytes. The method continues at step <b>296</b> where the processing module populates the protocol header and the payload to produce the write commit request message. The method continues at step <b>298</b> where the processing module outputs the request DSN frame in order of the protocol header and the one or more transaction number fields. Alternatively, or in addition to, the processing module generates a plurality of DSN frames regarding the intermediate write request operation, wherein the plurality of DSN frames includes the request DSN frame.</p>
<p id="p-0194" num="0193"><figref idref="DRAWINGS">FIG. 14A</figref> is a diagram illustrating an example of a write commit response DSN frame <b>300</b> that includes a protocol header <b>112</b>. The write commit response is one of an intermediate write response operations that is generated subsequent to the generation of a write request response or a checked write response operation and precedes the generation of a conclusive write response operation.</p>
<p id="p-0195" num="0194">The protocol header <b>112</b> includes one or more of a protocol class field <b>116</b>, a protocol class version field <b>118</b>, an operation code field <b>120</b>, a request/response field <b>122</b>, a request number field <b>124</b>, and a payload length field <b>126</b>. For example, the operation code field <b>120</b> includes an operation code value of 21 hex, the request/response field <b>122</b> includes a value of one, the request number field <b>124</b> includes a request number extracted from an associated write commit request message, and the payload length field <b>126</b> includes a value of zero when the response DSN frame is associated with the write commit response operational function.</p>
<p id="p-0196" num="0195">In an operational example, the write commit response message <b>300</b> is generated and outputted in response to receiving and processing an associated write commit request message when all transactions associated with the write commit request message are successfully committed (e.g., a slice status table is updated to indicate that one or more slice names are associated with visible encode data slices, wherein the one or more slice names are associated with a transaction number of the write commit request message).</p>
<p id="p-0197" num="0196"><figref idref="DRAWINGS">FIG. 14B</figref> is a flowchart illustrating an example of generating a write commit response DSN frame, which includes similar steps to <figref idref="DRAWINGS">FIG. 6D</figref>. The method begins at step <b>302</b>, which includes steps <b>128</b>-<b>130</b> of <figref idref="DRAWINGS">FIG. 6D</figref>, where the processing module generates a protocol class value for a protocol class field and generates a protocol class version value for a protocol class version field. The generation of the fields of the protocol header includes generating the protocol class field to indicate a protocol class for the intermediate write response operation (e.g., the write commit response operation) and generating the protocol class version field to indicate a protocol class version for the intermediate write response operation.</p>
<p id="p-0198" num="0197">The method continues at step <b>304</b>, which includes steps <b>132</b>-<b>134</b> of <figref idref="DRAWINGS">FIG. 6D</figref>, where the processing module generates an operation code field to indicate the intermediate write response operation (e.g., the write commit request operation associated with an operation code value of 21 hex) and the processing module generates a request/response value of one for a request/response field (e.g., indicating a response message). The method continues with step <b>136</b> of <figref idref="DRAWINGS">FIG. 6D</figref>, where the processing module determines a request number value for a request number field. For example, the processing module determines the request number by extracting a request number from a message of an associated intermediate write request operation. For instance, processing module determines the request number by extracting a request number from an associated write commit request message.</p>
<p id="p-0199" num="0198">The method continues at step <b>308</b> where the processing module generates a payload length field of the protocol header to include a predetermined payload length value. For example, processing module generates the payload length field to include a payload length of zero when the payload length field is associated with the intermediate write response message. The method continues at step <b>310</b> where the processing module populates the protocol header to produce the write commit response message. The method continues at step <b>312</b> where the processing module outputs in order, the protocol class field, the protocol class version field, the operation code field, the request/response field, the request number field, and the payload length field as the response DSN frame of the write commit response message.</p>
<p id="p-0200" num="0199"><figref idref="DRAWINGS">FIG. 15A</figref> is a diagram illustrating an example of a write rollback request DSN frame <b>314</b>, which is another intermediate write request operation. The write rollback request frame <b>314</b> includes a protocol header <b>112</b> and a payload <b>316</b>. The protocol header <b>112</b> includes a protocol class field <b>116</b>, a protocol class version field <b>118</b>, an operation code field <b>120</b>, a request/response field <b>122</b>, a request number field <b>124</b>, and/or a payload length field <b>126</b>. For example, the operation code field <b>120</b> includes an operation code value of 22 hex and the request/response field <b>122</b> includes a value of zero when the request DSN frame corresponds to the write rollback request operational function.</p>
<p id="p-0201" num="0200">The payload <b>316</b> includes one or more transaction number fields <b>1</b>-T that include one or more transaction numbers corresponding to a write request operation. For example, the payload <b>316</b> includes a transaction number field <b>1</b>, wherein the transaction number field <b>1</b> includes a transaction number of <b>647</b> when a write rollback request operational function is active for encoded data slices associated with the transaction number <b>647</b>.</p>
<p id="p-0202" num="0201"><figref idref="DRAWINGS">FIG. 15B</figref> is a flowchart illustrating an example of generating a write rollback request message for a request dispersed storage network (DSN) frame, which includes similar steps to <figref idref="DRAWINGS">FIGS. 6D and 13B</figref>. The method begins at step <b>318</b> where a processing module generates fields of a protocol header to include values therein. Step <b>318</b> includes steps <b>128</b>-<b>130</b> of <figref idref="DRAWINGS">FIG. 6D</figref> where the processing module generates a protocol class value for a protocol class field and generates a protocol class version value for a protocol class version field. The generation of the fields of the protocol header includes generating the protocol class field to indicate a protocol class for the write rollback request operation and generating the protocol class version field to indicate a protocol class version for the write rollback request operation.</p>
<p id="p-0203" num="0202">The method continues at step <b>320</b>, which includes steps <b>132</b>-<b>134</b> of <figref idref="DRAWINGS">FIG. 6D</figref>, where the processing module generates an operation code field to indicate a write rollback request operation (e.g., an operation code value of 22 hex) and generates a request/response value of zero for a request/response field (e.g., indicating a request message). The method continues at step <b>136</b> of <figref idref="DRAWINGS">FIG. 6D</figref> where the processing module determines a request number value for a request number field.</p>
<p id="p-0204" num="0203">The method continues at step <b>324</b> where the processing module generates a payload of the request DSN frame regarding the intermediate write request operation by generating one or more transaction number fields of the payload to include one or more transaction numbers corresponding to a write request operation. The method continues at step <b>294</b> of <figref idref="DRAWINGS">FIG. 13B</figref> where the processing module generates a protocol header of the request DSN frame by generating a payload length field of the protocol header to include a payload length that represents a length of the one or more transaction number fields.</p>
<p id="p-0205" num="0204">The method continues at step <b>328</b> where the processing module populates the protocol header and the payload to produce the write rollback request message. The method continues at step <b>330</b> where the processing module outputs the request DSN frame in order of the protocol header and the one or more transaction number fields. Alternatively, or in addition to, the processing module generates a plurality of DSN frames regarding the intermediate write request operation, wherein the plurality of DSN frames includes the request DSN frame. Alternatively, or in addition to, the processing module updates a slice status table to indicate that associated encoded data slices (e.g., of the write request operation) are associated with a write-lock status at a rollback stage to prevent any further modifications of the encoded slices until the write rollback request operation concludes (e.g., a corresponding write rollback response message is received).</p>
<p id="p-0206" num="0205"><figref idref="DRAWINGS">FIG. 16A</figref> is a diagram illustrating an example of a write rollback response DSN frame, which is another intermediate write response operation. The response DSN frame <b>332</b> includes a protocol header <b>112</b>, which includes one or more of a protocol class field <b>116</b>, a protocol class version field <b>118</b>, an operation code field <b>120</b>, a request/response field <b>122</b>, a request number field <b>124</b>, and a payload length field <b>126</b>. For example, the operation code field <b>120</b> includes an operation code value of 22 hex, the request/response field <b>122</b> includes a value of one, the request number field <b>124</b> includes a request number extracted from an associated write rollback request message, and the payload length field <b>126</b> includes a value of zero when the response DSN frame is associated with the write rollback response operational function.</p>
<p id="p-0207" num="0206">In an operational example, the write rollback response message <b>332</b> is generated and outputted in response to receiving and processing an associated write rollback request message when the transactions associated with the write rollback request message are successfully rolled back. For example, encoded data slices associated with a transaction number of an write rollback request message are deleted.</p>
<p id="p-0208" num="0207"><figref idref="DRAWINGS">FIG. 16B</figref> is a flowchart illustrating an example of generating a write rollback response DSN frame, which includes similar steps to <figref idref="DRAWINGS">FIGS. 6D and 14B</figref>. The method begins with step <b>334</b> where a processing module generates fields of a protocol header to include values of the fields of the protocol header. Step <b>334</b> includes steps <b>128</b>-<b>130</b> of <figref idref="DRAWINGS">FIG. 6D</figref> where the processing module generates a protocol class value for a protocol class field and generates a protocol class version value for a protocol class version field. Such generation of the fields of the protocol header includes generating the protocol class field to indicate a protocol class for the intermediate write response operation (e.g., the write rollback response operation) and generating the protocol class version field to indicate a protocol class version for the intermediate write response operation.</p>
<p id="p-0209" num="0208">The method continues at step <b>336</b> that includes steps <b>132</b>-<b>134</b> of <figref idref="DRAWINGS">FIG. 6D</figref> where the processing module generates an operation code field to indicate the intermediate write response operation (e.g., the write rollback response operation associated with an operation code value of 22 hex) and the processing module generates a request/response value of one for a request/response field (e.g., indicating a response message). The method continues with step <b>136</b> of <figref idref="DRAWINGS">FIG. 6D</figref>, where the processing module determines a request number value for a request number field (e.g., the processing module determines the request number by extracting a request number from an associated write rollback request message).</p>
<p id="p-0210" num="0209">The method continues with step <b>308</b> of <figref idref="DRAWINGS">FIG. 14B</figref> where the processing module generates a payload length field of the protocol header to include a predetermined payload length value (e.g., zero for the intermediate write response message). The method continues at step <b>342</b> where the processing module populates the protocol header to produce the write rollback response message. The method continues at step <b>344</b> where the processing module outputs in order, the protocol class field, the protocol class version field, the operation code field, the request/response field, the request number field, and the payload length field as the response DSN frame of the write rollback response message. Alternatively, or in addition to, the processing module may delete one or more encoded data slices associated with the one or more transaction numbers of the slice upon receiving the associated write rollback request message.</p>
<p id="p-0211" num="0210"><figref idref="DRAWINGS">FIG. 17A</figref> is a diagram illustrating an example of a DSN frame <b>346</b> for finalize write request, which is one of conclusive write request operations. The request DSN frame <b>346</b> includes a protocol header <b>112</b> and a payload <b>348</b>. The protocol header <b>112</b> includes one or more of a protocol class field <b>116</b>, a protocol class version field <b>118</b>, an operation code field <b>120</b>, a request/response field <b>122</b>, a request number field <b>124</b>, and a payload length field <b>126</b>. For example, the operation code field <b>120</b> includes an operation code value of 23 hex and the request/response field <b>122</b> includes a value of zero when the request DSN frame corresponds to the finalize write request operational function. The payload <b>348</b> includes one or more slice name fields <b>1</b>-<i>n</i>, each of which includes a slice name, and one or more slice revision numbering fields <b>1</b>-<i>n</i>, each of which includes a slice revision number.</p>
<p id="p-0212" num="0211"><figref idref="DRAWINGS">FIG. 17B</figref> is a flowchart illustrating an example of generating a finalize write request DSN frame, which includes similar steps to <figref idref="DRAWINGS">FIG. 6D</figref>. The method begins at step <b>350</b> where a processing module generates fields of a protocol header to include corresponding values. Step <b>350</b> includes steps <b>128</b>-<b>130</b> of <figref idref="DRAWINGS">FIG. 6D</figref> where, when a threshold number of write commit responses have been received, the processing module generates a protocol class value for a protocol class field and generates a protocol class version value for a protocol class version field. The protocol class field value indicates a protocol class of the finalize write request operation and the protocol class version value indicate a protocol class version for the finalize write request operation.</p>
<p id="p-0213" num="0212">The method continues at step <b>352</b>, which includes steps <b>132</b>-<b>134</b> of <figref idref="DRAWINGS">FIG. 6D</figref>, where the processing module generates an operation code field to indicate a finalize write request operation (e.g., an operation code value of 23 hex) and generates a request/response value of zero for a request/response field (e.g., indicating a request message) when the threshold number of the one or more write commit responses have been received. The method continues at step <b>136</b> of <figref idref="DRAWINGS">FIG. 6D</figref> where the processing module determines a request number value for a request number field.</p>
<p id="p-0214" num="0213">The method continues at step <b>356</b> where the processing module generates a payload of the request DSN frame to include one or more slice name fields. A slice name field includes a slice name corresponding to a write commit response of a write request operation.</p>
<p id="p-0215" num="0214">The method continues at step <b>358</b> where the processing module generates a payload length field of the protocol header to include a payload length that represents length of the slice name fields and length the slice revision numbering fields. The method continues at step <b>360</b> where the processing module populates the protocol header and the payload to produce the finalize write request message.</p>
<p id="p-0216" num="0215">The method continues at step <b>362</b> where the processing module outputs the request DSN frame that includes the finalize write request message in order of the protocol header and one or more slice field pairs, wherein each of the one or more slice field pairs includes, in order, a slice name field of the one or more slice name fields and a slice revision numbering field of the one or more slice revision numbering fields, wherein the slice revision numbering field is associated with the slice name field.</p>
<p id="p-0217" num="0216">Alternatively, or in addition to, the processing module generates a plurality of DSN frames regarding the conclusive write request operation, wherein the plurality of DSN frames includes the request DSN frame. Alternatively, or in addition to, the processing module updates a slice status table to indicate that slice names of the payload of the finalize write request message are now not associated with a write-lock status since they are now a finalized status and hence a previous write request operational function has concluded (e.g., a write transaction has expired).</p>
<p id="p-0218" num="0217"><figref idref="DRAWINGS">FIG. 18A</figref> is a diagram illustrating an example of a DSN frame of finalize write response, which is one of conclusive write response operations. The finalize write response message <b>364</b> includes a protocol header <b>112</b>, which includes one or more of a protocol class field <b>116</b>, a protocol class version field <b>118</b>, an operation code field <b>120</b>, a request/response field <b>122</b>, a request number field <b>124</b>, and a payload length field <b>126</b>. For example, the operation code field <b>120</b> includes an operation code value of 23 hex, the request/response field <b>122</b> includes a value of one, the request number field <b>124</b> includes a request number extracted from an associated finalize write request message, and the payload length field <b>126</b> includes a value of zero when the response DSN frame is associated with the finalize write response operational function.</p>
<p id="p-0219" num="0218">In an operational example, the finalize write response message <b>364</b> is generated and outputted in response to receiving and processing an associated finalize write request message when encoded data slices corresponding to the finalize write request message are successfully finalized (e.g., a newest revision of an encoded data slice remains stored while encoded data slices of previous revisions are deleted).</p>
<p id="p-0220" num="0219"><figref idref="DRAWINGS">FIG. 18B</figref> is a flowchart illustrating an example of generating a finalize write response DSN frame, which includes similar steps to <figref idref="DRAWINGS">FIGS. 6D and 14B</figref>. The method begins at step <b>366</b> where a processing module generates values for inclusion in fields of a protocol header. Step <b>366</b> includes steps <b>128</b>-<b>130</b> of <figref idref="DRAWINGS">FIG. 6D</figref> where the processing module generates a protocol class value for a protocol class field and generates a protocol class version value for a protocol class version field.</p>
<p id="p-0221" num="0220">The method continues at step <b>368</b> that includes steps <b>132</b>-<b>134</b> of <figref idref="DRAWINGS">FIG. 6D</figref> where the processing module generates an operation code field to indicate the conclusive write response operation (e.g., the finalize write response operation associated with an operation code value of 23 hex) and the processing module generates a request/response value of one for a request/response field (e.g., indicating a response message). The generating of the operation code field includes indicating the finalize write response operation or by extracting an operational code from a corresponding conclusive write request message (e.g., from a finalize write request message). The method continues with step <b>136</b> of <figref idref="DRAWINGS">FIG. 6D</figref>, where the processing module determines a request number value associated with the conclusive write request operation (e.g., the processing module determines the request number by extracting a request number from the associated finalize write request message).</p>
<p id="p-0222" num="0221">The method continues at step <b>308</b> of <figref idref="DRAWINGS">FIG. 14B</figref> where the processing module generates a payload length field of the protocol header to include a predetermined payload length value (e.g., zero for the conclusive write response message). The method continues at step <b>374</b> where the processing module populates the protocol header to produce the finalize write response message. The method continues at step <b>376</b> where the processing module outputs in order, the protocol class field, the protocol class version field, the operation code field, the request/response field, the request number field, and the payload length field as the response DSN frame of the finalize write response message. Alternatively, or in addition to, the processing module may delete one or more encoded data slices associated with all but the most recent revision of each slice name of an associated finalize write request message when the one or more encoded data slices are not associated with a locked status by the another open transaction.</p>
<p id="p-0223" num="0222"><figref idref="DRAWINGS">FIG. 19A</figref> is a diagram illustrating an example of a DSN frame for an undo write request, which is one of the conclusive write request operations. The request DSN frame includes a protocol header <b>112</b> and a payload <b>380</b>. The protocol header <b>112</b> includes one or more of a protocol class field <b>116</b>, a protocol class version field <b>118</b>, an operation code field <b>120</b>, a request/response field <b>122</b>, a request number field <b>124</b>, and a payload length field <b>126</b>. For example, the operation code field <b>120</b> includes an operation code value of 24 hex and the request/response field <b>122</b> includes a value of zero when the request DSN frame corresponds to the undo write request operational function.</p>
<p id="p-0224" num="0223">The payload <b>380</b> includes one or more slice name fields <b>1</b>-<i>n</i>, each of which includes a slice name corresponding to a write commit response, and slice revision numbering fields <b>1</b>-<i>n</i>, each of which includes a slice revision number corresponding to an associated slice name.</p>
<p id="p-0225" num="0224"><figref idref="DRAWINGS">FIG. 19B</figref> is a flowchart illustrating an example of generating an undo write request (DSN) frame, which includes similar steps to <figref idref="DRAWINGS">FIGS. 6D and 17B</figref>. The method begins at step <b>382</b> where a processing module generates fields of a protocol header to include values of the fields of the protocol header. Step <b>382</b> includes steps <b>128</b>-<b>130</b> of <figref idref="DRAWINGS">FIG. 6D</figref> where the processing module generates a protocol class value for a protocol class field and generates a protocol class version value for a protocol class version field. Such generation of the fields of the protocol header includes generating the protocol class field to indicate a protocol class for the undo write request operation when a threshold number of one or more write commit responses have not been received within a time period and generating the protocol class version field to indicate a protocol class version for the undo write request operation when the threshold number of the one or more write commit responses have not been received within the time period.</p>
<p id="p-0226" num="0225">The method continues at step <b>384</b>, which includes steps <b>132</b>-<b>134</b> of <figref idref="DRAWINGS">FIG. 6D</figref>, where the processing module generates an operation code field to indicate the undo write request operation (e.g., an operation code value of 24 hex) and generates a request/response value of zero for a request/response field (e.g., indicating a request message) when the threshold number of the one or more write commit responses have not been received. The method continues at step <b>136</b> of <figref idref="DRAWINGS">FIG. 6D</figref> where the processing module determines a request number value for a request number field.</p>
<p id="p-0227" num="0226">The method continues at step <b>388</b> where the processing module generates a payload of the request DSN frame by generating one or more slice name fields and one or more slice revision number fields. A slice name field includes a slice name corresponding to a write commit response. A slice revision numbering fields includes a slice revision number corresponding to an associated slice name.</p>
<p id="p-0228" num="0227">The method continues with step <b>358</b> of <figref idref="DRAWINGS">FIG. 17B</figref> where the processing module generates a payload length field of the protocol header to include a payload length that represents length of the one or more slice name fields and length the one or more slice revision numbering fields. The method continues at step <b>392</b> where the processing module populates the protocol header and the payload to produce the undo write request message.</p>
<p id="p-0229" num="0228">The method continues at step <b>394</b> where the processing module outputs the request DSN frame that includes the undo write request message in order of the protocol header and one or more slice field pairs, wherein each of the one or more slice field pairs includes, in order, a slice name field of the one or more slice name fields and a slice revision numbering field of the one or more slice revision numbering fields, wherein the slice revision numbering field is associated with the slice name field.</p>
<p id="p-0230" num="0229">Alternatively, or in addition to, the processing module generates a plurality of DSN frames regarding the conclusive write request operation, wherein the plurality of DSN frames includes the request DSN frame. Alternatively, or in addition to, the processing module updates a slice status table to indicate that slice names of the payload of the undo write request message are now not associated with a write-lock status since they are now an undo status and hence a previous write request operational function has concluded (e.g., a write transaction has expired).</p>
<p id="p-0231" num="0230"><figref idref="DRAWINGS">FIG. 20A</figref> is a diagram illustrating an example of DSN frame for an undo write response, which is one of the conclusive write response operations. The frame <b>396</b> includes a protocol header <b>112</b>, which includes one or more of a protocol class field <b>116</b>, a protocol class version field <b>118</b>, an operation code field <b>120</b>, a request/response field <b>122</b>, a request number field <b>124</b>, and a payload length field <b>126</b>. For example, the operation code field <b>120</b> includes an operation code value of 24 hex, the request/response field <b>122</b> includes a value of one, the request number field <b>124</b> includes a request number extracted from an associated undo write request message, and the payload length field <b>126</b> includes a value of zero when the response DSN frame is associated with the undo write response operational function.</p>
<p id="p-0232" num="0231">In an operational example, the undo write response message <b>396</b> is generated and outputted in response to receiving and processing an associated undo write request message when all encoded data slices corresponding to the undo write request message are successfully undone (e.g., each encoded data slice that corresponds to a revision number of the associated undo write request message is deleted).</p>
<p id="p-0233" num="0232"><figref idref="DRAWINGS">FIG. 20B</figref> is a flowchart illustrating an example of generating a undo write response DSN frame, which includes similar steps to <figref idref="DRAWINGS">FIGS. 6D and 14B</figref>. The method begins at step <b>398</b> where a processing module generates fields of a protocol header to include values of the fields of the protocol header. Step <b>398</b> includes steps <b>128</b>-<b>130</b> of <figref idref="DRAWINGS">FIG. 6D</figref> where the processing module generates a protocol class value for a protocol class field and generates a protocol class version value for a protocol class version field. Such generation of the fields of the protocol header includes generating the protocol class field to indicate a protocol class for the conclusive write response operation (e.g., the undo write response operation) and generating the protocol class version field to indicate a protocol class version for the conclusive write response operation.</p>
<p id="p-0234" num="0233">The method continues at step <b>400</b>, which includes steps <b>132</b>-<b>134</b> of <figref idref="DRAWINGS">FIG. 6D</figref>, where the processing module generates an operation code field to indicate the conclusive write response operation (e.g., the undo write response operation associated with an operation code value of 24 hex) and generates a request/response value of one for a request/response field (e.g., indicating a response message). The generating of the operation code field includes creating the undo write response operation or extracting an operational code from a corresponding conclusive write request message (e.g., an undo write request message). The method continues with step <b>136</b> of <figref idref="DRAWINGS">FIG. 6D</figref>, where the processing module determines a request number value associated with a conclusive write request operation for a request number field (e.g., the processing module determines the request number by extracting a request number from an associated undo write request message).</p>
<p id="p-0235" num="0234">The method continues with step <b>308</b> of <figref idref="DRAWINGS">FIG. 14B</figref> where the processing module generates a payload length field of the protocol header to include a predetermined payload length value (e.g., zero for the conclusive write response message). The method continues at step <b>406</b> where the processing module populates the protocol header to produce the undo write response message. The method continues at step <b>408</b> where the processing module outputs in order, the protocol class field, the protocol class version field, the operation code field, the request/response field, the request number field, and the payload length field as the response DSN frame of the undo write response message. Alternatively, or in addition to, the processing module may delete one or more encoded data slices associated with one or more slice names and corresponding one or more revision numbers of the associated undo write request message when the one or more encoded data slices are not associated with a locked status of another open transaction not associated with a current transaction of the conclusive write response operation.</p>
<p id="p-0236" num="0235"><figref idref="DRAWINGS">FIG. 21A</figref> is a diagram illustrating an example of a check request DSN frame that includes a protocol header <b>112</b> and a payload <b>412</b>. The protocol header <b>112</b> includes one or more of a protocol class field <b>116</b>, a protocol class version field <b>118</b>, an operation code field <b>120</b>, a request/response field <b>122</b>, a request number field <b>124</b>, and a payload length field <b>126</b>. For example, the operation code field <b>120</b> includes an operation code value of 30 hex and the request/response field <b>122</b> includes a value of zero when the request DSN frame is associated with the check request operational function.</p>
<p id="p-0237" num="0236">The payload <b>412</b> includes a transaction number field <b>158</b> that includes a transaction value and slice name fields <b>1</b>-<i>n</i>, each of which includes a slice name associated with the transaction value. A slice name is associated with an encoded data slice, which is being checked for existence (e.g., stored in a dispersed storage unit) per the check status request. For example, the payload <b>412</b> includes a transaction number <b>158</b> and three 48 bytes slice name fields that includes slice name <b>1</b>, slice name <b>2</b>, and slice name <b>3</b> when it is desired to check encoded data slices associated with slice names <b>1</b>-<b>3</b>. The method to generate the check request message <b>410</b> is described in greater detail with reference to <figref idref="DRAWINGS">FIG. 21B</figref>.</p>
<p id="p-0238" num="0237"><figref idref="DRAWINGS">FIG. 21B</figref> is a flowchart illustrating an example of generating a check request DSN frame to support a check request operation, which include similar steps to <figref idref="DRAWINGS">FIGS. 6D and 7B</figref>. The method begins at step <b>414</b> where a processing module generates fields of a protocol header to include values of the fields of the protocol header. Step <b>414</b> includes steps <b>128</b>-<b>130</b> of <figref idref="DRAWINGS">FIG. 6D</figref> where the processing module generates a protocol class value for a protocol class field and generates a protocol class version value for a protocol class version field. The generation of the fields of the protocol header includes generating the protocol class field to indicate a protocol class for the check request operation and generating the protocol class version field to indicate a protocol class version for the check request operation.</p>
<p id="p-0239" num="0238">The method continues at step <b>416</b>, which includes steps <b>132</b>-<b>134</b> of <figref idref="DRAWINGS">FIG. 6D</figref>, where the processing module generates an operation code field to indicate a check request operation (e.g., an operation code value of 30 hex) and generates a request/response value of zero for a request/response field. The method continues at step <b>136</b> of <figref idref="DRAWINGS">FIG. 6D</figref> where the processing module determines a request number value for a request number field and continues at step <b>420</b> where the processing module generates a payload section of the request DSN frame regarding the check request operation by generating one or more slice name fields of the payload section to include one or more slice names corresponding to one or more encoded data slices. The processing module may generate the one or more slice names based on information received in a rebuilder message, a previous check request, a list, a predetermination, a check command, an error message, and a table lookup. For example, the processing module generates 1,000 slice names based on receiving a rebuilder message that includes the 1,000 slice names to check if a corresponding plurality of encoded data slices associated with the 1,000 slice names are stored on a dispersed storage unit.</p>
<p id="p-0240" num="0239">The method continues with step <b>168</b> of <figref idref="DRAWINGS">FIG. 7B</figref> where the processing module generates a payload length field of the protocol header to include a payload length that represents a length of the payload section. The method continues with step <b>170</b> of <figref idref="DRAWINGS">FIG. 7B</figref> where the processing module generates a transaction number field of the payload section to include a transaction number value corresponding to the check request operation.</p>
<p id="p-0241" num="0240">The method continues at step <b>426</b> where the processing module populates the protocol header and the payload to produce the check request message. The method continues at step <b>428</b> where the processing module outputs the request DSN frame in order of the protocol header, the transaction number field, and the one or more slice name fields. Alternatively, or in addition to, the processing module generates a plurality of DSN frames regarding the check request operation, wherein the plurality of DSN frames includes the request DSN frame. In addition, the processing module may update a slice status table to indicate that the one or more slice names are associated with a read-lock status to prevent any further modifications of associated encoded data slices until steps associated with the check request operation are completed (e.g., encoded data slices are checked in response to the check request message).</p>
<p id="p-0242" num="0241"><figref idref="DRAWINGS">FIG. 22A</figref> is a diagram illustrating an example of a check response DSN frame that includes a protocol header <b>112</b> and a payload <b>432</b>. The protocol header <b>112</b> includes one or more of a protocol class field <b>116</b>, a protocol class version field <b>118</b>, an operation code field <b>120</b>, a request/response field <b>122</b>, a request number field <b>124</b>, and a payload length field <b>126</b>. For example, the operation code field <b>120</b> includes an operation code value of 30 hex and the request/response field <b>122</b> includes a value of one when the response DSN frame is associated with the check response operational function.</p>
<p id="p-0243" num="0242">The payload <b>432</b> includes one or more slice information sections <b>1</b>-<i>n </i>that correspond to one or more slice names <b>1</b>-<i>n </i>of an associated check request operational function (e.g., one or more slice names <b>1</b>-<i>n </i>extracted from a check request DSN frame). Each slice information section includes a slice revision count field <b>434</b>, one or more slice revision numbering fields <b>1</b>-<i>r</i>, and one or more slice length fields <b>1</b>-<i>r</i>, where r represents a slice revision count value of the slice revision count field <b>434</b>. The slice revision count value indicates a number of visible revisions of an associated slice name included in the slice information section. For example, the slice revision count field is four bytes in length and includes a slice revision count value of 7 when 7 encoded data slices of 7 revisions are visible associated with the corresponding slice name. As another example, the slice revision count value is set to zero when there is no encoded data associated with the corresponding slice name (e.g., the slice may have been deleted).</p>
<p id="p-0244" num="0243">Each slice revision numbering field <b>1</b>-<i>r </i>includes a revision number of the associated slice name. For example, a slice revision numbering field is eight bytes in length and includes a revision number that is greater than other revision numbers of the slice name when an encoded data slice associated with the revision number is a latest encoded data slice of the one or more encoded data slices associated with the slice name. Each slice length field <b>1</b>-<i>r</i>, for each of the revisions of the slice name, includes a length of a corresponding encoded data slice. For example, a slice length field value is set to 2,048 as a number of bytes of the corresponding encoded data slice. As another example, the slice length field value is set to zero when an encoded data slice of the revision of the corresponding slice name does not exist (e.g., the slice was deleted).</p>
<p id="p-0245" num="0244"><figref idref="DRAWINGS">FIG. 22B</figref> is a flowchart illustrating an example of generating a check response frame to support a check response operation, which include similar steps to <figref idref="DRAWINGS">FIG. 6D</figref>. The method begins at step <b>436</b> where a processing module generates fields of a protocol header to include values of the fields of the protocol header. Step <b>436</b> includes steps <b>128</b>-<b>130</b> of <figref idref="DRAWINGS">FIG. 6D</figref> where the processing module generates a protocol class value for a protocol class field and generates a protocol class version value for a protocol class version field. The generation of the fields of the protocol header includes generating the protocol class field to indicate a protocol class for the check response operation and generating the protocol class version field to indicate a protocol class version for the check response operation.</p>
<p id="p-0246" num="0245">The method continues at step <b>438</b>, which includes steps <b>132</b>-<b>134</b> of <figref idref="DRAWINGS">FIG. 6D</figref>, where the processing module generates an operation code field to indicate a check response operation (e.g., an operation code value of 30 hex) and generates a request/response value of one for a request/response field. The method continues with step <b>136</b> of <figref idref="DRAWINGS">FIG. 6D</figref> where the processing module determines a request number value for a request number field. The method continues at step <b>442</b> where the processing module generates a payload of the response DSN frame regarding one or more slice names of the check response operation to include one or more slice information sections. The generating of a slice information section includes generating a slice revision count field to indicate a number of revisions of the slice name and generating a slice revision number field to indicate a number of revisions of the slice name. Note that the slice revision count field may be set to zero when there are no revisions of the slice name (e.g., a deleted encoded data slice).</p>
<p id="p-0247" num="0246">The method continues at step <b>444</b> where the processing module generates a slice length field for each of the revisions of the slice name. The method continues at step <b>446</b> where the processing module generates a payload length field of the protocol header to include a payload length that represents a length of the slice information sections. The method continues at step <b>448</b> where the processing module populates the protocol header and the payload to produce the check response message.</p>
<p id="p-0248" num="0247">The method continues at step <b>450</b> where the processing module outputs the response DSN frame in order of the protocol header, and the one or more slice information sections, and, within each of the one or more slice information sections, in an order of the slice revision count field, and for each of the revisions of the slice name, the slice revision numbering field and the slice length field. In addition, the processing module may establish an error condition based on one or more of the one or more slice names being associated with a locked encoded data slice state, a transaction number error (e.g., a slice name is locked by a second transaction number different from any transaction number associated with a corresponding read request message), the one or more slice names are associated with one or more encoded data slices that are not locally stored (e.g., a wrong DSN address), and a check request message is not authorized (e.g., a requester is not authorized to access such a portion of a DSN). The processing module discards the response DSN frame when the error condition is established.</p>
<p id="p-0249" num="0248"><figref idref="DRAWINGS">FIG. 23A</figref> is a diagram illustrating an example of a list range request DSN frame that includes a protocol header <b>112</b> and a payload <b>454</b>. The protocol header <b>112</b> includes one or more of a protocol class field <b>116</b>, a protocol class version field <b>118</b>, an operation code field <b>120</b>, a request/response field <b>122</b>, a request number field <b>124</b>, and a payload length field <b>126</b>. For example, the operation code field <b>120</b> includes an operation code value of 60 hex and the request/response field <b>122</b> includes a value of zero when the request DSN frame is associated with the list range request operational function (e.g., retrieve a list of encoded data slices (or slices names) stored by a DS unit within the range of slices names in the list request).</p>
<p id="p-0250" num="0249">The payload <b>454</b> includes a start slice name range field <b>456</b> that includes a start slice name, an end slice name range field <b>458</b> that includes an end slice name, and a maximum response count field <b>460</b> that includes a maximum response count. The start slice name range field <b>456</b> specifies a slice name to start an overall list range request operational function. The end slice name range field <b>458</b> specifies a slice name to end the overall list range request operational function. The maximum response count field <b>460</b> specifies a maximum number of slice names to list in a subsequent list range response message.</p>
<p id="p-0251" num="0250"><figref idref="DRAWINGS">FIG. 23B</figref> is a flowchart illustrating an example of generating a list range request DSN frame to support a list range request operation, which includes similar steps to <figref idref="DRAWINGS">FIG. 6D</figref>. The method begins at step <b>462</b> where a processing module generates fields of a protocol header to include values of the fields of the protocol header. Step <b>462</b> includes steps <b>128</b>-<b>130</b> of <figref idref="DRAWINGS">FIG. 6D</figref> where the processing module generates a protocol class value for a protocol class field and generates a protocol class version value for a protocol class version field. The generation of the fields of the protocol header includes generating the protocol class field to indicate a protocol class for the list range request operation and generating the protocol class version field to indicate a protocol class version for the list range request operation.</p>
<p id="p-0252" num="0251">The method continues at step <b>464</b>, which includes steps <b>132</b>-<b>134</b> of <figref idref="DRAWINGS">FIG. 6D</figref>, where the processing module generates an operation code field to indicate the list range request operation (e.g., an operation code value of 60 hex) and generates a request/response value of zero for a request/response field. The method continues at step <b>136</b> of <figref idref="DRAWINGS">FIG. 6D</figref> where the processing module determines a request number value for a request number field.</p>
<p id="p-0253" num="0252">The method continues at step <b>468</b> where the processing module generates a payload section of the request DSN frame regarding the list range request operation by generating a start slice name field of the payload section to include a start slice name of a slice name range. The generating of the start slice name includes one of establishing the start slice name as a first slice name in a spectrum of slice names (e.g. all possible slice names in the system or a portion thereof), establishing the start slice name as an intermediate slice name in the spectrum of slice names, and determining the start slice name based on a response to a previous list range request operation. The spectrum of slice names includes one or more ranges of slice names. For example, the processing module generates the start slice name as a first slice name of a first slice name range of a first spectrum of slice names when a list range request operational function is initiated. As another example, the processing module generates the start slice name as an intermediate slice name of a fifth slice name range of the first spectrum of slice names when the list range request operational function has been initiated but is not finished. As yet another example, the processing module determines the start slice name as a last slice name extracted from a response from a previous list range request operation.</p>
<p id="p-0254" num="0253">At step <b>468</b> the processing module generates an end slice name field of the payload section to include an end slice name of the slice name range. The generating of the end slice name includes one of establishing the end slice name as a last slice name in the spectrum of slice names, establishing the end slice name as a second intermediate slice name in the spectrum of slice names, and determining the end slice name based on the response to the previous list range request operation. For example, the processing module generates the end slice name as a last slice name of a final slice name range of a first spectrum of slice names when the list range request operational function is completing. As another example, the processing module generates the end slice name as a second intermediate slice name of the fifth slice name range of the first spectrum of slice names when the list range request operational function has been initiated but is not finished. As yet another example, the processing module determines the end slice name as the last slice name extracted from the response from the previous list range request operation incremented by an increment value (e.g., a maximum response count).</p>
<p id="p-0255" num="0254">The method continues at step <b>470</b> where the processing module generates a maximum response count field of the payload section to include a maximum slice name response count. The generating of the maximum response count includes at least one of determining the maximum response count based on a number of slice names in the spectrum of slice names, determining the maximum response count based on a DSN performance indicator (e.g., indicating when a very large response message is undesirable), and determining the maximum response count based on the response to the previous list range request operation. For example, processing module generates the maximum slice name response count based on a number of slice names of the previous list range request operation.</p>
<p id="p-0256" num="0255">The method continues at step <b>472</b> where the processing module determines a length of the start slice name field, a length of the end slice name field, a length of the maximum response count field, and generates a payload length for a payload length field based on the length of the start slice name field, the length of the end slice name field, and the length of the maximum response count field. The method continues at step <b>474</b> where the processing module populates the payload length field of the protocol header to include the payload length and populates the payload section with the start slice name field, the end slice name field, and the maximum response count field.</p>
<p id="p-0257" num="0256">The method continues at step <b>476</b> where the processing module outputs the request DSN frame in order of the protocol header, the start slice name field, the end slice name field, and the maximum response count field to send a list range request message. Alternatively, or in addition to, the processing module generates a plurality of DSN frames regarding the list range request operation, wherein the plurality of DSN frames includes the request DSN frame.</p>
<p id="p-0258" num="0257"><figref idref="DRAWINGS">FIG. 24A</figref> is a diagram illustrating an example of a list range response DSN frame that includes a protocol header <b>112</b> and a payload <b>480</b>. The protocol header <b>112</b> includes one or more of a protocol class field <b>116</b>, a protocol class version field <b>118</b>, an operation code field <b>120</b>, a request/response field <b>122</b>, a request number field <b>124</b>, and a payload length field <b>126</b>. For example, the operation code field <b>120</b> includes an operation code value of 60 hex and the request/response field <b>122</b> includes a value of one when the response DSN frame is associated with the list range response operational function.</p>
<p id="p-0259" num="0258">The payload <b>480</b> includes a last slice name field <b>482</b>, which includes a last slice name of one or more slice names. The last slice name is associated with a last slice information section and/or with one or more slice information sections <b>1</b>-<i>n </i>that correspond to one or more slice names <b>1</b>-<i>n </i>of the list range response operational function. Each slice information section <b>1</b>-<i>n </i>includes a slice name field that includes a slice name, a slice revision count field <b>484</b>, one or more slice revision numbering fields <b>1</b>-<i>r</i>, and one or more slice length fields <b>1</b>-<i>r</i>, where r represents a slice revision count value of the slice revision count field <b>484</b>. The slice revision count value indicates a number of visible revisions of an associated slice name included in the slice information section. For example, the slice revision count field is four bytes in length and includes a slice revision count value of 4 when 4 encoded data slices of 4 revisions are visible associated with the slice name. As another example, the slice revision count value is set to zero when there is no encoded data slice that is associated with the slice name (e.g., the encoded data slice may have been deleted).</p>
<p id="p-0260" num="0259">Each slice revision numbering field <b>1</b>-<i>r </i>includes a revision number of the slice name. For example, a slice revision numbering field is eight bytes in length and includes a revision number that is greater than other revision numbers of the slice name when an encoded data slice associated with the revision number is a latest encoded data slice associated with the slice name. Each slice length field <b>1</b>-<i>r</i>, for each of the revisions of the slice name, includes a length of a corresponding encoded data slice. For example, a slice length field value is set to 2,048 as a number of bytes of the corresponding encoded data slice. As another example, the slice length field value is set to zero when an encoded data slice of the revision of the corresponding slice name does not exist (e.g., the slice was deleted).</p>
<p id="p-0261" num="0260"><figref idref="DRAWINGS">FIG. 24B</figref> is a flowchart illustrating an example of generating a list range response (DSN frame to support a list range response operation. The method begins at step <b>486</b> where a processing module generates fields of a protocol header to include values of the fields of the protocol header. Step <b>486</b> includes steps <b>128</b>-<b>130</b> of <figref idref="DRAWINGS">FIG. 6D</figref> where the processing module generates a protocol class value for a protocol class field and generates a protocol class version value for a protocol class version field. The generation of the fields of the protocol header includes generating the protocol class field to indicate a protocol class for the list range response operation and generating the protocol class version field to indicate a protocol class version for the list range response operation.</p>
<p id="p-0262" num="0261">The method continues at step <b>488</b>, which includes steps <b>132</b>-<b>134</b> of <figref idref="DRAWINGS">FIG. 6D</figref>, where the processing module generates an operation code field to indicate the list range response operation (e.g., an operation code value of 60 hex) and generates a request/response value of one for a request/response field. The method continues with step <b>136</b> of <figref idref="DRAWINGS">FIG. 6D</figref> where the processing module determines a request number value for a request number field.</p>
<p id="p-0263" num="0262">The method continues at step <b>492</b> where the processing module determines one or more slice information sections by at least one of determining a number of slice names of one or more slice names in a slice name range associated with a list range request, determining a number of slice names based on a DSN performance indicator, and determining a number of slice names associated with the list range response operation.</p>
<p id="p-0264" num="0263">The method continues at step <b>494</b> where the processing module generates a payload of the response DSN frame regarding the one or more slice names of the list range response operation to include generating a last slice name field to include a last slice name and generating the one or more slice information sections, wherein a slice information section of the one or more slice information sections includes generating a slice name field to include a slice name of the one or more slice names, generating a slice revision count field to indicate a number of revisions of the slice name, generating a slice revision numbering field for each of the revisions of the slice name to include a revision number to produce one or more slice revision numbering fields, and generating a slice length field for each of the revisions of the slice name to include a length of a corresponding encoded data slice.</p>
<p id="p-0265" num="0264">The method continues at step <b>496</b> where the processing module determines the last slice name as a slice name associated with a last slice information section of the one or more slice information sections. Note that the last slice name indicates a starting point for a subsequent list request operational function and may include a last slice name of a slice name range associated with a dispersed storage unit when there are no more slice names to be listed. At step <b>496</b> the processing module generates a payload length field of the protocol header to include a payload length that represents a length of the slice name field and the length of the one or more slice information sections. The method continues at step <b>498</b> where the processing module populates the protocol header and the payload to produce the list range response message.</p>
<p id="p-0266" num="0265">The method continues at step <b>500</b> where the processing module outputs the response DSN frame in order of the protocol header, the last slice name field, and the one or more slice information sections and, within the slice information section, in an order of the slice revision count field, and, for each of the revisions of the slice name, the slice revision numbering field and the slice length field. In addition, the processing module may establish an error condition based on one or more of the one or more slice names being associated with a locked encoded data slice state, the one or more slice names are associated with one or more encoded data slices that are not locally stored (e.g., a wrong DSN address), and a list range request message is not authorized (e.g., a requester is not authorized to access such a portion of a DSN). The processing module discards the response DSN frame when the error condition is established.</p>
<p id="p-0267" num="0266"><figref idref="DRAWINGS">FIG. 25A</figref> is a diagram illustrating an example of a list digest request DSN frame that includes a protocol header <b>112</b> and a payload <b>504</b>. The protocol header <b>112</b> includes one or more of a protocol class field <b>116</b>, a protocol class version field <b>118</b>, an operation code field <b>120</b>, a request/response field <b>122</b>, a request number field <b>124</b>, and a payload length field <b>126</b>. For example, the operation code field <b>120</b> includes an operation code value of 61 hex and the request/response field <b>122</b> includes a value of zero when the request DSN frame is associated with the list digest request operational function.</p>
<p id="p-0268" num="0267">The payload <b>504</b> includes a start slice name range field <b>506</b> that includes a start slice name, an end slice name range field <b>508</b> that includes an end slice name, and a maximum response count field <b>510</b> that includes a maximum response count. The start slice name range field <b>506</b> specifies a slice name to start an overall list digest request operational function. The end slice name range field <b>508</b> specifies a slice name to end the overall list digest request operational function. The maximum response count field <b>510</b> specifies a maximum number of slice names to include in a digest of the list digest request operational function.</p>
<p id="p-0269" num="0268"><figref idref="DRAWINGS">FIG. 25B</figref> is a flowchart illustrating an example of generating a list digest request DSN frame to support a list digest request operation. The method begins at step <b>512</b> where a processing module generates fields of a protocol header to include values of the fields of the protocol header. Step <b>512</b> includes steps <b>128</b>-<b>130</b> of <figref idref="DRAWINGS">FIG. 6D</figref> where the processing module generates a protocol class value for a protocol class field and generates a protocol class version value for a protocol class version field. The generation of the fields of the protocol header includes generating the protocol class field to indicate a protocol class for the list digest request operation and generating the protocol class version field to indicate a protocol class version for the list digest request operation.</p>
<p id="p-0270" num="0269">The method continues at step <b>514</b>, which includes steps <b>132</b>-<b>134</b> of <figref idref="DRAWINGS">FIG. 6D</figref>, where the processing module generates an operation code field to indicate the list digest request operation (e.g., an operation code value of 61 hex) and generates a request/response value of zero for a request/response field. The method continues at step <b>136</b> of <figref idref="DRAWINGS">FIG. 6D</figref> where the processing module determines a request number value for a request number field.</p>
<p id="p-0271" num="0270">The method continues at step <b>518</b> where the processing module generates a payload section of the request DSN frame regarding the list digest request operation by generating a start slice name field of the payload section to include a start slice name of a slice name range. The generating of the start slice name includes one of establishing the start slice name as a first slice name in a spectrum of slice names, establishing the start slice name as an intermediate slice name in the spectrum of slice names, and determining the start slice name based on a response to a previous list digest request operation.</p>
<p id="p-0272" num="0271">At step <b>518</b> the processing module generates an end slice name field of the payload section to include an end slice name of the slice name range. The generating of the end slice name includes one of establishing the end slice name as a last slice name in the spectrum of slice names, establishing the end slice name as a second intermediate slice name in the spectrum of slice names, and determining the end slice name based on the response to the previous list digest request operation. For example, the processing module generates the end slice name as a last slice name of a final slice name range of a first spectrum of slice names when the list digest request operational function is completing. As another example, the processing module generates the end slice name as a second intermediate slice name of the fifth slice name range of the first spectrum of slice names when the list digest request operational function has been initiated but is not finished. As yet another example, the processing module determines the end slice name as the last slice name extracted from the response from the previous list digest request operation incremented by an increment value (e.g., a maximum response count).</p>
<p id="p-0273" num="0272">The method continues at step <b>520</b> where the processing module generates a maximum response count field of the payload section to include a maximum slice name response count. The generating of the maximum response count includes at least one of determining the maximum response count based on a number of slice names in the spectrum of slice names, determining the maximum response count based on a DSN performance indicator (e.g., indicating when a very large response message is undesirable), and determining the maximum response count based on the response to the previous list digest request operation. For example, processing module generates the maximum slice name response count based on a number of slice names of the previous list digest request operation.</p>
<p id="p-0274" num="0273">The method continues at step <b>472</b> of <figref idref="DRAWINGS">FIG. 23B</figref> where the processing module generates a payload length for a payload length field. The method continues at step <b>524</b> where the processing module populates the payload length field of the protocol header to include the payload length and populates the payload section with the start slice name field, the end slice name field, and the maximum response count field.</p>
<p id="p-0275" num="0274">The method continues at step <b>526</b> where the processing module outputs the request DSN frame in order of the protocol header, the start slice name field, the end slice name field, and the maximum response count field to send a list digest request message. Alternatively, or in addition to, the processing module generates a plurality of DSN frames regarding the list digest request operation, wherein the plurality of DSN frames includes the request DSN frame.</p>
<p id="p-0276" num="0275"><figref idref="DRAWINGS">FIG. 26A</figref> is a diagram illustrating an example of a list digest DSN frame that <b>528</b> includes a protocol header <b>112</b> and a payload <b>530</b>. The protocol header <b>112</b> includes one or more of a protocol class field <b>116</b>, a protocol class version field <b>118</b>, an operation code field <b>120</b>, a request/response field <b>122</b>, a request number field <b>124</b>, and a payload length field <b>126</b>. For example, the operation code field <b>120</b> includes an operation code value of 61 hex and the request/response field <b>122</b> includes a value of one when the response DSN frame is associated with the list digest response operational function.</p>
<p id="p-0277" num="0276">The payload <b>530</b> includes a digest length field <b>532</b> including a length of a digest, a digest field <b>534</b> that includes the digest, wherein the digest includes a representation of slice names in a slice name range, a last slice name field <b>536</b> that includes a last slice name of the slice name range, and a slice count field <b>538</b> that includes an indication of a number of slice names of the list digest response operation. For example, the digest length field <b>532</b> is two bytes in length and includes a length of 64 bytes when the digest is 512 bits.</p>
<p id="p-0278" num="0277">Such a slice count field indicates a number of slice names of the list digest response operation that is less than or equal to a value of a maximum response count in a corresponding list digest request message. For example, the slice count field <b>538</b> is four bytes in length and includes an indication of 1,000,000 slice names of the list digest response operation when there is at least one visible (e.g., retrievable) revision of an encoded data slice associated with each slice name of 1,000,000 slice names. As another example, the indication of the number of slice names is zero when there are no visible encoded data slices corresponding to slice names within the slice name range.</p>
<p id="p-0279" num="0278">The representation of slice names in the slice name range includes a hashing function result. For example, the digest represents a hash over a slice name/revision list that includes one or more slice names of the slice name range and one or more corresponding revision numbers for each slice name, wherein each slice name of the one more slice names corresponds to at least one visible encoded data slice.</p>
<p id="p-0280" num="0279"><figref idref="DRAWINGS">FIG. 26B</figref> is a flowchart illustrating an example of generating a list digest response frame to support a list digest response operation. The method begins at step <b>540</b> where a processing module generates fields of a protocol header to include values of the fields of the protocol header. Step <b>540</b> includes steps <b>128</b>-<b>130</b> of <figref idref="DRAWINGS">FIG. 6D</figref> where the processing module generates a protocol class value for a protocol class field and generates a protocol class version value for a protocol class version field. The generation of the fields of the protocol header includes generating the protocol class field to indicate a protocol class for the list digest response operation and generating the protocol class version field to indicate a protocol class version for the list digest response operation.</p>
<p id="p-0281" num="0280">The method continues at step <b>542</b>, which includes steps <b>132</b>-<b>134</b> of <figref idref="DRAWINGS">FIG. 6D</figref>, where the processing module generates an operation code field to indicate the list digest response operation (e.g., an operation code value of 61 hex) and generates a request/response value of one for a request/response field. The method continues with step <b>136</b> of <figref idref="DRAWINGS">FIG. 6D</figref> where the processing module determines a request number value for a request number field.</p>
<p id="p-0282" num="0281">The method continues at step <b>546</b> where the processing module determines a slice name range based on at least one of a start slice name of a list digest request, an end slice name of the list digest request, a last slice name of a list digest response, and a DSN performance indicator. For example, the processing module determines the slice name range from the start slice name of the list digest request to the end slice name of the list digest request. As another example, the processing module determines the slice name range as half of the slice names from the start slice name to the end slice name of the list digest request when the DSN performance indicator compares unfavorably to a performance threshold (e.g., limited processing availability).</p>
<p id="p-0283" num="0282">The method continues at step <b>548</b> where the processing module generates a payload of the response DSN frame regarding one or more slice names of the list digest response operation by generating a digest length field to include a length of a digest, wherein the digest includes a representation of slice names in the slice name range. The processing module generates a digest field to include the digest, which may be a hash function of at least a portion of a slice name/revision list associated with at least some of a plurality of slices names within the slice name range. The slice name/revision list includes, for a slice name of the plurality of slices names, a slice name of the one or more slice names, a slice revision count indicating a number of revisions of the slice name, one or more slice revision numbers for each of the revisions of the slice name, and one or more slice length indicators corresponding to each of the revisions of the slice name to include a length of a corresponding encoded data slice.</p>
<p id="p-0284" num="0283">At step <b>548</b>, the processing module generates a last slice name field to include a last slice name of the slice name range. The generation of the last slice name includes one of selecting an end slice name of the slice name range and using a final slice name as indicated in a list digest request DSN frame. Note that the last slice name indicates a starting point for a subsequent list digest request operational function and may include a last slice name of a slice name range associated with a dispersed storage unit when there are no more slice names to be listed. The processing module generates a slice count field to indicate a number of slice names of the list digest response operation. The generation of the number of slice names of the list digest response operation includes at least one of determining the number based on the plurality of slices names within the slice name range and determining the number based on visible encoded data slices associated with at least some of the plurality of slice names.</p>
<p id="p-0285" num="0284">The method continues at step <b>550</b> where the processing module generates a payload length field of the protocol header to include a payload length that represents a sum of a length of the digest length field, the digest field, the last slice name field, and the slice count field. The method continues at step <b>552</b> where the processing module populates the payload section with digest length field, the digest field, the last slice name field, and the slice count field to produce the list digest response message.</p>
<p id="p-0286" num="0285">The method continues at step <b>554</b> where the processing module outputs the response DSN frame in order of the protocol header, the digest length field, the digest field, the last slice name field, and the slice count field to send the list digest response message. Alternatively, or in addition to, the processing module establishes an error condition based on one or more of the one or more slice names being associated with a locked encoded data slice state, the one or more slice names are associated with one or more encoded data slices that are not locally stored, and a list digest message is not authorized. The processing module discards the DSN frame when the error condition is established.</p>
<p id="p-0287" num="0286">As may be used herein, the terms &#x201c;substantially&#x201d; and &#x201c;approximately&#x201d; provides an industry-accepted tolerance for its corresponding term and/or relativity between items. Such an industry-accepted tolerance ranges from less than one percent to fifty percent and corresponds to, but is not limited to, component values, integrated circuit process variations, temperature variations, rise and fall times, and/or thermal noise. Such relativity between items ranges from a difference of a few percent to magnitude differences. As may also be used herein, the term(s) &#x201c;operably coupled to&#x201d;, &#x201c;coupled to&#x201d;, and/or &#x201c;coupling&#x201d; includes direct coupling between items and/or indirect coupling between items via an intervening item (e.g., an item includes, but is not limited to, a component, an element, a circuit, and/or a module) where, for indirect coupling, the intervening item does not modify the information of a signal but may adjust its current level, voltage level, and/or power level. As may further be used herein, inferred coupling (i.e., where one element is coupled to another element by inference) includes direct and indirect coupling between two items in the same manner as &#x201c;coupled to&#x201d;. As may even further be used herein, the term &#x201c;operable to&#x201d; or &#x201c;operably coupled to&#x201d; indicates that an item includes one or more of power connections, input(s), output(s), etc., to perform, when activated, one or more its corresponding functions and may further include inferred coupling to one or more other items. As may still further be used herein, the term &#x201c;associated with&#x201d;, includes direct and/or indirect coupling of separate items and/or one item being embedded within another item. As may be used herein, the term &#x201c;compares favorably&#x201d;, indicates that a comparison between two or more items, signals, etc., provides a desired relationship. For example, when the desired relationship is that signal <b>1</b> has a greater magnitude than signal <b>2</b>, a favorable comparison may be achieved when the magnitude of signal <b>1</b> is greater than that of signal <b>2</b> or when the magnitude of signal <b>2</b> is less than that of signal <b>1</b>.</p>
<p id="p-0288" num="0287">While the transistors in the above described figure(s) is/are shown as field effect transistors (FETs), as one of ordinary skill in the art will appreciate, the transistors may be implemented using any type of transistor structure including, but not limited to, bipolar, metal oxide semiconductor field effect transistors (MOSFET), N-well transistors, P-well transistors, enhancement mode, depletion mode, and zero voltage threshold (VT) transistors.</p>
<p id="p-0289" num="0288">The present invention has also been described above with the aid of method steps illustrating the performance of specified functions and relationships thereof. The boundaries and sequence of these functional building blocks and method steps have been arbitrarily defined herein for convenience of description. Alternate boundaries and sequences can be defined so long as the specified functions and relationships are appropriately performed. Any such alternate boundaries or sequences are thus within the scope and spirit of the claimed invention.</p>
<p id="p-0290" num="0289">The present invention has been described, at least in part, in terms of one or more embodiments. An embodiment of the present invention is used herein to illustrate the present invention, an aspect thereof, a feature thereof, a concept thereof, and/or an example thereof. A physical embodiment of an apparatus, an article of manufacture, a machine, and/or of a process that embodies the present invention may include one or more of the aspects, features, concepts, examples, etc. described with reference to one or more of the embodiments discussed herein.</p>
<p id="p-0291" num="0290">The present invention has been described above with the aid of functional building blocks illustrating the performance of certain significant functions. The boundaries of these functional building blocks have been arbitrarily defined for convenience of description. Alternate boundaries could be defined as long as the certain significant functions are appropriately performed. Similarly, flow diagram blocks may also have been arbitrarily defined herein to illustrate certain significant functionality. To the extent used, the flow diagram block boundaries and sequence could have been defined otherwise and still perform the certain significant functionality. Such alternate definitions of both functional building blocks and flow diagram blocks and sequences are thus within the scope and spirit of the claimed invention. One of average skill in the art will also recognize that the functional building blocks, and other illustrative blocks, modules and components herein, can be implemented as illustrated or by discrete components, application specific integrated circuits, processors executing appropriate software and the like or any combination thereof.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A method for execution by one or more computing devices of a dispersed storage network (DSN), the method comprises:
<claim-text>generating a set of dispersed storage network (DSN) frames regarding a DSN operation, wherein generating the set of DSN frames includes:
<claim-text>generating a common protocol header for each of the set of DSN frames, wherein the common protocol header includes:
<claim-text>a protocol class field to indicate a data storage protocol;</claim-text>
<claim-text>a protocol class version field to indicate a version of the data storage protocol;</claim-text>
<claim-text>an operation code (opcode) field to indicate the DSN operation;</claim-text>
<claim-text>a request/response field to indicate whether a corresponding one of the DSN frames is a request frame or a response frame;</claim-text>
<claim-text>a request number field to uniquely identify the DSN operation; and</claim-text>
<claim-text>a payload length field;</claim-text>
</claim-text>
<claim-text>generating a unique payload section for each DSN frame of the set of DSN frames to produce a set of unique payload sections, wherein the unique payload section includes target specific information regarding the DSN operation; and</claim-text>
</claim-text>
<claim-text>sending the set of DSN frames to one or more DSN devices, wherein one of the set of DSN frames includes the common protocol header and one of the set of unique payload sections.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the sending of a DSN frame of the set of DSN frames comprises:
<claim-text>arranging the protocol header in an order of the protocol class field, the protocol class version field, the opcode field, the request/response field, the request number field, and the payload length field.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> further comprises:
<claim-text>when the DSN operation is a read request message:
<claim-text>generating the set of unique payload sections to include a set of slice names corresponding to a set of encoded data slices to be read from memory of the DSN; and</claim-text>
<claim-text>generating the request/response field to indicate a request message; and</claim-text>
</claim-text>
<claim-text>when the DSN operation is a read response message:
<claim-text>generating one of the set of unique payload sections to include a retrieved encoded data slice corresponding to one of the set of slice names; and</claim-text>
<claim-text>generating the request/response field to indicate a response message.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> further comprises:
<claim-text>when the DSN operation is a write request message:
<claim-text>generating the set of unique payload sections to include a set of encoded data slice to be written into memory of the DSN; and</claim-text>
<claim-text>generating the request/response field to indicate a request message; and</claim-text>
</claim-text>
<claim-text>when the DSN operation is a write request message:
<claim-text>generating one of the set of unique payload sections to include an indication of success of a phase of writing a corresponding one of the set of encoded data slices into the memory of the DSN; and</claim-text>
<claim-text>generating the request/response field to indicate a response message.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> further comprises:
<claim-text>determining the version of the data storage protocol based on a protocol class value by at least one of:
<claim-text>retrieving the protocol class value from a protocol class list based on the operational function;</claim-text>
<claim-text>when the request/response field indicates the request frame, utilizing the protocol class value of the request frame;</claim-text>
<claim-text>retrieving the protocol class value from a support protocol class list;</claim-text>
<claim-text>retrieving the protocol class value from a unit-module type protocol class list; and</claim-text>
<claim-text>extracting the protocol class value from a negotiation result.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the DSN operation comprises at least one of:
<claim-text>a read operation;</claim-text>
<claim-text>a check operation;</claim-text>
<claim-text>a list range operation;</claim-text>
<claim-text>a write operation;</claim-text>
<claim-text>a checked write operation;</claim-text>
<claim-text>a commit operation;</claim-text>
<claim-text>a rollback operation;</claim-text>
<claim-text>a finalize operation;</claim-text>
<claim-text>an undo operation; and</claim-text>
<claim-text>a list digest operation.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> further comprises:
<claim-text>generating a value to uniquely identify the DSN operation, wherein the value is generated by at least one of:
<claim-text>transforming a random number generator output to produce the value;</claim-text>
<claim-text>transforming a variable reference number to produce the value;</claim-text>
<claim-text>adding an increment to a previous request number value to produce the value;</claim-text>
<claim-text>selecting a predetermined number to produce the value; and</claim-text>
<claim-text>when the request/response field indicates the request frame, utilizing the value of the request frame.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. A computer comprises:
<claim-text>an interface;</claim-text>
<claim-text>a memory; and</claim-text>
<claim-text>one or more processors operably coupled to the interface and to the memory, where one or more processors is operable to:
<claim-text>generate a set of dispersed storage network (DSN) frames regarding a DSN operation, wherein generating the set of DSN frames includes:
<claim-text>generate a common protocol header for each of the set of DSN frames, wherein the common protocol header includes:
<claim-text>a protocol class field to indicate a data storage protocol;</claim-text>
<claim-text>a protocol class version field to indicate a version of the data storage protocol;</claim-text>
<claim-text>an operation code (opcode) field to indicate the DSN operation;</claim-text>
<claim-text>a request/response field to indicate whether a corresponding one of the DSN frames is a request frame or a response frame;</claim-text>
<claim-text>a request number field to uniquely identify the DSN operation; and</claim-text>
<claim-text>a payload length field;</claim-text>
</claim-text>
<claim-text>generate a unique payload section for each DSN frame of the set of DSN frames to produce a set of unique payload sections, wherein the unique payload section includes target specific information regarding the DSN operation; and</claim-text>
</claim-text>
<claim-text>send, via the interface, the set of DSN frames to one or more DSN devices, wherein one of the set of DSN frames includes the common protocol header and one of the set of unique payload sections.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The computer <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the one or more processors further functions to:
<claim-text>arrange the protocol header in an order of the protocol class field, the protocol class version field, the opcode field, the request/response field, the request number field, and the payload length field.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The computer of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the one or more processors further functions to:
<claim-text>when the DSN operation is a read request message:
<claim-text>generate the set of unique payload sections to include a set of slice names corresponding to a set of encoded data slices to be read from memory of the DSN; and</claim-text>
<claim-text>generate the request/response field to indicate a request message; and</claim-text>
</claim-text>
<claim-text>when the DSN operation is a read response message:
<claim-text>generate one of the set of unique payload sections to include a retrieved encoded data slice corresponding to one of the set of slice names; and generate the request/response field to indicate a response message.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The computer of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the one or more processors further functions to:
<claim-text>when the DSN operation is a write request message:
<claim-text>generate the set of unique payload sections to include a set of encoded data slice to be written into memory of the DSN; and</claim-text>
<claim-text>generate the request/response field to indicate a request message; and</claim-text>
</claim-text>
<claim-text>when the DSN operation is a write request message:
<claim-text>generate one of the set of unique payload sections to include an indication of success of a phase of writing a corresponding one of the set of encoded data slices into the memory of the DSN; and</claim-text>
<claim-text>generate the request/response field to indicate a response message.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The computer of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the one or more processors further functions to:
<claim-text>determine the version of the data storage protocol based on a protocol class value by at least one of:
<claim-text>retrieving, from the memory, the protocol class value from a protocol class list based on the operational function;</claim-text>
<claim-text>when the request/response field indicates the request frame, utilizing the protocol class value of the request frame;</claim-text>
<claim-text>retrieving, from the memory, the protocol class value from a support protocol class list;</claim-text>
<claim-text>retrieving, from the memory, the protocol class value from a unit-module type protocol class list; and</claim-text>
<claim-text>extracting the protocol class value from a negotiation result.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The computer <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the DSN operation comprises at least one of:
<claim-text>a read operation;</claim-text>
<claim-text>a check operation;</claim-text>
<claim-text>a list range operation;</claim-text>
<claim-text>a write operation;</claim-text>
<claim-text>a checked write operation;</claim-text>
<claim-text>a commit operation;</claim-text>
<claim-text>a rollback operation;</claim-text>
<claim-text>a finalize operation;</claim-text>
<claim-text>an undo operation; and</claim-text>
<claim-text>a list digest operation.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The computer of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the one or more processors further functions to:
<claim-text>generate a value to uniquely identify the DSN operation, wherein the value is generated by at least one of:
<claim-text>transforming a random number generator output to produce the value;</claim-text>
<claim-text>transforming a variable reference number to produce the value;</claim-text>
<claim-text>adding an increment to a previous request number value to produce the value;</claim-text>
<claim-text>selecting a predetermined number to produce the value; and</claim-text>
<claim-text>when the request/response field indicates the request frame, utilizing the value of the request frame.</claim-text>
</claim-text>
</claim-text>
</claim>
</claims>
</us-patent-grant>

<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08627163-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08627163</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>12055207</doc-number>
<date>20080325</date>
</document-id>
</application-reference>
<us-application-series-code>12</us-application-series-code>
<us-term-of-grant>
<us-term-extension>1297</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>H</section>
<class>04</class>
<subclass>L</subclass>
<main-group>1</main-group>
<subgroup>00</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>714746</main-classification>
<further-classification>714 41</further-classification>
<further-classification>714728</further-classification>
<further-classification>714739</further-classification>
</classification-national>
<invention-title id="d2e53">Error-correction forced mode with M-sequence</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>4782487</doc-number>
<kind>A</kind>
<name>Smelser</name>
<date>19881100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714723</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>4870346</doc-number>
<kind>A</kind>
<name>Mydill et al.</name>
<date>19890900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>324 731</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>5138619</doc-number>
<kind>A</kind>
<name>Fasang et al.</name>
<date>19920800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714718</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>5142541</doc-number>
<kind>A</kind>
<name>Kim et al.</name>
<date>19920800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714764</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>5268949</doc-number>
<kind>A</kind>
<name>Watanabe et al.</name>
<date>19931200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>5276690</doc-number>
<kind>A</kind>
<name>Lee et al.</name>
<date>19940100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714703</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>5502732</doc-number>
<kind>A</kind>
<name>Arroyo et al.</name>
<date>19960300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714746</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>5574855</doc-number>
<kind>A</kind>
<name>Rosich et al.</name>
<date>19961100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714 41</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>5631913</doc-number>
<kind>A</kind>
<name>Maeda</name>
<date>19970500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714732</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>5872910</doc-number>
<kind>A</kind>
<name>Kuslak et al.</name>
<date>19990200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714 41</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>6397357</doc-number>
<kind>B1</kind>
<name>Cooper</name>
<date>20020500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714703</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>6539503</doc-number>
<kind>B1</kind>
<name>Walker</name>
<date>20030300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714703</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00013">
<document-id>
<country>US</country>
<doc-number>6751756</doc-number>
<kind>B1</kind>
<name>Hartnett et al.</name>
<date>20040600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714 54</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00014">
<document-id>
<country>US</country>
<doc-number>6799287</doc-number>
<kind>B1</kind>
<name>Sharma et al.</name>
<date>20040900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714703</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00015">
<document-id>
<country>US</country>
<doc-number>6820047</doc-number>
<kind>B1</kind>
<name>Aizawa et al.</name>
<date>20041100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>703 14</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00016">
<document-id>
<country>US</country>
<doc-number>6992946</doc-number>
<kind>B2</kind>
<name>Ooishi</name>
<date>20060100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00017">
<document-id>
<country>US</country>
<doc-number>7003708</doc-number>
<kind>B1</kind>
<name>Ireland et al.</name>
<date>20060200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714739</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00018">
<document-id>
<country>US</country>
<doc-number>7216198</doc-number>
<kind>B2</kind>
<name>Ito et al.</name>
<date>20070500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00019">
<document-id>
<country>US</country>
<doc-number>2002/0104045</doc-number>
<kind>A1</kind>
<name>Cooper</name>
<date>20020800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714 42</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00020">
<document-id>
<country>US</country>
<doc-number>2004/0225943</doc-number>
<kind>A1</kind>
<name>Brueggen</name>
<date>20041100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714758</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00021">
<document-id>
<country>US</country>
<doc-number>2005/0188281</doc-number>
<kind>A1</kind>
<name>Nguyen et al.</name>
<date>20050800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714 42</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00022">
<document-id>
<country>US</country>
<doc-number>2005/0283704</doc-number>
<kind>A1</kind>
<name>Ito et al.</name>
<date>20051200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00023">
<document-id>
<country>US</country>
<doc-number>2006/0010339</doc-number>
<kind>A1</kind>
<name>Klein</name>
<date>20060100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714  5</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00024">
<document-id>
<country>US</country>
<doc-number>2006/0179369</doc-number>
<kind>A1</kind>
<name>Bravo et al.</name>
<date>20060800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714718</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00025">
<document-id>
<country>US</country>
<doc-number>2006/0206769</doc-number>
<kind>A1</kind>
<name>Klein</name>
<date>20060900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00026">
<document-id>
<country>US</country>
<doc-number>2007/0011599</doc-number>
<kind>A1</kind>
<name>Levitan</name>
<date>20070100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714801</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00027">
<document-id>
<country>US</country>
<doc-number>2007/0157059</doc-number>
<kind>A1</kind>
<name>Tsao et al.</name>
<date>20070700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714733</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00028">
<document-id>
<country>US</country>
<doc-number>2008/0016392</doc-number>
<kind>A1</kind>
<name>Earl et al.</name>
<date>20080100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714  6</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00029">
<document-id>
<country>US</country>
<doc-number>2008/0052603</doc-number>
<kind>A1</kind>
<name>Wiatrowski et al.</name>
<date>20080200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714776</main-classification></classification-national>
</us-citation>
<us-citation>
<nplcit num="00030">
<othercit>Krasniewski et al., &#x201c;Circular Self-Test Path: A Low-Cost BIST Technique for VLSI Circuits&#x201d;, 1989, IEEE.</othercit>
</nplcit>
<category>cited by examiner</category>
</us-citation>
</us-references-cited>
<number-of-claims>22</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>None</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>8</number-of-drawing-sheets>
<number-of-figures>8</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20090249148</doc-number>
<kind>A1</kind>
<date>20091001</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Ito</last-name>
<first-name>Yutaka</first-name>
<address>
<city>Tokyo</city>
<country>JP</country>
</address>
</addressbook>
<residence>
<country>JP</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Drexler</last-name>
<first-name>Adrian</first-name>
<address>
<city>Meridian</city>
<state>ID</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="003" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Jones</last-name>
<first-name>Brandi</first-name>
<address>
<city>Boise</city>
<state>ID</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Ito</last-name>
<first-name>Yutaka</first-name>
<address>
<city>Tokyo</city>
<country>JP</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Drexler</last-name>
<first-name>Adrian</first-name>
<address>
<city>Meridian</city>
<state>ID</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="003" designation="us-only">
<addressbook>
<last-name>Jones</last-name>
<first-name>Brandi</first-name>
<address>
<city>Boise</city>
<state>ID</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Knobbe, Martens, Olson &#x26; Bear, LLP</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>Micron Technology, Inc.</orgname>
<role>02</role>
<address>
<city>Boise</city>
<state>ID</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Chu</last-name>
<first-name>Gabriel</first-name>
<department>2114</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">Improved apparatus, systems and methods, such as those for testing an error correction code (ECC) encoder/decoder for solid-state memory devices, are provided. In one or more embodiments, the improved systems and methods deliberately inject errors into memory storage areas of memory devices to test the operation of the ECC encoder/decoder.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="131.23mm" wi="234.95mm" file="US08627163-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="158.75mm" wi="120.65mm" orientation="landscape" file="US08627163-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="234.95mm" wi="158.58mm" orientation="landscape" file="US08627163-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="233.17mm" wi="121.16mm" orientation="landscape" file="US08627163-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="237.07mm" wi="95.08mm" orientation="landscape" file="US08627163-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="237.15mm" wi="146.39mm" orientation="landscape" file="US08627163-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="216.41mm" wi="121.50mm" file="US08627163-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="234.70mm" wi="132.84mm" orientation="landscape" file="US08627163-20140107-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00008" num="00008">
<img id="EMI-D00008" he="215.90mm" wi="140.04mm" orientation="landscape" file="US08627163-20140107-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">BACKGROUND OF THE INVENTION</heading>
<p id="p-0002" num="0001">1. Field of the Invention</p>
<p id="p-0003" num="0002">Embodiments of the invention relate to integrated circuit memory devices, and in particular, to testing error correction code systems.</p>
<p id="p-0004" num="0003">2. Description of the Related Art</p>
<p id="p-0005" num="0004">Digital systems typically contain memory devices, such as solid-state devices, to store data. The capacity to store the data accurately is desired in any storage media. To ensure more accurate storage of data, certain memory devices employ error correction code (ECC), such as, for example, ECC encoders/decoders (for example, modules configured to encode and/or decode), to detect and/or correct errors. The ECC encoders/decoders are tested to assess whether the ECC encoders/decoders can accurately detect and/or correct errors during the operation of memory devices. However, test of the operation of the ECC encoders/decoders can be time consuming and costly because of the difficulty of providing the ECC encoders/decoders erroneous data for the ECC encoder/decoders to detect and/or correct. For example, when a dynamic random access memory device is being tested, it can take a relatively long time for test data to degrade, which is then used to test the operation of the ECC encoder/decoders.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0002" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0006" num="0005">These and other features will now be described with reference to the drawings summarized below. These drawings and the associated description are provided to illustrate one or more embodiments of the invention, and not to limit the scope of the invention.</p>
<p id="p-0007" num="0006"><figref idref="DRAWINGS">FIG. 1</figref> illustrates a block diagram of a computer system including a memory device.</p>
<p id="p-0008" num="0007"><figref idref="DRAWINGS">FIG. 2</figref> is a block diagram of a synchronous dynamic random access memory.</p>
<p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. 3A</figref> illustrates an embodiment of maximum-length sequence code generation circuitry.</p>
<p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. 3B</figref> illustrates an embodiment of an ECC encoder configured to generate error correction code.</p>
<p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. 3C</figref> illustrates an embodiment of an ECC encoder configured to generate error correction code as well as pseudo random erroneous data.</p>
<p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. 4</figref> is a flowchart diagram of one method of testing the operation of an ECC encoder/decoder.</p>
<p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. 5A</figref> illustrates an embodiment of a conventional ECC encoder/decoder.</p>
<p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. 5B</figref> is an embodiment of an ECC encoder/decoder that is configured to generate pseudo random erroneous data.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0003" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0015" num="0014">Although certain embodiments and examples are disclosed below, it will be understood by those of ordinary skill in the art that the invention extends beyond the specifically disclosed embodiments to other alternative embodiments and uses of the invention and obvious modifications and equivalents thereof. Thus, the particular embodiments described below are not intended to limit the scope of the invention herein disclosed.</p>
<p id="p-0016" num="0015">As used herein, the word &#x201c;module&#x201d; refers to logic embodied by hardware or software (including firmware), or to a combination of both hardware and software, or to a collection of software instructions. Software instructions may be embedded in firmware, such as an EPROM, and executed by a processor. It will be further appreciated that hardware modules may be included of connected logic units, such as gates and flip-flops, and/or may be included of programmable units, such as programmable gate arrays or processors. The modules described herein can be implemented as software modules, or may be represented in hardware or firmware. Generally, the modules described herein refer to logical modules that may be combined with other modules or divided into sub-modules despite their physical organization or storage.</p>
<p id="p-0017" num="0016">Improved systems and methods for testing an error correction code (ECC) encoder/decoder for solid-state memory devices will be described in greater detail herein with reference to the drawings. In one or more of the described embodiments, the improved systems and methods generate erroneous data and purposely write the erroneous data into memory storage areas of memory devices such that the ECC encoder/decoder can detect and/or correct the injected erroneous data. Erroneous data refers to data that intentionally includes some errors such that an error correction code generated based on the data without the errors would not match error correction code generated based on the erroneous data. In one embodiment, these techniques are built into the memory device (built-in self test or BIST).</p>
<p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. 1</figref> illustrates a high level block diagram of one embodiment of a computer system <b>100</b> such as, for example, a computer, notebook, wireless device, PDA, or any other electronic device that uses digital memory systems to store data. The computer system <b>100</b> of <figref idref="DRAWINGS">FIG. 1</figref> includes a processor, such as a central processing unit (CPU) <b>110</b> and the solid-state memory device <b>120</b>. Other examples of processors could include, but are not limited to, separate or individual processing cores, separate or distributed processing logic, general purpose processors, special purpose processors, application specific integrated circuits (ASICs) with processing functionality, memory controllers, system controllers, etc. As shown in <figref idref="DRAWINGS">FIG. 1</figref>, the CPU <b>110</b> is connected to the solid-state memory device <b>120</b> through a control bus <b>113</b>, a data bus <b>114</b>, and an address bus <b>115</b>. The CPU <b>110</b> can be configured to control the operation of the solid-state memory device <b>120</b>. In one embodiment, the computer system <b>100</b> is configured to include hardware and software to test the operation of various electronic components of the solid-state memory device <b>120</b> such as ECC encoder/decoders, memory arrays, etc.</p>
<p id="p-0019" num="0018">The solid-state memory device <b>120</b> is capable of accepting data from the CPU <b>110</b>, storing the data, and subsequently providing the data back to the CPU <b>110</b>. The solid-state memory device <b>120</b> as illustrated in <figref idref="DRAWINGS">FIG. 1</figref> depicts a dynamic random access memory (DRAM) device. However, the solid-state memory device <b>120</b> can be any suitable volatile or non-volatile electronic data storage device, including, but not limited to, synchronous dynamic random access memory (SDRAM), double data rate SDRAM (DDR), rambus DRAM (RDRAM), double data rate 2 SDRAM (DDR2), double data rate 3 SDRAM (DDR3), Flash memory, programmable conductor random access memory (PCRAM), magnetic random access memory (MRAM), etc. The CPU <b>110</b> can be configured to control the operation of the solid-state memory device <b>120</b> by sending control signals through the control bus <b>113</b>, such as, for example, instructions for the solid-state memory device <b>120</b> to write data transmitted through the data bus <b>114</b> to a memory cell address sent through the address bus <b>115</b>. In certain embodiments, the CPU <b>110</b> controls the operation of the solid-state memory device <b>120</b> using separate system and memory controllers (not shown).</p>
<p id="p-0020" num="0019">As <figref idref="DRAWINGS">FIG. 1</figref> further illustrates, the solid-state memory device <b>120</b> includes a memory array <b>122</b>, a control module <b>124</b>, and an error detection and/or correction module <b>140</b>. The error detection and/or correction module <b>140</b> includes an ECC encoder/decoder <b>126</b> and an error injection module <b>150</b>. Various electronic elements located within the solid-state memory device <b>120</b> such as the memory array <b>122</b>, the control module <b>124</b>, and the error detection and/or correction module <b>140</b> can be connected via various internal data buses (not shown) and/or control lines. To illustrate various electrical components present in the solid-state memory device <b>120</b>, one type of the solid-state memory device <b>120</b>, SDRAM device <b>200</b>, is shown in <figref idref="DRAWINGS">FIG. 2</figref>. As illustrated in <figref idref="DRAWINGS">FIG. 2</figref>, the SDRAM Device <b>200</b> contains various integrated circuit components such as, for example, input/output (I/O) gates and controllers, counters, latch and decoder circuits, data registers, row and column decoders, bank control logic, command decoders, muxes, refresh counters, etc.</p>
<p id="p-0021" num="0020">The error detection and/or correction module <b>140</b> can be (or can be part of) a low power consumption module that controls the operation of the solid-state memory device <b>120</b> in a low-power consumption mode using several sub-components such as the ECC encoder/decoder <b>126</b>, a power controller (not shown), an ECC controller (not shown), etc. The various components of one embodiment of the error detection and/or correction module <b>140</b> are further depicted in the SDRAM of <figref idref="DRAWINGS">FIG. 2</figref>. Although not discussed in detail, in certain embodiments, the error detection and/or correction module <b>140</b> can be configured to control various processes when the solid-state device <b>120</b> is operating in a low-power consumption mode, including power-off, refresh, burst refresh, and/or the like. In other embodiments, the solid-state memory device <b>120</b>, for example using the ECC encoder/decoder <b>126</b>, generates error correction code when the solid-state memory device <b>120</b> enters the low-power consumption mode.</p>
<p id="p-0022" num="0021">The power consumed by solid-state memory devices is typically affected by their operating mode. Refresh operations in the low-power consumption mode, for example, are typically performed by reading data bits from the memory cells of a memory array and then writing those same data bits back to the same cells. A relatively large amount of power is required for refreshing data because memory cell arrays are being actuated in a rapid sequence. The power that solid-state memory devices consume during refresh operations can be reduced by reducing the rate at which the memory cells are being refreshed. However, reducing the refresh rate increases the risk of data stored in the memory array cells being lost. Detecting and/or correcting errors, for example using the ECC encoder/decoder <b>126</b>, enables solid-state memory devices to reduce the refresh rate because some errors become tolerable. Lowering the refresh rate of the solid-state memory device <b>120</b> allows, for example, the solid-state memory device <b>120</b> to draw less electrical power, including during the low-power consumption mode.</p>
<p id="p-0023" num="0022">The ECC encoder/decoder <b>126</b> can be configured to generate error correction code, such as, for example, parity bits, from write data received from the CPU <b>110</b> via the data bus <b>114</b>. In some embodiments, the solid-state memory device <b>120</b> writes, for example using an ECC controller (not shown), the error correction code along with the write data in the memory array <b>122</b> of the solid-state memory device <b>120</b>. When data is retrieved (for example, read) from the memory array <b>122</b> of the solid-state memory device <b>120</b>, the ECC encoder/decoder <b>126</b> uses the error correction code to determine if the read data is corrupted with errors, and in certain circumstances, correct the errors. In certain embodiments, the ECC encoder/decoder <b>126</b> detects and/or corrects errors by retrieving the read data as well as the error correction code, generating a new set of error correction code based on the read data, and comparing the new set of error correction code with the retrieved error correction code. Although not shown, the ECC encoder/decoder <b>126</b> is understood to include various sub-components to detect and/or correct errors, such as, without limitation, error location modules, error correction code generating modules, ECC control logic modules, and/or the like. The corrected read data is then coupled to the CPU <b>110</b> through the data bus <b>114</b>. Although the illustrated solid-state memory device <b>120</b> writes the error correction code in the same memory array <b>122</b> as the data (for example different row and/or column), in other embodiments, the solid-state memory device <b>120</b> alternatively writes the error correction code in a syndrome storage area located on, for example, the ECC encoder/decoder <b>126</b>.</p>
<p id="p-0024" num="0023">With reference again to <figref idref="DRAWINGS">FIG. 1</figref>, the error injection module <b>150</b> of the module <b>140</b> can be, for example any circuit that is capable of generating erroneous data. The error injection module <b>150</b> can generate erroneous data that can be purposely written to, for example, the memory array <b>122</b>, according to the desired configuration. In one embodiment, the error injection module <b>150</b> can be configured to generate non-random data such as all zeros, all ones, or various combinations of zeros and ones. The error injection module <b>150</b> can further be configured to generate data according to other patterns, for example, sequentially such as in counters or as determined by other non-random algorithms.</p>
<p id="p-0025" num="0024">In an illustrative embodiment, the error injection module <b>150</b> is configured to generate pseudo random erroneous data (for example, a sequence of digits that approximate the properties of random numbers), and purposely write the pseudo random erroneous data in the memory array <b>122</b>. In one embodiment, the error injection module <b>150</b> is not truly random in that the randomness of the sequence is determined by a relatively small set of initial values. As discussed further below, the error injection module <b>150</b> can write the pseudo random erroneous data into the memory array <b>122</b> of the solid-state memory device <b>120</b> to purposely introduce erroneous data for the ECC encoder/decoder <b>126</b> to detect and/or correct. Pseudo random erroneous data retain an additional benefit because the data can be generated using linear feedback shift registers, as will be described in greater detail with respect to <figref idref="DRAWINGS">FIG. 3A</figref>. In some embodiments, linear feedback shift registers of the solid-state memory device <b>120</b> (for example the ECC encoder/decoder, other circuitry, etc.) can be configured to be usable for both ECC functions as well as erroneous data generation. The error injection module <b>150</b> can generate pseudo random erroneous data using various known algorithms, such as, for example, maximum-length sequence (MLS), fortuna, mersenne twister, etc.</p>
<p id="p-0026" num="0025">As illustrated in <figref idref="DRAWINGS">FIG. 1</figref>, the ECC encoder/decoder <b>126</b> and the error injection module <b>150</b> are separate circuit components of the solid-state memory device <b>120</b>. In other embodiments, the ECC encoder/decoder <b>126</b> and the error injection module <b>150</b> can be combined into one module. In still other embodiments as will be further discussed with respect to <figref idref="DRAWINGS">FIG. 3A</figref> and <figref idref="DRAWINGS">FIG. 5B</figref>, the ECC encoder/decoder <b>126</b> can be configured to generate error correction code as well as perform the functions of the error injection module <b>150</b>.</p>
<p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. 3A</figref> illustrates a circuit diagram of one embodiment of the error injection module <b>300</b> configured to generate erroneous data. In the illustrated embodiment, the error injection module <b>300</b> in <figref idref="DRAWINGS">FIG. 3A</figref> is configured to generate pseudo random erroneous data using the MLS algorithm. The pseudo random erroneous data can subsequently be purposely written into the memory array <b>122</b> as erroneous data, providing the ECC encoder/decoder <b>126</b> with errors to detect and/or correct. The error injection module <b>300</b> of <figref idref="DRAWINGS">FIG. 3</figref> includes D-type flip-flops (FFs) <b>301</b>-<b>317</b> and an XOR gate <b>320</b>. The XOR gate <b>320</b> and the outputs of the FFs <b>301</b>-<b>317</b> are arranged such that the error injection module <b>300</b> operates as a step shift register that has a feedback loop by way of the XOR gate <b>320</b>. The FFs <b>301</b>-<b>317</b> are cascaded such that the output of each FF<sub>n </sub>is provided as an input to the next FF<sub>n+1</sub>. The output of the last FF <b>317</b> is provided as an input to the first FF <b>301</b>. As further shown in <figref idref="DRAWINGS">FIG. 3A</figref>, the output of the last FF <b>317</b> is coupled through the XOR gate <b>320</b> along with the output of the FF <b>312</b> and provided as an input to the FF <b>313</b>.</p>
<p id="p-0028" num="0027">The FFs <b>301</b>-<b>317</b> further include clock inputs CK <sub>1-17 </sub>configured to receive a clock signal such as the system clock. In some embodiments, input signals to the FFs <b>301</b>-<b>317</b> are sampled on the positive edge of the clock signal that is coupled to clock inputs CK <sub>1-17</sub>. The error injection module <b>300</b> of <figref idref="DRAWINGS">FIG. 3A</figref> can be initialized by any non-zero initial value, for example, by setting any of the inputs to the FFs <b>301</b>-<b>317</b> to a non-zero value. When active, the output of the FF <b>317</b> is a pseudo random erroneous data that is generated according to the MLS algorithm. Other shift register configurations that generate pseudo random erroneous data will be readily determined by one of ordinary skill in the art.</p>
<p id="p-0029" num="0028"><figref idref="DRAWINGS">FIG. 3B</figref> illustrates a circuit diagram of one embodiment of an ECC encoder <b>330</b> according to the present invention. The ECC encoder <b>330</b> has similar circuitry as the error injection module <b>300</b> of <figref idref="DRAWINGS">FIG. 3A</figref> and can be further configured to generate error correction code, for example, using the Hamming code algorithm. The ECC encoder <b>330</b> includes FFs <b>331</b>-<b>346</b>, XOR gates <b>347</b>-<b>349</b>, and AND gates <b>350</b>, <b>351</b>. The ECC encoder <b>330</b> has input signals read-data <b>352</b>, Syndrome signal <b>353</b>, Parity signal <b>354</b> and a parity-bit (error correction code) output signal <b>355</b>.</p>
<p id="p-0030" num="0029">The AND gates <b>350</b>, <b>351</b> are in communication with the XOR gate <b>347</b>, which further communicates with the XOR gates <b>348</b>, <b>349</b> and the FF <b>331</b>. The FFs <b>331</b>-<b>346</b> are cascaded such that the output of each FF<sub>n </sub>is provided as an input to the next FF<sub>n+1</sub>. The parity bit-output <b>355</b> and the Parity signal <b>354</b> are provided as inputs to the AND gate <b>351</b>. The read-data signal <b>352</b> and the Syndrome signal <b>353</b> are provided as inputs to the AND gate <b>350</b>. The FFs <b>331</b>-<b>336</b> are arranged such that the ECC encoder <b>330</b> operates as a step shift register that has a feedback loop by way of the XOR gates <b>348</b>, <b>349</b>. As shown in <figref idref="DRAWINGS">FIG. 3B</figref>, the output signal of the XOR gate <b>347</b> is coupled through the XOR gate <b>348</b> along with the output signal of the FF <b>342</b> and provided as an input to FF <b>343</b>. The output signal of the XOR gate <b>347</b> is further coupled through the XOR gate <b>349</b> along with the output signal of the FF <b>335</b> and provided as an input to the FF <b>336</b>. The output signal of the XOR gate <b>347</b> is directly provided as an input to the FF <b>331</b>.</p>
<p id="p-0031" num="0030">The ECC encoder <b>330</b> has Syndrome and Parity operating modes. When the Syndrome input signal <b>353</b> is high, the Parity input signal <b>354</b> is low and the ECC encoder <b>330</b> performs an error correction code calculation based on the read-data <b>352</b>. When the Parity input signal <b>354</b> is high, the Syndrome input signal <b>353</b> is low and the ECC encoder <b>330</b> outputs the calculated error correction code as the parity-bit output <b>355</b>. In operation, therefore, the ECC encoder <b>330</b> calculates and outputs the error correction code via the parity-bit output signal <b>355</b> for input data that is provided as the read-data <b>352</b>.</p>
<p id="p-0032" num="0031">As with the error injection module <b>300</b> of <figref idref="DRAWINGS">FIG. 3A</figref>, the FFs <b>331</b>-<b>346</b> further include clock inputs CK <b>331</b>-<b>336</b> configured to receive a clock signal. In some embodiments, the FFs <b>331</b>-<b>346</b> are sampled on the positive edge of the clock signal. The ECC encoder <b>330</b> can be initialized by cyclically shifting and resetting the FFs <b>331</b>-<b>346</b>.</p>
<p id="p-0033" num="0032"><figref idref="DRAWINGS">FIG. 3C</figref> illustrates one embodiment of an ECC encoder <b>370</b> that is configured to perform the functions of the error injection module <b>300</b>. The illustrated ECC encoder <b>370</b> generates error correction code and as well as pseudo random erroneous data. As previously mentioned with reference with <figref idref="DRAWINGS">FIGS. 3A and 3B</figref>, the error injection module <b>300</b> and the ECC encoder <b>330</b> share similar circuitry. As a result, the ECC encoder <b>370</b> can be configured to generate error correction code according to the hamming code and pseudo random erroneous data according to the MLS algorithm, for example, by adding three more logic gates and one more flip flop to the conventional ECC encoder of <figref idref="DRAWINGS">FIG. 3B</figref>. Although the preferred embodiment demonstrates the ECC encoder <b>330</b> configured to generate pseudo random erroneous data in addition to generating error correction code, the similarity of the circuitry of the ECC encoder <b>330</b> and the error injection module <b>300</b> is such that the error injection module <b>300</b> can be configured to generate error correction code in addition to the pseudo random erroneous data. In some embodiments, a single module is configured to provide the functions of both the ECC encoder <b>330</b> and the error injection module <b>300</b>.</p>
<p id="p-0034" num="0033">As further illustrated in <figref idref="DRAWINGS">FIG. 3C</figref>, the ECC encoder <b>370</b> differs from the ECC encoder <b>330</b> of <figref idref="DRAWINGS">FIG. 3B</figref> in that it further includes a NOR gate <b>383</b>, NAND gates <b>384</b>-<b>386</b>, and an additional flip flop <b>381</b>. The ECC encoder <b>370</b> has an additional input signal MSeq <b>380</b>. The MSeq signal <b>380</b> and an additional output signal pseudo random erroneous data <b>382</b> (output of the additional flip flop <b>381</b>) are provided as inputs to the NAND gate <b>386</b>. The parity bit-output <b>355</b> and the inverted Parity signal <b>354</b> are provided as inputs to the NAND gate <b>384</b>. The NAND gates <b>384</b>, <b>386</b> are in communication with the NAND gate <b>385</b>, which further communicates with the XOR gate <b>347</b>. The read-data signal <b>352</b> and the Syndrome signal <b>353</b> and provided as inputs to the AND gate <b>350</b>. The output signal of the XOR gate <b>347</b> is first inverted and then passed through the NOR gate <b>383</b> along with the MSeq signal <b>380</b> and then provided as an input to the XOR gate <b>349</b>. The output signal of the XOR gate <b>347</b> is directly provided as an input to the FF <b>331</b>.</p>
<p id="p-0035" num="0034">The illustrated ECC encoder <b>370</b>, in addition to the Syndrome and Parity operating modes of the ECC encoder <b>330</b>, includes an MSeq mode. The Syndrome and Parity operating modes of the ECC encoder <b>370</b> operate as mentioned earlier with reference to the ECC encoder <b>330</b> of <figref idref="DRAWINGS">FIG. 3B</figref>. When the Syndrome input signal <b>353</b> is high, the Parity input signal <b>354</b> and the MSeq input signal <b>380</b> are low and the ECC encoder <b>370</b> performs an error correction code calculation based on the read-data <b>352</b>. When the Parity input signal <b>354</b> is high, the Syndrome input signal <b>353</b> and the Mseq input signal <b>380</b> are low and the ECC encoder <b>370</b> outputs the calculated error correction code as the parity-bit output <b>355</b>. Additionally, when the MSeq input signal <b>380</b> is high, the Parity input signal <b>354</b> and the Syndrome input signal <b>353</b> are low, and the ECC encoder <b>360</b> generates pseudo random erroneous data and introduces the erroneous data via the pseudo random output signal <b>382</b>, for example, to the memory array <b>122</b> of <figref idref="DRAWINGS">FIG. 1</figref>. The ECC encoder <b>370</b>, therefore, calculates and outputs error correction code and generates and outputs pseudo random erroneous data.</p>
<p id="p-0036" num="0035">A solid-state memory device that includes the modified ECC encoder <b>370</b> that additionally performs error injection functions by only adding a handful of logic gates uses less circuitry than a solid-state device that includes separate ECC encoder and error injection modules, thereby enabling manufacturers to reduce the size of the solid-state memory device. Size reductions are advantageous because they decrease the cost of manufacturing the solid-state memory devices and, furthermore, are desirable for portable computer systems that increasingly require compact memory devices.</p>
<p id="p-0037" num="0036"><figref idref="DRAWINGS">FIG. 4</figref> illustrates one embodiment of a method of testing the operation of ECC encoder/decoders using error injection. In step <b>405</b>, a solid-state memory device is configured to receive data, store the received data and subsequently provide the stored data. As shown in step <b>410</b>, the solid-state memory device receives data to write, for example, from a central processing unit such as the CPU <b>110</b> of <figref idref="DRAWINGS">FIG. 1</figref>. A memory array area of the solid-state memory device can be configured such that each memory array has a data area arranged in the form of a matrix in a row direction and a column direction, and a syndrome area which stores error correction code corresponding to the data area. In step <b>415</b>, the solid-state memory device writes the data to a memory storage area, for example, the data area of the memory array.</p>
<p id="p-0038" num="0037">In step <b>420</b> of <figref idref="DRAWINGS">FIG. 4</figref>, the solid-state memory device, for example using an ECC encoder/decoder, generates error correction code, such as, for example, parity bits, Hamming code, or any other error correction code created using a suitable forward error correction algorithm. In some embodiments, the ECC encoder/decoder generates the error correction code when the solid-state memory device enters the low-power consumption mode. The error correction code that the ECC encoder/decoder generates is indicative of the data stored in the memory array, which the ECC encoder/decoder subsequently uses to detect and/or correct errors that occur within the memory array of the solid-state memory device. Although in <figref idref="DRAWINGS">FIG. 4</figref>, the error correction code is generated after the solid-state memory device writes the data into the memory array, the solid-state memory device can simultaneously write the data into the memory array and generate the error correction code using the ECC encoder/decoder. In other embodiments, the solid-state memory device can generate the error correction code before writing the data to memory array. In still other embodiments, the ECC encoder/decoder generates error correction code in a row direction based on the data stored in each row of the memory array, and error correction code in a column direction based on the data stored in each column of the memory array. In another embodiment, the solid-state memory device uses the error injection module to generate error correction code.</p>
<p id="p-0039" num="0038">As further shown in <figref idref="DRAWINGS">FIG. 4</figref>, the solid-state memory device in step <b>430</b> writes the error correction code to the syndrome area of the memory array (different row and/or column address from the data area). The solid-state memory device can also be configured to write the error correction code in an area different from the memory array of the solid-state memory device, for example, in a syndrome storage area located on the error detection and/or correction module <b>140</b> of <figref idref="DRAWINGS">FIG. 1</figref>. Various suitable means for the solid-state memory device to write the error correction code is well understood in the art. In some embodiments, the solid-state memory device performs steps <b>410</b>, <b>415</b> and <b>420</b> before the solid-state memory device enters the low-power consumption mode. In other embodiments, the solid-state memory device performs steps <b>410</b>, <b>415</b> and <b>420</b> after the solid-state memory device enters the low-power consumption mode. In still further embodiments, the solid-state memory device <b>120</b> simultaneously writes the error correction code and the data into the memory array. In other embodiments, the solid-state memory device generates and writes the error correction code before writing the data to the memory array.</p>
<p id="p-0040" num="0039">In step <b>440</b> of <figref idref="DRAWINGS">FIG. 4</figref>, the solid-state memory device generates erroneous data using an error injection mechanism, such as the error injection module <b>300</b> of <figref idref="DRAWINGS">FIG. 3A</figref>. In this particular example, the error injection module is configured to generate pseudo random erroneous data using the MLS algorithm. In other embodiments, the error injection module can be configured to use other suitable algorithms, such as, for example, fortuna, mersenne twister, or the like, to generate the pseudo random erroneous data. In certain embodiments, the error injection module generates the pseudo random erroneous data at the same time the ECC encoder/decoder generates the error correction code. In still other embodiments, the ECC encoder/decoder is configured to generate the pseudo random erroneous data instead of the error injection module. In some embodiments, a single module is provided to perform the ECC encoder and the error injection module functions. Various other configurations of generating the pseudo random erroneous data is possible and the error injection module, for example, can generate the pseudo random erroneous data during or before each of steps <b>410</b>, <b>415</b>, <b>420</b> and <b>430</b>.</p>
<p id="p-0041" num="0040">Further in step <b>440</b>, the solid-state memory device, for example using the error injection module or any other suitable module (ECC encoder/decoder), writes the erroneous data, for example pseudo random erroneous data, to the data area of the memory array. The solid-state memory device can write the pseudo random or any other type of erroneous data to the memory array according to various configurations. In one embodiment, the erroneous data is written to all of the data area memory cells of the memory array. In other embodiments, the erroneous data is written to particular memory cells in the memory array (for example memory cells that typically store important data, the integrity of which therefore is highly desired). In still other embodiments, the error injection module or the ECC encoder/decoder write the pseudo random erroneous data to the memory array in a random manner. In another embodiment, the solid-state memory device writes pseudo random erroneous data to the memory array in a sequential manner.</p>
<p id="p-0042" num="0041">The solid-state memory device can further employ a module, such as an ECC controller, that provides the start and end addresses of the memory array such that the error injection module or the ECC encoder/decoder can store the pseudo random erroneous data to the memory array based on the provided address. In another embodiment, the error injection module stores the erroneous data based on a memory array address provided from external sources, such as, for example, the CPU <b>110</b> or a memory controller, via the address bus <b>115</b>. Other configurations for writing pseudo random erroneous data to the memory array are possible.</p>
<p id="p-0043" num="0042">Introducing errors into the memory array by purposely injecting the erroneous data into the memory array provides the ECC encoder/decoder with errors (e.g., corrupted data) for the ECC encoder/decoder to detect and/or correct. Writing the pseudo random erroneous data in this manner instead of waiting for the erroneous data to eventually occur during the course of memory device operation should save time during testing of the ECC encoder/decoder, and thus, lowers production costs, as will be discussed further below.</p>
<p id="p-0044" num="0043">With continued reference to <figref idref="DRAWINGS">FIG. 4</figref>, after erroneous data is written into the memory array, the ECC encoder/decoder in step <b>450</b> detects and/or corrects the erroneous data. In one embodiment, the solid-state memory device can use the ECC encoder/decoder to detect and/or correct erroneous data when the solid-state memory device exits a low-power consumption mode. In order to detect and/or correct erroneous data, the ECC encoder/decoder can first retrieve both the erroneous data and the error correction code. In one embodiment, the ECC encoder/decoder receives both the erroneous data and the corresponding error correction code from the memory array (for example erroneous data stored in data area of the memory device and error correction code stored in syndrome area of the memory device). In another embodiment, the ECC encoder/decoder receives the corrupted data from the memory device and retrieves the error correction code from another memory array, for example, a syndrome storage area located on the ECC encoder/decoder, the low-power consumption module, or any other suitable error correction code storage areas. The ECC encoder/decoder uses the error correction code to check the data received from the memory array for errors and/or correct errors indicated by the error correction code.</p>
<p id="p-0045" num="0044">In step <b>460</b>, the corrected read data is analyzed to assess the operation of the ECC encoder/decoder (for example, determine whether the ECC encoder/decoder detected and/or corrected the erroneous data). In one embodiment, the ECC encoder/decoder directly provide the corrected data to a device external to the memory device (for example, a processor or test equipment) that is capable of comparing the corrected data to the original written data to assess the detection and/or correction capabilities of the ECC encoder/decoder. In some embodiments, the solid-state memory device reads the corrected data from the memory array and transmits the corrected data to an appropriate system, for example, automated test equipment (ATE), to analyze the accuracy and performance of the ECC encoder/decoder.</p>
<p id="p-0046" num="0045">Steps <b>405</b>-<b>470</b> as illustrated in <figref idref="DRAWINGS">FIG. 4</figref> are only a subset of the ECC encoder/decoder testing process and skilled artisans will recognize that each of the steps <b>405</b>-<b>460</b> can be repeated to test various aspects of the ECC encoder/decoder. For example, the error injection module may be configured to write erroneous data to a particular address of the memory array one at a time for the ECC encoder/decoder to detect and/or correct the erroneous data, and steps <b>405</b>-<b>460</b> can be repeated to write erroneous data and detect and/or the erroneous data for other particular addresses. In other embodiments, steps <b>405</b>-<b>460</b> can be looped to test the performance of the ECC encoder/decoder at various temperatures, for example, by repeating steps <b>405</b>-<b>460</b> for each desired temperature.</p>
<p id="p-0047" num="0046">Enabling the error injection module to generate pseudo random erroneous data and subsequently injecting the erroneous data to the memory array of the solid-state memory device should make testing the ECC encoder/decoder portion of the solid-state device temperature independent. The erroneous data is generated and written into the memory array so that a testing device such as the automated test equipment does not have to wait for the data in the memory array to degrade. Natural degradation typically various with temperature such that relatively long periods (for example up to 20 seconds) had been used to test ECC encoder/decoders at relatively colder temperatures (for example room temperature).</p>
<p id="p-0048" num="0047">Intentionally writing pseudo random erroneous data into the memory array of the solid-state memory device for the ECC encoder/decoder to detect and/or correct can have other advantages. In one embodiment, the ECC encoder/decoder can be configured to run entire correction code sequences completely, for example, by forcing all error correction processes to run, thereby providing a way to test various aspects of the ECC encoder/decoder (such as determine maximum number of detectible and/or correctible bits, conduct stress tests, assess reliability characteristics, or the like). In another embodiment as will be discussed below with reference to <figref idref="DRAWINGS">FIG. 5B</figref>, the rate at which the pseudo random erroneous data is injected to the memory array area is adjustable.</p>
<p id="p-0049" num="0048"><figref idref="DRAWINGS">FIG. 5A</figref> shows an embodiment of a conventional ECC encoder/decoder <b>500</b> that is configured to detect and/or correct erroneous data. As illustrated in <figref idref="DRAWINGS">FIG. 5A</figref>, the ECC encoder/decoder <b>500</b> includes D-type flip-flops <b>501</b>-<b>516</b>, <b>531</b>-<b>546</b>, switches <b>592</b>, <b>593</b>, inverters <b>595</b>, <b>596</b>, OR gate <b>550</b>, <b>551</b>, an AND gate <b>552</b>, XOR gates <b>347</b>-<b>349</b>, XOR gates <b>557</b>, <b>564</b>, <b>575</b>, NOR gates <b>578</b>, <b>579</b> and a NAND gate <b>559</b>. The ECC encoder/decoder <b>500</b> also has input signals read-data <b>577</b>, Syndrome <b>560</b>, SCK (shift clock) <b>574</b>, RSCK (reverse shift clock) <b>573</b>, Correct <b>561</b>, Parity <b>562</b>, and Init <b>563</b>. Signals D<b>15</b> . . . D<b>0</b> are outputs of the FFs <b>531</b>-<b>545</b>. The ECC encoder/decoder <b>500</b> includes output signals ERROR_Flag <b>571</b>, ERROR_Location Flag <b>570</b>, and write-data <b>569</b>.</p>
<p id="p-0050" num="0049">The read-data signal <b>577</b> and the Syndrome signal <b>560</b> are provided as inputs to the AND gate <b>552</b>, which is in communication with the XOR gate <b>347</b>. The Init signal <b>563</b> and the Parity signal <b>562</b> are provided as input to the NOR gate <b>579</b>, which is in communication with the NAND gate <b>559</b>. The output of the FF <b>546</b> and the output of the NOR gate <b>579</b> are provided as inputs to the NAND gate <b>559</b>, the output of which is inversed and provided as an input to the XOR gate <b>347</b> along with the output of the AND gate <b>552</b>.</p>
<p id="p-0051" num="0050">The output signal of the XOR gate <b>347</b> is directly provided as an input to the FF <b>531</b>. As shown in <figref idref="DRAWINGS">FIG. 5A</figref>, the output signal of the XOR gate <b>347</b> is also passed through the XOR gate <b>348</b> along with the output signal of the FF <b>542</b> and provided as an input to the FF <b>543</b>. The output of FF <b>546</b> (error correction code) is transmitted to the switch <b>592</b>, which is controlled by Parity signal <b>562</b>. The output of the switch <b>592</b> is provided as the write-data <b>569</b>.</p>
<p id="p-0052" num="0051">The SCK clock signal is transmitted to the FFs <b>531</b>-<b>546</b> as input signal CK <b>531</b>-<b>547</b>, for example, by an ECC controller (not shown). SCK clock signal is transmitted to the FFs <b>531</b>-<b>546</b> for all modes of operation (Init, Syndrome, etc.) except the Correct mode, which is synchronized by the RSCK clock signal. In some embodiments, the RSCK clock signal is provided by an ECC controller (not shown).</p>
<p id="p-0053" num="0052">The FFs <b>501</b>-<b>516</b> are arranged such that the ECC encoder/decoder <b>500</b> operates as a step shift register that has a feedback loop by way of the XOR gates <b>575</b>, <b>557</b>. The output signal of the FF <b>501</b> is passed through the XOR gate <b>557</b> along with the output signal of the FF <b>506</b> and provided as an input to the FF <b>505</b>. The output signal of the FF <b>501</b> is also passed through the XOR gate <b>575</b> along with the output signal of the FF <b>513</b> and provided as an input to the FF <b>512</b>. The output signal of the FF <b>501</b> is provided as an input to the FF <b>516</b>. Additionally, the RSCK clock signal is transmitted to the FFs <b>501</b>-<b>516</b> as input signal CK <b>501</b>-<b>516</b>.</p>
<p id="p-0054" num="0053">The signals D<b>14</b> . . . D<b>0</b> are coupled through the OR gate <b>550</b>, the output of which is provided as one of the inputs to the OR gate <b>551</b> and the NOR gate <b>578</b>. The signal D<b>15</b> is provided as the second input to the OR gate <b>551</b> and the NOR gate <b>578</b>. The output of the OR gate <b>551</b> is ERROR_Flag <b>571</b>. The output of the NOR gate <b>578</b>, ERROR_Location_Flag <b>570</b>, is provided as an input to the XOR gate <b>563</b> along with the read-data <b>577</b>. The output of XOR gate <b>563</b> is transmitted to the switch <b>593</b>, which is controlled by the Correct signal <b>561</b>. The output of the switch <b>593</b> is write-data <b>569</b>.</p>
<p id="p-0055" num="0054">The enable signals and operation of the ECC encoder/decoder <b>500</b> will now be briefly discussed. The mode of operation of the ECC encoder/decoder <b>500</b> is determined by setting the corresponding enable signal (Syndrome, Init, Parity, Correct) to high. When the Init signal is high, the flip-flops <b>501</b>-<b>516</b> and flip-flops <b>531</b>-<b>546</b> are cyclically shifted and reset. When the Syndrome signal is high, the ECC encoder/decoder fetches read data, for example from the read-data signal <b>577</b>, and performs error correction code calculation. When the Parity signal is high, the ECC encoder/decoder <b>500</b> couples the calculated error correction code, for example for storage to a syndrome area of a memory array area, through the write-data signal <b>569</b>. When the Correct signal is high, the ECC encoder/decoder <b>500</b> detects and/or corrects errors, and outputs the corrected data as write data <b>569</b> via the switch <b>593</b>. During the correct mode operation of the ECC encoder/decoder <b>500</b>, the SCK input signal <b>574</b> is set to low and the RSCK input signal <b>573</b> is set to high. In such an embodiment, only one of the enable signals will be high at a time.</p>
<p id="p-0056" num="0055"><figref idref="DRAWINGS">FIG. 5B</figref> shows an embodiment in which the ECC encoder/decoder <b>530</b> is configured to detect and/or correct errors as well as generate pseudo random erroneous data. As will be discussed below, the ECC encoder/decoder <b>530</b> additionally provides a mechanism for adjusting the error rate at which the ECC encoder/decoder <b>530</b> injects errors, for example, to the memory array area <b>122</b> of the solid-state memory device <b>120</b>.</p>
<p id="p-0057" num="0056">As illustrated in <figref idref="DRAWINGS">FIGS. 5A and 5B</figref>, the basic structure of the conventional ECC encoder/decoder <b>500</b> can be modified to generate pseudo random erroneous data using the MLS algorithm because the circuitry used to generate hamming code and MLS pseudo random erroneous data are similar. While <figref idref="DRAWINGS">FIG. 5B</figref> shows the ECC encoder/decoder <b>530</b> configured to generate error correction code using the hamming code algorithm or pseudo random erroneous data using the MLS algorithm, the ECC encoder/decoder <b>500</b> can be configured to generate error correction code or pseudo random erroneous data according to other pairs of algorithms. The additional components and features of the ECC encoder/decoder <b>530</b> with reference to <figref idref="DRAWINGS">FIG. 5B</figref> will be further discussed below.</p>
<p id="p-0058" num="0057">As <figref idref="DRAWINGS">FIG. 5B</figref> illustrates, the ECC encoder/decoder <b>530</b> includes an FF <b>547</b>, a counter <b>590</b>, a multiplexer (mux) <b>581</b>, a switch <b>594</b>, an inverter <b>597</b>, NAND gates <b>384</b>-<b>386</b>, NOR gates <b>565</b>, <b>579</b> and a decoder <b>591</b>. The ECC encoder/decoder <b>530</b> also has additional input signals TM_ERRSelect <b>572</b> and MSeq <b>566</b>.</p>
<p id="p-0059" num="0058">The MSeq input signal <b>566</b> and the output of the FF <b>547</b> (pseudo random erroneous data <b>382</b>) are provided as input to the NAND gate <b>386</b>, which is in communication with the NAND gate <b>385</b>. The MSeq input signal <b>566</b>, the Init input signal <b>563</b> and the Parity input signal <b>562</b> are provided as inputs to the NOR gate <b>579</b>, the output of which is provided as a second input to the NAND gate <b>384</b>.</p>
<p id="p-0060" num="0059">The output signals of the NAND gates <b>384</b>, <b>386</b> are provided as input to the NAND gate <b>385</b>, which is in communication with the XOR gate <b>347</b>. The signal from the XOR gate <b>347</b> is passed through the NOR gate <b>383</b> along with the MSeq signal <b>566</b> and then provided as an input to the XOR gate <b>349</b>. The output signal of the XOR gate <b>347</b> is directly provided as an input to the FF <b>531</b>. Additionally, the SCK clock signal is transmitted to the FFs <b>531</b>-<b>547</b> as input signal CK <b>531</b>-<b>547</b>, for example, by an ECC controller (not shown). SCK clock signal is transmitted to the FFs <b>531</b>-<b>547</b> for all modes of operation (Init, Syndrome, Parity, MSeq, etc.) except the Correct mode, which is synchronized by the RSCK clock signal. In some embodiments, the RSCK clock signal is provided by an ECC controller (not shown).</p>
<p id="p-0061" num="0060">As further illustrated in <figref idref="DRAWINGS">FIG. 5B</figref>, the pseudo random erroneous data <b>382</b> is further provided as an input to the counter <b>590</b>. The counter <b>590</b> is in communication with the mux <b>581</b> and provides input data to the mux <b>581</b> for multiplexing. The input signal TM_ERRSelect <b>572</b> is provided as an input to the decoder <b>591</b>, which is in communication with the mux <b>581</b>. The output of the decoder <b>591</b> is used to select, using the mux <b>581</b>, the output of the counter <b>590</b> so as to adjust the number of error bits that the ECC encoder/decoder <b>530</b> introduces to a memory array area of a memory device. Said another way, it is possible to control, using the TM_ERRSelect <b>572</b> signal, the portion of the data in the memory array that is to be corrupted. The input signal TM_ERRSelect <b>572</b> can be used to determine the error rate used during test of the solid-state memory device by selecting the pseudo random erroneous data bits that are outputted by the ECC encoder/decoder <b>530</b> using the write-data signal <b>569</b> via the mux <b>581</b>.</p>
<p id="p-0062" num="0061">The enable signal and operation of the MSeq <b>566</b> of the ECC encoder/decoder <b>530</b> will now be briefly discussed. The operation of the ECC encoder/decoder in Init, Syndrome, Parity and Correction modes is discussed with reference to the ECC encoder/decoder <b>500</b> of <figref idref="DRAWINGS">FIG. 5A</figref>. As depicted in <figref idref="DRAWINGS">FIG. 5B</figref>, when the MSeq signal <b>566</b> is high, the ECC encoder/decoder <b>530</b> generates and outputs pseudo random erroneous data according to the MLS algorithm using the write-data signal <b>569</b>.</p>
<p id="p-0063" num="0062">Although the foregoing invention has been described in terms of certain embodiments, other embodiments will be apparent to those of ordinary skill in the art from the disclosure herein. For example, a skilled artisan will recognize that various methods of manufacture, design, and materials can be used with the present disclosure. Additionally, other combinations, omissions, substitutions and modifications will be apparent to the skilled artisan in view of the disclosure herein. It is contemplated that various aspects and features of the invention described can be practiced separately, combined together, or substituted for one another, and that a variety of combination and sub combinations of the features and aspects can be made and still fall within the scope of the invention. Furthermore, the systems described above need not include all of the modules and functions described in the disclosed embodiments. Accordingly, the invention is not intended to be limited by the recitation of the disclosed embodiments, but is to be defined by reference to the appended claims.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>We claim:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A method of self testing an error correction code (ECC) encoder and/or decoder (encoder/decoder) of a solid-state memory device, the method comprising:
<claim-text>writing data to a memory array;</claim-text>
<claim-text>generating an error correction code based on the data using a shift register of the ECC encoder/decoder;</claim-text>
<claim-text>generating pseudo random erroneous data using the shift register of the ECC encoder/decoder;</claim-text>
<claim-text>writing the erroneous data to the memory array;</claim-text>
<claim-text>retrieving the erroneous data from the memory array; and</claim-text>
<claim-text>using the error correction code and the retrieved erroneous data to test the ECC encoder/decoder.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein using the error correction code comprises correcting the erroneous data using the error correction code and analyzing the corrected data to assess the operation of the ECC encoder/decoder.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein generating error correction code comprises generating the error correction code in accordance with a Hamming code algorithm.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein generating pseudo random data comprises generating pseudo random data in accordance with the maximum-length sequence algorithm.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein generating the error correction code based on the data using the shift register of the ECC encoder/decoder comprises generating the error correction code based on the data using a linear feedback shift register of the ECC encoder/decoder.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising adjusting an error injection rate.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The method of <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein generating pseudo random erroneous data using the shift register of the ECC encoder/decoder comprises generating the pseudo random erroneous data using the linear feedback shift register of the ECC encoder/decoder.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein writing the erroneous data to the memory array comprises writing errors to the memory array using externally provided start and end memory array addresses.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein writing the erroneous data to the memory array comprises purposely writing errors to the memory array in a sequential manner.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising storing the error correction code to a syndrome storage area of the ECC encoder/decoder.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. An apparatus comprising:
<claim-text>a memory array to store data; and</claim-text>
<claim-text>an error detection and/or correction module comprising a shift register, the error detection and/or correction module configured to:
<claim-text>generate an error correction code using the shift register;</claim-text>
<claim-text>generate erroneous data using the shift register;</claim-text>
<claim-text>write the erroneous data to the memory array;</claim-text>
<claim-text>retrieve the erroneous data stored in the memory array; and</claim-text>
<claim-text>detect and/or correct errors in data stored in the memory array.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The apparatus of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the memory array comprises a dynamic random access memory (DRAM) memory array.</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The apparatus of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the memory array comprises a non-volatile memory array.</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The apparatus of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the error detection and/or correction module is configured to generate the error correction code according to a Hamming code algorithm.</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The apparatus of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the error detection and/or correction module being configured to generate erroneous data comprises the error detection and/or correction module being configured to generate pseudo random erroneous data.</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The apparatus of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the error detection and/or correction module is configured to generate the pseudo random erroneous data according to a maximum-length sequence algorithm.</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The apparatus of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the shift register comprises a linear shift register.</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The apparatus of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the error detection and/or correction module is configured to generate the pseudo random erroneous data according to a fortuna algorithm.</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. The apparatus of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the error detection and/or correction module is configured to generate the pseudo random erroneous data according to a mersenne twister algorithm.</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. The apparatus of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the error detection and/or correction module is configured to adjust an error injection rate.</claim-text>
</claim>
<claim id="CLM-00021" num="00021">
<claim-text>21. The apparatus of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the error detection and/or correction module is configured to actively generate the erroneous data and write the erroneous data to the memory array such that of the error detection and/or correction module is temperature independent.</claim-text>
</claim>
<claim id="CLM-00022" num="00022">
<claim-text>22. A solid-state memory device comprising:
<claim-text>an error injection module configured to generate pseudo random erroneous data, wherein the pseudo random erroneous data is written in a memory array of the solid-state memory device; and</claim-text>
<claim-text>an error correction code (ECC) encoder and/or decoder (encoded/decoder) configured to detect and/or correct errors in data stored in the memory array in accordance with an ECC; and</claim-text>
<claim-text>wherein the error injection module and the ECC encoder/decoder share a shift register.</claim-text>
</claim-text>
</claim>
</claims>
</us-patent-grant>

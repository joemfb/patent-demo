<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08626691-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08626691</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>12642783</doc-number>
<date>20091219</date>
</document-id>
</application-reference>
<us-application-series-code>12</us-application-series-code>
<us-term-of-grant>
<us-term-extension>486</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>17</main-group>
<subgroup>00</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>N</subclass>
<main-group>5</main-group>
<subgroup>02</subgroup>
<symbol-position>L</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>706 47</main-classification>
</classification-national>
<invention-title id="d2e53">Methods, systems, and products for estimating answers to questions</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>6182136</doc-number>
<kind>B1</kind>
<name>Ramanathan et al.</name>
<date>20010100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>6321338</doc-number>
<kind>B1</kind>
<name>Porras et al.</name>
<date>20011100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>6363489</doc-number>
<kind>B1</kind>
<name>Comay et al.</name>
<date>20020300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>6453345</doc-number>
<kind>B2</kind>
<name>Trcka et al.</name>
<date>20020900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>7164657</doc-number>
<kind>B2</kind>
<name>Phaal</name>
<date>20070100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>7441429</doc-number>
<kind>B1</kind>
<name>Nucci et al.</name>
<date>20081000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>7512980</doc-number>
<kind>B2</kind>
<name>Copeland et al.</name>
<date>20090300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>8234238</doc-number>
<kind>B2</kind>
<name>Keith, Jr.</name>
<date>20120700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>706 60</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>2002/0133586</doc-number>
<kind>A1</kind>
<name>Shanklin et al.</name>
<date>20020900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>2004/0083092</doc-number>
<kind>A1</kind>
<name>Valles</name>
<date>20040400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>704  9</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>2004/0187032</doc-number>
<kind>A1</kind>
<name>Gels et al.</name>
<date>20040900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>2005/0086045</doc-number>
<kind>A1</kind>
<name>Murata</name>
<date>20050400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>704  2</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00013">
<document-id>
<country>US</country>
<doc-number>2005/0114327</doc-number>
<kind>A1</kind>
<name>Kumamoto et al.</name>
<date>20050500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707  3</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00014">
<document-id>
<country>US</country>
<doc-number>2006/0294037</doc-number>
<kind>A1</kind>
<name>Horvitz et al.</name>
<date>20061200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>706 46</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00015">
<document-id>
<country>US</country>
<doc-number>2007/0248084</doc-number>
<kind>A1</kind>
<name>Whitehead</name>
<date>20071000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00016">
<document-id>
<country>US</country>
<doc-number>2008/0291915</doc-number>
<kind>A1</kind>
<name>Foschiano</name>
<date>20081100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00017">
<document-id>
<country>US</country>
<doc-number>2009/0287678</doc-number>
<kind>A1</kind>
<name>Brown et al.</name>
<date>20091100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707  5</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00018">
<document-id>
<country>US</country>
<doc-number>2010/0150004</doc-number>
<kind>A1</kind>
<name>Duffield et al.</name>
<date>20100600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>370252</main-classification></classification-national>
</us-citation>
<us-citation>
<nplcit num="00019">
<othercit>Building a Better NetFlow Cristian Estan cestan@cs.ucsd.edu SIGCOMM'04, Aug. 30-Sep. 3, 2004, Portland, Oregon, USA.</othercit>
</nplcit>
<category>cited by examiner</category>
</us-citation>
</us-references-cited>
<number-of-claims>20</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>706 47</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>14</number-of-drawing-sheets>
<number-of-figures>14</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20110153537</doc-number>
<kind>A1</kind>
<date>20110623</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Hiltunen</last-name>
<first-name>Matti</first-name>
<address>
<city>Morristown</city>
<state>NJ</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Berthier</last-name>
<first-name>Robin</first-name>
<address>
<city>College Park</city>
<state>MD</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="003" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Cukier</last-name>
<first-name>Michel</first-name>
<address>
<city>Rockville</city>
<state>MD</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="004" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Kormann</last-name>
<first-name>David</first-name>
<address>
<city>Morristown</city>
<state>NJ</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="005" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Sheleheda</last-name>
<first-name>Daniel</first-name>
<address>
<city>Florham Park</city>
<state>NJ</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="006" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Vesonder</last-name>
<first-name>Gregory T.</first-name>
<address>
<city>Boonton Township</city>
<state>NJ</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Hiltunen</last-name>
<first-name>Matti</first-name>
<address>
<city>Morristown</city>
<state>NJ</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Berthier</last-name>
<first-name>Robin</first-name>
<address>
<city>College Park</city>
<state>MD</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="003" designation="us-only">
<addressbook>
<last-name>Cukier</last-name>
<first-name>Michel</first-name>
<address>
<city>Rockville</city>
<state>MD</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="004" designation="us-only">
<addressbook>
<last-name>Kormann</last-name>
<first-name>David</first-name>
<address>
<city>Morristown</city>
<state>NJ</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="005" designation="us-only">
<addressbook>
<last-name>Sheleheda</last-name>
<first-name>Daniel</first-name>
<address>
<city>Florham Park</city>
<state>NJ</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="006" designation="us-only">
<addressbook>
<last-name>Vesonder</last-name>
<first-name>Gregory T.</first-name>
<address>
<city>Boonton Township</city>
<state>NJ</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Scott P. Zimmerman, PLLC</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>AT&#x26;T Intellectual Property I, L.P.</orgname>
<role>02</role>
<address>
<city>Atlanta</city>
<state>GA</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Chaki</last-name>
<first-name>Kakali</first-name>
<department>2122</department>
</primary-examiner>
<assistant-examiner>
<last-name>Seck</last-name>
<first-name>Ababacar</first-name>
</assistant-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">Methods, systems, and products answer questions using heuristics. A question and an input are received. A set of heuristic rules is retrieved, and the question is answered by evaluating an accuracy of each heuristic rule. Multiple accuracies from the set of heuristic rules are combined to produce a confidence level for the answer to the question.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="140.46mm" wi="184.15mm" file="US08626691-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="193.21mm" wi="167.64mm" orientation="landscape" file="US08626691-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="192.62mm" wi="151.98mm" orientation="landscape" file="US08626691-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="201.00mm" wi="169.42mm" file="US08626691-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="207.94mm" wi="181.78mm" file="US08626691-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="200.74mm" wi="170.94mm" file="US08626691-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="203.45mm" wi="177.29mm" file="US08626691-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="189.31mm" wi="181.44mm" file="US08626691-20140107-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00008" num="00008">
<img id="EMI-D00008" he="218.19mm" wi="181.44mm" file="US08626691-20140107-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00009" num="00009">
<img id="EMI-D00009" he="194.14mm" wi="190.50mm" file="US08626691-20140107-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00010" num="00010">
<img id="EMI-D00010" he="120.65mm" wi="190.50mm" file="US08626691-20140107-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00011" num="00011">
<img id="EMI-D00011" he="127.93mm" wi="190.50mm" file="US08626691-20140107-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00012" num="00012">
<img id="EMI-D00012" he="206.42mm" wi="185.67mm" orientation="landscape" file="US08626691-20140107-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00013" num="00013">
<img id="EMI-D00013" he="221.23mm" wi="175.43mm" orientation="landscape" file="US08626691-20140107-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00014" num="00014">
<img id="EMI-D00014" he="152.32mm" wi="159.17mm" orientation="landscape" file="US08626691-20140107-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">COPYRIGHT NOTIFICATION</heading>
<p id="p-0002" num="0001">A portion of the disclosure of this patent document and its attachments contain material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure, as it appears in the Patent and Trademark Office patent files or records, but otherwise reserves all copyrights whatsoever.</p>
<heading id="h-0002" level="1">BACKGROUND</heading>
<p id="p-0003" num="0002">Exemplary embodiments generally relate to electrical computers and, more particularly, to heuristic prediction.</p>
<p id="p-0004" num="0003">Heuristics may be used to solve difficult problems. Computer science uses heuristic algorithms to produce acceptable solutions to challenging problems. Heuristics, for example, could be used to improve computer networks.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE SEVERAL VIEWS OF THE DRAWINGS</heading>
<p id="p-0005" num="0004">The features, aspects, and advantages of the exemplary embodiments are better understood when the following Detailed Description is read with reference to the accompanying drawings, wherein:</p>
<p id="p-0006" num="0005"><figref idref="DRAWINGS">FIG. 1</figref> is a simplified schematic illustrating an environment in which exemplary embodiments may be implemented;</p>
<p id="p-0007" num="0006"><figref idref="DRAWINGS">FIG. 2</figref> is a more detailed schematic illustrating the operating environment, according to exemplary embodiments;</p>
<p id="p-0008" num="0007"><figref idref="DRAWINGS">FIGS. 3-6</figref> are schematics illustrating accuracies of heuristics, according to exemplary embodiments;</p>
<p id="p-0009" num="0008"><figref idref="DRAWINGS">FIGS. 7 and 8</figref> are schematics illustrating case studies, according to exemplary embodiments;</p>
<p id="p-0010" num="0009"><figref idref="DRAWINGS">FIGS. 9-11</figref> are schematics illustrating examples of malicious activity, according to exemplary embodiments;</p>
<p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. 12</figref> is a schematic illustrating preliminary results, according to exemplary embodiments;</p>
<p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. 13</figref> is a schematic illustrating a processor-controlled device, according to exemplary embodiments; and</p>
<p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. 14</figref> depicts other possible operating environments for additional aspects of the exemplary embodiments.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0004" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0014" num="0013">The exemplary embodiments will now be described more fully hereinafter with reference to the accompanying drawings. The exemplary embodiments may, however, be embodied in many different forms and should not be construed as limited to the embodiments set forth herein. These embodiments are provided so that this disclosure will be thorough and complete and will fully convey the exemplary embodiments to those of ordinary skill in the art. Moreover, all statements herein reciting embodiments, as well as specific examples thereof, are intended to encompass both structural and functional equivalents thereof. Additionally, it is intended that such equivalents include both currently known equivalents as well as equivalents developed in the future (i.e., any elements developed that perform the same function, regardless of structure).</p>
<p id="p-0015" num="0014">Thus, for example, it will be appreciated by those of ordinary skill in the art that the diagrams, schematics, illustrations, and the like represent conceptual views or processes illustrating the exemplary embodiments. The functions of the various elements shown in the figures may be provided through the use of dedicated hardware as well as hardware capable of executing associated software. Those of ordinary skill in the art further understand that the exemplary hardware, software, processes, methods, and/or operating systems described herein are for illustrative purposes and, thus, are not intended to be limited to any particular named manufacturer.</p>
<p id="p-0016" num="0015">As used herein, the singular forms &#x201c;a,&#x201d; &#x201c;an,&#x201d; and &#x201c;the&#x201d; are intended to include the plural forms as well, unless expressly stated otherwise. It will be further understood that the terms &#x201c;includes,&#x201d; &#x201c;comprises,&#x201d; &#x201c;including,&#x201d; and/or &#x201c;comprising,&#x201d; when used in this specification, specify the presence of stated features, integers, steps, operations, elements, and/or components, but do not preclude the presence or addition of one or more other features, integers, steps, operations, elements, components, and/or groups thereof. It will be understood that when an element is referred to as being &#x201c;connected&#x201d; or &#x201c;coupled&#x201d; to another element, it can be directly connected or coupled to the other element or intervening elements may be present. Furthermore, &#x201c;connected&#x201d; or &#x201c;coupled&#x201d; as used herein may include wirelessly connected or coupled. As used herein, the term &#x201c;and/or&#x201d; includes any and all combinations of one or more of the associated listed items.</p>
<p id="p-0017" num="0016">It will also be understood that, although the terms first, second, etc. may be used herein to describe various elements, these elements should not be limited by these terms. These terms are only used to distinguish one element from another. For example, a first device could be termed a second device, and, similarly, a second device could be termed a first device without departing from the teachings of the disclosure.</p>
<p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. 1</figref> is a simplified schematic illustrating an environment in which exemplary embodiments may be implemented. <figref idref="DRAWINGS">FIG. 1</figref> illustrates a client-server network architecture that uses heuristics to estimate answers to questions. A server <b>20</b> communicates with a source device <b>22</b> via a communications network <b>24</b>. The server <b>20</b> receives an input <b>26</b> from the source device <b>28</b>. The server <b>20</b> stores and executes a software algorithm <b>30</b> that answers a question <b>32</b> about the input <b>26</b> from the source device <b>28</b>. The question <b>32</b>, though, may have no straight forward or readily apparent answer, and no methodology may be known to reliably answer the question <b>32</b> based on the input <b>26</b>. The software algorithm <b>30</b>, then, accesses a set <b>34</b> of heuristic rules to answer the question <b>32</b>. By definition, though, the question <b>32</b> has no straight forward answer or analysis methodology, so no heuristic rule is able to always reliably answer the question <b>32</b>. For simplicity, then, each heuristic rule in the set <b>34</b> of heuristic rules may be &#x201c;true&#x201d; or &#x201c;false&#x201d; (or &#x201c;yes&#x201d; or &#x201c;no,&#x201d; depending on the question <b>32</b>).</p>
<p id="p-0019" num="0018">The software algorithm <b>30</b> analyzes the set <b>34</b> of heuristic rules. The software algorithm <b>30</b> evaluates an accuracy of each heuristic rule using ground truth. For example, the software algorithm <b>30</b> may determine heuristic H1 is correct 80% of the time. Given set <b>34</b> of heuristic rules, the software algorithm <b>30</b> may combine the heuristic rules to arrive at an answer <b>36</b> to the question <b>32</b> within a confidence level <b>38</b>. The software algorithm <b>30</b>, in other words, produces the answer <b>36</b> within a probability.</p>
<p id="p-0020" num="0019">Some examples help explain the use of heuristics. Suppose the server <b>20</b> receives the input <b>26</b> as NetFlow information from a router. As those of ordinary skill in the art understand, NetFlow is a network protocol for collecting Internet Protocol traffic information. Other inputs could firewall logs, packet traces, and sensor readings from sensors. The input <b>26</b>, in fact, may be any stream of data. Regardless, the question <b>32</b> might be &#x201c;what services are running in the communications network <b>24</b>?&#x201d; The question <b>32</b> may also be &#x201c;which machines (if any) are infected by a virus?&#x201d; or &#x201c;which machines are part of a botnet?&#x201d; Other questions may include &#x201c;did a human move through a field instrumented by motion sensors?&#x201d; One problem, of course, is that it is hard or even impossible to get the right kind of information to produce the answer <b>36</b> to the question <b>32</b>. If all the software algorithm <b>30</b> receives is the input <b>26</b>, then the software algorithm <b>30</b> must develop the answer <b>36</b> using the given input <b>26</b>. Another problem is that for any observation, there is a chance that the observation is normal behavior (e.g., a user that sends a lot of email messages verses a machine infected by a spam bot or a deer in the field instead of a human). The software algorithm <b>30</b> may thus assume that each heuristic returns a true or false (or a specific yes/no, such as &#x201c;is machine X infected by a virus?&#x201d;). The answer <b>36</b> may thus indicate that heuristic H1 is correct 80% of the time (in other words, if machine X is indeed infected, then heuristic H1 will detect that with 80% probability). By combining all the heuristics, the software algorithm <b>30</b> provides a combined estimate for the question <b>32</b>. Continuing with the virus example, based on the combined heuristics, the software algorithm <b>30</b> determines with 99% probability that server Xis infected by a virus.</p>
<p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. 2</figref> is a more detailed schematic illustrating the operating environment, according to exemplary embodiments. The server <b>20</b> has a processor <b>50</b> (e.g., &#x201c;&#x3bc;P&#x201d;), application specific integrated circuit (ASIC), or other component that executes the software algorithm <b>30</b> stored in a memory <b>52</b>. The software algorithm <b>82</b> may cause the processor <b>50</b> to produce a graphical user interface (&#x201c;GUI&#x201d;) <b>54</b>. The graphical user interface <b>54</b> is illustrated as being visually produced on a display device <b>56</b>, yet the graphical user interface <b>54</b> may also have audible features. The software algorithm <b>30</b>, however, may operate in any processor-controlled device, as later paragraphs will explain.</p>
<p id="p-0022" num="0021">The server <b>20</b> receives the input <b>26</b> from the source device <b>22</b>. The software algorithm <b>30</b> analyzes the input <b>26</b> (e.g., any stream <b>60</b> of data) to determine the answer <b>36</b> to the posed question <b>32</b>. Because the question <b>32</b> has no straight forward or readily apparent answer, the software algorithm <b>30</b> retrieves the set <b>34</b> of heuristic rules to answer the question <b>32</b>. The set <b>34</b> of heuristic rules is illustrated as being locally stored in the memory <b>52</b>, but the set <b>34</b> of heuristic rules may be remotely accessed and maintained at any location in the communications network (illustrated as reference numeral <b>26</b> in <figref idref="DRAWINGS">FIG. 1</figref>). Regardless, the software algorithm <b>30</b> analyzes the set <b>34</b> of heuristic rules to determine the answer <b>36</b> within the confidence level <b>38</b>.</p>
<p id="p-0023" num="0022">The above analysis may be used to passively detect any services running, for example, in an internal (e.g., corporate) network. The approach scales to large networks, has minimal overhead to the network being monitored, and by providing continuous monitoring, will detect any service that ever communicates with the external networks. The software algorithm <b>30</b> uses novel techniques to combine information from heuristics, each of which by itself is unreliable. By comparing the list of detected services against the list of legitimate known services, the network operators can quickly detect any new rogue services.</p>
<p id="p-0024" num="0023">Knowledge of what services are running in their networks is critical for network and security administrators. For example, an infected computer (e.g., a &#x201c;bot&#x201d;) often runs services that listen for commands from their controllers. Furthermore, the security policy of the organization may disapprove certain services (e.g., known vulnerable services, P2P, etc.). Exemplary embodiments may thus be used to identify rogue servers and compromised computers in an internal network based on a combination of passive service discovery and historical comparison. Exemplary embodiments provide a simple yet effective method to continuously and accurately detect the entire population of servers in a given network. The network and security administrators may then validate the legitimate services and be alerted when suspicious services appear.</p>
<p id="p-0025" num="0024">Exemplary embodiments may use NetFlow as the input <b>26</b>. NetFlow is a known network protocol for collecting Internet Protocol traffic information. NetFlow is implemented in most routers and collects summarized traffic information using packet headers. More precisely, a network flow is defined as a unidirectional sequence of packets that share source and destination IP addresses; source and destination port numbers (for TCP or UDP, 0 for other protocols); and the IP protocol (e.g., TCP or UDP). A NetFlow record carries a wide variety of network-related information including: timestamp of the first packets received, duration, total number of packets and bytes, input and output interfaces, IP address of the next hop, source and destination IP masks and cumulative TCP flags in the case of TCP flows.</p>
<p id="p-0026" num="0025">Some terms may be helpful. The server <b>20</b> may be a network application that provides a service by receiving request messages from clients and generating response messages. The server <b>20</b> may be hosted on a computer identified by its IP address and accepts requests sent to a specific port. Exemplary embodiments may utilize any servers, such as those using the UDP and TCP protocols, both temporary and permanent. Exemplary embodiments may include peer-to-peer transactions, even if the server <b>20</b> may be handling client requests for only a few minutes and for only specific clients. An end point is defined as a tuple {IP address, IP protocol (TCP or UDP), Port number} and may represent any client or any server. A network session may be a valid communication between one client end point and one server end point. A network transaction may be any set of flows between two end points during a time window smaller than the maximum age limit of a flow (such as 15 minutes). There may be two types of network transactions: unidirectional and bidirectional. Exemplary embodiments may assume that bidirectional transactions are always between a client and a server and that bidirectional transactions are always initiated by a client. Exemplary embodiments, however, need not make this assumption, so that bidirectional transactions may be between any two devices and bidirectional transactions may be initiated by any device.</p>
<p id="p-0027" num="0026">The task of accurately detecting servers based solely on NetFlow is challenging. NetFlow may not keep track of the logic of network sessions between clients and servers. Specifically, exemplary embodiments may address the following challenges. 1) NetFlow may break up the logical request and reply flows into multiple separate flows, 2) NetFlow is made of unidirectional flows and therefore exemplary embodiments may need to identify the matching unidirectional flows to make up bidirectional flows and identify valid network sessions, and 3) identifying the server end point in a network session is not always easy.</p>
<p id="p-0028" num="0027">Exemplary embodiments may solve the first and second challenges by matching and merging the net-flows as follows. First, for each collection period (usually 5 minutes) exemplary embodiments merge all network flows that have the same source and destination end points to eliminate any artificial breaking of unidirectional flows. Then to address the issue of combining unidirectional flows into network sessions, exemplary embodiments may first generate bidirectional flows by merging all flows collected during a given time window that have opposite source and destination end points. Exemplary embodiments may then separate valid from invalid bidirectional flows as follows. All UDP flows are considered to be valid. TCP flows are valid only if both the request and reply flows carry at least two packets and the TCP acknowledgement flag. So for example, if a server refuses a TCP connection handshake by sending a reset flag to the source end point, then the bidirectional flow recorded for this transaction will be seen as invalid.</p>
<p id="p-0029" num="0028">The last step may be to identify client and server end points for every valid bidirectional flow. This task is challenging because the TCP flags in the request and reply flows are typically identical for valid bidirectional flows. Furthermore, the flow timestamps have proven to be sometimes unreliable and more often, the request and reply flows have identical time stamps due to the granularity of the time stamps.</p>
<p id="p-0030" num="0029">To achieve this task, exemplary embodiments may develop a set of heuristics that determine if an end point is a server (or not). Each heuristic uses one or more characteristics of each bidirectional flow to make its decision. These heuristics were developed to cover a variety of intuitions gathered from network experts. Exemplary embodiments may then combine the outputs from the different heuristics using a Bayesian inference framework. Bayesian inference provides the advantage of keeping track of previous detection evidence by updating the accuracy of the server identification process over time. The heuristics may include:
<ul id="ul0001" list-style="none">
    <li id="ul0001-0001" num="0000">
    <ul id="ul0002" list-style="none">
        <li id="ul0002-0001" num="0030">H.0: Flow timing: This heuristic uses the difference in the timestamps of the unidirectional flows constituting the bidirectional flow to decide which one is the request and which one is the reply. A large time difference will increase the probability to identify the client and the server end points, while a small time difference of only 1 or 2 milliseconds will decrease the probability to correctly identify clients and servers, and if flows have the same timestamp, then this heuristic cannot decide. For example, let t<sub>1 </sub>and t<sub>2 </sub>be the time stamps of the unidirectional flows constituting a bidirectional flow. The source of the flow with the larger time stamp is likely the server. The difference between t<sub>1 </sub>and t<sub>2 </sub>provides an indication on the probability that this heuristic will identify the correct end point as server. If the time stamps are identical, there is no evidence one way or the other.</li>
        <li id="ul0002-0002" num="0031">H.1: Port number: This heuristic may rely on the fact that servers usually have a lower port number than clients. Let p<sub>1 </sub>and p<sub>2 </sub>be the port numbers associated with a bidirectional flow. The end point with the smaller port number is likely the server. If the port numbers are identical this heuristic does not provide any evidence.</li>
        <li id="ul0002-0003" num="0032">H.2: Port number with threshold at 1024: This heuristic is similar to the previous one but applies a threshold of 1024 to decide between client and server ports. The value of 1024 corresponds to the limit under which ports are considered privileged and designated for well-known services. If an end point has a port number&#x3c;1024, then it is likely a server. This heuristic is ignored if both ports are above or below 1024.</li>
        <li id="ul0002-0004" num="0033">H.3: Port number advertised in /etc/services: If the port number of an end point is listed in the standard Unix file /etc/services that compiles assigned port numbers and registered port numbers, then it is likely a server. If both or neither of the port numbers are in the standard Unix file /etc/services, this heuristic may be ignored.</li>
        <li id="ul0002-0005" num="0034">H.4: Number of distinct ports related to a given port: If two or more different port numbers are associated with an end point, the end point is likely a server. The number of different port numbers related to an end point provides an indication on the probability that this heuristic will correctly identify the server. This heuristic comes from the fact that ports on the client-side are often randomly selected. Therefore ports on the client-side of a connection are less likely to be used in other connections compared to ports on the server-side. If both of the end points are related to the same number of ports, then this heuristic may be ignored.</li>
        <li id="ul0002-0006" num="0035">H.5: Number of distinct IP addresses related to a given end point: This heuristic is identical to heuristic H.4 but counts IP addresses instead of ports.</li>
        <li id="ul0002-0007" num="0036">H.6: Number of distinct tuples related to a given end point: This heuristic is identical to heuristic H.5 above but counts end points instead of single IP addresses. This heuristic is based on the observation that each server typically has two or more clients that use the service. Furthermore, even if there is only one real user for the service (e.g., identified by the IP address of the user's machine), if the user accesses the service more than once, the client side of the access often uses different port numbers and thus, there are multiple end points (defined by {IP; protocol; port number}).</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0031" num="0037">Exemplary embodiments may combine the evidence provided by the heuristics to get the best estimate of which end points are servers and which ones are clients by using basic Bayesian inference. Exemplary embodiments may consider each end point that is present in at least one bidirectional flow. For each end point X, two hypotheses are possible:
<ul id="ul0003" list-style="none">
    <li id="ul0003-0001" num="0000">
    <ul id="ul0004" list-style="none">
        <li id="ul0004-0001" num="0038">H<sub>s </sub>end point X is a server, and/or
        <ul id="ul0005" list-style="none">
            <li id="ul0005-0001" num="0039">H<sub>c </sub>end point X is a client.</li>
        </ul>
        </li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0032" num="0040">The different heuristics are used to identify evidence E in the bidirectional flows. We use training data with known ground truth to determine P(E|H), that is, the probability of evidence E being present in a flow or set of flows given that hypothesis H is true. Finally, let P(H) be the prior probability of hypothesis H (e.g., based on prior evidence). Then, the probability of a hypothesis H given the evidence E, P(H|E), can be updated using the basic formulation of Bayesian inference:</p>
<p id="p-0033" num="0041">
<maths id="MATH-US-00001" num="00001">
<math overflow="scroll">
<mrow>
  <mrow>
    <mrow>
      <mi>P</mi>
      <mo>&#x2061;</mo>
      <mrow>
        <mo>(</mo>
        <mrow>
          <mi>H</mi>
          <mo>&#x2758;</mo>
          <mi>E</mi>
        </mrow>
        <mo>)</mo>
      </mrow>
    </mrow>
    <mo>=</mo>
    <mfrac>
      <mrow>
        <mrow>
          <mi>P</mi>
          <mo>&#x2061;</mo>
          <mrow>
            <mo>(</mo>
            <mrow>
              <mi>E</mi>
              <mo>&#x2758;</mo>
              <mi>H</mi>
            </mrow>
            <mo>)</mo>
          </mrow>
        </mrow>
        <mo>*</mo>
        <mrow>
          <mi>P</mi>
          <mo>&#x2061;</mo>
          <mrow>
            <mo>(</mo>
            <mi>H</mi>
            <mo>)</mo>
          </mrow>
        </mrow>
      </mrow>
      <mrow>
        <mi>P</mi>
        <mo>&#x2061;</mo>
        <mrow>
          <mo>(</mo>
          <mi>E</mi>
          <mo>)</mo>
        </mrow>
      </mrow>
    </mfrac>
  </mrow>
  <mo>,</mo>
</mrow>
</math>
</maths>
<br/>
where P(E)=&#x3a3;P(E|H<sub>i</sub>)*P(H<sub>i</sub>), where H<sub>i </sub>are all the possible hypotheses.
</p>
<p id="p-0034" num="0042">In order to combine the evidence provided by the different heuristics, exemplary embodiments determine the accuracy of each heuristic, that is, the probabilities P(E|H<sub>S</sub>) and P(E|H<sub>C</sub>) for each type of evidence E. These conditional probabilities can be determined either by using expert knowledge or by learning them from labeled data where the server identities are know. Exemplary embodiments use data labeled by Argus (http://www.qosient.com/argus/, 2009) as the ground truth. This dataset consists of 34.8 million NetFlow traffic collected at the border of the University of Maryland during 30 minutes. This dataset will be explained in later paragraphs.</p>
<p id="p-0035" num="0043"><figref idref="DRAWINGS">FIGS. 3-6</figref> are graphical user interfaces illustrating accuracies of heuristics, according to exemplary embodiments. For heuristics H.1, H.2 and H.3 which have binary output, P(E|H) is a single value. However for heuristics H.0, H.4, H.5 and H.6, P(E|H) may be built as a probability distribution. To assess empirically these distributions, <figref idref="DRAWINGS">FIGS. 3-6</figref> are plots of the respective accuracies of heuristics H.0, H.4, H.5 and H.6 according to their output value (up to 10 seconds for H.0, and up to 100 for H.4, H.5 and H.6). Accuracy may be defined as the number of bidirectional flows correctly oriented based on ground truth from Argus divided by the total number of bidirectional flows processed. <figref idref="DRAWINGS">FIGS. 3-6</figref> illustrate that the accuracy increases with the time difference between requests and replies (H.0), the number of related ports (H.4), the number of related IP addresses (H.5) and the number of related end points (H.6).</p>
<p id="p-0036" num="0044"><figref idref="DRAWINGS">FIG. 3</figref> illustrates P(E|H<sub>s</sub>) of H.0 with increasing difference in timestamp difference between request and reply flows. <figref idref="DRAWINGS">FIG. 4</figref> illustrates P(E|H<sub>s</sub>) of H.4 with increasing number of related port numbers. <figref idref="DRAWINGS">FIG. 5</figref> illustrates P(E|H<sub>s</sub>) of H.5 with increasing number of related IPs. <figref idref="DRAWINGS">FIG. 6</figref> illustrates P(E|H<sub>s</sub>) of H.6 with increasing number of related end points. <figref idref="DRAWINGS">FIGS. 4 and 6</figref> illustrate a similar plot, which can be explained by the fact that client ports are randomly selected among 64,511 values, so the number of client ports and the number of clients are different only in the rare cases where two clients communicating with the same server randomly select the same source port.</p>
<p id="p-0037" num="0045">To fully implement the results from <figref idref="DRAWINGS">FIGS. 3-6</figref>, the next step may include fitting a distribution to the empirical results of each heuristic. This task, though, may require further analysis and the collection of additional empirical data. Exemplary embodiments, however, may be simpler by working with single values for P(E|H). These values were calculated empirically for each heuristic using their average accuracies. An evaluation of the empirical calculations is presented below. The implementation and evaluation of probability distributions, however, will be conducted in future work.</p>
<p id="p-0038" num="0046">The accuracy of the exemplary embodiments may be evaluated by addressing two related issues:</p>
<p id="p-0039" num="0047">1. Generating correctly oriented bidirectional flows, and</p>
<p id="p-0040" num="0048">2. accurately identifying server end points.</p>
<p id="p-0041" num="0049">The first issue was evaluated by comparing the bidirectional flows generated from the same dataset using the software application <b>30</b> and using Argus, which is a packet-based bidirectional flow generator discussed above. The second issue was evaluated by comparing the list of network services discovered by the software application <b>30</b> and by the Passive Asset Detection Service (or &#x201c;PADS&#x201d;) from the same dataset. As those of ordinary skill in the art understand, PADS is a packet-based passive service discovery tool. The inventors assumed PADS and Argus to be more accurate than the software application <b>30</b> and able to produce a baseline dataset for evaluation since they both work from detailed packet data instead of high level flow data. The goal of the below paragraphs is to measure exactly how much accuracy is lost by working only with flow.</p>
<p id="p-0042" num="0050">First, though, the dataset is discussed. The dataset used for this evaluation includes raw packet data captured at the border of the University of Maryland network during a 30 minute interval. A total of 154.9 million packets were collected and these packets were exchanged between 56,977 internal hosts and 1.57 million external hosts. The raw packet dataset was divided into 17 files prior to being processed by each tool, in order to reproduce the conditions of a production environment where flows are processed in batches of a few minutes. Before being processed by the software application <b>30</b>, the packet data had to be translated to unidirectional NetFlow data in order to replicate the behavior of a router. The Softflowd product (www.mindrot.org/projects/softflowd/) and Nfcapd from the Nfdump package (P. Haag: Watch Your Flows with NJSen and NFDUMP, http://www.ripe.net/ripe/meetings/ripe-50/presentations/ripe50-plenary-tue-nfsennfdump.pdf) to complete this task. A total of 34.8 million unidirectional Netflows were generated. The flows can be partitioned into:
<ul id="ul0006" list-style="none">
    <li id="ul0006-0001" num="0000">
    <ul id="ul0007" list-style="none">
        <li id="ul0007-0001" num="0051">11.21 million TCP flows,</li>
        <li id="ul0007-0002" num="0052">23.15 million UDP flows,</li>
        <li id="ul0007-0003" num="0053">445,033 ICMP flows, and</li>
        <li id="ul0007-0004" num="0054">28,717 other flows.
<br/>
From the TCP and UDP flows, the software application <b>30</b> produced:
</li>
        <li id="ul0007-0005" num="0055">1.71 million unidirectional TCP flows,</li>
        <li id="ul0007-0006" num="0056">9.23 million unidirectional UDP flows,</li>
        <li id="ul0007-0007" num="0057">2.67 million bidirectional TCP flows from which 64,104 TCP services were detected, and</li>
        <li id="ul0007-0008" num="0058">3.52 bidirectional UDP flows from which 26,077 UDP services were detected.
<br/>
We then processed the packet data directly with Argus and PADS. PADS detected a total of 43,066 TCP services and Argus produced:
</li>
        <li id="ul0007-0009" num="0059">3.87 million unidirectional TCP flows,</li>
        <li id="ul0007-0010" num="0060">10.10 million unidirectional UDP flows,</li>
        <li id="ul0007-0011" num="0061">2.85 bidirectional TCP flows,</li>
        <li id="ul0007-0012" num="0062">3.87 bidirectional UDP flows.
<br/>
We note that PADS does not support the detection of UDP services.
</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0043" num="0063">First note the discrepancies between the number of unidirectional and bidirectional flows produced by Argus and the software application <b>30</b>. These differences come from the distinct cut off and aggregation rules that the two programs apply. In order to evaluate how accurately the software application <b>30</b> can decide on the orientation of flows, all bidirectional flows were aggregated regardless of their orientation using a key based on the hash value computed from the source/destination IP addresses, protocol and source/destination ports. The inventors then compared for each key if Argus and the software application <b>30</b> agreed or disagreed on the orientation of the bidirectional flow represented. This comparison led to three cases: 1) the software application <b>30</b> and Argus agreed, 2) the software application <b>30</b> and Argus disagreed, and 3) Argus output multiple orientations for a given bidirectional flow key, so the agreement was mixed. On the 5.94 unique bidirectional flow keys evaluated, the software application <b>30</b> and Argus agreed 79.60% of the time, disagreed 12.70% of the time and results were mixed for the remaining 7.70%.</p>
<p id="p-0044" num="0064">To analyze further these results, the inventors first broke them down according to the output of the Bayesian inference that the software application <b>30</b> calculated to decide on the orientation of each bidirectional flows. The Bayesian inference output can be seen as a confidence value, where 0.5 means that the software application <b>30</b> could not decide on the orientation of the bidirectional flow, and 1 means the software application <b>30</b> was 100% sure on the orientation to apply. The percentage of agreement between Argus and the software application <b>30</b> shows that the accuracy increases with the probability provided by the Bayesian inference output. This empirical result shows that by using flows instead of packet data, the software application <b>30</b> has reduced accuracy but can still provide indication to a network administrator on the confidence of the results.</p>
<p id="p-0045" num="0065">On the subset of flows where Argus could unequivocally decide on flow direction, the overall accuracy of the software application <b>30</b> to generate correctly oriented bidirectional flows is 86.24%, and 87.32% when the software application <b>30</b> is certain. The next step in the evaluation is to understand precisely how much combining heuristics through Bayesian inference helped to reach this result. The accuracy of each heuristic is individually measured and the heuristic output is compared against, respectively, Argus and the end decision taken by the Bayesian inference of the software application <b>30</b>. The results indicate that heuristics H.1 to H.6 have an accuracy ranging from 74.37% to 78.28%, all below the accuracy of 79.60% of the Bayesian inference. H.0 provides very good accuracy (96.61% on the subset of flows where it could decide) but unfortunately only 14.38% of bidirectional flows were identified from non-identical timestamps. The inventors believe that this result strongly depends on the latency of the network where the data is recorded, since an important latency can create enough delays between request and reply flows for H.0 to be conclusive. The inventors conclude first that besides H.0, the heuristics strongly agree with the Bayesian inference decision, which indirectly means that heuristics rarely contradict each other. A second conclusion is that one main advantage of using Bayesian inference is to be able to bridge the indecision gap between heuristics. Indeed, the inventors calculated that the Bayesian inference output was inconclusive (i.e. it outputs a probability of 0.5) in only 0.01% of the case, which is below the rates of all heuristics taken individually.</p>
<p id="p-0046" num="0066">The last part of the evaluation measured the accuracy of the service detection capability of the software application <b>30</b> by using PADS as the baseline. Since PADS detects only TCP services, the focus was only on TCP traffic. The numbers of unique TCP services detected are:
<ul id="ul0008" list-style="none">
    <li id="ul0008-0001" num="0000">
    <ul id="ul0009" list-style="none">
        <li id="ul0009-0001" num="0067">total from the software application <b>30</b>: 64,104,</li>
        <li id="ul0009-0002" num="0068">total from PADS: 43,066,</li>
        <li id="ul0009-0003" num="0069">from both the software application <b>30</b> and PADS: 32,139,</li>
        <li id="ul0009-0004" num="0070">from the software application <b>30</b> only: 31,965,</li>
        <li id="ul0009-0005" num="0071">from PADS only 10,927.
<br/>
These results indicate apparently that the software application <b>30</b> produced 31,965 false positives and missed 10,927 services. After looking more carefully at the services detected by the software application <b>30</b> only, the inventors discovered that 60.64% of these false positives were actually due to TCP transactions from which no SYN flag have been recorded in the dataset. The absence of the SYN flag can be explained because some TCP transactions started before the beginning of our packet data collection. The inventors also discovered that the service detection functionality of PADS depends on the presence of the SYN flag. As a result, these services are actually not false positives but services from ongoing TCP transactions. Regarding the 10,927 services missed by the software application <b>30</b>, the inventors looked at the bidirectional flows from which these services could have been detected and we discovered that:
</li>
        <li id="ul0009-0006" num="0072">2,061 services were from unidirectional flows,</li>
        <li id="ul0009-0007" num="0073">2,641 services were from invalid bidirectional flows,</li>
        <li id="ul0009-0008" num="0074">3,797 services were from a combination of unidirectional flows and invalid bidirectional flows,</li>
        <li id="ul0009-0009" num="0075">1,035 services were from valid bidirectional flows, and</li>
        <li id="ul0009-0010" num="0076">the remaining 1,393 flows were from a combination of valid bidirectional flows and unidirectional or invalid bidirectional flows.
<br/>
As mentioned above, the rule applied by the software application <b>30</b> to discriminate valid from invalid bidirectional flows is to rely on the presence of the ACK flag and at least two packets for both the request and reply flow. PADS does not make such a distinction and, as such, was able to detect invalid services. This is a design choice and the inventors believe that differentiating valid from invalid flows help network operators to identify suspicious activity such as scanning where TCP handshakes are not completed. The large volume of services missed because of unidirectional flows is explained by the fact that some request and reply flows were expired and therefore recorded in distinct flow files. As a result, the software application <b>30</b>, which is working on one file at a time, could not merge them and generate bidirectional flows. Keeping track of unidirectional flows over multiple contiguous flow files could solve this issue, but would also reduce the scalability of the tool. Finally, missed services that could be linked to valid bidirectional flows are due to incorrect flow orientation decided by the combination of heuristics. The inventors are continuing to investigate these flows to understand if implementing additional heuristics could reduce the volume of missed services. In light of the large number of services missed by PADS because no SYN flag was recorded, the inventors redefined true and false positives as follows:
</li>
        <li id="ul0009-0011" num="0077">True positives are services detected by both the software application <b>30</b> and by PADS, as well as services detected by the software application <b>30</b> only but from bidirectional flows without SYN flag recorded, and</li>
        <li id="ul0009-0012" num="0078">false positives are services detected by the software application <b>30</b> only from bidirectional flows having the SYN flag recorded.
<br/>
Using these definitions the accuracy of the software application <b>30</b> was assessed according to the output value of the Bayesian inference. From 0.7 to 1.0, the accuracy increases with the Bayesian inference output. The numbers of services detected for values below 0.7 are too low to be significant.
</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0047" num="0079"><figref idref="DRAWINGS">FIGS. 7 and 8</figref> are graphical user interfaces illustrating case studies, according to exemplary embodiments. The first case study involved a longitudinal survey over 83 days of the most active servers and sources of unanswered activity in the organization network, and the second case study involved examples of malicious activity detected and visualized over 19 days at the University of Maryland. These examples were reported by a front-end software application developed to query and visualize the data generated by the software application <b>30</b>.</p>
<p id="p-0048" num="0080"><figref idref="DRAWINGS">FIG. 7</figref> illustrates the number of flows for internal servers and internal and external sources of unanswered activity over 83 days. From a security and network management point of view, having access to bidirectional flow data offers the important advantage of being able to differentiate valid communications, where network requests are answered by network replies, from invalid communications, where network requests are unanswered. As such, the sources and destinations of both valid network transaction (from valid bidirectional flows) and unanswered activity (from unidirectional or invalid bidirectional flows) can be directly extracted from the data collected by the software application <b>30</b>. This last category includes scanning activity, misconfiguration, backscatter from denial of service attacks and requests that could not be matched to replies by the software application <b>30</b>. <figref idref="DRAWINGS">FIG. 7</figref> provides an overview of 83 days of flows collected at the border of the University of Maryland network. The three time series represent the total number of flows for 1) internal servers, 2) internal sources of unanswered activity and 3) external sources of unanswered activity. The gap on the first week of October is due to the replacement of a network device during which the flow data collection had to be stopped. From <figref idref="DRAWINGS">FIG. 7</figref> the inventors calculated that on a daily average, servers hosted inside the organization network where exchanging 22.9 millions of flows with external hosts, internal hosts were sending 0.8 million unanswered request flows towards outside, and finally external hosts were sending 3.2 million unanswered request flows towards inside. The numbers of unanswered flows indicate the volume of scanning activity, and it is interesting to understand from the different pikes in <figref idref="DRAWINGS">FIG. 7</figref> the outbursts of suspicious activity. For example on Nov. 17, 2009 the spike in the internal sources of unanswered activity is due to a single internal compromised host aggressively scanning for port <b>3050</b> (hosting the Firebird relational database) with an estimated 55 thousand hosts targeted.</p>
<p id="p-0049" num="0081">To investigate further the activity related to port <b>3050</b>, the dataset provided by the software application <b>30</b> was queried for a weekly report of internal and external client, server and scanner activities. Clients and servers are extracted from valid bidirectional end points, while scanners are known from source end points producing a large number of unanswered request flows. If the inventors only had access to unidirectional flows, differentiating clients from scanners would not have been possible.</p>
<p id="p-0050" num="0082"><figref idref="DRAWINGS">FIG. 8</figref> illustrates details of weekly internal and external activities for port <b>3050</b>. The number of flows for internal servers and internal and external sources of unanswered activity over 83 days. <figref idref="DRAWINGS">FIG. 8</figref> illustrates how the malicious activity propagated. During the first two weeks, few internal hosts are serving legitimate traffic on port <b>3050</b>. On week <b>39</b>, a single external scanner sent 46,642 flows to try to find internal servers to compromise. The reader may see from the external client activity that this scanner was able to find few servers. This pattern continues the following weeks and this external scanner finds more and more internal servers. On week <b>43</b>, the first internal scanning activity on port <b>3050</b> is detected with 2,723 unanswered flows sent. Then on week <b>47</b>, the massive scanning that we detected in the spike in <figref idref="DRAWINGS">FIG. 7</figref> appears, with a total of 482,315 unanswered flows sent. This timeline reveals that a security administrator who had access to this data could have detected the external scanning activity starting on week <b>39</b>, then could query the software application <b>30</b> to precisely know the population of internal servers listening on port <b>3050</b>, and finally ascertain whether each of them is not vulnerable and is properly protected.</p>
<p id="p-0051" num="0083"><figref idref="DRAWINGS">FIGS. 9-11</figref> are graphical user interfaces illustrating detection of malicious activity, according to exemplary embodiments. <figref idref="DRAWINGS">FIG. 9</figref> provides a snapshot of network service activity for port TCP/10000 over 19 days. This port is known to host the Webmin application, which has been shown to be vulnerable to remote exploits. <figref idref="DRAWINGS">FIG. 9</figref> has two parts: the top part (perhaps colored in red) shows external hosts scanning the organization network to find vulnerable applications on port TCP/10000. The bottom part (perhaps colored in green) represents internal hosts listening on port TCP/10000. Coloring may be added based on the number of unanswered unidirectional flows (red) versus valid bidirectional flows (green). Moreover, the average number of peers displayed for each end point in the metric section clearly discriminates scanning activity (between 16 and 27,200 peers scanned per day) and server activity (1 peer on the average per day).</p>
<p id="p-0052" num="0084">Identifying server end points allows us also to identify client and scanner end points. Specifically, a scanner is a client that tries to contact more than a given number of nonexistent servers. A threshold of 5 nonexistent servers in 5 minutes was used. The software application <b>30</b> was able to quickly spot compromised machines that attempted to infect their neighbors. For example, <figref idref="DRAWINGS">FIGS. 10 and 11</figref> illustrate nineteen (19) days of activity for ports TCP/445 and TCP/6666, respectively. <figref idref="DRAWINGS">FIG. 10</figref> illustrates Worm infection on port TCP/445 Port, while <figref idref="DRAWINGS">FIG. 11</figref> illustrates Scanning traffic on port TCP/6666. TCP/445 hosts the file and resource sharing application of the Windows operating system, and is one of the most frequently used ports by worms such as Conficker [14] to infect machines. <figref idref="DRAWINGS">FIG. 10</figref> indicates that four internal hosts seem infected and generate a significant volume of unanswered unidirectional flows (colored in red). A fifth host is likely to be a legitimate Windows machine serving clients on port TCP/445 (perhaps colored in green). <figref idref="DRAWINGS">FIG. 11</figref> indicates one suspicious external host scanning port TCP/6666 (perhaps colored in red) and three internal hosts exchanging valid bidirectional flows (perhaps colored in green). Port TCP/6666 is one of the default port used for IRC, which is known to carry command and control traffic for botnets (see E. Cooke, F. Jahanian, and D. McPherson, <i>The Zombie Roundup: Understanding, Detecting, and Disrupting Botnets</i>, Proc. on the First Workshop on Steps to Reducing Unwanted Traffic on the Internet (STRUTI), 2005, pp. 39-44).</p>
<p id="p-0053" num="0085">The software application <b>30</b> offers network operators and security administrators access to bidirectional flows without the issue of having to instrument the network with new costly sensors. The above paragraphs showed how important the data produced by the software application <b>30</b> could be to immediately gain visibility over the organization's network. Moreover, running on top of NetFlow offers the important advantages of not being affected by encrypted traffic or by privacy issue related to deep packet inspection. Here, though, future work is discussed. As previously explained, the results discussed above were related to non-sampled flows. Results from other evaluations of passive detection techniques indicate that sampling has a limited impact on the overall accuracy. For example, Bartlett, et al. report that capturing only 16% of the data results only in an 11% drop in discovered servers. See G. Bartlett, J. Heidemann, and C. Papadopoulos, <i>Understanding Passive and Active Service Discovery</i>, Proc. 7th ACM SIGCOMM Conference on Internet Measurement, 2007, pp. 57-70. The inventors believe, however, that random flow sampling will likely break the correct detection of bidirectional activity. Future work, then, may precisely assess the effect of sampling on the detection accuracy of the different heuristics. Furthermore, the results discussed above were related to asymmetric routing. It was assumed in this study that NetFlow collectors covered the pathways for both requests and replies. In some organizational networks, replies and requests can sometimes take different routes for which there is no NetFlow collector deployed. Such architecture would again break the pairing of unidirectional flows into bidirectional flows. Finally, in these results, the software application <b>30</b> worked at the network layer and therefore heavily relied on port numbers. As a consequence, it can be difficult or impossible for a network operator to identify the application behind a service detected by the software application <b>30</b>. This issue arises from the fact that some applications use random ports or hide behind well known ports. For example SKYPE&#xae; is famous for using port <b>80</b> or port <b>443</b>, normally reserved to web traffic, in order to evade firewall protection (SKYPE&#xae; is a registered trademark of Skype Limited). Related work by Erman, et al. on flow-based traffic classification proved that it is possible to accurately identify applications using only NetFlow. See J. Erman, A. Mahanti, M. Arlitt, and C. Williamson, <i>Identifying and Discriminating Between Web and Peer</i>-<i>to</i>-<i>Peer Traffic in the Network Core</i>, Proc. of the 16th International Conference on World Wide Web, 2007, p. 892. Future work may involve developing additional heuristics for the software application <b>30</b> to be able to precisely classify traffic regardless of port number. These heuristics can work on 1) relationships between flow characteristics, such as the ratio between number of packets and number of bytes or the time distribution of flows, and 2) relationships between hosts. The inventors believe that discovering communication patterns between hosts would be useful not only to identify applications but also large communication structures such as those used by P2P networks or botnets.</p>
<p id="p-0054" num="0086"><figref idref="DRAWINGS">FIG. 12</figref> is another graphical user interface illustrating preliminary results, according to exemplary embodiments. <figref idref="DRAWINGS">FIG. 12</figref> plots the number of bytes vs. duration of activity for 24 hours of server end points discovered. <figref idref="DRAWINGS">FIG. 12</figref> provides some preliminary results with 24 hours of internal servers passively detected by the software application <b>30</b> and mapped using two characteristics: 1) the total number of bytes exchanged by each server end point, and 2) the number of &#x201c;5 minute&#x201d; intervals during which each server end point was active. <figref idref="DRAWINGS">FIG. 12</figref> illustrates several clusters that could help a network operator to understand the traffic load and the behavior of network applications in the organization. For example, P2P applications are known to open transient ports to exchange a large volume of traffic over short period of time. Servers in the top left part of <figref idref="DRAWINGS">FIG. 12</figref> display such behavior.</p>
<p id="p-0055" num="0087">Exemplary embodiments, in conclusion, describe a novel approach to combine server detection heuristics using Bayesian inference. Exemplary embodiments include a passive server discovery architecture and application that requires only NetFlow to run. The evaluation of the software application <b>30</b> in an academic network of 40,000 computers reveals that the Bayesian inference succeeds in improving the accuracy of the different heuristics and provides to network operators a meaningful confidence value for each server discovered. When this confidence is at its higher value, the software application <b>30</b> detects the correct orientation of 87% of the bidirectional flows processed, and identifies 93% of the servers. Finally, the different case studies show how the network visibility offered by the software application <b>30</b> provides a simple and efficient solution for network operators and security analysts to detect security compromises, to find undocumented and potentially vulnerable servers and to forensic security issues.</p>
<p id="p-0056" num="0088"><figref idref="DRAWINGS">FIG. 13</figref> is a schematic illustrating still more exemplary embodiments. <figref idref="DRAWINGS">FIG. 13</figref> is a generic block diagram illustrating the software algorithm <b>30</b> operating within a processor-controlled device <b>300</b>. As paragraph [0012] explained, the software algorithm <b>30</b> may operate in any processor-controlled device <b>300</b>. <figref idref="DRAWINGS">FIG. 13</figref>, then, illustrates the software algorithm <b>30</b> stored in a memory subsystem of the processor-controlled device <b>300</b>. One or more processors communicate with the memory subsystem and execute the software algorithm <b>30</b>. Because the processor-controlled device <b>300</b> illustrated in <figref idref="DRAWINGS">FIG. 13</figref> is well-known to those of ordinary skill in the art, no detailed explanation is needed.</p>
<p id="p-0057" num="0089"><figref idref="DRAWINGS">FIG. 14</figref> depicts other possible operating environments for additional aspects of the exemplary embodiments. <figref idref="DRAWINGS">FIG. 14</figref> illustrates the software algorithm <b>30</b> operating within various other devices <b>400</b>. <figref idref="DRAWINGS">FIG. 14</figref>, for example, illustrates that the software algorithm <b>30</b> may entirely or partially operate within a set-top box (&#x201c;STB&#x201d;) (<b>402</b>), a personal/digital video recorder (PVR/DVR) <b>404</b>, personal digital assistant (PDA) <b>406</b>, a Global Positioning System (GPS) device <b>408</b>, an interactive television <b>410</b>, an Internet Protocol (IP) phone <b>412</b>, a pager <b>414</b>, a cellular/satellite phone <b>416</b>, or any computer system, communications device, or processor-controlled device utilizing the processor <b>50</b> and/or a digital signal processor (DP/DSP) <b>418</b>. The device <b>400</b> may also include watches, radios, vehicle electronics, clocks, printers, gateways, mobile/implantable medical devices, and other apparatuses and systems. Because the architecture and operating principles of the various devices <b>400</b> are well known, the hardware and software componentry of the various devices <b>400</b> are not further shown and described. If, however, the reader desires more details, the reader is invited to consult the following sources: L<smallcaps>AWRENCE </smallcaps>H<smallcaps>ARTE </smallcaps>et al., GSM S<smallcaps>UPERPHONES </smallcaps>(1999); S<smallcaps>IEGMUND </smallcaps>R<smallcaps>EDL </smallcaps>et al., GSM <smallcaps>AND </smallcaps>P<smallcaps>ERSONAL </smallcaps>C<smallcaps>OMMUNICATIONS </smallcaps>H<smallcaps>ANDBOOK </smallcaps>(1998); and J<smallcaps>OACHIM </smallcaps>T<smallcaps>ISAL</smallcaps>, GSM C<smallcaps>ELLULAR </smallcaps>R<smallcaps>ADIO </smallcaps>T<smallcaps>ELEPHONY </smallcaps>(1997); the GSM Standard 2.17, formally known <i>Subscriber Identity Modules, Functional Characteristics </i>(GSM 02.17 V3.2.0 (1995-01))&#x201c;; the GSM Standard 11.11, formally known as <i>Specification of the Subscriber Identity Module&#x2014;Mobile Equipment </i>(<i>Subscriber Identity Module&#x2014;ME</i>) <i>interface </i>(GSM 11.11 V5.3.0 (1996-07))&#x201d;; M<smallcaps>ICHEAL </smallcaps>R<smallcaps>OBIN </smallcaps>&#x26; M<smallcaps>ICHEL </smallcaps>P<smallcaps>OULIN</smallcaps>, D<smallcaps>IGITAL </smallcaps>T<smallcaps>ELEVISION </smallcaps>F<smallcaps>UNDAMENTALS </smallcaps>(2000); J<smallcaps>ERRY </smallcaps>W<smallcaps>HITAKER AND </smallcaps>B<smallcaps>LAIR </smallcaps>B<smallcaps>ENSON</smallcaps>, V<smallcaps>IDEO AND </smallcaps>T<smallcaps>ELEVISION </smallcaps>E<smallcaps>NGINEERING </smallcaps>(2003); J<smallcaps>ERRY </smallcaps>W<smallcaps>HITAKER</smallcaps>, DTV H<smallcaps>ANDBOOK </smallcaps>(2001); J<smallcaps>ERRY </smallcaps>W<smallcaps>HITAKER</smallcaps>, DTV: T<smallcaps>HE </smallcaps>R<smallcaps>EVOLUTION IN </smallcaps>E<smallcaps>LECTRONIC </smallcaps>I<smallcaps>MAGING </smallcaps>(1998); and E<smallcaps>DWARD </smallcaps>M. S<smallcaps>CHWALB</smallcaps>, <smallcaps>I</smallcaps>TV H<smallcaps>ANDBOOK</smallcaps>: T<smallcaps>ECHNOLOGIES AND </smallcaps>S<smallcaps>TANDARDS </smallcaps>(2004).</p>
<p id="p-0058" num="0090">Exemplary embodiments may be physically embodied on or in a computer-readable storage medium. This computer-readable medium may include CD-ROM, DVD, tape, cassette, floppy disk, memory card, and large-capacity disks. This computer-readable medium, or media, could be distributed to end-subscribers, licensees, and assignees. These types of computer-readable media, and other types not mention here but considered within the scope of the exemplary embodiments. A computer program product comprises processor-executable instructions for using heuristics to answer difficult questions, as explained above.</p>
<p id="p-0059" num="0091">While the exemplary embodiments have been described with respect to various features, aspects, and embodiments, those skilled and unskilled in the art will recognize the exemplary embodiments are not so limited. Other variations, modifications, and alternative embodiments may be made without departing from the spirit and scope of the exemplary embodiments.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-math idrefs="MATH-US-00001" nb-file="US08626691-20140107-M00001.NB">
<img id="EMI-M00001" he="6.35mm" wi="76.20mm" file="US08626691-20140107-M00001.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A method of detecting a server operating in a network, comprising:
<claim-text>collecting Internet Protocol traffic information;</claim-text>
<claim-text>merging the Internet Protocol traffic information having a common source address and a common destination address;</claim-text>
<claim-text>merging the Internet Protocol traffic information having a source address and an opposing destination address to generate bidirectional flows;</claim-text>
<claim-text>separating valid bidirectional flows from invalid bidirectional flows;</claim-text>
<claim-text>retrieving a set of heuristic rules from memory for determining the server;</claim-text>
<claim-text>determining an output of each heuristic rule in the set of heuristic rules based on the valid bidirectional flows;</claim-text>
<claim-text>combining all outputs produced by the set of heuristic rules; and</claim-text>
<claim-text>generating a probability that the source address corresponds to the server based on combined outputs produced by the set of heuristic rules.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising determining the source address fails to correspond to the server.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising determining the destination address corresponds to a client.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising receiving NetFlow information as the Internet Protocol traffic information.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising retrieving an interval of time for collecting the Internet Protocol traffic information.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising retrieving an interval of time for merging the Internet Protocol traffic information having the common source address and the common destination address.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising retrieving an interval of time for merging the Internet Protocol traffic information having the source address and the opposing destination address.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. A system, comprising:
<claim-text>a processor; and</claim-text>
<claim-text>memory storing code that when executed causes the processor to perform operations, the operations comprising:</claim-text>
<claim-text>collecting Internet Protocol traffic information;</claim-text>
<claim-text>merging the Internet Protocol traffic information having a common source address and a common destination address to generate unidirectional flows;</claim-text>
<claim-text>merging the Internet Protocol traffic information having a source address and an opposing destination address to generate bidirectional flows;</claim-text>
<claim-text>separating valid bidirectional flows from invalid bidirectional flows;</claim-text>
<claim-text>retrieving a set of heuristic rules from memory for determining the server, wherein one heuristic rule differentiates the server from a client based on a difference in timestamps of the unidirectional flows;</claim-text>
<claim-text>determining an output of each heuristic rule in the set of heuristic rules based on the valid bidirectional flows;</claim-text>
<claim-text>combining all outputs produced by the set of heuristic rules; and</claim-text>
<claim-text>generating a probability that the source address corresponds to the server based on combined outputs produced by the set of heuristic rules.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The system according to <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the operations further comprise determining the source address fails to correspond to the server.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The system according to <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the operations further comprise determining the destination address corresponds to the client.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The system according to <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the operations further comprise receiving NetFlow information.</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The system according to <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the operations further comprise retrieving an interval of time for collecting the Internet Protocol traffic information.</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The system according to <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the operations further comprise retrieving an interval of time for merging the Internet Protocol traffic information having the common source address and the common destination address.</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The system according to <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the operations further comprise retrieving an interval of time for merging the Internet Protocol traffic information having the source address and the opposing destination address.</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. A memory storing executable instructions that when executed cause a processor to perform operations, the operations comprising:
<claim-text>collecting Internet Protocol traffic information;</claim-text>
<claim-text>merging the Internet Protocol traffic information having a common source address and a common destination address to generate unidirectional flows;</claim-text>
<claim-text>merging the Internet Protocol traffic information having a source address and an opposing destination address to generate bidirectional flows;</claim-text>
<claim-text>separating valid bidirectional flows from invalid bidirectional flows;</claim-text>
<claim-text>retrieving a set of heuristic rules from memory, the set of heuristic rules differentiating the server from a client based on a difference in timestamps of the unidirectional flows;</claim-text>
<claim-text>determining an output of each heuristic rule in the set of heuristic rules based on the valid bidirectional flows;</claim-text>
<claim-text>combining all outputs produced by the set of heuristic rules; and</claim-text>
<claim-text>generating a probability that the source address corresponds to the server based on combined outputs produced by the set of heuristic rules.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The memory according to <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the operations further comprise determining the source address fails to correspond to the server.</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The memory according to <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the operations further comprise determining the destination address corresponds to the client.</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The memory according to <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the operations further comprise receiving NetFlow information.</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. The memory according to <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the operations further comprise retrieving an interval of time for collecting the Internet Protocol traffic information.</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. The memory according to <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the operations further comprise retrieving an interval of time for merging the Internet Protocol traffic information having the common source address and the common destination address.</claim-text>
</claim>
</claims>
</us-patent-grant>

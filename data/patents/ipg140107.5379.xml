<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08626479-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08626479</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>12548609</doc-number>
<date>20090827</date>
</document-id>
</application-reference>
<us-application-series-code>12</us-application-series-code>
<us-term-of-grant>
<us-term-extension>864</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>17</main-group>
<subgroup>50</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>703 13</main-classification>
</classification-national>
<invention-title id="d2e53">Client load simulation framework</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>5812780</doc-number>
<kind>A</kind>
<name>Chen et al.</name>
<date>19980900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709224</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>6230142</doc-number>
<kind>B1</kind>
<name>Benigno et al.</name>
<date>20010500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>6295557</doc-number>
<kind>B1</kind>
<name>Foss et al.</name>
<date>20010900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709224</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>6324492</doc-number>
<kind>B1</kind>
<name>Rowe</name>
<date>20011100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>703 13</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>7339891</doc-number>
<kind>B2</kind>
<name>Binder et al.</name>
<date>20080300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>370231</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>2003/0156549</doc-number>
<kind>A1</kind>
<name>Binder et al.</name>
<date>20030800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>370252</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>2008/0077375</doc-number>
<kind>A1</kind>
<name>Fernandez</name>
<date>20080300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00008">
<othercit>Jafer, et al. , &#x201c;Modeling Remote System for Sensor Monitoring using Verilog HDL and SIMULINK Co-Simulation&#x201d;, Retrieved at &#x3c;&#x3c;http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=01518189&#x3e;&#x3e;, 2005 IEEE, pp. 64-69.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00009">
<othercit>Cunha, et al. , &#x201c;A First Approach for a Regional Wide VEPR&#x201d;, Retrieved at &#x3c;&#x3c;http://www.dcc.fc.up.pt/&#x2dc;lfa/healthinf08-vepr.pdf&#x3e;&#x3e;, &#x201c;HEALTHINF 2008&#x2014;International Conference on Health Informatics&#x201d;, pp. 215-218.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00010">
<othercit>Ammar, et al. , &#x201c;The Development of a Client/Server Architecture for Standardized Medical Application Network Services&#x201d;, Retrieved at &#x3c;&#x3c;http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=00756745&#x3e;&#x3e;, May 18, 2009, pp. 8.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00011">
<othercit>Smith, et al. , &#x201c;A Real-Time Hand Gesture Interface for Medical Visualization Applications&#x201d;, Retrieved at &#x3c;&#x3c;http://www.movesinstitute.org/&#x2dc;jpwachs/papers/WSC10<sub>&#x2014;</sub>wachs.pdf&#x3e;&#x3e;, pp. 13, 2006.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00012">
<othercit>Osl et al. , &#x201c;A Cellular Automaton Framework for Infectious Disease Spread Simulation&#x201d;, Retrieved at &#x3c;&#x3c;http://www.pubmedcentral.nih.gov/articlerender.fcgi?artid=2666960&#x3e;&#x3e;, Apr. 24, 2008, pp. 1-10.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00013">
<othercit>Grishman, et al. , &#x201c;Information Extraction for Enhanced Access to Disease Outbreak Reports&#x201d;, Retrieved at &#x3c;&#x3c;http://nlp.cs.nyu.edu/publication/papers/grishman-bioinf02.pdf&#x3e;&#x3e;, pp. 1-15, 2002.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00014">
<othercit>Fraser et al. , &#x201c;Factors that Make an Infectious Disease Outbreak Controllable&#x201d;, Retrieved at &#x3c;&#x3c;http://www.episouth.org/outputs/wp5/s<sub>&#x2014;</sub>t<sub>&#x2014;</sub>module/articles/Factors%20to%20control%20outbreaks.pdf&#x3e;&#x3e;, Apr. 20, 2004 , vol. 101, No. 16, pp. 6146-6151.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00015">
<othercit>Rudie, et al. , &#x201c;Near-Optimal Online Control of Dynamic Discrete&#x2014;Event Systems&#x201d;, Retrieved at &#x3c;&#x3c;http://research.cs.queensu.ca/home/grigorov/nearoptimal.pdf&#x3e;&#x3e;, pp. 1-29, 2006.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>10</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>703 13</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>4</number-of-drawing-sheets>
<number-of-figures>4</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20110054841</doc-number>
<kind>A1</kind>
<date>20110303</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Wang</last-name>
<first-name>Zheng</first-name>
<address>
<city>Gaithersburg</city>
<state>MD</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Wang</last-name>
<first-name>Zheng</first-name>
<address>
<city>Gaithersburg</city>
<state>MD</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Gonzalez Saggio &#x26; Harlan LLP</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>Mircosoft Corporation</orgname>
<role>02</role>
<address>
<city>Redmond</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Craig</last-name>
<first-name>Dwin M</first-name>
<department>2123</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">Described is a technology for load testing a service such as a medical data service (e.g., Microsoft Amalga&#xae; UIS) with mixed test sets. Simulated users perform randomly selected operations against the service. State machines are created to represent the simulated users, with the operations arranged within states of the state machine. By randomly selecting each state and its operations, the actions of many real users may be simulated, providing a realistic load test of the service. Moreover, to match certain types of usage scenarios, the states in a state machine may be weighted relative to one another so that the random selection is biased in favor of more weighted states. Similarly, each operation within a state may be weighted relative to each other operation within the same state, so that when a state is determined, the random selection is biased in favor of more weighted operations within that state.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="154.26mm" wi="185.67mm" file="US08626479-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="185.17mm" wi="156.04mm" orientation="landscape" file="US08626479-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="225.89mm" wi="160.87mm" orientation="landscape" file="US08626479-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="252.98mm" wi="158.07mm" file="US08626479-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="245.19mm" wi="178.48mm" orientation="landscape" file="US08626479-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">BACKGROUND</heading>
<p id="p-0002" num="0001">Microsoft Amalga&#xae; UIS is a unified intelligence system/service that provides client users with access to clinical data. The amount of clinical data including medical records that is maintained for patients can be vast, as can the number of concurrent users accessing the data and number of varied scenarios in which users access the system.</p>
<p id="p-0003" num="0002">In order for such a system (or similar system) to be evaluated and improved, load testing (including stress and reliability testing) needs to be performed. However, given the large amount of data and the complicated patterns in which users may access the data, known load testing techniques are not able to realistically simulate client loads when using such a service.</p>
<heading id="h-0002" level="1">SUMMARY</heading>
<p id="p-0004" num="0003">This Summary is provided to introduce a selection of representative concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter, nor is it intended to be used in any way that would limit the scope of the claimed subject matter.</p>
<p id="p-0005" num="0004">Briefly, various aspects of the subject matter described herein are directed towards a technology by which a service is realistically load tested by simulated users performing random operations against the service. In one aspect,.state machines are created to represent the simulated users. Each state machine contains a plurality of states, and each operation in a state machine is associated with one of the states. By randomly selecting states and operations within states according to the state machine's current working context, the actions of many real users may be simulated, providing a realistic load test of the service.</p>
<p id="p-0006" num="0005">For each simulated user, an operation is selected to perform based upon a random number that determines the state and operation within that state. States may be weighted relative to one another so that the random selection is biased in favor of more weighted states. Further, each operation within a state may be weighted relative to each other operation within the same state, so that when a state is determined, the random selection is biased in favor of more weighted operations within that state.</p>
<p id="p-0007" num="0006">Other advantages may become apparent from the following detailed description when taken in conjunction with the drawings.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0008" num="0007">The present invention is illustrated by way of example and not limited in the accompanying figures in which like reference numerals indicate similar elements and in which:</p>
<p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. 1</figref> is a block diagram representing example components for preloading modules for load testing a service with a simulated client load.</p>
<p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. 2</figref> is an example state diagram in which operations within states may be randomly selected to simulate client activities.</p>
<p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. 3</figref> is a flow diagram showing example steps that may be taken to load test a service with a simulated client load.</p>
<p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. 4</figref> shows an illustrative example of a computing environment into which various aspects of the present invention may be incorporated.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0004" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0013" num="0012">Various aspects of the technology described herein are generally directed towards simulating a realistic user load on a service such as Amalga&#xae; UIS via random user scenarios, for application server load/stress/reliability testing. In one aspect, this is accomplished via a load simulation framework that is based on random simulated user actions; for example, a random user may log in, receive a random list of patients (e.g., corresponding to a random time range), and perform operations that may randomly change as if an actual user was interacting with a user interface making choices. Multiple simulated users may do this in parallel. Note that any subset of the patients may be provided, and schemes other than random selection may be used to select such a subset.</p>
<p id="p-0014" num="0013">It should be understood that any of the examples herein are non-limiting. Indeed, as one example, the testing technology described herein may be used for simulating load on any service having a large set of data against which operations may be performed, not only clinical modules and data (such as in Amalga&#xae; UIS). As such, the present invention is not limited to any particular embodiments, aspects, concepts, structures, functionalities or examples described herein. Rather, any of the embodiments, aspects, concepts, structures, functionalities or examples described herein are non-limiting, and the present invention may be used various ways that provide benefits and advantages in computing and testing in general.</p>
<p id="p-0015" num="0014">Turning to <figref idref="DRAWINGS">FIG. 1</figref>, there is shown a block diagram representing example components for testing a service <b>102</b> from via test mechanism <b>104</b>, e.g., running in a client computing device or on multiple client computing devices. In general, a random generator <b>106</b> provides random numbers as needed, including to facilitate the logging in of a random simulated user, e.g., with appropriate &#x201c;testing&#x201d; credentials that the service <b>102</b> recognizes as valid. In this way, multiple simulated users can be dynamically generated so as to simultaneously perform various (e.g., random) operations against various (e.g., random patient) data. Note that as used herein, &#x201c;against the service&#x201d; means any performing action that causes the service to take an action in response, e.g., to login a user, provide a module, provide some data, log user activities, and so forth.</p>
<p id="p-0016" num="0015">In the example of Amalga&#xae;) UIS, a user can access patient data <b>108</b> through various modules <b>110</b> which are loaded as appropriate for the type of data. For example, an x-ray image or the like may be viewed through an image viewer module, a lab viewer module can be used to view lab records, and so forth. Note that different modules may correspond to different databases, and thus it is valuable to load test for these differences.</p>
<p id="p-0017" num="0016">Further, note that in such a privacy-controlled service/system, only certain users may load certain modules (as represented by the data store <b>112</b>). Thus, random selection of a simulated user allows different types of tests/modules to be run at the same time.</p>
<p id="p-0018" num="0017">Once a simulated client user is logged in, each client user scenario is modeled as a state machine (with context) <b>114</b>, e.g., in a device storage <b>116</b>. Note that having each simulated user be represented as a state machine allows dynamically building a context to which user operations can read and write, for keeping a current list of patients for the user, to select random operations and store information about those operations to allow the next selection and performance monitoring, and so forth. Such dynamic context building is advantageous when there are millions of patients, as a list of all patient identifiers need not be maintained for load testing; (doing so may not even be practical).</p>
<p id="p-0019" num="0018">For example, at login, different users may randomly select different date ranges (scopes), and thereby randomly load different lists of patients. Each simulated user may then randomly select among different patients in that user's list to perform operations against that user's data, e.g., to select a patient, to load the patient's chart for simulated viewing, and so on.</p>
<p id="p-0020" num="0019">Logic (e.g., program code) represented in <figref idref="DRAWINGS">FIG. 1</figref> as the client user workflow simulator <b>118</b> controls the timing of state changes (e.g., between operations) and communicates with a service-side client handling mechanism <b>120</b> to perform the requested operations and thereby load test the service <b>102</b>. At each state, each simulated user may have multiple operations (test cases) from which to choose. Operation selection is random, however weighted selection (described below) as configured by a tester (block <b>120</b>) may bias the selection to select more operations of one type than another type.</p>
<p id="p-0021" num="0020">Note that the time taken to perform any operation may be simulated, which also may be based on random number generation. For example, varying times may be used to simulate how long an actual user would review some piece of data (e.g., a patient list) before requesting another operation (e.g., selection of one patient) and so on (e.g., review the selected patient's chart).</p>
<p id="p-0022" num="0021">By way of example, <figref idref="DRAWINGS">FIG. 2</figref> shows four states, namely a start state <b>220</b>, a grid state <b>221</b>, a module state <b>222</b> and a data state <b>223</b>. At each state, there are one or more operations, with the arrows in <figref idref="DRAWINGS">FIG. 2</figref> showing state changes to another state's operations or selecting operations in the same state. Thus, the start state <b>220</b> has a Login operation <b>224</b> that transitions to the grid state <b>221</b>, which in turn has a ChangeView operation <b>225</b>, a Stat operation <b>226</b>, and a LabViewer operation <b>227</b>. In this example, the LabViewer operation <b>227</b> of the grid state <b>221</b> can transition to the module state <b>222</b>, which includes a (module state) LabViewer operation <b>230</b>, and Radiology, Medication, ImageViewer and ScannedChart operations <b>231</b>-<b>234</b>, respectively. The ImageViewer operation <b>233</b> and ScannedChart operation <b>234</b> can transition to the data state <b>223</b>, which includes an Image state <b>238</b> and a Chart state <b>239</b>.</p>
<p id="p-0023" num="0022">Note that states and operations are extendable and configurable. For example, in an implementation such as Amalga&#xae; UIS where web method calls are made to defined interfaces to perform operations and access data, the states and/or operations may be extended by extending the defined interfaces. Similarly, allowed transitions from an operation of one state to another state that are useful to evaluate may be configured, e.g., to match what a user can actually do when interfacing with the service.</p>
<p id="p-0024" num="0023">When testing is complete, the various contexts may be used for generating one or more results logs <b>122</b>, such as combined in some way into a report that summarizes the test results. Such a results log <b>122</b> may be computed at the completion of the testing, or as an ongoing computation. For example, the log may record the number of simulated users, performance data such as the average service response time taken for each type of activity, how much data was downloaded, and so forth. This can help determine how many actual users doing various tasks a service/system can handle at the same time while still being reasonably healthy, how scalable the system is, and so forth, for example.</p>
<p id="p-0025" num="0024">Turning to the weighting aspect, in general, a real user may perform available operations, including transitioning between states, as desired. This is somewhat random, and thus in simulation is controlled by random number generation so that all possible valid transitions between states and operations can be tested. However, in actual use, state transitions and operations are more likely to follow certain real environment load patterns depending on what users are trying to accomplish. For example, a radiologist will often tend to login, select a patient, load the ImageViewer module and then view image data for that patient, and then repeat for another patient. A doctor interested in lab results will likely follow a different pattern.</p>
<p id="p-0026" num="0025">In one aspect, to facilitate such different types of pattern evaluations, the otherwise random state transitions and/or operations may be weighted differently from one another depending on what the tester wants to emphasize in testing. For example, in a radiology scenario, the above-exemplified &#x201c;view image&#x201d; transitions and operations can be weighted such that this will occur eighty percent of the time, with the other twenty percent of possible operation divided some other way, possibly equally weighted relative to one another.</p>
<p id="p-0027" num="0026">By way of one XML example of a test configuration, states and the test cases in each state, along with their weights, can be configured as in the following table:</p>
<p id="p-0028" num="0027">
<tables id="TABLE-US-00001" num="00001">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="203pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>&#x3c;?xml version=&#x201c;1.0&#x201d; encoding=&#x201c;utf-8&#x201d; ?&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x3c;Amalga&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x3c;Login server=&#x201c;http://server1:80&#x201d;&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x3c;Account uid=&#x201c;user1&#x201d; pwd=&#x201c;123456&#x201d; /&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x3c;Account uid=&#x201c; user2 pwd=&#x201c;123456&#x201d; /&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x3c;Login&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x3c;Load value=&#x201c;500&#x201d;&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2009;&#x3c;Sleep time=&#x201c;1000&#x201d; /&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x3c;/Load&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x3c;Data&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2002;&#x3c;Date min=&#x201c;2000-01-01&#x201d; max=&#x201c;2006-12-31&#x201d; scope=&#x201c;10&#x201d; /&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x3c;/Data&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x3c;StageConfig&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x3c;Stage name=&#x201c;Start&#x201d; weight=&#x201c;10&#x201d;&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;Case name=&#x201c;logincase&#x201d; weight=&#x201c;100&#x201d; /&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x3c;/Stage&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2009;&#x3c;Stage name=&#x201c;Grid&#x201d; weight=&#x201c;100&#x201d;&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;Case name=&#x201c;statcase&#x201d; weight=&#x201c;5&#x201d; /&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;Case name=&#x201c;viewcase&#x201d; weight=&#x201c;20&#x201d; /&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;Case name=&#x201c;labmodule&#x201d; weight=&#x201c;20&#x201d; /&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2002;&#x3c;/Stage&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2009;&#x3c;Stage name=&#x201c;Module&#x201d; weight=&#x201c;200&#x201d;&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;Case name=&#x201c;labmodule&#x201d; weight=&#x201c;10&#x201d; /&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;Case name=&#x201c;RadModule&#x201d; weight=&#x201c;10&#x201d; /&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;Case name=&#x201c;PMHModule&#x201d; weight=&#x201c;10&#x201d; /&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;Case name=&#x201c;AllergyModule&#x201d; weight=&#x201c;10&#x201d; /&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;Case name=&#x201c;DicationModule&#x201d; weight=&#x201c;10&#x201d; /&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;Case name=&#x201c;PathologyModule&#x201d; weight=&#x201c;10&#x201d; /&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;Case name=&#x201c;DiagnosisModule&#x201d; weight=&#x201c;10&#x201d; /&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;Case name=&#x201c;PMHModule&#x201d; weight=&#x201c;10&#x201d; /&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;Case name=&#x201c;MedicationModule&#x201d; weight=&#x201c;10&#x201d; /&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;Case name=&#x201c;imageviewer&#x201d; weight=&#x201c;10&#x201d; /&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;Case name=&#x201c;EKGViewer&#x201d; weight=&#x201c;10&#x201d; /&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;Case name=&#x201c;ScannedChart&#x201d; weight=&#x201c;20&#x201d; /&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2002;&#x3c;/Stage&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x3c;Stage name=&#x201c;Data&#x201d; weight=&#x201c;200&#x201d;&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;Case name=&#x201c;imagedata&#x201d; weight=&#x201c;20&#x201d;</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;parent=&#x201c;imageviewer&#x201d; /&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x3c;/Stage&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x3c;/StageConfig&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x3c;/Amalga&#x3e;</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0029" num="0028">As can be seen, the different states (stages) can be weighted differently relative to one another. Also, the different operations within each state can have different weights relative to the other operations of that state.</p>
<p id="p-0030" num="0029">Moreover, unlike other test solutions such as VSTS (Visual Studio Team Suite), the test mechanism thus may load test with mixed test cases, with weight given to each operation (test case) as described herein. By organizing test cases into different states/operations, and with state change and operation selection in each state controlled by random numbers and weights, the technology described herein more accurately simulates realistic user load.</p>
<p id="p-0031" num="0030"><figref idref="DRAWINGS">FIG. 3</figref> is a simplified flow diagram showing some example steps that may be taken in load testing according as described above. Note that the steps of <figref idref="DRAWINGS">FIG. 3</figref> are typically run in parallel for multiple simulated users, and that different simulated users may have different tests, different weights and so forth configured for them.</p>
<p id="p-0032" num="0031">Step <b>302</b> represents a random client user logging in, whereby the simulator <b>116</b> creates a state machine for this user based on the test configuration data. Note that before login, some evaluation may be made so that no two users are the same at the same time as a result of the same random number being generated as the basis for the user identifier.</p>
<p id="p-0033" num="0032">Step <b>304</b> selects a random list of patients for the user, which as described above, may be based upon a random date range. Note that the size of the date range (e.g., one day or one week) also generally allows obtaining a relatively large list, a relatively small list, or something in between. Further note that this may be an operation, e.g., a user may go back and select a different date range and thus obtain a different patient list while in the same login session.</p>
<p id="p-0034" num="0033">Step <b>306</b> represents waiting until a change is to be made, to select an operation in a different state or select an operation within the current state. As described above, this time may be random to an extent, in conjunction within an appropriate time range for the given state/operation. For example, it may generally take a few seconds to a minute for an actual user to select a patient from the patient list, and this selection time range may be used (possibly biased to some norm) when selecting a patient. If instead the current operation is reviewing an image, the time may range from a few seconds to five minutes. Note that these are not actual numbers, only examples for this description, and that actual times may be measured and used, and possibly biased instead of evenly distributed to more closely match typical usage patterns.</p>
<p id="p-0035" num="0034">When the time is met, step <b>308</b> records information for the operation in the current user context. Examples of such information include the activity that was performed, the time it took the service to respond, and any other relevant information, e.g., time of day, connection latency, exceptions or other error messages, and so on. Note that some of this data may be logged, or combined with any existing data, (e.g., keep the average response time for a given operation, not each response time).</p>
<p id="p-0036" num="0035">Step <b>310</b> represents computing the next operation selection and/or state change/by obtaining and computing a weight-adjusted random number. Step <b>312</b> represents selecting and performing the next operation as if an actual user did so via a user interface.</p>
<p id="p-0037" num="0036">At some time, the test will complete for the simulated user as represented by step <b>314</b>, and eventually for all simulated users. For example, each user may run through a random number of patients, possibly logging in and out more than once, and when all N users are done, the test is considered complete; (note that during a longer test, a simulated user may log out and then log back in with the same or a different user account, which is a common scenario). Alternatively, the test may be timed, or manually ended.</p>
<p id="p-0038" num="0037">Step <b>316</b> represents generating a results log <b>122</b> based on the user contexts, such as to describe the maximum number of simultaneous users, the average response time for each activity, and so forth. This may be combined with other information, such as obtained from the service <b>102</b>, e.g., how much the server's memory was loaded during the testing.</p>
<p id="p-0039" num="0038">Thus, in one implementation, each state machine (representing a simulated client user) is configurable with respect to the states, the operations for each state, the weights of states, and the weights of operations in each state. Each state machine has its context that each operation can read/write. In this manner, state machines are able to run randomly, and may thereby be used to realistically simulate the activities of multiple concurrent users.</p>
<p id="h-0005" num="0000">Exemplary Operating Environment</p>
<p id="p-0040" num="0039"><figref idref="DRAWINGS">FIG. 4</figref> illustrates an example of a suitable computing and networking environment <b>400</b> on which the examples of <figref idref="DRAWINGS">FIGS. 1-3</figref> may be implemented. The computing system environment <b>400</b> is only one example of a suitable computing environment and is not intended to suggest any limitation as to the scope of use or functionality of the invention. Neither should the computing environment <b>400</b> be interpreted as having any dependency or requirement relating to any one or combination of components illustrated in the exemplary operating environment <b>400</b>.</p>
<p id="p-0041" num="0040">The invention is operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems, environments, and/or configurations that may be suitable for use with the invention include, but are not limited to: personal computers, server computers, hand-held or laptop devices, tablet devices, multiprocessor systems, microprocessor-based systems, set top boxes, programmable consumer electronics, network PCs, minicomputers, mainframe computers, distributed computing environments that include any of the above systems or devices, and the like.</p>
<p id="p-0042" num="0041">The invention may be described in the general context of computer-executable instructions, such as program modules, being executed by a computer. Generally, program modules include routines, programs, objects, components, data structures, and so forth, which perform particular tasks or implement particular abstract data types. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in local and/or remote computer storage media including memory storage devices.</p>
<p id="p-0043" num="0042">With reference to <figref idref="DRAWINGS">FIG. 4</figref>, an exemplary system for implementing various aspects of the invention may include a general purpose computing device in the form of a computer <b>410</b>. Components of the computer <b>410</b> may include, but are not limited to, a processing unit <b>420</b>, a system memory <b>430</b>, and a system bus <b>421</b> that couples various system components including the system memory to the processing unit <b>420</b>. The system bus <b>421</b> may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. By way of example, and not limitation, such architectures include Industry Standard Architecture (ISA) bus, Micro Channel Architecture (MCA) bus, Enhanced ISA (EISA) bus, Video Electronics Standards Association (VESA) local bus, and Peripheral Component Interconnect (PCI) bus also known as Mezzanine bus.</p>
<p id="p-0044" num="0043">The computer <b>410</b> typically includes a variety of computer-readable media. Computer-readable media can be any available media that can be accessed by the computer <b>410</b> and includes both volatile and nonvolatile media, and removable and non-removable media. By way of example, and not limitation, computer-readable media may comprise computer storage media and communication media. Computer storage media includes volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer-readable instructions, data structures, program modules or other data. Computer storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other optical disk storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can accessed by the computer <b>410</b>. Communication media typically embodies computer-readable instructions, data structures, program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term &#x201c;modulated data signal&#x201d; means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media includes wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared and other wireless media. Combinations of the any of the above may also be included within the scope of computer-readable media.</p>
<p id="p-0045" num="0044">The system memory <b>430</b> includes computer storage media in the form of volatile and/or nonvolatile memory such as read only memory (ROM) <b>431</b> and random access memory (RAM) <b>432</b>. A basic input/output system <b>433</b> (BIOS), containing the basic routines that help to transfer information between elements within computer <b>410</b>, such as during start-up, is typically stored in ROM <b>431</b>. RAM <b>432</b> typically contains data and/or program modules that are immediately accessible to and/or presently being operated on by processing unit <b>420</b>. By way of example, and not limitation, <figref idref="DRAWINGS">FIG. 4</figref> illustrates operating system <b>434</b>, application programs <b>435</b>, other program modules <b>436</b> and program data <b>437</b>.</p>
<p id="p-0046" num="0045">The computer <b>410</b> may also include other removable/non-removable, volatile/nonvolatile computer storage media. By way of example only, <figref idref="DRAWINGS">FIG. 4</figref> illustrates a hard disk drive <b>441</b> that reads from or writes to non-removable, nonvolatile magnetic media, a magnetic disk drive <b>451</b> that reads from or writes to a removable, nonvolatile magnetic disk <b>452</b>, and an optical disk drive <b>455</b> that reads from or writes to a removable, nonvolatile optical disk <b>456</b> such as a CD ROM or other optical media. Other removable/non-removable, volatile/nonvolatile computer storage media that can be used in the exemplary operating environment include, but are not limited to, magnetic tape cassettes, flash memory cards, digital versatile disks, digital video tape, solid state RAM, solid state ROM, and the like. The hard disk drive <b>441</b> is typically connected to the system bus <b>421</b> through a non-removable memory interface such as interface <b>440</b>, and magnetic disk drive <b>451</b> and optical disk drive <b>455</b> are typically connected to the system bus <b>421</b> by a removable memory interface, such as interface <b>450</b>.</p>
<p id="p-0047" num="0046">The drives and their associated computer storage media, described above and illustrated in <figref idref="DRAWINGS">FIG. 4</figref>, provide storage of computer-readable instructions, data structures, program modules and other data for the computer <b>410</b>. In <figref idref="DRAWINGS">FIG. 4</figref>, for example, hard disk drive <b>441</b> is illustrated as storing operating system <b>444</b>, application programs <b>445</b>, other program modules <b>446</b> and program data <b>447</b>. Note that these components can either be the same as or different from operating system <b>434</b>, application programs <b>435</b>, other program modules <b>436</b>, and program data <b>437</b>. Operating system <b>444</b>, application programs <b>445</b>, other program modules <b>446</b>, and program data <b>447</b> are given different numbers herein to illustrate that, at a minimum, they are different copies. A user may enter commands and information into the computer <b>410</b> through input devices such as a tablet, or electronic digitizer, <b>464</b>, a microphone <b>463</b>, a keyboard <b>462</b> and pointing device <b>461</b>, commonly referred to as mouse, trackball or touch pad. Other input devices not shown in <figref idref="DRAWINGS">FIG. 4</figref> may include a joystick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit <b>420</b> through a user input interface <b>460</b> that is coupled to the system bus, but may be connected by other interface and bus structures, such as a parallel port, game port or a universal serial bus (USB). A monitor <b>491</b> or other type of display device is also connected to the system bus <b>421</b> via an interface, such as a video interface <b>490</b>. The monitor <b>491</b> may also be integrated with a touch-screen panel or the like. Note that the monitor and/or touch screen panel can be physically coupled to a housing in which the computing device <b>410</b> is incorporated, such as in a tablet-type personal computer. In addition, computers such as the computing device <b>410</b> may also include other peripheral output devices such as speakers <b>495</b> and printer <b>496</b>, which may be connected through an output peripheral interface <b>494</b> or the like.</p>
<p id="p-0048" num="0047">The computer <b>410</b> may operate in a networked environment using logical connections to one or more remote computers, such as a remote computer <b>480</b>. The remote computer <b>480</b> may be a personal computer, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to the computer <b>410</b>, although only a memory storage device <b>481</b> has been illustrated in <figref idref="DRAWINGS">FIG. 4</figref>. The logical connections depicted in <figref idref="DRAWINGS">FIG. 4</figref> include one or more local area networks (LAN) <b>471</b> and one or more wide area networks (WAN) <b>473</b>, but may also include other networks. Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets and the Internet.</p>
<p id="p-0049" num="0048">When used in a LAN networking environment, the computer <b>410</b> is connected to the LAN <b>471</b> through a network interface or adapter <b>470</b>. When used in a WAN networking environment, the computer <b>410</b> typically includes a modem <b>472</b> or other means for establishing communications over the WAN <b>473</b>, such as the Internet. The modem <b>472</b>, which may be internal or external, may be connected to the system bus <b>421</b> via the user input interface <b>460</b> or other appropriate mechanism. A wireless networking component <b>474</b> such as comprising an interface and antenna may be coupled through a suitable device such as an access point or peer computer to a WAN or LAN. In a networked environment, program modules depicted relative to the computer <b>410</b>, or portions thereof, may be stored in the remote memory storage device. By way of example, and not limitation, <figref idref="DRAWINGS">FIG. 4</figref> illustrates remote application programs <b>485</b> as residing on memory device <b>481</b>. It may be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.</p>
<p id="p-0050" num="0049">An auxiliary subsystem <b>499</b> (e.g., for auxiliary display of content) may be connected via the user interface <b>460</b> to allow data such as program content, system status and event notifications to be provided to the user, even if the main portions of the computer system are in a low power state. The auxiliary subsystem <b>499</b> may be connected to the modem <b>472</b> and/or network interface <b>470</b> to allow communication between these systems while the main processing unit <b>420</b> is in a low power state.</p>
<p id="h-0006" num="0000">Conclusion</p>
<p id="p-0051" num="0050">While the invention is susceptible to various modifications and alternative constructions, certain illustrated embodiments thereof are shown in the drawings and have been described above in detail. It should be understood, however, that there is no intention to limit the invention to the specific forms disclosed, but on the contrary, the intention is to cover all modifications, alternative constructions, and equivalents falling within the spirit and scope of the invention.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. In a computing environment, a system for testing a service comprising:
<claim-text>one or more processors;</claim-text>
<claim-text>a simulator, implemented on the one or more processors, configured to perform operations of multiple simulated users against the service, including by representing each simulated user as a state machine with context, the simulator configured to randomly select operations within a same state and operations within different states for each simulated user, and to log data indicative of the performance of the service with respect to handling at least some of the operations, wherein at least to two different operations within a state have different weights that bias how often each operation is randomly selected.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the simulator mixes different test sets by logging in different simulated users during the testing.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the simulator is further to control a time duration that an operation is performed before selection of another operation.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the service provides access to medical data of patients.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The system of <claim-ref idref="CLM-00004">claim 4</claim-ref> wherein the simulator is further configured to select a subset of the patients for each simulated client.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein each state machine is configurable with respect to the states, the operation for each state, relative weights of the states, and relative weights of operations in each state.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. One or more computer-readable storage media that is not a signal having computer-executable instructions, which in response to execution by a computer, cause the computer to perform steps, comprising:
<claim-text>(a) creating state machines to represent simulated users that are to perform operations against a service, in which each operation in a state machine is associated with one state of a plurality of states;</claim-text>
<claim-text>(b) for each simulated user, selecting an operation to perform based upon a random number and a weight, in which each state has a weight relative to weights of each other state, and each operation has a weight relative to weights at each other operation also associated with that operation's associated state;</claim-text>
<claim-text>(c) performing the selected operation against the service; and</claim-text>
<claim-text>(d) repeating steps (b) and (c) as part of a load test of the service.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The one or more computer-readable storage media that is not a signal having computer-executable instructions of <claim-ref idref="CLM-00007">claim 7</claim-ref> having further computer-executable instructions, comprising, randomly selecting and logging each simulated user into the service, and obtaining a subset of identifiers associated with the service based upon a random date or date range.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The one or more computer-readable storage media that is not a signal having computer-executable instructions of <claim-ref idref="CLM-00007">claim 7</claim-ref> having further computer-executable instructions comprising controlling a time duration between the current operation and the next operation.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The one or more computer-readable storage media that is not a signal having computer-executable instructions of <claim-ref idref="CLM-00007">claim 7</claim-ref> having further computer-executable instructions, comprising, recording performance data of the service that corresponds to the service's response time to handle at least some of the operations. </claim-text>
</claim>
</claims>
</us-patent-grant>

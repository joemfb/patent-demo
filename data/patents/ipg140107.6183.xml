<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08627307-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08627307</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>13087834</doc-number>
<date>20110415</date>
</document-id>
</application-reference>
<us-application-series-code>13</us-application-series-code>
<priority-claims>
<priority-claim sequence="01" kind="regional">
<country>EP</country>
<doc-number>10425122</doc-number>
<date>20100416</date>
</priority-claim>
</priority-claims>
<us-term-of-grant>
<us-term-extension>229</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>9</main-group>
<subgroup>44</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>717168</main-classification>
<further-classification>717174</further-classification>
</classification-national>
<invention-title id="d2e71">Extending the functionality of an embedded system</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>5901225</doc-number>
<kind>A</kind>
<name>Ireton et al.</name>
<date>19990500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714  632</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>6078967</doc-number>
<kind>A</kind>
<name>Fulghum</name>
<date>20000600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>710  2</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>6615404</doc-number>
<kind>B1</kind>
<name>Garfunkel et al.</name>
<date>20030900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717173</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>6920553</doc-number>
<kind>B1</kind>
<name>Poisner</name>
<date>20050700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>7185191</doc-number>
<kind>B2</kind>
<name>Bosley et al.</name>
<date>20070200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>713  2</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>7486907</doc-number>
<kind>B2</kind>
<name>Noguchi et al.</name>
<date>20090200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>399110</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>7577981</doc-number>
<kind>B2</kind>
<name>Clynes et al.</name>
<date>20090800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>725132</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>7734247</doc-number>
<kind>B2</kind>
<name>Gustavsson et al.</name>
<date>20100600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>455  304</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>7853720</doc-number>
<kind>B2</kind>
<name>Choi et al.</name>
<date>20101200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709245</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>8392895</doc-number>
<kind>B2</kind>
<name>Tsai et al.</name>
<date>20130300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717140</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>2004/0025165</doc-number>
<kind>A1</kind>
<name>Desoli et al.</name>
<date>20040200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>719310</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>2004/0103163</doc-number>
<kind>A1</kind>
<name>Lin et al.</name>
<date>20040500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709211</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00013">
<document-id>
<country>US</country>
<doc-number>2005/0240919</doc-number>
<kind>A1</kind>
<name>Kim et al.</name>
<date>20051000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00014">
<document-id>
<country>US</country>
<doc-number>2008/0182618</doc-number>
<kind>A1</kind>
<name>Gustavsson et al.</name>
<date>20080700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>455557</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00015">
<document-id>
<country>US</country>
<doc-number>2008/0209193</doc-number>
<kind>A1</kind>
<name>Zhang et al.</name>
<date>20080800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>713  1</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00016">
<document-id>
<country>US</country>
<doc-number>2011/0087825</doc-number>
<kind>A1</kind>
<name>Cialini et al.</name>
<date>20110400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>711103</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00017">
<document-id>
<country>US</country>
<doc-number>2011/0112968</doc-number>
<kind>A1</kind>
<name>Florek et al.</name>
<date>20110500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>705 50</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00018">
<document-id>
<country>EP</country>
<doc-number>1 221 652</doc-number>
<date>20020700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00019">
<document-id>
<country>WO</country>
<doc-number>2008/026139</doc-number>
<date>20080300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00020">
<othercit>Overhage et al., &#x201c;Software Architectures, Components, and Applications&#x201d;, 2007.</othercit>
</nplcit>
<category>cited by examiner</category>
</us-citation>
<us-citation>
<nplcit num="00021">
<othercit>European Search Report for Application No. 10425122.8, Oct. 4, 2010.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00022">
<othercit>&#x201c;U3 Platform 1.0 SDK, Application Deployment Guide, Version 1.0/Revision 4.0)&#x201d;, Internet Citation, Sep. 2005, XP007903637, Retrieved from the Internet: URL: http://onlineconferencingsystems.com/access<sub>&#x2014;</sub>tomorrow/ApplicationDeploymentGuide<sub>&#x2014;</sub>1.0r4.pdf.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>18</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>717168</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>717174</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>5</number-of-drawing-sheets>
<number-of-figures>5</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20110258618</doc-number>
<kind>A1</kind>
<date>20111020</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Capuozzo</last-name>
<first-name>Giuseppe</first-name>
<address>
<city>Rome</city>
<country>IT</country>
</address>
</addressbook>
<residence>
<country>IT</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Borghini</last-name>
<first-name>Marco</first-name>
<address>
<city>Civitavecchia</city>
<country>IT</country>
</address>
</addressbook>
<residence>
<country>IT</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Capuozzo</last-name>
<first-name>Giuseppe</first-name>
<address>
<city>Rome</city>
<country>IT</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Borghini</last-name>
<first-name>Marco</first-name>
<address>
<city>Civitavecchia</city>
<country>IT</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Mannava &#x26; Kang, P.C.</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>Accenture Global Services Limited</orgname>
<role>03</role>
<address>
<city>Dublin</city>
<country>IE</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Nguyen</last-name>
<first-name>Phillip H</first-name>
<department>2191</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">The present description refers in particular to a computer-implemented method, an embedded system, and a memory. The method relates to extending the functionality of an embedded system, wherein the embedded system includes a firmware in a fixed non-volatile memory. The method comprises attaching an attachable non-volatile memory to the embedded system, wherein an extension is stored in the attachable non-volatile memory; recognizing the extension by the firmware; and executing a service on the embedded system by means of the extension.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="120.90mm" wi="157.06mm" file="US08627307-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="185.84mm" wi="152.48mm" orientation="landscape" file="US08627307-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="164.08mm" wi="137.75mm" orientation="landscape" file="US08627307-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="247.48mm" wi="157.14mm" orientation="landscape" file="US08627307-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="251.88mm" wi="171.11mm" orientation="landscape" file="US08627307-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="246.04mm" wi="162.14mm" orientation="landscape" file="US08627307-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">PRIORITY </heading>
<p id="p-0002" num="0001">This application claims priority to European patent application serial number 10 425 122.8, filed on Apr. 16, 2010, and entitled &#x201c;Extending the Functionality of an Embedded System&#x201d;, which is incorporated by reference in its entirety.</p>
<p id="p-0003" num="0002">The present application relates to a computer-implemented method for extending the functionality of an embedded system, an embedded system with extended functionality, and a memory.</p>
<heading id="h-0002" level="1">SUMMARY</heading>
<p id="p-0004" num="0003">According to an aspect, a computer-implemented method for extending the functionality of an embedded system is provided. The embedded system may include a firmware in a fixed non-volatile memory. The method may comprise attaching an attachable non-volatile memory to the embedded system. An extension may be stored in the attachable non-volatile memory. The method may also comprise recognizing the extension by the firmware, and executing a service on the embedded system by means of the extension.</p>
<p id="p-0005" num="0004">In some cases, the attachable non-volatile memory has greater storage capacity than the fixed non-volatile memory.</p>
<p id="p-0006" num="0005">Furthermore, the fixed non-volatile memory may be built into a chip and the chip may be wired to the embedded system.</p>
<p id="p-0007" num="0006">Also, the firmware may be stored in the fixed non-volatile memory as a binary image.</p>
<p id="p-0008" num="0007">Moreover, the attachable non-volatile memory may be a USB storage.</p>
<p id="p-0009" num="0008">In some cases, the method further comprises loading the extension using a security mechanism; and isolating, by means of the security mechanism, the extension from the firmware. The steps of loading and isolating may be performed before executing the service by means of the extension.</p>
<p id="p-0010" num="0009">The method may also comprise copying the firmware to a volatile memory of the embedded system by copying the entire contents of the fixed non-volatile memory into the volatile memory of the embedded system.</p>
<p id="p-0011" num="0010">Also, the volatile memory may be faster than the fixed non-volatile memory, and/or the volatile memory may be faster than the attachable non-volatile memory.</p>
<p id="p-0012" num="0011">Moreover, the extension may comprise one or more of the following:</p>
<p id="p-0013" num="0012">libraries and/or utilities usable by the firmware;</p>
<p id="p-0014" num="0013">at least one dynamically loadable module that can be linked to the firmware; and</p>
<p id="p-0015" num="0014">a framework enabling execution of the service independent of an architecture of the embedded system.</p>
<p id="p-0016" num="0015">The method may also comprise attaching a port expander to an interface of the embedded system. Attaching the attachable non-volatile memory to the embedded system may comprise attaching the attachable non-volatile memory to a first port of the port expander, and expanding the embedded system by attaching a device to a second port of the port expander.</p>
<p id="p-0017" num="0016">In some cases, the embedded system is a network access gateway. Also, the firmware may include an operating system and at least one service.</p>
<p id="p-0018" num="0017">According to another aspect, an embedded system is provided. The system may comprise a volatile memory, and a fixed non-volatile memory including a firmware. The system may also comprise an interface operable to allow an attachable non-volatile memory to be attached to the embedded system. The attachable non-volatile memory may be operable to store an extension. Also, the firmware may be operable to recognize the extension. Moreover, the embedded system may be adaptable to execute a service by means of the extension. The embedded system may be provided as a device, e.g. an embedded device, or as a computer program product.</p>
<p id="p-0019" num="0018">According to yet another aspect, an attachable non-volatile memory, attachable to an interface of an embedded system is provided. The memory may comprise an extension including a service, wherein the extension is stored in the attachable non-volatile memory. The extension may be operable to extend a firmware of the embedded system after being recognized by the embedded system. The service may be operable to be executed by the embedded system after the firmware of the embedded system has been extended.</p>
<p id="p-0020" num="0019">In some embodiments, the attachable non-volatile memory may be attachable to the interface of the embedded system, where the embedded system comprises a volatile memory, and a fixed non-volatile memory including a firmware. The system may also comprise an interface operable to allow the attachable non-volatile memory to be attached to the embedded system. Also, the firmware may be operable to recognize the extension. Moreover, the embedded system may be adaptable to execute a service by means of the extension. The attachable non-volatile memory may also be provided as a device or as a computer program product.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE FIGURES</heading>
<p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. 1</figref> depicts a block diagram of an embedded system.</p>
<p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. 2</figref> shows a method for extending the functionality of the embedded system.</p>
<p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. 3</figref> depicts a functional block diagram of a flash memory, a chipset, and a RAM of the embedded system.</p>
<p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. 4</figref> depicts a functional block diagram of the flash memory, the chipset, the RAM, and a USB storage after an extension stored in the USB storage has been recognized by a firmware of the embedded system.</p>
<p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. 5</figref> depicts a functional block diagram of the flash memory, the chipset, the RAM, and the USB storage, where the extension includes two applications.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0004" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0026" num="0025">In the following text, a detailed description of examples will be given with reference to the drawings. It should be understood that various modifications to the examples may be made. In particular, elements of one example may be combined and used in other examples to form new examples.</p>
<p id="p-0027" num="0026">The subject matter described in this specification can be implemented as a method or on a device, possibly in the form of one or more computer program products. The subject matter described in the specification can be implemented in a data signal or on a machine readable medium, where the medium is embodied in one or more information carriers, such as a semiconductor memory, or a hard disk. Such computer program products may cause a data processing apparatus to perform one or more operations described in the specification.</p>
<p id="p-0028" num="0027">In addition, subject matter described in the specification can also be implemented as a system including a processor, and a memory coupled to the processor. The memory may encode one or more programs to cause the processor to perform one or more of the methods described in the specification. Further subject matter described in the specification can be implemented using various machines.</p>
<p id="p-0029" num="0028">Details of one or more implementations are set forth in the exemplary drawings and description below. Other features will be apparent from the description, the drawings, and from the claims.</p>
<p id="p-0030" num="0029"><figref idref="DRAWINGS">FIG. 1</figref> shows components of an embedded system <b>100</b> and an attachable non-volatile memory, for example a USB storage <b>111</b>. The embedded system <b>100</b> may be understood as a computer system or a device designed to perform one or a few dedicated functions. The embedded system <b>100</b> may be contrasted with a general purpose computer system, e.g. a desktop PC. More specifically, the embedded system <b>100</b> may be a network access gateway or residential gateway that provides an Internet connection to a user network (e.g. a home network comprising one or more computers). The embedded system <b>100</b> may also be configured to provide access to networks other than the Internet. In a specific example, the embedded system <b>100</b> may be an asynchronous digital subscriber line (ADSL) modem. Modems supporting other forms of DSL are also possible. In some cases, the embedded system <b>100</b> can perform routing functionality. The embedded system <b>100</b> may include a user interface, e.g. a graphical user interface for managing the embedded system <b>100</b>. Moreover, the embedded system <b>100</b> may run services, e.g. an application designed to help a user perform a task or a module enabling another device to be connected to the embedded system <b>100</b>. Services that can be run on the embedded system <b>100</b> may or may not be related to providing access to a network connected to the embedded system <b>100</b>. The graphical user interface may also be used to manage or control applications on the embedded system <b>100</b>.</p>
<p id="p-0031" num="0030">The embedded system <b>100</b> may include a chipset <b>102</b> with a central processing unit (CPU). In a specific example, the chipset <b>102</b> may be a Texas Instruments AR7 combining a MIPS 32 bit CPU, a Digital Signal Processing (DSP)-30 based digital transceiver, and an ADSL analog front end. Other possible chipsets include the Broadcom 6358. The chipset <b>102</b> may be a microprocessor or a microcontroller. Further CPUs such as the Advanced RISC Architecture Machine (ARM) or PowerPC are also possible (RISC refers to Reduced Instruction Set Computer).</p>
<p id="p-0032" num="0031">Some implementations of the embedded system <b>100</b> include a non-volatile memory, such as a flash memory <b>104</b>. Alternatively, the embedded system <b>100</b> may include another form of non-volatile memory. The non-volatile memory of the embedded system <b>100</b> may be electronically addressable. In some cases, the non-volatile memory of the embedded system <b>100</b> may be another form of solid-state memory, such as a Silicon-Oxide-Nitride-Oxide-Silicon (SONOS) memory, or a non-volatile Random Access Memory. Other types of non-volatile memory are also possible.</p>
<p id="p-0033" num="0032">The flash memory <b>104</b> may be fixed to the embedded system <b>100</b>. In particular, the flash memory <b>104</b> may be built into a chip and the chip may be wired to the embedded system <b>100</b>. The contents of the flash memory <b>104</b> may be referred to as a firmware <b>302</b> (see <figref idref="DRAWINGS">FIG. 3</figref>).</p>
<p id="p-0034" num="0033">In some cases, the firmware <b>302</b> stored by the flash memory <b>104</b> may include an operating system <b>303</b> (see <figref idref="DRAWINGS">FIG. 3</figref>) for the embedded system <b>100</b>. The firmware <b>302</b> stored by the flash memory <b>104</b> may also include services that can be run on the embedded system <b>100</b>, and the graphical user interface for managing the embedded system <b>100</b>. Specifically, the operating system <b>303</b> may be Linux, e.g. Linux kernel 2.6 including uClibc libraries. More specifically, the operating system <b>303</b> could be implemented using Debian Etch for MIPS with Linux kernel 2.6.1. The operating system <b>303</b> may have been stripped of unnecessary components and may include only what is necessary to manage the embedded system <b>100</b>. The applications may be suitable for performing networking tasks such as routing, firewall maintenance, domain name service (DNS), and dynamic host configuration protocol (DHCP).</p>
<p id="p-0035" num="0034">In some embodiments, the operating system <b>303</b> allows a supporting service (e.g. drivers) for a further device to be added. For example, the operating system <b>303</b> may support linking further functionality to the operating system kernel on demand. In other words, it may be possible to link a dynamically loadable module to the operating system <b>303</b>. Accordingly, linking the dynamically loadable module to the firmware <b>302</b> may be understood as linking the dynamically loadable module to the kernel of the operating system of the embedded system <b>100</b>. Different kernel modules may be used to support different embedded system architectures and operating system kernels.</p>
<p id="p-0036" num="0035">In addition to applications, services that may be executed on the embedded system <b>100</b> can include kernel modules, device drivers or other software that extends the functionality of the embedded system <b>100</b>.</p>
<p id="p-0037" num="0036">The embedded system <b>100</b> may include minimal hardware, e.g. hardware required to execute basic networking tasks and no other hardware, in order to lower costs. Moreover, the contents of the flash memory <b>104</b> (e.g. operating system and applications) may be stored on the embedded system <b>100</b> in a monolithic approach, i.e. as a single closed block.</p>
<p id="p-0038" num="0037">For example, the contents of the flash memory <b>104</b> may be stored as a single closed block, e.g. as a binary image or as a compressed binary image. In other words, the flash memory <b>104</b> may contain a binary firmware image or a compressed binary firmware image. This may reduce the amount of flash memory <b>104</b> required on the embedded system <b>100</b>, and thus reduce the cost of producing the embedded system <b>100</b>. In addition, the use of the binary image on the embedded system <b>100</b> may be advantageous for a manufacturer or maintainer of the embedded system <b>100</b>, e.g. the manufacturer of the embedded system <b>100</b> may be able to maintain control of the embedded system <b>100</b>, such that an extension of the embedded system <b>100</b> can only be realized by the manufacturer and a purchaser of the embedded system (e.g. a telecommunications service provider) is forced to ask the manufacturer for support for any new/added features. Moreover, use of the binary image may make it simpler for a user to update the embedded system <b>100</b>.</p>
<p id="p-0039" num="0038">The binary image may be understood to contain the complete contents and structure representing a storage medium, e.g. the flash memory <b>104</b>. A binary image may be stored in a single file.</p>
<p id="p-0040" num="0039">However, storing the contents of the flash memory <b>104</b> as a binary image may have the effect that the only way to upgrade applications stored on the embedded system <b>100</b> is to perform a full firmware upgrade, as carried out in prior art methods. In other words, there has been no way to independently upgrade a single application. Instead, the full firmware upgrade has been required even for small changes to one application on the embedded system <b>100</b>.</p>
<p id="p-0041" num="0040">It may be difficult or undesirable to perform the full firmware upgrade for an arbitrary update of software on the embedded system <b>100</b>. The full firmware upgrade may result in the use of more bandwidth, possible errors may have more sever consequences, and the full firmware upgrade may disrupt operations of the embedded system <b>100</b>. For example, downloading the full firmware in order to make a small change to a single application may require more bandwidth than downloading the part of the application that is changed or the application itself. Furthermore, it is possible that the full firmware upgrade can fail, causing the embedded system <b>100</b> to become unusable. Also, the full firmware upgrade often causes an interruption of operation of the embedded system <b>100</b>, since reboot of the embedded system <b>100</b> is normally required. To overcome this problem, the present invention adapts the embedded system <b>100</b> to execute a service without upgrading the entire firmware or replacing the embedded system <b>100</b> with a more capable device.</p>
<p id="p-0042" num="0041">The embedded system <b>100</b> may further include a volatile memory, such as random access memory (RAM) <b>106</b>.</p>
<p id="p-0043" num="0042">In some configurations, the RAM <b>106</b> may have a greater storage capacity than the flash memory <b>104</b>. A reason for this design may be that program execution on the embedded system <b>100</b> can be understood as a process where data changes frequently and often does not need to be stored. For example when the embedded system <b>100</b> processes Internet Protocol (IP) packets, they may be temporarily stored in the RAM <b>106</b> in order to be analyzed and elaborated, but it is possible that the IP packets do not need to be stored when the embedded system <b>100</b> is powered down. In other words, it is possible that the IP packets do not need to be stored in the flash memory <b>104</b>.</p>
<p id="p-0044" num="0043">It is also possible that the RAM <b>106</b> has a lower storage capacity than the flash memory <b>104</b>. In particular, the capacity of the flash memory <b>104</b> may be proportional to the number and the size of programs stored on the embedded system <b>100</b>. Moreover, the capacity of the RAM <b>106</b> may be proportional to the number and the size of programs to be executed concurrently on the embedded system <b>100</b>. For example, if a number of different applications are stored in the flash memory <b>104</b> and it is not necessary for the embedded system <b>100</b> to be able to run many programs concurrently, the flash memory <b>104</b> may have a greater storage capacity than the RAM <b>106</b>.</p>
<p id="p-0045" num="0044">Also, it may be that computer programs can be executed faster using the RAM <b>106</b> of the embedded system <b>100</b> in comparison to the flash memory <b>104</b> of the embedded system <b>100</b>. Moreover, the embedded system <b>100</b> may be designed so that a program must be copied to the RAM <b>106</b> before the program can be executed.</p>
<p id="p-0046" num="0045">In a specific example, the flash memory <b>104</b> has a storage capacity of 16 MB, and the RAM <b>106</b> has a storage capacity of 32 MB.</p>
<p id="p-0047" num="0046">In some cases, the embedded system <b>100</b> does not include mechanically addressed non-volatile memory, such as a hard disk.</p>
<p id="p-0048" num="0047">Furthermore, the embedded system <b>100</b> may include a means of access connectable to an external network, such as a telephone port <b>108</b>. The means of access could also be a fiber port or an Ethernet port depending on a type of the external network. The external network may be the Internet or another network.</p>
<p id="p-0049" num="0048">Also, the embedded system <b>100</b> may include an interface, such as a universal serial bus (USB) port <b>110</b>. The interface may be a peripheral interface. The interface may also be another type of serial interface, such as FireWire, or a type of parallel interface operable to allow an attachable non-volatile memory to be connected to the embedded system <b>100</b>. In cases where the interface is the USB port <b>110</b>, the attachable non-volatile memory may be implemented as USB storage <b>111</b>. In a specific example, the USB storage <b>111</b> may be a USB flash drive (as depicted in <figref idref="DRAWINGS">FIG. 1</figref>) or an external hard drive connectable via a USB cable (not depicted). Accordingly, attaching the attachable non-volatile memory to the embedded system <b>100</b> may be implemented by attaching the USB storage <b>111</b> to the USB port <b>110</b>. In this context, attaching may be understood as connecting or plugging in, i.e. plugging the USB storage <b>111</b> into the USB port <b>110</b>.</p>
<p id="p-0050" num="0049">In some embodiments, the USB storage <b>111</b> has a storage capacity of at least 128 Megabytes (MB). Thus, the storage capacity of the attachable non-volatile memory (e.g. the USB storage <b>111</b>) may be greater than the storage capacity of the fixed non-volatile memory (e.g. the flash memory <b>104</b>). Furthermore, the RAM <b>106</b> may be faster than the flash memory <b>104</b> and/or the USB storage <b>111</b>.</p>
<p id="p-0051" num="0050">The embedded system <b>100</b> may also include a means of access connectable to a local network, such as an Ethernet port <b>112</b>. The embedded system <b>100</b> may also support wireless access, e.g. by means of wireless fidelity (WiFi). The local network may be a home network or an internal network or another network.</p>
<p id="p-0052" num="0051">In addition, the embedded system <b>100</b> may include a reset button <b>114</b> that can be used to return the embedded system <b>100</b> to a standard or default configuration. The embedded system <b>100</b> may further include a power connector <b>116</b> that can be used to connect the embedded system <b>100</b> to a power source.</p>
<p id="p-0053" num="0052"><figref idref="DRAWINGS">FIG. 2</figref> shows an exemplary method <b>200</b> for extending the functionality of the embedded system <b>100</b>. The embedded system may include a fixed non-volatile memory, e.g. the flash memory <b>104</b>. The flash memory <b>104</b> may comprise the firmware <b>302</b>. The firmware <b>302</b> may include the operating system <b>303</b> for the embedded system <b>100</b> and one or more services.</p>
<p id="p-0054" num="0053">The method <b>200</b> may comprise, at step <b>202</b>, attaching an attachable non-volatile memory, e.g. the USB storage <b>111</b>, to the embedded system <b>100</b>. An extension may be stored in the USB storage <b>111</b>.</p>
<p id="p-0055" num="0054">The extension may include a full operating system environment corresponding to the operating system <b>303</b> of the embedded system <b>100</b>. In particular, the operating system <b>303</b> of the embedded system <b>100</b> may include software that is not commonly found on a desktop PC needed to run certain applications. Accordingly, the extension may include libraries usable by the firmware <b>302</b>, e.g. usable by the operating system <b>303</b>. The extension may also include operating system utilities and modules.</p>
<p id="p-0056" num="0055">For example, if the firmware <b>302</b> includes a version of the Linux operating system, the libraries of the extension may include user space libraries, such as GNU C library (glibc) <b>306</b> (see <figref idref="DRAWINGS">FIG. 3</figref>), and libraries required to run a Java virtual machine (Java is a trademark of Oracle Corporation). In this context, a library may include one or more subroutines, classes or data usable by a program. The library may be independently executable.</p>
<p id="p-0057" num="0056">The modules of the extension may include drivers for controlling and managing devices operating according to the X10 standard for electronic devices. The modules may also include a Session Initiation Protocol (SIP) back to back user agent and a Real-Time Transfer Protocol (RTP) proxy to manage Voice over IP services. In addition, the utilities may include a Universal Plug-and-Play (UPnP) audiovisual media server, which can be used to share media content. The modules may also include software to enable control of lights and appliances using a mobile communication device, e.g. an iPhone. The modules may be referred to as kernel modules and may be dynamically loadable.</p>
<p id="p-0058" num="0057">Exemplary applications of the extension that may be run on the embedded system <b>100</b> include an image searching application. Accordingly, a user may upload a plurality of images to the embedded system <b>100</b>. For example, the user may come back from a holiday with a number of images stored in a digital camera. The user may connect a digital camera to the embedded system <b>100</b> and all the images may be automatically uploaded from the digital camera to the embedded system <b>100</b>. The images may be stored on USB storage <b>111</b>. The user may then interact with the image searching application in order to search for images.</p>
<p id="p-0059" num="0058">Moreover, the extension may include a framework that enables execution of an application, such as the image searching application, independent of an architecture of the embedded system <b>100</b>. In some implementations, the framework may be based on OSGi and the Java programming language, and may provide an application execution environment that is tailored to the architecture of the embedded system <b>100</b>. More specifically, the framework may be defined according to the OSGi Specifications, Release 4, version 4.2, available from http://www.osgi.org. Accordingly, the framework may enable dynamic management of applications and dependencies. The framework may also provide a set of Application Programming Interfaces (APIs) that support devices with different capabilities and resources and enable applications to interact with those devices without needing the application developer to be aware of the details of the architecture of each device. Furthermore, the framework may provide a dynamic loader to install new applications. The framework may also be referred to as a middleware.</p>
<p id="p-0060" num="0059">The flash memory <b>104</b> may be fixed by being wired to a circuit board of the embedded system <b>100</b>. The operating system <b>303</b> may include support for the USB storage <b>111</b> and support for dynamically loadable modules. The operating system <b>303</b> may also support a port expander that can be attached to the USB port <b>110</b>. The port expander may be supported if the USB port <b>110</b> is the only USB port on the embedded system <b>100</b>, and it is desirable to attach additional devices to the embedded system <b>100</b>. In case the RAM <b>106</b> does not provide sufficient storage capacity to execute a particular application, the operating system <b>303</b> may support virtual memory.</p>
<p id="p-0061" num="0060">In the specific example where the firmware <b>302</b> includes the Linux operating system, the firmware <b>302</b> may include support for configuring the Linux kernel, as well as Linux kernel headers and cross compilation tools.</p>
<p id="p-0062" num="0061">In some cases, the method also comprises copying the firmware <b>302</b> to the RAM <b>106</b> by copying the entire contents of the flash memory <b>104</b> into the RAM <b>106</b>. The operation of copying the entire contents of the flash memory <b>104</b> into the RAM <b>106</b> may be referred to as a bulk read. Copying the entire contents of the flash memory <b>104</b> into the RAM <b>106</b> by means of the bulk read may enable simpler and more efficient operation of the embedded system <b>100</b>.</p>
<p id="p-0063" num="0062">The method <b>200</b> may also comprise, at step <b>204</b>, recognizing the extension by the firmware <b>302</b>, e.g. by means of a digital certificate. In some implementations, the digital certificate may be stored on the USB storage <b>111</b> and may be verified by the operating system <b>303</b>. Other means may also be used to recognize the extension including code signing, a hardware lock (the USB storage <b>111</b> must include particular hardware features to be recognized), or encryption.</p>
<p id="p-0064" num="0063">Recognizing the extension by the firmware <b>302</b> may have the technical effect of adapting the embedded system <b>100</b> to execute the service, e.g. the image search application described above. Execution of the service without the extension might not have been possible without upgrading the entire firmware <b>302</b> or replacing the embedded system <b>100</b> with a more capable device.</p>
<p id="p-0065" num="0064">The user interface of the embedded system <b>100</b> may allow the extension to be configured. In this case, the framework may be loaded automatically. Alternatively, the extension may be recognized and configured automatically; accordingly, the extension may run in the background and load applications or recognize new devices automatically.</p>
<p id="p-0066" num="0065">Once the extension is recognized and configured, the framework may be configured to load services, including the image search application, manually or automatically. The extension may be configured to provide virtual memory for the embedded system <b>100</b> via the USB storage <b>111</b>, or to extend existing virtual memory of the embedded system <b>100</b> via the USB storage <b>111</b>.</p>
<p id="p-0067" num="0066">In some embodiments, the extension may be loaded using a security mechanism. Loading of the extension may occur after recognizing the extension and before configuring the extension. The security mechanism may be a sandbox. In other words, the security mechanism may be software that is used to separate running programs. Put yet another way, the extension is loaded in a virtual environment, separate from the firmware <b>302</b> of the embedded system <b>100</b>. Accordingly, the security mechanism can be used to isolate the extension from the firmware <b>302</b>. More specifically, when both the extension and the firmware <b>302</b> are loaded into the RAM <b>106</b> and are both running, the security mechanism can be used to isolate the firmware <b>302</b> from the extension.</p>
<p id="p-0068" num="0067">In a particular example, the security mechanism may be a chroot environment <b>304</b> (see <figref idref="DRAWINGS">FIG. 3</figref>). The chroot environment <b>304</b> may be implemented by changing the apparent root directory for the extension and any process executed by the extension. In other words, the extension, and child processes of the extension, are unable to access files of the firmware <b>302</b>. More specifically, loading the extension using a security mechanism may be implemented by loading files associated with the extension into the sandbox (e.g. the chroot environment <b>304</b>), thereby ensuring that applications, libraries and utilities executed within the framework cannot access the firmware <b>302</b>. The security mechanism may also be implemented via other means of program isolation.</p>
<p id="p-0069" num="0068">Advantageously, the security mechanism may be used to guarantee that the embedded system <b>100</b> provides at least the same level of functionality provided before the extension was loaded. The image search application (or other application) executed using the extension may be executed in a protected environment that allows low level system protection.</p>
<p id="p-0070" num="0069">The method <b>200</b> may also comprise at step <b>206</b> executing the service after the extension is loaded. Executing a service on the embedded system <b>100</b> by means of the extension may be understood to include executing libraries, modules, or applications usable by the firmware <b>302</b>. The service may also include additional operating system utilities, such as shell commands.</p>
<p id="p-0071" num="0070">Executing the service by the extension may enable an additional device to be attached to the embedded system <b>100</b>. For example, the additional device may be attached to another USB port (not depicted) on the embedded system <b>100</b>. In another example, attaching the additional device may comprise attaching a port expander, such as a USB hub, to the USB port <b>110</b>. In particular, the port expander may be used if the USB port <b>110</b> is the only USB port on the embedded system <b>100</b>. According to the example, when the USB storage <b>111</b> is attached in step <b>202</b>, the USB storage <b>111</b> is attached to a first port of the port expander and the port expander is attached to the USB port <b>110</b>. The additional device may then be attached to a second port of the port expander.</p>
<p id="p-0072" num="0071">Other applications may also be added to the embedded system <b>100</b> by means of the extension including an Internet Protocol-Private Branch eXchange (IP-PBX) system, a Digital Living Network Alliance (DLNA) media server, a home automation application for controlling household appliances via a home automation gateway, a video surveillance system, and a smart energy monitoring system.</p>
<p id="p-0073" num="0072">Additional applications, other types of non-volatile memory, or other interfaces are also possible, as described with respect to <figref idref="DRAWINGS">FIG. 1</figref>.</p>
<p id="p-0074" num="0073">In addition, the extension may enable the operating system <b>303</b> to support other functionality. For example, the extension may include modules that can be dynamically loaded by the operating system kernel in order to support additional file systems, e.g. the Linux ext2 file system. The extension may also include modules that enable the operating system <b>303</b> to support additional attached devices, such as the home automation gateway, a ZigBee interface, or a digital camera control module <b>308</b> (see <figref idref="DRAWINGS">FIG. 3</figref>). Smart energy meters could also be connected to the embedded system <b>100</b> using the extension.</p>
<p id="p-0075" num="0074">The method <b>200</b> may enable the functionality of the embedded system <b>100</b> to be extended without replacing the embedded system. In addition, the method <b>200</b> may make it possible to install a new service update an individual application without a full firmware upgrade. Moreover, the framework included in the extension may enable the development of highly portable services for a variety of device architectures.</p>
<p id="p-0076" num="0075"><figref idref="DRAWINGS">FIG. 3</figref> depicts a functional block diagram of the flash memory <b>104</b>, the chipset <b>102</b>, and the RAM <b>106</b> of the embedded system <b>100</b>.</p>
<p id="p-0077" num="0076">The example of <figref idref="DRAWINGS">FIG. 3</figref> represents the state of the embedded system <b>100</b> before attaching the USB storage <b>111</b>.</p>
<p id="p-0078" num="0077">In the exemplary depiction of <figref idref="DRAWINGS">FIG. 3</figref>, the firmware stored in the flash memory <b>104</b> includes a print server and a file server. The firmware stored in the flash memory <b>104</b> also includes customizations to the embedded system <b>100</b>, used for example by a telecommunications service provider. The customizations may include a session initiation protocol (SIP) user agent, a high speed packet access (HSPA) backup utility to manage mobile telephony protocols, a technical report 069 (TR-069) utility for remote management of the embedded system <b>100</b>, and a graphical user interface (GUI). According to the example, the firmware stored in the flash memory <b>104</b> also includes user space libraries (e.g. uClibc), the operating system (e.g. Linux), and device drivers. In this particular case, the flash memory <b>104</b> has a 16 MB storage capacity.</p>
<p id="p-0079" num="0078">Continuing with the example in <figref idref="DRAWINGS">FIG. 3</figref>, the chipset <b>102</b> is a Broadcom chipset 6358, with a System on a Chip (SoC) 32-bit MIPS processor, supporting asynchronous digital subscriber line (ADSL) 2/2+, as well as Ethernet and wireless fidelity (WiFi).</p>
<p id="p-0080" num="0079">The RAM <b>106</b> of <figref idref="DRAWINGS">FIG. 3</figref> includes a kernel of the operating system and one or more applications (Apps). The applications in the RAM <b>106</b> correspond to the customizations in the flash memory <b>104</b>. In this particular case, the RAM has a 64 MB storage capacity.</p>
<p id="p-0081" num="0080"><figref idref="DRAWINGS">FIG. 4</figref> depicts a functional block diagram of the flash memory <b>104</b>, the USB storage <b>111</b>, the chipset <b>102</b> and the RAM <b>106</b> after the extension stored on the USB storage <b>111</b> has been recognized by the firmware. Thus, <figref idref="DRAWINGS">FIG. 4</figref> differs from <figref idref="DRAWINGS">FIG. 3</figref> in that the USB storage <b>111</b> has been attached to the embedded system <b>100</b> and the extension stored in the USB storage <b>111</b> has been recognized by the firmware.</p>
<p id="p-0082" num="0081">According to the example depicted in <figref idref="DRAWINGS">FIG. 4</figref>, the extension stored on the USB storage <b>111</b> includes a framework (in this case an Equinox OSGi framework), a Java Virtual Machine (JVM), glibc user space libraries, and at least one Linux kernel module.</p>
<p id="p-0083" num="0082">In addition to the kernel of the operating system and the applications depicted in <figref idref="DRAWINGS">FIG. 3</figref>, the RAM <b>106</b> of <figref idref="DRAWINGS">FIG. 4</figref> includes the JVM and the Equinox OSGi framework from the USB storage <b>111</b>. The security mechanism (not depicted) may be used to isolate the JVM and the OSGi framework from the kernel of the operating system and the applications.</p>
<p id="p-0084" num="0083"><figref idref="DRAWINGS">FIG. 5</figref> depicts a functional block diagram of the flash memory <b>104</b>, the USB storage <b>111</b>, the chipset <b>102</b> and the RAM <b>106</b>, where the USB storage <b>111</b> includes two services, i.e. a media server application and a home automation application.</p>
<p id="p-0085" num="0084">The RAM <b>106</b> of <figref idref="DRAWINGS">FIG. 5</figref> includes bundle <b>1</b> to bundle n. Each bundle from <b>1</b> to n may be understood to represent a dynamically loadable collection of one or more classes, Java Archives (JAR)s, and configuration files, with explicitly declared external dependencies (if any). The bundles may be implemented according to the OSGi standard. In this particular example, n is 2 and the bundles <b>1</b> to n correspond to the media server application and the home automation application.</p>
<p id="p-0086" num="0085">In some embodiments, the security mechanism (not depicted) may be used to isolate the JVM, the OSGi framework, and the media server application bundle from the kernel of the operating system and the applications.</p>
<p id="p-0087" num="0086">Thus, <figref idref="DRAWINGS">FIG. 5</figref> differs from <figref idref="DRAWINGS">FIG. 4</figref> in that the USB storage <b>111</b> includes 2 applications and these applications have loaded into the RAM <b>106</b> as bundles.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A computer-implemented method for extending the functionality of an embedded system wherein the embedded system includes a firmware in a fixed non-volatile memory the method comprising:
<claim-text>attaching an attachable non-volatile memory to the embedded system wherein an extension is stored in the attachable non-volatile memory;</claim-text>
<claim-text>recognizing the extension by the firmware;</claim-text>
<claim-text>loading the firmware to a volatile memory of the embedded system from the fixed non-volatile memory;</claim-text>
<claim-text>loading the recognized extension from the attachable non-volatile memory to the volatile memory; and</claim-text>
<claim-text>executing a service on the embedded system by the extension, wherein the executing includes running the firmware and the extension simultaneously from the volatile memory.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the firmware is stored in the fixed non-volatile memory as a binary image.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the fixed non-volatile memory is built into a chip and wherein the chip is wired to the embedded system.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the attachable non-volatile memory is a USB storage.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the attachable non-volatile memory has greater storage capacity than the fixed non-volatile memory.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:
<claim-text>loading the extension using a security mechanism; and</claim-text>
<claim-text>isolating the extension from the firmware by the security mechanism.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the copying of the firmware to the volatile memory of the embedded system comprises copying the entire contents of the fixed non-volatile memory into the volatile memory of the embedded system.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The method of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein the volatile memory is faster than the fixed non-volatile memory, and/or wherein the volatile memory is faster than the attachable non-volatile memory.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the extension comprises one or more of the following:
<claim-text>a library usable by the firmware;</claim-text>
<claim-text>at least one dynamically loadable module that can be linked to the firmware; and</claim-text>
<claim-text>a framework enabling execution of the service independent of an architecture of the embedded system.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:
<claim-text>attaching a port expander to an interface of the embedded system, wherein attaching the attachable non-volatile memory to the embedded system comprises attaching the attachable non-volatile memory to a first port of the port expander;</claim-text>
<claim-text>expanding the embedded system by attaching a device to a second port of the port expander; and</claim-text>
<claim-text>operating the device by means of the extension.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the embedded system is a network access gateway.</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the firmware includes an operating system and at least one application.</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the loading of the recognized extension comprises:
<claim-text>loading the recognized extension in a virtual environment in the volatile memory, wherein the recognized extension loaded in the virtual environment is isolated from the firmware, and wherein the virtual environment separates the extension from the firmware when simultaneously executed from the volatile memory.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. An embedded system comprising:
<claim-text>a volatile memory</claim-text>
<claim-text>a fixed non-volatile memory including a firmware;</claim-text>
<claim-text>an interface operable to allow an attachable non-volatile memory to be attached to the embedded system</claim-text>
<claim-text>wherein the attachable non-volatile memory is operable to store an extension;</claim-text>
<claim-text>wherein the firmware is operable to:</claim-text>
<claim-text>recognize the extension,</claim-text>
<claim-text>copy the firmware to the volatile memory,</claim-text>
<claim-text>load the recognized extension from the attachable non-volatile memory to the volatile memory; and</claim-text>
<claim-text>wherein the embedded system is adaptable to execute a service by the extension, and the executing includes running the firmware and the extension simultaneously from the volatile memory.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The system of <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein the firmware is stored in the fixed non-volatile memory as a binary image.</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The embedded system of <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein the recognized extension is operable to be loaded into a virtual environment in the volatile memory, and the recognized extension loaded in the virtual environment is isolated from the firmware, and the virtual environment separates the extension from the firmware when simultaneously executed from the volatile memory.</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. An attachable non-volatile memory attachable to an interface of an embedded system, the memory comprising:
<claim-text>an extension including a service, wherein the extension is stored in the attachable non-volatile memory;</claim-text>
<claim-text>wherein the extension is operable to extend a firmware of the embedded system after being recognized by the embedded system, and the firmware is operable to load the firmware from the attachable non-volatile memory to a volatile memory of the embedded system, load the recognized extension to the volatile memory from the attachable non-volatile memory; and</claim-text>
<claim-text>wherein the service is operable to be executed by the embedded system after the firmware of the embedded system has been extended, and the executing includes running the firmware and the extension simultaneously from the volatile memory.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The attachable non-volatile memory of <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein the recognized extension is operable to be loaded into a virtual environment in the volatile memory, and the recognized extension loaded in the virtual environment is isolated from the firmware, and the virtual environment separates the extension from the firmware when simultaneously executed from the volatile memory. </claim-text>
</claim>
</claims>
</us-patent-grant>

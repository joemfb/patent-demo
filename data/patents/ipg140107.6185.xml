<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08627309-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08627309</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>12712222</doc-number>
<date>20100225</date>
</document-id>
</application-reference>
<us-application-series-code>12</us-application-series-code>
<us-term-of-grant>
<us-term-extension>730</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>9</main-group>
<subgroup>44</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>717172</main-classification>
<further-classification>717177</further-classification>
</classification-national>
<invention-title id="d2e53">Automated deployment and servicing of distributed applications</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>6985939</doc-number>
<kind>B2</kind>
<name>Fletcher et al.</name>
<date>20060100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>7024450</doc-number>
<kind>B1</kind>
<name>Deo et al.</name>
<date>20060400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709203</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>7072807</doc-number>
<kind>B2</kind>
<name>Brown et al.</name>
<date>20060700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>703  1</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>7086009</doc-number>
<kind>B2</kind>
<name>Resnick et al.</name>
<date>20060800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>715771</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>7120558</doc-number>
<kind>B2</kind>
<name>McIntyre et al.</name>
<date>20061000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>702183</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>7127713</doc-number>
<kind>B2</kind>
<name>Davis et al.</name>
<date>20061000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717177</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>7155380</doc-number>
<kind>B2</kind>
<name>Hunt et al.</name>
<date>20061200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>7200530</doc-number>
<kind>B2</kind>
<name>Brown et al.</name>
<date>20070400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>8006130</doc-number>
<kind>B2</kind>
<name>Kanso et al.</name>
<date>20110800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714 13</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>8176114</doc-number>
<kind>B2</kind>
<name>Vandanapu</name>
<date>20120500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709201</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>2002/0032754</doc-number>
<kind>A1</kind>
<name>Logston et al.</name>
<date>20020300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709219</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>2003/0084056</doc-number>
<kind>A1</kind>
<name>DeAnna et al.</name>
<date>20030500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00013">
<document-id>
<country>US</country>
<doc-number>2004/0205691</doc-number>
<kind>A1</kind>
<name>Poole et al.</name>
<date>20041000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717100</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00014">
<document-id>
<country>US</country>
<doc-number>2006/0005162</doc-number>
<kind>A1</kind>
<name>Tseng et al.</name>
<date>20060100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00015">
<document-id>
<country>US</country>
<doc-number>2006/0245354</doc-number>
<kind>A1</kind>
<name>Gao et al.</name>
<date>20061100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00016">
<document-id>
<country>US</country>
<doc-number>2009/0007095</doc-number>
<kind>A1</kind>
<name>Alverson et al.</name>
<date>20090100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717176</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00017">
<document-id>
<country>US</country>
<doc-number>2011/0029963</doc-number>
<kind>A1</kind>
<name>Smith et al.</name>
<date>20110200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717171</main-classification></classification-national>
</us-citation>
<us-citation>
<nplcit num="00018">
<othercit>Kushner Daniel, &#x201c;Choosing the Right Tool for Application Deployment Automation&#x201d;,Retrieved at&#x3c;&#x3c;http://blog.noliosoft.com/2009/12/choosing-the-right-tool-for-application-deployment-automation/&#x3e;&#x3e;, Jan. 20, 2010,pp. 2.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00019">
<othercit>Zhao, et al.,&#x201c;Tapestry: A Resilient Global-scale Overlay for Service Deployment&#x201d;, Retrieved at&#x3c;&#x3c;http://bnrg.cs.berkeley.edu/&#x2dc;adj/publications/paper-files/tapestry<sub>&#x2014;</sub>jsac.pdf&#x3e;&#x3e;, Jan. 2004, pp. 1-15.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00020">
<othercit>&#x201c;Sun Systems for MySQL&#x201d;, Retrieved at&#x3c;&#x3c;http://www.sun.com/systems/solutions/mysql/deployment.jsp&#x3e;&#x3e;, Jan. 20, 2010, pp. 2.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00021">
<othercit>&#x201c;Cisco Data Center Network Architecture and Solutions Overview&#x201d;, Retrieved at&#x3c;&#x3c;http://www.cisco.biz/en/US/solutions/collateral/ns340/ns517/ns224/ns377/net<sub>&#x2014;</sub>brochure0900aecd802c9a4f.pdf&#x3e;&#x3e;, Jan. 20, 2010, pp. 19.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00022">
<othercit>&#x201c;Cisco Data Center Solutions for Application Networking Services&#x201d;, Retrieved at&#x3c;&#x3c;http://www.cisco.com/en/US/prod/collateral/modules/ps2706/ps6906/prod<sub>&#x2014;</sub>brochure0900aecd804595e1.pdf&#x3e;&#x3e;,Jan. 20, 2010, pp. 5.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>20</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>717172</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>717177</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>4</number-of-drawing-sheets>
<number-of-figures>4</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20110209140</doc-number>
<kind>A1</kind>
<date>20110825</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Scheidel</last-name>
<first-name>William L.</first-name>
<address>
<city>Seattle</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Fries</last-name>
<first-name>Robert M.</first-name>
<address>
<city>Sammamish</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="003" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Parthasarathy</last-name>
<first-name>Srivatsan</first-name>
<address>
<city>Bellevue</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="004" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Shi</last-name>
<first-name>Alan C.</first-name>
<address>
<city>Redmond</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="005" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Finnigan</last-name>
<first-name>James P.</first-name>
<address>
<city>Redmond</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Scheidel</last-name>
<first-name>William L.</first-name>
<address>
<city>Seattle</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Fries</last-name>
<first-name>Robert M.</first-name>
<address>
<city>Sammamish</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="003" designation="us-only">
<addressbook>
<last-name>Parthasarathy</last-name>
<first-name>Srivatsan</first-name>
<address>
<city>Bellevue</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="004" designation="us-only">
<addressbook>
<last-name>Shi</last-name>
<first-name>Alan C.</first-name>
<address>
<city>Redmond</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="005" designation="us-only">
<addressbook>
<last-name>Finnigan</last-name>
<first-name>James P.</first-name>
<address>
<city>Redmond</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>Microsoft Corporation</orgname>
<role>02</role>
<address>
<city>Redmond</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Nguyen</last-name>
<first-name>Phillip H</first-name>
<department>2191</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">Deployment and servicing tasks associated with multi-tier, distributed applications, application environments and data centers are automated so that a person does not have to manually perform these tasks. All of the information describing and defining the distributed service is modeled and stored in a re-useable service template that can be used to drive an automated system to programmatically deploy and manage the service over time. Deployment and servicing of a distributed application can be automated using re-useable models that capture hardware and workload definitions. The re-useable models in the form of service templates enable delta-based servicing of the application. The service can be deployed to one or more physical machines, one or more virtual machines or to a combination thereof. A default deployment plan can be customized with instance-specific customizations of service parameters.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="189.74mm" wi="174.50mm" file="US08627309-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="206.59mm" wi="174.24mm" file="US08627309-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="197.44mm" wi="99.06mm" file="US08627309-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="216.07mm" wi="174.50mm" file="US08627309-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="194.14mm" wi="168.57mm" file="US08627309-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">BACKGROUND</heading>
<p id="p-0002" num="0001">The word &#x201c;distributed&#x201d; in computer science originally referred to computer networks where individual computers were physically distributed within a geographical area. Current usage of the term, however, is much broader and can also refer to autonomous processes that run on the same physical computer. While there is no single definition of a distributed system, a distributed system typically has several autonomous computational entities (computers or nodes) that communicate with each other by message passing. A distributed application is a computer program that runs in a distributed system.</p>
<p id="p-0003" num="0002">A distributed system may have a common goal, or each computer may have its own user with individual needs. The purpose of the distributed system may be to coordinate the use of shared resources or to provide communication services to the users. The system may include different kinds of computers and network links, and the system may change during the execution of a distributed program. Often, each computer has a limited, incomplete view of the system, knowing only its own function.</p>
<p id="p-0004" num="0003">Distributed systems are used when the application needs a communication network that connects several computers. Additionally, there are many circumstances in which the use of a single computer would be possible in principle, but the use of a distributed system is beneficial because it is more cost-effective to obtain the desired level of performance by using a number of less expensive computers instead of a single more expensive computer. A distributed system can be more reliable than a monolithic system because the function of the system does not depend on a single computer. Moreover, a distributed system may be easier to expand than a system with only one processor.</p>
<p id="p-0005" num="0004">Examples of distributed systems and applications of distributed computing include telecommunication networks such as telephone networks and cellular networks, computer networks such as the Internet, wireless sensor networks and routing algorithms; network applications such as the world wide web and peer-to-peer networks, multiplayer online games and virtual reality communities, distributed databases and distributed database management systems, network file systems and distributed information processing systems such as banking systems and airline reservation systems; real-time process control such as aircraft control systems and industrial control systems, parallel computation, scientific computing, including cluster computing and grid computing, various volunteer computing projects, distributed rendering in computer graphics and so on. Distributed systems include server data centers, Internet data centers, web farms and so on. Distributed applications include any applications that run on distributed systems, as, for example, Internet services and websites.</p>
<heading id="h-0002" level="1">SUMMARY</heading>
<p id="p-0006" num="0005">Deployment aspects of a multi-tier application can be modeled in a coordinated fashion as a service template. Once the service template has been defined, a user such as an Administrator can direct the automatic deployment of the service into an environment using a customizable workflow. After deployment, the service can be automatically kept up to date with changes based on a differencing operation performed on the original service template (a first service template) and the revised service template (a second service template). The differencing operation can determine a list of actions to be taken to make the deployed service comply with the revised service template. The list of actions determined by the differencing operation can be automatically implemented by a deployment and/or servicing manager.</p>
<p id="p-0007" num="0006">Re-useable models of distributed applications called system templates can be created. Automated deployment of a distributed application can be performed based on the re-useable models. Re-useable hardware/workload definitions can be captured by the re-useable models and can be used for automated creation of physical and virtual machines. A default orchestration for distributed application deployment can be extended by providing instance-specific customizations for service parameters for the application. Once deployed, automated servicing of a distributed application can be performed by determining the delta of a revised or new version of a service template from the original service template so that the actions that are needed to be taken on a deployed application to make it comply with the revised model are automatically identified and performed. Orchestration of delta-based servicing of distributed applications can be extended or customized by creating a customized service plan or workflow.</p>
<p id="p-0008" num="0007">This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter, nor is it intended to be used to limit the scope of the claimed subject matter.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0009" num="0008">In the drawings:</p>
<p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. 1</figref> illustrates an example of a system <b>100</b> for automated deployment and servicing of a distributed application in accordance with aspects of the subject matter disclosed herein;</p>
<p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. 2</figref> is a flow diagram of an example of a method <b>200</b> for automated deployment and servicing of a distributed application in accordance with aspects of the subject matter disclosed herein as described with respect to <figref idref="DRAWINGS">FIG. 1</figref>.</p>
<p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. 3</figref> is a block diagram illustrating an example of a computing environment in which aspects of the subject matter disclosed herein may be implemented; and</p>
<p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. 4</figref> is a block diagram of an example of an integrated development environment in accordance with aspects of the subject matter disclosed herein.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0004" level="1">DETAILED DESCRIPTION</heading>
<p id="h-0005" num="0000">Overview</p>
<p id="p-0014" num="0013">In an environment such as a datacenter, deploying a logical application typically involves more than one machine. Typically a number of machines constitute a front end such as a web front end of an Internet application. The front end may communicate with another set of machines comprising the middle tier of the application and both the front end and the middle tier may communicate with a back end such as a database back end. The collection of machine tiers and the connectivity between the tiers are all parts of the distributed service. Today, distributed services are typically managed by managing the individual machines of the distributed service. This process generally involves several different Administrators who coordinate through e-mail or meetings to determine the overall requirements of the application. Once the requirements are identified, the majority of the configuration process is done manually, leading to errors and failures on initial deployment. A complete description of the whole distributed application typically does not exist.</p>
<p id="p-0015" num="0014">The subject matter disclosed herein describes methods, systems and computer program products to automate the deployment and management of a group of machines that are logically related and perform some overall application function. Deployment and servicing tasks associated with multi-tier, distributed applications, application environments and data centers are automated so that a person or persons do not have to manually perform these tasks. These tasks include but are not limited to: handover, configuration, application of updates and patches, lifetime management including starting and stopping a service (in contrast to starting and stopping a machine) and other such tasks as known in the art. By replacing complex, error prone and uncoordinated manual application deployment, instantiation and servicing tasks with automated deployment, instantiation and servicing as described herein, reductions in number of errors, cost and the time needed to perform the tasks can be realized.</p>
<p id="p-0016" num="0015">All of the information describing and defining the distributed service is modeled and stored in a re-useable service template that can be used to drive an automated system to programmatically deploy and manage the service over time. Deployment and servicing of a distributed application can be automated using re-useable models that capture hardware and workload definitions. The re-useable models in the form of service templates enable delta-based servicing of the application. The service can be deployed to one or more physical machines, one or more virtual machines or to a combination thereof. A default deployment can be customized with instance-specific values for service parameters.</p>
<p id="h-0006" num="0000">Automated Deployment and Servicing of Distributed Applications</p>
<p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. 1</figref> illustrates an example of a system <b>100</b> for automated deployment and servicing of distributed applications in accordance with aspects of the subject matter disclosed herein. All or portions of system <b>100</b> may reside on one or more computers such as the computers described below with respect to <figref idref="DRAWINGS">FIG. 3</figref>. All or portions of system <b>100</b> may reside on one or more software development computers such as the computers described below with respect to <figref idref="DRAWINGS">FIG. 4</figref>. All or portions of system <b>100</b> may reside on one or more application management computers. The system <b>100</b> or portions thereof may comprise a portion of an integrated development environment such as the ones described below and illustrated in <figref idref="DRAWINGS">FIG. 4</figref>. Alternatively, system <b>100</b> or portions thereof may be provided as a stand-alone system or as a plug-in or add-in. All or portions of system <b>100</b> may reside on a distributed service management computer.</p>
<p id="p-0018" num="0017">Portions of the automatically deployed and/or automatically serviced application can comprise one or more physical machines, one or more virtual machines or any combination of physical and virtual machines. A virtual machine (VM) is a software implementation of a computer that executes programs like a physical machine. In data center virtualization, an abstract layer is created between applications and the underlying server, storage and network infrastructure. Virtual machines can allow the underlying physical machine resources to be shared between different virtual machines. Virtualization can create one logical entity from multiple physical entities or can create many logical entities from one physical entity comprising computing, storage, network or application resources. Each virtual machine may run its own operating system. The software layer providing the virtualization is called a virtual machine monitor or hypervisor. A hypervisor can run directly on the hardware (VM) or on top of an operating system (hosted VM). In virtual machine environments, multiple operating system environments can co-exist on the same computer, but maintain isolation from each other. A virtual machine can comprise a set of electronic files that operate as an additional distinct computer system within the confines of another physical host computer system.</p>
<p id="p-0019" num="0018">System <b>100</b> may include one or more computers such as computer <b>102</b>. The one or more computers may include one or more of: a processor (such as processor <b>142</b>), a memory such as memory <b>144</b>, and one or more modules for automated deployment and servicing of distributed applications. Other components well known in the arts may also be included but are not here shown. It will be appreciated that the module(s) for automated deployment and servicing of distributed applications can be loaded into memory <b>144</b> to cause one or more processors such as processor <b>142</b> to perform the actions attributed to the module(s) for automated deployment and servicing of distributed applications.</p>
<p id="p-0020" num="0019">The modules for automated deployment and servicing of distributed applications may include one or more deployment and/or servicing manager <b>106</b>. A deployed application can be an online service, a web-based application, Internet application or any other application. The deployment and/or servicing manager <b>106</b> can facilitate the modeling of an application to allow for automated deployment and servicing of the application. The modeled application can be a distributed application and can include multiple tiers such as, for example, a front tier, a middle tier and a back end tier. The front tier may but does not necessarily represent a user interface such as a web front end to an Internet application. The middle tier may but does not necessarily comprise the processing portion of an application such as an Internet application and the back end tier may but does not necessarily represent the data or database portion acted upon by the application.</p>
<p id="p-0021" num="0020">The modules for automated deployment and servicing of distributed applications may operate to deploy a distributed application to one or more physical machines or to one or more virtual machines or to a combination thereof. For example, in <figref idref="DRAWINGS">FIG. 1</figref> deployment and/or servicing manager <b>106</b> deploys a distributed application to a virtual machine comprising a front tier <b>136</b> of the application, a virtual machine comprising a middle tier <b>138</b> of the application and a physical machine <b>140</b> on which a SQL database <b>130</b> (an example of a back end tier) resides. In <figref idref="DRAWINGS">FIG. 1</figref>, the virtual machine comprising the front tier <b>136</b> of the application and the virtual machine comprising the middle tier <b>138</b> of the application run on a physical machine host on which is running a software layer that provides the virtualization, referred to as the hypervisor <b>132</b>, although it will be appreciated that the subject matter described herein is not so limited. For example, the virtual machine created may comprise multiple physical machines.</p>
<p id="p-0022" num="0021">The model of the application can be defined using a service template (e.g., service template <b>112</b>). A database <b>104</b> may store a collection of service templates for one or more distributed applications. The service template can include a deployment plan, a customization of how to deploy the application. The service template can include one or more machine tier templates that together comprise a set of templates for a distributed application. Each machine tier template in the set can define one particular tier of the application. For example, in <figref idref="DRAWINGS">FIG. 1</figref> the front end tier template is front end tier template <b>114</b>, the mid tier template is mid tier template <b>116</b> and the back end tier template is data tier template <b>118</b> and so on. Each machine tier template can include one or more hardware templates (e.g., hardware template <b>120</b> for front end tier template <b>114</b>) which defines the hardware characteristics of the tier and one or more workload templates which define the operating system and application configuration of the tier.</p>
<p id="p-0023" num="0022">The service template can include a workload template that defines the operating system (e.g., operating system workload template <b>122</b>) and a workload template that defines the application configuration (e.g., application workload template <b>124</b>). Additionally, the service template can include information regarding the network connectivity between the tiers of the application, illustrated in <figref idref="DRAWINGS">FIG. 1</figref> by the lines <b>126</b> connecting front end tier template <b>114</b>, mid tier template <b>116</b> and data tier template <b>118</b>. The service template can also include information such as how the &#x201c;health&#x201d; of the distributed application is reported. &#x201c;Health&#x201d; reporting reports the results of monitoring the state of services and applications, including issues that cause downtime or poor performance, such as unavailable services, long response time, and security breaches. Error conditions that can be reported include exceptions that occurred, errors that occurred, security problem or risk occurred, service unavailability, dependency problems and so on. The service template allows for more than one tier to be defined and allows for customization of operating systems and applications.</p>
<p id="p-0024" num="0023">Once a service template has been defined, a new instance of the service can be deployed based on the service template. If desired, deployment of the service can be customized by going through a phase called specialization in which instance-specific aspects of the service can be configured such as by providing values of parameters that an application package can expose. Examples of instance-specific aspects of the service can include particular computer names that are to be used or identifying a database connection string that a web tier will use. Once customized (specialized), the service can be deployed into the environment using the customized workflow. In accordance with some aspects of the subject matter disclosed here the customizable workflow can be based on Windows Workflow. This workflow is called a deployment plan and determines the steps that will be used to deploy each tier, configure the operating system, and install any applications. A default deployment plan is available which then may be extended by a user such as an Administrator or ISV (independent software vendor). Metadata in the service template for each tier can control the order in which tiers are deployed. An example of a customization is customizing the workflow to integrate with a custom storage solution, although it will be appreciated that customization is not limited to storage implementations and many other aspects of the workflow can be customized. Physical artifacts and metadata for the application can be deployed from library <b>134</b>.</p>
<p id="p-0025" num="0024">After a service has been deployed, a link to the service template that the service was deployed from can be maintained. When or if a service template is later updated to include, for example, a new version of an application, a user such as an Administrator can decide which services to move to the new version of the service template. When a service is moved to a new version of a service template, deployment and/or servicing manager <b>106</b> can automatically determine the changes that have been made from the service as originally deployed and can create a list of actions that are to be applied to each tier in the service to make the service match the new version of the service template. The changes represented on the list can then be applied using a customizable workflow called a servicing plan, which is a workflow similar to the deployment plan (service template). This workflow allows a user such as an Administrator to customize how machines are taken out of and put back into service when updates are to be applied. A default servicing plan can be provided which can be extended and customized by a user such as the Administrator or ISV.</p>
<p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. 2</figref> illustrates an example of a method <b>200</b> for automated deployment and servicing of distributed applications in accordance with aspects of the subject matter disclosed herein. Method <b>200</b> or portions thereof may be performed by system <b>100</b> or portions thereof as described above with respect to <figref idref="DRAWINGS">FIG. 1</figref>. At <b>202</b> a model or a set of models can be created that describe the overall distributed service. The model can be manifested as a machine template that can include constructs called profiles that define the hardware and software portions of the distributed service. Profiles are units that supply portions of instructions for creating individual machines and can be used to build a machine tier template. A hardware profile can include descriptions of hardware including but not limited to disk drives, memory, DVD drives and other hardware elements.</p>
<p id="p-0027" num="0026">Workload profiles describe the configuration of the operating system and applications that are to be deployed on a distributed system. For example a workload profile can describe what kind of operating system will be deployed to a particular virtual machine, including identification of the operating system image disk to be used in deployment. A workload profile can also define the application workload that is to be deployed. For example a SQL application may be specified. At <b>204</b> the profiles can be combined into a machine tier template that describes how to build an individual machine. A hardware profile and a workload profile can be combined to create a machine tier template that specifies how a particular machine will be created. A machine tier template describes how to create an individual machine and can be used to create multiple machines having substantially identical characteristics.</p>
<p id="p-0028" num="0027">Multiple machine tier templates can be combined to create a service template that describes how to put together an overall service. A service template for an application typically includes a number of different machine tier templates. The network connectivity between the different machines that are part of the service is also included in the service template. Thus, the set of models or service template serve as a blueprint to describe how to create an instance of a service. The service template describes everything the service includes and describes the logical grouping of the machines that comprise the service. The service template serves as the description for how the service is deployed.</p>
<p id="p-0029" num="0028">The service template can be used by an orchestration engine portion of the deployment and/or servicing manager to initiate and perform the automated deployment of the service. The orchestration engine executes a workflow comprising a set of steps that are used to put together each individual machine of the distributed service. Hence, a deployment and/or servicing manager can receive a service template and based on the service template the deployment and/or servicing manager can create machines that are deployed according to the instructions contained in the service template at <b>210</b>. Alternatively, instance-specific values can optionally (signified by hatched lines in <figref idref="DRAWINGS">FIG. 2</figref>) be specified in a process called specialization so that deployment of the service can be customized at <b>208</b>. Multiple activities are orchestrated in an overall flow that produces all of the machines that are needed for the service.</p>
<p id="p-0030" num="0029">After the service has been created, because the model (template) from which the service was created is known, a number of management tasks can take place at <b>212</b>. For example, if a machine deployed from the template changes over time so that it differs from the machine created by the template, the deployment and/or servicing manager can enact the change(s) by applying the delta determined by the differencing operation. A configuration that provides load balancing among the machines can be provided. Lifetime management tasks such as starting or stopping a service (instead of starting or stopping a machine) can be performed. A particular tier of service can be easily scaled out because another machine can be created that has the same characteristics as any other machine that was created from the service template. For example, suppose that when a service was deployed a single web server was sufficient to handle customer traffic. Over time, the application may get more and more customers, so that more and more identical web servers are needed to handle the traffic. The web server portion of the application can be easily scaled out by creating additional web servers having substantially identical characteristics to the original web server using the appropriate template.</p>
<p id="p-0031" num="0030">The distributed service can be serviced, based on the service template. For example, a new template for the service can be created. For example, the original description of the service (the service template) can be cloned and a new version created by modifying some aspects of the original service template. For example, the amount of RAM for a particular machine tier may be changed by changing the amount of RAM on that machine. Thus the new version of the service template may have some changes from the original version of the template from which the service was created.</p>
<p id="p-0032" num="0031">When the new template is complete, an instance of the deployed service can be specified along with the new service template. Because the original version of the service template that the service was created from is known and because the revised version of the service template is known, a differencing operation can be performed to discover the changes between the two versions of the template. That is, the incremental changes needed to make the already deployed service comply with the new service template can be determined using a differencing operation that automatically determines how to apply changes to the deployed service to make it comply with the new version of the service template. From the list of changes discovered, the changes to the particular machines in the service instance that was created from the original version of the template can be applied so that it complies with the new version of the service template. These changes can be applied using a customizable workflow called a servicing plan, which is a workflow similar to the deployment plan. This workflow allows Administrator to customize how machines are taken out of and put back into service when updates need to be applied. A default servicing plan is available which then may be extended by the Administrator or ISVs.</p>
<p id="p-0033" num="0032">Hence instead of managing at the level of the individual machine as known in the field, it is possible to manage at a higher level of abstraction, at the service level, rather than at the level of the individual machine, whether managing deployment or managing servicing or managing the distributed application over time. For example, instead of starting or stopping an individual virtual machine, the distributed service can be started or stopped. Moreover, fine-grained control of the action is provided.</p>
<p id="h-0007" num="0000">Example of a Suitable Computing Environment</p>
<p id="p-0034" num="0033">In order to provide context for various aspects of the subject matter disclosed herein, <figref idref="DRAWINGS">FIG. 3</figref> and the following discussion are intended to provide a brief general description of a suitable computing environment <b>510</b> in which various embodiments may be implemented. While the subject matter disclosed herein is described in the general context of computer-executable instructions, such as program modules, executed by one or more computers or other computing devices, those skilled in the art will recognize that portions of the subject matter disclosed herein can also be implemented in combination with other program modules and/or a combination of hardware and software. Generally, program modules include routines, programs, objects, physical artifacts, data structures, etc. that perform particular tasks or implement particular data types. Typically, the functionality of the program modules may be combined or distributed as desired in various embodiments. The computing environment <b>510</b> is only one example of a suitable operating environment and is not intended to limit the scope of use or functionality of the subject matter disclosed herein.</p>
<p id="p-0035" num="0034">With reference to <figref idref="DRAWINGS">FIG. 3</figref>, a computing device for efficient resumption of co-routines on a linear stack in the form of a computer <b>512</b> is described. Computer <b>512</b> may include a processing unit <b>514</b>, a system memory <b>516</b>, and a system bus <b>518</b>. The processing unit <b>514</b> can be any of various available processors. Dual microprocessors and other multiprocessor architectures also can be employed as the processing unit <b>514</b>. The system memory <b>516</b> may include volatile memory <b>520</b> and nonvolatile memory <b>522</b>. Nonvolatile memory <b>522</b> can include read only memory (ROM), programmable ROM (PROM), electrically programmable ROM (EPROM) or flash memory. Volatile memory <b>520</b> may include random access memory (RAM) which may act as external cache memory. The system bus <b>518</b> couples system physical artifacts including the system memory <b>516</b> to the processing unit <b>514</b>. The system bus <b>518</b> can be any of several types including a memory bus, memory controller, peripheral bus, external bus, or local bus and may use any variety of available bus architectures.</p>
<p id="p-0036" num="0035">Computer <b>512</b> typically includes a variety of computer readable media such as volatile and nonvolatile media, removable and non-removable media. Computer storage media may be implemented in any method or technology for storage of information such as computer readable instructions, data structures, program modules or other data. Computer storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CDROM, digital versatile disks (DVD) or other optical disk storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other non-transitory medium which can be used to store the desired information and which can be accessed by computer <b>512</b>.</p>
<p id="p-0037" num="0036">It will be appreciated that <figref idref="DRAWINGS">FIG. 3</figref> describes software that can act as an intermediary between users and computer resources. This software may include an operating system <b>528</b> which can be stored on disk storage <b>524</b>, and which can control and allocate resources of the computer system <b>512</b>. Disk storage <b>524</b> may be a hard disk drive connected to the system bus <b>518</b> through a non-removable memory interface such as interface <b>526</b>. System applications <b>530</b> take advantage of the management of resources by operating system <b>528</b> through program modules <b>532</b> and program data <b>534</b> stored either in system memory <b>516</b> or on disk storage <b>524</b>. It will be appreciated that computers can be implemented with various operating systems or combinations of operating systems.</p>
<p id="p-0038" num="0037">A user can enter commands or information into the computer <b>512</b> through an input device(s) <b>536</b>. Input devices <b>536</b> include but are not limited to a pointing device such as a mouse, trackball, stylus, touch pad, keyboard, microphone, and the like. These and other input devices connect to the processing unit <b>514</b> through the system bus <b>518</b> via interface port(s) <b>538</b>. An interface port(s) <b>538</b> may represent a serial port, parallel port, universal serial bus (USB) and the like. Output devices(s) <b>540</b> may use the same type of ports as do the input devices. Output adapter <b>542</b> is provided to illustrate that there are some output devices <b>540</b> like monitors, speakers and printers that require particular adapters. Output adapters <b>542</b> include but are not limited to video and sound cards that provide a connection between the output device <b>540</b> and the system bus <b>518</b>. Other devices and/or systems or devices such as remote computer(s) <b>544</b> may provide both input and output capabilities.</p>
<p id="p-0039" num="0038">Computer <b>512</b> can operate in a networked environment using logical connections to one or more remote computers, such as a remote computer(s) <b>544</b>. The remote computer <b>544</b> can be a personal computer, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to the computer <b>512</b>, although only a memory storage device <b>546</b> has been illustrated in <figref idref="DRAWINGS">FIG. 4</figref>. Remote computer(s) <b>544</b> can be logically connected via communication connection <b>550</b>. Network interface <b>548</b> encompasses communication networks such as local area networks (LANs) and wide area networks (WANs) but may also include other networks. Communication connection(s) <b>550</b> refers to the hardware/software employed to connect the network interface <b>548</b> to the bus <b>518</b>. Connection <b>550</b> may be internal to or external to computer <b>512</b> and include internal and external technologies such as modems (telephone, cable, DSL and wireless) and ISDN adapters, Ethernet cards and so on.</p>
<p id="p-0040" num="0039">It will be appreciated that the network connections shown are examples only and other means of establishing a communications link between the computers may be used. One of ordinary skill in the art can appreciate that a computer <b>512</b> or other client device can be deployed as part of a computer network. In this regard, the subject matter disclosed herein man pertain to any computer system having any number of memory or storage units, and any number of applications and processes occurring across any number of storage units or volumes. Aspects of the subject matter disclosed herein may apply to an environment with server computers and client computers deployed in a network environment, having remote or local storage. Aspects of the subject matter disclosed herein may also apply to a standalone computing device, having programming language functionality, interpretation and execution capabilities.</p>
<p id="p-0041" num="0040"><figref idref="DRAWINGS">FIG. 4</figref> illustrates an integrated development environment (IDE) <b>600</b> and Common Language Runtime Environment <b>602</b>. An IDE <b>600</b> may allow a user (e.g., developer, programmer, designer, coder, etc.) to design, code, compile, test, run, edit, debug or build a program, set of programs, web sites, web applications, and web services in a computer system. Software programs can include source code (component <b>610</b>), created in one or more source code languages (e.g., Visual Basic, Visual J#, C++. C#, J#, Java Script, APL, COBOL, Pascal, Eiffel, Haskell, ML, Oberon, Perl, Python, Scheme, Smalltalk and the like). The IDE <b>600</b> may provide a native code development environment or may provide a managed code development that runs on a virtual machine or may provide a combination thereof. The IDE <b>600</b> may provide a managed code development environment using the .NET framework. An intermediate language component <b>650</b> may be created from the source code component <b>610</b> and the native code component <b>611</b> using a language specific source compiler <b>620</b> and the native code component <b>611</b> (e.g., machine executable instructions) is created from the intermediate language component <b>650</b> using the intermediate language compiler <b>660</b> (e.g. just-in-time (JIT) compiler), when the application is executed. That is, when an IL application is executed, it is compiled while being executed into the appropriate machine language for the platform it is being executed on, thereby making code portable across several platforms. Alternatively, in other embodiments, programs may be compiled to native code machine language (not shown) appropriate for its intended platform.</p>
<p id="p-0042" num="0041">A user can create and/or edit the source code component according to known software programming techniques and the specific logical and syntactical rules associated with a particular source language via a user interface <b>640</b> and a source code editor <b>651</b> in the IDE <b>600</b>. Thereafter, the source code component <b>610</b> can be compiled via a source compiler <b>620</b>, whereby an intermediate language representation of the program may be created, such as assembly <b>630</b>. The assembly <b>630</b> may comprise the intermediate language component <b>650</b> and metadata <b>642</b>. Application designs may be able to be validated before deployment.</p>
<p id="p-0043" num="0042">The various techniques described herein may be implemented in connection with hardware or software or, where appropriate, with a combination of both. Thus, the methods and apparatus described herein, or certain aspects or portions thereof, may take the form of program code (i.e., instructions) embodied in tangible media, such as floppy diskettes, CD-ROMs, hard drives, or any other machine-readable storage medium, wherein, when the program code is loaded into and executed by a machine, such as a computer, the machine becomes an apparatus for practicing aspects of the subject matter disclosed herein. In the case of program code execution on programmable computers, the computing device will generally include a processor, a storage medium readable by the processor (including volatile and non-volatile memory and/or storage elements), at least one input device, and at least one output device. One or more programs that may utilize the creation and/or implementation of domain-specific programming models aspects, e.g., through the use of a data processing API or the like, may be implemented in a high level procedural or object oriented programming language to communicate with a computer system. However, the program(s) can be implemented in assembly or machine language, if desired. In any case, the language may be a compiled or interpreted language, and combined with hardware implementations.</p>
<p id="p-0044" num="0043">While the subject matter disclosed herein has been described in connection with the figures, it is to be understood that modifications may be made to perform the same functions in different ways.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A system comprising:
<claim-text>a processor and a memory including a module configured to cause the processor to:</claim-text>
<claim-text>perform automated deployment, automated lifetime management tasks and automated servicing of a distributed application based on a model of the distributed application, wherein the model of the distributed application comprises a plurality of service templates comprising:</claim-text>
<claim-text>a first service template comprising a plurality of machine tier templates, wherein the plurality of machine tier templates comprise hardware and workload definitions for the distributed application; and</claim-text>
<claim-text>a second service template comprising a revision of the first service template, wherein automated servicing of the distributed application is performed based on a differencing operation performed on the first service template and the second service template.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the first service template is re-useable and drives configuration of additional physical and virtual machines.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the distributed application is a multi-tiered application and wherein the first service template includes information regarding network connectivity between tiers of the multi-tiered application or wherein the first service template includes information concerning how health information of the distributed application is reported.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the differencing operation performed on the first service template and the second service template generates a list of actions comprising a customizable service plan.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein profiles comprising hardware and workload definitions of the first service template are re-useable and wherein machine tier templates of the first service template are re-useable.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the first service template is customizable.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the first service template drives automated deployment of a combination of physical and virtual machines for the distributed application.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. A method comprising:
<claim-text>in a programming environment executing on a software development or application management computer creating a set of models that describe a distributed service, wherein the set of models include profiles that define hardware and software portions of the distributed service, the profiles supplying portions of instructions that drive automated configuration of individual machines used to implement the distributed service;</claim-text>
<claim-text>combining the profiles into a machine tier template;</claim-text>
<claim-text>combining a plurality of machine tier templates to create a service template that describes how to create an instance of the distributed service;</claim-text>
<claim-text>creating a customized service template by configuring instance-specific aspects of the distributed service in the service template; and</claim-text>
<claim-text>based on the customized service template, automate configuration of machines that are deployed according to instructions in the customized service template.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The method of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein a workload profile describes configuration of an operating system deployed on the distributed service.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The method of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the machine tier template describes how to configure an individual machine and is used to configure multiple machines having substantially identical characteristics.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The method of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein a workload profile defines an application workload.</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The method of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein a workload profile drives automated deployment of the distributed service.</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The method of <claim-ref idref="CLM-00008">claim 8</claim-ref>, further comprising:
<claim-text>revising the service template to create the customized service template.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The method of <claim-ref idref="CLM-00013">claim 13</claim-ref>, further comprising:
<claim-text>performing a differencing operation to discover incremental changes needed to make a deployed distributed service comply with a revised service template wherein the differencing operation determines how to apply changes to the deployed distributed service to make the deployed distributed service comply with the revised service template.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. A computer-readable storage medium comprising computer-executable instructions which when executed cause at least one processor to:
<claim-text>perform automated deployment of a distributed service based on a model of the distributed service, wherein the model of the distributed service comprises a service template comprising a plurality of machine tier templates, wherein the plurality of machine tier templates comprise hardware and workload definitions for the distributed service;</claim-text>
<claim-text>customize the service template by configuring instance-specific aspects of the distributed service to create a customized service template; and</claim-text>
<claim-text>use the customized service template to drive an automated deployment of the distributed service, wherein an instance of the distributed service is configured based on the customized service template, the instance of the distributed service comprising at least one physical machine and at least one virtual machine.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The computer-readable storage medium of <claim-ref idref="CLM-00015">claim 15</claim-ref>, comprising further computer-executable instructions, which when executed cause the at least one processor to:
<claim-text>create a revised service template based on the customized service template by changing aspects of the customized service template to generate the revised service template.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The computer-readable storage medium of <claim-ref idref="CLM-00016">claim 16</claim-ref>, comprising further computer-executable instructions, which when executed cause the at least one processor to:
<claim-text>perform a differencing operation on the customized service template and the revised service template to determine a list of actions to be performed on the instance of the distributed service that was deployed to make the instance of the distributed service comply with the revised service template.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The computer-readable storage medium of <claim-ref idref="CLM-00016">claim 16</claim-ref>, comprising further computer-executable instructions, which when executed cause the at least one processor to:
<claim-text>perform a differencing operation on the customized service template and the revised service template to determine a list of actions to be performed on the instance of the distributed service that was deployed to make the instance of the distributed service comply with the revised service template; and</claim-text>
<claim-text>service the deployed instance of the distributed service using the list of actions.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. The computer-readable storage medium of <claim-ref idref="CLM-00016">claim 16</claim-ref>, comprising further computer-executable instructions, which when executed cause the at least one processor to:
<claim-text>perform a differencing operation on the customized service template and the revised service template to determine a list of actions to be performed on the instance of the distributed service that was deployed to make the instance of the distributed service comply with the revised service template; and</claim-text>
<claim-text>service the deployed instance of the distributed service by applying the list of actions using a customized workflow.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. The computer-readable storage medium of <claim-ref idref="CLM-00015">claim 15</claim-ref>, comprising further computer-executable instructions, which when executed cause the at least one processor to:
<claim-text>re-use the customized service template to create at least one additional physical machine or one additional virtual machine.</claim-text>
</claim-text>
</claim>
</claims>
</us-patent-grant>

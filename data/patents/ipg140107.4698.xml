<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08625788-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08625788</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>12984737</doc-number>
<date>20110105</date>
</document-id>
</application-reference>
<us-application-series-code>12</us-application-series-code>
<us-term-of-grant>
<us-term-extension>216</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20110101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>H</section>
<class>04</class>
<subclass>N</subclass>
<main-group>7</main-group>
<subgroup>167</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>380200</main-classification>
<further-classification>380277</further-classification>
<further-classification>380229</further-classification>
<further-classification>725 31</further-classification>
<further-classification>713193</further-classification>
</classification-national>
<invention-title id="d2e53">Method and apparatus for building a hardware root of trust and providing protected content processing within an open computing platform</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>6728379</doc-number>
<kind>B1</kind>
<name>Ishibashi et al.</name>
<date>20040400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>380278</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>7293178</doc-number>
<kind>B2</kind>
<name>Evans et al.</name>
<date>20071100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>713192</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>7702925</doc-number>
<kind>B2</kind>
<name>Northcutt et al.</name>
<date>20100400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>2002/0062445</doc-number>
<kind>A1</kind>
<name>Owada et al.</name>
<date>20020500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>2006/0242069</doc-number>
<kind>A1</kind>
<name>Peterka et al.</name>
<date>20061000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>705 50</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>2009/0060182</doc-number>
<kind>A1</kind>
<name>Killian et al.</name>
<date>20090300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>380201</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>2009/0172820</doc-number>
<kind>A1</kind>
<name>Watson</name>
<date>20090700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>2009/0245521</doc-number>
<kind>A1</kind>
<name>Vembu et al.</name>
<date>20091000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>WO</country>
<doc-number>2012/094196</doc-number>
<kind>A2</kind>
<date>20120700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00010">
<othercit>Brickell et al., &#x201c;Enhanced Privacy ID: A Direct Anonymous Attestation Scheme with Enhanced Revocation Capabilities,&#x201d; Aug. 17, 2007, Intel, all pages.</othercit>
</nplcit>
<category>cited by examiner</category>
</us-citation>
<us-citation>
<nplcit num="00011">
<othercit>International Search Report and Written Opinion received for PCT Patent Application No. PCT/US2011/067472, mailed on Aug. 22, 2012, 9 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00012">
<othercit>Brickell et al., &#x201c;Enhanced Privacy ID: A Direct Anonymous Attestation Scheme with Enhanced Revocation Capabilities&#x201d;, 6th Workshop on Privacy in the Electronic Society (WPES), Aug. 17, 2007, pp. 1-36.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00013">
<othercit>&#x201c;High-bandwidth Digital Content Protection System&#x201d;, HDCP Interface Independent Adaptation Specification, Digital Content Protection LLC, Revision 2.0, Oct. 23, 2008, pp. 1-58.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00014">
<othercit>&#x201c;High-bandwidth Digital Content Protection System&#x201d;, Digital Content Protection LLC, Revision 1.3, Dec. 21, 2006, pp. 1-90.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00015">
<othercit>&#x201c;Enhanced Privacy ID, A remote anonymous attestation scheme for hardware devices,&#x201d; available at http://www.drdobbs.com/security/enhanced-privacy-id/219501634, Sep. 8, 2009, 7 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00016">
<othercit>Krawczyk, Hugo, &#x201c;SIGMA: the &#x2018;SIGn-and-MAc&#x2019; Approach to Authenticated Diffe-Hellman and it's Use in the IKE Protocols,&#x201d; Jun. 12, 2003, 30 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00017">
<othercit>Brickell, Ernie, et al., &#x201c;Enhanced Privacy ID using Bilinear Pairing,&#x201d; NIST Identity Based Encryption Workshop, Jun. 2008, 8 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00018">
<othercit>Paral, Zdenek (Sid), et al., &#x201c;Reliable and Efficient PUF-Based Key Generation Using Pattern Matching,&#x201d; 6 pages, 2011.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00019">
<othercit>Brickell, Ernie, et al., &#x201c;Enhanced Privacy ID (EPID),&#x201d; 22 pages, 2011.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00020">
<othercit>International Preliminary Report on Patentability received for International Application No. PCT/US2011/067472, mailed on Jul. 18, 2013, 6 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>31</number-of-claims>
<us-exemplary-claim>22</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>None</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>5</number-of-drawing-sheets>
<number-of-figures>5</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20120173877</doc-number>
<kind>A1</kind>
<date>20120705</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Pendakur</last-name>
<first-name>Ramesh</first-name>
<address>
<city>Gaston</city>
<state>OR</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Gintz</last-name>
<first-name>Walter C.</first-name>
<address>
<city>Lake Oswego</city>
<state>OR</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="003" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Nemiroff</last-name>
<first-name>Daniel</first-name>
<address>
<city>Folsom</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="004" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Hazra</last-name>
<first-name>Mousumi M.</first-name>
<address>
<city>Beaverton</city>
<state>OR</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Pendakur</last-name>
<first-name>Ramesh</first-name>
<address>
<city>Gaston</city>
<state>OR</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Gintz</last-name>
<first-name>Walter C.</first-name>
<address>
<city>Lake Oswego</city>
<state>OR</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="003" designation="us-only">
<addressbook>
<last-name>Nemiroff</last-name>
<first-name>Daniel</first-name>
<address>
<city>Folsom</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="004" designation="us-only">
<addressbook>
<last-name>Hazra</last-name>
<first-name>Mousumi M.</first-name>
<address>
<city>Beaverton</city>
<state>OR</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Barnes &#x26; Thornburg LLP</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>Intel Corporation</orgname>
<role>02</role>
<address>
<city>Santa Clara</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Khoshnoodi</last-name>
<first-name>Nadia</first-name>
<department>2494</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">A system architecture provides a hardware-based root of trust solution for supporting distribution and playback of premium digital content. In an embodiment, hardware root of trust for digital content and services is a solution where the basis of trust for security purposes is rooted in hardware and firmware mechanisms in a client computing system, rather than in software. From this root of trust, the client computing system constructs an entire media processing pipeline that is protected for content authorization and playback. In embodiments of the present invention, the security of the client computing system for content processing is not dependent on the operating system (OS), basic input/output system (BIOS), media player application, or other host software.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="157.82mm" wi="237.41mm" file="US08625788-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="237.07mm" wi="145.46mm" orientation="landscape" file="US08625788-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="198.63mm" wi="169.84mm" file="US08625788-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="207.01mm" wi="172.38mm" file="US08625788-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="208.87mm" wi="130.05mm" file="US08625788-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="238.08mm" wi="156.72mm" orientation="landscape" file="US08625788-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">FIELD</heading>
<p id="p-0002" num="0001">The present disclosure generally relates to the field of computing system architectures for securely processing digital content. More particularly, an embodiment of the invention relates to building a hardware root of trust and protecting digital content processing end-to-end in a computing system.</p>
<heading id="h-0002" level="1">BACKGROUND</heading>
<p id="p-0003" num="0002">On open computing platforms, such as a personal computer (PC) system for example, when playing premium content (such as from a DVD, Blu-Ray, etc.), the digital rights management (DRM) processing and key management are typically performed in software by a media player application program. These schemes are not well protected and there have been instances of hacking, resulting in pirated content and loss of revenue to content owners. When content is played, even though the media decompression (such as H.264, MPEG-2, etc.) is done in hardware, the content is in the clear in system memory and can be stolen with software-based and/or hardware-based attacks. Due to these noted security weaknesses, only lower fidelity (such as standard definition (SD)) content or less valuable high definition (HD) content is typically distributed to open computing platforms. Improvements to the secure handling of digital content by open computing platforms (such as a PC, for example) are desired.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0004" num="0003">The detailed description is provided with reference to the accompanying figures. The use of the same reference numbers in different figures indicates similar or identical items.</p>
<p id="p-0005" num="0004"><figref idref="DRAWINGS">FIG. 1</figref> is a diagram of a secure content processing pipeline according to an embodiment of the present invention.</p>
<p id="p-0006" num="0005"><figref idref="DRAWINGS">FIG. 2</figref> is a diagram of a service provider server and security services infrastructure according to an embodiment of the present invention.</p>
<p id="p-0007" num="0006"><figref idref="DRAWINGS">FIG. 3</figref> is a diagram of a client computing system according to an embodiment of the present invention.</p>
<p id="p-0008" num="0007"><figref idref="DRAWINGS">FIG. 4</figref> is a flow diagram of secure content processing according to an embodiment of the present invention.</p>
<p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. 5</figref> is a diagram of a secure content processing system according to an embodiment of the present invention.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0004" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0010" num="0009">Embodiments of the present invention comprise a system architecture that provides a hardware-based root of trust (HW ROT) solution for supporting distribution and playback of premium digital content. In an embodiment, HW ROT for digital content and services is a solution where the basis of trust for security purposes is rooted in hardware and firmware mechanisms in a client computing system, rather than in software. From this root of trust, the client computing system constructs an entire media processing pipeline that is protected for content authorization and playback. In embodiments of the present invention, the security of the client computing system for content processing is not dependent on the operating system (OS), basic input/output system (BIOS), media player application, or other host software. In order to compromise the system, one will need to compromise the hardware and/or firmware mechanisms, as opposed to attacking the software running on top of the OS.</p>
<p id="p-0011" num="0010">In the following description, numerous specific details are set forth in order to provide a thorough understanding of various embodiments. However, various embodiments of the invention may be practiced without the specific details. In other instances, well-known methods, procedures, components, and circuits have not been described in detail so as not to obscure the particular embodiments of the invention. Further, various aspects of embodiments of the invention may be performed using various means, such as integrated semiconductor circuits (&#x201c;hardware&#x201d;), computer-readable instructions organized into one or more programs stored on a computer readable storage medium (&#x201c;software&#x201d;), or some combination of hardware and software. For the purposes of this disclosure reference to &#x201c;logic&#x201d; shall mean hardware, software (including for example micro-code that controls the operations of a processor), firmware, or some combination thereof.</p>
<p id="p-0012" num="0011">Embodiments of the present invention protect content protection processing, key management processing, and content playback by using firmware and hardware in the CPU, chipset and integrated graphics/media engine of a client computing system <b>101</b> to perform these functions. Embodiments of the present invention provide end-to-end protection of the content as the content is processed by components within a computing system. <figref idref="DRAWINGS">FIG. 1</figref> is a diagram of a secure content processing pipeline <b>100</b> according to an embodiment of the present invention. Content <b>102</b> may be accessible by a service provider (SP) server <b>104</b>. Content <b>102</b> may be any digital information, such as audio, video, or audio/video data, images, text, books, magazines, games, or application programs. Service provider server <b>104</b> may include one or more servers for providing the content to a client computing system over any telecommunications channel (such as the Internet, cellular networks, wired or wireless networks, etc.). Content may be protected by any known content protection technology <b>106</b> (e.g., digital rights management (DRM) technology, cryptographic techniques, etc.) while stored in the SP server and during transfer to the client computing system <b>101</b>. In one embodiment, the content may be protected by the Enhanced Privacy ID (EPID) signature verification protocol as discussed herein. In one embodiment, video data may be encrypted using the Advanced Encryption Standard (AES) cryptographic processing with CTR mode. The client computing system <b>101</b> may be a PC, laptop, netbook, tablet computer, handheld computer, smart phone, personal digital assistant (PDA), set top box, consumer electronics equipment, or any other computing device capable of receiving, storing and rendering content.</p>
<p id="p-0013" num="0012">Within the client computing system, content protection processing <b>110</b> may be performed by a Security Processor <b>108</b>. In one embodiment, the security processor may be within a chipset of the client computing system. In an embodiment, the chipset comprises a platform control hub (PCH). In another embodiment, the Security Processor may be within the CPU of the client computing system. In another embodiment having a system-on-chip (SOC) configuration, the Security Processor may be integral with other system components on a single chip. In one embodiment, the security processor comprises a Manageability Engine (ME). In other embodiments, other types of security processors may be used. The Security Processor is a subsystem implemented in hardware and firmware that interacts with other components of the client computing system. The Security Processor operates by loading firmware code from a protected flash memory region and executing the firmware code in protected memory. Since the content protection processing is performed in hardware and firmware within the Security Processor, protection of the content may be improved over software-based systems.</p>
<p id="p-0014" num="0013">Cryptographic key information may be sent from the security processor over a protected chip to chip interconnect <b>112</b> to a component containing a central processing unit (CPU) and an integrated graphics (GFX)/media engine. In an embodiment, the protected chip to chip interconnect <b>112</b> comprises a secure Direct Media Interface (DMI) communications link to the CPU/GFX component. DMI comprises a chip-to-chip interconnect with two unidirectional lanes of concurrent data traffic, and isochronous transfer with improved quality of service. Data transferred over the DMI link may be protected by known cryptographic processing techniques. In an embodiment, the chip-to-chip secure link may be used for passing encrypted title keys over the DMI. Security is based on a shared secret between the PCH and the CPU. This shared secret may be established on each power cycle and can vary between families of products, generations and random groupings as needed to ensure protection and integrity of the shared secret. The DMI mechanism is independent of the OS, the BIOS, and software running on the CPU. The DMI mechanism may be used to create a trust relationship between the security processor (in the PCH) and the CPU.</p>
<p id="p-0015" num="0014">The GFX engine <b>114</b> may include content protection processing to decrypt the content. The GFX engine also includes decoder logic <b>121</b> to process/decode the decrypted audio/video content and pass the audio/video content as media blocks to a graphics processing unit (GPU) within the GFX engine <b>114</b>. The GPU includes security techniques, including using encoder logic <b>123</b>, to protect the media blocks during processing in memory. GFX engine <b>114</b> also includes composition logic <b>125</b> to compose the image data to be shown on display <b>118</b>. As the content is being handled within and between the security processor in the PCH and the GFX engine in the CPU/GFX component, the content may be protected by a hardware protected data path <b>116</b>. In an embodiment, the hardware protected data path comprises a Protected Audio Video Path (PAVP) to maintain the security of the content. PAVP also supports an encrypted connection state between system components. By using the PAVP, the system may further protect the content during transfer between system components and within memory.</p>
<p id="p-0016" num="0015">The interface between the GFX engine, the PCH, and the display <b>118</b> may be implemented by protected wired/wireless display links <b>120</b>. In one embodiment, display data sent from the GFX engine via a memory through the PCH to the display may be protected by a High-Bandwidth Digital Content Protection (HDCP) content protection scheme. The HDCP specification provides a robust, cost-effective and transparent method for transmitting and receiving digital entertainment content to compliant digital displays. In an embodiment, the wired link may be implemented according to the HDCP Specification, Revision 2.0, available from Digital Content Protection, LLC, or subsequent revisions. HDCP may be employed to deter copying of the display data as the data travels over a DisplayPort, Digital Visual Interface (DVI), High-Definition Multimedia Interface (HDMI), Gigabit Video Interface (GVIF), or a Unified Display Interface (UDI) connection. The HDCP revision 2.0 specification addresses emerging usage models that let end users conveniently connect displays, devices and home theater systems via standard protocols and interfaces like TCP/IP, USB, Wi-Fi and WirelessHD. The HDCP revision 2.0 specification uses standards-based RSA public key and Advanced Encryption Standard (AES) 128-bit encryption for robust content protection. In an HDCP system, two or more HDCP devices are interconnected through an HDCP-protected interface. The audiovisual content protected by HDCP flows from the Upstream Content Control Function into the HDCP system at the most upstream HDCP Transmitter. From there, the HDCP content, encrypted by the HDCP system, flows through a tree-shaped topology of HDCP receivers over HDCP-protected interfaces.</p>
<p id="p-0017" num="0016">The HDCP content protection mechanism includes three elements: 1) Authentication of HDCP receivers to their immediate upstream connection (to an HDCP transmitter). The authentication protocol is the mechanism through which the HDCP transmitter verifies that a given HDCP Receiver is licensed to receive HDCP. 2) Revocation of HDCP receivers that are determined by the DCP to be invalid. 3) HDCP encryption of audiovisual content over the HDCP-protected interfaces between HDCP transmitters and their downstream HDCP receivers. HDCP receivers may render the HDCP content in audio and visual form for human consumption. HDCP receivers may be HDCP repeaters that serve as downstream HDCP transmitters emitting the HDCP content further downstream to one or more additional HDCP receivers. In one embodiment, display data sent to the display <b>118</b> may be sent over a protected wireless display (WiDi) link <b>127</b> using 802.11n wireless local area network (WLAN) technology.</p>
<p id="p-0018" num="0017">As can be seen from <figref idref="DRAWINGS">FIG. 1</figref>, in embodiments of the present invention, from the time the content is received from the service provider server <b>104</b> until the content is displayed on the display <b>118</b>, no cryptographic key or content is available in unencrypted form to any software or unauthorized hardware running on the computing system. Further, memory protection for video data is offered over the whole chain across the decrypt, decode/encode, compose and display pipelines. This capability is offered at the full memory bandwidth without compromising overall system performance.</p>
<p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. 2</figref> is a diagram of a service provider server <b>104</b> and a security services component <b>202</b> according to an embodiment of the present invention. In an embodiment, security services component <b>202</b> may comprise one or more servers and/or components. In an embodiment, the security services component may be operated by the manufacturer of one or more components of the client computing system. The security services component provides capabilities for controlling client computing systems in the field. The security services component comprises a manufacturing component and a deployment component. The manufacturing component includes a certificate issuance component <b>218</b>, a key generation (Key Gen) component <b>220</b>, and a fuse programming (Fuse Prog) component <b>222</b>. Certificate issuance <b>218</b> generates and issues public key certificates to each of the client computing platforms. Key Gen <b>220</b> is responsible for generating the private and public key pairs as needed for embedding into the client computing platforms. Fuse programming <b>222</b> is responsible for programming the fuses on the manufacturing floor with appropriate values in a robust and secure manner. These values would be used by the client computing platform to build up the trust anchors and key ladders inside the security processor.</p>
<p id="p-0020" num="0019">The deployment component includes a certificate issuance component <b>204</b>, a key generation (Key Gen) component <b>206</b>, and a revocation manager <b>208</b>. Certificate (Cert) issuance component <b>204</b> issues a digital certificate for the SP Server and Client components giving them the authorization to interact with such client systems for service deployment. Key generation (Key Gen) component <b>206</b> generates a cryptographic signing key pair, a root key pair, digital certificates, and group public keys, and signs the group public keys for each group. Revocation manager <b>208</b> determines identifiers and signatures of client computing systems to be added to a revocation list (RL), updates the RL, and distributes updated RLs.</p>
<p id="p-0021" num="0020">The SP server <b>104</b> communicates over network <b>201</b> (such as the Internet) with the client computing system. The service provider server comprises a SP server application <b>212</b> and a SP server agent <b>210</b>. The SP server application provides content browsing capabilities. The SP server agent <b>210</b> controls the sending of client specific messages, manages cryptographic keys and authorized user tokens, and maintains content delivery service status (for deployment purposes <b>212</b> and <b>210</b> could be physically different servers firewalled and separated). Content encrypter <b>214</b> accepts content <b>102</b> and encrypts the content for secure delivery to a client computing system. Content server <b>216</b> sends the encrypted content to the client. Key server <b>226</b> is responsible for provisioning the title keys to the client computing systems within an authenticated session. Server certificate <b>224</b> is used by the SP server agent to participate in mutual authentication and establishment of the authenticated session with the client computing systems. Communications links between SP server agent <b>210</b>, key server <b>226</b>, and content server <b>216</b> are protected by well accepted information security practices. The key server has the highest network and access protection to ensure only authorized parties are able to reach it and the keys managed by the key server are isolated and firewalled from attackers from outside network entities. The SP server agent or the key server has access to the private key associated with the server certificate <b>224</b>. In an embodiment, this private key and all operations done with this private key are protected using a hardware security module (HSM) (not shown in <figref idref="DRAWINGS">FIG. 2</figref>) on the server.</p>
<p id="p-0022" num="0021">In an embodiment, the cryptographic scheme used to authenticate the client computing system with the SP server comprises a cryptographic authentication protocol protecting a user's privacy based on the use of zero-knowledge proofs. In an embodiment, the cryptographic authentication protocol comprises the Enhanced Privacy ID (EPID) scheme, a Direct Anonymous Attestation (DAA) scheme with enhanced revocation capabilities. EPID mitigates the privacy issues of common Rivest, Shamir, Adleman (RSA)&#x2014;public key infrastructure (PKI) security implementations where every individual is uniquely identified for each transaction. Instead, EPID provides the capability of remote attestation but only identifies the client computing system as having a component (such as a chipset) from a particular technology generation. EPID is a group signature scheme, where one group's public key corresponds to multiple private keys, and private keys generate a group signature which is verified by the group public key. EPID provides the security property of being anonymous and unlinkable&#x2014;given two signatures, one cannot determine whether the signatures are generated from one or two private keys. EPID also provides the security property of being unforgeable&#x2014;without a private key, one cannot create a valid signature.</p>
<p id="p-0023" num="0022">Generally, setting up a secure communications channel with EPID may be accomplished as follows. A first party (such as the client computing system) sends an EPID certificate to a second party (such as the service provider server). Never knowing the identity of the first party and only knowing the first party is a computing platform with a trusted security processor, the second party authenticates the first party. The first party then authenticates the second party using the second party's public key certificate. Since the second party doesn't require privacy, the second party's public key certificate may not be an EPID certificate (but it could be). The parties may then enter into a Diffie-Hellman (DH) key exchange agreement.</p>
<p id="p-0024" num="0023">Various suitable embodiments of DAA and EPID are described in the following co-patent applications, incorporated herein by reference: &#x201c;An Apparatus and Method of Direct Anonymous Attestation from Bilinear Maps,&#x201d; by Ernest F. Brickell and Jingtao Li, Ser. No. 11/778,804, filed Jul. 7, 2007; &#x201c;An Apparatus and Method for a Direct Anonymous Attestation Scheme from Short-Group Signatures,&#x201d; by Ernest F. Brickell and Jingtao Li, Ser. No. 12/208,989, filed Sep. 11, 2008; and &#x201c;Direct Anonymous Attestation Scheme with Outsourcing Capability,&#x201d; by Ernest F. Brickell and Jingtao Li, Ser. No. 12/286,303, filed Sep. 29, 2008. In other embodiments, other authentication and attestation schemes may also be used.</p>
<p id="p-0025" num="0024">The client computing system comprises at least three main components&#x2014;host software, chipset hardware/firmware, and the CPU/GFX/Media engines. It is assumed in embodiments of the present invention that the host software is untrusted. Even if the host software gets attacked, no secrets will be compromised. Host software is responsible for network connection to SP server <b>104</b> and downloading media from content server <b>216</b>. Host software acts as a proxy between various SP servers and the chipset hardware/firmware. Host software sends encrypted content directly to the graphics hardware after the chipset hardware/firmware has completed title key unwrap and injection into the CPU/GFX component.</p>
<p id="p-0026" num="0025">Chipset hardware/firmware is responsible for all protected processing, taking the role of the protected device for content protection processing. In an embodiment, the chipset hardware/firmware sends protected title keys to the graphics hardware using the DMI mechanism.</p>
<p id="p-0027" num="0026">The CPU/GFX component is responsible for final stream decryption, decode and display. The GFX engine is a passive device, making no policy decisions. When asked, the GFX engine simply decrypts the content, then decodes the submitted video slices. In an embodiment, the GFX engine (with protected media encoders) re-encrypts the display content for HDCP output protection over HDMI and wireless (e.g., WiDi) displays.</p>
<p id="p-0028" num="0027">A protected client computing system must be remotely identified by a service provider before sending highly sensitive information. The mechanism used to identify the platform must not violate user privacy. Embodiments of the present invention provide a protected mechanism for a service provider to verify over the network that the service provider server is communicating to a suitable client computing system and transfer title keys and other confidential material to that client computing system. In one embodiment, the protocol utilized to establish a protected session between the service provider server and the client computing system is EPID. EPID allows for a single public key to anonymously verify the signature generated by N-private keys in what is called an EPID group. To implement EPID, each chipset contains a unique private key blown into the platform control hub (PCH) fuses during silicon manufacturing. In an embodiment, the chipset manufacturer places 1,000,000 private keys in a single group and produces 400 groups for each chipset produced. In order to act as the EPID verifier, each service provider will be provisioned with these 400 public keys.</p>
<p id="p-0029" num="0028">Once a protected EPID session has been established, the service provider server is free to exchange protected confidential information with the protected client computing system. For content streaming, protected title keys may be passed from an SP server to the security processor in the chipset. The security processor sends the protected title keys to the graphics and audio hardware. At this point, encrypted video and audio content can be directly sent from a content server <b>216</b> to client computing system graphics and audio hardware which decrypts, decodes, and displays the content. For downloading content, the security processor binds the title keys to the client computing system using a unique platform storage key (again burned into PCH fuses during manufacturing) and returns the bound keys to media player software. When playback is desired, the bound title keys are re-submitted to the security processor, which unbinds and sends them in a protected manner to the graphics and audio hardware.</p>
<p id="p-0030" num="0029"><figref idref="DRAWINGS">FIG. 3</figref> is a diagram of a client computing system <b>101</b> according to an embodiment of the present invention. A service provider (SP) player/media browser software application <b>302</b> may be included in the software stack to interface with the SP server <b>104</b> over a network <b>201</b> such as the Internet. The SP player/media browser <b>302</b> allows a user to browse content offerings of the service provider and to select content to be delivered from the SP server to the client computing system. The SP player/media browser provides user interface controls for the user to manage a content library and to control the selection, downloading, and playback of content. The SP player/media browser interacts with service agent <b>304</b>. Service agent <b>304</b> comprises a software application provided by a service provider that is authorized to access the features of the client computing system supporting end-to-end content protection according to embodiments of the present invention. The service agent interfaces with various SP player/media browser application programming interfaces (APIs) (not shown in <figref idref="DRAWINGS">FIG. 2</figref>). Service agent <b>304</b> comprises a media player component <b>306</b>. The media player provides the content player functionality (e.g., controlling playback).</p>
<p id="p-0031" num="0030">SP client application <b>308</b> enables the SP player/media browser <b>302</b> and the service agent <b>304</b> to access content protection features on the client computing system's hardware and firmware and for relaying messages to the service provider server <b>104</b>. In an embodiment, the SP client application comprises a host agent software development kit (SDK) including content protection APIs. In an embodiment, the SP client application communicates with the security processor <b>314</b> in the platform control hub (PCH) <b>312</b> of the chipset.</p>
<p id="p-0032" num="0031">Audio driver <b>311</b> provides an interface between the media player and audio decrypt hardware <b>316</b>. Similarly, graphics (GFX) driver <b>310</b> provides an interface between the media player and the GFX engine <b>320</b>. In an embodiment, the PCH <b>312</b> comprises security processor <b>314</b>, which executes firmware to provide content protection functionality, along with other well known system functions. In an embodiment, the security processor may be implemented by a Manageability Engine (ME). As content is handled by the PCH <b>312</b> and the GFX engine <b>320</b>, the content may be protected at least in part by Protected Audio Video Path (PAVP) components <b>318</b>, <b>322</b> in the PCH hardware/firmware and GFX engine hardware, respectively.</p>
<p id="p-0033" num="0032"><figref idref="DRAWINGS">FIG. 4</figref> is a flow diagram of secure content processing according to an embodiment of the present invention. At block <b>402</b>, a user of the client computing system uses SP player/media browser <b>302</b> to browse, discover, and purchase content from one or more service providers. At block <b>404</b>, mutual authentication of the SP Server <b>104</b> and the client computing platform <b>101</b> is performed. An authenticated session is established. Key blobs with usage rights for a given set of content are provisioned. The key blobs are bound to the client computing system to ensure that the system is both confidentiality and integrity protected as necessary.</p>
<p id="p-0034" num="0033">The client computing system then gets the encrypted content at block <b>406</b> from content server <b>216</b> over network <b>201</b> (for streaming operations) or from local storage on the client computing system (for content previously purchased, downloaded, and stored). The system is prepared to work on video slices (e.g., sub-frame). As a result, the hardware can process the data as soon as the first slice of data is submitted.</p>
<p id="p-0035" num="0034">At block <b>408</b>, the user initiates playback of the selected content using the SP player/media browser <b>302</b>. The key blob is submitted to the security processor <b>314</b> for unpacking and extracting of the title key. When that is done, the title key is loaded by the security processor into the graphics hardware <b>320</b> for decryption. The SP player/media browser submits the encrypted content to the media processing engine within GFX engine <b>320</b> at block <b>410</b>. The GFX engine decrypts the content using the title keys and re-encrypts the content using a local protected key. Re-encrypted data may be stored in protected local or system memory. The re-encrypted content is subsequently obtained, decrypted, and decompressed at block <b>414</b>. The decrypt is performed first. Once the data is decrypted, the data is decoded/decompressed. Once the data is decompressed, the data is re-encrypted and passed to the composition engine via the system memory. Once the composition is finished, the data is again protected and passed using system memory to the display engine. In an embodiment, each component along the way has the ability to decrypt, process and re-encrypt as necessary.</p>
<p id="p-0036" num="0035">At block <b>416</b>, the GFX engine re-encrypts the media content using HDCP technology (in an embodiment) and delivers the content to the display for viewing by the user. At each step of the process, the content is never in the clear where it is accessible by software or unauthorized hardware components running on the client computing system.</p>
<p id="p-0037" num="0036"><figref idref="DRAWINGS">FIG. 5</figref> is a diagram of a secure content processing system according to an embodiment of the present invention. A SP server <b>104</b> interacts over network <b>201</b> to client computing system <b>101</b>. Client computing system comprises first <b>500</b> and second components <b>502</b>. In an embodiment, the first component comprises a CPU and GFX component, and the second component comprises a platform control hub (PCH). In another embodiment, the first and second components may be combined into a single component in a system-on-a-chip (SOC) implementation. First component <b>500</b> includes a plurality of processor cores <b>504</b>, and GFX engine <b>320</b>. Processor cores <b>504</b> execute various components of host software (SW) <b>506</b> (as described in <figref idref="DRAWINGS">FIG. 3</figref>), a client certificate <b>508</b>, fuses <b>521</b>, and a shared secret <b>519</b>. Host SW reads data, including encrypted content previously obtained from a SP server or tangible media (such as a DVD, Blu-Ray, or other storage technology), from hard disk drive (HDD)/solid state drive (SSD) <b>510</b>. In an embodiment, Host SW comprises at least a SP player/media browser application <b>302</b>, a service agent <b>304</b>, and a SP client application <b>308</b>.</p>
<p id="p-0038" num="0037">GFX engine <b>320</b> comprises a plurality of components. Media encrypt/decrypt engine <b>520</b> comprises logic to encrypt and decrypt content. Media encode/decode engine <b>522</b> comprises logic to encode and decode content. GFX Composition (Comp) engine <b>524</b> comprises logic to construct display images. Display engine <b>526</b> comprises logic to pass the composed display images to the display. Display encrypt/decrypt engine <b>528</b> comprises logic to encrypt and decrypt display data prior to sending the display data to display <b>538</b> over protected link <b>527</b>. Memory encrypt/decrypt engine <b>530</b> comprises logic to encrypt and decrypt data stored in protected intermediate surfaces <b>534</b> in memory <b>536</b>. Memory <b>536</b> also includes logic to implement confidentiality and integrity protected memory operations <b>532</b>.</p>
<p id="p-0039" num="0038">Second component <b>502</b> comprises a plurality of components, some of which are not shown in order to simplify <figref idref="DRAWINGS">FIG. 5</figref>. Second component comprises a security processor <b>314</b>. Security processor includes firmware and/or hardware logic to provide attestation, provisioning key management, and output control operations <b>516</b> for the client computing system. Security processor also includes fuses <b>517</b>, shared secret <b>519</b>, and trust anchors <b>518</b> for supporting a PKI such as verification keys and key hierarchy information. Fuses <b>521</b>, <b>517</b> are programmed into the hardware of the first and second components during manufacturing of the chipset with key material for EPID use. The hardware root of trust is built up from the information programmed into the fuses on the manufacturing floor when the client computing system is manufactured. This ensures that each individual client computing system is unique, yet privacy protected. Shared secret <b>519</b> is hard-coded into the hardware of the first and second components during manufacturing of the chipset and CPU/GFX components. In an embodiment, the shared secret may be used in setting up the secure chip to chip communications channel over the DMI link <b>538</b>.</p>
<p id="p-0040" num="0039">Client computing system also includes a protected real time clock <b>513</b> for providing secure clock services, a display <b>538</b>, and a non-volatile memory (NVM) <b>512</b>. In an embodiment, the protected real-time clock may be seeded by a third party, and may be virtualized for multiple service providers. The NVM may be used to store the firmware image for the second component, as well as to store temporary data (such as integrity and state information) for security processor processing operations.</p>
<p id="p-0041" num="0040">In an embodiment, a processing flow may be described as follows. SP player/media browser <b>302</b> presents a user interface to the user. The user goes to the service provider's web site to browse available content. The SP web site has an auto detection capability to determine if the user's client computing system has integrated within it the capability of authenticating with the SP server <b>104</b>. If capable, the user ias allowed to choose content. The content may be bought, rented, or subscribed to, or may be streamed. The user pays for the content. SP player/media browser <b>302</b> invokes security processor <b>316</b> to authenticate the client computing system <b>101</b> with the SP server <b>104</b>. In an embodiment, the authentication uses EPID technology. The client computing system <b>101</b> is authenticated at least in part by having the SP server <b>104</b> verify the client computing system's certificate <b>508</b>, perform a revocation check, and verify a certification path to a certificate authority (using the EPID protocol in one embodiment). When both the client computing system <b>101</b> and the SP server <b>104</b> are authenticated, a secure communications channel may be set up based on the EPID protocol in one embodiment. In an embodiment, once the secure communication channel is set up, a command set may be used for end to end content protection capabilities.</p>
<p id="p-0042" num="0041">The SP Server <b>104</b> provisions an encrypted title key to the client computing system, with constraints on usage of the content (e.g., time). The SP server sends the encrypted title key over the secure channel to security processor <b>314</b>. Security processor <b>314</b> decrypts the encrypted title key, using its own key hierarchy. Security processor <b>314</b> uses a storage key to re-encrypt the newly decrypted title key to form a key blob. The key blob is bound to the client computing system for a specified time period. Security processor <b>314</b> sends the key blob to SP player/media browser <b>302</b> running in the CPU core. SP player/media browser <b>302</b> stores the key blob in HDD/SSD <b>510</b>. SP player/media browser <b>302</b> then downloads the user-selected encrypted content. In one embodiment, the downloaded encrypted content may be stored in the HDD/SSD <b>510</b>.</p>
<p id="p-0043" num="0042">When a user wants to play the content, the SP player/media browser <b>302</b> submits the key blob back to the security processor <b>314</b>. The security processor verifies the signature of the key blob, and checks usage constraints such as time, for example. The security processor <b>314</b> sends the encrypted title key over the encrypted channel (e.g., DMI link <b>538</b>) to the media encrypt/decrypt component <b>520</b> of the GFX engine <b>320</b>. The security processor instructs the SP player/media browser that the GFX/media engine is ready to process the encrypted content. The SP player/media browser <b>302</b> reads the encrypted content from the HDD/SDD <b>510</b>, or obtains the encrypted content from the SP server <b>104</b> over the network <b>201</b> (for a streaming application), and sends the encrypted content to the GFX engine slice by slice.</p>
<p id="p-0044" num="0043">The GFX engine <b>320</b> processes the encrypted content in a slice by slice manner. For each slice, the SP player/media browser reads the slice headers in the clear. The rest of the slice is encrypted so that the SP player/media browser cannot access the content. The SP player/media browser keeps track of playback state information using an initialization vector. The media encrypt/decrypt engine <b>520</b> decrypts the content using the title key, after decrypting the encrypted title key received from the security processor. In one embodiment, the output data of the media encrypt/decrypt engine is still compressed according to the well-known H.264 encoding scheme. In other embodiments, other encoding schemes may be used. The media encode/decode engine <b>522</b> decodes each slice and then re-encrypts the slice using memory encrypt/decrypt <b>530</b>. The re-encrypted content slice is stored in protected intermediate surfaces <b>534</b> in memory <b>536</b>. GFX composition engine <b>524</b> controls the composition of the image to be displayed on the display, including the foreground and background images, windows, etc. The GFX composition engine obtains the re-encrypted content slices from protected intermediate surfaces <b>534</b> in memory <b>536</b> to generate the composed image. The GFX composition engine <b>524</b> sends the composed image data to the display engine <b>526</b>.</p>
<p id="p-0045" num="0044">The display engine uses display encrypt/decrypt engine <b>528</b> to decrypt the composed image from the encryption that was used to store the content slices in memory <b>536</b>. The display engine <b>526</b> uses the display encrypt/decrypt engine to re-encrypt the composed image data according to the HDCP technology, in one embodiment. The encrypted composed image data is sent by the GFX engine <b>320</b> over the protected chip to chip data interface (e.g., DMI link) <b>538</b> to the second component <b>502</b>, for transfer to the display <b>538</b> over protected display interface link <b>527</b>.</p>
<p id="p-0046" num="0045">In an embodiment, there can be any number of concurrent, independent content streams being processed by the client computing system. Each content stream has its own cryptographic context so as not to interfere with other streams. This also allows for the client computing system to ensure that any kind of attack or compromise on one stream does not affect the other content streams.</p>
<p id="p-0047" num="0046">Embodiments of the present invention support the following usage models:</p>
<p id="p-0048" num="0047">1. Downloading of high definition (HD)/standard definition (SD)/Portable Definition (PD) content titles. The service providers distribute the content in the right format for a given client computing system. Users are able to opt for an electronic copy of a content title instead of obtaining physical optical discs (such as DVD or Blu-Ray discs).</p>
<p id="p-0049" num="0048">2. Streaming of HD/SD/PD content titles. The service providers are able to setup a session and stream the content to a client computing system as needed. The client computing system stays connected to the service for the entire period of the content consuming experience.</p>
<p id="p-0050" num="0049">3. Rental of HD/SD/PD content titles. The service providers are able to rent titles to consumers on an on-demand basis for a set time period. The protection and policy enforcement is done by an embodiment of the present invention.</p>
<p id="p-0051" num="0050">4. Time-based unlocking of content titles. The service providers are able to push content to client computing systems ahead of the content release date or availability schedule and have the client computing system unlock the title for use at a given time in the future.</p>
<p id="p-0052" num="0051">5. User's constellation of devices and easy sharing. Embodiments of the present invention provide for a &#x201c;domain&#x201d; of client computing systems for a given user. This enables the content to freely flow between these authorized devices within the user's domain.</p>
<p id="p-0053" num="0052">6. Offline transactions. Embodiments of the present invention provide for the ability to record a transaction for later reconciliation. This allows the service providers to preload or speculatively distribute content to client computing systems and have them complete a transaction whether they are connected to the Internet or not.</p>
<p id="p-0054" num="0053">Reference in the specification to &#x201c;one embodiment&#x201d; or &#x201c;an embodiment&#x201d; means that a particular feature, structure, or characteristic described in connection with the embodiment may be included in at least an implementation. The appearances of the phrase &#x201c;in one embodiment&#x201d; in various places in the specification may or may not be all referring to the same embodiment.</p>
<p id="p-0055" num="0054">Also, in the description and claims, the terms &#x201c;coupled&#x201d; and &#x201c;connected,&#x201d; along with their derivatives, may be used. In some embodiments of the invention, &#x201c;connected&#x201d; may be used to indicate that two or more elements are in direct physical or electrical contact with each other. &#x201c;Coupled&#x201d; may mean that two or more elements are in direct physical or electrical contact. However, &#x201c;coupled&#x201d; may also mean that two or more elements may not be in direct contact with each other, but may still cooperate or interact with each other.</p>
<p id="p-0056" num="0055">Thus, although embodiments of the invention have been described in language specific to structural features and/or methodological acts, it is to be understood that claimed subject matter may not be limited to the specific features or acts described. Rather, the specific features and acts are disclosed as sample forms of implementing the claimed subject matter.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>The invention claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A method of processing content in a client computing device, content including one or more simultaneous protected content streams with distinct security properties and keying material, comprising:
<claim-text>establishing, with a security processor of the client computing device, a hardware-based root of trust between the client computing device and a service provider server;</claim-text>
<claim-text>receiving, with the client computing device and from the service provider server, an encrypted title key associated with encrypted content of the service provider server;</claim-text>
<claim-text>decrypting, with the security processor, the encrypted title key received from the service provider server;</claim-text>
<claim-text>encrypting, with the security processor, the decrypted title key with a storage key to form a key blob;</claim-text>
<claim-text>transmitting the key blob from the security processor to a central processor of the client computing device for storage in memory of the client computing device in response to encrypting the decrypted title key;</claim-text>
<claim-text>receiving, with the security processor, the key blob from the central processor in response to a request from a user of the client computing device to execute the encrypted content;</claim-text>
<claim-text>transmitting, with the security processor, the key blob to a graphics engine of the client computing device over a hardware-protected data path;</claim-text>
<claim-text>receiving, with the graphics engine, at least one slice of the encrypted content;</claim-text>
<claim-text>decrypting, with the graphics engine, the key blob using the storage key received from the security processor;</claim-text>
<claim-text>decrypting, on the graphics engine, the at least one slice of the encrypted content using the title key of the decrypted key blob;</claim-text>
<claim-text>encrypting, on the graphics engine, the at least one decrypted content slice to generate one or more re-encrypted content slices;</claim-text>
<claim-text>generating, on the graphics engine, composed image data based on the re-encrypted content slices in response to encrypting the at least one decrypted content slice;</claim-text>
<claim-text>transmitting, from the graphics engine, the composed image data to the security processor over the hardware-protected data path; and</claim-text>
<claim-text>transmitting, from the security processor, the composed image data to a display over a protected display interface link.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein encrypting the decrypted title key to form the key blob comprises binding the key blob to the client computing device.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein establishing the hardware-based root of trust comprises performing a cryptographic authentication protocol protecting the user's privacy based on the use of zero-knowledge proofs.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method of <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein performing the cryptographic authentication protocol comprises performing an Enhanced Privacy ID (EPID) authentication protocol.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method of <claim-ref idref="CLM-00003">claim 3</claim-ref>, further comprising establishing a secure communications channel between the security processor and the hardware-based root of trust in the client computing device and the service provider server based on the cryptographic authentication protocol.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising receiving, with the client computing device and from the service provider server, constraints on usage of the encrypted content.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The method of <claim-ref idref="CLM-00006">claim 6</claim-ref>, further comprising verifying, on the security processor, a signature of the key blob and the constraints on usage of the encrypted content in response to receiving the key blob from the central processor.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The method of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein verifying the constraints comprises identifying the key blob as bound to the client computing device for a specified time period.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the content comprises a plurality of concurrent, independent content streams, each content stream having a distinct cryptographic context.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein receiving the at least one slice of the encrypted content comprises receiving at least one slice of the encrypted content in which a header of each slice is unencrypted.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising decoding, on the graphics engine, the at least one decrypted content slice, wherein encrypting the at least one decrypted content slice to generate one or more re-encrypted content slices is in response to decoding the at least one decrypted content slice.</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. One or more non-transitory machine-readable storage media comprising a plurality of instructions stored thereon that, in response to execution, cause a computing device to:
<claim-text>establish, with a security processor of the computing device, a hardware-based root of trust between the computing device and a service provider server;</claim-text>
<claim-text>receive, from the service provider server, an encrypted title key associated with encrypted content of the service provider server;</claim-text>
<claim-text>decrypt, with the security processor, the encrypted title key received from the service provider server;</claim-text>
<claim-text>encrypt, with the security processor, the decrypted title key with a storage key to form a key blob;</claim-text>
<claim-text>transmit the key blob from the security processor to a central processor of the computing device for storage in memory of the computing device in response to encryption of the decrypted title key;</claim-text>
<claim-text>receive, with the security processor, the key blob from the central processor in response to a request from a user of the computing device to execute the encrypted content;</claim-text>
<claim-text>transmit, with the security processor, the key blob to a graphics engine of the computing device over a hardware-protected data path;</claim-text>
<claim-text>receive, with the graphics engine, at least one slice of the encrypted content;</claim-text>
<claim-text>decrypt, with the graphics engine, the key blob with the storage key received from the security processor;</claim-text>
<claim-text>decrypt, on the graphics engine, the at least one slice of the encrypted content with the title key of the decrypted key blob;</claim-text>
<claim-text>encrypt, on the graphics engine, the at least one decrypted content slice to generate one or more re-encrypted content slices;</claim-text>
<claim-text>generate, on the graphics engine, composed image data based on the re-encrypted content slices in response to generation of the re-encrypted content slices;</claim-text>
<claim-text>transmit, from the graphics engine, the composed image data to the security processor over the hardware-protected data path; and</claim-text>
<claim-text>transmit, from the security processor, the composed image data to a display over a protected display interface link.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The one or more non-transitory machine-readable storage media of <b>12</b>, wherein to encrypt the decrypted title key to form the key blob comprises to bind the key blob to the computing device.</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The one or more non-transitory machine-readable storage media of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein to establish the hardware-based root of trust comprises to perform a cryptographic authentication protocol protecting the user's privacy based on the use of zero-knowledge proofs.</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The one or more non-transitory machine-readable storage media of <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein to perform the cryptographic authentication protocol comprises to perform an Enhanced Privacy ID (EPID) authentication protocol.</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The one or more non-transitory machine-readable storage media of <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein the plurality of instructions further cause the computing device to establish a secure communications channel between the security processor and the hardware-based root of trust in the computing device and the service provider server based on the cryptographic authentication protocol.</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The one or more non-transitory machine-readable storage media of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the plurality of instructions further cause the computing device to receive, from the service provider server, constraints on usage of the encrypted content.</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The one or more non-transitory machine-readable storage media of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the plurality of instructions further cause the computing device to verify, on the security processor, a signature of the key blob and the constraints on usage of the encrypted content in response to receipt of the key blob from the central processor.</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. The one or more non-transitory machine-readable storage media of <claim-ref idref="CLM-00018">claim 18</claim-ref>, wherein to verify the constraints comprises to identify the key blob as bound to the computing device for a specified time period.</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. The one or more non-transitory machine-readable storage media of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the content comprises a plurality of concurrent, independent content streams, each content stream having a distinct cryptographic context.</claim-text>
</claim>
<claim id="CLM-00021" num="00021">
<claim-text>21. The one or more non-transitory machine-readable storage media of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein to receive the at least one slice of the encrypted content comprises to receive at least one slice of the encrypted content in which a header of each slice is unencrypted.</claim-text>
</claim>
<claim id="CLM-00022" num="00022">
<claim-text>22. A computing device for processing content including one or more simultaneous protected content streams with distinct security properties and keying material, the computing device comprising:
<claim-text>a hardware security processor and a hardware graphics engine,</claim-text>
<claim-text>the security processor configured to:
<claim-text>establish a hardware-based root of trust between the computing device and a service provider server;</claim-text>
<claim-text>receive, from the service provider server, an encrypted title key associated with encrypted content of the service provider server;</claim-text>
<claim-text>decrypt the encrypted title key received from the service provider server;</claim-text>
<claim-text>encrypt the decrypted title key with a storage key to form a key blob;</claim-text>
<claim-text>transmit the key blob to a central processor of the computing device for storage in memory of the computing device in response to encryption of the decrypted title key;</claim-text>
<claim-text>receive the key blob from the central processor in response to a request from a user of the computing device to execute the encrypted content; and</claim-text>
<claim-text>transmit the key blob to the graphics engine of the computing device over a hardware-protected data path; and</claim-text>
</claim-text>
<claim-text>the graphics engine configured to:
<claim-text>receive at least one slice of the encrypted content;</claim-text>
<claim-text>decrypt the key blob with the storage key received from the security processor;</claim-text>
<claim-text>decrypt the at least one slice of the encrypted content with the title key of the decrypted key blob;</claim-text>
<claim-text>encrypt the at least one decrypted content slice to generate one or more re-encrypted content slices;</claim-text>
<claim-text>generate composed image data based on the re-encrypted content slices in response to generation of the re-encrypted content slices; and</claim-text>
<claim-text>transmit the composed image data to the security processor over the hardware-protected data path,</claim-text>
</claim-text>
<claim-text>wherein the security processor is further to transmit the composed image data to a display over a protected display interface link.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00023" num="00023">
<claim-text>23. The computing device of <claim-ref idref="CLM-00022">claim 22</claim-ref>, wherein to encrypt the decrypted title key to form the key blob comprises to bind the key blob to the computing device.</claim-text>
</claim>
<claim id="CLM-00024" num="00024">
<claim-text>24. The computing device of <claim-ref idref="CLM-00022">claim 22</claim-ref>, wherein to establish the hardware-based root of trust comprises to perform a cryptographic authentication protocol protecting the user's privacy based on the use of zero-knowledge proofs.</claim-text>
</claim>
<claim id="CLM-00025" num="00025">
<claim-text>25. The computing device of <claim-ref idref="CLM-00024">claim 24</claim-ref>, wherein to perform the cryptographic authentication protocol comprises to perform an Enhanced Privacy ID (EPID) authentication protocol.</claim-text>
</claim>
<claim id="CLM-00026" num="00026">
<claim-text>26. The computing device of <claim-ref idref="CLM-00024">claim 24</claim-ref>, wherein the security processor is further to establish a secure communications channel between the hardware-based root of trust in the computing device and the service provider server based on the cryptographic authentication protocol.</claim-text>
</claim>
<claim id="CLM-00027" num="00027">
<claim-text>27. The computing device of <claim-ref idref="CLM-00022">claim 22</claim-ref>, wherein the security processor is further to receive, from the service provider server, constraints on usage of the encrypted content.</claim-text>
</claim>
<claim id="CLM-00028" num="00028">
<claim-text>28. The computing device of <claim-ref idref="CLM-00027">claim 27</claim-ref>, wherein security processor is further to verify a signature of the key blob and the constraints on usage of the encrypted content in response to receipt of the key blob from the central processor.</claim-text>
</claim>
<claim id="CLM-00029" num="00029">
<claim-text>29. The computing device of <claim-ref idref="CLM-00028">claim 28</claim-ref>, wherein to verify the constraints comprises to identify the key blob as bound to the computing device for a specified time period.</claim-text>
</claim>
<claim id="CLM-00030" num="00030">
<claim-text>30. The computing device of <claim-ref idref="CLM-00022">claim 22</claim-ref>, wherein the content comprises a plurality of concurrent, independent content streams, each content stream having a distinct cryptographic context.</claim-text>
</claim>
<claim id="CLM-00031" num="00031">
<claim-text>31. The computing device of <claim-ref idref="CLM-00022">claim 22</claim-ref>, wherein to receive the at least one slice of the encrypted content comprises to receive at least one slice of the encrypted content in which a header of each slice is unencrypted. </claim-text>
</claim>
</claims>
</us-patent-grant>

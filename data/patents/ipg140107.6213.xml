<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08627337-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08627337</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>13404172</doc-number>
<date>20120224</date>
</document-id>
</application-reference>
<us-application-series-code>13</us-application-series-code>
<us-term-of-grant>
<disclaimer>
<text>This patent is subject to a terminal disclaimer.</text>
</disclaimer>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>3</main-group>
<subgroup>00</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>9</main-group>
<subgroup>44</subgroup>
<symbol-position>L</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>9</main-group>
<subgroup>46</subgroup>
<symbol-position>L</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>13</main-group>
<subgroup>00</subgroup>
<symbol-position>L</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>719313</main-classification>
<further-classification>719318</further-classification>
<further-classification>719320</further-classification>
</classification-national>
<invention-title id="d2e51">Programmatic modification of a message flow during runtime</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>2005/0268136</doc-number>
<kind>A1</kind>
<name>Kostadinov et al.</name>
<date>20051200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>713400</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>2009/0007274</doc-number>
<kind>A1</kind>
<name>Martinez et al.</name>
<date>20090100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>726 27</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>2009/0055839</doc-number>
<kind>A1</kind>
<name>Chan et al.</name>
<date>20090200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>2009/0132958</doc-number>
<kind>A1</kind>
<name>Greer et al.</name>
<date>20090500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>715810</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>2009/0260021</doc-number>
<kind>A1</kind>
<name>Haenel et al.</name>
<date>20091000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>719328</main-classification></classification-national>
</us-citation>
<us-citation>
<nplcit num="00006">
<othercit>Oreizy, Peyman &#x201c;Runtime Software Adaptation: Framework, Approaches, and Styles&#x201d;, Oct. 18, 2008.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00007">
<othercit>Taylor, Richard N. &#x201c;Architectural Styles for Runtime Software Adaptation&#x201d;.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>20</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>None</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>3</number-of-drawing-sheets>
<number-of-figures>3</number-of-figures>
</figures>
<us-related-documents>
<continuation>
<relation>
<parent-doc>
<document-id>
<country>US</country>
<doc-number>12966726</doc-number>
<date>20101213</date>
</document-id>
<parent-status>PENDING</parent-status>
</parent-doc>
<child-doc>
<document-id>
<country>US</country>
<doc-number>13404172</doc-number>
</document-id>
</child-doc>
</relation>
</continuation>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20120151497</doc-number>
<kind>A1</kind>
<date>20120614</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Furneaux</last-name>
<first-name>Antony</first-name>
<address>
<city>Southampton</city>
<country>GB</country>
</address>
</addressbook>
<residence>
<country>GB</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Lubel</last-name>
<first-name>Gregory</first-name>
<address>
<city>Southampton</city>
<country>GB</country>
</address>
</addressbook>
<residence>
<country>GB</country>
</residence>
</us-applicant>
<us-applicant sequence="003" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Phillips</last-name>
<first-name>Anthony</first-name>
<address>
<city>Southampton</city>
<country>GB</country>
</address>
</addressbook>
<residence>
<country>GB</country>
</residence>
</us-applicant>
<us-applicant sequence="004" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Storey</last-name>
<first-name>Dominic</first-name>
<address>
<city>Hampshire</city>
<country>GB</country>
</address>
</addressbook>
<residence>
<country>GB</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Furneaux</last-name>
<first-name>Antony</first-name>
<address>
<city>Southampton</city>
<country>GB</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Lubel</last-name>
<first-name>Gregory</first-name>
<address>
<city>Southampton</city>
<country>GB</country>
</address>
</addressbook>
</inventor>
<inventor sequence="003" designation="us-only">
<addressbook>
<last-name>Phillips</last-name>
<first-name>Anthony</first-name>
<address>
<city>Southampton</city>
<country>GB</country>
</address>
</addressbook>
</inventor>
<inventor sequence="004" designation="us-only">
<addressbook>
<last-name>Storey</last-name>
<first-name>Dominic</first-name>
<address>
<city>Hampshire</city>
<country>GB</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Patents on Demand P.A.</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
<agent sequence="02" rep-type="attorney">
<addressbook>
<last-name>Buchheit</last-name>
<first-name>Brian K.</first-name>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
<agent sequence="03" rep-type="attorney">
<addressbook>
<last-name>Garrett</last-name>
<first-name>Scott M.</first-name>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>International Business Machines Corporation</orgname>
<role>02</role>
<address>
<city>Armonk</city>
<state>NY</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Sough</last-name>
<first-name>H S</first-name>
<department>2194</department>
</primary-examiner>
<assistant-examiner>
<last-name>Dorais</last-name>
<first-name>Craig</first-name>
</assistant-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">A message flow within a message broker can be identified. The message flow can include nodes and connections. The nodes can include a reflective node, a pre-defined node and a user-defined node. The message broker can be an intermediary computer program code able to translate a message from a first formal messaging protocol to a second formal messaging protocol. The code can be stored within a computer readable medium. The reflective node within the message flow can be selected. The reflective node can be associated with an external resource which can be an executable code. The external resource can be executed which can result in the modifying of the structure of the message flow. The modification can occur during runtime. The modification can include node and/or connection adding, altering, and deleting.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="224.62mm" wi="198.71mm" file="US08627337-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="238.17mm" wi="198.71mm" file="US08627337-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="229.28mm" wi="176.53mm" file="US08627337-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="236.81mm" wi="190.92mm" file="US08627337-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?RELAPP description="Other Patent Relations" end="lead"?>
<heading id="h-0001" level="1">CROSS-REFERENCE TO RELATED APPLICATIONS</heading>
<p id="p-0002" num="0001">This application is a continuation of U.S. patent application Ser. No. 12/966,726, filed Dec. 13, 2010 (pending), which is incorporated herein in its entirety.</p>
<?RELAPP description="Other Patent Relations" end="tail"?>
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0002" level="1">BACKGROUND</heading>
<p id="p-0003" num="0002">The present invention relates to the field of message passing and, more particularly, to programmatic modification of a message flow during runtime.</p>
<p id="p-0004" num="0003">Application integration, at a high level, can refer to a solution that can be implemented to integrate software applications within and between organizations. Historically, application integration focused on the integration of legacy software applications, such as between different departments, divisions within companies, or new acquisitions. Within an organization, these applications often vary considerably across departments, can exist on different platforms, can be written in different programming languages, and can use different data formats. Integrating the applications within a Service Oriented Architecture can be a practical and cost effective solution over the alternative of re-writing the existing applications.</p>
<p id="p-0005" num="0004">Within SOA infrastructures, message passing can be an integral component which can give rise to flexible, reusable, and robust application integration. Message passing typically includes a message broker which can perform a multitude of message handling operations. That is the message broker can facilitate inter-application communication within the organization. The message broker can process messages within message flows which are currently static. That is, the message flow cannot be dynamically self-regulating and/or responsive to messages, internal states, context, and stimuli.</p>
<p id="p-0006" num="0005">Current solutions for improving message flow processing include manually modifying a message flow. For example, a message flow design can be modified by a middleware analyst in response to performance metrics which can indicate a bottleneck. Manually modified message flows must be redeployed and continually optimized through human intervention. This approach can be time-consuming and error-prone which can significantly impact infrastructure costs.</p>
<heading id="h-0003" level="1">BRIEF SUMMARY</heading>
<p id="p-0007" num="0006">One aspect of the present invention can include a method, a computer program product, a system, and an apparatus for programmatic modification of a message flow during runtime. A message flow within a message broker can be identified. The message flow can include nodes and connections. The nodes can include a reflective node, a pre-defined node and a user-defined node. The message broker can be an intermediary computer program code able to translate a message from a first formal messaging protocol to a second formal messaging protocol. The code can be stored within a computer readable medium. The reflective node within the message flow can be selected. The reflective node can be associated with an external resource which can be an executable code. The external resource can be executed which can result in the modifying of the structure of the message flow. The modification can occur during runtime. The modification can include node and/or connection adding, altering, and deleting.</p>
<p id="p-0008" num="0007">Another aspect of the present invention can include a system for programmatically modifying a message flow during runtime. In this aspect, a flow engine can be able to execute a message flow including a node, a connection, and a reflective node. The flow engine can be associated with a message broker. The reflective node can be associated with an external resource. The external resource can be an executable code able to structurally modify the message flow. The message queue can be configured to persist a message which can be associated with an application. The application can be a computer program code stored within a computer readable medium. The application can be associated with an application server. The configuration setting can link the reflective node to the external resource and/or a parameter. The parameter can be an execution setting value.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE SEVERAL VIEWS OF THE DRAWINGS</heading>
<p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. 1</figref> is a flowchart illustrating a method for programmatic modification of a message flow during runtime in accordance with an embodiment of the inventive arrangements disclosed herein.</p>
<p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. 2</figref> is a schematic diagram illustrating a set of scenarios for programmatic modification of a message flow during runtime in accordance with an embodiment of the inventive arrangements disclosed herein.</p>
<p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. 3</figref> is a schematic diagram illustrating a system for programmatic modification of a message flow during runtime in accordance with an embodiment of the inventive arrangements disclosed herein.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0005" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0012" num="0011">The present disclosure is a solution for programmatic modification of a message flow during runtime. In the solution, a message flow can be structurally modified during runtime in response to one or more operational inputs. Operational inputs can include, but is not limited to, metrics, states, context, stimuli, and the like. Structural modification can include, but is not limited to, node manipulation (e.g., addition, alteration, deletion), connection manipulation (e.g., insertion, modification, deletion), bend point manipulation, and the like. In one embodiment, a reflective node within a message flow can permit the execution of structural application programming interface (API) facilities which can modify the message flow at runtime. In the embodiment, the reflective node can be linked to a timeout node which can provide periodic triggering of reflective node functionality.</p>
<p id="p-0013" num="0012">As will be appreciated by one skilled in the art, aspects of the present invention may be embodied as a system, method or computer program product. Accordingly, aspects of the present invention may take the form of an entirely hardware embodiment, an entirely software embodiment (including firmware, resident software, micro-code, etc.) or an embodiment combining software and hardware aspects that may all generally be referred to herein as a &#x201c;circuit,&#x201d; &#x201c;module&#x201d; or &#x201c;system.&#x201d; Furthermore, aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium(s) having computer readable program code embodied thereon.</p>
<p id="p-0014" num="0013">Any combination of one or more computer readable medium(s) may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be, for example, but not limited to, an electronic, magnetic, optical, electromagnetic, infrared, or semiconductor system, apparatus, or device, or any suitable combination of the foregoing. More specific examples (a non-exhaustive list) of the computer readable storage medium would include the following: an electrical connection having one or more wires, a portable computer diskette, a hard disk, a random access memory (RAM), a read-only memory (ROM), an erasable programmable read-only memory (EPROM or Flash memory), an optical fiber, a portable compact disc read-only memory (CD-ROM), an optical storage device, a magnetic storage device, or any suitable combination of the foregoing. In the context of this document, a computer readable storage medium may be any tangible medium that can contain, or store a program for use by or in connection with an instruction execution system, apparatus, or device.</p>
<p id="p-0015" num="0014">A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein, for example, in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms, including, but not limited to, electro-magnetic, optical, or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate, propagate, or transport a program for use by or in connection with an instruction execution system, apparatus, or device.</p>
<p id="p-0016" num="0015">Program code embodied on a computer readable medium may be transmitted using any appropriate medium, including but not limited to wireless, wireline, optical fiber cable, RF, etc., or any suitable combination of the foregoing. Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages, including an object oriented programming language such as Java, Smalltalk, C++ or the like and conventional procedural programming languages, such as the &#x201c;C&#x201d; programming language or similar programming languages. The program code may execute entirely on the user's computer, partly on the user's computer, as a stand-alone software package, partly on the user's computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario, the remote computer may be connected to the user's computer through any type of network, including a local area network (LAN) or a wide area network (WAN), or the connection may be made to an external computer (for example, through the Internet using an Internet Service Provider).</p>
<p id="p-0017" num="0016">Aspects of the present invention are described below with reference to flowchart illustrations and/or block diagrams of methods, apparatus (systems) and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and/or block diagrams, and combinations of blocks in the flowchart illustrations and/or block diagrams, can be implemented by computer program instructions.</p>
<p id="p-0018" num="0017">These computer program instructions may be provided to a processor of a general purpose computer, special purpose computer, or other programmable data processing apparatus to produce a machine, such that the instructions, which execute via the processor of the computer or other programmable data processing apparatus, create means for implementing the functions/acts specified in the flowchart and/or block diagram block or blocks.</p>
<p id="p-0019" num="0018">These computer program instructions may also be stored in a computer readable medium that can direct a computer, other programmable data processing apparatus, or other devices to function in a particular manner, such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function/act specified in the flowchart and/or block diagram block or blocks.</p>
<p id="p-0020" num="0019">The computer program instructions may also be loaded onto a computer, other programmable data processing apparatus, or other devices to cause a series of operational steps to be performed on the computer, other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions/acts specified in the flowchart and/or block diagram block or blocks.</p>
<p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. 1</figref> is a flowchart illustrating a method <b>100</b> for programmatic modification of a message flow during runtime in accordance with an embodiment of the inventive arrangements disclosed herein. In method <b>100</b>, a message flow executing within a message broker can be dynamically modified during runtime. The message flow can include a reflective node able to perform structural adjustments to the message flow in response to operational inputs. In one embodiment, the method <b>100</b> can be performed in real-time or near real-time.</p>
<p id="p-0022" num="0021">As used herein, a message flow can be a software construct including two or more nodes capable of performing a set of actions upon a message. The message flow nodes can be connected via a connection. A connection can be a linkage between nodes of a message flow which a message can be conveyed. Nodes can be an executable software entity able to process a portion of a message. Nodes can be associated with a terminal which can permit node linking. The terminal can be inputs, outputs, and the like. Nodes can include, but is not limited to, pre-defined (e.g., built-in nodes), user-defined nodes, a subflow, and the like. Node functionality can include, but is not limited to, message processing, message transformation, message routing, aggregation, filtering, and the like.</p>
<p id="p-0023" num="0022">As used herein, a message can be an application message conveyed from an application to another application. The message can be an automatically generated digital artifact conforming to one or more traditional and/or proprietary formats. In one instance, the message can be an Extensible Markup Language (XML) message.</p>
<p id="p-0024" num="0023">An application can be a software program within an application messaging infrastructure. Application messaging infrastructure can be a hardware/software platform for permitting the loose coupling of applications over a message passing bus. In one instance, the application messaging infrastructure can include a Service Oriented Architecture (SOA). It should be appreciated that message flow within method <b>100</b> can be present within a distributed computing environment, network computing environment, cloud computing environment, and the like.</p>
<p id="p-0025" num="0024">In step <b>105</b>, a message flow within a message broker can be selected. Selection can be performed based on one or more criteria including, but not limited to, performance metrics, message flow complexity, owner, and the like. In step <b>110</b>, the selected message flow can be executed. Execution can be performed in real-time within a dynamic computing environment. In step <b>115</b>, a reflective node within the message can be selected. The reflected node can be selected based on execution order, periodic node selection, and the like. The reflective node can be pre-defined, user-defined, a subflow, and the like.</p>
<p id="p-0026" num="0025">In step <b>120</b>, the selected reflective node can be executed. Execution can include performing programmatic actions associated with an external resource. The executable resource can be an external resource can be an executable entity including, but not limited to, an executable code, application programming interface (API), and the like. Executable code can include, but is not limited to, JAVA, C, Practical Extraction and Reporting Language (PERL), and the like.</p>
<p id="p-0027" num="0026">In step <b>125</b>, the reflective node can evaluate the message flow structure, execution, and/or, performance. Structural evaluation can include, but is not limited to, traditional and/or proprietary analysis to determine structural improvements and/or optimizations. Evaluation of message flow evaluation can include, but is not limited to, execution connection examination, node activity, and the like. Evaluation of message flow performance can include, but is not limited to, collecting metrics, analyzing execution metrics, and the like.</p>
<p id="p-0028" num="0027">In step <b>130</b>, if the evaluation of the message flow indicated the flow is not optimized, the method can proceed to step <b>135</b>, else return to step <b>105</b>. In step <b>135</b>, the message flow can be structurally modified during runtime to improve performance. In one embodiment, the message flow can be modified and redeployed automatically. In step <b>140</b>, structural modification can be optionally logged. Message flow modifications can be recorded as an original message flow structure, deltas, and the like. Modifications can permit auditing, change tracking, and the like.</p>
<p id="p-0029" num="0028">In step <b>145</b>, an optimized flow can be generated from structural modifications. To ensure operability, the optimized flow can be subjected to consistency tests, syntax testing, and the like. In one instance, testing can be performed automatically in response to the generation of the optimized flow. In another instance, testing can be performed manually via a message flow software tool.</p>
<p id="p-0030" num="0029">In step <b>147</b>, the identified message flow can be replaced in with the optimized flow during runtime. In one instance, the selected message flow structure can be dynamically modified and utilized in real-time. In the instance, the message flow can be altered and redeployed automatically. In one configuration of the instance, message flow runtime state can be maintained permitting message processing state to be persisted. In step <b>150</b>, if more message flows are available, the method can return to step <b>150</b>, else continue to step <b>155</b>. In step <b>155</b>, the method can end.</p>
<p id="p-0031" num="0030">Drawings presented herein are for illustrative purposes only and should not be construed to limit the invention in any regard. Method <b>100</b> can be performed for multiple message flows simultaneously. That is, message flow optimization can be performed in parallel, enabling rapid improvements to be achieved. In one embodiment, method <b>100</b> can be iteratively executed, allowing message flows to be continually optimized due to environmental requirements and/or changes.</p>
<p id="p-0032" num="0031"><figref idref="DRAWINGS">FIG. 2</figref> is a schematic diagram illustrating a set of scenarios <b>210</b>, <b>260</b> for programmatic modification of a message flow during runtime in accordance with an embodiment of the inventive arrangements disclosed herein. Scenario <b>210</b>, <b>260</b> can be present in the context of method <b>100</b>. In the scenario <b>210</b>, a message flow <b>209</b> within a message queue and/or a message broker (e.g., flow engine <b>250</b>) can be programmatically modified. The structure of the message flow <b>209</b> can be altered during runtime in response to one or more events. Events can include automated triggers and manually triggered actions. In the scenario <b>210</b>, modification of flow <b>209</b> structure can include the addition of nodes <b>230</b>, <b>231</b> and connections <b>224</b>, <b>225</b>.</p>
<p id="p-0033" num="0032">It should be understood that in scenario <b>210</b> message flow <b>209</b> can be visually represented as a directed graph <b>209</b>. Message flow <b>209</b> can be visually presented within an interface of a message flow editor (e.g., interface <b>344</b>). In the scenario, nodes <b>211</b>-<b>216</b>, <b>230</b>, <b>231</b> can be represented as graphical icons. Message flow connections (e.g., routes) can be represented by directed lines <b>220</b>-<b>226</b>. Dashed lines <b>224</b>-<b>226</b> can represent dynamically inserted connections resulting from the execution of node <b>216</b>. Dotted line <b>222</b> can represent a deleted connection between node <b>212</b>-<b>214</b> resulting from the node <b>216</b> execution.</p>
<p id="p-0034" num="0033">In scenario <b>210</b>, a message flow <b>209</b> can include nodes <b>211</b>-<b>216</b> linked via connections <b>220</b>-<b>223</b>. Nodes <b>215</b>, <b>216</b> can be present within flow <b>209</b> which can be linked together by connection <b>223</b>. Node <b>215</b>, <b>216</b> can trigger periodic evaluation of flow <b>209</b> through executable code associated with the node <b>216</b>. When necessary (e.g., performance problems), flow <b>209</b> can be structurally modified during runtime. In the scenario, flow <b>209</b> can be modified through the addition of nodes <b>230</b>-<b>231</b> and connections <b>224</b>-<b>226</b>. Connection <b>222</b> can be removed creating a new message flow connection linking node <b>212</b> to <b>214</b> via node <b>230</b> and connection <b>224</b>, <b>225</b>. That is a new route (e.g., connection <b>224</b> and <b>225</b>) can be created.</p>
<p id="p-0035" num="0034">Node <b>230</b>, <b>231</b> can be linked via connection <b>226</b> which can permit node <b>230</b> to accommodate multiple connections. Node <b>230</b> selection can be performed based on terminal configuration (e.g., inputs and/or outputs). Criteria for node selection can include, but is not limited to, input/output quantity, processing capabilities, and the like. In one embodiment, node linking can be automatically verified ensuring message flow operability. In one instance, alternate linking can be performed to enable robust improvements to a flow <b>209</b>. In the instance, an alternative output of a node can be identified and a link can be established from the node to another appropriate node.</p>
<p id="p-0036" num="0035">In one instance, node <b>215</b> can be a timeout node, activating execution of node <b>216</b> periodically. In the instance, node <b>215</b> timeout value can be an automatically and/or manually determined value.</p>
<p id="p-0037" num="0036">In one instance, node <b>216</b> can be a dynamic flow update node associated with an application programming interface (API). In the instance, node <b>216</b> can execute a JAVA API functionality permitting structural modification of the message flow <b>209</b>.</p>
<p id="p-0038" num="0037">In one embodiment, node insertion can include the addition of a JAVACOMPUTE node within flow <b>209</b>.</p>
<p id="p-0039" num="0038">In scenario <b>260</b>, a flow engine <b>250</b> can permit iterative improvement of message flow <b>240</b> to be achieved. Flow engine <b>250</b> can be a component of a message broker associated with a messaging architecture. Message flow <b>240</b> can be continually improved utilizing real-time metrics <b>244</b>. In the scenario <b>260</b>, collected metrics <b>244</b> can be employed as input parameters for driving message flow <b>240</b> optimization. Metrics <b>244</b> can include, but is not limited to, throughput, individual node performance, route performance, metrics, flow response time, and the like. Metrics <b>244</b> can be collected from engine <b>250</b>, logging resources, external programs, and the like.</p>
<p id="p-0040" num="0039">Message flow <b>240</b> can be received as input by flow engine <b>250</b>. Engine <b>250</b> can utilize metrics to determine appropriate structural changes. For instance, when a message flow route performs below a threshold value, engine <b>250</b> can execute a programmatic restructuring. Changes to message flow <b>240</b> can be persisted as an output from engine <b>250</b> which can be an optimized flow <b>242</b>. Optimized flow <b>242</b> can be a structurally different message flow from message flow <b>240</b>. Flow <b>242</b> can be generated in real-time in response to metrics <b>244</b>. In one instance, flow <b>242</b> can be tested prior to deployment to determine performance change characteristics. In the instance, when flow <b>242</b> can performance surpasses message flow <b>240</b>, the message flow <b>242</b> can be deployed.</p>
<p id="p-0041" num="0040">Drawings presented herein are for illustrative purposes only and should not be construed to limit the invention in any regard. In one instance, scenario <b>210</b> can permit the modification of a different message flow. In the instance, message flow <b>209</b> can insert a reflective node into the different message flow permitting the different message flow to perform self-modifications.</p>
<p id="p-0042" num="0041"><figref idref="DRAWINGS">FIG. 3</figref> is a schematic diagram illustrating a system <b>300</b> for programmatic modification of a message flow during runtime in accordance with an embodiment of the inventive arrangements disclosed herein. System <b>300</b> can be present in the context of method <b>100</b> and scenario <b>210</b>, <b>260</b>. In system <b>300</b> a flow engine <b>320</b> can permit the execution of a reflective node <b>336</b> enabling message flow <b>332</b> to be structurally modified during runtime. Engine <b>320</b> can be a component of server <b>310</b> which can be communicatively linked to application server <b>350</b> via network <b>380</b>. Application <b>352</b> can convey message <b>362</b> to message queue <b>330</b> for processing. Message flow <b>332</b> can process (e.g., protocol conversion) message <b>362</b> and generate message <b>360</b>.</p>
<p id="p-0043" num="0042">Broker server <b>310</b> can be a hardware/software component able to receive and transmit message <b>362</b>, <b>360</b>. Server <b>310</b> can include, but is not limited to, flow engine <b>320</b>, message queue <b>330</b>, message flow <b>332</b>, node library <b>370</b>, data store <b>340</b>, interface <b>344</b>, and the like. Server <b>310</b> functionality can include, but is not limited to, message translation, message validation, message transformation, message routing, and the like. In one instance, server <b>310</b> can be a component of an IBM WEBSPHERE MESSAGE BROKER. That is, server <b>310</b> can be a component of an enterprise service bus.</p>
<p id="p-0044" num="0043">Flow engine <b>320</b> can be a hardware/software component for altering message flow <b>332</b> during runtime. Flow engine <b>320</b> can include, but is not limited to, analytics engine <b>322</b>, flow manipulator <b>324</b>, auditing manager <b>326</b>, configuration settings <b>328</b>, and the like. Flow functionality can include, but is not limited to <b>320</b>, flow manipulation, flow analysis, flow validation, error handling, flow/message security, and the like. In one instance, flow engine <b>320</b> can be a network element within a distributed computing environment.</p>
<p id="p-0045" num="0044">Analytics engine <b>322</b> can be a hardware/software entity able to assess message flow <b>322</b> performance. Engine <b>322</b> functionality can include, but is not limited to, metric collection, flow <b>322</b> analytics, and the like. Engine <b>322</b> can perform flow analytics upon flow <b>332</b> and/or an optimized flow. In one instance, engine <b>322</b> can be an external component associated with a network computing environment.</p>
<p id="p-0046" num="0045">Flow manipulator <b>324</b> can be a hardware/software component able to adjust flow <b>332</b> during runtime in response to one or more conditions. Manipulator functionality can include, but is not limited to, node manipulation, connection adjustment, and the like. Node manipulation can include, but is not limited to, node insertion, modification, and deletion. Connection adjustment can include, but is not limited to, connection addition, adjustment, and removal. In one instance, manipulator <b>324</b> can select a node <b>372</b> from node library <b>370</b> when insertion of a node is necessary. In the instance, pre-configured node <b>372</b> can be inserted into message flow <b>332</b>.</p>
<p id="p-0047" num="0046">Auditing manager <b>326</b> can be a hardware/software entity able to track message flow <b>332</b> changes. Manager <b>326</b> functionality can include, but is not limited to, logging, audit reporting, change history, and the like. Manager <b>326</b> tracking can include, node level tracking, flow revision tracking, and the like. In one instance, manager <b>326</b> can permit changes to a message flow <b>332</b> to be reverted.</p>
<p id="p-0048" num="0047">Configuration settings <b>328</b> can be a collection of settings for controlling the behavior of engine <b>320</b>. Settings <b>328</b> can include, but is not limited to, node identification values, message flow identification, executable code identifiers, parameters, metrics settings, security settings, business rules, and the like. In one embodiment, settings <b>328</b> can permit reflective node <b>336</b> to be linked with an executable code. For instance, setting <b>329</b> can allow a reflective node (e.g. Ref_A) to be associated with an executable code (e.g., Exe_B) and a set of parameters (e.g. Param_A).</p>
<p id="p-0049" num="0048">Message queue <b>330</b> can be a programmatic queue able to temporarily persist message <b>362</b> and/or message <b>360</b>. Queue <b>330</b> can receive message <b>362</b> which can be stored for processing by message flow <b>332</b>. Queue <b>330</b> can be a queue <b>330</b> associated with a message broker. Queue <b>330</b> can include, but is not limited to, a stack, queue, heap, and the like. Queue <b>330</b> processing order can include, but is not limited to, Last In First Out (LIFO), First In First Out (FIFO), and the like.</p>
<p id="p-0050" num="0049">Message flow <b>332</b> can be a software construct able to process message <b>360</b>, <b>362</b>. Message flow <b>332</b> can include, but is not limited to, node <b>334</b>, reflective node <b>336</b>, and the like. Message flow <b>332</b> logic can include, but is not limited to, Extended Structured Query Language (ESQL), JAVA, Extensible Style sheet Language for Transformations (XSLT), and the like.</p>
<p id="p-0051" num="0050">Node library <b>370</b> can be a software artifact for storing node <b>372</b> which can be utilized to dynamically modify message flow <b>332</b> during runtime. Node <b>372</b> can include, but is not limited to, a pre-defined node (e.g., filter node), a user-defined node, and the like. Library <b>370</b> can be automatically and/or manually populated. In one instance, library can be stored within data store <b>340</b> and/or an external repository.</p>
<p id="p-0052" num="0051">Data store <b>340</b> can be a hardware/software entity capable of persisting executable code <b>342</b>. Data store <b>340</b> can include, but is not limited to, a Storage Area Network (SAN), Network Attached Storage (NAS), and the like. Data store <b>340</b> can include, but is not limited to, a Relational Database Management System (RDMS), Object Oriented Database Management System (OODBMS), and the like.</p>
<p id="p-0053" num="0052">Executable code <b>342</b> can be a programmatic resource able to dynamically modify message flow <b>332</b>. Code <b>342</b> can be stored as programmatic instructions, binary code, and the like. Code <b>342</b> can be associated with permissions, access control lists (ACL), settings, and the like. In one instance, code <b>342</b> can be stored within data store <b>340</b>. In the instance, code <b>342</b> can be stored within a database structure (e.g., table).</p>
<p id="p-0054" num="0053">Interface <b>344</b> can be a user interface for configuring resources within system <b>300</b>. Interface <b>344</b> can permit presentation and/or modification of configuration settings <b>328</b>, message <b>360</b>, <b>362</b>, message flow <b>332</b>, reflective node <b>336</b>. In one instance, interface <b>344</b> can be associated with an IBM WEBSPHERE BROKER message flow editor. In the instance, interface <b>344</b> can be an IBM WEBSPHERE MESSAGE BROKERS EXPLORER software. Interface can be a graphical user interface, voice user interface, text-based user interface, mixed-mode interface, and the like.</p>
<p id="p-0055" num="0054">Application server <b>350</b> can be a hardware/software platform for executing application <b>352</b>. Server <b>350</b> can include, but is not limited to, application <b>352</b>, message queue (not shown), configuration settings, and the like. Server <b>350</b> can be a traditional and/or proprietary execution environment. In one instance, server <b>350</b> can be an IBM WEBSPHERE APPLICATION SERVER.</p>
<p id="p-0056" num="0055">Network <b>380</b> can be a hardware/software entity for communicatively linking system <b>300</b> components in real-time or near real-time. Network <b>380</b> can include, but is not limited to, wired technologies, wireless technologies, and the like. Network <b>380</b> can be, but is not limited to, Local Area Network (LAN), Wide Area Network (WAN), Metropolitan Area Network (MAN), and the like.</p>
<p id="p-0057" num="0056">Drawings presented herein are for illustrated purposes only and should not be construed to limit the invention in any regard. Server <b>310</b> can be a component of a distributed computing environment, networking computing environment, cloud computing environment, and the like. System <b>300</b> architecture can include, publish/subscribe, distributed publish/subscribe, and the like. In one instance, server <b>310</b> functionality can be a portion of a Web-enabled Service. It should be appreciated that system <b>300</b> can be associated with one or more protocols including, but not limited to, Simple Object Access Protocol (SOAP), Transport Control Protocol (TCP), Internet Protocol (IP), Hypertext Transport, Protocol, Extensible Markup Language Remote Procedure Call (XML-RPC), and the like.</p>
<p id="p-0058" num="0057">The flowchart and block diagrams in the <figref idref="DRAWINGS">FIGS. 1-3</figref> illustrate the architecture, functionality, and operation of possible implementations of systems, methods and computer program products according to various embodiments of the present invention. In this regard, each block in the flowchart or block diagrams may represent a module, segment, or portion of code, which comprises one or more executable instructions for implementing the specified logical function(s). It should also be noted that, in some alternative implementations, the functions noted in the block may occur out of the order noted in the figures. For example, two blocks shown in succession may, in fact, be executed substantially concurrently, or the blocks may sometimes be executed in the reverse order, depending upon the functionality involved. It will also be noted that each block of the block diagrams and/or flowchart illustration, and combinations of blocks in the block diagrams and/or flowchart illustration, can be implemented by special purpose hardware-based systems that perform the specified functions or acts, or combinations of special purpose hardware and computer instructions.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A method for programmatic modification of a message flow comprising:
<claim-text>identifying a message flow within a message broker, wherein the message flow comprises a plurality of nodes and connections, wherein the plurality of nodes comprises of a node and a reflective node, wherein the node is at least one of a pre-defined node and a user-defined node, wherein the message broker is an intermediary computer program code able to translate a message from a first formal messaging protocol to a second formal messaging protocol, wherein the intermediary computer program code is stored within a computer readable medium;</claim-text>
<claim-text>selecting the reflective node within the message flow, wherein the reflective node is associated with an external resource, wherein the external resource is an executable code; and</claim-text>
<claim-text>executing the external resource during runtime, wherein the external resource is able to perform at least one of a node alteration and a connection adjustment, wherein the node alteration is at least one of a node insertion, a node modification, and a node deletion, wherein the connection adjustment is at least one of a connection insertion, a connection modification, and a connection deletion, wherein the executing results in the modifying of the structure of the message flow, wherein the modification by executing the external resource performs at least one of a node alteration and a connection adjustment, wherein the node alteration is at least one of a node insertion, a node modification, and a node deletion, wherein the connection adjustment is at least one of a connection insertion, a connection modification, and a connection deletion, wherein the reflective node is within the message flow and permits execution of structural application program interface (API) facilities, which modify the message flow at runtime, wherein the reflective node is linked to a timeout node, which provides iterative triggering of reflective node functionality.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising: analyzing a metric associated with the message flow, wherein the metric is a parameter associated with the executing.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:
<claim-text>committing the modification to a data store as an optimized message flow, wherein the optimized message flow is different from the message flow;</claim-text>
<claim-text>replacing the message flow within the message broker with the optimized message flow during runtime, wherein the optimized flow is deployed, wherein the message is undeployed; and</claim-text>
<claim-text>executing the optimized message flow.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method of <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein the optimized message flow is presented within a user interface.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising: determining the modifications to be performed on the structure of the message flow to optimize the message flow.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the external resource is associated with an Web service repository software.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the adding is the insertion of a trace node within the message flow.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the reflective node is associated with a timeout node, wherein the timeout node triggers the execution of the reflective node functionality.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising: maintaining a log of the structural modification in a tangible storage medium.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. A method for programmatic modification of a message flow comprising:
<claim-text>identifying a message flow within a message broker, wherein the message flow comprises a plurality of nodes and connections, wherein the plurality of nodes comprises of a node and a reflective node, wherein the node is at least one of a pre-defined node and a user-defined node, wherein the reflective node is associated with an external resource, wherein the message broker is an intermediary computer program code able to translate a message from a first formal messaging protocol to a second formal messaging protocol, wherein the intermediary computer program code is stored within a computer readable medium;</claim-text>
<claim-text>evaluating a performance of the message flow; and</claim-text>
<claim-text>automatically execute the external resource during runtime responsive to the performance of the message flow being less than a threshold, wherein the external resource is able to perform at least one of a node alteration and a connection adjustment, wherein the node alteration is at least one of a node insertion, a node modification, and a node deletion, wherein the connection adjustment is at least one of a connection insertion, a connection modification, and a connection deletion, wherein the executing results in the modifying of the structure of the message flow, wherein the modification by executing the external resource performs at least one of a node alteration and a connection adjustment, wherein the node alteration is at least one of a node insertion, a node modification, and a node deletion, wherein the connection adjustment is at least one of a connection insertion, a connection modification, and a connection deletion, wherein the reflective node is within the message flow and permits execution of structural application program interface (API) facilities, which modify the message flow at runtime, wherein the reflective node is linked to a timeout node, which provides iterative triggering of reflective node functionality.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The method of <claim-ref idref="CLM-00010">claim 10</claim-ref>, further comprising:
<claim-text>tracking changes to the message flow; and</claim-text>
<claim-text>maintaining a log of the structural modification in a repository.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The method of <claim-ref idref="CLM-00010">claim 10</claim-ref>, further comprising: determining the modifications to be performed on the message flow to optimize the message flow.</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The method of <claim-ref idref="CLM-00010">claim 10</claim-ref>, further comprising: automatically deploying the modified message flow.</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The method of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the evaluation of the performance of the message flow comprises evaluation of at least two of throughput, individual node performance, route performance metrics, and flow response time.</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The method of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the evaluation of the performance of the message flow is performed periodically.</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The method of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the node alteration is an addition of a node, deletion of a node and a modification of node.</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The method of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the connection adjustment is at least one of a connection insertion, a connection modification, and a connection deletion.</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The method of <claim-ref idref="CLM-00010">claim 10</claim-ref>, further comprising:
<claim-text>committing the modification to a data store as an optimized message flow, wherein the optimized message flow is different from the message flow;</claim-text>
<claim-text>replacing the message flow within the message broker with the optimized message flow during runtime, wherein the optimized flow is deployed, wherein the message is undeployed; and</claim-text>
<claim-text>executing the optimized message flow.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. The method of <claim-ref idref="CLM-00010">claim 10</claim-ref>, further comprising: presenting the optimized message flow within a user interface.</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. A method for programmatic modification of a message flow comprising:
<claim-text>evaluating a performance of the message flow within a message broker, wherein the message flow comprises a plurality of nodes and connections, wherein the plurality of nodes comprises of a node and a reflective node, wherein the node is at least one of a pre-defined node and a user-defined node, wherein the reflective node is associated with an external resource, wherein the message broker is an intermediary computer program code able to translate a message from a first formal messaging protocol to a second formal messaging protocol, wherein the intermediary computer program code is stored within a computer readable medium; and</claim-text>
<claim-text>automatically optimizing the message flow responsive to the performance of the message being below a threshold, wherein automatically optimizing the message flow comprises modifying a structure of the message flow at runtime by executing the external resource, wherein the external resource is able to perform at least one of a node alteration and a connection adjustment, wherein the node alteration is at least one of a node insertion, a node modification, and a node deletion, wherein the connection adjustment is at least one of a connection insertion, a connection modification, and a connection deletion, wherein the executing results in the modifying of the structure of the message flow, wherein the modification by executing the external resource performs at least one of a node alteration and a connection adjustment, wherein the node alteration is at least one of a node insertion, a node modification, and a node deletion, wherein the connection adjustment is at least one of a connection insertion, a connection modification, and a connection deletion, wherein the reflective node is within the message flow and permits execution of structural application program interface (API) facilities, which modify the message flow at runtime, wherein the reflective node is linked to a timeout node, which provides iterative triggering of reflective node functionality. </claim-text>
</claim-text>
</claim>
</claims>
</us-patent-grant>

<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08627148-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08627148</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>13340342</doc-number>
<date>20111229</date>
</document-id>
</application-reference>
<us-application-series-code>13</us-application-series-code>
<us-term-of-grant>
<us-term-extension>196</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>11</main-group>
<subgroup>00</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>714 3811</main-classification>
<further-classification>714 42</further-classification>
</classification-national>
<invention-title id="d2e53">Method and apparatus for memory dump processing and a memory dump system</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>5293612</doc-number>
<kind>A</kind>
<name>Shingai</name>
<date>19940300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>711159</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>5339406</doc-number>
<kind>A</kind>
<name>Carney et al.</name>
<date>19940800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714 45</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>6948010</doc-number>
<kind>B2</kind>
<name>Somers et al.</name>
<date>20050900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>710 23</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>2007/0220350</doc-number>
<kind>A1</kind>
<name>Ogasawara et al.</name>
<date>20070900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>2008/0133968</doc-number>
<kind>A1</kind>
<name>Muppirala et al.</name>
<date>20080600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>2009/0110234</doc-number>
<kind>A1</kind>
<name>Yang et al.</name>
<date>20090400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>382100</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>2009/0216967</doc-number>
<kind>A1</kind>
<name>Sugawara</name>
<date>20090800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>711156</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>2010/0199071</doc-number>
<kind>A1</kind>
<name>Nakazono et al.</name>
<date>20100800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>CN</country>
<doc-number>101025701</doc-number>
<kind>A</kind>
<date>20070800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>CN</country>
<doc-number>101770401</doc-number>
<kind>A</kind>
<date>20100700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00011">
<document-id>
<country>CN</country>
<doc-number>101795381</doc-number>
<kind>A</kind>
<date>20100800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00012">
<othercit>Office Action issued in corresponding Chinese Patent Application No. 201180000579.6, mailed Oct. 31, 2012.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00013">
<othercit>Extended European Search Report issued in corresponding European Patent Application No. 11768476.1, mailed Jun. 28, 2012.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00014">
<othercit>International Search Report issued in corresponding PCT Patent Application No. PCT/CN2011/074721, mailed Mar. 1, 2012.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>18</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>714 3811</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>714  61</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>714  611</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>714  612</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>714  613</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>714 13</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>714 48</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>714 54</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>714718</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>712201</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>712202</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>5</number-of-drawing-sheets>
<number-of-figures>6</number-of-figures>
</figures>
<us-related-documents>
<continuation>
<relation>
<parent-doc>
<document-id>
<country>US</country>
<doc-number>PCT/CN2011/074721</doc-number>
<date>20110526</date>
</document-id>
<parent-status>PENDING</parent-status>
</parent-doc>
<child-doc>
<document-id>
<country>US</country>
<doc-number>13340342</doc-number>
</document-id>
</child-doc>
</relation>
</continuation>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20120304019</doc-number>
<kind>A1</kind>
<date>20121129</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Li</last-name>
<first-name>Jun</first-name>
<address>
<city>Hangzhou</city>
<country>CN</country>
</address>
</addressbook>
<residence>
<country>CN</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Zhang</last-name>
<first-name>Chao</first-name>
<address>
<city>Hangzhou</city>
<country>CN</country>
</address>
</addressbook>
<residence>
<country>CN</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Li</last-name>
<first-name>Jun</first-name>
<address>
<city>Hangzhou</city>
<country>CN</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Zhang</last-name>
<first-name>Chao</first-name>
<address>
<city>Hangzhou</city>
<country>CN</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Brinks Gilson &#x26; Lione</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>Huawei Technologies Co., Ltd.</orgname>
<role>03</role>
<address>
<city>Shenzhen</city>
<country>CN</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Le</last-name>
<first-name>Dieu-Minh</first-name>
<department>2114</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">The present application provides a method, an apparatus and a system for memory dump processing. The method comprises: invoking a first set of processing units to process a first stage of memory dump processing for each of memory blocks; invoking each set of processing units other than the first set of processing units to process a subsequent processing stage after completing the first stage respectively, to write the memory blocks into a storage device. The technical solutions provided in the present application enable processing each stage for each of the memory blocks in a pipeline manner, avoid instantaneous peak flow of disk I/O transmission and improve memory dump performance.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="141.56mm" wi="224.03mm" file="US08627148-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="223.77mm" wi="180.09mm" file="US08627148-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="232.24mm" wi="181.02mm" file="US08627148-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="93.98mm" wi="170.94mm" file="US08627148-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="228.77mm" wi="159.60mm" orientation="landscape" file="US08627148-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="106.85mm" wi="180.68mm" file="US08627148-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?RELAPP description="Other Patent Relations" end="lead"?>
<heading id="h-0001" level="1">CROSS-REFERENCE TO RELATED APPLICATIONS</heading>
<p id="p-0002" num="0001">This application is a continuation of International Application No. PCT/CN2011/074721, filed on May 26, 2011, which is hereby incorporated by reference in its entireties.</p>
<?RELAPP description="Other Patent Relations" end="tail"?>
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0002" level="1">FIELD OF THE APPLICATION</heading>
<p id="p-0003" num="0002">The embodiments of the present application relate to a data processing technique, specifically to a method and an apparatus for memory dump processing and a memory dump system.</p>
<heading id="h-0003" level="1">BACKGROUND OF THE APPLICATION</heading>
<p id="p-0004" num="0003">Operating system often performs memory dump after system crashes to dump data in memory to a storage device for facilitating later fault location. With the development of hardware technique, memory capacity has been greatly expanded, which may lead to a too long time for system dump. Meanwhile, with the development of modern processor technique, single-core processor has been evolved into multi-core multi-thread processor, which is capable of processing multiple threads in parallel simultaneously, that is, the processor has multiple logical CPUs, each of which is a processing unit. However, traditional dump is handled by a single logical CPU, which causes a great waste of the computing power of system.</p>
<p id="p-0005" num="0004">Some systems in the prior art such as AIX (Advanced Interactive eXecutive), HP-UX (Hewlett Packard Unix), etc provide a function of parallel dump, in which memory is partitioned into blocks and one or more logical CPUs are responsible for the processing operations of various stages for a memory block (such as, pre-processing, filtering, compressing, writing disk) in order to accelerate processing speed. However, since logical CPUs processing respective memory blocks operate in parallel independently from each other, when multiple logical CPUs perform disk I/O transmission simultaneously, instantaneous peak flow of disk I/O transmission may occur, which results in decrease in dump performance. Furthermore, it is necessary for the driver of the storage device to be reentrant in order to assure the concurrent use of the storage device by the multiple logical CPUs.</p>
<heading id="h-0004" level="1">SUMMARY OF THE APPLICATION</heading>
<p id="p-0006" num="0005">The embodiments of the present application provide a method and an apparatus for memory dump processing and a memory dump system to avoid instantaneous peak flow of disk I/O transmission, and thus improve memory dump performance.</p>
<p id="p-0007" num="0006">A method for memory dump processing is provided in an embodiment of the present application, comprising:</p>
<p id="p-0008" num="0007">invoking a first set of processing units to process a first stage of memory dump processing for each of the memory blocks;</p>
<p id="p-0009" num="0008">invoking each of the sets of processing units other than the first set of processing units to process subsequent processing stages after completing the first stage processing, respectively, to write the memory blocks into a storage device, the subsequent processing stages being a next stage to a processed stage,</p>
<p id="p-0010" num="0009">wherein each of the sets of processing units correspondingly processes one stage of the memory dump processing.</p>
<p id="p-0011" num="0010">An apparatus for memory dump processing is provided in an embodiment of the present application, comprising:</p>
<p id="p-0012" num="0011">a initiating processing module for invoking a first set of processing units to process a first stage of memory dump processing for each of the memory blocks;</p>
<p id="p-0013" num="0012">a subsequent processing module for invoking each of the sets of processing units other than the first set of processing units to process the subsequent processing stage after completing processing of the first stage, respectively, to write the memory blocks into a storage device, the subsequent processing stage being a next stage to a processed stage,</p>
<p id="p-0014" num="0013">wherein each of the sets of processing units correspondingly processes one stage of the memory dump processing.</p>
<p id="p-0015" num="0014">A memory dump system is provided in an embodiment of the present application, comprising memory and at least two processing units, and an apparatus for memory dump processing provided according to the embodiment of the present application.</p>
<p id="p-0016" num="0015">It can be seen from the above technical solutions that, a method and an apparatus for memory dump processing and a memory dump system are provided in the embodiments of the present application, in which through invoking a first set of processing units to process a first stage of memory dump processing for each of the memory blocks, the dump processing for each of the memory blocks can be triggered one by one, thereby achieving the serial write of each of the memory blocks into a storage device through disk I/O and avoiding instantaneous peak flow of disk I/O transmission, the driver of the storage device does not need to be reentrant, thus improving memory dump performance. Further, in the embodiments of the present application, each corresponding set of processing units is invoked respectively to process subsequent processing stage for each memory block, allowing each set of processing units to process each stage for each memory block in a pipeline manner, thus improving utilization efficiency of the processing units and avoiding resource waste.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0005" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0017" num="0016">In order to illustrate the embodiments of the present application or technical solutions in the prior art more clearly, accompanying drawings that are required in the description of those embodiments or the prior art will be briefly introduced below. Obviously, the accompanying drawings in the following description merely illustrate some embodiments of the present application, and other accompanying drawings can be conceived based on those drawings without any inventive efforts by those skilled in the art.</p>
<p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. 1</figref> is a flowchart of a method for memory dump processing provided in embodiment 1 of the present application;</p>
<p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. 2</figref> is a flowchart of a method for memory dump processing provided in embodiment 2 of the present application;</p>
<p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. 3</figref> is a flowchart of a method for memory dump processing provided in embodiment 3 of the present application;</p>
<p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. 4</figref> is a structural diagram of an apparatus for memory dump processing provided in embodiment 4 of the present application;</p>
<p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. 5</figref> is a structural diagram of an apparatus for memory dump processing provided in embodiment 5 of the present application; and</p>
<p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. 6</figref> is a structural diagram of a memory dump system provided in embodiment 6 of the present application.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0006" level="1">DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS</heading>
<p id="p-0024" num="0023">A clear and complete description will be given below to the technical solutions of the embodiments of the present application in conjunction with the accompanying drawings of those embodiments. Obviously, those embodiments are merely a portion of but not all of possible embodiments of the present application. Based on the embodiments of the present application, other embodiments may occur to those skilled in the art without any inventive efforts, all of which are encompassed in the protection scope of the present application.</p>
<heading id="h-0007" level="1">Embodiment 1</heading>
<p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. 1</figref> is a flowchart of a method for memory dump processing provided in embodiment 1 of the present application. As shown in <figref idref="DRAWINGS">FIG. 1</figref>, the method for memory dump processing provided in the present embodiment may be specifically applied to a system having multiple processing units (i.e., multiple logical CPUs). After the operating system (OS) of that system crashes, an apparatus for memory dump processing of the OS may control each of the processing units to perform memory dump using this method for memory dump processing. The apparatus for memory dump processing can be implemented in a form of hardware and software and can be integrated into a control apparatus of the OS, or can be provided independently.</p>
<p id="p-0026" num="0025">The method for memory dump processing of this embodiment comprises the following steps.</p>
<p id="p-0027" num="0026">At step <b>10</b>, the apparatus for memory dump processing invokes a first set of processing units to process a first stage of memory dump processing for each of the memory blocks.</p>
<p id="p-0028" num="0027">Specifically, the memory has been partitioned into multiple memory blocks, wherein the partition can be carried out according to various preset rules. The dump processing of each of the memory blocks generally involves at least two stages. For example, typical stages may comprise preprocessing, filtering, compressing and writing disk, etc. Each stage for the memory blocks is processed in a certain order, only after the processing of a previous stage has been finished, a next stage can be processed. In the technical solution employed in this embodiment, a corresponding set of processing units is assigned for each stage, and the number of processing units in each set can be assigned depending on the actual processing speed of the processing units, and can be one or more. For example, the set of processing units corresponding to the preprocessing stage comprises one processing unit, the set of processing units corresponding to the filtering stage comprises one processing unit, the set of processing units corresponding to the compressing stage comprises three processing units, and the set of processing units corresponding to the writing disk stage comprises one processing unit, in order to maintain a relatively consistent processing progress for each of the stages. A first set of processing units corresponding to a first stage is invoked at step <b>10</b> above to process the first stage for each of the memory blocks, specifically, to process each of the memory blocks according to a set order.</p>
<p id="p-0029" num="0028">At step <b>20</b>, each of the sets of processing units other than the first set of processing units is invoked to process the subsequent processing stages after completing the first stage respectively to write the memory blocks into a storage device, the subsequent processing stage is a next stage to a processed stage.</p>
<p id="p-0030" num="0029">Wherein each of the sets of processing units corresponds to one stage of memory dump processing. The first set of processing units is the set of processing units corresponding to a first stage, and is invoked to process the first stage for each of the memory blocks, after the first set of processing units has completed the processing of the first stage for a memory block, the first stage becomes a processed stage, and only by then, other sets of processing units can be invoked to process in sequence the subsequent stages for that memory block, while at this point, the first set of processing units can continuously process the first stage for a next memory block. With the progress of dump, a subsequent processing stage may occur in each memory block, which may correspond to a different stage, and the apparatus for memory dump may invoke different sets of processing units to process those subsequent stages simultaneously.</p>
<p id="p-0031" num="0030">The method for memory dump processing will be described below by means of an example, in which the memory dump processing of memory blocks comprises four stages: preprocessing, filtering, compressing and writing disk. The sets of processing units corresponding to these four stages are a first set of processing units, a second set of processing units, a third set of processing units, and a fourth set of processing units respectively. The particular procedure of memory dump performed through the method for memory dump processing provided in this embodiment is as follow: at first, the first set of processing units is invoked to process the preprocessing stage for a first memory block, after completing the processing of the preprocessing stage, the preprocessing stage becomes a processed stage, and the filtering stage for the first memory block is the subsequent processing stage. At this point, according to the sequence of memory blocks, the first set of processing units is invoked to process the preprocessing stage for a second memory block, at the same time, the second set of processing units can be invoked to process the filtering stage for the first memory block. After completing the filtering stage for the first memory block, the compressing stage becomes the subsequent processing stage, and after completing the preprocessing stage for the second memory block, the filtering stage becomes the subsequent processing stage. At this point, according to the sequence of memory blocks, the first set of processing units is invoked to process the preprocessing stage for a third memory block, at the same time, the third set of processing units is invoked to process the compressing stage for the first memory block, and the second set of processing units is invoked to process the filtering stage for the second memory block. Subsequent operation procedures are performed similarly, after completing the compressing stage for the first memory block, the fourth set of processing units is invoked to process the writing disk stage for the first memory block to write the first memory block into the storage device, until then the dump processing of the first memory block is finished. The third set of processing units is invoked to process the compressing stage for the second memory block after completing the filtering stage of the second memory block; after the completing the preprocessing stage for the third memory block, the second set of processing units is invoked to process the filtering stage for the third memory block, at the same time, the first set of processing units is invoked to process the preprocessing stage for a fourth memory block. Thus, a pipeline processing of each stage for each of the memory blocks is achieved in sequence, by which all the memory blocks are written into the storage device through disk I/O in sequence.</p>
<p id="p-0032" num="0031">Through invoking the first set of processing units to process the first stage for each of the memory blocks, the method for memory dump processing provided in this embodiment can trigger the dump processing of each of the memory blocks one by one, thereby achieving the serial writing of each of the memory blocks into a storage device through disk I/O and avoiding instantaneous peak flow of disk I/O transmission, the driver of the storage device does not need to be reentrant, and memory dump performance is improved. Furthermore, in this embodiment, a corresponding set of processing units is invoked to process a subsequent processing stage for each of the memory blocks respectively, which can realize processing each stage for each of the memory blocks by each set of processing units in a pipeline manner, thus improving utilization efficiency of the processing units and avoiding resource waste.</p>
<heading id="h-0008" level="1">Embodiment 2</heading>
<p id="p-0033" num="0032"><figref idref="DRAWINGS">FIG. 2</figref> is a flowchart of a method for memory dump processing provided in embodiment 2 of the present application. The present embodiment differs from embodiment 1 in that, step <b>20</b> of the above embodiment of invoking each of the sets of processing units other than the first set of processing units to process a subsequent stage after completing the first stage respectively may specifically comprise: when the apparatus for memory dump processing identifies that there has subsequent processing stage for the memory blocks, invoking a corresponding set of processing units to process the subsequent processing stage, and after completing the process, updating a next stage as the subsequent stage.</p>
<p id="p-0034" num="0033">Through identifying and updating the subsequent stage for the memory blocks, the pipeline processes of each stage for each of the memory blocks can be synchronized.</p>
<p id="p-0035" num="0034">In the present embodiment, the stages may specifically comprise preprocessing stage, filtering stage, compressing stage and writing disk stage. The preprocessing stage, filtering stage, compressing stage and writing disk stage are processed in sequence, and the first stage is preprocessing stage, and the subsequent processing stage is filtering stage, compressing stage or writing disk stage. For example, after completing the preprocessing stage as the first stage, filtering stage becomes the subsequent processing stage, and after completing the filtering stage, the compressing stage becomes the subsequent stage, and so on. The arrangement of stages can be set depending on the practical requirement of memory dump, and is not limited to this embodiment.</p>
<p id="p-0036" num="0035">In the present embodiment, preferably, a storage bit is correspondingly provided for each stage of each of the memory blocks for storing a processing state flag, when the apparatus for memory dump processing identifies that a memory block has a subsequent processing stage, a corresponding set of processing units is invoked to perform a corresponding process, and after completing the process, the operation of updating a next stage as the subsequent processing stage may specifically comprise the following steps:</p>
<p id="p-0037" num="0036">step <b>301</b>: when the apparatus for memory dump processing identifies the subsequent processing stage according to the processing state flag of each storage bit for each of the memory blocks, the corresponding set of processing units is invoked to perform process;</p>
<p id="p-0038" num="0037">step <b>302</b>: after completing the subsequent processing stage currently to the memory block, the apparatus for memory dump processing updates the processing state flag corresponding to the memory block to update a next stage as the subsequent processing stage.</p>
<p id="p-0039" num="0038">Specifically, the processing state flag is used to indicate whether a certain stage of a memory block has been completed. Specifically, storage bit can be provided in a preserved storage area of the memory, which is not invoked during the normal operation of the system, and only when memory dump is needed due to system crash, the storage bit in the preserved storage area is used to store the processing state flag. The storage bit can also be provided in other storage units, so long as it can be used to store processing state flag in the case of system crash and is not limited to the present embodiment. A method for setting a storage bit may be specifically as follow.</p>
<p id="p-0040" num="0039">Given that the memory is partitioned into totally 1024 memory blocks and each of the memory blocks needs to be processed in four stages, it is necessary to provide three processing state flags for each of the memory blocks, which correspond to the processing states of the first three stages respectively. If the state of a certain stage is unprocessed, the processing state flag corresponding to that stage is &#x201c;0&#x201d;; after completing the process of that stage, the processing state flag corresponding to that stage is updated to &#x201c;1&#x201d;; thereby, a next stage to that stage for the memory block can be processed, achieving the synchronization operation of various stages. Storing one processing state flag by one storage bit totally needs 1024*3=3072 storage bits, and a preserved area of at least 384 bytes is needed if one storage bit has 1 bit. Before starting memory dump operation, specifically, the processing state flags of all storage bits in the preserved storage area can be initialized to &#x201c;0&#x201d; in order to update those processing state flags to synchronize various stages during memory dump.</p>
<p id="p-0041" num="0040">Through setting processing state flags, in the case of system crash, errors occurred due to synchronizing various stages in the pipeline process with system signal amount can be avoided, the accuracy of memory dump processing is improved, and memory dump performance is further improved. The synchronization of various stages in the pipeline process also can be realized with data structures such as queue, stack, etc, and is not limited to the present embodiment.</p>
<p id="p-0042" num="0041">In the present embodiment, the apparatus for memory dump processing invoking a first set of processing units to process a first stage of memory dump processing for each of the memory blocks of step <b>10</b> may specifically comprises:</p>
<p id="p-0043" num="0042">step <b>101</b>: the apparatus for memory dump processing numbers the memory blocks according to their order;</p>
<p id="p-0044" num="0043">step <b>102</b>: the apparatus for memory dump processing invokes a first set of processing units to process the first stage of memory dump processing for each of the memory blocks according to its numbered order.</p>
<p id="p-0045" num="0044">Through numbering the memory blocks according to their order, and invoking the first set of processing units to process the first stage of memory dump processing for each of the memory blocks according to its numbered order, subsequent processing stages are also processed for each of the memory blocks according to its order, as a result, file data in memory can be recovered without any special process after writing the memory blocks into the storage device.</p>
<heading id="h-0009" level="1">Embodiment 3</heading>
<p id="p-0046" num="0045"><figref idref="DRAWINGS">FIG. 3</figref> is a flowchart of a method for memory dump processing provided in embodiment 3 of the present application. The method for memory dump processing provided in this embodiment may specifically further comprise the following steps:</p>
<p id="p-0047" num="0046">step <b>40</b>: the apparatus for memory dump processing detects load state of each of the sets of processing units and generates a detection result;</p>
<p id="p-0048" num="0047">step <b>50</b>: the apparatus for memory dump processing dynamically adjusts the number of processing units in each of the sets of processing units according to the detection result.</p>
<p id="p-0049" num="0048">Through detecting the load state of each of the sets of processing units, it is possible to dynamically assign processing units for each stage to keep the balance of the processing procedure and avoid the occurrence of bottleneck. Specifically, it can be set in advance that the set of processing units corresponding to preprocessing stage comprises one processing unit, the set of processing units corresponding to filtering stage comprises one processing unit, the set of processing units corresponding to compressing stage comprises three processing units, and the set of processing units corresponding to writing disk stage comprises one processing unit. During memory dump, the number of processing units in each of the sets of processing units can be dynamically adjusted according to the load state of each of the sets of processing units, and when the processing speed of compressing stage is too fast and the processing speed of filtering stage is relatively slow, the operation of one of the three processing units for the compressing stage can be stopped to release the resource of that processing unit, and that processing unit can be used in the process of the filtering stage. It is also possible to set in advance that the number of processing units in each of the sets of processing units corresponding to each of the stages is 1, and during memory dump, the number of processing units in each of the sets of processing units is dynamically adjusted according to the load state of each of the sets of processing units. It is noted that, the steps that the apparatus for memory dump processing detects the load state of each of the sets of processing units, and adjusts the number of processing units in each of the sets of processing units can be carried out during the memory dump, and do not necessarily have a timing relationship with the above steps of memory dump.</p>
<p id="p-0050" num="0049">In this embodiment, preferably, the step <b>40</b> that the apparatus for memory dump processing detects the load state of each of the sets of processing units and generates a detection result may specifically comprise:</p>
<p id="p-0051" num="0050">the apparatus for memory dump processing detecting the average time of processing a stage corresponding to a set number of memory blocks by each of the sets of processing units as the detection result.</p>
<p id="p-0052" num="0051">Through detecting the average time of processing a stage corresponding to a set number of memory blocks by each of the sets of processing units as the detection result, the load state of each of the processing units is reflected, the operation is simple and easy to realize.</p>
<p id="p-0053" num="0052">In this embodiment, when the subsequent processing stage is the writing disk stage, each of the sets of processing units other than the first set of processing units is invoked to process the subsequent processing stages after completing the first stage respectively to write the memory blocks into a storage device may specifically comprise the following step:</p>
<p id="p-0054" num="0053">the apparatus for memory dump processing invokes the set of processing units corresponding to the writing disk stage to perform the process of the writing disk stage according to the number of disk I/Os and memory block numbers, so as to write the memory blocks into the storage device through disk I/Os.</p>
<p id="p-0055" num="0054">Multiple disk I/Os may be available in practical application. The process of writing disk stage may be performed according to the number of disk I/Os and memory block numbers when writing memory blocks into a storage device through multiple disk I/Os, so as to ensure the storage order of the memory blocks in the storage device.</p>
<p id="p-0056" num="0055">In this embodiment, preferably, performing the process of the writing disk stage according to the number of disk I/Os and memory block numbers to write memory blocks into a storage device through multiple disk I/Os may specifically comprise the following step:</p>
<p id="p-0057" num="0056">taking modulus of a memory block number and the number of disk I/Os, and writing the memory block into the storage device through a corresponding disk I/O according to the result of taking modulus.</p>
<p id="p-0058" num="0057">Specifically, for example, the memory block number is 1 to 1024, the number of disk I/Os is 2, that is, disk I/O 0 and disk I/O 1. The memory block 1 is numbered by 1 and is written into the storage device through disk I/O 1 since 1 modulo 2=1; the memory block 2 is numbered by 2 and is written into the storage device through disk I/O 0 since 2 modulo 2=0.</p>
<p id="p-0059" num="0058">In the present embodiment, before the apparatus for memory dump processing invoking a first set of processing units to process the first stage of memory dump processing for each of the memory blocks at the step <b>10</b>, there specifically may comprise a step of partitioning memory blocks:</p>
<p id="p-0060" num="0059">at step <b>60</b>, the apparatus for memory dump processing partitioning the memory into at least two memory blocks according to the bandwidth of the disk I/O to be written.</p>
<p id="p-0061" num="0060">Partitioning the memory according to the bandwidth of the disk I/O to be written may avoid decrease of the memory dump performance due to disk I/O congestion.</p>
<p id="p-0062" num="0061">In this embodiment, preferably, the apparatus for memory dump processing partitioning the memory into at least two memory blocks according to the bandwidth of the disk I/O to be written at step <b>60</b> may specifically comprise:</p>
<p id="p-0063" num="0062">step <b>601</b>: the apparatus for memory dump processing calculating the capacity of a memory block based on the bandwidth of the disk I/O to be written, wherein the capacity of the memory block subjected to various stages before the writing disk stage is not larger than the bandwidth of the disk I/O;</p>
<p id="p-0064" num="0063">step <b>602</b>: the apparatus for memory dump processing partitioning the memory based on the calculated capacity of the memory block.</p>
<p id="p-0065" num="0064">For example, if the bandwidth of the disk I/O to be written is 20 M/s, the ratio of the filtering stage is 50%, and the ratio of compressing stage is 50%, the capacity of the partitioned memory block is 20/50%/50%=80M, and the bandwidth of the disk I/O can be effectively utilized through partitioning the memory based on that capacity of the memory block.</p>
<heading id="h-0010" level="1">Embodiment 4</heading>
<p id="p-0066" num="0065"><figref idref="DRAWINGS">FIG. 4</figref> is a structural diagram of an apparatus for memory dump processing provided in embodiment 4 of the present application. As shown in <figref idref="DRAWINGS">FIG. 4</figref>, the apparatus for memory dump processing provided in this embodiment may specifically implement the method for memory dump processing provided in any embodiment of the present application, but is not limited thereto.</p>
<p id="p-0067" num="0066">The apparatus for memory dump processing provided in this embodiment comprises a initiating process module <b>11</b> and a subsequent process module <b>12</b>. The initiating process module <b>11</b> is used to invoke a first set of processing units to process a first stage of memory dump processing for each of the memory blocks. In the technical solution applied in this embodiment, the apparatus for memory dump processing can assign a corresponding set of processing units <b>13</b> for each stage in advance, the number of processing units in each of the sets of processing units can be assigned according to the practical processing speed of the processing units, which can be one or more. The subsequent process module <b>12</b> is used to invoke each of the sets of processing units other than the first set of processing units to process the subsequent processing stage after completing the first stage so as to write the memory blocks into a storage device, the subsequent stage being a next stage to a processed stage. Each of the sets of processing units correspondingly processes one stage of the memory dump processing.</p>
<p id="p-0068" num="0067">Through providing the initiating process module <b>11</b> to invoke a first set of processing units to process a first stage for each of the memory blocks, the apparatus for memory dump processing of this embodiment can trigger dump processing for each of the memory blocks one by one, thereby achieving the serial writing of each of the memory blocks to a storage device through disk I/O, instantaneous peak flow of disk I/O transmission is avoid, the driver of the storage device dose not need to be reentrant, and the memory dump performance is improved. Further, in this embodiment, through providing the subsequent process module <b>12</b> to invoke each corresponding set of processing units to process a subsequent stage of each of the memory blocks respectively, it is allowed to process each dump stage for each of the memory blocks by each set of processing units <b>13</b> in a pipeline manner, thereby improving utilization efficiency of the processing units and avoiding resource waste.</p>
<heading id="h-0011" level="1">Embodiment 5</heading>
<p id="p-0069" num="0068"><figref idref="DRAWINGS">FIG. 5</figref> is a structural diagram of an apparatus for memory dump processing provided in embodiment 5 of the present application. In this embodiment, a storage bit is provided for each stage of each of the memory blocks, for storing a processing state flag which is specifically used to indicate whether a certain stage of a certain memory block has been completed. The storage bit can be specifically provided in a preserved memory area of the memory <b>15</b> which is not invoked during the normal operation of the system. The storage bits in the preserved storage area are used to store processing state flags only when memory dump is needed due to system crash. The storage bits can be provided in other storage units, so long as they can be used to store processing state flags in the case of system crash. This embodiment is not intended to be limiting.</p>
<p id="p-0070" num="0069">The subsequent process module <b>12</b> of the apparatus for memory dump processing provided in this embodiment may comprise a subsequent stage processing unit <b>121</b> and a storage bit updating unit <b>122</b>. The subsequent stage processing unit <b>121</b> is used to invoke a corresponding set of processing units to perform a process when a subsequent stage is identified based on the processing state flag of each storage bit of each of the memory blocks. The storage bit updating unit <b>122</b> is used to update the processing state flag corresponding to memory block to update a next stage as the subsequent processing stage after completing the subsequent processing stage currently to the memory block.</p>
<p id="p-0071" num="0070">Through providing processing state flags, in the case of system crash, errors occurred due to synchronizing various stages in the pipeline process by means of system signal amount can be avoided, accuracy of the memory dump processing is improved and memory dump performance is further improved. The synchronization of various stages in the pipeline process also can be realized with data structures such as queue, stack, etc, and is not limited to this embodiment.</p>
<p id="p-0072" num="0071">In this embodiment, the initiating process module <b>11</b> may specifically comprise a numbering unit <b>111</b> for numbering the memory blocks according to their order, and an initiating unit <b>112</b> for invoking a first set of processing units to process the first stage of memory dump processing for each of the memory blocks according to their numbering order.</p>
<p id="p-0073" num="0072">Through numbering memory blocks according to the order of each of the memory blocks by the numbering unit <b>111</b>, and invoking the first set of processing units to process the first stage of memory dump processing for each of the memory blocks according to their numbering order by the initiating unit <b>112</b>, subsequent stages are also processed for each of the memory blocks according to their order, as a result, file data in the memory can be recovered without any special process upon writing the memory blocks into the storage device <b>14</b>.</p>
<p id="p-0074" num="0073">In this embodiment, the apparatus for memory dump processing may specifically further comprise a load detecting module <b>17</b> for detecting the load state of each set of processing units and generating a detection result, and a load adjusting module <b>18</b> for dynamically adjusting the number of processing units in each set of processing units according to the detection result.</p>
<p id="p-0075" num="0074">Through detecting the load state of each set of processing units by the load detecting module <b>17</b>, the load adjusting module <b>18</b> can dynamically assign processing units for each stage, thereby keeping the balance of the processing procedure, avoiding the occurrence of bottleneck and efficiently using the processing resource.</p>
<p id="p-0076" num="0075">In this embodiment, preferably, the load detecting module <b>17</b> may detect the average time of processing stages corresponding to a set number of memory blocks by each set of processing units as the detection result. Through detecting the average time of processing stages corresponding to a set number of memory blocks by each set of processing units as the detection result to reflect the load state of each processing unit, the operation is simple and easy to realize.</p>
<p id="p-0077" num="0076">In this embodiment, the subsequent stage processing unit <b>121</b> at least comprises a writing disk processing subunit <b>1211</b> for, when a subsequent stage which is the writing disk stage is identified based on the processing state flag of each storage bit of each of the memory blocks, invoking the set of processing units corresponding to the writing disk stage to perform process and instructing to perform the process of the writing disk stage according to the number of disk I/Os and memory block numbering, so as to write the memory blocks into the storage device <b>14</b> through disk I/O.</p>
<p id="p-0078" num="0077">Multiple disk I/Os may be available in practical applications. When writing memory blocks into the storage device <b>14</b> through multiple disk I/Os, the writing disk subunit <b>1211</b> may instruct a set of processing units <b>13</b> corresponding to the writing disk stage to perform the process of the writing disk stage according to the number of disk I/Os and memory block numbering, so as to ensure the storage order of the memory blocks in the storage device.</p>
<p id="p-0079" num="0078">In this embodiment, the apparatus for memory dump processing may further comprise a memory partitioning module <b>16</b> for partitioning the memory <b>15</b> into at least two memory blocks according to the bandwidth of the disk I/O to be written. Partitioning the memory <b>15</b> according to the bandwidth of the disk I/O to be written may avoid lowering memory dump performance due to disk I/O congestion.</p>
<heading id="h-0012" level="1">Embodiment 6</heading>
<p id="p-0080" num="0079"><figref idref="DRAWINGS">FIG. 6</figref> is a structural diagram of a memory dump system provided in embodiment 6 of the present application. As shown in <figref idref="DRAWINGS">FIG. 6</figref>, the memory dump system provided in this embodiment comprises memory <b>15</b> and at least two processing units <b>23</b>, it may further comprise the apparatus for memory dump processing <b>21</b> provided in any embodiment of the present application. The above embodiments can be consulted for the specific operations of dumping the memory <b>15</b> through invoking the processing units <b>23</b> by the apparatus for memory dump processing <b>21</b> in the memory dump system provided in this embodiment, which will not be described in detail herein.</p>
<p id="p-0081" num="0080">The memory dump system provided in this embodiment can trigger dump processing for each of the memory blocks one by one, so as to achieve serially writing each of the memory blocks into a storage device <b>14</b> through disk I/O, instantaneous peak flow of disk I/O transmission is avoided, the driver of the storage device <b>14</b> does not need to be reentrant, and memory dump performance is improved. Further, each stage for each memory block can be processed by each set of processing units <b>13</b> in a pipeline manner, thereby improving the utilization efficiency of the processing units and avoiding resource waste.</p>
<p id="p-0082" num="0081">The method and apparatus for memory dump processing and memory dump system provided in the embodiments of the present application achieve serial dump for memory blocks through the cooperation of multiple processing units, so that peak disk I/O traffic is dispersed into multiple stages, instantaneous peak flow of disk I/O transmission is avoided, the driver of the storage device does not need to be reentrant, and memory dump performance is improved. Serial dump of memory files can be achieved, and a simple processing principle is provided for multiple disk I/Os. The number of the processing units in each set of processing units is dynamically adjusted according to the load state of each stage, thereby avoiding the occurrence of bottleneck, and achieving the efficient utilization of system resources.</p>
<p id="p-0083" num="0082">Those ordinary skilled in the art may appreciate that all or some of the steps of the above method embodiments can be realized by hardware relative to program instructions, the program previously mentioned can be stored in a computer readable storage medium, when being executed, the program can implement the steps of the above method embodiment; the storage medium previously mentioned comprises: various medium that can store program codes such as ROM, RAM, magnetic disk or optical disk.</p>
<p id="p-0084" num="0083">At last, it should be noted that the above embodiments are merely used to illustrate the technical solutions of the present application and are not limiting; although the present application has been described in detail with reference of the above embodiments, those ordinary skilled in the art may appreciate that it is possible to make modifications to the technical solutions described in the previous embodiments or make equivalent substitutions to some technical features therein; and corresponding technical solutions with those modifications and substitutions fall in the spirit and scope of the technical solutions of various embodiments of the present application.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A method for memory dump processing, comprising:
<claim-text>logically dividing a central processing unit (CPU) into a plurality sets of identical logical processing units;</claim-text>
<claim-text>invoking a first set of logical processing units from the plurality of identical logical processing units to process a first stage of memory dump processing for each of memory blocks;</claim-text>
<claim-text>invoking each subsequent set of logical processing units other than the first set of logical processing units to process a subsequent processing stage after completing the first stage respectively; and</claim-text>
<claim-text>writing the memory blocks into a storage device, wherein the subsequent processing stage being a next stage to a processed stage, wherein said each of the plurality sets of identical logical processing units correspondingly processes one stage of the memory dump processing, so as to avoid a peak flow of I/O data transmission into the storage device.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method for memory dump processing according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the invoking of each subsequent set of logical processing units other than the first set of logical processing units to process a subsequent processing stage after completing the first stage respectively, comprising:
<claim-text>when it is identified that the memory blocks have the subsequent processing stage, invoking a corresponding set of logical processing units to perform the memory dump processing, and after completing the memory dump processing, updating a next stage as the subsequent processing stage.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method for memory dump processing according to <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein a storage bit is correspondingly provided for each stage of each of the memory blocks for storing a processing state flag, and
<claim-text>when it is identified that the memory blocks have the subsequent processing stage, invoking a corresponding set of logical processing units to perform the memory dump processing, and</claim-text>
<claim-text>after completing the memory dump processing, the updating of the next stage as the subsequent processing stage comprising:
<claim-text>when the subsequent processing stage is identified according to the processing state flag of each storage bit for each memory block, invoking a corresponding set of logical processing units to perform the memory dump processing;</claim-text>
</claim-text>
<claim-text>after completing the subsequent processing stage currently to the memory block, updating the processing state flag corresponding to the memory block to update a next stage as the subsequent processing stage.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method for memory dump processing according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the invoking of the first set of logical processing units to process the first stage of memory dump processing for each of memory blocks comprising:
<claim-text>numbering the memory blocks according to their order;</claim-text>
<claim-text>invoking the first set of logical processing units to process the first stage of memory dump processing for each of the memory blocks according to the numbering order.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method for memory dump processing according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:
<claim-text>detecting a load state of each set of logical processing units and generating a detection result;</claim-text>
<claim-text>dynamically adjusting a number of the logical processing units in the each set of logical processing units according to the detection result.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method for memory dump processing according to <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein the detecting of the load state of the each set of logical processing units and the generating of the detection result comprising:
<claim-text>detecting an average time of processing a corresponding stage of a set number of memory blocks by the each set of logical processing units as the detection result.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The method for memory dump processing according to <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein when the subsequent logical processing stage is a writing disk stage, the invoking of the each set of logical processing units other than the first set of logical processing units to process the subsequent logical processing stage after completing the first stage respectively, and the writing of the memory blocks into the storage device comprising:
<claim-text>invoking the set of logical processing units corresponding to the writing disk stage in order to perform the process of the writing disk stage according to a number of disk I/Os and memory block numbering, in order to write the memory blocks into the storage device through the disk I/Os.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The memory dump method according to <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein the performing of the process of the writing disk stage according to the number of disk I/Os and memory block numbering, in order to write the memory blocks into the storage device through the disk I/Os comprising:
<claim-text>taking modulus of memory block numbering and the number of disk I/Os, and writing the memory block into the storage device through a corresponding disk I/O according to the result of modulus taking.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The memory dump method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein before the invoking of the first set of logical processing units to process a first stage of memory dump processing for each of the memory blocks, the method further comprising:
<claim-text>partitioning a memory into at least two memory blocks according to a bandwidth of disk I/Os to be written.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The method for memory dump processing according to <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the partitioning of the memory into the at least two memory blocks according to the bandwidth of the disk I/Os to be written, comprising:
<claim-text>calculating capacity of the memory block based on the bandwidth of the disk I/Os to be written, wherein the capacity of the memory block subjected to various stages before a writing disk stage is not larger than the bandwidth of the disk I/Os; and</claim-text>
<claim-text>partitioning the memory based on the calculated memory block capacity.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The method for memory dump processing according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein:
<claim-text>the stages comprise a preprocessing stage, a filtering stage, a compressing stage, and a writing disk stage;</claim-text>
<claim-text>the preprocessing stage, the filtering stage, the compressing stage, and the writing disk stage being processed in order;</claim-text>
<claim-text>the first stage being the preprocessing stage, and the subsequent processing stage being the filtering stage, the compressing stage, or the writing disk stage.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. An apparatus for memory dump processing, comprising:
<claim-text>a central processing unit (CPU) logically divided into a plurality sets of identical logical processing units;</claim-text>
<claim-text>an initiating processing module, which invokes a first set of logical processing units from the plurality of identical logical processing units to process a first stage of memory dump processing for each of memory blocks;</claim-text>
<claim-text>a subsequent processing module, which invokes each subsequent set of logical processing units other than the first set of logical processing units to process a subsequent processing stage after the completing the first stage respectively, in order to write the memory blocks into a storage device, wherein the subsequent processing stage being a next stage to a processed stage,</claim-text>
<claim-text>wherein each of the plurality sets of identical logical processing units correspondingly processes one stage of the memory dump processing, so as to avoid a peak flow of I/O data transmission into the storage device.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The apparatus for memory dump processing according to <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein a storage bit is provided for each stage of each memory block for storing a processing state flag, and the subsequent processing module comprises:
<claim-text>a subsequent stage processing unit, which invokes a corresponding set of logical processing units to perform the memory dump processing when the subsequent processing stage is identified based on the processing state flag of each storage bit of every memory block;</claim-text>
<claim-text>a storage bit updating unit, which updates the processing state flag corresponding to the memory block to update a next stage as the subsequent processing stage after completing the subsequent processing stage currently to the memory block.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The apparatus for memory dump processing according to <claim-ref idref="CLM-00012">claim 12</claim-ref> wherein the initiating processing module comprises:
<claim-text>a numbering unit, which numbers the memory blocks according to their order; and</claim-text>
<claim-text>an initiating unit, which invokes the first set of logical processing units to process the first stage of memory dump processing for each of the memory blocks according to the numbering order.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The apparatus for memory dump processing according to <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein further comprising:
<claim-text>a load detecting module, which detects a load state of each set of logical processing units and generating a detection result; and</claim-text>
<claim-text>a load adjusting module, which dynamically adjusts a number of logical processing units in the each set of logical processing units according to the detection result.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The apparatus for memory dump processing according to <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein:
<claim-text>the subsequent stage logical processing unit at least comprises a writing disk subunit such that, when the subsequent processing stage is identified based on the processing state flag of each storage bit of each of the memory blocks and the subsequent processing stage is the writing disk stage, invokes the set of logical processing units corresponding to the writing disk stage to perform the memory dump processing and instructing to perform the memory dump processing of the writing disk stage according to a number of disk I/Os and memory block numbering, so as to write the memory blocks into the storage device through the disk I/Os.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The apparatus for memory dump processing according to <claim-ref idref="CLM-00012">claim 12</claim-ref>, further comprising:
<claim-text>a memory partitioning module, which partitions a memory into at least two memory blocks according to bandwidth of disk I/Os to be written.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. A memory dump system, comprising a memory and a central processing unit (CPU) logically divided into at least two sets of identical logical processing units for memory dump processing, comprising:
<claim-text>an initiating processing module, which invokes a first set of logical processing units to process a first stage of memory dump processing for each of memory blocks;</claim-text>
<claim-text>a subsequent processing module which invokes each set of logical processing units other than the first set of logical processing units to process a subsequent processing stage after the completing the first stage respectively, in order to write the memory blocks into a storage device, the subsequent processing stage being a next stage to a processed stage,</claim-text>
<claim-text>wherein each set of logical processing units correspondingly processes one stage of the memory dump processing, so as to avoid a peak flow of I/O data transmission into the storage device.</claim-text>
</claim-text>
</claim>
</claims>
</us-patent-grant>

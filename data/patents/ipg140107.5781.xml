<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08626887-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08626887</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>11452181</doc-number>
<date>20060613</date>
</document-id>
</application-reference>
<us-application-series-code>11</us-application-series-code>
<us-term-of-grant>
<us-term-extension>1452</us-term-extension>
<disclaimer>
<text>This patent is subject to a terminal disclaimer.</text>
</disclaimer>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>15</main-group>
<subgroup>173</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>709223</main-classification>
<further-classification>705 10</further-classification>
<further-classification>705  7</further-classification>
<further-classification>709224</further-classification>
</classification-national>
<invention-title id="d2e55">Porting of information technology structures</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>5960200</doc-number>
<kind>A</kind>
<name>Eager et al.</name>
<date>19990900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>6031984</doc-number>
<kind>A</kind>
<name>Walser</name>
<date>20000200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>6041041</doc-number>
<kind>A</kind>
<name>Ramanathan et al.</name>
<date>20000300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>6151582</doc-number>
<kind>A</kind>
<name>Huang et al.</name>
<date>20001100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>6161101</doc-number>
<kind>A</kind>
<name>Guinta et al.</name>
<date>20001200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>6167564</doc-number>
<kind>A</kind>
<name>Fontana et al.</name>
<date>20001200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717104</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>6249769</doc-number>
<kind>B1</kind>
<name>Ruffin et al.</name>
<date>20010600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>6256773</doc-number>
<kind>B1</kind>
<name>Bowman-Amuah</name>
<date>20010700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>6260065</doc-number>
<kind>B1</kind>
<name>Leiba et al.</name>
<date>20010700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>6621505</doc-number>
<kind>B1</kind>
<name>Beauchamp et al.</name>
<date>20030900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>6968324</doc-number>
<kind>B1</kind>
<name>Ruffin et al.</name>
<date>20051100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>6983449</doc-number>
<kind>B2</kind>
<name>Newman</name>
<date>20060100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717121</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00013">
<document-id>
<country>US</country>
<doc-number>7143420</doc-number>
<kind>B2</kind>
<name>Radhakrishnan</name>
<date>20061100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00014">
<document-id>
<country>US</country>
<doc-number>7162427</doc-number>
<kind>B1</kind>
<name>Myrick et al.</name>
<date>20070100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00015">
<document-id>
<country>US</country>
<doc-number>7222255</doc-number>
<kind>B1</kind>
<name>Claessens et al.</name>
<date>20070500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00016">
<document-id>
<country>US</country>
<doc-number>7224968</doc-number>
<kind>B2</kind>
<name>Dobson et al.</name>
<date>20070500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00017">
<document-id>
<country>US</country>
<doc-number>7313568</doc-number>
<kind>B2</kind>
<name>Cutlip et al.</name>
<date>20071200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00018">
<document-id>
<country>US</country>
<doc-number>7406534</doc-number>
<kind>B2</kind>
<name>Syv&#xe4;nne et al.</name>
<date>20080700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00019">
<document-id>
<country>US</country>
<doc-number>7437675</doc-number>
<kind>B2</kind>
<name>Casati et al.</name>
<date>20081000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00020">
<document-id>
<country>US</country>
<doc-number>7523092</doc-number>
<kind>B2</kind>
<name>Andreev et al.</name>
<date>20090400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00021">
<document-id>
<country>US</country>
<doc-number>7523190</doc-number>
<kind>B1</kind>
<name>Bickerstaff et al.</name>
<date>20090400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00022">
<document-id>
<country>US</country>
<doc-number>7568022</doc-number>
<kind>B2</kind>
<name>Andreev et al.</name>
<date>20090700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00023">
<document-id>
<country>US</country>
<doc-number>7594016</doc-number>
<kind>B1</kind>
<name>Zhou et al.</name>
<date>20090900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00024">
<document-id>
<country>US</country>
<doc-number>7797739</doc-number>
<kind>B2</kind>
<name>Andreev et al.</name>
<date>20100900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00025">
<document-id>
<country>US</country>
<doc-number>7886040</doc-number>
<kind>B2</kind>
<name>Andreev et al.</name>
<date>20110200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00026">
<document-id>
<country>US</country>
<doc-number>7937462</doc-number>
<kind>B2</kind>
<name>Andreev et al.</name>
<date>20110500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00027">
<document-id>
<country>US</country>
<doc-number>8028334</doc-number>
<kind>B2</kind>
<name>Andreev et al.</name>
<date>20110900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00028">
<document-id>
<country>US</country>
<doc-number>2002/0069102</doc-number>
<kind>A1</kind>
<name>Vellante et al.</name>
<date>20020600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00029">
<document-id>
<country>US</country>
<doc-number>2002/0104071</doc-number>
<kind>A1</kind>
<name>Charisius et al.</name>
<date>20020800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00030">
<document-id>
<country>US</country>
<doc-number>2002/0129001</doc-number>
<kind>A1</kind>
<name>Levkoff et al.</name>
<date>20020900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00031">
<document-id>
<country>US</country>
<doc-number>2002/0129345</doc-number>
<kind>A1</kind>
<name>Tilden et al.</name>
<date>20020900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717162</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00032">
<document-id>
<country>US</country>
<doc-number>2002/0194147</doc-number>
<kind>A1</kind>
<name>Ricke</name>
<date>20021200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>706 53</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00033">
<document-id>
<country>US</country>
<doc-number>2002/0198727</doc-number>
<kind>A1</kind>
<name>Ann et al.</name>
<date>20021200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00034">
<document-id>
<country>US</country>
<doc-number>2003/0140128</doc-number>
<kind>A1</kind>
<name>Cox et al.</name>
<date>20030700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00035">
<document-id>
<country>US</country>
<doc-number>2003/0149685</doc-number>
<kind>A1</kind>
<name>Trossman et al.</name>
<date>20030800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00036">
<document-id>
<country>US</country>
<doc-number>2003/0158842</doc-number>
<kind>A1</kind>
<name>Levy et al.</name>
<date>20030800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00037">
<document-id>
<country>US</country>
<doc-number>2003/0172145</doc-number>
<kind>A1</kind>
<name>Nguyen</name>
<date>20030900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709223</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00038">
<document-id>
<country>US</country>
<doc-number>2003/0197743</doc-number>
<kind>A1</kind>
<name>Hill et al.</name>
<date>20031000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00039">
<document-id>
<country>US</country>
<doc-number>2004/0049295</doc-number>
<kind>A1</kind>
<name>Wojsznis et al.</name>
<date>20040300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00040">
<document-id>
<country>US</country>
<doc-number>2004/0156391</doc-number>
<kind>A1</kind>
<name>Bushnell</name>
<date>20040800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00041">
<document-id>
<country>US</country>
<doc-number>2004/0230464</doc-number>
<kind>A1</kind>
<name>Bliss et al.</name>
<date>20041100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>705  7</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00042">
<document-id>
<country>US</country>
<doc-number>2004/0267679</doc-number>
<kind>A1</kind>
<name>Fromherz et al.</name>
<date>20041200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00043">
<document-id>
<country>US</country>
<doc-number>2005/0002380</doc-number>
<kind>A1</kind>
<name>Miller et al.</name>
<date>20050100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00044">
<document-id>
<country>US</country>
<doc-number>2005/0027858</doc-number>
<kind>A1</kind>
<name>Sloth et al.</name>
<date>20050200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00045">
<document-id>
<country>US</country>
<doc-number>2005/0049910</doc-number>
<kind>A1</kind>
<name>Lancaster et al.</name>
<date>20050300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00046">
<document-id>
<country>US</country>
<doc-number>2005/0066015</doc-number>
<kind>A1</kind>
<name>Dandekar et al.</name>
<date>20050300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00047">
<document-id>
<country>US</country>
<doc-number>2005/0165922</doc-number>
<kind>A1</kind>
<name>Hatano</name>
<date>20050700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00048">
<document-id>
<country>US</country>
<doc-number>2005/0198486</doc-number>
<kind>A1</kind>
<name>Desmond et al.</name>
<date>20050900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>713  1</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00049">
<document-id>
<country>US</country>
<doc-number>2006/0031472</doc-number>
<kind>A1</kind>
<name>Rajavelu et al.</name>
<date>20060200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00050">
<document-id>
<country>US</country>
<doc-number>2006/0041935</doc-number>
<kind>A1</kind>
<name>Conley et al.</name>
<date>20060200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00051">
<document-id>
<country>US</country>
<doc-number>2006/0123518</doc-number>
<kind>A1</kind>
<name>Olsen et al.</name>
<date>20060600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00052">
<document-id>
<country>US</country>
<doc-number>2006/0125847</doc-number>
<kind>A1</kind>
<name>Andreev et al.</name>
<date>20060600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00053">
<document-id>
<country>US</country>
<doc-number>2006/0129419</doc-number>
<kind>A1</kind>
<name>Flaxer et al.</name>
<date>20060600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>705  1</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00054">
<document-id>
<country>US</country>
<doc-number>2006/0129518</doc-number>
<kind>A1</kind>
<name>Andreev et al.</name>
<date>20060600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00055">
<document-id>
<country>US</country>
<doc-number>2006/0130133</doc-number>
<kind>A1</kind>
<name>Andreev et al.</name>
<date>20060600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00056">
<document-id>
<country>US</country>
<doc-number>2006/0150143</doc-number>
<kind>A1</kind>
<name>Andreev et al.</name>
<date>20060700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00057">
<document-id>
<country>US</country>
<doc-number>2006/0156274</doc-number>
<kind>A1</kind>
<name>Andreev et al.</name>
<date>20060700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00058">
<document-id>
<country>US</country>
<doc-number>2006/0171538</doc-number>
<kind>A1</kind>
<name>Larson et al.</name>
<date>20060800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00059">
<document-id>
<country>US</country>
<doc-number>2006/0271390</doc-number>
<kind>A1</kind>
<name>Rich et al.</name>
<date>20061100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>705  1</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00060">
<document-id>
<country>US</country>
<doc-number>2006/0283938</doc-number>
<kind>A1</kind>
<name>Kumar et al.</name>
<date>20061200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00061">
<document-id>
<country>US</country>
<doc-number>2007/0136676</doc-number>
<kind>A1</kind>
<name>Kruempelmann et al.</name>
<date>20070600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00062">
<document-id>
<country>US</country>
<doc-number>2007/0289008</doc-number>
<kind>A1</kind>
<name>Andreev et al.</name>
<date>20071200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00063">
<document-id>
<country>US</country>
<doc-number>2008/0077873</doc-number>
<kind>A1</kind>
<name>Peterson</name>
<date>20080300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00064">
<document-id>
<country>US</country>
<doc-number>2008/0183782</doc-number>
<kind>A1</kind>
<name>Andreev et al.</name>
<date>20080700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00065">
<document-id>
<country>US</country>
<doc-number>2008/0204452</doc-number>
<kind>A1</kind>
<name>Lau</name>
<date>20080800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00066">
<document-id>
<country>US</country>
<doc-number>2009/0031234</doc-number>
<kind>A1</kind>
<name>McKay</name>
<date>20090100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00067">
<document-id>
<country>US</country>
<doc-number>2009/0204693</doc-number>
<kind>A1</kind>
<name>Andreev et al.</name>
<date>20090800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00068">
<document-id>
<country>US</country>
<doc-number>2009/0287808</doc-number>
<kind>A1</kind>
<name>Andreev et al.</name>
<date>20091100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00069">
<othercit>Khanna, et al., &#x201c;Application Performance Management in Virtual Server Environments,&#x201d; Department of Electrical and Computer Engineering, Purdue University, Oct. 12, 2006, pp. 373-381 (PTO892 (Mail Date Aug. 8, 2011), U.S. Appl. No. 11/626,865).</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00070">
<othercit>Office Action (Mail Date Aug. 8, 2011) for U.S. Appl. No. 11/626,865, filed Jan. 25, 2007.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00071">
<othercit>Office Action (Mail Date Sep. 9, 2010) for U.S. Appl. No. 11/120,678, filed May 3, 2005.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00072">
<othercit>Office Action (Mail Date Sep. 15, 2010) for U.S. Appl. No. 12/424,698, filed Apr. 16, 2009.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00073">
<othercit>Notice of Allowance (Mail Date May 23, 2011) for U.S. Appl. No. 11/120,678, filed May 3, 2005.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00074">
<othercit>Advisory Action (Mail Date Feb. 13, 2009) for U.S. Appl. No. 11/011,449, filed Dec. 14, 2004.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00075">
<othercit>Mar. 2, 2009 Filed Notice of Appeal for U.S. Appl. No. 11/011,449, filed Dec. 14, 2004.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00076">
<othercit>Jun. 19, 2009 Filed Appeal Brief for U.S. Appl. No. 11/011,449, filed Dec. 14, 2004.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00077">
<othercit>Examiner's Answer to Appeal Brief (Mail Date Jul. 13, 2010) for U.S. Appl. No. 11/011,449, filed Dec. 14, 2004.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00078">
<othercit>Appeal Docketing Notice (Mail Date Oct. 26, 2010) for U.S. Appl. No. 11/011,449, filed Dec. 14, 2004.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00079">
<othercit>Final Office Action (Mail Date Oct. 7, 2010) for U.S. Appl. No. 11/159,918, filed Jun. 23, 2005.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00080">
<othercit>Advisory Action (Mail Date Dec. 10, 2010) for U.S. Appl. No. 11/159,918, filed Jun. 23, 2005.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00081">
<othercit>Jan. 3, 2011 Filed Request for Continued Examination with Preliminary Amendment for U.S. Appl. No. 11/159,918, filed Jun. 23, 2005.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00082">
<othercit>Notice of Allowance (Mail Date Dec. 28, 2010) for U.S. Appl. No. 11/741,885, filed Apr. 30, 2007.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00083">
<othercit>Notice of Allowance (Mail Date Sep. 28, 2010) for U.S. Appl. No. 12/508,048, filed Jul. 23, 2009.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00084">
<othercit>Office Action (Mail Date Feb. 25, 2011) for U.S. Appl. No. 12/424,698, filed Apr. 16, 2009.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00085">
<othercit>Office Action (Mail Date May 2, 2011) for U.S. Appl. No. 12/424,698, filed Apr. 16, 2009.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00086">
<othercit>Office Action (Mail Date Jan. 28, 2011) for U.S. Appl. No. 11/626,865, filed Jan. 25, 2007.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00087">
<othercit>Apr. 18, 2011 Filed Response to Office Action (Mail Date Jan. 28, 2011) for U.S. Appl. No. 11/626,865, filed Jan. 25, 2007.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00088">
<othercit>Notice of Allowance (Mail Date Oct. 17, 2011) for U.S. Appl. No. 12/424,698, filed Apr. 16, 2009.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00089">
<othercit>Office Action (Mail Date May 27, 2010) for U.S. Appl. No. 12/508,048, filed Jul. 23, 2009.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00090">
<othercit>Office Action (Mail Date Jun. 8, 2010) for U.S. Appl. No. 11/741,885, filed Apr. 30, 2007.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00091">
<othercit>Notice of Allowance (Mail Date Nov. 10, 2011) for U.S. Appl. No. 11/626,865, filed Jan. 25, 2007.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00092">
<othercit>Chou et al.; Guided simulated annealing method for optimization problems; The American Physical Society; Physical Review E 67, 066704 (2003); pp. 1-6.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00093">
<othercit>What is Optimization?, Mar. 28, 1996. [online]. 3 pages. [Retrieved from the Internet Jun. 11, 2008] &#x3c; URL: http://www-fp.mcs.anl.gov/OTC/Guide/OptWeb/opt.html &#x3e;.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00094">
<othercit>Reliability and Availability Basics, Apr. 1, 2002, EventHelix. [online]. 5 pages. [Retrieved from the Internet Dec. 5, 2007]. &#x3c;URL: http://web/archive.org/web/20020401235342/www.eventhelix.com/RealtimeMantra/FaultHandling/ reliability<sub>&#x2014;</sub>availability<sub>&#x2014;</sub>basics.htm &#x3e;.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00095">
<othercit>System Reliability and Availability, Apr. 1, 2002, EventHelix. [online]. 4 pages. [Retrieved from the Internet Dec. 5, 2007]. &#x3c;URL: http://www.eventhelix.com/RealtimeMantra/FaultHandling/system<sub>&#x2014;</sub>reliability<sub>&#x2014;</sub>availability.htm&#x3e;.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00096">
<othercit>U.S. Appl. No. 11/011,449, filed Dec. 14, 2004.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00097">
<othercit>U.S. Appl. No. 11/120,678, filed May 3, 2005.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00098">
<othercit>U.S. Appl. No. 11/135,599, filed May 23, 2005.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00099">
<othercit>U.S. Appl. No. 11/159,918, filed Jun. 23, 2005.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00100">
<othercit>U.S. Appl. No. 11/741,885, filed Apr. 30, 2007.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00101">
<othercit>U.S. Appl. No. 12/424,698, filed Apr. 16, 2009.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00102">
<othercit>U.S. Appl. No. 12/508,048, filed Jul. 23, 2009.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00103">
<othercit>Office Action (Mail Date Aug. 19, 2009) for U.S. Appl. No. 11/159,918, filed Jun. 23, 2005.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00104">
<othercit>Office Action (Mail Date Mar. 10, 2010) for U.S Appl. No. 11/120,678, filed May 3, 2005.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00105">
<othercit>Notice of Allowance (Mail Date May 18, 2010) for U.S. Appl. No. 11/135,599, filed May 23, 2005.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>17</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>709223</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>22</number-of-drawing-sheets>
<number-of-figures>22</number-of-figures>
</figures>
<us-related-documents>
<continuation>
<relation>
<parent-doc>
<document-id>
<country>US</country>
<doc-number>11011449</doc-number>
<date>20041214</date>
</document-id>
<parent-status>PENDING</parent-status>
</parent-doc>
<child-doc>
<document-id>
<country>US</country>
<doc-number>11452181</doc-number>
</document-id>
</child-doc>
</relation>
</continuation>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20060248501</doc-number>
<kind>A1</kind>
<date>20061102</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Andreev</last-name>
<first-name>Dmitry</first-name>
<address>
<city>Port Chester</city>
<state>NY</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Greenstein</last-name>
<first-name>Paul Gregory</first-name>
<address>
<city>Croton-on-Hudson</city>
<state>NY</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="003" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Vilshansky</last-name>
<first-name>Gregory</first-name>
<address>
<city>Chappaqua</city>
<state>NY</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Andreev</last-name>
<first-name>Dmitry</first-name>
<address>
<city>Port Chester</city>
<state>NY</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Greenstein</last-name>
<first-name>Paul Gregory</first-name>
<address>
<city>Croton-on-Hudson</city>
<state>NY</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="003" designation="us-only">
<addressbook>
<last-name>Vilshansky</last-name>
<first-name>Gregory</first-name>
<address>
<city>Chappaqua</city>
<state>NY</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Schmeiser, Olsen &#x26; Watts, LLP</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
<agent sequence="02" rep-type="attorney">
<addressbook>
<last-name>Chung</last-name>
<first-name>Matthew</first-name>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>International Business Machines Corporation</orgname>
<role>02</role>
<address>
<city>Armonk</city>
<state>NY</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Fan</last-name>
<first-name>Hua</first-name>
<department>2456</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">A method and system for porting an abstract Information Technology (IT) structure into an IT delivery environment. An abstract IT structure A that is currently within an IT delivery environment X is translated by generating a virtual IT structure V from the abstract IT structure A through specification of an IT delivery environment Y. Delivery binding the virtual IT structure V to the IT delivery environment Y generates a delivery-bound virtual IT structure D. The delivery-bound virtual IT structure D is deployed in the IT delivery environment Y, resulting in a real IT structure instance R capable of operating in the IT delivery environment Y.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="216.32mm" wi="150.71mm" file="US08626887-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="187.71mm" wi="161.46mm" file="US08626887-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="247.82mm" wi="164.25mm" file="US08626887-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="243.84mm" wi="168.32mm" file="US08626887-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="244.94mm" wi="165.02mm" file="US08626887-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="211.33mm" wi="153.16mm" file="US08626887-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="236.14mm" wi="168.06mm" file="US08626887-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="239.95mm" wi="159.17mm" file="US08626887-20140107-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00008" num="00008">
<img id="EMI-D00008" he="227.25mm" wi="188.72mm" file="US08626887-20140107-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00009" num="00009">
<img id="EMI-D00009" he="197.10mm" wi="110.66mm" file="US08626887-20140107-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00010" num="00010">
<img id="EMI-D00010" he="202.01mm" wi="138.68mm" file="US08626887-20140107-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00011" num="00011">
<img id="EMI-D00011" he="245.96mm" wi="161.80mm" file="US08626887-20140107-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00012" num="00012">
<img id="EMI-D00012" he="243.33mm" wi="142.41mm" file="US08626887-20140107-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00013" num="00013">
<img id="EMI-D00013" he="247.48mm" wi="161.46mm" file="US08626887-20140107-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00014" num="00014">
<img id="EMI-D00014" he="247.06mm" wi="165.69mm" file="US08626887-20140107-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00015" num="00015">
<img id="EMI-D00015" he="234.87mm" wi="152.57mm" file="US08626887-20140107-D00015.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00016" num="00016">
<img id="EMI-D00016" he="233.26mm" wi="165.10mm" file="US08626887-20140107-D00016.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00017" num="00017">
<img id="EMI-D00017" he="225.21mm" wi="109.14mm" file="US08626887-20140107-D00017.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00018" num="00018">
<img id="EMI-D00018" he="212.60mm" wi="194.82mm" file="US08626887-20140107-D00018.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00019" num="00019">
<img id="EMI-D00019" he="226.65mm" wi="146.22mm" file="US08626887-20140107-D00019.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00020" num="00020">
<img id="EMI-D00020" he="209.13mm" wi="154.77mm" file="US08626887-20140107-D00020.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00021" num="00021">
<img id="EMI-D00021" he="232.92mm" wi="149.61mm" file="US08626887-20140107-D00021.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00022" num="00022">
<img id="EMI-D00022" he="229.95mm" wi="145.71mm" file="US08626887-20140107-D00022.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?RELAPP description="Other Patent Relations" end="lead"?>
<heading id="h-0001" level="1">RELATED APPLICATION</heading>
<p id="p-0002" num="0001">The present patent application is related to copending U.S. patent application Ser. No. 11/011,449, filed Dec. 14, 2004 and entitled &#x201c;Automation of Information Technology System Development&#x201d;.</p>
<?RELAPP description="Other Patent Relations" end="tail"?>
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0002" level="1">FIELD OF THE INVENTION</heading>
<p id="p-0003" num="0002">The present invention relates generally to automation of Information Technology system development and more particularly to the porting of Information Technology structures.</p>
<heading id="h-0003" level="1">BACKGROUND OF THE INVENTION</heading>
<p id="p-0004" num="0003">A number of activities are associated with use of a computer. These activities may be grouped into several categories: development, deployment, operations and maintenance, and productive use. The category of development comprises determination of specific hardware, software, and networking required to satisfy the specific usage needs; planning of a production system.</p>
<p id="p-0005" num="0004">The category of deployment comprises implementation of the developed production system, ranging from acquisition of the appropriate hardware and software to installation, configuration, and customization of acquired software, hardware and network devices, to verification of correctness of the built system.</p>
<p id="p-0006" num="0005">The category of operations and maintenance comprises operation of the deployed production system and introduction of changes to it.</p>
<p id="p-0007" num="0006">The category of productive use comprises application of the deployed production system to activities for which it is intended.</p>
<p id="p-0008" num="0007">The preceding categories of activities are common to computing systems, be it a stand-alone personal computer, or a geographically dispersed collection of highly complex systems supporting an international corporation. The first three of the preceding categories of activities (i.e., development, deployment, operations) are a liability required in support of the last activity category of productive use of a computer system. While for a single stand-alone personal computer, development, deployment and operations may involve miniscule investment of time and/or money (with the exception of the acquisition of the necessary hardware and software), in large institutions, these preceding three activities occupy armies of technical and administrative personnel and entail high costs, primarily due to complexity of computer systems, exacerbated by constantly evolving technology and business requirements.</p>
<p id="p-0009" num="0008">Thus, there is a need for a method and system to reduce costs and user effort pertaining to Information Technology (IT) development, including implementation of the porting of Information Technology structures.</p>
<heading id="h-0004" level="1">SUMMARY OF THE INVENTION</heading>
<p id="p-0010" num="0009">The present invention provides a method for porting an abstract Information Technology (IT) structure into an IT delivery environment, said method comprising:</p>
<p id="p-0011" num="0010">translating an abstract IT structure A that is currently within an IT delivery environment X, said translating generating a virtual IT structure V from the abstract IT structure A through specification of an IT delivery environment Y;</p>
<p id="p-0012" num="0011">delivery binding the virtual IT structure V to the IT delivery environment Y to generate a delivery-bound virtual IT structure D; and</p>
<p id="p-0013" num="0012">deploying the delivery-bound virtual IT structure D in the IT delivery environment Y, resulting in a real IT structure instance R capable of operating in the IT delivery environment Y.</p>
<p id="p-0014" num="0013">The present invention provides a process for supporting computer infrastructure, said process comprising providing at least one support service for at least one of creating, integrating, hosting, maintaining, and deploying computer-readable code in a computing system, wherein the code in combination with the computing system is capable of performing a method for porting an abstract Information Technology (IT) structure into an IT delivery environment, said method comprising:</p>
<p id="p-0015" num="0014">translating an abstract IT structure A that is currently within an IT delivery environment X, said translating generating a virtual IT structure V from the abstract IT structure A through specification of an IT delivery environment Y;</p>
<p id="p-0016" num="0015">delivery binding the virtual IT structure V to the IT delivery environment Y to generate a delivery-bound virtual IT structure D; and</p>
<p id="p-0017" num="0016">deploying the delivery-bound virtual IT structure D in the IT delivery environment Y, resulting in a real IT structure instance R capable of operating in the IT delivery environment Y The present invention provides a computer program product, comprising a computer usable medium having a computer readable program code embodied therein, said computer readable program code comprising an algorithm adapted to implement a method for porting an abstract Information Technology (IT) structure into an IT delivery environment, said method comprising:</p>
<p id="p-0018" num="0017">translating an abstract IT structure A that is currently within an IT delivery environment X, said translating generating a virtual IT structure V from the abstract IT structure A through specification of an IT delivery environment Y;</p>
<p id="p-0019" num="0018">delivery binding the virtual IT structure V to the IT delivery environment Y to generate a delivery-bound virtual IT structure D; and</p>
<p id="p-0020" num="0019">deploying the delivery-bound virtual IT structure D in the IT delivery environment Y, resulting in a real IT structure instance R capable of operating in the IT delivery environment Y.</p>
<p id="p-0021" num="0020">The present invention provides a computer system comprising a processor and a computer readable memory unit coupled to the processor, said memory unit containing instructions that when executed by the processor implement a method for porting an abstract Information Technology (IT) structure into an IT delivery environment, said method comprising:</p>
<p id="p-0022" num="0021">translating an abstract IT structure A that is currently within an IT delivery environment X, said translating generating a virtual IT structure V from the abstract IT structure A through specification of an IT delivery environment Y;</p>
<p id="p-0023" num="0022">delivery binding the virtual IT structure V to the IT delivery environment Y to generate a delivery-bound virtual IT structure D; and</p>
<p id="p-0024" num="0023">deploying the delivery-bound virtual IT structure D in the IT delivery environment Y, resulting in a real IT structure instance R capable of operating in the IT delivery environment Y.</p>
<p id="p-0025" num="0024">The present invention provides a method and system to reduce costs and user effort pertaining to Information Technology (IT) development, including implementation of the porting of Information Technology structures.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0005" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. 1</figref> is a diagram illustrating Information Technology (IT) entities included in the base entity model, and organized in a class hierarchy, in accordance with embodiments of the present invention.</p>
<p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. 2</figref> is a flow chart depicting the logic of setRelationship( ) method, in accordance with embodiments of the present invention.</p>
<p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. 3</figref> is a flow chart depicting the logic of addElement( ) method, in accordance with embodiments of the present invention.</p>
<p id="p-0029" num="0028"><figref idref="DRAWINGS">FIG. 4</figref> is a flow chart depicting the logic of deleteElement( ) method, in accordance with embodiments of the present invention.</p>
<p id="p-0030" num="0029"><figref idref="DRAWINGS">FIG. 5</figref> is a flow chart, depicting the logic of setAvailable( ) method, in accordance with embodiments of the present invention.</p>
<p id="p-0031" num="0030"><figref idref="DRAWINGS">FIG. 6</figref> is a flow chart depicting the logic of establishInterface( ) method, in accordance with embodiments of the present invention.</p>
<p id="p-0032" num="0031"><figref idref="DRAWINGS">FIG. 7</figref> is a flow chart depicting the logic of ensureDependencies( ) method, in accordance with embodiments of the present invention.</p>
<p id="p-0033" num="0032"><figref idref="DRAWINGS">FIG. 8</figref> is a diagram illustrating the concept of IT structure composition, in accordance with embodiments of the present invention.</p>
<p id="p-0034" num="0033"><figref idref="DRAWINGS">FIG. 9</figref> is a chart depicting the IT development process, in accordance with embodiments of the present invention.</p>
<p id="p-0035" num="0034"><figref idref="DRAWINGS">FIG. 10</figref> is a flow chart depicting the process of translation of an IT structure instance, in accordance with embodiments of the present invention.</p>
<p id="p-0036" num="0035"><figref idref="DRAWINGS">FIG. 11</figref> is a flow chart depicting the translation iteration process, in accordance with embodiments of the present invention.</p>
<p id="p-0037" num="0036"><figref idref="DRAWINGS">FIG. 12</figref> is a flow chart depicting the process of ensuring specification of characteristics of an abstract IT structure instance, in accordance with embodiments of the present invention.</p>
<p id="p-0038" num="0037"><figref idref="DRAWINGS">FIG. 13</figref> is a flow chart depicting the process of adjusting a particular set of characteristics of an IT structure instance, in accordance with embodiments of the present invention.</p>
<p id="p-0039" num="0038"><figref idref="DRAWINGS">FIG. 14</figref> is a flow chart depicting the process of selection a subclass of an IT structure, in accordance with embodiments of the present invention.</p>
<p id="p-0040" num="0039"><figref idref="DRAWINGS">FIG. 15</figref> is a flow chart depicting the process of selecting the best translation candidate from a list of translation candidates, in accordance with embodiments of the present invention.</p>
<p id="p-0041" num="0040"><figref idref="DRAWINGS">FIG. 16</figref> is a flow chart depicting a reverse specification process, in accordance with embodiments of the present invention. <figref idref="DRAWINGS">FIG. 17</figref> is a flow chart depicting a process for comparing two IT structure instances, in accordance with embodiments of the present invention.</p>
<p id="p-0042" num="0041"><figref idref="DRAWINGS">FIG. 18</figref> is an extended class hierarchy example, in accordance with embodiments of the present invention.</p>
<p id="p-0043" num="0042"><figref idref="DRAWINGS">FIG. 19</figref> is a flow chart for implementing delivery binding of an IT structure to a delivery environment, in accordance with embodiments of the present invention.</p>
<p id="p-0044" num="0043"><figref idref="DRAWINGS">FIG. 20</figref> illustrates a computer system used for implementing an IT Entity Model and associated processes, in accordance with embodiments of the present invention.</p>
<p id="p-0045" num="0044"><figref idref="DRAWINGS">FIG. 21</figref> is a flow chart a process for porting an abstract IT structure from one delivery environment to another delivery environment, in accordance with embodiments of the present invention.</p>
<p id="p-0046" num="0045"><figref idref="DRAWINGS">FIG. 22</figref> is a flow chart of a process for consolidating two IT structures and deploying the consolidated IT structure within a target IT delivery environment, in accordance with embodiments of the present invention.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0006" level="1">DETAILED DESCRIPTION OF THE INVENTION</heading>
<p id="p-0047" num="0046">The detailed description of the present invention is organized into the following sections:
<ul id="ul0001" list-style="none">
    <li id="ul0001-0001" num="0047">1. Nomenclature;</li>
    <li id="ul0001-0002" num="0048">2. Information Technology (IT) Entity Model (defines basic IT entities and describes their properties and associated processes);</li>
    <li id="ul0001-0003" num="0049">3. Porting of IT Structures;</li>
    <li id="ul0001-0004" num="0050">4. Computer System (describes computer system used to implement porting of IT Structures)
<br/>
1. Nomenclature
<br/>
1.1 Flow Charts
</li>
</ul>
</p>
<p id="p-0048" num="0051">The flow charts in the Figures comprise, inter alia, the following block shapes:
<ul id="ul0002" list-style="none">
    <li id="ul0002-0001" num="0052">1) Rectangular: represents execution of code as described (e.g., <figref idref="DRAWINGS">FIG. 3</figref>, block <b>2202</b>); and</li>
    <li id="ul0002-0002" num="0053">2) Diamond: represents a decision block (e.g., <figref idref="DRAWINGS">FIG. 3</figref>, block <b>2203</b>).
<br/>
1.2 Abbreviations
</li>
</ul>
</p>
<p id="p-0049" num="0054">The following abbreviations are utilized herein.
<ul id="ul0003" list-style="none">
    <li id="ul0003-0001" num="0055">CASE&#x2014;computer-aided software engineering</li>
    <li id="ul0003-0002" num="0056">CBM&#x2014;Component Business Model</li>
    <li id="ul0003-0003" num="0057">CD&#x2014;compact disk</li>
    <li id="ul0003-0004" num="0058">CICS&#x2014;Customer Information Control System</li>
    <li id="ul0003-0005" num="0059">CPU&#x2014;central processor unit</li>
    <li id="ul0003-0006" num="0060">DASD&#x2014;direct access storage device</li>
    <li id="ul0003-0007" num="0061">DB&#x2014;database</li>
    <li id="ul0003-0008" num="0062">DNS&#x2014;domain name server</li>
    <li id="ul0003-0009" num="0063">DRAM&#x2014;dynamic random access memory</li>
    <li id="ul0003-0010" num="0064">DVD&#x2014;digital video disk</li>
    <li id="ul0003-0011" num="0065">GB&#x2014;gigabyte</li>
    <li id="ul0003-0012" num="0066">GUI&#x2014;graphical user interface</li>
    <li id="ul0003-0013" num="0067">HTTP&#x2014;HyperText Transfer Protocol</li>
    <li id="ul0003-0014" num="0068">HTTPS&#x2014;HTTP Secure</li>
    <li id="ul0003-0015" num="0069">IDE&#x2014;integrated development environment</li>
    <li id="ul0003-0016" num="0070">IP&#x2014;internet protocol</li>
    <li id="ul0003-0017" num="0071">IT&#x2014;information technology</li>
    <li id="ul0003-0018" num="0072">KB&#x2014;kilobyte</li>
    <li id="ul0003-0019" num="0073">KW&#x2014;kilowatt</li>
    <li id="ul0003-0020" num="0074">LAN&#x2014;local-area network</li>
    <li id="ul0003-0021" num="0075">LOC&#x2014;lines of code</li>
    <li id="ul0003-0022" num="0076">Mbps&#x2014;megabits per second</li>
    <li id="ul0003-0023" num="0077">MHz&#x2014;mega-Hertz</li>
    <li id="ul0003-0024" num="0078">MP&#x2014;multi-processor</li>
    <li id="ul0003-0025" num="0079">NAT&#x2014;network address translation</li>
    <li id="ul0003-0026" num="0080">NIC&#x2014;network interface card</li>
    <li id="ul0003-0027" num="0081">NOOP&#x2014;no operation (moot)</li>
    <li id="ul0003-0028" num="0082">OS&#x2014;operating system</li>
    <li id="ul0003-0029" num="0083">PM&#x2014;person/month</li>
    <li id="ul0003-0030" num="0084">POTS&#x2014;&#x201c;plain old telephone service&#x201d;</li>
    <li id="ul0003-0031" num="0085">RAM&#x2014;random-access memory</li>
    <li id="ul0003-0032" num="0086">RISC&#x2014;reduced instruction set computer</li>
    <li id="ul0003-0033" num="0087">ROI&#x2014;return on investment</li>
    <li id="ul0003-0034" num="0088">ROM&#x2014;read-only memory</li>
    <li id="ul0003-0035" num="0089">SL&#x2014;service level</li>
    <li id="ul0003-0036" num="0090">SMTP&#x2014;Simple Mail Transfer Protocol</li>
    <li id="ul0003-0037" num="0091">S/N&#x2014;serial number</li>
    <li id="ul0003-0038" num="0092">TCO&#x2014;total cost of ownership</li>
    <li id="ul0003-0039" num="0093">TCP/IP&#x2014;transmission control protocol/internet protocol</li>
    <li id="ul0003-0040" num="0094">UI&#x2014;user interface</li>
    <li id="ul0003-0041" num="0095">UML&#x2014;universal modeling language</li>
    <li id="ul0003-0042" num="0096">UP&#x2014;uni-processor</li>
    <li id="ul0003-0043" num="0097">UPS&#x2014;uninterruptible power supply
<br/>
2. Information Technology (IT) Entity Model
</li>
</ul>
</p>
<p id="p-0050" num="0098">IT systems and environments may be described in terms of IT entities. The term &#x201c;entity&#x201d; is understood to denote &#x201c;IT entity&#x201d; herein.</p>
<p id="p-0051" num="0099">The base entity model comprises IT entities, relationships among the IT entities, and interfaces and methods provided by these IT entities.</p>
<p id="p-0052" num="0100">For illustrative purposes, Java-like syntax is used herein as a specification language for IT structures. An IT structure is a set of IT entities. Generally, another programming language (e.g., object oriented, procedural, high- or low-level) may be used instead of Java; a modeling language (e.g., UML) may be used instead of Java; and a specialized language could be defined and implemented solely for the purpose of definition of IT structures.</p>
<p id="h-0007" num="0000">2.1 IT Entities</p>
<p id="p-0053" num="0101"><figref idref="DRAWINGS">FIG. 1</figref> is a diagram illustrating IT entities included in the base entity model, and organized in a class hierarchy as shown in Table 1, in accordance with embodiments of the present invention.</p>
<p id="p-0054" num="0102">
<tables id="TABLE-US-00001" num="00001">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="42pt" align="left"/>
<colspec colname="1" colwidth="175pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" rowsep="1">TABLE 1</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>ITEntity 2001</entry>
</row>
<row>
<entry/>
<entry>&#x2003;ITStructure 2003</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;ITDeliveryEnvironment 2007</entry>
</row>
<row>
<entry/>
<entry>&#x2003;ITInterface 2005</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;defaultInterface 2022</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;InstalledOn 2015</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;Supports 2016</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;Invokes 2017</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;Invokable 2018</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;ConnectsTo 2019</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;Manages 2020</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;Mangeable 2021</entry>
</row>
<row>
<entry/>
<entry>&#x2003;ITRelationship 2004</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;DefaultITRelationship 2010</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;InstallationITRelationship 2011</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;InvocationITRelationship 2012</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;CommunicationITRelationship 2013</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;ManagementITRelationship 2014</entry>
</row>
<row>
<entry/>
<entry>&#x2003;ITDependency 2006</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;RequiresPresenceOf 2008</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;ExclusiveWith 2009</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0055" num="0103">IT entities may be qualified as real, virtual, or abstract. A real IT entity has no undefined characteristic and may therefore be represented physically. A virtual IT entity has exactly one undefined characteristic and thus cannot have more than one undefined characteristic. An abstract IT entity has at least two undefined characteristics. Examples of real entities, virtual entities, and abstract entities will be presented infra. For convenience, class Type is introduced as follows:</p>
<p id="p-0056" num="0104">Enumeration Type:=(abstract, virtual, real)</p>
<p id="h-0008" num="0000">2.1.1 ITEntity Class</p>
<p id="p-0057" num="0105">TEntity class is introduced for convenience as a root class for the other IT entity classes listed above. ITEntity has the following methods:</p>
<p id="p-0058" num="0106">1) constructor(String name [, Type type])&#x2014;creates an instance of ITEntity with the specified name and of optionally specified type</p>
<p id="p-0059" num="0107">2) boolean is Abstract( ), returns true if ITEntity is abstract, false otherwise</p>
<p id="p-0060" num="0108">3) boolean isVirtual( ), returns true if ITEntity is virtual, false otherwise</p>
<p id="p-0061" num="0109">4) boolean is Real( ), returns true if ITEntity is real, false otherwise</p>
<p id="p-0062" num="0110">5) getName( )&#x2014;returns ITEntity name</p>
<p id="p-0063" num="0111">6) setType(Type type)&#x2014;changes IT entity type as specified</p>
<p id="h-0009" num="0000">2.2 IT Structures</p>
<p id="p-0064" num="0112">An IT structure is either a primitive IT structure or a complex IT structure.</p>
<p id="p-0065" num="0113">A primitive IT structure is an IT entity representing materials or labor, indivisible within a particular view to a structural model, and a set of method associated with characteristics of the represented materials or labor.</p>
<p id="p-0066" num="0114">A real primitive IT structure represents a specific single physical object or a specific unit of labor. Examples of real primitive IT structure include:</p>
<p id="p-0067" num="0115">1) RS/6000 model F50 S/N 123456-AB. There is one and only one RS/6000 model F50 with this particular S/N.</p>
<p id="p-0068" num="0116">2) Software product Ppppp version vvvvv license key 12345678-AB-9ABCD-XYZ.</p>
<p id="p-0069" num="0117">A virtual primitive IT structure represents a class of specific physical objects. Examples of virtual primitive IT structure include:</p>
<p id="p-0070" num="0118">1) RS/6000 model F50. Since no s/n is specified, there is a class of RS/6000 model F50 this virtual primitive IT structure corresponds to, and RS/6000 model F50 with any s/n belongs to this class.</p>
<p id="p-0071" num="0119">2) Software product Ppppp version vvvvv.</p>
<p id="p-0072" num="0120">An abstract primitive IT structure represents an abstract view of materials or labor. In this embodiment, abstract primitive IT structures include the same out-of-model IT entity, called abstractPrimitive. Other embodiment may have a multiplicity of abstract primitive out-of-model entities. Examples of abstract primitive IT structure include:</p>
<p id="p-0073" num="0121">1) RS/6000. Since no model is specified, any RS/6000, including model F50, as well as any other models, belongs to this class.</p>
<p id="p-0074" num="0122">2) Computer. Since no architecture, type, or any other characteristics are specified, any computer, including any model of RS/6000, belongs to this class.</p>
<p id="p-0075" num="0123">3) Software product Ppppp.</p>
<p id="p-0076" num="0124">4) Software product.</p>
<p id="p-0077" num="0125">Primitive IT structures are indivisible only within a particular model. For example, a computer may be viewed as indivisible in the context of the model used in this embodiment. In a different embodiment, however, a different model may exist in which a computer may be represented as an IT structure (see discussion infra of a complex IT structure), comprising several primitive IT structures; e.g., the following collection of primitive IT structures: processor, memory, DASD, and network interface.</p>
<p id="p-0078" num="0126">A complex IT structure is a non-empty collection of IT structures, a defined set of relationships (see below) among these IT structures, and a description of this IT structure's characteristics. Examples of a complex primitive IT structure include:</p>
<p id="p-0079" num="0127">1) a personal computer</p>
<p id="p-0080" num="0128">2) a network of Lotus Domino servers</p>
<p id="p-0081" num="0129">3) a zSeries sysplex</p>
<p id="p-0082" num="0130">4) a collection of programs running on a particular computer</p>
<p id="p-0083" num="0131">5) a collection of software and hardware required to run Ariba Buyer application</p>
<p id="p-0084" num="0132">6) a hosted application service (e.g., a service including a service provider hosting an application; Ariba Buyer, in its data center, and providing service customers access to the application through a network; Internet)</p>
<p id="p-0085" num="0133">7) a professional service (e.g., a service including a service provider perform installation and configuration of an application; Ariba Buyer, at a service customer data center)</p>
<p id="p-0086" num="0134">8) a network service (e.g., a service providing access to Internet at a specified guaranteed minimum bandwidth)</p>
<p id="p-0087" num="0135">9) a combined network/hosted application services (e.g., a service providing access to Internet at a specified bandwidth and optionally including web hosting such as hosting of customer's web pages accessed through Internet; and a hosted application service for e-mail).</p>
<p id="p-0088" num="0136">In the process of formation of an IT structure, values of properties of elements of this IT structure's composition (see below) may change; e.g., assignment of a name to a computer may be required to include that computer in an IT structure.</p>
<p id="p-0089" num="0137">The set of relationships is imposed by a particular IT structure, rather than being intrinsic for the primitive IT structures comprising the IT structure. Thus, multiple complex IT structures may be created from the same set of primitive IT structures, and uniqueness of the assigned name (i.e., its inequality to any other computer name) may be imposed on a primitive IT structure representing a computer, included in a complex IT structure.</p>
<p id="p-0090" num="0138">An IT structure composition is the list of IT structures included in a complex IT structure, or an out-of-model entity describing the entity represented by a primitive IT structure (e.g., a String, or a reference to a DB record).</p>
<p id="p-0091" num="0139">An IT structure composition element is an IT entity included in an IT structure composition.</p>
<p id="p-0092" num="0140">An IT structure primitive composition is the list of primitive IT structures included in an IT structure, where all complex IT structures are replaced with their respective primitive compositions.</p>
<p id="p-0093" num="0141"><figref idref="DRAWINGS">FIG. 8</figref> is a diagram illustrating the concept of IT structure composition, in accordance with embodiments of the present invention. A complex IT structure A <b>2701</b> includes in its composition <b>2703</b> two other complex IT structures B <b>2704</b> and C <b>2705</b>, and one abstract primitive IT structure D <b>2706</b>. Complex IT structure B includes in its composition two primitive IT structures E <b>2708</b> and F <b>2709</b>, and complex IT structure C includes in its composition two primitive IT structures, an abstract primitive IT structure G <b>2710</b>, and a primitive IT structure H <b>2711</b>. Both abstract primitive IT structures, D and H, represent the abstractPrimitive out-of-model entity <b>2712</b>, while all other primitive IT structures represent respective non-abstract out-of-model entities <b>2713</b>, <b>2714</b>, <b>2715</b>. The IT structure A primitive composition <b>2707</b> includes all primitive IT structures shown (and no complex IT structures), namely primitive IT structures E <b>2708</b>, F <b>2709</b>, G <b>2710</b>, H <b>2711</b>, and D <b>2706</b>.</p>
<p id="p-0094" num="0142">An abstract IT structure is an IT structure whose composition includes at least one abstract IT entity. Examples of an abstract IT structure include:</p>
<p id="p-0095" num="0143">1) An abstract IT structure may include an Intel computer with a single 400 MHz Pentium processor, 1024 MB of main memory, 10 GB of DASD, and an Ethernet network interface; however, since no particular model of computer is specified, this IT structure would be abstract.</p>
<p id="p-0096" num="0144">2) At a different (higher) level of abstraction, the same IT structure may include just a computer, without specification of its technology or characteristics.</p>
<p id="p-0097" num="0145">A virtual IT structure is a non-abstract IT structure whose composition includes at least one virtual IT entity.</p>
<p id="p-0098" num="0146">A real IT structure is a non-abstract and non-virtual IT structure.</p>
<p id="p-0099" num="0147">From the above definitions, it follows that a real IT structure only includes real IT entities in its composition. From the above definitions, it also follows that in a real IT structure, each IT entity in its composition uniquely corresponds to a physical IT entity.</p>
<p id="p-0100" num="0148">Table 2 infra provides examples of IT structure composition.</p>
<p id="p-0101" num="0149">
<tables id="TABLE-US-00002" num="00002">
<table frame="none" colsep="0" rowsep="0" pgwide="1">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="294pt" align="center"/>
<thead>
<row>
<entry namest="1" nameend="1" rowsep="1">TABLE 2</entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
<row>
<entry>Examples of IT structure composition</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="5">
<colspec colname="1" colwidth="49pt" align="left"/>
<colspec colname="2" colwidth="49pt" align="left"/>
<colspec colname="3" colwidth="70pt" align="left"/>
<colspec colname="4" colwidth="70pt" align="left"/>
<colspec colname="5" colwidth="56pt" align="left"/>
<tbody valign="top">
<row>
<entry>IT structure</entry>
<entry>Networking</entry>
<entry>Computers</entry>
<entry>Software</entry>
<entry>Labor</entry>
</row>
<row>
<entry namest="1" nameend="5" align="center" rowsep="1"/>
</row>
<row>
<entry>Abstract IT</entry>
<entry>network</entry>
<entry>computer</entry>
<entry>Ariba Buyer</entry>
<entry/>
</row>
<row>
<entry>structure with</entry>
<entry/>
<entry/>
<entry>application</entry>
</row>
<row>
<entry>high degree of</entry>
</row>
<row>
<entry>abstraction</entry>
</row>
<row>
<entry>Abstract IT</entry>
<entry>TCP/IP</entry>
<entry>platform</entry>
<entry>Ariba Buyer</entry>
</row>
<row>
<entry>structure with</entry>
<entry>network</entry>
<entry/>
<entry>Application v7</entry>
</row>
<row>
<entry>low degree of</entry>
</row>
<row>
<entry>abstraction</entry>
</row>
<row>
<entry>Virtual IT</entry>
<entry>connectivity</entry>
<entry>platform and</entry>
<entry>Ariba Buyer v7 for</entry>
<entry>installation and</entry>
</row>
<row>
<entry>structure</entry>
<entry>requirements</entry>
<entry>associated parameters</entry>
<entry>AIX on RS/6000</entry>
<entry>management</entry>
</row>
<row>
<entry/>
<entry/>
<entry>(memory, processor</entry>
</row>
<row>
<entry/>
<entry/>
<entry>power, DASD space)</entry>
</row>
<row>
<entry>Delivery-</entry>
<entry>LAN</entry>
<entry>model</entry>
<entry>Ariba Buyer v7.02 for</entry>
<entry>specific</entry>
</row>
<row>
<entry>bound IT</entry>
<entry>segments with</entry>
<entry/>
<entry>AIX on RS/6000</entry>
<entry>installation</entry>
</row>
<row>
<entry>structure</entry>
<entry>symbolic IP</entry>
<entry/>
<entry/>
<entry>activities; specific</entry>
</row>
<row>
<entry/>
<entry>addresses</entry>
<entry/>
<entry/>
<entry>management</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry/>
<entry>activities</entry>
</row>
<row>
<entry>Real IT</entry>
<entry>LAN</entry>
<entry>computer s/n</entry>
<entry>Ariba Buyer v7.02 for</entry>
<entry>skill level and</entry>
</row>
<row>
<entry>structure</entry>
<entry>segments with</entry>
<entry>specified</entry>
<entry>AIX on RS/6000,</entry>
<entry>quantity of labor</entry>
</row>
<row>
<entry/>
<entry>real IP</entry>
<entry/>
<entry>license # &#x3c;lic. #&#x3e;</entry>
<entry>by activity</entry>
</row>
<row>
<entry/>
<entry>addresses</entry>
<entry/>
<entry/>
<entry>specified</entry>
</row>
<row>
<entry namest="1" nameend="5" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0102" num="0150">An abstract IT structure with a high level of abstraction may be &#x201c;an Ariba Buyer application running on a computer, connected to a network&#x201d;. The degree of abstraction can be lowered by restating the previous clause in more specific terms&#x2014;&#x201c;an Ariba Buyer application running on an RS/6000 computer, connected to a TCP/IP network&#x201d;.</p>
<p id="p-0103" num="0151">The corresponding virtual IT structure may be &#x201c;an Ariba Buyer version 7.0 for AIX on RS/6000 application, running on an AIX v5.0 operating system and RS/6000 model F50 computer with one 320 MHz CPU, 640 KB of main memory, and 128 GB of DASD in a single disk, connected through a 10 Gbps Ethernet LAN to a TCP/IP network&#x2014;and&#x2014;labor associated with installation and management of the above&#x201d;.</p>
<p id="p-0104" num="0152">Once resolved into a delivery-bound IT structure, the previous IT structure may turn into something like &#x201c;an Ariba Buyer version 7.0 path level 17.2 for AIX on RS/6000 application, running on an AIX v5.0 patch level 5.0.3.2 operating system and RS/6000 model F50-3745 computer with one 320 MHz CPU, 640 KB of main memory, 128 GB of DASD in a single disk, and a NIC (network interface card), connected through a 10 Gbps Ethernet LAN to a TCP/IP network on a single segment with a symbolic IP address of a.b.c.d and specific installation and management activities associated with the above.</p>
<p id="p-0105" num="0153">Once deployed in a data center, the corresponding real IT structure would be &#x201c;an Ariba Buyer version 7.0 path level 17.2 for AIX on RS/6000 application, license # 178215-04, running on an AIX v5.0 patch level 5.0.3.2 operating system, license #514ABC-AE, and RS/6000 model F50-3745 computer, s/n 6734-FWU, with one 320 MHz CPU, 640 KB of main memory, 128 GB of DASD in a single disk, and a NIC (network interface card), connected through a 10 Gbps Ethernet LAN to a TCP/IP network on a single segment with a symbolic IP address of a.b.c.d and specific installation and management activities associated with the above, including quantity of labor and level of skills for each.</p>
<p id="p-0106" num="0154">A delivery-bound IT structure is a virtual IT structure ready for provisioning in a particular delivery environment (see below) with no additional input/sources of information. &#x201c;In a particular delivery environment&#x201d; means &#x201c;at the level of detail required by the provisioning process of the delivery environment&#x201d;. For example, a delivery-bound IT structure may include a specification of 10/100 Mbps Ethernet card, without regard to the manufacturer of that card.</p>
<p id="p-0107" num="0155">An operating IT structure instance is a collection of physical hardware, software, networking, and labor, resulting from deployment of a real IT structure.</p>
<p id="h-0010" num="0000">2.2.1 ITStructure Class</p>
<p id="p-0108" num="0156">An IT Structure is represented by a class ITStructure, which inherits from ITEntity class and has the following methods:</p>
<p id="p-0109" num="0157">1) ITStructure(String name, String function, Vector functions, Vector operationalCharacteristics[, Boolean external])&#x2014;constructor; the external parameter is optional, and indicates that the ITStructure represents an external entity.</p>
<p id="p-0110" num="0158">Note: Type is not specified for an ITStructure class&#x2014;it is always derived based on ITStructure composition using the type definition as a rule.</p>
<p id="p-0111" num="0159">2) Vector getFunctions( )&#x2014;returns a list of functions (String) supported by ITStructure (always non-null)</p>
<p id="p-0112" num="0160">3) Vector setFunctions(Vector V)&#x2014;adjusts IT structure for support of one or more functions whose names were previously returned by getFunction( ) method; the list V is a list of pairs (&#x3c;function&#x3e;,&#x3c;value&#x3e;), where &#x3c;function&#x3e; is one of the list returned by getFunction( ) method and &#x3c;value&#x3e; is the associated setting. The method returns an empty Vector if the method execution was successful, and a list of error messages otherwise. If an error occurs, the method has not altered the IT structure.</p>
<p id="p-0113" num="0161">4) Vector getOperationalCharacteristics( )&#x2014;returns a list of pairs of names (String) and values (String) of operational characteristics of this IT structure</p>
<p id="p-0114" num="0162">5) Vector setOperationalCharacteristics(Vector V)&#x2014;adjusts IT structure operational characteristics as specified by the input parameters. The input parameter is a list of pairs of (operational characteristic name (String), characteristic value), where operational characteristic name is one of the values returned by the getOperaitonalCharacteristics( ) method, and characteristic value is specific to the operational characteristic being modified. The list V corresponds to all of or a subset of the list returned by getOperationalCharacteristics( ) method. The method returns an empty Vector if the method execution was successful, and a list of error messages otherwise. If an error occurs, the method has not altered the IT structure.</p>
<p id="p-0115" num="0163">6) Vector getResolutionValues( )&#x2014;returns a list of pairs of names (String) and values (String) of abstraction resolution parameters of this IT structure</p>
<p id="p-0116" num="0164">7) JavaClass resolve(Vector V), where V is Vector of pairs (String resolution_parameter, value)&#x2014;returns a less abstract ITStructure instance, instantiated with the specified resolution parameters if execution was successful; returns a Vector of error messages if no resolution was possible (in which case the IT structure is left unmodified)</p>
<p id="p-0117" num="0165">8) boolean isPrimitive( )&#x2014;returns true if this IT structure is primitive</p>
<p id="p-0118" num="0166">9) boolean isComplex( )&#x2014;returns true if this IT structure is complex</p>
<p id="p-0119" num="0167">10) Vector getComposition([String C<b>1</b> [, C<b>2</b> . . . [, Cn]]])&#x2014;for a complex IT structure, returns list of other IT structures comprising this IT structure; for a primitive IT structure, returns the list including the IT structure itself. The optional list of parameters C<b>1</b> . . . Cn specify names of ITStructure subclasses to be returned by the getComposition( ) method. If C<b>1</b> . . . Cn are specified, only IT structures of subclasses with names C<b>1</b> . . . Cn will be returned by the getComposition( ) method.</p>
<p id="p-0120" num="0168">11) Vector getPrimitiveComposition([String C<b>1</b> [, C<b>2</b> . . . [, Cn]]])&#x2014;returns primitive composition of an IT; returns the IT structure itself if invoked for a primitive IT structure. The optional list of parameters C<b>1</b> . . . Cn specify names of ITStructure subclasses to be returned by the getPrimitiveComposition( ) method. If C<b>1</b> . . . Cn are specified, only IT structures of subclasses with names C<b>1</b> . . . Cn will be returned by the getPrimitiveComposition( ) method.</p>
<p id="p-0121" num="0169">12) Vector getInterfaces([String I<b>1</b> [, I<b>2</b> . . . [, In]]])&#x2014;returns the list of IT interfaces this IT structure possesses. The optional list of parameters I<b>1</b> . . . In specify names of ITInterface subclasses to be returned by the getInterfaces( ) method. If I<b>1</b> . . . In are specified, only IT interfaces of subclasses with names I<b>1</b> . . . In will be returned by the getInterfaces( ) method.</p>
<p id="p-0122" num="0170">13) Vector getRelationships([String R<b>1</b> [, R<b>2</b> . . . [, Rn]]])&#x2014;returns a list of IT relationships elements of this IT structure's composition are involved in; returns an empty Vector if no IT relationships exist among elements of this IT structure's composition. The optional list of parameters R<b>1</b> . . . Rn specify names of ITRelationship subclasses to be returned by the getRelationships( ) method. If R<b>1</b> . . . Rn are specified, only IT relationships of subclasses with names R<b>1</b> . . . Rn will be returned by the getRelationships( ) method.</p>
<p id="p-0123" num="0171">14) Vector getPrimitiveRelationships([String R<b>1</b> [, R<b>2</b> . . . [, Rn]]])&#x2014;returns a list of IT relationships elements of this IT structure's primitive composition are involved in; returns an empty Vector if no IT relationships exist among elements of primitive composition of this IT structure. The optional list of parameters R<b>1</b> . . . Rn specify names of ITRelationship subclasses to be returned by the getPrimitiveRelationships( ) method. If R<b>1</b> . . . Rn are specified, only IT relationships of subclasses with names R<b>1</b> . . . Rn will be returned by the getPrimitiveRelationships( ) method.</p>
<p id="p-0124" num="0172">15) ITRelationship getRelationship(ITStructure A, ITStructure B)&#x2014;returns the ITRelationship instance for relationship of IT structures A and B within the composition of this IT structure or null if IT structures A and B are not involved in an IT relationship</p>
<p id="p-0125" num="0173">16) Vector setRelationship(ITStructure x, ITInterface xi, ITStructure y, ITInterface yi, Relationship r)&#x2014;establishes the relationship r between IT structures x and y within the composition of this IT structure. Returns a null Vector if relationship was established successfully, and a Vector of error messages if relationship could not be established.</p>
<p id="p-0126" num="0174">17) Vector setDependency({&#x3c;add&#x3e;|&#x3c;remove&#x3e;}, ITDependency x)&#x2014;adds or removes the specified IT dependency to or from this IT structure. Returns a null Vector if dependency was added or removed successfully, and a Vector of error messages if dependency could not be added. Removal of an IT dependency is always successful. Addition of an IT dependency may fail if x contradicts an existing dependency&#x2014;e.g., x indicates mutual exclusivity with IT structure Y and a dependency on presence of Y is already stated.</p>
<p id="p-0127" num="0175">18) Vector getDependencies([String D<b>1</b> [, D<b>2</b> . . . [, Dn]]])&#x2014;returns a list of IT dependencies of this IT structure. The optional list of parameters D<b>1</b> . . . Dn specify names of ITDependency subclasses to be returned by the getDependencies( ) method. If D<b>1</b> . . . Dn are specified, only IT dependencies of subclasses with names D<b>1</b> . . . Dn will be returned by the getDependencies( ) method.</p>
<p id="p-0128" num="0176">18a) Vector getPrimitiveDependencies([String D<b>1</b> [, D<b>2</b> . . . [, Dn]]])&#x2014;returns a list of IT dependencies among the elements of the IT structure primitive composition. The optional list of parameters D<b>1</b> . . . Dn specify names of ITDependency subclasses to be returned by the getPrimitiveDependencies( ) method. If D<b>1</b> . . . Dn are specified, only IT dependencies of subclasses with names D<b>1</b> . . . Dn will be returned by the getPrimitiveDependencies( ) method.</p>
<p id="p-0129" num="0177">19) Vector addElement(ITStructure A)&#x2014;adds IT structure A to the composition of this IT structure. Returns a null Vector if addition was successful, and a Vector of error messages if addition failed. In order to ensure uniqueness of identifiers (computer names, network addresses) within IT structures, each identifier within IT structure A being added is prefixed with string A.getName( )+&#x201c;.&#x201d;. As a part of the addition process, addElement( ) method verifies that:</p>
<p id="p-0130" num="0178">a. addition of IT structure A to the composition of this IT structure does not violate any IT dependencies for any IT structure already included in the composition of this IT structure</p>
<p id="p-0131" num="0179">b. addition of IT structure A to the composition of this IT structure does not violate any IT dependencies for IT structure A and ensures that IT dependencies of the IT structure being added are satisfied. Each added IT structure composition element's name is prefixed with the IT structure name to ensure uniqueness.</p>
<p id="p-0132" num="0180">20) Vector ensureDependencies(ITStructure A)&#x2014;ensures that IT dependencies of the class requiresPresenceOf of ITStructure A in the composition of this IT structure are satisfied. If processing is unsuccessful, a Vector of error message(s) is returned, otherwise, a null Vector is returned.</p>
<p id="p-0133" num="0181">21) Vector deleteElement(ITStructure A [, &#x3c;force&#x3e;])&#x2014;removes IT structure A from the composition of this IT structure. Returns a null Vector if removal was successful, and a Vector of error messages if removal failed. &#x3c;force&#x3e; indicates that A should be removed regardless of relationships with or dependencies on it by other elements of this IT structure's composition.</p>
<p id="p-0134" num="0182">22) Vector setOptimizationFunctions(Vector F)&#x2014;specifies a prioritized list (starting with the priority and ending with the highest) of optimization classes (see Optimization) to be applied to this IT structure. Returns a null Vector if processing is successful, and a Vector of error messages otherwise.</p>
<p id="p-0135" num="0183">23) Vector getOptimizationFunctions( )&#x2014;returns the prioritized list of optimization classes to be applied to this IT structure.</p>
<p id="p-0136" num="0184">24) Vector optimize( )&#x2014;performs optimization of the IT structure using the specified prioritized list of optimization classes and applying each optimization function to the IT structure in turn, starting with the lowest and ending with the highest priority of optimization classes. Returns a Vector, containing the optimized IT structure as its first element if optimization was successful, and a list of error messages otherwise.</p>
<p id="p-0137" num="0185">25) Vector setTargetITDeliveryEnvironments(Vector D)&#x2014;specifies a list of target IT delivery environments (see below) for this IT structure. Returns a list of error messages if an error occurs (e.g., invalid specification of a target IT delivery environment), and a null Vector otherwise.</p>
<p id="p-0138" num="0186">26) Vector getTargetITDeliveryEnvironments( )&#x2014;returns the list of target IT delivery environments for this IT structure.</p>
<p id="p-0139" num="0187">27) getID( )&#x2014;returns a real IT structure's unique identifier; returns null if invoked for a non-real IT structure.</p>
<p id="p-0140" num="0188">28) setID( )&#x2014;sets real IT structure unique identifier; NOOP for a non-real IT structure.</p>
<p id="p-0141" num="0189">29) Vector SLmaintenance(Vector V)&#x2014;optional, supported for Autonomic IT System Improvement Cycle (see below); obtains a list of pairs of operational characteristics and associated values provided by monitoring facilities, and performs adjustment of the operational characteristics to sustain the SL. Returns a null Vector if processing is successful and a list of error messages if processing is unsuccessful.</p>
<p id="p-0142" num="0190">30) Boolean is External( )&#x2014;returns true if this IT structure is an external entity, and false otherwise. An external IT structure may be defined for completeness, and represents an IT structure outside the normal operational boundaries, yet which can engage in IT relationships. External IT structures are excluded from the sets of entities returned by getComposition( ) or getPrimitiveComposition( ) methods of the ITStructure class, yet IT relationships can be established to them and will be included in the sets of entities returned by getRelationships( ) or getPrimitiveRelationships( ) methods of the ITStructure class. E.g., for an IT structure defining a server and network configuration for a Web service, a client (or a set of clients) connecting to the Web service through Internet may be defined as an external IT structure. External IT structures are exempt from error verification or optimization, and are ignored when an IT structure comparison is performed, or when a reverse-specification of an IT structure is performed. External IT structures are presumed to be outside of an IT delivery environment, and will not result in generation of real IT entities as a part of the translation or delivery binding processes.</p>
<p id="p-0143" num="0191">31) setBusinessComponents(Vector BC)&#x2014;sets the list of business components this IT structure directly supports. Note that while all IT structures in a business IT environment support business components, not all IT structures support business components directly, and therefore will have a null list of business components supported. For example, ITStructure ProcurementSystem may support a Procurement business component. At the same time, ITStructure LoggingSubsystem, contained in the ProcurementSystem primitive composition, may not directly support any business components.</p>
<p id="p-0144" num="0192">32) Vector getBusinessComponents( )&#x2014;returns the list of business components this IT structure directly supports (or null, if none).</p>
<p id="p-0145" num="0193">33) Int getTCO( )&#x2014;returns the Total Cost of Ownership (TCO) of an IT structure, as calculated or measured by the appropriate financial tracking system(s), expressed in monetary units (e.g., U.S. dollars) per time period (e.g., 1 year). Note that TCO only includes operations and maintenance (defect repair) costs, and does not include development and deployment costs.</p>
<p id="h-0011" num="0000">2.2.2 Detailed Description of Non-Trivial Methods</p>
<p id="h-0012" num="0000">2.2.2.1 setFunctions</p>
<p id="p-0146" num="0194">A composition of an IT structure instance and relationships among elements of its composition may depend on particular function(s) this IT structure instance is intended to perform. The purpose of this method is to perform the necessary adjustments within IT structure instance that tailor IT structure composition and relationships among composition's elements as appropriate. This method also performs enforcement of function-specific rules.</p>
<p id="p-0147" num="0195">The setFunctions( ) method is subclass-specific. Class ITStructure includes a placeholder that does nothing other than store the specified business function. ITStructure examples include:</p>
<p id="p-0148" num="0196">1) IT structure X has three functions&#x2014;A, B, C. However, these functions cannot be fulfilled indiscriminately (by their nature)&#x2014;either A, or B and/or C, but not A and B, A and C, or A, B, and C can be supported by any instance of IT structure X. The setFunctions( ) method, when invoked, would ensure proper combination of functions requested from the instance of X, and prohibit improper modifications in the future.</p>
<p id="p-0149" num="0197">2) Composition of instance of X may depend on the functions it performs. To perform function A, X may need to include an Intel server running Windows OS, an Oracle DB and a specific program package supporting function A. To perform functions B or C, X may need to include an RS/6000 server (whose power depends on whether only one of functions B and C, or both of these functions are supported), with a DB2 DB and specific program packages supporting functions B or C. So, the composition of X will be altered by the setFunctions( ) method appropriately, based on specification of functions.</p>
<p id="h-0013" num="0000">2.2.2.2 setOperationalCharacteristics</p>
<p id="p-0150" num="0198">A composition of an IT structure instance and relationships among elements of its composition, given a particular set of functions supported by the IT structure instance, may depend on operational characteristics associated with support of particular functions. The purpose of this method is to perform the necessary adjustments within IT structure instance that tailor IT structure composition and relationships among composition's elements as appropriate. This method also performs enforcement of operational-characteristic-specific rules.</p>
<p id="p-0151" num="0199">The setOperationalCharacteristics( ) method is subclass-specific. Class ITStructure includes a placeholder that does nothing other than store the specified operational characteristic values.</p>
<heading id="h-0014" level="1">EXAMPLES</heading>
<p id="p-0152" num="0200">1) IT structure X function A potentially supports up to 500 users. Its response time depends on the power and amount of memory of the processor that runs function A and an increment in the number of supported users can be translated into a processor power and memory increments. An instance of X is created, whose requirement is to support up to 200 users.</p>
<p id="h-0015" num="0000">setOperationalCharacteristics(new Vector(&#x201c;users&#x201d;, 200)) can be used to specify that number and adjust the configuration of the Intel server supporting function A in the composition of instance of X to ensure it supports the required number of users.</p>
<p id="p-0153" num="0201">2) Availability of IT structure X instance supporting function A may be 80% or 99.8%, depending on configuration of processors and software supporting function A. If a single set of hardware and software elements support function A, availability is 80%; if supporting hardware and software are duplicated and appropriate monitoring software is added to permit takeover between the two sets of hardware and software, availability is 99.8%. setOperationalCharacteristics(new Vector(&#x201c;availability&#x201d;, &#x201c;high&#x201d;)) can be used to indicate that instance of X when supporting function A must provide 99.8% availability.</p>
<p id="p-0154" num="0202">3) The above operational characteristics settings may be combined: setOperationalCharacteristics(new Vector((&#x201c;users&#x201d;, 200), (&#x201c;availability&#x201d;, &#x201c;high&#x201d;)))</p>
<p id="h-0016" num="0000">2.2.2.3 Resolve</p>
<p id="p-0155" num="0203">A composition of an IT structure instance and relationships among elements of its composition, given a particular set of functions supported by the IT structure instance and given a particular set of operational characteristics associated with support of the particular set of functions, may depend on additional factors. A purpose of this method is to perform the necessary adjustments within IT structure instance that tailor IT structure composition and relationships among composition's elements as appropriate.</p>
<p id="p-0156" num="0204">The resolve( ) method is subclass-specific. Class ITStructure includes a placeholder that does nothing other than store the specified resolution values.</p>
<heading id="h-0017" level="1">Example</heading>
<p id="p-0157" num="0205">Two hardware and operating systems platforms exist that provide equivalent (both in terms of scale and cost) performance, permitting an instance of IT structure X to support the required number of users with equivalent operational characteristics for its function A. For example, the choice of either of the two hardware and operating system platforms for the composition of an instance of IT structure X providing function A will produce an equivalent result. Further, the delivery environment in which the instance of X will operate, support both combinations of hardware and operating system with equivalent costs and service levels. The resolve( ) method may be used to specify which of the two combinations of hardware and operating system platforms to use based on other factors. For example, IT developer's preference or similarity with hardware and operating system platforms of other IT structures involved in a solution.</p>
<p id="p-0158" num="0206">Assume the two combinations of hardware and operating system platforms are (a) AIX on RS/6000 and (b) Linux on Intel. So, IT structure X may provide a resolution characteristic &#x201c;platform preference&#x201d; which may be specified as &#x201c;AIX&#x201d; or &#x201c;Linux&#x201d;, resulting in the choice of (a) or (b) for the instance of IT structure X.</p>
<p id="h-0018" num="0000">2.2.2.4 setRelationship</p>
<p id="p-0159" num="0207">Once an IT structure is added to the composition of the IT structure being developed, the developer may specify IT relationships between the added IT structure and other elements of the composition or primitive composition of the IT structure being developed.</p>
<p id="p-0160" num="0208"><figref idref="DRAWINGS">FIG. 2</figref> is a flow chart depicting the logic of setRelationship( ) method, in accordance with embodiments of the present invention. The Vector setRelationship(ITStructure x, ITInterface xi, ITStructure y, ITInterface yi, Relationship r) establishes the relationship r between IT structures x and y within the composition of this IT structure. The setRelationship( ) method returns a null Vector if relationship was established successfully, and a Vector of error messages if relationship could not be established. The setRelationship( ) method for ITStructure instance X is invoked with parameters ITStructure A, ITInterface AI, ITStructure B, ITInterface BI, ITRelationship R <b>2101</b>. The method attempts to find IT structure A in the composition of X <b>2102</b>. If IT structure A is not found in the composition of X <b>2103</b>, an error message is returned <b>2104</b> and processing terminates. The method then attempts to find IT structure B in the composition of X <b>2105</b>. If IT structure B is not found in the composition of X <b>2106</b>, an error message is returned <b>2107</b> and processing terminates. The method then proceeds to finding IT interface AI in the list of IT interfaces of IT structure instance A <b>2108</b>. If AI is not found <b>2109</b>, an error message is returned <b>2110</b> and processing terminates. The method then attempts to find IT interface BI in the list of IT interfaces of IT structure instance B <b>2111</b>. If BI is not found <b>2112</b>, an error message is returned <b>2113</b> and processing terminates.</p>
<p id="p-0161" num="0209">Upon ascertaining presence of both specified IT structure instances A and B and IT interfaces AI and BI within A and B, the method execution enters a critical section <b>2114</b> which is used to serialize updates to the IT interface states. A critical section is a portion of the method which cannot be executed concurrently in a multi-threaded fashion, and entry to which must be serialized. No particular method of serialization for critical sections of programs is prescribed by this embodiment&#x2014;known methods include (but are not limited to) semaphores, process queues, process locks, TS (Test and Set) instruction, CS (Compare and Swap) instruction.</p>
<p id="p-0162" num="0210">The method then checks availability of IT interface AI by invoking the getAvailable( ) method of IT interface AI; if AI is unavailable <b>2115</b>, an error message is returned <b>2116</b>, previously entered critical section is exited <b>2124</b>, and processing terminates. The method proceeds to checking availability of IT interface BI by invoking the getAvailable( ) method of IT interface BI; if BI is unavailable <b>2117</b>, an error message is returned <b>2118</b>, previously entered critical section is exited <b>2124</b>, and processing terminates.</p>
<p id="p-0163" num="0211">Upon ascertaining availability of both AI and BI interfaces, the method attempts to relate IT interfaces AI and BI. Vector x is allocated (not shown in the figure) to contain error message strings from attempts to establish the interface between AI and BI. The method attempts to update IT interface AI as interfacing with IT interface BI by invoking AI method establishInterface(BI), passing it BI as the parameter <b>2119</b>. If an error occurs during the establishInterface(BI) method of AI invocation <b>2120</b>, Vector x contains error messages, which are returned to the invoker of setRelationship( ) method of IT structure instance X <b>2121</b> upon exiting the critical section <b>2124</b>. The method then attempts to update IT interface BI as interfacing with IT interface AI by invoking BI method establishInterface(AI), passing it AI as the parameter <b>2122</b>. If an error occurs during the establishInterface(BI) method of AI invocation <b>2123</b>, Vector x contains error messages, which are returned to the invoker of setRelationship( ) method of IT structure instance X <b>2121</b> upon exiting the critical section <b>2124</b>, but only after the error cleanup is performed and the previously established update of IT interface AI is reversed by invoking its method setAvailable(BI) <b>2125</b>.</p>
<p id="p-0164" num="0212">If interface establishment was successful, IT relationship R is updated to contain the interface AI and BI <b>2125</b> prior to completion of method execution.</p>
<p id="h-0019" num="0000">2.2.2.5 AddElement</p>
<p id="p-0165" num="0213"><figref idref="DRAWINGS">FIG. 3</figref> is a flow chart depicting the logic of addElement( ) method, in accordance with embodiments of the present invention. The Vector addElement(ITStructure A) method adds IT structure A to the composition of IT structure X. The IT structures A and X may each independently be an abstract IT structure, a virtual IT structure, or a real IT structure. However, the resulting IT structure will have the highest degree of abstraction of that of X and A. For example, if X is abstract the result will be abstract even if A is not abstract, and if A is abstract the result will be abstract even if X is not abstract. As another example, if either X or A is virtual, and both X and A are not abstract, the result will be virtual.</p>
<p id="p-0166" num="0214">The addElement( ) method returns a null Vector if addition was successful, and a Vector of error messages if addition failed. The addElement( ) method of ITStructure instance X is invoked with parameter ITStructure A, referencing the ITStructure instance to be added to X's composition <b>2201</b>. The method retrieves composition of X as a Vector C <b>2202</b>. If C is null (there are no composition elements for X) <b>2203</b>, this is the addition of the first element, and no additional checks are necessary. The method creates a composition Vector C for X <b>2204</b>, adds ITStructure A to C <b>2205</b>, and returns.</p>
<p id="p-0167" num="0215">If ITStructure X is a primitive IT structure (X.is Primitive( )=true) <b>2243</b>, an error message is stored <b>2244</b> and processing terminates.</p>
<p id="p-0168" num="0216">If ITStructure X already has non-empty composition <b>2203</b>, the method iterates through X's composition elements making sure no IT dependencies of either X or A are violated by the addition of A to X. While there are elements in C <b>2206</b>, the next unprocessed element E of C is obtained <b>2207</b>, and its list of IT dependencies De is extracted using the getDependencies( ) method of E <b>2208</b>.</p>
<p id="p-0169" num="0217">While there are unprocessed elements in De (list of IT dependencies of ITStructure E) <b>2209</b>, the following is performed. A critical section is entered <b>2210</b>. The next element d of De is obtained <b>2211</b>. If d (which belongs to the class ITDependency) indicates exclusion with class Y and IT structure A belongs to class Y or its subclass <b>2212</b>, an error message is stored <b>2213</b>, and upon exiting from the critical section <b>2214</b>, processing terminates. Otherwise, critical section is exited <b>2215</b>.</p>
<p id="p-0170" num="0218">The method execution then proceeds to obtaining the list Da of IT dependencies of A using the getDependencies( ) method of A <b>2216</b>. While there are unprocessed elements in Da (list of IT dependencies of ITStructure A) <b>2217</b>, the following is performed. A critical section is entered <b>2218</b>. The next element d of Da is obtained <b>2219</b>. If d (which belongs to the class ITDependency) indicates exclusion with class Z and IT structure E belongs to class Z or its subclass <b>2220</b>, an error message is stored <b>2213</b>, and upon exiting from the critical section <b>2214</b>, processing terminates. Otherwise, critical section is exited <b>2222</b>.</p>
<p id="p-0171" num="0219">When all possible combinations of potential dependencies of IT structure A and all elements of the composition of X are exhausted, and no violation has been found, the addElement( ) method invokes method ensureDependencies(A) <b>2245</b> to ensure that any of A's IT dependencies of the class requiresPresenceOf are satisfied. If ensureDependencies( ) method's processing was not successful <b>2246</b>, any error messages returned by the ensureDependencies( ) method's invocation are returned, otherwise, A is added to the composition A is added to the composition C of IT structure X <b>2205</b>.</p>
<p id="h-0020" num="0000">2.2.2.6 ensureDependencies</p>
<p id="p-0172" num="0220"><figref idref="DRAWINGS">FIG. 7</figref> is a flow chart depicting the logic of ensureDependencies( ) method, in accordance with embodiments of the present invention. The ensureDependencies(ITStructure A) method ensures that IT dependencies of the class requiresPresenceOf of ITStructure A in the composition of this IT structure are satisfied. If processing is unsuccessful, a Vector of error message(s) is returned, otherwise, a null Vector is returned. The ensureDependencies( ) method is invoked for IT structure instance X with parameter ITStructure A <b>2601</b>. The method retrieves composition of X as Vector C <b>2602</b> and the list of A's IT dependencies, from which it selects a subset (list D) of IT dependencies of class requiresPresenceOf <b>2603</b>. The method then iterates through list D of IT dependencies of class requiresPresenceOf of IT structure A, until the end of the list is reached <b>2604</b>. Each element d of list D is an IT dependency d of class requiresPresenceOf. The method retrieves the next element d from the list <b>2605</b> and attempts to find an element of C (IT structure X composition) that satisfies the IT dependency d <b>2606</b>. If an element E of C satisfying IT dependency d is found <b>2607</b>, IT dependency d is considered to be satisfied.</p>
<p id="p-0173" num="0221">ensureDependencies( ) method then creates an abstract IT structure E of ITStructure subclass that satisfies IT dependency d <b>2608</b> and attempts to add E to the composition of IT structure X using a recursive invocation of X.addElement(E) <b>2609</b>. If execution of X.addElement(E) failed (i.e., E could not be added to X's composition&#x2014;e.g., because it is exclusive with some element of X's composition) <b>2610</b>, any error messages returned by X.addElement(E) are returned <b>2611</b> and processing terminates. Otherwise, addition of E to X's composition was successful, IT dependency d is now considered to be satisfied.</p>
<p id="p-0174" num="0222">An abstract IT relationship (defaultRelationship) between E (either found in the composition C of IT structure X, or newly created) and A using defaultInterface of both is created and added to IT structure X) <b>2612</b>. If establishment of the IT relationship was unsuccessful <b>2613</b>, error message(s) are returned to the invoker <b>2611</b>. If E was newly added <b>2614</b>, it is removed <b>2615</b> to maintain the composition of IT structure X unchanged.</p>
<p id="p-0175" num="0223">If establishment of the new IT relationship was successful <b>2613</b>, the next element d of A's dependencies is considered.</p>
<p id="h-0021" num="0000">2.2.2.7 deleteElement</p>
<p id="p-0176" num="0224"><figref idref="DRAWINGS">FIG. 4</figref> is a flow chart depicting the logic of deleteElement( ) method, in accordance with embodiments of the present invention. The deleteElement(ITStructure A [, &#x3c;force&#x3e;]) method removes IT structure A from the composition of this IT structure. Returns a null Vector if removal was successful, and a Vector of error messages if removal failed. &#x3c;force&#x3e; indicates that A should be removed regardless of relationships with or dependencies on it by other elements of this IT structure's composition. In a first embodiment the &#x3c;force&#x3e; option is available for being selected, and in a second embodiment the &#x3c;force&#x3e; option is not available for being selected. Thus, the &#x3c;force&#x3e; option may not be specified because: (1) the &#x3c;force&#x3e; option is not available for being selected or (2) the &#x3c;force&#x3e; option is available for being selected but was not selected. The deleteElement( ) method is invoked for IT structure instance X with parameter ITStructure A and an optional specification of &#x3c;force&#x3e; <b>2301</b>. The method retrieves composition of X as Vector C <b>2302</b> and attempts to find IT structure A in C <b>2303</b>. If A is not found in C <b>2304</b>, an error message is stored <b>2305</b> and processing terminates. Otherwise, the method proceeds through the attempt to remove A from C.</p>
<p id="p-0177" num="0225">The method builds the list R of IT relationships of elements of C that involve A <b>2306</b>. If R is not null (i.e., A is involved in IT relationships with at least one other element of composition of X) <b>2307</b>, the method checks whether the &#x3c;force&#x3e; option was specified <b>2308</b>, and if not, A cannot be removed from the composition of X, an error message is stored <b>2309</b>, and processing terminates. If, however, &#x3c;force&#x3e; was specified, the method removes all IT relationships in the list R and removes them from the list of IT relationships of elements of C <b>2310</b>.</p>
<p id="p-0178" num="0226">The method then proceeds to check IT dependencies involving A. The method builds a list D of all dependencies of elements of C other than A itself on A <b>2311</b>. If the list D is not null <b>2312</b>, for each dependency in list D, the method attempts to find an element in C other than A that would satisfy the dependency <b>2316</b>. If replacements were not found for any dependencies in list D <b>2317</b>, the method checks whether the &#x3c;force&#x3e; option was specified <b>2313</b>, and if not, A cannot be removed from the composition of X, an error message is stored <b>2314</b>, and processing terminates.</p>
<p id="p-0179" num="0227">Otherwise, if all previous checks indicate that removal of A will not damage IT structure X, or if the &#x3c;force&#x3e; option specification overrides the possible damage, the method removes A from C <b>2315</b>.</p>
<p id="h-0022" num="0000">2.3 IT Interfaces</p>
<p id="p-0180" num="0228">An IT Interface is a characteristic of an IT structure, specifying a type of relationship this IT structure can engage in relative to other IT structures.</p>
<p id="p-0181" num="0229">An abstract IT interface instance is an IT interface instance involving at least one abstract IT structure.</p>
<p id="p-0182" num="0230">A virtual IT interface instance is a non-abstract IT interface instance involving at least one virtual IT structure.</p>
<p id="p-0183" num="0231">A real IT interface instance is an IT interface instance involving only real IT structures.</p>
<p id="p-0184" num="0232">A multi-connection IT interface is an IT interface to which multiple IT structures can relate (connect). For example, multiple invokers can call a single program&#x2014;sometimes, concurrently.</p>
<p id="p-0185" num="0233">A single-connection IT interface is an IT interface to which a single IT structure can relate (connect). For example, only a single cable can be plugged into a single printer port of a personal computer.</p>
<p id="p-0186" num="0234">An available IT interface is an IT interface to which one or more IT structures can relate (connect).</p>
<p id="p-0187" num="0235">A busy or Unavailable IT interface is an IT interface which has exhausted its ability to relate, and cannot be involved in any additional relationships (i.e., the maximum number of relationships have already been established). For example, a printer port of a personal computer is available if nothing is connected to it, and busy/unavailable if a printer cable is plugged into it.</p>
<p id="h-0023" num="0000">2.3.1 ITInterface Class</p>
<p id="p-0188" num="0236">An ITInterface class inherits from ITEntity class and has the following methods:</p>
<p id="p-0189" num="0237">1) ITInterface(String name, Type type)&#x2014;constructor, creates an ITInterface instance with specified name and type</p>
<p id="p-0190" num="0238">2) boolean isSingleConnection( )&#x2014;returns true if this ITInterface is a single-connection IT interface, and false otherwise</p>
<p id="p-0191" num="0239">3) boolean isAvailable([int p])&#x2014;returns true if ITInterface is available, false otherwise; optional parameter p indicates the specific connection for a multi-connection interface</p>
<p id="p-0192" num="0240">4) setAvailable([ITInterface i])&#x2014;makes ITInterface available; an ITInterface parameter i may be specified for multi-connection IT interfaces to indicate which of the multiple connections is to be made available</p>
<p id="p-0193" num="0241">5) Vector establishInterface(ITInterface i [, int p])&#x2014;establishes an interface with the parameter IT interface; returns an empty Vector if interface was established successfully, and a list of error messages otherwise. For a multiple-connection IT interface, may be optionally provided with the second parameter p specifying the connection.</p>
<p id="p-0194" num="0242">6) int getAvailable( )&#x2014;for multi-connection IT interfaces returns the number of available connections; always returns zero (unavailable) or one (available) for single-connection IT interfaces; always returns &#x201c;high integer&#x201d; for multi-connection IT interfaces with unlimited number of connections</p>
<p id="p-0195" num="0243">7) int getRelated( )&#x2014;returns the number of ITInterface instances related to this ITInterface</p>
<p id="p-0196" num="0244">8) Vector getRelatedITInterfaces( )&#x2014;returns a list of zero or more ITInterface instances related to this ITInterface</p>
<p id="p-0197" num="0245">9) Vector verifyValidity(ITInterface Y)&#x2014;returns null Vector if a connection between this IT interface instance and IT interface instance Y would be valid&#x2014;i.e., the ITInterface subclass of this instance correlates with the ITInterface subclass of ITInterface instance Y; returns a Vector containing error message(s) if subclasses of X and Y do not correlate.</p>
<p id="p-0198" num="0246">Note that the verifyValidity( ) method is a NOOP in the ITInterface class&#x2014;each subclass of ITInterface, with the exception of DefaultInterface, overrides this method with the appropriate logic. Also note that an ITInterface cannot be instantiated&#x2014;only ITInterface subclasses have practical uses.</p>
<p id="h-0024" num="0000">2.3.2 ITInterface Subclasses</p>
<p id="p-0199" num="0247">A number of different interfaces may exist among IT structures. Each IT structure, by definition, includes the DefaultInterface, which is used to establish relationships not involving real interfaces, such as &#x201c;requires presence of . . . to install&#x201d;. DefaultInterface supports any relationships.</p>
<p id="p-0200" num="0248">Other ITInterface subclasses are (&#x201c;correlates&#x201d; in this context means &#x201c;can only be related to&#x201d;):
<ul id="ul0004" list-style="none">
    <li id="ul0004-0001" num="0000">
    <ul id="ul0005" list-style="none">
        <li id="ul0005-0001" num="0249">InstalledOn(&#x3c;single&#x3e;)&#x2014;IT structure is installed using this interface (correlates with Supports)</li>
        <li id="ul0005-0002" num="0250">Supports({&#x3c;single&#x3e;|&#x3c;multiple&#x3e;})&#x2014;IT structure(s) can be installed on this interface (correlates with InstallsOn)</li>
        <li id="ul0005-0003" num="0251">ConnectsTo(&#x3c;connection type&#x3e;,{&#x3c;single&#x3e;|&#x3c;multiple&#x3e;})&#x2014;can connect to IT structure(s) using &#x3c;connection type&#x3e;, correlates with ConnectsTo</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0201" num="0252">where:</p>
<p id="p-0202" num="0253">&#x3c;connection type&#x3e;::={&#x3c;direct&#x3e;|&#x3c;network&#x3e;|&#x3c;messaging&#x3e;|&#x3c;other&#x3e;}</p>
<p id="p-0203" num="0254">X ConnectsTo(&#x3c;connection type&#x3e;, {&#x3c;single&#x3e;|&#x3c;multiple&#x3e;}, Integer IPaddress, Integer NetMask, String transport[Vector ports])&#x2014;an additional constructor signature for ConnectsTo, where IPaddress is the IP address associated with this interface, NetMask is the associated netmask, transport is an identifier of the type of transport (&#x201c;TCP&#x201d; or &#x201c;UDP&#x201d;), and ports is a list of IP ports to be used (if not specified, dynamic port assignment is assumed).
<ul id="ul0006" list-style="none">
    <li id="ul0006-0001" num="0000">
    <ul id="ul0007" list-style="none">
        <li id="ul0007-0001" num="0255">Invokes(&#x3c;invocation type&#x3e;, &#x3c;single&#x3e;)&#x2014;can invoke IT structure using &#x3c;invocation type&#x3e;, correlates with Invokable</li>
        <li id="ul0007-0002" num="0256">Invocable(&#x3c;invocation type&#x3e;, {&#x3c;single&#x3e;|&#x3c;multiple&#x3e;})&#x2014;can be invoked by IT structure(s) using &#x3c;invocation type&#x3e;, correlates with Invokes where:</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0204" num="0257">&#x3c;invocation type&#x3e;::={&#x3c;direct&#x3e;|&#x3c;interrupt&#x3e;|&#x3c;other&#x3e;}
<ul id="ul0008" list-style="none">
    <li id="ul0008-0001" num="0000">
    <ul id="ul0009" list-style="none">
        <li id="ul0009-0001" num="0258">Manages({&#x3c;single&#x3e;|&#x3c;multiple&#x3e;})&#x2014;is managing IT structure(s), correlates with Manageable</li>
        <li id="ul0009-0002" num="0259">Manageable(&#x3c;single&#x3e;)&#x2014;is managed by IT structure, correlates with Manages</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0205" num="0260">X Balances(&#x3c;multiple&#x3e;)&#x2014;is balancing load for IT structures, correlates with BalancedBy</p>
<p id="p-0206" num="0261">X BalancedBy(&#x3c;single&#x3e;)&#x2014;is balanced by a load balancer, correlates with Balances</p>
<p id="p-0207" num="0262">Table 3 shows valid ITInterface subclass correlations, wherein &#x201c;yes&#x201d; denotes a pair of correlated IT interfaces.</p>
<p id="p-0208" num="0263">
<tables id="TABLE-US-00003" num="00003">
<table frame="none" colsep="0" rowsep="0" pgwide="1">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="392pt" align="center"/>
<thead>
<row>
<entry namest="1" nameend="1" rowsep="1">TABLE 3</entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
<row>
<entry>Interface correlations</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="11">
<colspec colname="1" colwidth="42pt" align="left"/>
<colspec colname="2" colwidth="35pt" align="left"/>
<colspec colname="3" colwidth="35pt" align="left"/>
<colspec colname="4" colwidth="35pt" align="left"/>
<colspec colname="5" colwidth="35pt" align="left"/>
<colspec colname="6" colwidth="28pt" align="left"/>
<colspec colname="7" colwidth="35pt" align="left"/>
<colspec colname="8" colwidth="35pt" align="left"/>
<colspec colname="9" colwidth="42pt" align="left"/>
<colspec colname="10" colwidth="35pt" align="left"/>
<colspec colname="11" colwidth="35pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>Default</entry>
<entry>Installed</entry>
<entry/>
<entry>Connects</entry>
<entry/>
<entry/>
<entry/>
<entry/>
<entry/>
<entry>Balanced</entry>
</row>
<row>
<entry/>
<entry>Interface</entry>
<entry>On</entry>
<entry>Supports</entry>
<entry>To</entry>
<entry>Invokes</entry>
<entry>Invocable</entry>
<entry>Manages</entry>
<entry>Manageable</entry>
<entry>Balances</entry>
<entry>By</entry>
</row>
<row>
<entry namest="1" nameend="11" align="center" rowsep="1"/>
</row>
<row>
<entry>Default</entry>
<entry>yes</entry>
<entry>yes</entry>
<entry>yes</entry>
<entry>yes</entry>
<entry>yes</entry>
<entry>yes</entry>
<entry>yes</entry>
<entry>yes</entry>
<entry>yes</entry>
<entry>yes</entry>
</row>
<row>
<entry>Interface</entry>
</row>
<row>
<entry>InstalledOn</entry>
<entry>yes</entry>
<entry/>
<entry>yes</entry>
</row>
<row>
<entry>Supports</entry>
<entry>yes</entry>
<entry>yes</entry>
</row>
<row>
<entry>ConnectsTo</entry>
<entry>yes</entry>
<entry/>
<entry/>
<entry>yes</entry>
</row>
<row>
<entry>Invokes</entry>
<entry>yes</entry>
<entry/>
<entry/>
<entry/>
<entry/>
<entry>yes</entry>
</row>
<row>
<entry>Invocable</entry>
<entry>yes</entry>
<entry/>
<entry/>
<entry/>
<entry>yes</entry>
</row>
<row>
<entry>Manages</entry>
<entry>yes</entry>
<entry/>
<entry/>
<entry/>
<entry/>
<entry/>
<entry/>
<entry>yes</entry>
</row>
<row>
<entry>Manageable</entry>
<entry>yes</entry>
<entry/>
<entry/>
<entry/>
<entry/>
<entry/>
<entry>yes</entry>
</row>
<row>
<entry>Balances</entry>
<entry>yes</entry>
<entry/>
<entry/>
<entry/>
<entry/>
<entry/>
<entry/>
<entry/>
<entry/>
<entry>yes</entry>
</row>
<row>
<entry>BalancedBy</entry>
<entry>yes</entry>
<entry/>
<entry/>
<entry/>
<entry/>
<entry/>
<entry/>
<entry/>
<entry>yes</entry>
</row>
<row>
<entry namest="1" nameend="11" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0209" num="0264">The IT interface subclasses are summarized as follows in terms of IT<b>1</b>, IT<b>2</b>, IF<b>1</b>, and IF<b>2</b>:
<ul id="ul0010" list-style="none">
    <li id="ul0010-0001" num="0000">
    <ul id="ul0011" list-style="none">
        <li id="ul0011-0001" num="0265">IT<b>1</b>: IT structure <b>1</b></li>
        <li id="ul0011-0002" num="0266">IT<b>2</b>: IT structure <b>2</b></li>
        <li id="ul0011-0003" num="0267">IF<b>1</b>: interface of IT structure <b>1</b></li>
        <li id="ul0011-0004" num="0268">IF<b>2</b>: interface of IT structure <b>2</b></li>
        <li id="ul0011-0005" num="0269">1) Installed On: a characteristic of IF<b>1</b> permitting IT<b>1</b> to be installed on IT<b>2</b></li>
        <li id="ul0011-0006" num="0270">2) Supports: a characteristic of IF<b>2</b> permitting IT<b>1</b> to be installed on IT<b>2</b></li>
        <li id="ul0011-0007" num="0271">3) ConnectsTo: a characteristic of IF<b>1</b> permitting IT<b>1</b> to connect to IT<b>2</b></li>
        <li id="ul0011-0008" num="0272">4) Invokes: a characteristic of IF<b>1</b> permitting IT<b>1</b> to invoke IT<b>2</b></li>
        <li id="ul0011-0009" num="0273">5) Invocable: a characteristic of IF<b>2</b> permitting IT<b>2</b> to be invoked by IT<b>1</b></li>
        <li id="ul0011-0010" num="0274">6) Manages: a characteristic of IF<b>1</b> permitting IT<b>1</b> to manage IT<b>2</b></li>
        <li id="ul0011-0011" num="0275">7) Manageable: a characteristic of IF<b>2</b> permitting IT<b>2</b> to be managed by IT<b>1</b></li>
        <li id="ul0011-0012" num="0276">8) Balances: a characteristic of IF<b>1</b> permitting IT<b>1</b> to balance load for IT<b>2</b></li>
        <li id="ul0011-0013" num="0277">9) BalancedBy: a characteristic of IF<b>2</b> permitting IT<b>2</b> to be balanced by IT<b>1</b></li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0210" num="0278">Examples of IT interfaces are as follows:
<ul id="ul0012" list-style="none">
    <li id="ul0012-0001" num="0279">A program is installed on a computer</li>
    <li id="ul0012-0002" num="0280">A computer supports one or more programs to be installed on the computer</li>
    <li id="ul0012-0003" num="0281">Computer A connects to computer B through a network</li>
    <li id="ul0012-0004" num="0282">Program A invokes program B</li>
    <li id="ul0012-0005" num="0283">Program B is invocable by program A</li>
    <li id="ul0012-0006" num="0284">Program A manages system B</li>
</ul>
</p>
<p id="p-0211" num="0285">System B is manageable by program A</p>
<p id="p-0212" num="0286">In this embodiment, labor entities are associated with other entities by means of defaultInterface and defaultITRelationship. In another embodiment, a special ITInterface, laborInterface, may be defined, and used to comprise a laborRelationship to relate a labor entity to another entity.</p>
<p id="h-0025" num="0000">2.3.3 Detailed Description of Non-Trivial Methods</p>
<p id="h-0026" num="0000">2.3.3.1 setAvailable</p>
<p id="p-0213" num="0287"><figref idref="DRAWINGS">FIG. 5</figref> is a flow chart, depicting the logic of setAvailable( ) method, in accordance with embodiments of the present invention. The setAvailable([ITInterface i]) method makes ITInterface available; an ITInterface parameter i may be specified for multi-connection IT interfaces to indicate which of the multiple connections is to be made available. The setAvailable( ) method is invoked for ITInterface instance X with an optional parameter ITInterface i <b>2401</b>. If IT interface instance X is a single-connection IT interface (X.isSingleConnection( ) returns true) <b>2402</b>, the field interfacingWith in ITInterface X is set to null <b>2403</b>, and the count of IT interfaces X is interfacing with is set to zero <b>2404</b>. Note that it is the responsibility of the invoker to ensure that the corresponding IT interface that was interfacing with X (if any) also becomes available.</p>
<p id="p-0214" num="0288">If ITInterface X is a multiple-connection IT interface <b>2402</b>, processing ensures that a parameter i is passed, indicating which connection out of the multitude to make available. If parameter i is not passed <b>2411</b>, and an error is signaled <b>2412</b>, and processing terminates. The mechanism of signaling an error may vary, depending on implementation, and may include, but is not limited to, an error message, an exception, an ABEND, a log and/or a trace entry.</p>
<p id="p-0215" num="0289">Upon ascertaining availability of parameter i <b>2311</b>, processing enters a critical section <b>2405</b>. ITInterface i passed as the parameter to method setAvaliable( ) is located in the array of IT interfaces ITInterface X is interfacing with <b>2406</b>. If i is not found <b>2407</b>, processing terminates after exiting a critical section <b>2410</b>. If i is found <b>2407</b>, the method sets the entry in the array of IT interfaces ITInterface X is interfacing with that corresponds to i to null <b>2408</b>, decrements the count of IT interfaces X is interfacing with <b>2409</b>, and exits the critical section <b>2410</b>.</p>
<p id="h-0027" num="0000">2.3.3.2 establishInterface</p>
<p id="p-0216" num="0290"><figref idref="DRAWINGS">FIG. 6</figref> is a flow chart depicting the logic of establishInterface( ) method, in accordance with embodiments of the present invention. The establishInterface(ITInterface i [, int p]) method establishes an interface with the parameter IT interface; returns an empty Vector if interface was established successfully, and a list of error messages otherwise. The establishInterface( ) method is invoked for ITInterface instance X with a parameter ITInterface Y and an optional parameter integer p <b>2501</b>.</p>
<p id="p-0217" num="0291">The method starts by verifying validity of establishment of connection between X and Y (by invoking method X.verifyValidity(Y)) <b>2502</b>. If establishment of connection between X and Y is invalid (X.verifyValidity(Y) returns error message(s)) <b>2503</b>, method establishInterface( ) returns the error message(s) returned by X.verifyValidity(Y) invocation <b>2504</b> and terminates processing.</p>
<p id="p-0218" num="0292">If ITInterface X is a single-connection interface <b>2505</b>, but X is available <b>2506</b>, method establishInterface( ) returns and error message <b>2507</b> and terminates processing. Otherwise, if X is a single-connection interface <b>2505</b> and X is available <b>2506</b>, a critical section is entered <b>2508</b> the interfacingWith reference of ITInterface X is set to Y <b>2509</b>, the count of IT interfaces X is connected with is set to one <b>2510</b>, the critical section is exited <b>2511</b>, and processing completes successfully.</p>
<p id="p-0219" num="0293">For a multiple-connection ITInterface X <b>2505</b>, critical section is entered <b>2512</b>. If the optional parameter p was specified on invocation of method establishInterface( ) <b>2513</b>, but p-th entry of X's array of connections is not null (X.is Available(p)=false), indicating that the p-th connection of X is unavailable <b>2514</b>, an error message is stored <b>2515</b>, the critical section is exited <b>2511</b>, and processing terminates. If, on the other hand, the p-th connection of X is available <b>2514</b>, the p-th entry in X's array of connections is set to Y <b>2516</b>.</p>
<p id="p-0220" num="0294">If the optional parameter p was not specified on invocation of method establishInterface( ) <b>2513</b>, an attempt is made to find an available (null) entry in X's array of connections <b>2519</b>. If an available entry is found <b>2521</b>, the found entry is set to Y <b>2520</b>, otherwise an error message is stored <b>2522</b>, and processing terminates after exiting the critical section <b>2511</b>.</p>
<p id="p-0221" num="0295">If a connection was established <b>2516</b> <b>2520</b>, if ITInterface X does not support an unlimited number of connections <b>2517</b>, the count of connections of X is incremented <b>2518</b>. The method establishInterface( ) then exits the critical section <b>2511</b> and completes its processing.</p>
<p id="h-0028" num="0000">2.4 IT Relationships</p>
<p id="p-0222" num="0296">An IT Relationship is a pair of associated (established) IT interfaces belonging to two different IT structure instances. Note that the notion of IT relationship is introduced for convenience. This notion is not absolutely necessary for the model, since a pair of established IT interfaces can always be considered in and of itself, but IT relationships represent a convenient way of tracking interfacing IT structure pairs.</p>
<p id="p-0223" num="0297">A symmetric IT relationship is an IT relationship, involving IT interfaces of identical class. Examples of a symmetric IT relationship include:</p>
<p id="p-0224" num="0298">1) IT structure A uses ConnectsTo interface to relate to IT structure B, and IT structure B uses ConnectsTo interface to relate to IT structure A.</p>
<p id="p-0225" num="0299">2) IT structure A uses DefaultInterface to relate to IT structure B, and IT structure B uses DefaultInterface to relate to IT structure A.</p>
<p id="p-0226" num="0300">An asymmetric IT relationship is an IT relationship, involving IT interfaces of different classes. As an example, IT structure A InstallsOn IT structure B, while IT structure B Supports IT structure A.</p>
<p id="p-0227" num="0301">An abstract IT relationship instance is an IT relationship interface instance involving at least one abstract IT interface instance.</p>
<p id="p-0228" num="0302">A virtual IT relationship instance is a non-abstract IT relationship instance involving at least one virtual IT interface.</p>
<p id="p-0229" num="0303">A real IT relationship instance is an IT relationship instance involving only real IT interface instances.</p>
<p id="h-0029" num="0000">2.4.1 ITRelationship Class</p>
<p id="p-0230" num="0304">ITRelationship class inherits from ITEntity class and has the following methods:</p>
<p id="p-0231" num="0305">1) ITRelationship(String name, Type type[, ITInterface A, B])&#x2014;constructor, establishes a relationship &#x3c;name&#x3e; of type &#x3c;type&#x3e; using IT interfaces A and B, or defaultInterface if A and B are not specified.</p>
<p id="p-0232" num="0306">2) boolean isSymmetric( )&#x2014;returns true if relationship is symmetric, false otherwise</p>
<p id="p-0233" num="0307">3) [ ] ITInterface getRelatedITInterfaces( )&#x2014;returns the pair of ITInterface instances involved in a relationship</p>
<p id="p-0234" num="0308">ITRelationship cannot be instantiated&#x2014;only ITRelationship subclasses have practical uses.</p>
<p id="h-0030" num="0000">2.4.2 ITRelationship Subclasses</p>
<p id="p-0235" num="0309">Subclasses of the ITRelationship class are predicated by the types of IT interfaces included in the model. The following IT relationships may exist given the types of IT interfaces defined above:
<ul id="ul0013" list-style="none">
    <li id="ul0013-0001" num="0000">
    <ul id="ul0014" list-style="none">
        <li id="ul0014-0001" num="0310">DefaultITRelationship&#x2014;two IT structures are related in an unidentified way</li>
        <li id="ul0014-0002" num="0311">InstallationITRelationship&#x2014;IT structure <b>1</b> is installed on IT structure <b>2</b></li>
        <li id="ul0014-0003" num="0312">CommunicationITRelationship(&#x3c;connection type&#x3e;)&#x2014;IT structure <b>1</b> communicates to IT structure <b>2</b> using &#x3c;connection type&#x3e;</li>
        <li id="ul0014-0004" num="0313">InvocationITRelationship(&#x3c;invocation type&#x3e;)&#x2014;IT structure <b>1</b> invokes IT structure <b>2</b></li>
        <li id="ul0014-0005" num="0314">ManagementITRelationship&#x2014;IT structure <b>1</b> manages IT structure <b>2</b>
<br/>
2.5 IT Dependencies
</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0236" num="0315">An IT dependency is a characteristic of an ITStructure class, indicating requirements of this ITStructure class instances for presence or absence of this or other ITStructure class instances.</p>
<p id="p-0237" num="0316">A symmetric IT dependency is an IT dependency which can be applied to ITStructure subclasses involved, regardless of the order of ITStructure subclasses in the IT dependency predicate. For example, IT structure A depends on IT structure B, and IT structure B depends on IT structure A in the same way. The order of A and B in the previous sentence may be reversed without a change in meaning of the sentence.</p>
<p id="p-0238" num="0317">An asymmetric IT dependency is a non-symmetric IT dependency (i.e., it cannot be applied to ITStructure subclasses involved regardless of their order in the IT dependency predicate). For example: IT structure A depends on IT structure B, but IT structure B does not depend on IT structure A.</p>
<p id="h-0031" num="0000">2.5.1 ITDependency Class</p>
<p id="p-0239" num="0318">ITDependency class inherits from ITEntity class and has the following methods:</p>
<p id="p-0240" num="0319">1) ITDependency(String name, String A, B)&#x2014;constructor, establishes a dependency of ITStructure subclass A on ITStructure subclass B, where A and B are names of subclasses.</p>
<p id="p-0241" num="0320">2) boolean is Symmetric( )&#x2014;returns true if relationship is symmetric, false otherwise</p>
<p id="p-0242" num="0321">3) [ ] String getDependentClasses( )&#x2014;returns the pair of names of ITStructure subclasses involved in an IT dependency.</p>
<p id="p-0243" num="0322">ITDepdendency cannot be instantiated&#x2014;only ITDependency subclasses have practical uses.</p>
<p id="h-0032" num="0000">2.5.2 ITDependency Subclasses</p>
<p id="p-0244" num="0323">A number of different dependencies may exist among IT structures comprising (i.e., included in a complex IT structure's composition) or potentially comprising an IT structure (i.e., having a potential of being included in a complex IT structure's composition). For the purposes of this definition, the following dependencies (ITDependency subclasses) are considered (i.e., other dependencies may be defined as appropriate for the structural model):</p>
<p id="p-0245" num="0324">1) RequiresPresenceOf&#x2014;as in &#x201c;IT structure <b>1</b> requires presence of IT structure <b>2</b>&#x201d;</p>
<p id="p-0246" num="0325">2) ExclusiveWith&#x2014;Negation of 1&#x2014;as in &#x201c;IT structure <b>1</b> is exclusive with IT structure <b>2</b>&#x201d;, IT structure <b>1</b> cannot be installed or operate in the presence of IT structure <b>2</b></p>
<p id="p-0247" num="0326">In this embodiment, no difference is made between requirement of presence for installation and requirement of presence for operation, and the corresponding exclusivity. In another embodiment, such distinction could be made.</p>
<p id="h-0033" num="0000">2.6 IT Delivery Environment</p>
<p id="p-0248" num="0327">An IT delivery environment (or delivery environment) is a collection of rules, policies, practices, and associated support functions, including labor, physical space, power supply, hardware, software, networking, and management facilities involved in operating a data center, as well as means of provisioning and deployment of the aforementioned support functions. IT delivery environment also includes a collection of all delivery-bound real IT structures operating in it or in process of being deployed.</p>
<p id="p-0249" num="0328">IT delivery environment may be null if every IT structure in it operates independently, does not use any data center services, no data center infrastructure exist, and no rules or standards are imposed on IT structures by the delivery environment. For example: a stand-alone personal computer is operated in a null IT delivery environment.</p>
<p id="p-0250" num="0329">A delivery-bound IT structure is a virtual IT structure that can be provisioned and deployed in a particular IT delivery environment.</p>
<p id="h-0034" num="0000">2.6.1 ITDeliveryEnvironment Class</p>
<p id="p-0251" num="0330">ITDeliveryEnvironment class inherits from ITStructure and is always a complex IT structure. ITDeliveryEnvironment composition includes all IT structures deployed in the delivery environment. ITDeliveryEnvironment composition may (and normally would) also include one or more IT structures representing data center infrastructure.</p>
<p id="p-0252" num="0331">Unlike ITStructure, ITDeliveryEnvironment permits an empty composition&#x2014;empty composition is valid for the null IT delivery environment.</p>
<p id="p-0253" num="0332">In addition to the standard ITStructure methods, ITDeliveryEnvironment includes the following methods:</p>
<p id="p-0254" num="0333">1) Vector verifyConformance(ITStructure A)&#x2014;verifies conformance of an IT structure to the rules of the IT delivery environments. Returns an empty Vector if the parameter IT structure conforms to the IT delivery environment rules, and a Vector containing a list of error message strings if the parameter IT structure does not conform to the IT delivery environment rules. This method is a NOOP for the null IT delivery environment.</p>
<heading id="h-0035" level="1">Example</heading>
<p id="p-0255" num="0334">A set of product standards may be established by a data center, such that for certain types of products only products included in the standard set may be used&#x2014;e.g., operating systems may be restricted to UNIX, and Windows; e.g., UNIX hardware platforms may be restricted to RS/6000 model F50 or H50 and no other computer may be used to run UNIX. verifyConformance( ) method in this case would examine the composition of its parameter IT structure (recursively, if the parameter IT structure is complex) and ensure that it only includes products for operating systems and hardware platform for UNIX that are either within the established set of standards or have higher level of abstraction than specific operating system and specific type of hardware.</p>
<p id="p-0256" num="0335">2) Vector addElement({&#x3c;new&#x3e;|&#x3c;update&#x3e;}, ITStructure A)&#x2014;overrides the parent class addElement( ) method; performs delivery binding of a virtual IT structure. Returns a Vector containing a delivery-bound IT structure as the first element if delivery binding is successful, and a list of error messages otherwise. This method is a NOOP (i.e., returns the input virtual IT structure as the first element of the returned Vector) for the null IT delivery environment. &#x3c;new&#x3e; or &#x3c;update&#x3e; input parameter may be specified to indicate whether this is a binding of a newly added IT structure, or an update of an existing IT structure.</p>
<p id="p-0257" num="0336">3) Vector deploy({&#x3c;new&#x3e;|&#x3c;update&#x3e;}, ITStructure A)&#x2014;initiates deployment of a delivery-bound IT structure. Returns a Vector containing error messages if processing is unsuccessful, and a null Vector otherwise. &#x3c;new&#x3e; or &#x3c;update&#x3e; input parameter may be specified to indicate whether this is a deployment of a new IT structure, or a change to an existing IT structure.</p>
<p id="p-0258" num="0337">4) NetworkSecurityPolicy getNetworkSecurityPolicy( )&#x2014;returns network security policy established within the IT delivery environment. The NetworkSecurityPolicy class may be specific to a particular IT delivery environment.</p>
<p id="p-0259" num="0338">5) setNeworkSecurityPolicy(NetworkSecurityPolicy S)&#x2014;establishes a network security policy S for an IT delivery environment.</p>
<p id="p-0260" num="0339">Note that all methods of ITDeliveryEnvironment class are subclass-specific. Class ITDeliveryEnvironment includes NOOP placeholders.</p>
<p id="h-0036" num="0000">2.7 Extending Entity Model</p>
<p id="p-0261" num="0340">The above model provides a foundation for building an IT class library. However, it is highly abstract and insufficient for effective modeling of IT. A set of general extensions, with its classes inheriting from the appropriate base IT classes, defining basic IT constructs, such as computers or network devices, is required as further foundation. Such extended class libraries exist&#x2014;e.g., Common Information Model (CIM).</p>
<p id="p-0262" num="0341">Another example of such class hierarchy is described in <figref idref="DRAWINGS">FIG. 18</figref>, in accordance with embodiments of the present invention. <figref idref="DRAWINGS">FIG. 18</figref> is an example of a set of extensions going from the class hierarchy origin (ITEntity) down to a set of specific computer models shown at a lowest hierarchical level as the virtual IT structures RS/6000 model F30, RS/6000 model F50, and RS/6000 model H50. <figref idref="DRAWINGS">FIG. 18</figref> also shows intermediate hierarchical levels having successively lower degrees of abstraction. For example, consider the following example path through the hierarchical representation shown in <figref idref="DRAWINGS">FIG. 18</figref>: ITStructure, device, Identifiable Device, computer, IBM xSreies, RS/6000, RS/6000 model F50. In the preceding example, device is less abstract than ITstructure, IdentifiableDevice is less abstract than device, computer is less abstract than IBMxSeries, IBMxSeries is less abstract than RS/6000, and RS/6000 is less abstract than RS/6000 model F50. The lowest level IT structure of RS/6000 model F50 is a virtual IT structural, though not delivery bound.</p>
<p id="p-0263" num="0342">Within the IT class hierarchy, class Device is included; the class Device embodies any types of hardware devices, and, in addition to all inherited and specific properties and methods associated with class Device, provides the following methods:
<ul id="ul0015" list-style="none">
    <li id="ul0015-0001" num="0000">
    <ul id="ul0016" list-style="none">
        <li id="ul0016-0001" num="0343">Int PeakPowerConsumption( )&#x2014;returns the peak power consumption of the device (expressed in KW);</li>
        <li id="ul0016-0002" num="0344">Boolean isRackMounted( )&#x2014;returns true if the device is rack-mounted, and false otherwise;</li>
        <li id="ul0016-0003" num="0345">Int requiredSpace( )&#x2014;returns the number of rack slots a device requires if it is rack mounted, or the size of device footprint (expressed in square feed) if device is not rack mounted.</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0264" num="0346">Within the IT class hierarchy, class Firewall is included; the class Firewall embodies any type of firewalls, and, in addition to all inherited and specific properties and methods associated with class Firewall, provides the following methods:
<ul id="ul0017" list-style="none">
    <li id="ul0017-0001" num="0000">
    <ul id="ul0018" list-style="none">
        <li id="ul0018-0001" num="0347">Vector getRules( )&#x2014;returns the Vector of firewall rules associated with this firewall, or null if no rules have been specified for this firewall;</li>
        <li id="ul0018-0002" num="0348">setRules([Vector rules)])&#x2014;if not specified, the set of firewall rules is set to empty (no rules); otherwise, the set of firewall rules is set to the specified Vector of rule strings.</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0265" num="0349">Class Program, also included in the IT class hierarchy, in addition to all the other properties and methods inherited or specific to class Program, possesses the properties IPTransportServer and Ports. Note that &#x201c;application&#x201d; and &#x201c;software&#x201d; are each to be construed as a member of the class Program.
<ul id="ul0019" list-style="none">
    <li id="ul0019-0001" num="0000">
    <ul id="ul0020" list-style="none">
        <li id="ul0020-0001" num="0350">IPTransportServer([&#x201c;TCP&#x201d;|&#x201c;UDP&#x201d;])&#x2014;sets the IPTransportServer property value to &#x201c;TCP&#x201d; if a Program is a TCP server, &#x201c;UDP&#x201d; if a Program is a UDP server, or null, if a Program is not an IP transport server.</li>
        <li id="ul0020-0002" num="0351">String getIPTransportServer( )&#x2014;returns the value of the IPTransportServer property.</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0266" num="0352">Ports is a Vector of TCP or UDP ports which the Program uses to accept communications.
<ul id="ul0021" list-style="none">
    <li id="ul0021-0001" num="0000">
    <ul id="ul0022" list-style="none">
        <li id="ul0022-0001" num="0353">setPorts([Vector &#x3c;ports&#x3e;])&#x2014;sets the value of IP ports associated with the IP transport server; if not specified, dynamic port assignment is assumed,</li>
        <li id="ul0022-0002" num="0354">Vector getPorts( )&#x2014;retrieves the list of ports associated with the IP transport server.</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0267" num="0355">Associated with the above properties, is a list of clients, IPClients.
<ul id="ul0023" list-style="none">
    <li id="ul0023-0001" num="0000">
    <ul id="ul0024" list-style="none">
        <li id="ul0024-0001" num="0356">Vector getIPClients( )&#x2014;returns a list of IP clients associated with the IP transport server.</li>
        <li id="ul0024-0002" num="0357">setIPClients(Vector &#x3c;IP address&#x3e;)&#x2014;associates a set of IP clients with the IP transport server, where &#x3c;IP address&#x3e; is either address of the host or network where each client is located.</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0268" num="0358">The is SessionBased property of class Program indicates whether the program represented by the instance of class Program supports persistent sessions.
<ul id="ul0025" list-style="none">
    <li id="ul0025-0001" num="0000">
    <ul id="ul0026" list-style="none">
        <li id="ul0026-0001" num="0359">Boolean is SessionBased( )&#x2014;returns the value of is SessionBased property of class Program,</li>
        <li id="ul0026-0002" num="0360">void setIsSessionBased({true|false}) otherwise sets the value of is SessionBased property to the specified Boolean value.</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0269" num="0361">The expectedTxLoad property of class Program reflects the expected server load triggered by a single transaction on the scale of 0, 1, 2, 3 where 0 corresponds to unknown, 1 reflects low expected server load, 2 reflects medium expected server load, and 3 reflects high expected server load.
<ul id="ul0027" list-style="none">
    <li id="ul0027-0001" num="0000">
    <ul id="ul0028" list-style="none">
        <li id="ul0028-0001" num="0362">Integer getExpectedTxLoad( )&#x2014;returns the value of expectedTxLoad property.</li>
        <li id="ul0028-0002" num="0363">setExpectedTxLoad({0|1|2|3})&#x2014;sets the value of expectedTxLoad property.</li>
        <li id="ul0028-0003" num="0364">setPeakBandwidth(Int &#x3c;peak bandwidth&#x3e;)&#x2014;sets the value of peak bandwidth this program may require, expressed in Mbps.</li>
        <li id="ul0028-0004" num="0365">Int getPeakBandwidth( )&#x2014;returns the peak value of bandwidth this program may require, expressed in Mbps.</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0270" num="0366">Class Program may be associated with an ITServer object; this association is established by means of getITServer( ) and setITServer( ) methods.
<ul id="ul0029" list-style="none">
    <li id="ul0029-0001" num="0000">
    <ul id="ul0030" list-style="none">
        <li id="ul0030-0001" num="0367">ITServer getITServer( )&#x2014;returns ITServer object associated with the Program, or null if none is associated.</li>
        <li id="ul0030-0002" num="0368">setITServer(ITServer S)&#x2014;associates a Program with ITServer S, or disassociates a Program from an ITServer if S is null.</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0271" num="0369">An ITServer class, included in the IT class hierarchy, in addition to all the other properties and methods inherited or specific to class ITServer, has the following methods:
<ul id="ul0031" list-style="none">
    <li id="ul0031-0001" num="0000">
    <ul id="ul0032" list-style="none">
        <li id="ul0032-0001" num="0370">setITLBGroup(ITLBGroup G)&#x2014;associates an ITServer with an instance of ITLBGroup, or disassociates ITServer from an instance of ITLBGroup if G is null.</li>
        <li id="ul0032-0002" num="0371">ITLBGroup getITLBGroup( )&#x2014;returns the associated ITLBGroup instance, or null if no ITLBGroup instance is associated.</li>
        <li id="ul0032-0003" num="0372">setlbApplication(Program A)&#x2014;sets an association with an instance of Program object which represents the application program requests to which should be load balanced.</li>
        <li id="ul0032-0004" num="0373">Program getlbApplication( )&#x2014;returns instance of class Program, requests to which should be load balanced, or null if no such program has been associated using setlbApplication( ) method.</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0272" num="0374">An ITLBGroup class, included in the IT class hierarchy, in addition to all the other properties and methods inherited or specific to class ITLBGroup, has the following methods:
<ul id="ul0033" list-style="none">
    <li id="ul0033-0001" num="0000">
    <ul id="ul0034" list-style="none">
        <li id="ul0034-0001" num="0375">Vector getServerList( )&#x2014;returns the list of ITServer objects comprising the load balanced group.</li>
        <li id="ul0034-0002" num="0376">setServerList(Vector S)&#x2014;sets the list of ITServer objects comprising the load balanced group.</li>
        <li id="ul0034-0003" num="0377">ITLBMechanism getITLBMechanism( )&#x2014;returns the instance of ITLBMechanism class, which contains the definition and parameters of the load balancing mechanism to be used</li>
        <li id="ul0034-0004" num="0378">setITLBMechanism(ITLBMechanism M)&#x2014;sets the instance of ITLBMechanism class.</li>
        <li id="ul0034-0005" num="0379">ITLBSessionPersistence getITLBSessionPersistence( )&#x2014;returns the stored definition of the session persistence mechanism to be used; class ITLBSessionPersistence is a user-defined class which represents the session persistence mechanism to be used&#x2014;source IP address/port, URL, or cookie-based string.</li>
        <li id="ul0034-0006" num="0380">setITLBSessionPersistence (ITLBSessionPersistence S)&#x2014;sets the definition of the session persistence mechanism to be used.</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0273" num="0381">Class LoadBalancer is included in the IT class hierarchy, embodying any type of load balancer, and, in addition to all the other properties and methods inherited or specific to class LoadBalancer, having the following methods:
<ul id="ul0035" list-style="none">
    <li id="ul0035-0001" num="0000">
    <ul id="ul0036" list-style="none">
        <li id="ul0036-0001" num="0382">Vector getRules( )&#x2014;returns the Vector of load balancing rules associated with this load balancer, or null if no rules have been specified for this load balancer.</li>
        <li id="ul0036-0002" num="0383">setRules([Vector rules)])&#x2014;if not specified, the set of load balancer rules is set to empty (no rules); otherwise, the set of load balancer rules is set to the specified Vector of rule strings.</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0274" num="0384">Class ITLBMechanism is the parent for the following classes which describe individual load balancing mechanisms which have become de-facto industry standards: ITLBMechanismRoundRobin, ITLBMechanismLeastLoad, ITLBMechanismFastestResponse.</p>
<p id="p-0275" num="0385">Class ITLBMechanismRoundRobin provides the following methods:
<ul id="ul0037" list-style="none">
    <li id="ul0037-0001" num="0000">
    <ul id="ul0038" list-style="none">
        <li id="ul0038-0001" num="0386">setWeightCoefficients(Vector weightCoefficients[ ])&#x2014;sets weight coefficients associated with the round-robin algorithm for load balancing</li>
        <li id="ul0038-0002" num="0387">Vector getWeightCoefficients( )&#x2014;returns the values of weight coefficients associated with the round-robin algorithm for load balancing</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0276" num="0388">Class ITLBMechanismLeastLoad provides the following methods:
<ul id="ul0039" list-style="none">
    <li id="ul0039-0001" num="0000">
    <ul id="ul0040" list-style="none">
        <li id="ul0040-0001" num="0389">setLoadMetrics(ITLBLoadMetrics loadMetrics)&#x2014;specify least load algorithm load metrics, where class ITLBLoadMetrics is a user-defined class which provides a method returning a double precision value of the load metrics.</li>
        <li id="ul0040-0002" num="0390">ITLBLoadMetrics getLoadMetrics( )&#x2014;retrieve least load algorithm load metrics</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0277" num="0391">Class ITLBMechanismFastestResponse provides the following methods:
<ul id="ul0041" list-style="none">
    <li id="ul0041-0001" num="0000">
    <ul id="ul0042" list-style="none">
        <li id="ul0042-0001" num="0392">setResponseString(String responseString)&#x2014;sets the response string associated with the fastest response load balancing algorithm</li>
        <li id="ul0042-0002" num="0393">String getResponseString( )&#x2014;retrieves the response string associated with the fastest response load balancing algorithm.</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0278" num="0394">Within the IT class hierarchy, class ITIPTransportWrapper is included, to describe IP transport wrappers, and, in addition to all inherited properties and method, possesses the following properties and provides the following methods:
<ul id="ul0043" list-style="none">
    <li id="ul0043-0001" num="0000">
    <ul id="ul0044" list-style="none">
        <li id="ul0044-0001" num="0395">IPTransport([&#x201c;TCP&#x201d;I &#x201c;UDP&#x201d;])&#x2014;sets the IPTransport property value to &#x201c;TCP&#x201d; if the non-compliant transport is TCP, &#x201c;UDP&#x201d; if the non-compliant transport is UDP, or null otherwise.</li>
        <li id="ul0044-0002" num="0396">String getIPTransport( )&#x2014;returns the value of the IPTransport property.</li>
        <li id="ul0044-0003" num="0397">Vector getInPorts( )&#x2014;returns the vector of TCP or UDP ports where the wrapper is to intercept the incoming communications.</li>
        <li id="ul0044-0004" num="0398">setInPorts(Vector P)&#x2014;sets the vector of TCP or UDP ports where the wrapper is to intercept the incoming communications.</li>
        <li id="ul0044-0005" num="0399">Integer getOutPort( )&#x2014;returns the number of TCP or UDP port where the wrapper is to open the pipe to.</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0279" num="0400">The present invention discloses a translator (see Section 2.10 infra) to translate the abstract IT structure at the highest level (denoted as ITStrucure) to the virtual IT structures RS/6000 model F30, RS/6000 model F50, and RS/6000 model H50. To effectuate such translation, all of the intermediate IT structures shown in <figref idref="DRAWINGS">FIG. 18</figref> may be stepped through in order to arrive at the final virtual IT structures (e.g., RS/6000 model F30, RS/6000 model F50, RS/6000 model H50, etc.). In some embodiments, however, the designer may provide sufficient input description (typically stored in libraries) so that the translator may not have to step through all of the intermediate IT structures shown in <figref idref="DRAWINGS">FIG. 18</figref> to arrive at the final virtual IT structures. For example, a requirement that a particular IT structure can store and execute software may imply that the particular IT structure is a computer, so that the intermediate levels of device and IdentifiableDevice in the preceding example path could be skipped by the translator.</p>
<p id="p-0280" num="0401">Although each IT structure box in <figref idref="DRAWINGS">FIG. 18</figref> is a primitive IT structure, a box appearing in the hierarchy of <figref idref="DRAWINGS">FIG. 15</figref> could alternatively be a complex IT structure. For example, a box in the hierarchy could represent a client-server architecture as a complex IT structure having primitive elements of server and client.</p>
<p id="h-0037" num="0000">2.8 Extended IT Delivery Environment</p>
<p id="p-0281" num="0402">Similar to ITStructure subclasses, the ITDeliveryEnvironment class can have subclasses, used to define various delivery environments. All of ITDeliveryEnvironment subclasses must override two methods: verifyConformance( ) and addElement( ). The verifyConformance( ) method verifies whether a particular IT structure can be deployed and can operate within a given instance of an ITDeliveryEnvironment subclass. The addElement( ) method performs delivery binding of an IT structure to the IT delivery environment subclass instance if the IT structure has been previously verified via verifyConformance( ) to be depoyable and operable within the IT delivery environment defined by the given instance of an ITDeliveryEnvironment subclass.</p>
<p id="p-0282" num="0403">While this embodiment does not attempt to enumerate all possible delivery environments, an example ITDeliveryEnvironment subclass, called StandardizedITEnvironment is described. The key characteristic of the StandardizedITEnvironment is that it imposes product standards and restricts IT structures deployed and operated within it only to the allowable product set. So, the verifyConformance( ) method of StandardizedITEnvironment checks primitive composition of its argument target IT structure and indicates conformance only if every element of the primitive composition of the target IT structure belongs to the set of primitive IT structures permitted by the ITDeliveryEnvironment subclass. For example, the ITDeliveryEnvironment subclass may restrict a computer to be an IBM xSeries computer or an IBMzSeries computer.</p>
<p id="p-0283" num="0404">Another embodiment for using the verifyConformance( ) method is a situation in which an IT structure is currently deployed in IT delivery environment A, but it is desired that this IT structure migrate to IT delivery environment B. Accordingly, this IT structure would be checked against the verifyConformance( ) method of delivery environment B to determine if this IT structure could be deployed in delivery environment B.</p>
<p id="p-0284" num="0405"><figref idref="DRAWINGS">FIG. 18</figref> is a flow chart depicting a modified addElement( ) method of StandardizedITEnvironment to perform delivery binding of the argument target IT structure to the instance of StandardizedITEnvironment, in accordance with embodiments of the present invention. The modified addElement( ) method effectuates IT delivery binding by invoking the general addElement( ) method of <figref idref="DRAWINGS">FIG. 3</figref> with an addition of elements required to delivery bind the IT structure to a given IT delivery environment. As a part of this process, the modified addElement( ) method of <figref idref="DRAWINGS">FIG. 19</figref> includes the general addElement( ) method <b>1902</b> of <figref idref="DRAWINGS">FIG. 3</figref>. If at least one element of the primitive composition of the delivery-bound IT structure requires access to the Internet, then the modified addElement( ) method assigns <b>1904</b> IP addresses to the elements of primitive composition of the target IT structure requiring IP addresses, these IP addresses being unique relative to the current primitive composition of the instance of StandardizedITEnvironment and adhering to the IP addressing policy of the instance of StandardizedITEnvironment. Similarly, the addElement( ) method assigns names <b>1906</b> to the elements of primitive composition of the target IT structure requiring names, and ensures uniqueness of these names relative to the current primitive composition of the instance of StandardizedITEnvironment and adherence of these names to the naming policies of the instance of StandardizedITEnvironment. If target IT structure requires access to the Internet through the firewall(s) provided by the instance of StandardizedITEnvironment, the firewall rules of the instance of StandardizedITEnvironment are updated <b>1908</b> to permit the appropriate communications.</p>
<p id="h-0038" num="0000">2.8.1 Verifying Conformance of an ITStructure to an Exemplary Delivery Environment</p>
<p id="p-0285" num="0406">The exemplary delivery environment is a data center and is aimed at providing the highly-available branded infrastructure for Internet-accessible IT applications.</p>
<p id="p-0286" num="0407">The data center is a new, state-of-the-art facility. It is built on today's technology and practices a philosophy of being a security-focused operation. Activities and services are monitored by an experienced technical staff 24&#xd7;7 from the Network Operations Center (NOC). The facilities include 3,000 square feet of raised floor, a network operations monitoring center, conference rooms, administrative space and coffee room.</p>
<p id="p-0287" num="0408">The physical space of the data center has a secure co-location in a 3,000 square foot room with 18&#x2033; raised floor and is ADA (Americans with Disabilities Act)-compliant. The physical space includes 27&#x2033;&#xd7;39&#x2033;&#xd7;84&#x2033; cabinets with internal vertical cable management and vented front and back doors. All hardware must fit into cabinets. No space other than cabinets is provided.</p>
<p id="p-0288" num="0409">The electrical power to the data center from NYSEG (New York State Electric and Gas Company) is delivered by dual redundant feeds. The electric service in the building is connected to a parallel redundant UPS. There is a backup 1000 KW diesel generator with 7-day fuel reserve.</p>
<p id="p-0289" num="0410">Primary Internet access of the data center is via AT&#x26;T Gigabit Ethernet over multi-mode fiber to their national fiber network node located in adjacent building. This network node has eight connections to the AT&#x26;T network. Alternate Internet access is via 100 Mbps Ethernet over single-mode fiber connection to the Cable &#x26; Wireless Network.</p>
<p id="p-0290" num="0411">Security for the data center includes access control by Smart Card system issued by NOC personnel staffed 24&#xd7;7&#xd7;365 (24 hours, 7 days a week, 365 days a year). Data center floor access is controlled by access card and biometric scan. Visitors are granted access by duly authorized representatives of the data center clients. A biometric scan and surrender of the visitor's driver's license for a proxy card is required for visitors to gain access from the lobby to the administrative area. Another biometric scan and use of the access card is required to enter the raised floor area.</p>
<p id="p-0291" num="0412">Conformance factors for the IT structure to the above IT delivery environment (i.e., data center) include:
<ul id="ul0045" list-style="none">
    <li id="ul0045-0001" num="0000">
    <ul id="ul0046" list-style="none">
        <li id="ul0046-0001" num="0413">Electric power availability, reliability (and possibly voltage)</li>
        <li id="ul0046-0002" num="0414">Ability to introduce devices out of the list of &#x201c;supported&#x201d; devices</li>
        <li id="ul0046-0003" num="0415">Ability to use specific software, or requirement to run specific software (e.g., for monitoring or virus defense)</li>
        <li id="ul0046-0004" num="0416">Availability of specific rack sizes/space</li>
        <li id="ul0046-0005" num="0417">Ability to use geometrically non-standard devices</li>
        <li id="ul0046-0006" num="0418">Compliance to physical network layer (jack types; switches/hubs; network speed)</li>
        <li id="ul0046-0007" num="0419">Compliance to monitoring/admin access (e.g., there may be a requirement to have an extra network interface per physical box for admin access)</li>
        <li id="ul0046-0008" num="0420">Possible conflict of application availability requirements to DE service window</li>
        <li id="ul0046-0009" num="0421">Network bandwidth requirements</li>
        <li id="ul0046-0010" num="0422">Internet availability requirements (dual-ISP, etc. . . .)</li>
        <li id="ul0046-0011" num="0423">Architectural requirements with respect to network (layering, firewalls, IP addressing schema, network isolation requirements)</li>
        <li id="ul0046-0012" num="0424">Network traffic requirements (e.g., &#x201c;This IT Delivery Environment will allow only HTTP/HTTPS traffic from the Internet to your hosts&#x201d;; &#x201c;We do not allow outgoing traffic on port <b>25</b> directly, you must use one of our SMTP servers if you want to send email&#x201d;)</li>
        <li id="ul0046-0013" num="0425">Application type limitations (&#x201c;We do not allow mass-mailing applications&#x201d;)</li>
        <li id="ul0046-0014" num="0426">Security level provided by IT Delivery Environment versus IT structure security requirements
<br/>
2.9 IT Development Process
</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0292" num="0427"><figref idref="DRAWINGS">FIG. 9</figref> is a chart depicting the IT development process, in accordance with embodiments of the present invention. Translator <b>3009</b> (see Sec. 2.10; <figref idref="DRAWINGS">FIG. 10</figref>) may be used in a translation process to translate an abstract IT structure <b>3006</b> into another abstract IT structure <b>3007</b> having a lower degree of abstraction than abstract IT structure <b>3006</b>. This translation process may be recursively repeated until the abstract IT structure <b>3006</b>/<b>3007</b> has been translated into a virtual IT structure <b>3008</b> or until the translation process aborts due to an unsuccessful translation attempt. Alternatively, a single translation of abstract IT structure <b>3006</b> by translator <b>3009</b> may produce the virtual IT structure <b>3008</b>. The virtual IT structure <b>3008</b> serves as input to the delivery binder <b>3012</b> (see Sec. 2.11; Sec. 2.2.2.5, addElement ( ) method, <figref idref="DRAWINGS">FIG. 3</figref>), which translates the virtual IT structure into a delivery-bound IT structure <b>3013</b>, elements of which are then provisioned and deployed <b>3014</b> (see Sec. 2.12; deploy( ) method), resulting in a real IT structure <b>3015</b> operating in the appropriate IT delivery environment.</p>
<p id="h-0039" num="0000">2.10 Translation</p>
<p id="p-0293" num="0428">Translation is performed on an abstract IT structure instance with the intention of obtaining a virtual IT structure, which can then be optimized and bound to one or more IT delivery environment to obtain one or more real IT structure. <figref idref="DRAWINGS">FIGS. 10 and 11</figref> collectively describe an IT translator (ITRAN) adapted to translate an abstract IT structure to the virtual IT structure.</p>
<p id="p-0294" num="0429"><figref idref="DRAWINGS">FIG. 10</figref> is a flow chart depicting the process of translation of IT structure instance X <b>3501</b>, in accordance with embodiments of the present invention. The process starts by initializing the return Vector <b>3508</b> to an empty Vector <b>3502</b>. If X is not abstract <b>3503</b>, no translation is necessary, and a null return Vector is returned to indicate that no action was performed (and no errors occurred).</p>
<p id="p-0295" num="0430">The process then performs a series of iterations until either an error occurs or a virtual IT structure is obtained. The process invokes the translation iteration process <b>3504</b>, as described infra in relation to <figref idref="DRAWINGS">FIG. 11</figref>, to iteratively translate the abstract elements of X (i.e., the IT structures in the composition of X) until an instantiation of X following said iterative translation is virtual. If an error is indicated by the translation iteration (by returning error message(s)) <b>3505</b>, any error messages returned by the translation iteration process are added to the return Vector <b>3506</b> and processing terminates. If translation iteration processing did not indicate an error <b>3505</b>, a check is performed to ascertain whether the translation iteration processing was successful <b>3507</b> (i.e., the translation iteration process returned a new instance of IT structure X), and if so, the new instance of IT structure X returned by the translation iteration process is made the first element of the return Vector <b>3508</b>, and the current instance of IT structure X is replaced with the new instance of IT structure X returned by the translation iteration process <b>3509</b>. The process then loops back to the check of whether the instance of IT structure X is still abstract <b>3503</b>.</p>
<p id="p-0296" num="0431"><figref idref="DRAWINGS">FIG. 11</figref> is a flow chart depicting the translation iteration process, which is performed for an IT structure instance X <b>3601</b>, in accordance with embodiments of the present invention. The process iterates through the abstract elements of X's composition to perform a translation of each abstract element of X, wherein the iterations end when a re-instantiation of X results in X being virtual (i.e., being in a virtual state).</p>
<p id="p-0297" num="0432">The process starts by initializing the return Vector <b>3620</b> to an empty Vector <b>3602</b>. The process then invokes the process of specification for X <b>3603</b>, which may be a NOOP if X is fully specified, or, if X is not fully specified, will ensure full specification of characteristics of X. If an error occurs during the specification process for X <b>3604</b>, any error messages returned by the specification process are added to the return Vector <b>3605</b> and processing terminates.</p>
<p id="p-0298" num="0433">The process then checks whether X is abstract <b>3606</b>, and if X is no longer abstract (i.e., X is now virtual), the process makes X the first element of the return Vector <b>3607</b> and returns.</p>
<p id="p-0299" num="0434">If X is still abstract <b>3606</b>, the process invokes selection of subclasses for X <b>3608</b>. If an error occurs during subclass selection <b>3609</b>, any error messages returned by the subclass selection process are added to the return Vector <b>3605</b> and processing terminates.</p>
<p id="p-0300" num="0435">If subclass selection did not indicate an error <b>3609</b>, the process checks whether X is still abstract <b>3610</b>, and if X is no longer abstract (i.e., X is now virtual), the process makes X the first element of the return Vector <b>3607</b> and returns.</p>
<p id="p-0301" num="0436">If X is still abstract <b>3610</b>, the process checks whether X is primitive <b>3611</b>, and if so, the process places a translation error message in the return Vector <b>3607</b> and processing terminates. The reason for this is that subclass selection process for a primitive IT structure has searched all possible subclasses of X (including any existing virtual IT structures) and has not found one that would represent a satisfactory translation result for X&#x2014;i.e., no possible virtual IT structure exists that would satisfy functional, operational, and other requirements and/or constraints imposed on X.</p>
<p id="p-0302" num="0437">If X is complex <b>3611</b>, the process iterates through abstract elements of X's composition <b>3612</b>. Because X is still abstract, by definition of abstract IT entities, X's composition includes at least one abstract element. Each iteration through X's composition finds the next abstract element E of X's composition <b>3613</b> and recursively invokes the translation process for E <b>3614</b>. If an error occurs during translation of E <b>3615</b>, any error messages returned by the recursive invocation of the translation process are added to the return Vector <b>3605</b> and processing terminates.</p>
<p id="p-0303" num="0438">If translation process is successful and returns a new instance of E <b>3615</b>, the new instance of E (denoted as E<sub>NEW</sub>) is substituted for the current instance of E in the composition of X <b>3616</b>. The process of substitution (not shown, but an analogous process is shown in <figref idref="DRAWINGS">FIG. 14</figref>) involves ensuring that any IT dependencies in X involving E are still satisfied, any IT relationships in X involving E are still valid and established, any characteristics of X (functional, operational, or other) are still supported, and X is still valid for any IT delivery environment for which it is targeted.</p>
<p id="p-0304" num="0439">X (with E<sub>NEW </sub>substituted therein) is then re-instantiated <b>3618</b> to form an interim IT structure instance. If an error occurs during re-instantiation of X <b>3619</b> (e.g., if the interim IT structure instance is not virtual), error messages are added to the return Vector <b>3605</b> and processing terminates.</p>
<p id="p-0305" num="0440">X (now re-instantiated) is then made the first element of the return Vector <b>3620</b>. If X is no longer abstract <b>3621</b> (i.e., it is virtual), the return Vector (including X as its first element) is returned and processing terminates. If X is still abstract <b>3621</b>, processing iterates to finding the next abstract composition element of X <b>3612</b>.</p>
<p id="p-0306" num="0441"><figref idref="DRAWINGS">FIG. 12</figref> is a flow chart depicting the process of ensuring specification of characteristics of abstract IT structure instance X <b>3701</b>, in accordance with embodiments of the present invention. The process starts by initializing the return Vector <b>3707</b> to an empty Vector <b>3702</b>. The process then invokes the adjustment process for the X's function(s) <b>3703</b>. The adjustment process for a particular characteristic of an IT structure may be a NOOP if that characteristic is fully specified, or, otherwise, will ensure full specification of that characteristic. If an error occurs during the adjustment of X's function(s) <b>3704</b>, any returned error messages are added to the return Vector <b>3705</b> and processing terminates.</p>
<p id="p-0307" num="0442">The process then checks whether X is still abstract <b>3706</b>. It is conceivable that as a result of invocation of setFunctions( ) method of X, X became virtual. If this is the case, X is made the first element of the return Vector <b>3707</b> and processing terminates.</p>
<p id="p-0308" num="0443">If X is still abstract <b>3706</b>, the process invokes the adjustment process for the X's operational characteristics <b>3708</b>. If an error occurs during the adjustment of X's operational characteristics <b>3709</b>, any returned error messages are added to the return Vector <b>3705</b> and processing terminates.</p>
<p id="p-0309" num="0444">The process then once again checks whether X is still abstract <b>3710</b>. It is conceivable that as a result of invocation of setOperationalCharacteristics( ) method of X, X became virtual. If this is the case, X is made the first element of the return Vector <b>3707</b> and processing terminates.</p>
<p id="p-0310" num="0445">If X is still abstract <b>3710</b>, the process invokes the adjustment process for the X's resolution values <b>3711</b>. If an error occurs during the adjustment of X's resolution values <b>3712</b>, any returned error messages are added to the return Vector <b>3705</b> and processing terminates, otherwise, the process makes X the first element of the return Vector <b>3707</b> prior to completion.</p>
<p id="p-0311" num="0446"><figref idref="DRAWINGS">FIG. 13</figref> is a flow chart depicting the process of adjusting a particular set of characteristics of IT structure instance X <b>3801</b>, in accordance with embodiments of the present invention. The process starts by initializing the return Vector to an empty Vector <b>3802</b>. The process then builds a list D of unspecified characteristics of the requested type that have default values <b>3803</b>. If D is not empty <b>3804</b> (i.e., at least one unspecified characteristic of the requested type has a default value), the unspecified characteristics are set to their default value <b>3805</b> using the appropriate method (i.e., setFunctions( ) for functional characteristics, setOperationalCharacteristics( ) for operational characteristics, and resolve( ) for resolution values). If an error occurs during the appropriate method invocations <b>3806</b> (i.e., if the requested characteristics could not be set to their corresponding default values), any error messages are added to the return Vector <b>3807</b> and processing terminates.</p>
<p id="p-0312" num="0447">If default setting for the unspecified characteristics of the requested type was successful <b>3806</b>, X is re-instantiated <b>3808</b>. If an error occurs during the attempt to re-instantiate X <b>3809</b> (i.e., there is an internal logic error in X&#x2014;X has accepted the default settings for the unspecified characteristics of the requested type, but now cannot be instantiated using these settings), any error messages are added to the return Vector <b>3807</b> and processing terminates.</p>
<p id="p-0313" num="0448">The process then builds a list U of unspecified characteristics of the requested type <b>3810</b> (i.e., those that remain unspecified after any defaults were set). If U is not empty <b>3811</b> (i.e., at least one characteristic of the requested type remains unspecified), the process prompts the user for specification of the unspecified characteristics of the requested type <b>3812</b> and sets the now specified characteristic values using the appropriate method <b>3813</b>. If an error occurs during the appropriate method invocations <b>3814</b> (i.e., if the requested characteristics could not be set to the values specified for them by the user), any error messages are added to the return Vector <b>3807</b> and processing terminates.</p>
<p id="p-0314" num="0449">A number of possibilities exist as alternatives to addressing the user, comprising:
<ul id="ul0047" list-style="none">
    <li id="ul0047-0001" num="0000">
    <ul id="ul0048" list-style="none">
        <li id="ul0048-0001" num="0450">consulting an internal policy, possibly, associated with the target IT delivery environment(s),</li>
        <li id="ul0048-0002" num="0451">generating a value for each unspecified characteristic of the requested type that would not violate internal logic of the class of IT structure X,</li>
        <li id="ul0048-0003" num="0452">ignoring the fact that a particular characteristic is unspecified,</li>
        <li id="ul0048-0004" num="0453">requiring the users to always provide a default value for all characteristics of IT structures.</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0315" num="0454">If setting of the user-specified values for the unspecified characteristics of the requested type was successful <b>3814</b>, X is re-instantiated <b>3815</b>. If an error occurs during the attempt to re-instantiate X <b>3816</b> (i.e., there is an internal logic error in X&#x2014;X has accepted the user settings for the unspecified characteristics of the requested type, but now cannot be instantiated using these settings), any error messages are added to the return Vector <b>3807</b> and processing terminates.</p>
<p id="p-0316" num="0455">The process then checks whether X was re-instantiated during preceding steps <b>3817</b>, and if so, makes the new instance of X the first element of the return Vector <b>3818</b>, otherwise (no error has occurred, but X was not re-instantiated&#x2014;this is a NOOP processing case), an empty (as originally created) return Vector is returned upon completion of the process.</p>
<p id="p-0317" num="0456"><figref idref="DRAWINGS">FIG. 14</figref> shows the process of selection a subclass of IT structure X, in accordance with embodiments of the present invention. The instances of IT structure X would support characteristics of the instance (abstract) of IT structure X, relationships imposed on the instance of IT structure X, dependencies of IT structure X, and be valid for the IT delivery environments to which the instance of IT structure X is targeted <b>3901</b>. The process starts by initializing the return Vector to an empty Vector <b>3902</b>. The process then finds all subclasses of the class C of X <b>3903</b> (i.e., those classes in the class library that inherit from C directly or indirectly (by inheriting from a class that inherits from C directly or indirectly)). If no subclasses of C are found <b>3904</b>, an error is indicated <b>3905</b> and processing terminates. The reason for indicating an error is that X is abstract, and therefore must have a way to be translated to a virtual IT structure instance. The translation process ensures that X is fully specified, and therefore, no other means of reducing abstraction than finding a less abstract class for X remain&#x2014;and that just proved to be impossible.</p>
<p id="p-0318" num="0457">If at least one subclass of C was found <b>3904</b>, the process iterates through the list of subclasses CL of C <b>3906</b>. An instance Y of subclass CL is created <b>3907</b>. If an error occurs when creating an instance of CL <b>3908</b>, CL is ignored (although an error message may be stored in the return Vector, as inability to create an instance of CL indicates an error in CL definition) and the next value of CL is taken.</p>
<p id="p-0319" num="0458">If instance Y of class CL was created successfully <b>3908</b>, Y's IT dependencies are verified <b>3909</b>. If an error is detected by verification of Y's IT dependencies <b>3910</b>, CL is discarded and the next value of CL is taken.</p>
<p id="p-0320" num="0459">The process then attempts to impose all characteristics of IT structure instance X on Y <b>3911</b>. If any characteristics of X could not be imposed on Y and an error occurred <b>3912</b>, CL is discarded and the next value of CL is taken.</p>
<p id="p-0321" num="0460">If transfer of characteristics from X to Y was successful <b>3912</b>, any IT relationships of X are imposed on Y <b>3913</b>. If Y cannot support all of X's IT relationships <b>3914</b>, CL is discarded and the next value of CL is taken.</p>
<p id="p-0322" num="0461">If transfer of IT relationships from X to Y was successful <b>3914</b>, Y is now verified against all IT delivery environments to which X is targeted <b>3915</b>. If an error is indicated <b>3916</b>, CL is discarded and the next value of CL is taken.</p>
<p id="p-0323" num="0462">Now that Y supports the context of X, a check is performed to determine whether Y is abstract <b>3917</b>. It is conceivable that Y was virtual from the beginning, or that one or a combination of the actions performed for the transfer of X's context to Y caused Y to become virtual. The reason this check was not performed before this point is that until it is known that Y can support the context of X, Y's type is irrelevant.</p>
<p id="p-0324" num="0463">If Y is virtual <b>3917</b>, it is added to the list of translation candidates D <b>3921</b>, and the next value of CL is taken.</p>
<p id="p-0325" num="0464">If Y is abstract <b>3917</b>, a translation of Y is attempted <b>3918</b> (recursive invocation of the translation process). If an error occurs during translation of Y or if no error occurs but Y is not translated anyway (NOOP) <b>3919</b>, CL is discarded and the next value of CL is taken.</p>
<p id="p-0326" num="0465">If Y was successfully translated <b>3919</b>, but the result of the translation is still an abstract IT structure <b>3920</b>, CL is discarded and the next value of CL is taken.</p>
<p id="p-0327" num="0466">Discarding a subclass of C that does not translate into a virtual IT structure is not a necessity but a design choice. It would be equally valid to include the abstract IT structure Y in the list of candidates D in hopes of subsequent user intervention and manual modification of class source of the class CL of Y such that translation of Y to a virtual IT structure becomes possible. The design choice may be made for conciseness and minimization of complicated actions by the user.</p>
<p id="p-0328" num="0467">If Y is now virtual <b>3920</b>, Y is added to the list of translation candidates D <b>3921</b> before the next CL value is taken,</p>
<p id="p-0329" num="0468">Upon completion of iteration through the subclasses CL of C, if the list of translation candidates D is empty <b>3922</b> (i.e., no translation candidates were found), an error is indicated <b>3905</b> and processing terminates.</p>
<p id="p-0330" num="0469">If the list of translation candidates D contains at least one translation candidate <b>3922</b>, the process of translation candidate selection is performed <b>3923</b>, resulting in selection of a single translation result Y from the list of translation candidates D, which is made the first element of the return Vector <b>3924</b> prior to completion of the process.</p>
<p id="p-0331" num="0470"><figref idref="DRAWINGS">FIG. 15</figref> is a flow chart depicting the process of selecting the best translation candidate Y from a list of translation candidates D (all virtual) <b>30001</b>, in accordance with embodiments of the present invention. The process starts by optimizing each element of D (using its optimize( ) method), and, if optimization is successful, replacing the element of D with the result of its optimization <b>30006</b>. If the list of candidates D has a single element <b>30002</b>, no further action is performed and the one element of D is returned.</p>
<p id="p-0332" num="0471">If the list of translation candidates D has more than one element to choose from <b>30002</b>, the prioritized list of optimization classes (getOptimizationFunctions( ) method) is retrieved <b>30003</b>. The process then iterates through the list G of optimization classes <b>30004</b>, always taking the next (i.e., the highest priority) optimization class F from the list <b>30005</b>. The process then assesses each element of D using the assessment function A associated with the optimization class F <b>30007</b> and only keeps in D the elements for which A produces the best result <b>30008</b>, discarding all others.</p>
<p id="p-0333" num="0472">If more than one element remains in D <b>30009</b> (i.e., optimization resulted in equally good result for multiple elements of D), the process iterates to the next assessment function.</p>
<p id="p-0334" num="0473">If after the application of a sequence of assessment functions, D only has a single element <b>30009</b>, that element is returned as the one selected for translation from the list of candidates D.</p>
<p id="p-0335" num="0474">If all assessment functions are exhausted before D is reduced to a single element <b>30004</b>, the list of elements in D is presented to the user and the user's choice acts as the tie-breaker <b>30010</b>&#x2014;the user can select a single element from the list and the others will be discarded prior to the process completion.</p>
<p id="p-0336" num="0475">Prompting the user for a tie-breaker decision is a design choice. Other designs are possible, including those in which other means of breaking the tie are employed (e.g., random choice), and those in which multiple elements of D are returned and, as a result, the user is presented with multiple equally valid translations. The reason for the choice of human intervention as the tie-breaker is the extremely low probability of having multiple applications of assessment functions to multiple different optimized IT structure instances produce identical results.</p>
<p id="h-0040" num="0000">2.11 Binding</p>
<p id="p-0337" num="0476">An IT structure instance X can be added to another IT structure Y by inclusion of X into the composition of Y by means of the addElement( ) method of Y. The process of addition of IT structure instance X to Y is called binding.</p>
<p id="h-0041" num="0000">2.11.1 Deliver Binding</p>
<p id="p-0338" num="0477">A virtual IT structure targeted to a particular IT delivery environment may be delivery-bound (i.e., translated into a delivery-bound virtual IT structure) by means of invoking the addElement( ) method of the target ITDeliveryEnvironment class instance.</p>
<p id="h-0042" num="0000">2.12 Initiating Deployment of a Delivery-Bound IT Structure</p>
<p id="p-0339" num="0478">Deployment of a delivery-bound IT structure is initiated by invoking the method deploy( ) of the particular ITDeliveryEnvironment class instance.</p>
<p id="h-0043" num="0000">2.13 Fall-Back Policy</p>
<p id="p-0340" num="0479">In several places above it has been noted that it is not always possible to transition from an abstract IT structure to, eventually, a real IT structure. A trivial cause of this may be unavailability of the appropriate materials in a provisioning system. More complex cases are possibly, in which, although materials are available, the right combination of them cannot be derived, or, worse, a wrong choice was made in a decision tree of one of the steps of translation to make delivery binding impossible. In many of these cases, returning to a previous step in the IT development process may resolve the problem. Therefore, a fall-back policy is implemented throughout the IT development process, such that, should a condition be reached preventing the production of a real IT structure as a result of a step of the IT development process, a return to the appropriate previous step of the IT development process is performed and a different decision is made, resulting hopefully in a positive outcome of the IT development process.</p>
<p id="h-0044" num="0000">2.14 IT Agents</p>
<p id="p-0341" num="0480">An IT agent is a program, installed on or embedded within OS of a computer, or embedded within microcode or hardware of a device, which gathers information about hardware configuration of a computer or a device, software installed on a computer, and network connectivity of a computer or a device, and transmits this information to a requester.</p>
<p id="p-0342" num="0481">IT agents may transmit gathered information to a requester unsolicited or in response to a request. IT agents possess proper OS authorization and proper network connectivity to be able to transmit gathered information.</p>
<p id="p-0343" num="0482">IT agents are a particular case of software agents in general, and therefore their implementation is OS- and possibly hardware-dependent.</p>
<p id="p-0344" num="0483">External discovery functions other than agents may be used to obtain some or all of the required information.</p>
<p id="p-0345" num="0484">Depending on the degree of sophistication of an IT agent, an IT agent may or may not be able to provide certain types of information&#x2014;e.g., an IT agent may or may not contain logic permitting it to examine customization and configuration parameters of a particular program. For the purposes of this embodiment, it is assumed that an IT agent always possesses the degree of sophistication required to accomplish its task and furnish the information necessary to fulfill a particular function. If this is not the case, and some of the required information may not be provided by an IT agent, a manual completion step may be required in some of the methods described below, enabling the user to provide the missing information.</p>
<p id="p-0346" num="0485">Depending on a security policy and network connectivity of a particular IT delivery environment, some IT agents may be unable to gain access to some of the information they intend to gather, or to transmit some of the gathered information. For the purposes of this embodiment, it is assumed that an IT agent always possesses the necessary authority to gather the information it needs and is capable of transmitting this information whenever such transmission is required. If this is not the case, and some of the required information may not be provided by an IT agent, a manual completion step may be required in some of the methods described below, enabling the user to provide the missing information.</p>
<p id="p-0347" num="0486">IT agents are assumed to be present on all computers and smart devices comprising a real IT structure.</p>
<p id="h-0045" num="0000">2.15 Reverse-Specifying an IT Structure</p>
<p id="p-0348" num="0487">In order to accomplish some of the functions described below, it may be necessary to perform a process of delivery-binding &#x201c;in reverse&#x201d;, having an operational configuration as input, and deriving from it a real and a virtual IT structure. The process relies on the information gathered by IT agents and builds a real IT structure first, including all IT entities within an IT structure being examined. Once a real IT structure is built, a corresponding virtual IT structure is produced by discarding the information imposed on an IT structure by the delivery binding process associated with a particular IT delivery environment, and replacing real primitive IT structures in an IT structure composition with their respective virtual primitive counterparts.</p>
<p id="p-0349" num="0488">While the reverse-specification process will recreate composition and IT relationships of an IT structure, it will not produce IT dependencies or any methods beyond those present in the real or virtual primitive IT structures and IT relationships used to comprise the reverse-specification.</p>
<p id="p-0350" num="0489">The process of reverse-specification is illustrated in <figref idref="DRAWINGS">FIG. 16</figref>, in accordance with embodiments of the present invention. The process starts by creating a complex IT structure R, with empty composition <b>31501</b>. The process proceeds to establishing reverse-specification scope <b>31502</b>. This is necessary to bound the reverse-specification process to the necessary subset of the IT delivery environment. The scope of reverse specification is a list of IT entities (most likely, computers) indicated by a user. If the scope is not provided, all IT entities supplied with agents are considered within the scope&#x2014;e.g., the whole IT delivery environment. While there are unprocessed entity collections in scope (an entity collection is a group of IT entities reachable by a single discovery agent&#x2014;e.g., a computer with its full software stack) <b>31503</b>, consider the next unprocessed entity collection <b>31504</b>. Obtain the list of entities and relationships from the associated discovery agent <b>31505</b>, and add this list to the composition of IT structure R <b>31506</b>. When all the entity collections are processed <b>31503</b>, if composition of R is empty <b>31507</b>, en error is indicated <b>31508</b>. The resulting IT structure R is returned to the invoker <b>31509</b>. The resulting IT structure R may result from either reverse specifying an IT delivery environment or from reverse specifying an IT system instance.</p>
<p id="h-0046" num="0000">2.16 Comparing IT Structures</p>
<p id="p-0351" num="0490">In some cases, it may be advantageous to compare two IT structures. IT structure classes can be compared by comparing their source code using conventional means of program comparison (e.g., delta-compare utility). The process of comparing two IT structure instances is described infra.</p>
<p id="p-0352" num="0491">The process of comparing IT structures assumes one of the two cases, based on the usage of results of a comparison (these are the practical cases when a comparison would be useful&#x2014;the method of comparison is not restricted to these situations):</p>
<p id="p-0353" num="0492">1) The IT structure instances being compared are an original and its reverse-specification&#x2014;for deployment verification and detection of unauthorized modifications.</p>
<p id="p-0354" num="0493">2) The IT structure instances being compared are instances of the same IT structure subclass&#x2014;for testing of IT structure methods by the user.</p>
<p id="p-0355" num="0494"><figref idref="DRAWINGS">FIG. 17</figref> describes the process of comparing two IT structure instances. The process obtains as input two IT structure instances, termed &#x201c;old&#x201d; (X) and &#x201c;new&#x201d; (Y) A<b>1</b>. The process obtains primitive compositions (getPrimitiveComposition( )) of the old <b>1702</b> and the new <b>1703</b> IT structure instances. The process then obtains primitive relationships list (getPrimitiveRelationships( )) of the old <b>1704</b> and the new IT <b>1705</b> structures.</p>
<p id="p-0356" num="0495">The process then matches elements of the old and the new IT structure instances primitive compositions and determines any additions or deletions in (assumed) derivation of the new IT structure from the old <b>1706</b>, and reports any additions or deletions in the new IT structure relative to the old one <b>1707</b>.</p>
<p id="p-0357" num="0496">The process then performs a similar matching for IT relationships of the old and the new IT structure instances <b>1708</b> and reports any differences <b>1709</b>.</p>
<p id="p-0358" num="0497">The process then produces a report (textual and/or graphical), showing any differences, and marking them as additions or deletions.</p>
<p id="h-0047" num="0000">3. Porting of IT Structures</p>
<p id="p-0359" num="0498">This section describes the porting of IT structures into an IT delivery environment.</p>
<p id="h-0048" num="0000">3.1 Porting IT Structures Between Delivery Environments</p>
<p id="p-0360" num="0499">A portable IT structure is an IT structure which can be deployed in multiple different IT delivery environments. Portability of an IT structure is assured by specifying multiple different IT delivery environments as target IT delivery environments for an IT structure and verifying conformance of the IT structure to each of the targeted IT delivery environments.</p>
<p id="p-0361" num="0500">Assuming the abstract IT structure A is associated with a real IT structure that is currently operating in IT delivery environment X and is portable to IT delivery environment Y, the process of porting IT structure A to IT delivery environment Y comprises: translating IT structure A, specifying IT delivery environment Y as the target IT delivery environment; performing delivery-binding of A into Y, deploying A into Y, and utilizing IT structure A in IT delivery environment Y. The utilizing of IT structure A in the IT delivery environment X may be subsequently terminated, followed by removal of IT structure A from IT delivery environment X, resulting effectively in movement of IT structure A from IT delivery environment X into IT delivery environment Y.</p>
<p id="p-0362" num="0501">Note that an abstract IT structure A may be a product of reverse specification of a real IT structure, thus making it possible to port a real IT structure from one IT delivery environment to another.</p>
<p id="p-0363" num="0502"><figref idref="DRAWINGS">FIG. 21</figref> is a flow chart of a process for porting of an abstract IT structure (A) from one delivery environment (X) to another delivery environment (Y), in accordance with embodiments of the present invention. The flow chart of <figref idref="DRAWINGS">FIG. 21</figref> comprises steps <b>102</b>-<b>113</b>.</p>
<p id="p-0364" num="0503">Step <b>102</b> attempts to verify conformance of the IT structure A to the rules of the IT delivery environment Y, such as by invoking the verifyConformance( ) method (described supra) of delivery environment Y by passing A as an argument to the verifyConformance( ) method.</p>
<p id="p-0365" num="0504">Step <b>103</b> determines, based on the result of performing step <b>102</b>, whether the IT structure A conforms to the rules of the IT delivery environment Y. If step <b>103</b> determines that the IT structure A does not conform to the rules of the IT delivery environment Y, then step <b>113</b> displays an error message indicating that the IT structure A does not conform to the rules of the IT delivery environment Y, followed by termination of execution of the process. If step <b>103</b> determines that the IT structure A conforms to the rules of the IT delivery environment Y, then step <b>104</b> is next executed.</p>
<p id="p-0366" num="0505">Step <b>104</b> attempts to translate the IT structure A, specifying Y as the target IT delivery environment, resulting in a virtual IT structure V. The virtual IT structure V may be optimized using a specified prioritized list of optimization classes and applying each optimization function of the associated optimization class to the IT structure in turn, starting with the lowest and ending with the highest priority of optimization classes.</p>
<p id="p-0367" num="0506">As an example of be optimizing the virtual IT structure V, consider a case of two optimization functions, namely a higher priority optimization function and a lower priority optimization function. The higher priority optimization function minimizes the total cost of ownership (TCO) of a business component that comprises or otherwise depends on the virtual IT structure V such that the costs and expenses to keep the business component operational depend on the virtual IT structure V. The lower priority optimization function optimizes minimizes bandwidth usage that is a function of the virtual IT structure V. Thus, the of step optimizing the virtual IT structure V first optimizes V with respect to said bandwidth and next optimizes V further with respect to said TCO. Accordingly, the sequence of applying the higher priority optimization function (relating to TCO) after applying the lower priority optimization function (relating to bandwidth) causes application of the higher priority optimization function to override the application of the lower priority optimization function.</p>
<p id="p-0368" num="0507">Step <b>105</b> determines whether the translation of IT structure A (resulting in the virtual IT structure V) in step <b>104</b> was successful. If step <b>105</b> determines that the translation of IT structure A in step <b>104</b> was not successful, then step <b>113</b> displays an error message indicating that the translation of IT structure A was not successful, followed by termination of execution of the process. If step <b>105</b> determines that the translation of IT structure A in step <b>104</b> was successful, then step <b>106</b> is next executed.</p>
<p id="p-0369" num="0508">Step <b>106</b> attempts to delivery bind the virtual IT structure V to the IT delivery environment Y, such as by using the addElement( ) method (described supra) of the IT delivery environment Y to add the virtual IT structure V to the composition of an IT structure B within the IT delivery environment Y, resulting in a delivery-bound virtual IT structure D. The IT structure B, prior to the addition of the virtual IT structure V to generate the delivery-bound virtual IT structure D, may be a virtual IT structure or a real IT structure.</p>
<p id="p-0370" num="0509">Step <b>107</b> determines whether the delivery binding of the virtual IT structure V to the IT delivery environment Y in step <b>106</b> was successful. If step <b>107</b> determines that the delivery binding of the virtual IT structure V to the IT delivery environment Y was not successful, then step <b>113</b> displays an error message indicating that the delivery binding of the virtual IT structure V to the IT delivery environment Y was not successful, followed by termination of execution of the process. If step <b>107</b> determines that the delivery binding of the virtual IT structure V to the IT delivery environment Y was successful, then step <b>108</b> is next executed.</p>
<p id="p-0371" num="0510">Step <b>108</b> attempts to deploy the delivery-bound IT structure D, resulting in a real IT structure instance R capable of operating in the IT delivery environment Y.</p>
<p id="p-0372" num="0511">Step <b>109</b> determines whether the deployment of the delivery-bound IT structure D (resulting in a real IT structure instance R capable of operating in the IT delivery environment Y) in step <b>108</b> was successful. If step <b>109</b> determines that the deployment of the delivery-bound IT structure was not successful, then step <b>113</b> displays an error message indicating that the deployment of the delivery-bound IT structure D was not successful, followed by termination of execution of the process. If step <b>109</b> determines that the deployment of the delivery-bound IT structure was successful, then step <b>110</b> is next executed.</p>
<p id="p-0373" num="0512">Step <b>110</b> attempts to verify that the real IT structure instance R is indeed a result of deployment of the delivery-bound IT structure D.</p>
<p id="p-0374" num="0513">Step <b>111</b> determines whether verification that the real IT structure instance R is a result of deployment of the delivery-bound IT structure D in step <b>110</b> was successful. If step <b>111</b> determines that the real IT structure instance R is not a result of deployment of the delivery-bound IT structure D, then step <b>113</b> displays an error message indicating that the real IT structure instance R is not a result of deployment of the delivery-bound IT structure D, followed by termination of execution of the process. If step <b>111</b> determines that the deployment the real IT structure instance R is a result of deployment of the delivery-bound IT structure D, then step <b>112</b> is next executed.</p>
<p id="p-0375" num="0514">In one embodiment the verification steps <b>110</b>-<b>111</b> are not performed, such that if step <b>109</b> determines that the deployment of the delivery-bound IT structure was successful, then step <b>112</b> is next executed.</p>
<p id="p-0376" num="0515">Step <b>112</b> comprises operating the real IT structure instance R in the IT delivery environment Y.</p>
<p id="p-0377" num="0516">Although the flow chart of <figref idref="DRAWINGS">FIG. 21</figref> assumes that the IT delivery environments X and Y are different IT delivery environments, the scope of the present invention includes an embodiment for <figref idref="DRAWINGS">FIG. 21</figref> in which the IT delivery environment Y and the IT delivery environment X are essentially a same IT delivery environment, characterized by the process comprising steps <b>104</b>-<b>113</b> such that the conformance verification steps <b>102</b>-<b>103</b> are not required to be performed.</p>
<p id="h-0049" num="0000">3.2 Consolidating IT Structures</p>
<p id="p-0378" num="0517">Consolidation of two or more IT structures (including what is known as server or network consolidation) comprises: adding (addElement( )) a given IT structure to the composition of a target IT structure; translating the combined IT structure and deploying the resulting IT structure in a target IT delivery environment Y.</p>
<p id="p-0379" num="0518"><figref idref="DRAWINGS">FIG. 22</figref> is a flow chart of a process for consolidating two IT structures Z<b>1</b> and Z<b>2</b> and deploying the consolidated IT structure within a target IT delivery environment Y, in accordance with embodiments of the present invention. In particular, the IT structure Z<b>1</b> is to be consolidated into IT structure Z<b>2</b>. The IT structures Z<b>1</b> and Z<b>2</b> may each be an abstract IT structure, a virtual IT structure, or a real IT structure, subject to the constraint that at least one of IT structures Z<b>1</b> and Z<b>2</b> is an abstract IT structure. The flow chart of <figref idref="DRAWINGS">FIG. 22</figref> comprises steps <b>203</b>-<b>213</b>.</p>
<p id="p-0380" num="0519">Step <b>203</b> adds IT structure Z<b>1</b> to the composition of IT structure Z<b>2</b>, such as by using the addElement( ) method described supra, resulting in the IT structure A. The IT structure A is an abstract IT structure, since at least one of IT structures Z<b>1</b> and Z<b>2</b> is an abstract IT structure. The abstract IT structure resulting from adding Z<b>1</b> to Z<b>2</b> is within an IT delivery environment X.</p>
<p id="p-0381" num="0520">Steps <b>204</b>-<b>213</b> of <figref idref="DRAWINGS">FIG. 22</figref>, described infra, are analogous to steps <b>104</b>-<b>113</b> of <figref idref="DRAWINGS">FIG. 21</figref> for porting an abstract IT structure. In one embodiment, the IT delivery environments X and Y are different IT delivery environments. In one embodiment, the IT delivery environments X and Y are essentially a same IT delivery environment.</p>
<p id="p-0382" num="0521">Step <b>204</b> attempts to translate the IT structure A, specifying Y as the target IT delivery environment, resulting in a virtual IT structure V. The virtual IT structure V may be optimized using a specified prioritized list of optimization classes and applying each optimization function of the associated optimization class to the IT structure in turn starting with the lowest and ending with the highest priority of optimization classes. See the illustrative example of optimizing the virtual IT structure V discussed supra after the description of step <b>104</b> of <figref idref="DRAWINGS">FIG. 21</figref>.</p>
<p id="p-0383" num="0522">Step <b>205</b> determines whether the translation of IT structure A (resulting in the virtual IT structure V) in step <b>204</b> was successful. If step <b>205</b> determines that the translation of IT structure A in step <b>204</b> was not successful, then step <b>213</b> displays an error message indicating that the translation of IT structure A was not successful, followed by termination of execution of the process. If step <b>205</b> determines that the translation of IT structure A in step <b>204</b> was successful, then step <b>206</b> is next executed.</p>
<p id="p-0384" num="0523">Step <b>206</b> attempts to delivery bind the virtual IT structure V to the IT delivery environment Y, such as by using the addElement( ) method (described supra) of the IT delivery environment Y to add the virtual IT structure V to the composition of an IT structure B within the IT delivery environment Y, resulting in a delivery-bound virtual IT structure D. The IT structure B, prior to the addition of the virtual IT structure V to generate the delivery-bound virtual IT structure D, may be a virtual IT structure or a real IT structure.</p>
<p id="p-0385" num="0524">Step <b>207</b> determines whether the delivery binding of the virtual IT structure V to the IT delivery environment Y in step <b>206</b> was successful. If step <b>207</b> determines that the delivery binding of the virtual IT structure V to the IT delivery environment Y was not successful, then step <b>213</b> displays an error message indicating that the delivery binding of the virtual IT structure V to the IT delivery environment Y was not successful, followed by termination of execution of the process. If step <b>207</b> determines that the delivery binding of the virtual IT structure V to the IT delivery environment Y was successful, then step <b>208</b> is next executed.</p>
<p id="p-0386" num="0525">Step <b>208</b> attempts to deploy the delivery-bound IT structure D, resulting in a real IT structure instance R capable of operating in the IT delivery environment Y.</p>
<p id="p-0387" num="0526">Step <b>209</b> determines whether the deployment of the delivery-bound IT structure D (resulting in a real IT structure instance R capable of operating in the IT delivery environment Y) in step <b>208</b> was successful. If step <b>209</b> determines that the deployment of the delivery-bound IT structure was not successful, then step <b>213</b> displays an error message indicating that the deployment of the delivery-bound IT structure D was not successful, followed by termination of execution of the process. If step <b>209</b> determines that the deployment of the delivery-bound IT structure was successful, then step <b>210</b> is next executed.</p>
<p id="p-0388" num="0527">Step <b>210</b> attempts to verify that the real IT structure instance R is indeed a result of deployment of the delivery-bound IT structure D.</p>
<p id="p-0389" num="0528">Step <b>211</b> determines whether verification that the real IT structure instance R is a result of deployment of the delivery-bound IT structure D in step <b>210</b> was successful. If step <b>211</b> determines that the real IT structure instance R is not a result of deployment of the delivery-bound IT structure D, then step <b>213</b> displays an error message indicating that the real IT structure instance R is not a result of deployment of the delivery-bound IT structure D, followed by termination of execution of the process. If step <b>211</b> determines that the deployment the real IT structure instance R is a result of deployment of the delivery-bound IT structure D, step <b>212</b> is next executed.</p>
<p id="p-0390" num="0529">In one embodiment the verification steps <b>210</b>-<b>211</b> are not performed, such that if step <b>209</b> determines that the deployment of the delivery-bound IT structure was successful, then step <b>212</b> is next executed.</p>
<p id="p-0391" num="0530">Step <b>212</b> comprises operating the real IT structure instance R in the IT delivery environment Y.</p>
<p id="h-0050" num="0000">4.0 Computer System</p>
<p id="p-0392" num="0531"><figref idref="DRAWINGS">FIG. 20</figref> illustrates a computer system <b>90</b> used for implementing an IT Entity Model and associated processes and for implementing the porting of IT structures, including any subset of the algorithms and methods described herein, in accordance with embodiments of the present invention. The computer system <b>90</b> comprises a processor <b>91</b>, an input device <b>92</b> coupled to the processor <b>91</b>, an output device <b>93</b> coupled to the processor <b>91</b>, and memory devices <b>94</b> and <b>95</b> each coupled to the processor <b>91</b>. The input device <b>92</b> may be, inter alia, a keyboard, a mouse, etc. The output device <b>93</b> may be, inter alia, a printer, a plotter, a computer screen, a magnetic tape, a removable hard disk, a floppy disk, etc. The memory devices <b>94</b> and <b>95</b> may be, inter alia, a hard disk, a floppy disk, a magnetic tape, an optical storage such as a compact disc (CD) or a digital video disc (DVD), a dynamic random access memory (DRAM), a read-only memory (ROM), etc. The memory device <b>95</b> includes a computer code <b>97</b> which is a computer program that comprises computer-executable instructions. The computer code <b>97</b> includes an algorithm for implementing an IT Entity Model and associated processes and for implementing the porting of IT structures, including any subset of the algorithms and methods described herein. The processor <b>91</b> executes the computer code <b>97</b>. The memory device <b>94</b> includes input data <b>96</b>. The input data <b>96</b> includes input required by the computer code <b>97</b>. The output device <b>93</b> displays output from the computer code <b>97</b>. Either or both memory devices <b>94</b> and <b>95</b> (or one or more additional memory devices not shown in <figref idref="DRAWINGS">FIG. 20</figref>) may be used as a computer usable medium (or a computer readable medium or a program storage device) having a computer readable program embodied therein and/or having other data stored therein, wherein the computer readable program comprises the computer code <b>97</b>. Generally, a computer program product (or, alternatively, an article of manufacture) of the computer system <b>90</b> may comprise said computer usable medium (or said program storage device).</p>
<p id="p-0393" num="0532">Any of the components of the present invention could be deployed, managed, serviced, etc. by a service provider who offers to implement an IT Entity Model and associated processes and/or port IT structures, including any subset of the algorithms and methods described herein. Thus the present invention discloses a process for deploying or integrating computing infrastructure, comprising integrating computer-readable code into the computer system <b>90</b>, wherein the code in combination with the computer system <b>90</b> is capable of performing a method for implementing an IT Entity Model and associated processes and for implementing the porting of IT structures, including any subset of the algorithms and methods described herein.</p>
<p id="p-0394" num="0533">In another embodiment, the invention provides a business method that performs the process steps of the invention on a subscription, advertising, and/or fee basis. That is, a service provider, such as a Solution Integrator, could offer to implement an IT Entity Model and associated processes and/or port IT structures, including any subset of the algorithms and methods described herein. In this case, the service provider can create, maintain, support, etc., a computer infrastructure that performs the process steps of the invention for one or more customers. In return, the service provider can receive payment from the customer(s) under a subscription and/or fee agreement and/or the service provider can receive payment from the sale of advertising content to one or more third parties.</p>
<p id="p-0395" num="0534">While <figref idref="DRAWINGS">FIG. 20</figref> shows the computer system <b>90</b> as a particular configuration of hardware and software, any configuration of hardware and software, as would be known to a person of ordinary skill in the art, may be utilized for the purposes stated supra in conjunction with the particular computer system <b>90</b> of <figref idref="DRAWINGS">FIG. 20</figref>. For example, the memory devices <b>94</b> and <b>95</b> may be portions of a single memory device rather than separate memory devices.</p>
<p id="p-0396" num="0535">While embodiments of the present invention have been described herein for purposes of illustration, many modifications and changes will become apparent to those skilled in the art. Accordingly, the appended claims are intended to encompass all such modifications and changes as fall within the true spirit and scope of this invention.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A method for porting an abstract Information Technology (IT) structure into an IT delivery environment, said method comprising:
<claim-text>verifying conformance, by a processor of a computer system, of an abstract IT structure A in an IT delivery environment X to rules of the IT delivery environment Y, wherein the abstract structure A comprises an IT entity that comprises at least two undefined characteristics, wherein the abstract IT structure A is a computer or a software application, and wherein the IT delivery environment Y is a data center;</claim-text>
<claim-text>in response to said verifying conformance, said processor translating the abstract IT structure A that is currently within the IT delivery environment X, said translating generating a virtual IT structure V from the abstract IT structure A through specification of the IT delivery environment Y, wherein the virtual IT structure V comprises an IT entity that comprises one and only one undefined characteristic;</claim-text>
<claim-text>in response to said translating the IT structure A, said processor delivery binding the virtual IT structure V to the IT delivery environment Y to generate a delivery-bound virtual IT structure D; and</claim-text>
<claim-text>in response to said delivery binding the virtual IT structure V to the IT delivery environment Y, said processor deploying the delivery-bound virtual IT structure D in the IT delivery environment Y, resulting in a real IT structure instance R capable of operating in the IT delivery environment Y,</claim-text>
<claim-text>wherein the virtual IT structure V comprises a composition, and wherein said delivery binding comprises:
<claim-text>determining that the composition of the virtual IT structure V is not a primitive composition of elements;</claim-text>
<claim-text>after said determining that the composition of the virtual IT structure V is not a primitive composition of elements, receiving a first list of all dependencies of elements in the composition of the virtual IT structure V;</claim-text>
<claim-text>after said receiving the first list, determining that no dependency of any element in the composition of the virtual IT structure V in the first list of dependencies has an exclusion with a class to which an IT structure B belongs;</claim-text>
<claim-text>receiving a second list of all dependencies of the IT structure B;</claim-text>
<claim-text>after said receiving the second list, determining that no dependency of the IT structure B in the second list of dependencies has an exclusion with a class to which an element in the composition of the virtual IT structure V belongs, and in response, adding the IT structure B to the composition of the virtual IT structure V to generate the delivery-bound virtual IT structure D.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein said translating comprises:
<claim-text>translating an abstract IT structure element of the abstract IT structure A to at least one subclass of the abstract IT structure element to form a new instance of the abstract IT structure element; and</claim-text>
<claim-text>substituting the new instance of the abstract IT structure element for the abstract IT structure element in the abstract IT structure A in a manner that satisfies all IT dependencies in the abstract IT structure A involving the abstract IT structure element, satisfies all IT relationships in the abstract IT structure A involving the abstract IT structure element, and supports all functional and operational characteristics of the abstract IT structure A.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the IT delivery environment X is a collection of rules, policies, practices, and associated support functions, and management facilities involved in operating a data processing center, and means of provisioning and deployment of the support functions, wherein the support functions include labor, physical space, power supply, hardware, software, and networking.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the abstract IT structure A is the computer, and wherein said verifying conformance comprises analyzing conformance factors that include:
<claim-text>power availability at the data center;</claim-text>
<claim-text>voltage at the data center;</claim-text>
<claim-text>ability to introduce, at the data center, devices from a specified list of supported devices;</claim-text>
<claim-text>a requirement to run, at the data center, specific software pertaining to virus defense;</claim-text>
<claim-text>availability, at the data center, of specific space;</claim-text>
<claim-text>ability to use, at the data center, geometrically non-standard devices;</claim-text>
<claim-text>a requirement, at the data center, to have an extra network interface per physical box for administrative access;</claim-text>
<claim-text>network bandwidth requirements at the data center;</claim-text>
<claim-text>Internet availability requirements at the data center; and</claim-text>
<claim-text>architectural requirements, at the data center, with respect to network layering, firewalls, Internet Protocol (IP) addressing schema, and network isolation requirements.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. A process for supporting computer infrastructure, said process comprising providing at least one support service for at least one of creating, integrating, hosting, maintaining, and deploying computer-readable code in a computing system, wherein the code in combination with the computing system is capable of performing a method for porting an abstract Information Technology (IT) structure into an IT delivery environment, said method comprising:
<claim-text>said processor verifying conformance of an abstract IT structure A in an IT delivery environment X to rules of the IT delivery environment Y, wherein the abstract structure A comprises an IT entity that comprises at least two undefined characteristics, wherein the abstract IT structure A is a computer or a software application, and wherein the IT delivery environment Y is a data center;</claim-text>
<claim-text>in response to said verifying conformance, said processor translating the abstract IT structure A that is currently within the IT delivery environment X, said translating generating a virtual IT structure V from the abstract IT structure A through specification of the IT delivery environment Y, wherein the virtual IT structure V comprises an IT entity that comprises one and only one undefined characteristic;</claim-text>
<claim-text>in response to said translating the IT structure A, said processor delivery binding the virtual IT structure V to the IT delivery environment Y to generate a delivery-bound virtual IT structure D; and</claim-text>
<claim-text>in response to said delivery binding the virtual IT structure V to the IT delivery environment Y, said processor deploying the delivery-bound virtual IT structure D in the IT delivery environment Y, resulting in a real IT structure instance R capable of operating in the IT delivery environment Y,</claim-text>
<claim-text>wherein the virtual IT structure V comprises a composition, and wherein said delivery binding comprises:
<claim-text>determining that the composition of the virtual IT structure V is not a primitive composition of elements;</claim-text>
<claim-text>after said determining that the composition of the virtual IT structure V is not a primitive composition of elements, receiving a first list of all dependencies of elements in the composition of the virtual IT structure V;</claim-text>
<claim-text>after said receiving the first list, determining that no dependency of any element in the composition of the virtual IT structure V in the first list of dependencies has an exclusion with a class to which an IT structure B belongs;</claim-text>
<claim-text>receiving a second list of all dependencies of the IT structure B;</claim-text>
</claim-text>
<claim-text>after said receiving the second list, determining that no dependency of the IT structure B in the second list of dependencies has an exclusion with a class to which an element in the composition of the virtual IT structure V belongs, and in response, adding the IT structure B to the composition of the virtual IT structure V to generate the delivery-bound virtual IT structure D.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The process of <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein said translating comprises:
<claim-text>translating an abstract IT structure element of the abstract IT structure A to at least one subclass of the abstract IT structure element to form a new instance of the abstract IT structure element; and</claim-text>
<claim-text>substituting the new instance of the abstract IT structure element for the abstract IT structure element in the abstract IT structure A in a manner that satisfies all IT dependencies in the abstract IT structure A involving the abstract IT structure element, satisfies all IT relationships in the abstract IT structure A involving the abstract IT structure element, and supports all functional and operational characteristics of the abstract IT structure A.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The process of <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein the IT delivery environment X is a collection of rules, policies, practices, and associated support functions, and management facilities involved in operating a data processing center, and means of provisioning and deployment of the support functions, wherein the support functions include labor, physical space, power supply, hardware, software, and networking.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The process of <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein the abstract IT structure A is the computer, and wherein said verifying conformance comprises analyzing conformance factors that include:
<claim-text>power availability at the data center;</claim-text>
<claim-text>voltage at the data center;</claim-text>
<claim-text>ability to introduce, at the data center, devices from a specified list of supported devices;</claim-text>
<claim-text>a requirement to run, at the data center, specific software pertaining to virus defense;</claim-text>
<claim-text>availability, at the data center, of specific space;</claim-text>
<claim-text>ability to use, at the data center, geometrically non-standard devices;</claim-text>
<claim-text>a requirement, at the data center, to have an extra network interface per physical box for administrative access;</claim-text>
<claim-text>network bandwidth requirements at the data center;</claim-text>
<claim-text>Internet availability requirements at the data center; and</claim-text>
<claim-text>architectural requirements, at the data center, with respect to network layering, firewalls, Internet Protocol (IP) addressing schema, and network isolation requirements.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. A computer program product, comprising a computer readable hardware storage device having a computer readable program code embodied therein, said computer readable program code containing instructions which, upon being executed by a processor of a computer system, implement a method for porting an abstract Information Technology (IT) structure into an IT delivery environment, said method comprising:
<claim-text>said processor verifying conformance of an abstract IT structure A in an IT delivery environment X to rules of the IT delivery environment Y, wherein the abstract structure A comprises an IT entity that comprises at least two undefined characteristics, wherein the abstract IT structure A is a computer or a software application, and wherein the IT delivery environment Y is a data center;</claim-text>
<claim-text>in response to said verifying conformance, said processor translating the abstract IT structure A that is currently within the IT delivery environment X, said translating generating a virtual IT structure V from the abstract IT structure A through specification of the IT delivery environment Y, wherein the virtual IT structure V comprises an IT entity that comprises one and only one undefined characteristic;</claim-text>
<claim-text>in response to said translating the IT structure A, said processor delivery binding the virtual IT structure V to the IT delivery environment Y to generate a delivery-bound virtual IT structure D; and</claim-text>
<claim-text>in response to said delivery binding the virtual IT structure V to the IT delivery environment Y, said processor deploying the delivery-bound virtual IT structure D in the IT delivery environment Y, resulting in a real IT structure instance R capable of operating in the IT delivery environment Y,</claim-text>
<claim-text>wherein the virtual IT structure V comprises a composition, and wherein said delivery binding comprises:
<claim-text>determining that the composition of the virtual IT structure V is not a primitive composition of elements;</claim-text>
<claim-text>after said determining that the composition of the virtual IT structure V is not a primitive composition of elements, receiving a first list of all dependencies of elements in the composition of the virtual IT structure V;</claim-text>
<claim-text>after said receiving the first list, determining that no dependency of any element in the composition of the virtual IT structure V in the first list of dependencies has an exclusion with a class to which an IT structure B belongs;</claim-text>
<claim-text>receiving a second list of all dependencies of the IT structure B;</claim-text>
<claim-text>after said receiving the second list, determining that no dependency of the IT structure B in the second list of dependencies has an exclusion with a class to which an element in the composition of the virtual IT structure V belongs, and in response, adding the IT structure B to the composition of the virtual IT structure V to generate the delivery-bound virtual IT structure D.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The computer program product of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein said translating comprises:
<claim-text>translating an abstract IT structure element of the abstract IT structure A to at least one subclass of the abstract IT structure element to form a new instance of the abstract IT structure element; and</claim-text>
<claim-text>substituting the new instance of the abstract IT structure element for the abstract IT structure element in the abstract IT structure A in a manner that satisfies all IT dependencies in the abstract IT structure A involving the abstract IT structure element, satisfies all IT relationships in the abstract IT structure A involving the abstract IT structure element, and supports all functional and operational characteristics of the abstract IT structure A.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The computer program product of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the IT delivery environment X is a collection of rules, policies, practices, and associated support functions, and management facilities involved in operating a data processing center, and means of provisioning and deployment of the support functions, wherein the support functions include labor, physical space, power supply, hardware, software, and networking.</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The computer program product of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the abstract IT structure A is the computer, and wherein said verifying conformance comprises analyzing conformance factors that include:
<claim-text>power availability at the data center;</claim-text>
<claim-text>voltage at the data center;</claim-text>
<claim-text>ability to introduce, at the data center, devices from a specified list of supported devices;</claim-text>
<claim-text>a requirement to run, at the data center, specific software pertaining to virus defense;</claim-text>
<claim-text>availability, at the data center, of specific space;</claim-text>
<claim-text>ability to use, at the data center, geometrically non-standard devices;</claim-text>
<claim-text>a requirement, at the data center, to have an extra network interface per physical box for administrative access;</claim-text>
<claim-text>network bandwidth requirements at the data center;</claim-text>
<claim-text>Internet availability requirements at the data center; and</claim-text>
<claim-text>architectural requirements, at the data center, with respect to network layering, firewalls, Internet Protocol (IP) addressing schema, and network isolation requirements.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. A computer system comprising a processor and a computer readable memory unit coupled to the processor, said memory unit containing instructions that when executed by the processor implement a method for porting an abstract Information Technology (IT) structure into an IT delivery environment, said method comprising:
<claim-text>said processor verifying conformance of an abstract IT structure A in an IT delivery environment X to rules of the IT delivery environment Y, wherein the abstract structure A comprises an IT entity that comprises at least two undefined characteristics, wherein the abstract IT structure A is a computer or a software application, and wherein the IT delivery environment Y is a data center;</claim-text>
<claim-text>in response to said verifying conformance, said processor translating the abstract IT structure A that is currently within the IT delivery environment X, said translating generating a virtual IT structure V from the abstract IT structure A through specification of the IT delivery environment Y, wherein the virtual IT structure V comprises an IT entity that comprises one and only one undefined characteristic;</claim-text>
<claim-text>in response to said translating the IT structure A, said processor delivery binding the virtual IT structure V to the IT delivery environment Y to generate a delivery-bound virtual IT structure D; and</claim-text>
<claim-text>in response to said delivery binding the virtual IT structure V to the IT delivery environment Y, said processor deploying the delivery-bound virtual IT structure D in the IT delivery environment Y, resulting in a real IT structure instance R capable of operating in the IT delivery environment Y,</claim-text>
<claim-text>wherein the virtual IT structure V comprises a composition, and wherein said delivery binding comprises:
<claim-text>determining that the composition of the virtual IT structure V is not a primitive composition of elements;</claim-text>
<claim-text>after said determining that the composition of the virtual IT structure V is not a primitive composition of elements, receiving a first list of all dependencies of elements in the composition of the virtual IT structure V;</claim-text>
<claim-text>after said receiving the first list, determining that no dependency of any element in the composition of the virtual IT structure V in the first list of dependencies has an exclusion with a class to which an IT structure B belongs;</claim-text>
</claim-text>
<claim-text>receiving a second list of all dependencies of the IT structure B;
<claim-text>after said receiving the second list, determining that no dependency of the IT structure B in the second list of dependencies has an exclusion with a class to which an element in the composition of the virtual IT structure V belongs, and in response, adding the IT structure B to the composition of the virtual IT structure V to generate the delivery-bound virtual IT structure D.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The computer system of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein said translating comprises:
<claim-text>translating an abstract IT structure element of the abstract IT structure A to at least one subclass of the abstract IT structure element to form a new instance of the abstract IT structure element; and</claim-text>
<claim-text>substituting the new instance of the abstract IT structure element for the abstract IT structure element in the abstract IT structure A in a manner that satisfies all IT dependencies in the abstract IT structure A involving the abstract IT structure element, satisfies all IT relationships in the abstract IT structure A involving the abstract IT structure element, and supports all functional and operational characteristics of the abstract IT structure A.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The computer system of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the IT delivery environment X is a collection of rules, policies, practices, and associated support functions, and management facilities involved in operating a data processing center, and means of provisioning and deployment of the support functions, wherein the support functions include labor, physical space, power supply, hardware, software, and networking.</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The computer system of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the abstract IT structure A is the computer, and wherein said verifying conformance comprises analyzing conformance factors that include:
<claim-text>power availability at the data center;</claim-text>
<claim-text>voltage at the data center;</claim-text>
<claim-text>ability to introduce, at the data center, devices from a specified list of supported devices;</claim-text>
<claim-text>a requirement to run, at the data center, specific software pertaining to virus defense;</claim-text>
<claim-text>availability, at the data center, of specific space;</claim-text>
<claim-text>ability to use, at the data center, geometrically non-standard devices;</claim-text>
<claim-text>a requirement, at the data center, to have an extra network interface per physical box for administrative access;</claim-text>
<claim-text>network bandwidth requirements at the data center;</claim-text>
<claim-text>Internet availability requirements at the data center; and</claim-text>
<claim-text>architectural requirements, at the data center, with respect to network layering, firewalls, Internet Protocol (IP) addressing schema, and network isolation requirements.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The computer system of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the computer system further comprises the data center, wherein the data center comprises a memory device, a processing unit, a lobby, an administrative area, and a raised floor area, wherein the memory device contains program code that when executed by the processing unit implement a process for controlling access of a visitor to the data center, said process comprising:
<claim-text>performing a biometric scan of the visitor and said processing unit exchanging the visitor's driver's license for a proxy card, and in response, said processing unit granting the visitor access from the lobby to the administrative area; and</claim-text>
<claim-text>performing another biometric scan of the visitor and confirming the visitor's use of the proxy card, and in response, said processing unit granting the visitor access to the raised floor area.</claim-text>
</claim-text>
</claim>
</claims>
</us-patent-grant>

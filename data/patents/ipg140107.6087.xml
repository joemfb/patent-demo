<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08627211-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08627211</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>11694817</doc-number>
<date>20070330</date>
</document-id>
</application-reference>
<us-application-series-code>11</us-application-series-code>
<us-term-of-grant>
<us-term-extension>717</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20130101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>3</main-group>
<subgroup>048</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>715754</main-classification>
</classification-national>
<invention-title id="d2e53">Method, apparatus, system, medium, and signals for supporting pointer display in a multiple-party communication</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>5176520</doc-number>
<kind>A</kind>
<name>Hamilton</name>
<date>19930100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>5493692</doc-number>
<kind>A</kind>
<name>Theimer et al.</name>
<date>19960200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>5544321</doc-number>
<kind>A</kind>
<name>Theimer et al.</name>
<date>19960800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>5553123</doc-number>
<kind>A</kind>
<name>Chan et al.</name>
<date>19960900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>5555376</doc-number>
<kind>A</kind>
<name>Theimer et al.</name>
<date>19960900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>5563630</doc-number>
<kind>A</kind>
<name>Tsakiris et al.</name>
<date>19961000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>5603054</doc-number>
<kind>A</kind>
<name>Theimer et al.</name>
<date>19970200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>5608872</doc-number>
<kind>A</kind>
<name>Schwartz et al.</name>
<date>19970300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>5611050</doc-number>
<kind>A</kind>
<name>Theimer et al.</name>
<date>19970300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>5687096</doc-number>
<kind>A</kind>
<name>Lappen et al.</name>
<date>19971100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>5704042</doc-number>
<kind>A</kind>
<name>Hester et al.</name>
<date>19971200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>5717856</doc-number>
<kind>A</kind>
<name>Carleton et al.</name>
<date>19980200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00013">
<document-id>
<country>US</country>
<doc-number>5727155</doc-number>
<kind>A</kind>
<name>Dawson</name>
<date>19980300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00014">
<document-id>
<country>US</country>
<doc-number>5748189</doc-number>
<kind>A</kind>
<name>Trueblood</name>
<date>19980500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00015">
<document-id>
<country>US</country>
<doc-number>5761419</doc-number>
<kind>A</kind>
<name>Schwartz et al.</name>
<date>19980600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00016">
<document-id>
<country>US</country>
<doc-number>5781727</doc-number>
<kind>A</kind>
<name>Carleton et al.</name>
<date>19980700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00017">
<document-id>
<country>US</country>
<doc-number>5812785</doc-number>
<kind>A</kind>
<name>Lappen et al.</name>
<date>19980900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00018">
<document-id>
<country>US</country>
<doc-number>5812865</doc-number>
<kind>A</kind>
<name>Theimer et al.</name>
<date>19980900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00019">
<document-id>
<country>US</country>
<doc-number>5819038</doc-number>
<kind>A</kind>
<name>Carleton et al.</name>
<date>19981000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00020">
<document-id>
<country>US</country>
<doc-number>5835713</doc-number>
<kind>A</kind>
<name>FitzPatrick et al.</name>
<date>19981100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00021">
<document-id>
<country>US</country>
<doc-number>5838914</doc-number>
<kind>A</kind>
<name>Carleton et al.</name>
<date>19981100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00022">
<document-id>
<country>US</country>
<doc-number>5850340</doc-number>
<kind>A</kind>
<name>York</name>
<date>19981200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00023">
<document-id>
<country>US</country>
<doc-number>5859623</doc-number>
<kind>A</kind>
<name>Meyn et al.</name>
<date>19990100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00024">
<document-id>
<country>US</country>
<doc-number>5870547</doc-number>
<kind>A</kind>
<name>Pommier et al.</name>
<date>19990200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00025">
<document-id>
<country>US</country>
<doc-number>5872923</doc-number>
<kind>A</kind>
<name>Schwartz et al.</name>
<date>19990200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00026">
<document-id>
<country>US</country>
<doc-number>5889946</doc-number>
<kind>A</kind>
<name>FitzPatrick et al.</name>
<date>19990300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00027">
<document-id>
<country>US</country>
<doc-number>5907704</doc-number>
<kind>A</kind>
<name>Gudmundson et al.</name>
<date>19990500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00028">
<document-id>
<country>US</country>
<doc-number>5917472</doc-number>
<kind>A</kind>
<name>Perala</name>
<date>19990600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00029">
<document-id>
<country>US</country>
<doc-number>5920694</doc-number>
<kind>A</kind>
<name>Carleton et al.</name>
<date>19990700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00030">
<document-id>
<country>US</country>
<doc-number>5923844</doc-number>
<kind>A</kind>
<name>Pommier et al.</name>
<date>19990700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00031">
<document-id>
<country>US</country>
<doc-number>5926168</doc-number>
<kind>A</kind>
<name>Fan</name>
<date>19990700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00032">
<document-id>
<country>US</country>
<doc-number>5938724</doc-number>
<kind>A</kind>
<name>Pommier et al.</name>
<date>19990800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00033">
<document-id>
<country>US</country>
<doc-number>5944785</doc-number>
<kind>A</kind>
<name>Pommier et al.</name>
<date>19990800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00034">
<document-id>
<country>US</country>
<doc-number>5948022</doc-number>
<kind>A</kind>
<name>Carleton et al.</name>
<date>19990900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00035">
<document-id>
<country>US</country>
<doc-number>5986644</doc-number>
<kind>A</kind>
<name>Herder et al.</name>
<date>19991100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00036">
<document-id>
<country>US</country>
<doc-number>6008777</doc-number>
<kind>A</kind>
<name>Yiu</name>
<date>19991200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00037">
<document-id>
<country>US</country>
<doc-number>6008804</doc-number>
<kind>A</kind>
<name>Pommier et al.</name>
<date>19991200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00038">
<document-id>
<country>US</country>
<doc-number>6047314</doc-number>
<kind>A</kind>
<name>Pommier et al.</name>
<date>20000400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00039">
<document-id>
<country>US</country>
<doc-number>6061717</doc-number>
<kind>A</kind>
<name>Carleton et al.</name>
<date>20000500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00040">
<document-id>
<country>US</country>
<doc-number>6073119</doc-number>
<kind>A</kind>
<name>Bornemisza-Wahr et al.</name>
<date>20000600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00041">
<document-id>
<country>US</country>
<doc-number>6085247</doc-number>
<kind>A</kind>
<name>Parsons, Jr. et al.</name>
<date>20000700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00042">
<document-id>
<country>US</country>
<doc-number>6199099</doc-number>
<kind>B1</kind>
<name>Gershman et al.</name>
<date>20010300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00043">
<document-id>
<country>US</country>
<doc-number>6243076</doc-number>
<kind>B1</kind>
<name>Hatfield</name>
<date>20010600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00044">
<document-id>
<country>US</country>
<doc-number>6260160</doc-number>
<kind>B1</kind>
<name>Beyda et al.</name>
<date>20010700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00045">
<document-id>
<country>US</country>
<doc-number>6325756</doc-number>
<kind>B1</kind>
<name>Webb et al.</name>
<date>20011200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00046">
<document-id>
<country>US</country>
<doc-number>6335739</doc-number>
<kind>B1</kind>
<name>Matsukura et al.</name>
<date>20020100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00047">
<document-id>
<country>US</country>
<doc-number>6349337</doc-number>
<kind>B1</kind>
<name>Parsons, Jr. et al.</name>
<date>20020200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00048">
<document-id>
<country>US</country>
<doc-number>6367934</doc-number>
<kind>B1</kind>
<name>Salesky et al.</name>
<date>20020400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00049">
<document-id>
<country>US</country>
<doc-number>6377861</doc-number>
<kind>B1</kind>
<name>York</name>
<date>20020400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00050">
<document-id>
<country>US</country>
<doc-number>6401085</doc-number>
<kind>B1</kind>
<name>Gershman et al.</name>
<date>20020600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00051">
<document-id>
<country>US</country>
<doc-number>6430604</doc-number>
<kind>B1</kind>
<name>Ogle et al.</name>
<date>20020800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00052">
<document-id>
<country>US</country>
<doc-number>6446966</doc-number>
<kind>B1</kind>
<name>Crozier</name>
<date>20020900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00053">
<document-id>
<country>US</country>
<doc-number>6473794</doc-number>
<kind>B1</kind>
<name>Guheen et al.</name>
<date>20021000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00054">
<document-id>
<country>US</country>
<doc-number>6536037</doc-number>
<kind>B1</kind>
<name>Barrese et al.</name>
<date>20030300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00055">
<document-id>
<country>US</country>
<doc-number>6577622</doc-number>
<kind>B1</kind>
<name>Schuster et al.</name>
<date>20030600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00056">
<document-id>
<country>US</country>
<doc-number>6584493</doc-number>
<kind>B1</kind>
<name>Butler</name>
<date>20030600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00057">
<document-id>
<country>US</country>
<doc-number>6594406</doc-number>
<kind>B1</kind>
<name>Hecht</name>
<date>20030700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00058">
<document-id>
<country>US</country>
<doc-number>6594616</doc-number>
<kind>B2</kind>
<name>Zhang et al.</name>
<date>20030700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00059">
<document-id>
<country>US</country>
<doc-number>6594693</doc-number>
<kind>B1</kind>
<name>Borwankar</name>
<date>20030700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00060">
<document-id>
<country>US</country>
<doc-number>6601129</doc-number>
<kind>B1</kind>
<name>Arakeri et al.</name>
<date>20030700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00061">
<document-id>
<country>US</country>
<doc-number>6606744</doc-number>
<kind>B1</kind>
<name>Mikurak</name>
<date>20030800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00062">
<document-id>
<country>US</country>
<doc-number>6615166</doc-number>
<kind>B1</kind>
<name>Guheen et al.</name>
<date>20030900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00063">
<document-id>
<country>US</country>
<doc-number>6629081</doc-number>
<kind>B1</kind>
<name>Cornelius et al.</name>
<date>20030900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00064">
<document-id>
<country>US</country>
<doc-number>6633905</doc-number>
<kind>B1</kind>
<name>Anderson et al.</name>
<date>20031000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00065">
<document-id>
<country>US</country>
<doc-number>6654790</doc-number>
<kind>B2</kind>
<name>Ogle et al.</name>
<date>20031100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00066">
<document-id>
<country>US</country>
<doc-number>6662210</doc-number>
<kind>B1</kind>
<name>Schwartz et al.</name>
<date>20031200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00067">
<document-id>
<country>US</country>
<doc-number>6665870</doc-number>
<kind>B1</kind>
<name>Finseth et al.</name>
<date>20031200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00068">
<document-id>
<country>US</country>
<doc-number>6671818</doc-number>
<kind>B1</kind>
<name>Mikurak</name>
<date>20031200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00069">
<document-id>
<country>US</country>
<doc-number>6691155</doc-number>
<kind>B2</kind>
<name>Gottfried</name>
<date>20040200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00070">
<document-id>
<country>US</country>
<doc-number>6710790</doc-number>
<kind>B1</kind>
<name>Fagioli</name>
<date>20040300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00071">
<document-id>
<country>US</country>
<doc-number>6721713</doc-number>
<kind>B1</kind>
<name>Guheen et al.</name>
<date>20040400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00072">
<document-id>
<country>US</country>
<doc-number>6724399</doc-number>
<kind>B1</kind>
<name>Katchour et al.</name>
<date>20040400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00073">
<document-id>
<country>US</country>
<doc-number>6742184</doc-number>
<kind>B1</kind>
<name>Finseth et al.</name>
<date>20040500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00074">
<document-id>
<country>US</country>
<doc-number>6754906</doc-number>
<kind>B1</kind>
<name>Finseth et al.</name>
<date>20040600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00075">
<document-id>
<country>US</country>
<doc-number>6763226</doc-number>
<kind>B1</kind>
<name>McZeal, Jr.</name>
<date>20040700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00076">
<document-id>
<country>US</country>
<doc-number>6781962</doc-number>
<kind>B1</kind>
<name>Williams et al.</name>
<date>20040800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00077">
<document-id>
<country>US</country>
<doc-number>6791531</doc-number>
<kind>B1</kind>
<name>Johnston et al.</name>
<date>20040900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00078">
<document-id>
<country>US</country>
<doc-number>6813775</doc-number>
<kind>B1</kind>
<name>Finseth et al.</name>
<date>20041100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00079">
<document-id>
<country>US</country>
<doc-number>6859821</doc-number>
<kind>B1</kind>
<name>Ozzie et al.</name>
<date>20050200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00080">
<document-id>
<country>US</country>
<doc-number>6868140</doc-number>
<kind>B2</kind>
<name>Myers et al.</name>
<date>20050300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00081">
<document-id>
<country>US</country>
<doc-number>6925650</doc-number>
<kind>B1</kind>
<name>Arsenault et al.</name>
<date>20050800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00082">
<document-id>
<country>US</country>
<doc-number>6988132</doc-number>
<kind>B2</kind>
<name>Horvitz</name>
<date>20060100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00083">
<document-id>
<country>US</country>
<doc-number>6990513</doc-number>
<kind>B2</kind>
<name>Belfiore et al.</name>
<date>20060100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00084">
<document-id>
<country>US</country>
<doc-number>7003728</doc-number>
<kind>B2</kind>
<name>Berque</name>
<date>20060200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00085">
<document-id>
<country>US</country>
<doc-number>7010470</doc-number>
<kind>B2</kind>
<name>Kodosky et al.</name>
<date>20060300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00086">
<document-id>
<country>US</country>
<doc-number>7010613</doc-number>
<kind>B2</kind>
<name>Connor</name>
<date>20060300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00087">
<document-id>
<country>US</country>
<doc-number>7017174</doc-number>
<kind>B1</kind>
<name>Sheedy</name>
<date>20060300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00088">
<document-id>
<country>US</country>
<doc-number>7020893</doc-number>
<kind>B2</kind>
<name>Connelly</name>
<date>20060300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00089">
<document-id>
<country>US</country>
<doc-number>7039061</doc-number>
<kind>B2</kind>
<name>Connor et al.</name>
<date>20060500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00090">
<document-id>
<country>US</country>
<doc-number>7047248</doc-number>
<kind>B1</kind>
<name>Tycast</name>
<date>20060500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00091">
<document-id>
<country>US</country>
<doc-number>7055165</doc-number>
<kind>B2</kind>
<name>Connelly</name>
<date>20060500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00092">
<document-id>
<country>US</country>
<doc-number>7167898</doc-number>
<kind>B2</kind>
<name>Sato et al.</name>
<date>20070100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00093">
<document-id>
<country>US</country>
<doc-number>7353251</doc-number>
<kind>B1</kind>
<name>Balakrishnan</name>
<date>20080400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00094">
<document-id>
<country>US</country>
<doc-number>7509388</doc-number>
<kind>B2</kind>
<name>Allen et al.</name>
<date>20090300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00095">
<document-id>
<country>US</country>
<doc-number>7519730</doc-number>
<kind>B2</kind>
<name>Bailey et al.</name>
<date>20090400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00096">
<document-id>
<country>US</country>
<doc-number>2001/0000666</doc-number>
<kind>A1</kind>
<name>Wood et al.</name>
<date>20010500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00097">
<document-id>
<country>US</country>
<doc-number>2001/0000811</doc-number>
<kind>A1</kind>
<name>May et al.</name>
<date>20010500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00098">
<document-id>
<country>US</country>
<doc-number>2001/0004254</doc-number>
<kind>A1</kind>
<name>Okahara et al.</name>
<date>20010600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00099">
<document-id>
<country>US</country>
<doc-number>2001/0030668</doc-number>
<kind>A1</kind>
<name>Erten et al.</name>
<date>20011000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00100">
<document-id>
<country>US</country>
<doc-number>2001/0042214</doc-number>
<kind>A1</kind>
<name>Radatti et al.</name>
<date>20011100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00101">
<document-id>
<country>US</country>
<doc-number>2001/0044725</doc-number>
<kind>A1</kind>
<name>Matsuda et al.</name>
<date>20011100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00102">
<document-id>
<country>US</country>
<doc-number>2001/0044826</doc-number>
<kind>A1</kind>
<name>Ludwig et al.</name>
<date>20011100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00103">
<document-id>
<country>US</country>
<doc-number>2001/0049087</doc-number>
<kind>A1</kind>
<name>Hale</name>
<date>20011200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00104">
<document-id>
<country>US</country>
<doc-number>2001/0052108</doc-number>
<kind>A1</kind>
<name>Bowman-Amuah</name>
<date>20011200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00105">
<document-id>
<country>US</country>
<doc-number>2001/0055039</doc-number>
<kind>A1</kind>
<name>Matsuda</name>
<date>20011200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00106">
<document-id>
<country>US</country>
<doc-number>2001/0056401</doc-number>
<kind>A1</kind>
<name>Tompkins</name>
<date>20011200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00107">
<document-id>
<country>US</country>
<doc-number>2002/0008692</doc-number>
<kind>A1</kind>
<name>Omura et al.</name>
<date>20020100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00108">
<document-id>
<country>US</country>
<doc-number>2002/0021307</doc-number>
<kind>A1</kind>
<name>Glenn et al.</name>
<date>20020200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00109">
<document-id>
<country>US</country>
<doc-number>2002/0033839</doc-number>
<kind>A1</kind>
<name>Elber et al.</name>
<date>20020300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00110">
<document-id>
<country>US</country>
<doc-number>2002/0055788</doc-number>
<kind>A1</kind>
<name>Petrie et al.</name>
<date>20020500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00111">
<document-id>
<country>US</country>
<doc-number>2002/0055891</doc-number>
<kind>A1</kind>
<name>Yang</name>
<date>20020500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00112">
<document-id>
<country>US</country>
<doc-number>2002/0065912</doc-number>
<kind>A1</kind>
<name>Catchpole et al.</name>
<date>20020500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00113">
<document-id>
<country>US</country>
<doc-number>2002/0065926</doc-number>
<kind>A1</kind>
<name>Hackney et al.</name>
<date>20020500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00114">
<document-id>
<country>US</country>
<doc-number>2002/0072980</doc-number>
<kind>A1</kind>
<name>Dutta</name>
<date>20020600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00115">
<document-id>
<country>US</country>
<doc-number>2002/0087649</doc-number>
<kind>A1</kind>
<name>Horvitz</name>
<date>20020700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00116">
<document-id>
<country>US</country>
<doc-number>2002/0101445</doc-number>
<kind>A1</kind>
<name>Berque</name>
<date>20020800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00117">
<document-id>
<country>US</country>
<doc-number>2002/0120935</doc-number>
<kind>A1</kind>
<name>Huber et al.</name>
<date>20020800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00118">
<document-id>
<country>US</country>
<doc-number>2002/0124051</doc-number>
<kind>A1</kind>
<name>Ludwig et al.</name>
<date>20020900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00119">
<document-id>
<country>US</country>
<doc-number>2002/0130850</doc-number>
<kind>A1</kind>
<name>Kobayashi et al.</name>
<date>20020900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00120">
<document-id>
<country>US</country>
<doc-number>2002/0143591</doc-number>
<kind>A1</kind>
<name>Connelly</name>
<date>20021000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00121">
<document-id>
<country>US</country>
<doc-number>2002/0143876</doc-number>
<kind>A1</kind>
<name>Boyer et al.</name>
<date>20021000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00122">
<document-id>
<country>US</country>
<doc-number>2002/0144269</doc-number>
<kind>A1</kind>
<name>Connelly</name>
<date>20021000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00123">
<document-id>
<country>US</country>
<doc-number>2002/0147645</doc-number>
<kind>A1</kind>
<name>Alao et al.</name>
<date>20021000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00124">
<document-id>
<country>US</country>
<doc-number>2002/0149617</doc-number>
<kind>A1</kind>
<name>Becker</name>
<date>20021000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00125">
<document-id>
<country>US</country>
<doc-number>2002/0154210</doc-number>
<kind>A1</kind>
<name>Ludwig et al.</name>
<date>20021000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00126">
<document-id>
<country>US</country>
<doc-number>2002/0161862</doc-number>
<kind>A1</kind>
<name>Horvitz</name>
<date>20021000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00127">
<document-id>
<country>US</country>
<doc-number>2002/0163572</doc-number>
<kind>A1</kind>
<name>Center, Jr. et al.</name>
<date>20021100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00128">
<document-id>
<country>US</country>
<doc-number>2002/0167947</doc-number>
<kind>A1</kind>
<name>Hallford et al.</name>
<date>20021100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00129">
<document-id>
<country>US</country>
<doc-number>2002/0188443</doc-number>
<kind>A1</kind>
<name>Reddy et al.</name>
<date>20021200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00130">
<document-id>
<country>US</country>
<doc-number>2002/0193066</doc-number>
<kind>A1</kind>
<name>Connelly</name>
<date>20021200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00131">
<document-id>
<country>US</country>
<doc-number>2002/0193997</doc-number>
<kind>A1</kind>
<name>Fitzpatrick et al.</name>
<date>20021200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00132">
<document-id>
<country>US</country>
<doc-number>2002/0194083</doc-number>
<kind>A1</kind>
<name>Balabhadrapatruni et al.</name>
<date>20021200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00133">
<document-id>
<country>US</country>
<doc-number>2002/0194585</doc-number>
<kind>A1</kind>
<name>Connelly</name>
<date>20021200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00134">
<document-id>
<country>US</country>
<doc-number>2002/0194603</doc-number>
<kind>A1</kind>
<name>Connelly</name>
<date>20021200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00135">
<document-id>
<country>US</country>
<doc-number>2003/0005301</doc-number>
<kind>A1</kind>
<name>Jutzi et al.</name>
<date>20030100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00136">
<document-id>
<country>US</country>
<doc-number>2003/0005451</doc-number>
<kind>A1</kind>
<name>Connelly</name>
<date>20030100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00137">
<document-id>
<country>US</country>
<doc-number>2003/0005465</doc-number>
<kind>A1</kind>
<name>Connelly</name>
<date>20030100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00138">
<document-id>
<country>US</country>
<doc-number>2003/0018719</doc-number>
<kind>A1</kind>
<name>Ruths et al.</name>
<date>20030100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00139">
<document-id>
<country>US</country>
<doc-number>2003/0018725</doc-number>
<kind>A1</kind>
<name>Turner et al.</name>
<date>20030100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00140">
<document-id>
<country>US</country>
<doc-number>2003/0023440</doc-number>
<kind>A1</kind>
<name>Chu</name>
<date>20030100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00141">
<document-id>
<country>US</country>
<doc-number>2003/0028451</doc-number>
<kind>A1</kind>
<name>Ananian</name>
<date>20030200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00142">
<document-id>
<country>US</country>
<doc-number>2003/0028901</doc-number>
<kind>A1</kind>
<name>Shae et al.</name>
<date>20030200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00143">
<document-id>
<country>US</country>
<doc-number>2003/0043815</doc-number>
<kind>A1</kind>
<name>Tinsley et al.</name>
<date>20030300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00144">
<document-id>
<country>US</country>
<doc-number>2003/0050834</doc-number>
<kind>A1</kind>
<name>Caplan</name>
<date>20030300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00145">
<document-id>
<country>US</country>
<doc-number>2003/0058275</doc-number>
<kind>A1</kind>
<name>Pilu et al.</name>
<date>20030300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00146">
<document-id>
<country>US</country>
<doc-number>2003/0058878</doc-number>
<kind>A1</kind>
<name>Minnick et al.</name>
<date>20030300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00147">
<document-id>
<country>US</country>
<doc-number>2003/0066090</doc-number>
<kind>A1</kind>
<name>Traw et al.</name>
<date>20030400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00148">
<document-id>
<country>US</country>
<doc-number>2003/0088875</doc-number>
<kind>A1</kind>
<name>Gay et al.</name>
<date>20030500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00149">
<document-id>
<country>US</country>
<doc-number>2003/0103647</doc-number>
<kind>A1</kind>
<name>Rui et al.</name>
<date>20030600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00150">
<document-id>
<country>US</country>
<doc-number>2003/0108002</doc-number>
<kind>A1</kind>
<name>Chaney et al.</name>
<date>20030600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00151">
<document-id>
<country>US</country>
<doc-number>2003/0110485</doc-number>
<kind>A1</kind>
<name>Lu et al.</name>
<date>20030600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00152">
<document-id>
<country>US</country>
<doc-number>2003/0120751</doc-number>
<kind>A1</kind>
<name>Husain et al.</name>
<date>20030600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00153">
<document-id>
<country>US</country>
<doc-number>2003/0124502</doc-number>
<kind>A1</kind>
<name>Chou</name>
<date>20030700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00154">
<document-id>
<country>US</country>
<doc-number>2003/0130973</doc-number>
<kind>A1</kind>
<name>Sumner, II et al.</name>
<date>20030700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00155">
<document-id>
<country>US</country>
<doc-number>2003/0131073</doc-number>
<kind>A1</kind>
<name>Lucovsky et al.</name>
<date>20030700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00156">
<document-id>
<country>US</country>
<doc-number>2003/0137536</doc-number>
<kind>A1</kind>
<name>Hugh</name>
<date>20030700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00157">
<document-id>
<country>US</country>
<doc-number>2003/0158901</doc-number>
<kind>A1</kind>
<name>Ludwig et al.</name>
<date>20030800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00158">
<document-id>
<country>US</country>
<doc-number>2003/0185232</doc-number>
<kind>A1</kind>
<name>Moore et al.</name>
<date>20031000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00159">
<document-id>
<country>US</country>
<doc-number>2003/0185359</doc-number>
<kind>A1</kind>
<name>Moore et al.</name>
<date>20031000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00160">
<document-id>
<country>US</country>
<doc-number>2003/0185360</doc-number>
<kind>A1</kind>
<name>Moore et al.</name>
<date>20031000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00161">
<document-id>
<country>US</country>
<doc-number>2003/0187641</doc-number>
<kind>A1</kind>
<name>Moore et al.</name>
<date>20031000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00162">
<document-id>
<country>US</country>
<doc-number>2003/0187650</doc-number>
<kind>A1</kind>
<name>Moore et al.</name>
<date>20031000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00163">
<document-id>
<country>US</country>
<doc-number>2003/0187800</doc-number>
<kind>A1</kind>
<name>Moore et al.</name>
<date>20031000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00164">
<document-id>
<country>US</country>
<doc-number>2003/0187940</doc-number>
<kind>A1</kind>
<name>Ludwig et al.</name>
<date>20031000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00165">
<document-id>
<country>US</country>
<doc-number>2003/0191676</doc-number>
<kind>A1</kind>
<name>Templeton</name>
<date>20031000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00166">
<document-id>
<country>US</country>
<doc-number>2003/0193961</doc-number>
<kind>A1</kind>
<name>Moore et al.</name>
<date>20031000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00167">
<document-id>
<country>US</country>
<doc-number>2003/0203347</doc-number>
<kind>A1</kind>
<name>Notomi</name>
<date>20031000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00168">
<document-id>
<country>US</country>
<doc-number>2003/0206203</doc-number>
<kind>A1</kind>
<name>Ly</name>
<date>20031100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00169">
<document-id>
<country>US</country>
<doc-number>2003/0215078</doc-number>
<kind>A1</kind>
<name>Brahm et al.</name>
<date>20031100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00170">
<document-id>
<country>US</country>
<doc-number>2003/0217096</doc-number>
<kind>A1</kind>
<name>McKelvic et al.</name>
<date>20031100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00171">
<document-id>
<country>US</country>
<doc-number>2003/0217123</doc-number>
<kind>A1</kind>
<name>Anderson et al.</name>
<date>20031100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00172">
<document-id>
<country>US</country>
<doc-number>2003/0220971</doc-number>
<kind>A1</kind>
<name>Kressin</name>
<date>20031100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00173">
<document-id>
<country>US</country>
<doc-number>2003/0220973</doc-number>
<kind>A1</kind>
<name>Zhu et al.</name>
<date>20031100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00174">
<document-id>
<country>US</country>
<doc-number>2003/0221196</doc-number>
<kind>A1</kind>
<name>Connelly</name>
<date>20031100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00175">
<document-id>
<country>US</country>
<doc-number>2003/0225832</doc-number>
<kind>A1</kind>
<name>Ludwig</name>
<date>20031200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00176">
<document-id>
<country>US</country>
<doc-number>2003/0225836</doc-number>
<kind>A1</kind>
<name>Lee et al.</name>
<date>20031200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00177">
<document-id>
<country>US</country>
<doc-number>2003/0227487</doc-number>
<kind>A1</kind>
<name>Hugh</name>
<date>20031200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00178">
<document-id>
<country>US</country>
<doc-number>2003/0228896</doc-number>
<kind>A1</kind>
<name>Iida et al.</name>
<date>20031200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00179">
<document-id>
<country>US</country>
<doc-number>2003/0229900</doc-number>
<kind>A1</kind>
<name>Reisman</name>
<date>20031200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00180">
<document-id>
<country>US</country>
<doc-number>2004/0001043</doc-number>
<kind>A1</kind>
<name>Lin</name>
<date>20040100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00181">
<document-id>
<country>US</country>
<doc-number>2004/0001044</doc-number>
<kind>A1</kind>
<name>Luciani, Jr. et al.</name>
<date>20040100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00182">
<document-id>
<country>US</country>
<doc-number>2004/0001082</doc-number>
<kind>A1</kind>
<name>Said</name>
<date>20040100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00183">
<document-id>
<country>US</country>
<doc-number>2004/0002049</doc-number>
<kind>A1</kind>
<name>Beavers et al.</name>
<date>20040100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00184">
<document-id>
<country>US</country>
<doc-number>2004/0002838</doc-number>
<kind>A1</kind>
<name>Oliver et al.</name>
<date>20040100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00185">
<document-id>
<country>US</country>
<doc-number>2004/0002958</doc-number>
<kind>A1</kind>
<name>Seshadri et al.</name>
<date>20040100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00186">
<document-id>
<country>US</country>
<doc-number>2004/0002972</doc-number>
<kind>A1</kind>
<name>Pather et al.</name>
<date>20040100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00187">
<document-id>
<country>US</country>
<doc-number>2004/0002988</doc-number>
<kind>A1</kind>
<name>Seshadri et al.</name>
<date>20040100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00188">
<document-id>
<country>US</country>
<doc-number>2004/0003041</doc-number>
<kind>A1</kind>
<name>Moore et al.</name>
<date>20040100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00189">
<document-id>
<country>US</country>
<doc-number>2004/0008635</doc-number>
<kind>A1</kind>
<name>Nelson et al.</name>
<date>20040100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00190">
<document-id>
<country>US</country>
<doc-number>2004/0021645</doc-number>
<kind>A1</kind>
<name>Kobayashi et al.</name>
<date>20040200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00191">
<document-id>
<country>US</country>
<doc-number>2004/0024820</doc-number>
<kind>A1</kind>
<name>Ozzie et al.</name>
<date>20040200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00192">
<document-id>
<country>US</country>
<doc-number>2004/0030750</doc-number>
<kind>A1</kind>
<name>Moore et al.</name>
<date>20040200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00193">
<document-id>
<country>US</country>
<doc-number>2004/0030753</doc-number>
<kind>A1</kind>
<name>Horvitz</name>
<date>20040200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00194">
<document-id>
<country>US</country>
<doc-number>2004/0031058</doc-number>
<kind>A1</kind>
<name>Reisman</name>
<date>20040200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00195">
<document-id>
<country>US</country>
<doc-number>2004/0039630</doc-number>
<kind>A1</kind>
<name>Begole et al.</name>
<date>20040200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00196">
<document-id>
<country>US</country>
<doc-number>2004/0061716</doc-number>
<kind>A1</kind>
<name>Cheung et al.</name>
<date>20040400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00197">
<document-id>
<country>US</country>
<doc-number>2004/0064351</doc-number>
<kind>A1</kind>
<name>Mikurak</name>
<date>20040400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00198">
<document-id>
<country>US</country>
<doc-number>2004/0080504</doc-number>
<kind>A1</kind>
<name>Salesky et al.</name>
<date>20040400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00199">
<document-id>
<country>US</country>
<doc-number>2004/0086100</doc-number>
<kind>A1</kind>
<name>Moore et al.</name>
<date>20040500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00200">
<document-id>
<country>US</country>
<doc-number>2004/0090424</doc-number>
<kind>A1</kind>
<name>Hurley et al.</name>
<date>20040500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00201">
<document-id>
<country>US</country>
<doc-number>2004/0098458</doc-number>
<kind>A1</kind>
<name>Husain et al.</name>
<date>20040500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00202">
<document-id>
<country>US</country>
<doc-number>2004/0098462</doc-number>
<kind>A1</kind>
<name>Horvitz et al.</name>
<date>20040500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00203">
<document-id>
<country>US</country>
<doc-number>2004/0098717</doc-number>
<kind>A1</kind>
<name>Husain et al.</name>
<date>20040500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00204">
<document-id>
<country>US</country>
<doc-number>2004/0098728</doc-number>
<kind>A1</kind>
<name>Husain et al.</name>
<date>20040500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00205">
<document-id>
<country>US</country>
<doc-number>2004/0098729</doc-number>
<kind>A1</kind>
<name>Husain et al.</name>
<date>20040500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00206">
<document-id>
<country>US</country>
<doc-number>2004/0103152</doc-number>
<kind>A1</kind>
<name>Ludwig et al.</name>
<date>20040500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00207">
<document-id>
<country>US</country>
<doc-number>2004/0104927</doc-number>
<kind>A1</kind>
<name>Husain et al.</name>
<date>20040600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00208">
<document-id>
<country>US</country>
<doc-number>2004/0107125</doc-number>
<kind>A1</kind>
<name>Guheen et al.</name>
<date>20040600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00209">
<document-id>
<country>US</country>
<doc-number>2004/0107253</doc-number>
<kind>A1</kind>
<name>Ludwig et al.</name>
<date>20040600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00210">
<document-id>
<country>US</country>
<doc-number>2004/0107254</doc-number>
<kind>A1</kind>
<name>Ludwig et al.</name>
<date>20040600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00211">
<document-id>
<country>US</country>
<doc-number>2004/0107255</doc-number>
<kind>A1</kind>
<name>Ludwig et al.</name>
<date>20040600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00212">
<document-id>
<country>US</country>
<doc-number>2004/0107420</doc-number>
<kind>A1</kind>
<name>Husain et al.</name>
<date>20040600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00213">
<document-id>
<country>US</country>
<doc-number>2004/0128350</doc-number>
<kind>A1</kind>
<name>Topfl et al.</name>
<date>20040700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00214">
<document-id>
<country>US</country>
<doc-number>2004/0128359</doc-number>
<kind>A1</kind>
<name>Horvitz et al.</name>
<date>20040700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00215">
<document-id>
<country>US</country>
<doc-number>2004/0143636</doc-number>
<kind>A1</kind>
<name>Horvitz et al.</name>
<date>20040700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00216">
<document-id>
<country>US</country>
<doc-number>2004/0143763</doc-number>
<kind>A1</kind>
<name>Radatti</name>
<date>20040700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00217">
<document-id>
<country>US</country>
<doc-number>2004/0146048</doc-number>
<kind>A1</kind>
<name>Cotte</name>
<date>20040700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00218">
<document-id>
<country>US</country>
<doc-number>2004/0148083</doc-number>
<kind>A1</kind>
<name>Arakawa et al.</name>
<date>20040700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00219">
<document-id>
<country>US</country>
<doc-number>2004/0148340</doc-number>
<kind>A1</kind>
<name>Cotte</name>
<date>20040700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00220">
<document-id>
<country>US</country>
<doc-number>2004/0148341</doc-number>
<kind>A1</kind>
<name>Cotte</name>
<date>20040700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00221">
<document-id>
<country>US</country>
<doc-number>2004/0148342</doc-number>
<kind>A1</kind>
<name>Cotte</name>
<date>20040700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00222">
<document-id>
<country>US</country>
<doc-number>2004/0148351</doc-number>
<kind>A1</kind>
<name>Cotte</name>
<date>20040700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00223">
<document-id>
<country>US</country>
<doc-number>2004/0148392</doc-number>
<kind>A1</kind>
<name>Cotte</name>
<date>20040700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00224">
<document-id>
<country>US</country>
<doc-number>2004/0148419</doc-number>
<kind>A1</kind>
<name>Chen et al.</name>
<date>20040700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00225">
<document-id>
<country>US</country>
<doc-number>2004/0150625</doc-number>
<kind>A1</kind>
<name>Shih et al.</name>
<date>20040800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00226">
<document-id>
<country>US</country>
<doc-number>2004/0158857</doc-number>
<kind>A1</kind>
<name>Finseth et al.</name>
<date>20040800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00227">
<document-id>
<country>US</country>
<doc-number>2004/0162144</doc-number>
<kind>A1</kind>
<name>Loose et al.</name>
<date>20040800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00228">
<document-id>
<country>US</country>
<doc-number>2004/0168121</doc-number>
<kind>A1</kind>
<name>Matz</name>
<date>20040800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00229">
<document-id>
<country>US</country>
<doc-number>2004/0172447</doc-number>
<kind>A1</kind>
<name>Miller</name>
<date>20040900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00230">
<document-id>
<country>US</country>
<doc-number>2004/0177048</doc-number>
<kind>A1</kind>
<name>Klug</name>
<date>20040900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00231">
<document-id>
<country>US</country>
<doc-number>2004/0179025</doc-number>
<kind>A1</kind>
<name>Samra et al.</name>
<date>20040900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00232">
<document-id>
<country>US</country>
<doc-number>2004/0179036</doc-number>
<kind>A1</kind>
<name>Teplov et al.</name>
<date>20040900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00233">
<document-id>
<country>US</country>
<doc-number>2004/0181577</doc-number>
<kind>A1</kind>
<name>Skurikhin et al.</name>
<date>20040900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00234">
<document-id>
<country>US</country>
<doc-number>2004/0181579</doc-number>
<kind>A1</kind>
<name>Huck et al.</name>
<date>20040900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00235">
<document-id>
<country>US</country>
<doc-number>2004/0181796</doc-number>
<kind>A1</kind>
<name>Fedotov et al.</name>
<date>20040900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>719323</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00236">
<document-id>
<country>US</country>
<doc-number>2004/0185875</doc-number>
<kind>A1</kind>
<name>Diacakis et al.</name>
<date>20040900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00237">
<document-id>
<country>US</country>
<doc-number>2004/0186888</doc-number>
<kind>A1</kind>
<name>Samn</name>
<date>20040900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00238">
<document-id>
<country>US</country>
<doc-number>2004/0194136</doc-number>
<kind>A1</kind>
<name>Finseth et al.</name>
<date>20040900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00239">
<document-id>
<country>US</country>
<doc-number>2004/0201620</doc-number>
<kind>A9</kind>
<name>Berque</name>
<date>20041000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00240">
<document-id>
<country>US</country>
<doc-number>2004/0201628</doc-number>
<kind>A1</kind>
<name>Johanson et al.</name>
<date>20041000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00241">
<document-id>
<country>US</country>
<doc-number>2004/0205775</doc-number>
<kind>A1</kind>
<name>Heikes et al.</name>
<date>20041000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00242">
<document-id>
<country>US</country>
<doc-number>2004/0205818</doc-number>
<kind>A1</kind>
<name>Saruhashi et al.</name>
<date>20041000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00243">
<document-id>
<country>US</country>
<doc-number>2004/0215742</doc-number>
<kind>A1</kind>
<name>Cook et al.</name>
<date>20041000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00244">
<document-id>
<country>US</country>
<doc-number>2004/0215743</doc-number>
<kind>A1</kind>
<name>Cook et al.</name>
<date>20041000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00245">
<document-id>
<country>US</country>
<doc-number>2004/0216044</doc-number>
<kind>A1</kind>
<name>Martin et al.</name>
<date>20041000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00246">
<document-id>
<country>US</country>
<doc-number>2004/0216045</doc-number>
<kind>A1</kind>
<name>Martin et al.</name>
<date>20041000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00247">
<document-id>
<country>US</country>
<doc-number>2004/0221009</doc-number>
<kind>A1</kind>
<name>Cook et al.</name>
<date>20041100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00248">
<document-id>
<country>US</country>
<doc-number>2004/0221010</doc-number>
<kind>A1</kind>
<name>Butler</name>
<date>20041100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00249">
<document-id>
<country>US</country>
<doc-number>2004/0221145</doc-number>
<kind>A1</kind>
<name>Bolen et al.</name>
<date>20041100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00250">
<document-id>
<country>US</country>
<doc-number>2004/0221256</doc-number>
<kind>A1</kind>
<name>Martin et al.</name>
<date>20041100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00251">
<document-id>
<country>US</country>
<doc-number>2004/0221260</doc-number>
<kind>A1</kind>
<name>Martin et al.</name>
<date>20041100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00252">
<document-id>
<country>US</country>
<doc-number>2004/0228531</doc-number>
<kind>A1</kind>
<name>Fernandez et al.</name>
<date>20041100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00253">
<document-id>
<country>US</country>
<doc-number>2004/0230536</doc-number>
<kind>A1</kind>
<name>Fung et al.</name>
<date>20041100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00254">
<document-id>
<country>US</country>
<doc-number>2004/0230572</doc-number>
<kind>A1</kind>
<name>Omoigui</name>
<date>20041100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00255">
<document-id>
<country>US</country>
<doc-number>2004/0233168</doc-number>
<kind>A1</kind>
<name>Christenson</name>
<date>20041100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00256">
<document-id>
<country>US</country>
<doc-number>2004/0236830</doc-number>
<kind>A1</kind>
<name>Nelson et al.</name>
<date>20041100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00257">
<document-id>
<country>US</country>
<doc-number>2004/0252679</doc-number>
<kind>A1</kind>
<name>Williams et al.</name>
<date>20041200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00258">
<document-id>
<country>US</country>
<doc-number>2004/0254998</doc-number>
<kind>A1</kind>
<name>Horvitz</name>
<date>20041200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00259">
<document-id>
<country>US</country>
<doc-number>2004/0263636</doc-number>
<kind>A1</kind>
<name>Cutler et al.</name>
<date>20041200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00260">
<document-id>
<country>US</country>
<doc-number>2004/0266460</doc-number>
<kind>A1</kind>
<name>Reynolds</name>
<date>20041200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00261">
<document-id>
<country>US</country>
<doc-number>2004/0267694</doc-number>
<kind>A1</kind>
<name>Sakai et al.</name>
<date>20041200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00262">
<document-id>
<country>US</country>
<doc-number>2005/0004881</doc-number>
<kind>A1</kind>
<name>Klug</name>
<date>20050100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00263">
<document-id>
<country>US</country>
<doc-number>2005/0005247</doc-number>
<kind>A1</kind>
<name>Kamachi et al.</name>
<date>20050100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00264">
<document-id>
<country>US</country>
<doc-number>2005/0007344</doc-number>
<kind>A1</kind>
<name>Cook et al.</name>
<date>20050100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00265">
<document-id>
<country>US</country>
<doc-number>2005/0027539</doc-number>
<kind>A1</kind>
<name>Weber et al.</name>
<date>20050200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00266">
<document-id>
<country>US</country>
<doc-number>2005/0028207</doc-number>
<kind>A1</kind>
<name>Finseth et al.</name>
<date>20050200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00267">
<document-id>
<country>US</country>
<doc-number>2005/0031106</doc-number>
<kind>A1</kind>
<name>Henderson</name>
<date>20050200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00268">
<document-id>
<country>US</country>
<doc-number>2005/0034079</doc-number>
<kind>A1</kind>
<name>Gunasekar et al.</name>
<date>20050200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00269">
<document-id>
<country>US</country>
<doc-number>2005/0044089</doc-number>
<kind>A1</kind>
<name>Wu et al.</name>
<date>20050200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00270">
<document-id>
<country>US</country>
<doc-number>2005/0049993</doc-number>
<kind>A1</kind>
<name>Nori et al.</name>
<date>20050300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00271">
<document-id>
<country>US</country>
<doc-number>2005/0049994</doc-number>
<kind>A1</kind>
<name>Thompson et al.</name>
<date>20050300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00272">
<document-id>
<country>US</country>
<doc-number>2005/0050053</doc-number>
<kind>A1</kind>
<name>Thompson</name>
<date>20050300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00273">
<document-id>
<country>US</country>
<doc-number>2005/0050054</doc-number>
<kind>A1</kind>
<name>Clark et al.</name>
<date>20050300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00274">
<document-id>
<country>US</country>
<doc-number>2005/0050537</doc-number>
<kind>A1</kind>
<name>Thompson et al.</name>
<date>20050300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00275">
<document-id>
<country>US</country>
<doc-number>2005/0055354</doc-number>
<kind>A1</kind>
<name>Thompson et al.</name>
<date>20050300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00276">
<document-id>
<country>US</country>
<doc-number>2005/0055380</doc-number>
<kind>A1</kind>
<name>Thompson et al.</name>
<date>20050300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00277">
<document-id>
<country>US</country>
<doc-number>2005/0055632</doc-number>
<kind>A1</kind>
<name>Schwartz et al.</name>
<date>20050300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00278">
<document-id>
<country>US</country>
<doc-number>2005/0059491</doc-number>
<kind>A1</kind>
<name>Oh</name>
<date>20050300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00279">
<document-id>
<country>US</country>
<doc-number>2005/0060211</doc-number>
<kind>A1</kind>
<name>Xiao et al.</name>
<date>20050300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00280">
<document-id>
<country>US</country>
<doc-number>2005/0060411</doc-number>
<kind>A1</kind>
<name>Coulombe et al.</name>
<date>20050300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00281">
<document-id>
<country>US</country>
<doc-number>2005/0060432</doc-number>
<kind>A1</kind>
<name>Husain et al.</name>
<date>20050300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00282">
<document-id>
<country>US</country>
<doc-number>2005/0071430</doc-number>
<kind>A1</kind>
<name>Kobayashi et al.</name>
<date>20050300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00283">
<document-id>
<country>US</country>
<doc-number>2005/0074101</doc-number>
<kind>A1</kind>
<name>Moore et al.</name>
<date>20050400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00284">
<document-id>
<country>US</country>
<doc-number>2005/0080849</doc-number>
<kind>A1</kind>
<name>Wee et al.</name>
<date>20050400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00285">
<document-id>
<country>US</country>
<doc-number>2005/0081160</doc-number>
<kind>A1</kind>
<name>Wee et al.</name>
<date>20050400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00286">
<document-id>
<country>US</country>
<doc-number>2005/0083851</doc-number>
<kind>A1</kind>
<name>Fotsch</name>
<date>20050400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00287">
<document-id>
<country>US</country>
<doc-number>2005/0084082</doc-number>
<kind>A1</kind>
<name>Horvitz et al.</name>
<date>20050400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00288">
<document-id>
<country>US</country>
<doc-number>2005/0084100</doc-number>
<kind>A1</kind>
<name>Spies et al.</name>
<date>20050400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00289">
<document-id>
<country>US</country>
<doc-number>2005/0091184</doc-number>
<kind>A1</kind>
<name>Seshadri et al.</name>
<date>20050400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00290">
<document-id>
<country>US</country>
<doc-number>2005/0091269</doc-number>
<kind>A1</kind>
<name>Gerber et al.</name>
<date>20050400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00291">
<document-id>
<country>US</country>
<doc-number>2005/0091272</doc-number>
<kind>A1</kind>
<name>Smith et al.</name>
<date>20050400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00292">
<document-id>
<country>US</country>
<doc-number>2005/0091297</doc-number>
<kind>A1</kind>
<name>Sato et al.</name>
<date>20050400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00293">
<document-id>
<country>US</country>
<doc-number>2005/0091671</doc-number>
<kind>A1</kind>
<name>Deem et al.</name>
<date>20050400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00294">
<document-id>
<country>US</country>
<doc-number>2005/0091674</doc-number>
<kind>A1</kind>
<name>Knight et al.</name>
<date>20050400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00295">
<document-id>
<country>US</country>
<doc-number>2005/0093868</doc-number>
<kind>A1</kind>
<name>Hinckley</name>
<date>20050500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00296">
<document-id>
<country>US</country>
<doc-number>2005/0102364</doc-number>
<kind>A1</kind>
<name>Ozzie et al.</name>
<date>20050500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00297">
<document-id>
<country>US</country>
<doc-number>2005/0104864</doc-number>
<kind>A1</kind>
<name>Zhang et al.</name>
<date>20050500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00298">
<document-id>
<country>US</country>
<doc-number>2005/0104892</doc-number>
<kind>A1</kind>
<name>Covington et al.</name>
<date>20050500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00299">
<document-id>
<country>US</country>
<doc-number>2005/0108451</doc-number>
<kind>A1</kind>
<name>Covington et al.</name>
<date>20050500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00300">
<document-id>
<country>US</country>
<doc-number>2005/0108614</doc-number>
<kind>A1</kind>
<name>Huntly-Playle et al.</name>
<date>20050500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00301">
<document-id>
<country>US</country>
<doc-number>2005/0114528</doc-number>
<kind>A1</kind>
<name>Suito</name>
<date>20050500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00302">
<document-id>
<country>US</country>
<doc-number>2005/0117729</doc-number>
<kind>A1</kind>
<name>Reding et al.</name>
<date>20050600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00303">
<document-id>
<country>US</country>
<doc-number>2005/0125083</doc-number>
<kind>A1</kind>
<name>Kiko</name>
<date>20050600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00304">
<document-id>
<country>US</country>
<doc-number>2005/0125717</doc-number>
<kind>A1</kind>
<name>Segal et al.</name>
<date>20050600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00305">
<document-id>
<country>US</country>
<doc-number>2005/0129278</doc-number>
<kind>A1</kind>
<name>Rui et al.</name>
<date>20050600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00306">
<document-id>
<country>US</country>
<doc-number>2005/0132408</doc-number>
<kind>A1</kind>
<name>Dahley et al.</name>
<date>20050600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00307">
<document-id>
<country>US</country>
<doc-number>2005/0138552</doc-number>
<kind>A1</kind>
<name>Venolia</name>
<date>20050600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00308">
<document-id>
<country>US</country>
<doc-number>2005/0147278</doc-number>
<kind>A1</kind>
<name>Rui et al.</name>
<date>20050700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00309">
<document-id>
<country>US</country>
<doc-number>2005/0149630</doc-number>
<kind>A1</kind>
<name>Smolinski et al.</name>
<date>20050700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00310">
<document-id>
<country>US</country>
<doc-number>2005/0155031</doc-number>
<kind>A1</kind>
<name>Wang et al.</name>
<date>20050700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00311">
<document-id>
<country>US</country>
<doc-number>2005/0165545</doc-number>
<kind>A1</kind>
<name>Obradovich et al.</name>
<date>20050700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00312">
<document-id>
<country>US</country>
<doc-number>2005/0166151</doc-number>
<kind>A1</kind>
<name>Isozaki et al.</name>
<date>20050700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00313">
<document-id>
<country>US</country>
<doc-number>2005/0177868</doc-number>
<kind>A1</kind>
<name>Kwan</name>
<date>20050800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00314">
<document-id>
<country>US</country>
<doc-number>2005/0180548</doc-number>
<kind>A1</kind>
<name>Moore</name>
<date>20050800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00315">
<document-id>
<country>US</country>
<doc-number>2005/0182824</doc-number>
<kind>A1</kind>
<name>Cotte</name>
<date>20050800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00316">
<document-id>
<country>US</country>
<doc-number>2005/0182852</doc-number>
<kind>A1</kind>
<name>Tinsley et al.</name>
<date>20050800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00317">
<document-id>
<country>US</country>
<doc-number>2005/0183143</doc-number>
<kind>A1</kind>
<name>Anderholm et al.</name>
<date>20050800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00318">
<document-id>
<country>US</country>
<doc-number>2005/0193062</doc-number>
<kind>A1</kind>
<name>Komine et al.</name>
<date>20050900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00319">
<document-id>
<country>US</country>
<doc-number>2005/0193102</doc-number>
<kind>A1</kind>
<name>Horvitz</name>
<date>20050900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00320">
<document-id>
<country>US</country>
<doc-number>2005/0198040</doc-number>
<kind>A1</kind>
<name>Cohen et al.</name>
<date>20050900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00321">
<document-id>
<country>US</country>
<doc-number>2005/0202388</doc-number>
<kind>A1</kind>
<name>Zuhl et al.</name>
<date>20050900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00322">
<document-id>
<country>US</country>
<doc-number>2005/0204309</doc-number>
<kind>A1</kind>
<name>Szeto</name>
<date>20050900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00323">
<document-id>
<country>US</country>
<doc-number>2005/0210103</doc-number>
<kind>A1</kind>
<name>Rui et al.</name>
<date>20050900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00324">
<document-id>
<country>US</country>
<doc-number>2005/0210394</doc-number>
<kind>A1</kind>
<name>Crandall et al.</name>
<date>20050900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00325">
<document-id>
<country>US</country>
<doc-number>2005/0219204</doc-number>
<kind>A1</kind>
<name>Huddleston et al.</name>
<date>20051000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00326">
<document-id>
<country>US</country>
<doc-number>2005/0223027</doc-number>
<kind>A1</kind>
<name>Lawrence et al.</name>
<date>20051000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00327">
<document-id>
<country>US</country>
<doc-number>2005/0235215</doc-number>
<kind>A1</kind>
<name>Dunn et al.</name>
<date>20051000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00328">
<document-id>
<country>US</country>
<doc-number>2005/0237380</doc-number>
<kind>A1</kind>
<name>Kakii et al.</name>
<date>20051000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00329">
<document-id>
<country>US</country>
<doc-number>2005/0240960</doc-number>
<kind>A1</kind>
<name>Nagtzaam</name>
<date>20051000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00330">
<document-id>
<country>US</country>
<doc-number>2005/0246415</doc-number>
<kind>A1</kind>
<name>Belfiore et al.</name>
<date>20051100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00331">
<document-id>
<country>US</country>
<doc-number>2005/0261062</doc-number>
<kind>A1</kind>
<name>Lewin et al.</name>
<date>20051100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00332">
<document-id>
<country>US</country>
<doc-number>2005/0261999</doc-number>
<kind>A1</kind>
<name>Rowady, Jr.</name>
<date>20051100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00333">
<document-id>
<country>US</country>
<doc-number>2005/0276444</doc-number>
<kind>A1</kind>
<name>Zhou et al.</name>
<date>20051200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00334">
<document-id>
<country>US</country>
<doc-number>2005/0285878</doc-number>
<kind>A1</kind>
<name>Singh et al.</name>
<date>20051200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00335">
<document-id>
<country>US</country>
<doc-number>2005/0288078</doc-number>
<kind>A1</kind>
<name>Cheok et al.</name>
<date>20051200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00336">
<document-id>
<country>US</country>
<doc-number>2005/0289092</doc-number>
<kind>A1</kind>
<name>Sumner, II et al.</name>
<date>20051200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00337">
<document-id>
<country>US</country>
<doc-number>2005/0289453</doc-number>
<kind>A1</kind>
<name>Segal et al.</name>
<date>20051200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00338">
<document-id>
<country>US</country>
<doc-number>2005/0289590</doc-number>
<kind>A1</kind>
<name>Cheok et al.</name>
<date>20051200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00339">
<document-id>
<country>US</country>
<doc-number>2006/0004608</doc-number>
<kind>A1</kind>
<name>Rovinelli et al.</name>
<date>20060100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00340">
<document-id>
<country>US</country>
<doc-number>2006/0010206</doc-number>
<kind>A1</kind>
<name>Apacible et al.</name>
<date>20060100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00341">
<document-id>
<country>US</country>
<doc-number>2006/0014132</doc-number>
<kind>A1</kind>
<name>Hamilton</name>
<date>20060100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00342">
<document-id>
<country>US</country>
<doc-number>2006/0015598</doc-number>
<kind>A1</kind>
<name>Olsen et al.</name>
<date>20060100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00343">
<document-id>
<country>US</country>
<doc-number>2006/0022955</doc-number>
<kind>A1</kind>
<name>Kennedy</name>
<date>20060200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00344">
<document-id>
<country>US</country>
<doc-number>2006/0026067</doc-number>
<kind>A1</kind>
<name>Nicholas et al.</name>
<date>20060200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00345">
<document-id>
<country>US</country>
<doc-number>2006/0026254</doc-number>
<kind>A1</kind>
<name>Kessen et al.</name>
<date>20060200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00346">
<document-id>
<country>US</country>
<doc-number>2006/0028457</doc-number>
<kind>A1</kind>
<name>Burns</name>
<date>20060200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00347">
<document-id>
<country>US</country>
<doc-number>2006/0029092</doc-number>
<kind>A1</kind>
<name>Luo et al.</name>
<date>20060200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00348">
<document-id>
<country>US</country>
<doc-number>2006/0031291</doc-number>
<kind>A1</kind>
<name>Beckemeyer</name>
<date>20060200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00349">
<document-id>
<country>US</country>
<doc-number>2006/0041616</doc-number>
<kind>A1</kind>
<name>Ludwig et al.</name>
<date>20060200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00350">
<document-id>
<country>US</country>
<doc-number>2006/0041617</doc-number>
<kind>A1</kind>
<name>Ludwig et al.</name>
<date>20060200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00351">
<document-id>
<country>US</country>
<doc-number>2006/0041648</doc-number>
<kind>A1</kind>
<name>Horvitz</name>
<date>20060200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00352">
<document-id>
<country>US</country>
<doc-number>2006/0041752</doc-number>
<kind>A1</kind>
<name>Tuvell et al.</name>
<date>20060200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00353">
<document-id>
<country>US</country>
<doc-number>2006/0041848</doc-number>
<kind>A1</kind>
<name>Lira</name>
<date>20060200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00354">
<document-id>
<country>US</country>
<doc-number>2006/0045029</doc-number>
<kind>A1</kind>
<name>Ethier et al.</name>
<date>20060300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00355">
<document-id>
<country>US</country>
<doc-number>2006/0045030</doc-number>
<kind>A1</kind>
<name>Bieselin</name>
<date>20060300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00356">
<document-id>
<country>US</country>
<doc-number>2006/0047557</doc-number>
<kind>A1</kind>
<name>Bieselin et al.</name>
<date>20060300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00357">
<document-id>
<country>US</country>
<doc-number>2006/0047770</doc-number>
<kind>A1</kind>
<name>Marappan et al.</name>
<date>20060300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00358">
<document-id>
<country>US</country>
<doc-number>2006/0048061</doc-number>
<kind>A1</kind>
<name>Forlenza et al.</name>
<date>20060300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00359">
<document-id>
<country>US</country>
<doc-number>2006/0059253</doc-number>
<kind>A1</kind>
<name>Goodman et al.</name>
<date>20060300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00360">
<document-id>
<country>US</country>
<doc-number>2006/0059266</doc-number>
<kind>A1</kind>
<name>Ludwig et al.</name>
<date>20060300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00361">
<document-id>
<country>US</country>
<doc-number>2006/0064461</doc-number>
<kind>A1</kind>
<name>Ludwig et al.</name>
<date>20060300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00362">
<document-id>
<country>US</country>
<doc-number>2006/0075055</doc-number>
<kind>A1</kind>
<name>Littlefield</name>
<date>20060400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00363">
<document-id>
<country>US</country>
<doc-number>2006/0075121</doc-number>
<kind>A1</kind>
<name>Ludwig et al.</name>
<date>20060400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00364">
<document-id>
<country>US</country>
<doc-number>2006/0080432</doc-number>
<kind>A1</kind>
<name>Spataro et al.</name>
<date>20060400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00365">
<document-id>
<country>US</country>
<doc-number>2006/0080702</doc-number>
<kind>A1</kind>
<name>Diez et al.</name>
<date>20060400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00366">
<document-id>
<country>US</country>
<doc-number>2006/0080710</doc-number>
<kind>A1</kind>
<name>Carthern</name>
<date>20060400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00367">
<document-id>
<country>US</country>
<doc-number>2006/0092178</doc-number>
<kind>A1</kind>
<name>Tanguay, Jr. et al.</name>
<date>20060500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00368">
<document-id>
<country>US</country>
<doc-number>2006/0092268</doc-number>
<kind>A1</kind>
<name>Ahn et al.</name>
<date>20060500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00369">
<document-id>
<country>US</country>
<doc-number>2006/0094467</doc-number>
<kind>A1</kind>
<name>Kim et al.</name>
<date>20060500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00370">
<document-id>
<country>US</country>
<doc-number>2006/0095401</doc-number>
<kind>A1</kind>
<name>Krikorian et al.</name>
<date>20060500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00371">
<document-id>
<country>US</country>
<doc-number>2006/0095471</doc-number>
<kind>A1</kind>
<name>Krikorian et al.</name>
<date>20060500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00372">
<document-id>
<country>US</country>
<doc-number>2006/0095472</doc-number>
<kind>A1</kind>
<name>Krikorian et al.</name>
<date>20060500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00373">
<document-id>
<country>US</country>
<doc-number>2006/0099941</doc-number>
<kind>A1</kind>
<name>Kim et al.</name>
<date>20060500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00374">
<document-id>
<country>US</country>
<doc-number>2006/0101116</doc-number>
<kind>A1</kind>
<name>Rittman et al.</name>
<date>20060500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00375">
<document-id>
<country>US</country>
<doc-number>2006/0101119</doc-number>
<kind>A1</kind>
<name>Qureshi et al.</name>
<date>20060500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00376">
<document-id>
<country>US</country>
<doc-number>2006/0107226</doc-number>
<kind>A1</kind>
<name>Matthews et al.</name>
<date>20060500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00377">
<document-id>
<country>US</country>
<doc-number>2006/0107231</doc-number>
<kind>A1</kind>
<name>Matthews et al.</name>
<date>20060500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00378">
<document-id>
<country>US</country>
<doc-number>2006/0114920</doc-number>
<kind>A1</kind>
<name>Jung et al.</name>
<date>20060600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00379">
<document-id>
<country>US</country>
<doc-number>2006/0117371</doc-number>
<kind>A1</kind>
<name>Margulis</name>
<date>20060600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00380">
<document-id>
<country>US</country>
<doc-number>2006/0123353</doc-number>
<kind>A1</kind>
<name>Matthews et al.</name>
<date>20060600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00381">
<document-id>
<country>US</country>
<doc-number>2006/0126806</doc-number>
<kind>A1</kind>
<name>Trandal et al.</name>
<date>20060600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00382">
<document-id>
<country>US</country>
<doc-number>2006/0135258</doc-number>
<kind>A1</kind>
<name>Maheshwari et al.</name>
<date>20060600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00383">
<document-id>
<country>US</country>
<doc-number>2006/0136191</doc-number>
<kind>A1</kind>
<name>Irons</name>
<date>20060600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00384">
<document-id>
<country>US</country>
<doc-number>2006/0136964</doc-number>
<kind>A1</kind>
<name>Diez et al.</name>
<date>20060600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00385">
<document-id>
<country>US</country>
<doc-number>2006/0139330</doc-number>
<kind>A1</kind>
<name>Kutch et al.</name>
<date>20060600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00386">
<document-id>
<country>US</country>
<doc-number>2006/0142012</doc-number>
<kind>A1</kind>
<name>Kirchhoff et al.</name>
<date>20060600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00387">
<document-id>
<country>US</country>
<doc-number>2006/0143714</doc-number>
<kind>A1</kind>
<name>Peterson et al.</name>
<date>20060600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00388">
<document-id>
<country>US</country>
<doc-number>2006/0154713</doc-number>
<kind>A1</kind>
<name>Sunazuka et al.</name>
<date>20060700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00389">
<document-id>
<country>US</country>
<doc-number>2006/0161981</doc-number>
<kind>A1</kind>
<name>Sheth et al.</name>
<date>20060700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00390">
<document-id>
<country>US</country>
<doc-number>2006/0211464</doc-number>
<kind>A1</kind>
<name>Malobabic</name>
<date>20060900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00391">
<document-id>
<country>US</country>
<doc-number>2006/0269290</doc-number>
<kind>A1</kind>
<name>Greenspan</name>
<date>20061100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00392">
<document-id>
<country>US</country>
<doc-number>2006/0279042</doc-number>
<kind>A1</kind>
<name>Stevenson et al.</name>
<date>20061200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00393">
<document-id>
<country>US</country>
<doc-number>2007/0013131</doc-number>
<kind>A1</kind>
<name>Potter</name>
<date>20070100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00394">
<document-id>
<country>US</country>
<doc-number>2007/0015574</doc-number>
<kind>A1</kind>
<name>Vale et al.</name>
<date>20070100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00395">
<document-id>
<country>US</country>
<doc-number>2007/0037622</doc-number>
<kind>A1</kind>
<name>Chan</name>
<date>20070200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00396">
<document-id>
<country>US</country>
<doc-number>2007/0101190</doc-number>
<kind>A1</kind>
<name>Chen et al.</name>
<date>20070500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00397">
<document-id>
<country>US</country>
<doc-number>2007/0126179</doc-number>
<kind>A1</kind>
<name>Esserman et al.</name>
<date>20070600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00398">
<document-id>
<country>US</country>
<doc-number>2007/0160972</doc-number>
<kind>A1</kind>
<name>Clark</name>
<date>20070700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00399">
<document-id>
<country>US</country>
<doc-number>2008/0242422</doc-number>
<kind>A1</kind>
<name>Kropivny</name>
<date>20081000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00400">
<document-id>
<country>US</country>
<doc-number>2008/0243994</doc-number>
<kind>A1</kind>
<name>Kropivny</name>
<date>20081000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00401">
<document-id>
<country>US</country>
<doc-number>2008/0244013</doc-number>
<kind>A1</kind>
<name>Kropivny</name>
<date>20081000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00402">
<document-id>
<country>US</country>
<doc-number>2008/0244615</doc-number>
<kind>A1</kind>
<name>Kropivny</name>
<date>20081000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00403">
<document-id>
<country>US</country>
<doc-number>2008/0244702</doc-number>
<kind>A1</kind>
<name>Kropivny</name>
<date>20081000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00404">
<document-id>
<country>EP</country>
<doc-number>0 898 756</doc-number>
<date>20000500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00405">
<document-id>
<country>EP</country>
<doc-number>1 460 876</doc-number>
<date>20040900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00406">
<document-id>
<country>EP</country>
<doc-number>1 484 892</doc-number>
<date>20041200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00407">
<document-id>
<country>EP</country>
<doc-number>1 633 119</doc-number>
<date>20060300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00408">
<document-id>
<country>WO</country>
<doc-number>WO 99/48011</doc-number>
<date>19990900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00409">
<document-id>
<country>WO</country>
<doc-number>WO 01/25940</doc-number>
<date>20010400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00410">
<document-id>
<country>WO</country>
<doc-number>WO 01/95126</doc-number>
<date>20011200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00411">
<document-id>
<country>WO</country>
<doc-number>WO 02/073439</doc-number>
<date>20020900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00412">
<document-id>
<country>WO</country>
<doc-number>WO 2005/022397</doc-number>
<kind>A1</kind>
<date>20050300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00413">
<othercit>Written Opinion dated Jun. 1, 2009 for PCT/CA2007/000589 published as WO2008119149 on Oct. 9, 2008, and entitled &#x201c;Method, Apparatus, System, and Medium for Supporting Multiple-Party Communications&#x201d; (16 pages).</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00414">
<othercit>International Search Report and Written Opinion dated Dec. 18, 2007 for PCT/CA2007/000589 published as WO2008119149 on Oct. 9, 2008, and entitled &#x201c;Method, Apparatus, System, and Medium for Supporting Multiple-Party Communications&#x201d; (34 pages).</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00415">
<othercit>International Preliminary Report on Patentability dated Aug. 3, 2009 for PCT/CA2007/000589 published as WO2008119149 on Oct. 9, 2008, and entitled &#x201c;Method, Apparatus, System, and Medium for Supporting Multiple-Party Communications&#x201d; (14 pages).</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00416">
<othercit>Bernier, Y., &#x201c;Latency Compensating Methods in Client/Server In-game Protocol Design and Optimization,&#x201d; Feb. 2001, Game Developers Conference, 13 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00417">
<othercit>Gajewska, H., et al., &#x201c;Argo: A System for Distributed Collaboration,&#x201d; Oct. 1994, Proceedings of the Second ACM International Conference on Multimedia, San Francisco, California, USA, pp. 433-440, 8 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00418">
<othercit>Jeffay, et al., &#x201c;Transport and Display Mechanisms for Multimedia Conferencing Across Packet-Switched Networks&#x201d;, University of North Carolina at Chapel Hill, Computer Networks and ISDN Systems, vol. 26, No. 10, pp. 1281-1304, Sep. 1993.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00419">
<othercit>Bly et al., &#x201c;Commune: A Shared Drawing Surface&#x201d;, Xerox Palo Alto Research Center &#x26; Center for Design Research, Stanford University, 1990.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00420">
<othercit>Gajewska, et al., &#x201c;Argo: A System for Distributed Collaboration&#x201d;, Systems Research Center&#x2014;Digitial Equipment Corporation, Palo Alto, CA.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00421">
<othercit>Mauve et al., &#x201c;A generic proxy system for networked computer games&#x201d;, Proceedings of the 1st workshop on Network and system support for games, 2002, pp. 25-28.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00422">
<othercit>Dodds, &#x201c;Collaberative Interaction in a Virtual Environment&#x201d;, 2004.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00423">
<othercit>Dyck et al., &#x201c;High-Performance Telepointers&#x201d;, Proc. ACM CSCW, 2004.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00424">
<othercit>Bernier, &#x201c;Latency Compensating Methods in Client/Server In-game Protocol Design and Optimization&#x201d;.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00425">
<othercit>Dyck, &#x201c;A Survey of Appplication Layer Networking Techniques for Real-time Distributed Groupware&#x201d;, University of Saskatchewan, 2006.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00426">
<othercit>Bonham et al., &#x201c;Quake: An Example Multi-User Network Application&#x2014;Problems and Solutions in Distributed Interactive Simulations&#x201d;, University of Washington Seattle, WA 98195, May 31, 2000.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00427">
<othercit>Funkhouser, &#x201c;Network topologies for scalable multi-user virtual environments&#x201d;, Proc. of the Virtual Reality Annual International Symposium, pp. 222-228, 1996.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00428">
<othercit>Marsic, &#x201c;Real-Time Collaboration in Heterogeneous Computing Environments&#x201d;, Proc. ITCC 2000, pp. 222-227.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00429">
<othercit>Phillips, &#x201c;Architectures for Synchronous Groupware. Technical Report&#x201d;, 1999-425. Department of Computing and Information science, Queen's University, Kingston, Ontario, Canada, 1999.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00430">
<othercit>Benford et al., &#x201c;User Embodiment in Collaborative Virtual Environments&#x201d;, Proc. ACM CHI 1995, 242-249.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00431">
<othercit>Bier et al., &#x201c;MMM: a User Interface Architecture for Shared Editors on a Single Screen&#x201d; Proc. ACM UIST 1991, 79-86.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00432">
<othercit>Greenberg et al., &#x201c;GroupSketch: A Multi-User Sketchpad for Geographically-Distributed Small Groups&#x201d;. Proc. Graphics Interface, 1991, 207-215.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00433">
<othercit>Gutwin et al., &#x201c;Improving Interpretation of Remote Gestures with Telepointer Traces&#x201d;, Proc. CSCW 2002, 49-57.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>150</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>715751</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>715753</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>715754</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>37</number-of-drawing-sheets>
<number-of-figures>39</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20080244461</doc-number>
<kind>A1</kind>
<date>20081002</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Kropivny</last-name>
<first-name>Alexander</first-name>
<address>
<city>Burnaby</city>
<country>CA</country>
</address>
</addressbook>
<residence>
<country>CA</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Kropivny</last-name>
<first-name>Alexander</first-name>
<address>
<city>Burnaby</city>
<country>CA</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Fish &#x26; Richardson P.C.</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>Uranus International Limited</orgname>
<role>03</role>
<address>
<city>Mahe</city>
<country>SC</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Vu</last-name>
<first-name>Thanh</first-name>
<department>2175</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">Systems, apparatus and methods related to multiple-party communications conducted between client computers in a computer network. For example, a system for supporting multiple-party communications on a client computer in communication with a server in a computer network is disclosed. The system includes a client processor circuit operably configured to transmit a first cursor message to the server to elicit a first pointer message from the server, the first cursor message representing a change in a position of a first cursor associated with the client computer in response to user input received from a user of the client computer. The system also includes a server processor circuit operably configured to receive the first cursor message from the client computer, transmit the first pointer message to the client computer in response to the first cursor message, the first pointer message representing the change in the position of the first cursor provided by the first cursor message. The client processor circuit is operably configured to receive the first pointer message from the server and to cause a corresponding change in a position of a first pointer associated with the first cursor and displayed on a display area of the client computer, in response to the first pointer message.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="170.26mm" wi="210.23mm" file="US08627211-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="167.47mm" wi="168.74mm" file="US08627211-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="208.11mm" wi="182.54mm" file="US08627211-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="130.22mm" wi="151.13mm" file="US08627211-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="220.73mm" wi="175.60mm" orientation="landscape" file="US08627211-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="243.84mm" wi="143.76mm" file="US08627211-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="182.96mm" wi="180.51mm" file="US08627211-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="250.27mm" wi="149.18mm" file="US08627211-20140107-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00008" num="00008">
<img id="EMI-D00008" he="250.61mm" wi="185.76mm" file="US08627211-20140107-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00009" num="00009">
<img id="EMI-D00009" he="232.16mm" wi="86.70mm" orientation="landscape" file="US08627211-20140107-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00010" num="00010">
<img id="EMI-D00010" he="209.21mm" wi="172.72mm" orientation="landscape" file="US08627211-20140107-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00011" num="00011">
<img id="EMI-D00011" he="255.35mm" wi="175.09mm" orientation="landscape" file="US08627211-20140107-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00012" num="00012">
<img id="EMI-D00012" he="254.34mm" wi="186.52mm" orientation="landscape" file="US08627211-20140107-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00013" num="00013">
<img id="EMI-D00013" he="238.59mm" wi="168.57mm" orientation="landscape" file="US08627211-20140107-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00014" num="00014">
<img id="EMI-D00014" he="245.11mm" wi="178.90mm" orientation="landscape" file="US08627211-20140107-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00015" num="00015">
<img id="EMI-D00015" he="152.82mm" wi="165.44mm" file="US08627211-20140107-D00015.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00016" num="00016">
<img id="EMI-D00016" he="241.64mm" wi="180.93mm" orientation="landscape" file="US08627211-20140107-D00016.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00017" num="00017">
<img id="EMI-D00017" he="247.06mm" wi="186.10mm" orientation="landscape" file="US08627211-20140107-D00017.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00018" num="00018">
<img id="EMI-D00018" he="206.25mm" wi="187.54mm" file="US08627211-20140107-D00018.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00019" num="00019">
<img id="EMI-D00019" he="128.52mm" wi="154.09mm" file="US08627211-20140107-D00019.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00020" num="00020">
<img id="EMI-D00020" he="258.49mm" wi="186.94mm" orientation="landscape" file="US08627211-20140107-D00020.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00021" num="00021">
<img id="EMI-D00021" he="238.25mm" wi="173.48mm" orientation="landscape" file="US08627211-20140107-D00021.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00022" num="00022">
<img id="EMI-D00022" he="252.73mm" wi="137.75mm" file="US08627211-20140107-D00022.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00023" num="00023">
<img id="EMI-D00023" he="245.79mm" wi="149.78mm" file="US08627211-20140107-D00023.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00024" num="00024">
<img id="EMI-D00024" he="218.36mm" wi="171.62mm" orientation="landscape" file="US08627211-20140107-D00024.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00025" num="00025">
<img id="EMI-D00025" he="245.19mm" wi="162.31mm" file="US08627211-20140107-D00025.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00026" num="00026">
<img id="EMI-D00026" he="214.88mm" wi="86.19mm" file="US08627211-20140107-D00026.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00027" num="00027">
<img id="EMI-D00027" he="205.66mm" wi="173.57mm" file="US08627211-20140107-D00027.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00028" num="00028">
<img id="EMI-D00028" he="226.99mm" wi="174.50mm" orientation="landscape" file="US08627211-20140107-D00028.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00029" num="00029">
<img id="EMI-D00029" he="228.85mm" wi="176.11mm" orientation="landscape" file="US08627211-20140107-D00029.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00030" num="00030">
<img id="EMI-D00030" he="232.07mm" wi="130.22mm" file="US08627211-20140107-D00030.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00031" num="00031">
<img id="EMI-D00031" he="203.71mm" wi="164.00mm" file="US08627211-20140107-D00031.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00032" num="00032">
<img id="EMI-D00032" he="228.94mm" wi="173.48mm" orientation="landscape" file="US08627211-20140107-D00032.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00033" num="00033">
<img id="EMI-D00033" he="246.80mm" wi="147.49mm" file="US08627211-20140107-D00033.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00034" num="00034">
<img id="EMI-D00034" he="244.60mm" wi="191.18mm" file="US08627211-20140107-D00034.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00035" num="00035">
<img id="EMI-D00035" he="204.39mm" wi="171.96mm" file="US08627211-20140107-D00035.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00036" num="00036">
<img id="EMI-D00036" he="194.39mm" wi="138.94mm" file="US08627211-20140107-D00036.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00037" num="00037">
<img id="EMI-D00037" he="209.97mm" wi="166.96mm" file="US08627211-20140107-D00037.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">CROSS REFERENCE TO OTHER APPLICATIONS</heading>
<p id="p-0002" num="0001">This application is related to the US patent applications entitled:</p>
<p id="p-0003" num="0002">Method, Apparatus, System, and Medium for Supporting Multiple-Party Communications;</p>
<p id="p-0004" num="0003">Method, Apparatus, System, Medium, and Signals for Intercepting a Multiple-Party Communication;</p>
<p id="p-0005" num="0004">Method, Apparatus, System, Medium, and Signals for Publishing Content Created During a Communication;</p>
<p id="p-0006" num="0005">Method, Apparatus, System, Medium, and Signals for Supporting a Multiple-Party Communication on a Plurality of Computer Servers; and</p>
<p id="p-0007" num="0006">Method, Apparatus, System, Medium, and Signals for Supporting Game Piece Movement in a Multiple-Party Communication; all by Alexander Kropivny and all filed concurrently herewith.</p>
<p id="p-0008" num="0007">The disclosure of each of the above patent applications is incorporated by reference as part of the specification of this application.</p>
<heading id="h-0002" level="1">BACKGROUND</heading>
<p id="p-0009" num="0008">The specification of this application relates generally to network communications, and more particularly to multiple-party communications conducted between client computers in a computer network.</p>
<p id="p-0010" num="0009">High bandwidth internet connections enjoyed by many computer users have facilitated new forms of online collaboration, allowing users to conduct multiple-party communications over an internet connection by sharing a common view of a displayed page in an internet browser window, for example. Users may post comments on the displayed page, which may be transmitted to all users, thus facilitating online discussion.</p>
<p id="p-0011" num="0010">However, such communications suffer from a common problem due to delays in transmitting posted comments and other information between the parties. In some cases these delays reduce the usefulness of an online communication since the parties do not feel a presence of other participants in the communication.</p>
<p id="p-0012" num="0011">Accordingly, there remains a need for communication systems and methods that improve a user's experience of such multiple-party communications in a computer network.</p>
<heading id="h-0003" level="1">SUMMARY</heading>
<p id="p-0013" num="0012">In accordance with one aspect of the invention there is provided a method for supporting multiple-party communications on a client computer in communication with a server in a computer network. The method involves transmitting a first cursor message to the server to elicit a first pointer message from the server, the first cursor message representing a change in a position of a first cursor associated with the client computer in response to user input received from a user of the client computer. The method also involves receiving the first pointer message from the server, the first pointer message representing the change in the position of the first cursor, and causing a corresponding change in a position of a first pointer associated with the first cursor and displayed on a display area of the client computer, in response to the first pointer message.</p>
<p id="p-0014" num="0013">Transmitting the first cursor message to the server may involve transmitting a first cursor message representing a change in a position of one of a first cursor displayed on a display area of the client computer, and a stylus tip in contact with a touch screen display area of the client computer.</p>
<p id="p-0015" num="0014">The method may involve producing the first cursor message.</p>
<p id="p-0016" num="0015">Producing the first cursor message may involve producing a message may involve a message identifier, a user identifier associated with the client computer, and position coordinates of a current position of the first cursor.</p>
<p id="p-0017" num="0016">Producing the first cursor message may involve producing at least one of a persistent message that represents a track of the first cursor in arriving at the current position of the cursor, and a non-persistent message representing the current position of the first cursor.</p>
<p id="p-0018" num="0017">Producing the cursor message may involve receiving interrupt event signals from an operating system of the client computer, determining whether at least one of the interrupt event signals represents receipt of user input from a user input device in communication with the client computer, causing data representing the user input to be received from the operating system of the client computer and extracting change of position data from the data representing the user input, and producing payload data for the first cursor message in response to the change of position data.</p>
<p id="p-0019" num="0018">Receiving the first pointer message representing the change in the position of the first cursor may involve receiving a copy of the cursor message from the server.</p>
<p id="p-0020" num="0019">Receiving the first pointer message may involve receiving a message may involve a message identifier and position coordinates representing a position of the first cursor.</p>
<p id="p-0021" num="0020">Causing the corresponding change in the position of the first pointer may involve causing the first pointer to be deleted and redisplayed at the position coordinates representing the position of the first cursor.</p>
<p id="p-0022" num="0021">The method may involve receiving a second pointer message from the server, the second pointer message representing a change in a position of a second cursor associated with another client computer in the computer network, and causing a corresponding change in a position of a second pointer displayed on the display area of the client computer in response to the second pointer message, the second pointer being associated with the second cursor.</p>
<p id="p-0023" num="0022">Receiving the second pointer message may involve receiving a message including a message identifier, a user identifier associated with the other client computer, and position coordinates representing a position of the second cursor.</p>
<p id="p-0024" num="0023">Causing the corresponding change in the position of the second pointer may involve determining whether the user identifier corresponds to a displayed pointer on the display area, causing the pointer to be deleted and then redisplayed at the position coordinates on the display area when the user identifier corresponds to the displayed pointer, and causing a new pointer to be displayed at the position coordinates on the display area when the user identifier does not correspond to a pointer already displayed on the display area.</p>
<p id="p-0025" num="0024">In accordance with another aspect of the invention there is provided an apparatus for supporting multiple-party communications on a client computer in communication with a server in a computer network. The apparatus includes provisions for transmitting a first cursor message to the server to elicit a first pointer message from the server, the first cursor message representing a change in a position of a first cursor associated with the client computer in response to user input received from a user of the client computer. The apparatus also includes provisions for receiving the first pointer message from the server, the first pointer message representing the change in the position of the first cursor, and provisions for causing a corresponding change in a position of a first pointer associated with the first cursor and displayed on a display area of the client computer, in response to the first pointer message.</p>
<p id="p-0026" num="0025">The provisions for transmitting the first cursor message to the server may include provisions for transmitting a first cursor message representing a change in a position of one of a first cursor displayed on a display area of the client computer, and a stylus tip in contact with a touch screen display area of the client computer.</p>
<p id="p-0027" num="0026">The apparatus may include provisions for producing the first cursor message.</p>
<p id="p-0028" num="0027">The provisions for producing the first cursor message may include provisions for producing a message may include a message identifier, a user identifier associated with the client computer, and position coordinates of a current position of the first cursor.</p>
<p id="p-0029" num="0028">The provisions for producing the first cursor message may include provisions for producing at least one of a persistent message that represents a track of the first cursor in arriving at the current position of the cursor, and a non-persistent message representing the current position of the first cursor.</p>
<p id="p-0030" num="0029">The provisions for producing the cursor message may include provisions for receiving interrupt event signals from an operating system of the client computer, provisions for determining whether at least one of the interrupt event signals represents receipt of user input from a user input device in communication with the client computer, provisions for causing data representing the user input to be received from the operating system of the client computer and extracting change of position data from the data representing the user input, and provisions for producing payload data for the first cursor message in response to the change of position data.</p>
<p id="p-0031" num="0030">The provisions for receiving the first pointer message representing the change in the position of the first cursor may include provisions for receiving a copy of the cursor message from the server.</p>
<p id="p-0032" num="0031">The provisions for receiving the first pointer message may include provisions for receiving a message may include a message identifier and position coordinates representing a position of the first cursor.</p>
<p id="p-0033" num="0032">The provisions for causing the corresponding change in the position of the first pointer may include provisions for causing the first pointer to be deleted and redisplayed at the position coordinates representing the position of the first cursor.</p>
<p id="p-0034" num="0033">The apparatus may include provisions for receiving a second pointer message from the server, the second pointer message representing a change in a position of a second cursor associated with another client computer in the computer network, and provisions for causing a corresponding change in a position of a second pointer displayed on the display area of the client computer in response to the second pointer message, the second pointer being associated with the second cursor.</p>
<p id="p-0035" num="0034">The provisions for receiving the second pointer message may include provisions for receiving a message may include a message identifier, a user identifier associated with the other client computer, and position coordinates representing a position of the second cursor.</p>
<p id="p-0036" num="0035">The provisions for causing the corresponding change in the position of the second pointer may include provisions for determining whether the user identifier corresponds to a displayed pointer on the display area, provisions for causing the pointer to be deleted and then redisplayed at the position coordinates on the display area when the user identifier corresponds to the displayed pointer, and provisions for causing a new pointer to be displayed at the position coordinates on the display area when the user identifier does not correspond to a pointer already displayed on the display area.</p>
<p id="p-0037" num="0036">In accordance with another aspect of the invention there is provided an apparatus for supporting multiple-party communications on a client computer in communication with a server in a computer network. The apparatus includes a processor circuit operably configured to transmit a first cursor message to the server to elicit a first pointer message from the server, the first cursor message representing a change in a position of a first cursor associated with the client computer in response to user input received from a user of the client computer. The processor circuit is also operably configured to receive the first pointer message from the server, the first pointer message representing the change in the position of the first cursor, and cause a corresponding change in a position of a first pointer associated with the first cursor and displayed on a display area of the client computer, in response to the first pointer message.</p>
<p id="p-0038" num="0037">The processor circuit may be operably configured to transmit a first cursor message to the server, the first cursor message representing a change in a position of one of a first cursor displayed on a display area of the client computer, and a stylus tip in contact with a touch screen display area of the client computer.</p>
<p id="p-0039" num="0038">The processor circuit may be operably configured to produce the first cursor message.</p>
<p id="p-0040" num="0039">The processor circuit may be operably configured to produce a cursor message may include a message identifier, a user identifier associated with the client computer, and position coordinates of a current position of the first cursor.</p>
<p id="p-0041" num="0040">The processor circuit may be operably configured to produce at least one of a persistent message that represents a track of the first cursor in arriving at the current position of the cursor, and a non-persistent message representing the current position of the first cursor.</p>
<p id="p-0042" num="0041">The processor circuit may be operably configured to receive interrupt event signals from an operating system of the client computer, determine whether at least one of the interrupt event signals represents receipt of user input from a user input device in communication with the client computer, cause data representing the user input to be received from the operating system of the client computer and extracting change of position data from the data representing the user input, and produce payload data for the first cursor message in response to the change of position data.</p>
<p id="p-0043" num="0042">The first pointer message may include a copy of the first cursor message transmitted to the server.</p>
<p id="p-0044" num="0043">The first pointer message may include a message identifier and position coordinates representing a position of the first cursor.</p>
<p id="p-0045" num="0044">The processor circuit may be operably configured to cause the first pointer to be deleted and redisplayed at the position coordinates representing the position of the first cursor.</p>
<p id="p-0046" num="0045">The processor circuit may be operably configured to receive a second pointer message from the server, the second pointer message representing a change in a position of a second cursor associated with another client computer in the computer network, and cause a corresponding change in a position of a second pointer displayed on the display area of the client computer in response to the second pointer message, the second pointer being associated with the second cursor.</p>
<p id="p-0047" num="0046">The second pointer message may include a message identifier, a user identifier associated with the other client computer, and position coordinates representing a position of the second cursor.</p>
<p id="p-0048" num="0047">The processor circuit may be operably configured to determine whether the user identifier corresponds to a displayed pointer on the display area, cause the pointer to be deleted and then redisplayed at the position coordinates on the display area when the user identifier corresponds to the displayed pointer, and cause a new pointer to be displayed at the position coordinates on the display area when the user identifier does not correspond to a pointer already displayed on the display area.</p>
<p id="p-0049" num="0048">In accordance with another aspect of the invention there is provided a computer readable medium encoded with codes for directing a processor circuit to support multiple-party communications on a client computer in communication with a server in a computer network. The codes direct the processor circuit to transmit a first cursor message to the server to elicit a first pointer message from the server, the first cursor message representing a change in a position of a first cursor associated with the client computer in response to user input received from a user of the client computer. The codes also direct the processor circuit to receive the first pointer message from the server, the first pointer message representing the change in the position of the first cursor, and cause a corresponding change in a position of a first pointer associated with the first cursor and displayed on a display area of the client computer, in response to the first pointer message.</p>
<p id="p-0050" num="0049">In accordance with another aspect of the invention there is provided a computer readable signal encoded with codes for directing a processor circuit to support multiple-party communications on a client computer in communication with a server in a computer network. The codes direct the processor circuit to transmit a first cursor message to the server to elicit a first pointer message from the server, the first cursor message representing a change in a position of a first cursor associated with the client computer in response to user input received from a user of the client computer. The codes also direct the processor circuit to receive the first pointer message from the server, the first pointer message representing the change in the position of the first cursor, and cause a corresponding change in a position of a first pointer associated with the first cursor and displayed on a display area of the client computer, in response to the first pointer message.</p>
<p id="p-0051" num="0050">In accordance with another aspect of the invention there is provided a method for supporting multiple-party communications in a computer network including a server and at least one client computer. The method involves receiving a first cursor message at the server from the client computer, the first cursor message representing a change in a position of a first cursor associated with the client computer in response to user input received from a user of the client computer, and transmitting a first pointer message to the client computer in response to the first cursor message, the first pointer message representing the change in the position of the first cursor provided by the first cursor message.</p>
<p id="p-0052" num="0051">The server may be operably configured to host a plurality of multiple-party communications and may further involve locating a multiple-party communication associated with a user identifier, the user identifier being associated with the cursor message.</p>
<p id="p-0053" num="0052">Locating the multiple-party communication associated with the user identifier may involve locating a multiple-party communication associated with at least one of a user identifier included in a payload of the cursor message, a port identifier associated with the client computer, and an internet protocol (IP) address associated with the client computer.</p>
<p id="p-0054" num="0053">The method may involve producing the first pointer message in response to the first cursor message.</p>
<p id="p-0055" num="0054">Producing the first pointer message may involve storing the first cursor message in a shared buffer associated with the associated multiple-party communication.</p>
<p id="p-0056" num="0055">Transmitting the first pointer message may involve copying the first cursor message into a transmit buffer associated with the user identifier, to facilitate the transmitting.</p>
<p id="p-0057" num="0056">The method may involve establishing a multiple-party communication in response to a signal received from the client computer.</p>
<p id="p-0058" num="0057">Establishing the multiple-party communication may involve creating a shared buffer and associating a communication identifier with the shared buffer.</p>
<p id="p-0059" num="0058">Creating the shared buffer may involve allocating a plurality of memory stores to the multiple-party communication, associating a start data pointer with the plurality of memory stores, the start data pointer representing a location of a store in which a first message associated with the multiple-party communication may be stored, associating a current data pointer with the plurality of memory stores, the current data pointer representing a location of a store in which a last message associated with the multiple-party communication is stored, and associating a client sent pointer with the plurality of memory stores, the client sent pointer being associated with the client computer and representing a location of a store in which a last message sent to the associated client computer is stored.</p>
<p id="p-0060" num="0059">The method may involve receiving a message from the client computer representing a request by the client computer to clear content displayed on a display area of the client computer, and transmitting a clear screen message to the client computer, the clear screen message being operable to cause content associated with messages previously transmitted to the client computer to be deleted on the display area of the client computer.</p>
<p id="p-0061" num="0060">The method may involve receiving a save message from the client computer, the save message representing a request by the user of the client computer to save content displayed on a display area of the client computer, and causing pointer messages in the shared buffer to be saved to persistent storage.</p>
<p id="p-0062" num="0061">The method may involve receiving an open message from the client computer, the open message representing a request by the user of the client computer to load content previously saved during the multiple-party communication, saving pointer messages in the shared buffer to a persistent memory, transmitting a clear screen message to the client computer, the clear screen message being operable to cause content associated with pointer messages previously transmitted to the client computer to be deleted on a display area of the client computer, loading a plurality of previously saved pointer messages into the shared buffer from the persistent memory, and transmitting the plurality of previously saved pointer messages to the client computer.</p>
<p id="p-0063" num="0062">The method may involve receiving a page change message from the client computer, the page change message representing a request by the user of the client computer to change content displayed on a display area of the client computer, saving pointer messages in the shared buffer to a persistent memory store, and transmitting a clear screen message to the client computer, the clear screen message being operable to cause content associated with pointer messages previously transmitted to the client computer to be deleted on the display area of the client computer.</p>
<p id="p-0064" num="0063">The method may involve loading a plurality of previously saved pointer messages into the shared buffer from the persistent memory and transmitting the previously saved messages to the client computer.</p>
<p id="p-0065" num="0064">The method may involve determining a message type associated with the pointer message and transmitting the previously saved pointer messages may involve transmitting only pointer messages of a persistent message type to the client computer.</p>
<p id="p-0066" num="0065">The method may involve associating a client table with a communication identifier identifying the multiple-party communication.</p>
<p id="p-0067" num="0066">The method may involve storing an identification of the client computer in the client table.</p>
<p id="p-0068" num="0067">The method may involve associating a receive buffer and a transmit buffer with the client identifier, the receive buffer being operably configured to store cursor messages received from the client computer and the transmit buffer being operably configured to store pointer messages to be transmitted to the client computer.</p>
<p id="p-0069" num="0068">The method may involve receiving a disconnect message from the client computer, the disconnect message representing a request by the user of the client computer to disconnect from the multiple-party communication, and deleting the identification of the client computer in the client table.</p>
<p id="p-0070" num="0069">The method may involve causing the multiple-party communication to be discontinued when the identification of the client computer may be an only client computer in the client table and the disconnect message includes a request by the user of the client computer to discontinue the multiple-party communication after disconnecting the client computer.</p>
<p id="p-0071" num="0070">The method may involve causing the multiple-party communication to continue running when at least one of the client computer may be not an only client computer in the client table, and the disconnect message does not include a request to discontinue the multiple-party communication after disconnecting the client computer, and the disconnect message includes a request to keep the multiple-party communication running after disconnecting the client computer.</p>
<p id="p-0072" num="0071">The client computer may be a first client computer in a multiple-party communication, and may further involve receiving a second cursor message at the server, the second cursor message representing a change in a position of a second cursor displayed on a second client computer in the computer network, and transmitting a second pointer message to the first and second client computers, the second pointer message representing the change in the position of the second cursor provided by the second cursor message.</p>
<p id="p-0073" num="0072">The method may involve associating a time of receipt of the first cursor message at the server with the first cursor message and associating a time of receipt of the second cursor message at the server with the second cursor message, and transmitting the first pointer message and transmitting the second pointer message may involve transmitting the respective pointer messages in a time order corresponding to the time of receipt of each corresponding cursor message.</p>
<p id="p-0074" num="0073">In accordance with another aspect of the invention there is provided an apparatus for supporting multiple-party communications in a computer network including a server and at least one client computer. The apparatus includes provisions for receiving a first cursor message at the server from the client computer, the first cursor message representing a change in a position of a first cursor associated with the client computer in response to user input received from a user of the client computer, and provisions for transmitting a first pointer message to the client computer in response to the first cursor message, the first pointer message representing the change in the position of the first cursor provided by the first cursor message.</p>
<p id="p-0075" num="0074">The server may be operably configured to host a plurality of multiple-party communications and may further include provisions for locating a multiple-party communication associated with a user identifier, the user identifier being associated with the cursor message.</p>
<p id="p-0076" num="0075">The provisions for locating the multiple-party communication associated with the user identifier may include locating a multiple-party communication associated with at least one of a user identifier included in a payload of the cursor message, a port identifier associated with the client computer, and an internet protocol (IP) address associated with the client computer.</p>
<p id="p-0077" num="0076">The apparatus may include provisions for producing the first pointer message in response to the first cursor message.</p>
<p id="p-0078" num="0077">The provisions for producing the first pointer message may include provisions for storing the first cursor message in a shared buffer associated with the associated multiple-party communication.</p>
<p id="p-0079" num="0078">The provisions for transmitting the first pointer message may include provisions for copying the first cursor message into a transmit buffer associated with the user identifier, to facilitate the transmitting.</p>
<p id="p-0080" num="0079">The apparatus may include provisions for establishing a multiple-party communication in response to a signal received from the client computer.</p>
<p id="p-0081" num="0080">The provisions for establishing the multiple-party communication may include creating a shared buffer and associating a communication identifier with the shared buffer.</p>
<p id="p-0082" num="0081">The provisions for creating the shared buffer may include provisions for allocating a plurality of memory stores to the multiple-party communication, provisions for associating a start data pointer with the plurality of memory stores, the start data pointer representing a location of a store in which a first message associated with the multiple-party communication may be stored, provisions for associating a current data pointer with the plurality of memory stores, the current data pointer representing a location of a store in which a last message associated with the multiple-party communication is stored, and provisions for associating a client sent pointer with the plurality of memory stores, the client sent pointer being associated with the client computer and representing a location of a store in which a last message sent to the associated client computer is stored.</p>
<p id="p-0083" num="0082">The apparatus may include provisions for receiving a message from the client computer representing a request by the client computer to clear content displayed on a display area of the client computer, and provisions for transmitting a clear screen message to the client computer, the clear screen message being operable to cause content associated with messages previously transmitted to the client computer to be deleted on the display area of the client computer.</p>
<p id="p-0084" num="0083">The apparatus may include provisions for receiving a save message from the client computer, the save message representing a request by the user of the client computer to save content displayed on a display area of the client computer, and provisions for causing pointer messages in the shared buffer to be saved to persistent storage.</p>
<p id="p-0085" num="0084">The apparatus may include provisions for receiving an open message from the client computer, the open message representing a request by the user of the client computer to load content previously saved during the multiple-party communication, provisions for saving pointer messages in the shared buffer to a persistent memory, provisions for transmitting a clear screen message to the client computer, the clear screen message being operable to cause content associated with pointer messages previously transmitted to the client computer to be deleted on a display area of the client computer, provisions for loading a plurality of previously saved pointer messages into the shared buffer from the persistent memory, and provisions for transmitting the plurality of previously saved pointer messages to the client computer.</p>
<p id="p-0086" num="0085">The apparatus may include provisions for receiving a page change message from the client computer the page change message representing a request by the user of the client computer to change content displayed on a display area of the client computer, provisions for saving messages in the shared buffer to a persistent memory, and provisions for transmitting a clear screen message to the client computer, the clear screen message being operable to cause content associated with pointer messages previously transmitted to the client computer to be deleted on the display area of the client computer.</p>
<p id="p-0087" num="0086">The apparatus may include provisions for loading a plurality of previously saved pointer messages into the shared buffer from the persistent memory and provisions for transmitting the previously saved messages to the client computer.</p>
<p id="p-0088" num="0087">The apparatus may include provisions for determining a message type associated with the pointer message and the provisions for transmitting the previously saved pointer messages may include provisions for transmitting only pointer messages of a persistent message type to the client computer.</p>
<p id="p-0089" num="0088">The apparatus may include provisions for associating a client table with a communication identifier identifying the multiple-party communication.</p>
<p id="p-0090" num="0089">The apparatus may include provisions for storing an identification of the client computer in the client table.</p>
<p id="p-0091" num="0090">The apparatus may include provisions for associating a receive buffer and a transmit buffer with the client identifier, the receive buffer being operably configured to store cursor messages received from the client computer and the transmit buffer being operably configured to store pointer messages to be transmitted to the client computer.</p>
<p id="p-0092" num="0091">The apparatus may include provisions for receiving a disconnect message from the client computer, the disconnect message representing a request by the user of the client computer to disconnect from the multiple-party communication, and provisions for deleting the identification of the client computer in the client table.</p>
<p id="p-0093" num="0092">The apparatus may include provisions for causing the multiple-party communication to be discontinued when the identification of the client computer may be an only client computer in the client table and the disconnect message includes a request by the user of the client computer to discontinue the multiple-party communication after disconnecting the client computer.</p>
<p id="p-0094" num="0093">The apparatus may include provisions for causing the multiple-party communication to continue running when at least one of the client computer may be not an only client computer in the client table, and the disconnect message does not include a request to discontinue the multiple-party communication after disconnecting the client computer, and the disconnect message includes a request to keep the multiple-party communication running after disconnecting the client computer.</p>
<p id="p-0095" num="0094">The client computer may be a first client computer in a multiple-party communication, and may further include provisions for receiving a second cursor message at the server, the second cursor message representing a change in a position of a second cursor displayed on a second client computer in the computer network, and provisions for transmitting a second pointer message to the first and second client computers, the second pointer message representing the change in the position of the second cursor provided by the second cursor message.</p>
<p id="p-0096" num="0095">The apparatus may include provisions for associating a time of receipt of the first cursor message at the server with the first cursor message and provisions for associating a time of receipt of the second cursor message at the server with the second cursor message, and the provisions for transmitting the first pointer message and the provisions for transmitting the second pointer message may include provisions for transmitting the respective pointer messages in a time order corresponding to the time of receipt of each corresponding cursor message.</p>
<p id="p-0097" num="0096">In accordance with another aspect of the invention there is provided an apparatus for supporting multiple-party communications in a computer network including a server and at least one client computer. The apparatus includes a processor circuit operably configured to receive a first cursor message at the server from the client computer, the first cursor message representing a change in a position of a first cursor associated with the client computer in response to user input received from a user of the client computer, and transmit a first pointer message to the client computer in response to the first cursor message, the first pointer message representing the change in the position of the first cursor provided by the first cursor message.</p>
<p id="p-0098" num="0097">The processor circuit may be operably configured to host a plurality of multiple-party communications and the processor circuit is operably configured to locate a multiple-party communication associated with a user identifier, the user identifier being associated with the cursor message.</p>
<p id="p-0099" num="0098">The processor circuit may be operably configured to locate a multiple-party communication associated with at least one of a user identifier included in a payload of the cursor message, a port identifier associated with the client computer, and an internet protocol (IP) address associated with the client computer.</p>
<p id="p-0100" num="0099">The processor circuit may be operably configured to produce the first pointer message in response to the first cursor message.</p>
<p id="p-0101" num="0100">The processor circuit may be operably configured to produce the first pointer message by storing the first cursor message in a shared buffer associated with the associated multiple-party communication.</p>
<p id="p-0102" num="0101">The processor circuit may be operably configured facilitate transmitting the first pointer message by copying the first cursor message into a transmit buffer associated with the user identifier.</p>
<p id="p-0103" num="0102">The processor circuit may be operably configured to establish a multiple-party communication in response to a signal received from the client computer.</p>
<p id="p-0104" num="0103">The processor circuit may be operably configured to create a shared buffer and associate a communication identifier with the shared buffer.</p>
<p id="p-0105" num="0104">The processor circuit may be operably configured to create the shared buffer by allocating a plurality of memory stores to the multiple-party communication, associate a start data pointer with the plurality of memory stores, the start data pointer representing a location of a store in which a first message associated with the multiple-party communication is stored, associate a current data pointer with the plurality of memory stores, the current data pointer representing a location of a store in which a last message associated with the multiple-party communication is stored, and associate a client sent pointer with the plurality of memory stores, the client sent pointer being associated with the client computer and representing a location of a store in which a last message sent to the associated client computer is stored.</p>
<p id="p-0106" num="0105">The processor circuit may be operably configured to receive a message from the client computer representing a request by the client computer to clear content displayed on a display area of the client computer, and transmit a clear screen message to the client computer, the clear screen message being operable to cause content associated with messages previously transmitted to the client computer to be deleted on the display area of the client computer.</p>
<p id="p-0107" num="0106">The processor circuit may be operably configured to receive a save message from the client computer, the save message representing a request by the user of the client computer to save content displayed on a display area of the client computer, and cause pointer messages in the shared buffer to be saved to persistent storage.</p>
<p id="p-0108" num="0107">The processor circuit may be operably configured to receive an open message from the client computer, the open message representing a request by the user of the client computer to load content previously saved during the multiple-party communication, save pointer messages in the shared buffer to a persistent memory, delete the pointer messages in the shared buffer, transmit a clear screen message to the client computer, the clear screen message being operable to cause content associated with pointer messages previously transmitted to the client computer to be deleted on a display area of the client computer, load a plurality of previously saved pointer messages into the shared buffer from the persistent memory, and transmit the plurality of previously saved pointer messages to the client computer.</p>
<p id="p-0109" num="0108">The processor circuit may be operably configured to receive a page change message from the client computer the page change message representing a request by the user of the client computer to change content displayed on a display area of the client computer, save pointer messages in the shared buffer to a persistent memory, delete the pointer messages in the shared buffer, and transmit a clear screen message to the client computer, the clear screen message being operable to cause content associated with pointer messages previously transmitted to the client computer to be deleted on the display area of the client computer.</p>
<p id="p-0110" num="0109">The processor circuit may be operably configured to load a plurality of previously saved messages into the shared buffer from the persistent memory and to transmit the previously saved messages to the client computer.</p>
<p id="p-0111" num="0110">The processor circuit may be operably configured to determine a message type associated with the pointer message and the processor circuit is operably configured to transmit the previously saved pointer messages by transmitting only pointer messages of a persistent message type to the client computer.</p>
<p id="p-0112" num="0111">The processor circuit may be operably configured to associate a client table with a communication identifier identifying the multiple-party communication.</p>
<p id="p-0113" num="0112">The processor circuit may be operably configured to store an identification of the client computer in the client table.</p>
<p id="p-0114" num="0113">The processor circuit may be operably configured to associate a receive buffer and a transmit buffer with the client identifier, the receive buffer being operably configured to store cursor messages received from the client computer and the transmit buffer being operably configured to store pointer messages to be transmitted to the client computer.</p>
<p id="p-0115" num="0114">The processor circuit may be operably configured to receive a disconnect message from the client computer, the disconnect message representing a request by the user of the client computer to disconnect from the multiple-party communication, and delete the identification of the client computer in the client table.</p>
<p id="p-0116" num="0115">The processor circuit may be operably configured to cause the multiple-party communication to be discontinued when the identification of the client computer is an only client computer in the client table and the disconnect message includes a request by the user of the client computer to discontinue the multiple-party communication after disconnecting the client computer.</p>
<p id="p-0117" num="0116">The processor circuit may be operably configured to cause the multiple-party communication to continue running when at least one of the client computer is not an only client computer in the client table, and the disconnect message does not include a request to discontinue the multiple-party communication after disconnecting the client computer, and the disconnect message includes a request to keep the multiple-party communication running after disconnecting the client computer.</p>
<p id="p-0118" num="0117">The client computer may be a first client computer in a multiple-party communication, and the processor circuit is operably configured to receive a second cursor message at the server, the second cursor message representing a change in a position of a second cursor displayed on a second client computer in the computer network, and transmit a second pointer message to the first and second client computers, the second pointer message representing the change in the position of the second cursor provided by the second cursor message.</p>
<p id="p-0119" num="0118">The processor circuit may be operably configured to associate a time of receipt of the first cursor message at the server with the first cursor message and to associate a time of receipt of the second cursor message at the server with the second cursor message, and the processor circuit is operably configured to transmit the first pointer message and to transmit the second pointer message in a time order corresponding to the time of receipt of each corresponding cursor message.</p>
<p id="p-0120" num="0119">In accordance with another aspect of the invention there is provided a computer readable medium encoded with codes for directing a server processor circuit to support multiple-party communications in a computer network including the server and at least one client computer. The codes direct the server processor circuit to receive a first cursor message at the server from the client computer, the first cursor message representing a change in a position of a first cursor associated with the client computer in response to user input received from a user of the client computer, and transmit a first pointer message to the client computer in response to the first cursor message, the first pointer message representing the change in the position of the first cursor provided by the first cursor message.</p>
<p id="p-0121" num="0120">In accordance with another aspect of the invention there is provided a computer readable signal encoded with codes for directing a server processor circuit to support multiple-party communications in a computer network including the server and at least one client computer. The codes direct the server processor circuit to receive a first cursor message at the server from the client computer, the first cursor message representing a change in a position of a first cursor associated with the client computer in response to user input received from a user of the client computer, and transmit a first pointer message to the client computer in response to the first cursor message, the first pointer message representing the change in the position of the first cursor provided by the first cursor message.</p>
<p id="p-0122" num="0121">In accordance with another aspect of the invention there is provided a system for supporting multiple-party communications on a client computer in communication with a server in a computer network. The system includes a client processor circuit operably configured to transmit a first cursor message to the server to elicit a first pointer message from the server, the first cursor message representing a change in a position of a first cursor associated with the client computer in response to user input received from a user of the client computer. The system also includes a server processor circuit operably configured to receive the first cursor message from the client computer, transmit the first pointer message to the client computer in response to the first cursor message, the first pointer message representing the change in the position of the first cursor provided by the first cursor message. The client processor circuit is operably configured to receive the first pointer message from the server and to cause a corresponding change in a position of a first pointer associated with the first cursor and displayed on a display area of the client computer, in response to the first pointer message.</p>
<p id="p-0123" num="0122">Other aspects and features of the present invention will become apparent to those ordinarily skilled in the art upon review of the following description of specific embodiments of the invention in conjunction with the accompanying figures.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0124" num="0123">In drawings, which illustrate embodiments of the invention;</p>
<p id="p-0125" num="0124"><figref idref="DRAWINGS">FIG. 1</figref> is a schematic view of a system for supporting multiple-party communications in accordance with a first embodiment of the invention;</p>
<p id="p-0126" num="0125"><figref idref="DRAWINGS">FIG. 2</figref> is a schematic view of a processor circuit for implementing a server shown in <figref idref="DRAWINGS">FIG. 1</figref>;</p>
<p id="p-0127" num="0126"><figref idref="DRAWINGS">FIG. 3</figref> is a schematic view of a shared buffer implemented in the server processor circuit shown in <figref idref="DRAWINGS">FIG. 2</figref>;</p>
<p id="p-0128" num="0127"><figref idref="DRAWINGS">FIG. 4</figref> is a screenshot of a web page displayed on a client computer in the system shown in <figref idref="DRAWINGS">FIG. 1</figref>;</p>
<p id="p-0129" num="0128"><figref idref="DRAWINGS">FIG. 5</figref> is a flowchart representing blocks of codes for directing the server processor circuit shown in <figref idref="DRAWINGS">FIG. 2</figref> to execute a &#x201c;create new communication process&#x201d;;</p>
<p id="p-0130" num="0129"><figref idref="DRAWINGS">FIG. 6</figref> is a schematic representation of a communication table entry in a communication table maintained by the sever processor circuit shown in <figref idref="DRAWINGS">FIG. 2</figref>;</p>
<p id="p-0131" num="0130"><figref idref="DRAWINGS">FIG. 7</figref> is a schematic representation of a client table entry in a client table maintained by the sever processor circuit shown in <figref idref="DRAWINGS">FIG. 2</figref>;</p>
<p id="p-0132" num="0131"><figref idref="DRAWINGS">FIG. 8</figref> is a flowchart representing blocks of codes for directing the server processor circuit shown in <figref idref="DRAWINGS">FIG. 2</figref> to execute a &#x201c;list active multiple-party communications&#x201d; process;</p>
<p id="p-0133" num="0132"><figref idref="DRAWINGS">FIG. 9</figref> is a schematic view of a processor circuit for implementing the client computer shown in <figref idref="DRAWINGS">FIG. 1</figref>;</p>
<p id="p-0134" num="0133"><figref idref="DRAWINGS">FIG. 10</figref> is a table listing selected mouse and keyboard events implemented in a Java&#x2122; programming language;</p>
<p id="p-0135" num="0134"><figref idref="DRAWINGS">FIG. 11</figref> is a screenshot of a user interface displayed on the client computers shown in <figref idref="DRAWINGS">FIG. 1</figref>;</p>
<p id="p-0136" num="0135"><figref idref="DRAWINGS">FIG. 12</figref> is a table of message formats used in the system shown in <figref idref="DRAWINGS">FIG. 1</figref>;</p>
<p id="p-0137" num="0136"><figref idref="DRAWINGS">FIG. 13A-13C</figref> are respective portions of a flowchart representing blocks of codes for directing the client computer processor circuit shown in <figref idref="DRAWINGS">FIG. 9</figref> to produce messages for transmission to the server processor circuit shown in <figref idref="DRAWINGS">FIG. 2</figref>;</p>
<p id="p-0138" num="0137"><figref idref="DRAWINGS">FIG. 14</figref> is a flowchart representing blocks of codes for directing the processor circuit shown in <figref idref="DRAWINGS">FIG. 9</figref> to transmit the messages to the server processor circuit shown in <figref idref="DRAWINGS">FIG. 2</figref>;</p>
<p id="p-0139" num="0138"><figref idref="DRAWINGS">FIG. 15A-15B</figref> are respective portions of a flowchart representing blocks of codes for directing the processor circuit shown in <figref idref="DRAWINGS">FIG. 2</figref> to receive messages from the client computer processor circuit shown in <figref idref="DRAWINGS">FIG. 9</figref>;</p>
<p id="p-0140" num="0139"><figref idref="DRAWINGS">FIG. 16</figref> is a flowchart representing blocks of codes for directing the processor circuit shown in <figref idref="DRAWINGS">FIG. 2</figref> to process messages for transmission to respective client computers;</p>
<p id="p-0141" num="0140"><figref idref="DRAWINGS">FIG. 17</figref> is a flowchart representing blocks of codes for directing the processor circuit shown in <figref idref="DRAWINGS">FIG. 2</figref> to transmit messages to the client computers;</p>
<p id="p-0142" num="0141"><figref idref="DRAWINGS">FIG. 18A-18B</figref> are respective portions of a flowchart representing blocks of codes for directing the client computer processor circuit shown in <figref idref="DRAWINGS">FIG. 9</figref> to receive messages from the server processor circuit shown in <figref idref="DRAWINGS">FIG. 2</figref>;</p>
<p id="p-0143" num="0142"><figref idref="DRAWINGS">FIG. 19</figref> is a flowchart representing blocks of codes for directing the processor circuit shown in <figref idref="DRAWINGS">FIG. 2</figref> to transmit a published multiple-party communication page to the client computers;</p>
<p id="p-0144" num="0143"><figref idref="DRAWINGS">FIG. 20</figref> is a flowchart representing blocks of codes for directing the processor circuit shown in <figref idref="DRAWINGS">FIG. 9</figref> to transmit a game message to the server;</p>
<p id="p-0145" num="0144"><figref idref="DRAWINGS">FIG. 21</figref> is a flowchart representing blocks of codes for directing the processor circuit shown in <figref idref="DRAWINGS">FIG. 9</figref> to display game piece images on respective client computers;</p>
<p id="p-0146" num="0145"><figref idref="DRAWINGS">FIG. 22</figref> is a screenshot of an alternate embodiment of a user interface displayed on the client computers shown in <figref idref="DRAWINGS">FIG. 1</figref>;</p>
<p id="p-0147" num="0146"><figref idref="DRAWINGS">FIG. 23</figref> is a flowchart representing blocks of codes for directing the processor circuit shown in <figref idref="DRAWINGS">FIG. 9</figref> to move game piece images on respective display areas of the client computers shown in <figref idref="DRAWINGS">FIG. 1</figref>;</p>
<p id="p-0148" num="0147"><figref idref="DRAWINGS">FIG. 24</figref> is a game piece movement message format used in the system shown in <figref idref="DRAWINGS">FIG. 1</figref>;</p>
<p id="p-0149" num="0148"><figref idref="DRAWINGS">FIG. 25</figref> is a schematic view of a system for supporting multiple-party communications in accordance with a second embodiment of the invention;</p>
<p id="p-0150" num="0149"><figref idref="DRAWINGS">FIG. 26</figref> is a screenshot of a web page transmitted by a server shown in <figref idref="DRAWINGS">FIG. 25</figref>;</p>
<p id="p-0151" num="0150"><figref idref="DRAWINGS">FIG. 27</figref> is a screenshot of another web page transmitted by the server shown in <figref idref="DRAWINGS">FIG. 25</figref>;</p>
<p id="p-0152" num="0151"><figref idref="DRAWINGS">FIG. 28</figref> is a flowchart representing blocks of codes for directing the processor circuit shown in <figref idref="DRAWINGS">FIG. 2</figref> to add a designated client computer to an active multiple-party communication;</p>
<p id="p-0153" num="0152"><figref idref="DRAWINGS">FIG. 29</figref> is a flowchart representing blocks of codes for directing the processor circuit shown in <figref idref="DRAWINGS">FIG. 2</figref> to receive messages from the client computers and the designated client computer shown in <figref idref="DRAWINGS">FIG. 25</figref>;</p>
<p id="p-0154" num="0153"><figref idref="DRAWINGS">FIG. 30</figref> is a screenshot of a web page listing saved multiple-party communications transmitted to the designated client computer by the server shown in <figref idref="DRAWINGS">FIG. 25</figref>;</p>
<p id="p-0155" num="0154"><figref idref="DRAWINGS">FIG. 31</figref> is a flowchart representing blocks of codes for directing the processor circuit shown in <figref idref="DRAWINGS">FIG. 2</figref> to respond to a request by a designated client computer to view saved multiple-party communication content;</p>
<p id="p-0156" num="0155"><figref idref="DRAWINGS">FIG. 32</figref> is a flowchart representing blocks of codes for directing the processor circuit shown in <figref idref="DRAWINGS">FIG. 2</figref> to transmit output messages to client computers and the designated client computer shown in <figref idref="DRAWINGS">FIG. 25</figref>;</p>
<p id="p-0157" num="0156"><figref idref="DRAWINGS">FIG. 33</figref> is a schematic view of a system for supporting multiple-party communications in accordance with a multiple-server embodiment of the invention;</p>
<p id="p-0158" num="0157"><figref idref="DRAWINGS">FIG. 34</figref> is a flowchart representing blocks of codes for directing a processor circuit to create a new multiple-party communication in the multiple-server system shown in <figref idref="DRAWINGS">FIG. 33</figref>; and</p>
<p id="p-0159" num="0158"><figref idref="DRAWINGS">FIG. 35</figref> is a schematic view of a system for supporting multiple-party communications in accordance with another embodiment of the invention.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0005" level="1">DETAILED DESCRIPTION</heading>
<p id="h-0006" num="0000">System Overview</p>
<p id="p-0160" num="0159">Referring to <figref idref="DRAWINGS">FIG. 1</figref>, a system for supporting multiple-party communications in accordance with a first embodiment of the invention is shown generally at <b>10</b>. The system <b>10</b> includes a server <b>12</b> and a plurality of client computers <b>14</b>, <b>16</b>, and <b>18</b>. In this embodiment the client computer <b>14</b> is a conventional desktop computer, the client computer <b>16</b> is a laptop computer, and the client computer <b>18</b> is a handheld computer. Each of the client computers <b>14</b>, <b>16</b>, and <b>18</b> communicates with the server <b>12</b> through a network <b>20</b> such as the internet or an intranet, for example.</p>
<p id="p-0161" num="0160">Each of the client computers <b>14</b>, <b>16</b>, and <b>18</b> has a display <b>15</b>, <b>17</b>, and <b>19</b> respectively for displaying text, characters, and/or graphics on a display area thereof. Each of the client computers <b>14</b>, <b>16</b>, and <b>18</b> also has a pointing device <b>22</b>, <b>24</b>, and <b>26</b> respectively. In this embodiment the pointing device <b>22</b> is a conventional hand-held pointing device such as a computer mouse, the pointing device <b>24</b> is a touchpad, and the pointing device <b>26</b> is a stylus for providing user input on a touch sensitive display <b>19</b>. The pointing devices <b>22</b>, <b>24</b>, and <b>26</b> generally produce user input signals for moving a cursor on the respective displays <b>15</b>, <b>17</b>, or <b>19</b>, and may additionally provide actuator buttons for producing actuator button signals for performing various other user input functions.</p>
<p id="p-0162" num="0161">In addition, each of the client computers <b>14</b>, <b>16</b>, and <b>18</b> has a character input device shown generally at <b>28</b>, <b>30</b>, and <b>32</b> respectively for receiving user input signals representing characters and for controlling certain operations of the client computer. The character input devices <b>28</b> and <b>30</b> are both conventional keyboard input devices. The character input device <b>32</b> may include areas on the touch sensitive display <b>19</b> that are mapped to characters, or may alternatively include a handwriting recognition engine for converting the user's handwriting motions of the pointing device <b>26</b> on the touch sensitive display <b>19</b> into character representations.</p>
<p id="p-0163" num="0162">Thus, both the pointing devices <b>22</b>, <b>24</b>, and <b>26</b> and the character input devices <b>28</b>, <b>30</b> and <b>32</b> are operable to produce user input signals that facilitate user input to the respective client computers <b>14</b>, <b>16</b>, and <b>18</b>. Certain user input signals, whether received through the respective pointing device <b>22</b>, <b>24</b>, or <b>26</b>, or through the respective character input device <b>28</b>, <b>30</b>, or <b>32</b>, are formatted into messages by the client computers <b>14</b>, <b>16</b>, or <b>18</b>, and are transmitted through the network <b>20</b> to the server <b>12</b>.</p>
<p id="p-0164" num="0163">In general the server <b>12</b> is configured to receive an input message representing user input received at one of the client computers <b>14</b>, <b>16</b>, or <b>18</b> and determine a message type associated with the input message. The server <b>12</b> then produces an output message representing the user input provided by the input message. The output message is transmitted to each of the client computer <b>14</b>, <b>16</b>, and <b>18</b> when the input message is associated with a persistent message type. When the input message is associated with a non-persistent message type, the output message is only transmitted to those of the client computers <b>14</b>, <b>16</b>, and <b>18</b> that meet a criterion.</p>
<p id="p-0165" num="0164">Messages of the persistent type generally produce persistent changes to content on the display area, while messages of the non-persistent type do not result in persistent changes to the display area.</p>
<p id="p-0166" num="0165">Thus, for example, movements of the pointing device <b>22</b> are represented by non-persistent messages that are produced by the client computer <b>14</b> and transmitted to the server <b>12</b>. The server <b>12</b> then produces and transmits an output message back to those of the client computers <b>14</b>, <b>16</b>, and <b>18</b>, to which all previously received messages of the persistent message type have already been transmitted.</p>
<p id="p-0167" num="0166">A feature of the system <b>10</b> is that while user input, such as movements of the pointing device <b>22</b> at the client computer <b>14</b>, for example, are reflected almost immediately on the display <b>15</b> as a corresponding change in position of the cursor, the client computer also transmits a cursor message to the server to elicit a pointer message from the server. The cursor message represents a change in a position of the cursor in response to the user input received from the user of the client computer. The client computer <b>14</b> receives the pointer message from the server and causes a corresponding change in a position of a pointer associated with the cursor and displayed on the display <b>15</b> in response to the message, which represents the change in position of the cursor.</p>
<p id="p-0168" num="0167">It will be appreciated that there is a latency that occurs due to the round-trip time required for a cursor message transmitted by one of the client computers <b>14</b>, <b>16</b>, or <b>18</b> to reach the server <b>12</b>, to be retransmitted by the server, and to be received back from the server at the client computers. Accordingly, the user producing the pointing device movement will see a time lag between the position of their cursor on their display and the position of the pointer associated with the pointer message received back from the server <b>12</b>.</p>
<p id="p-0169" num="0168">Similarly, each of the client computers <b>16</b>, and <b>18</b> also receive the pointer message representing the change in position of the cursor of the client computer <b>14</b>, and cause a corresponding change in a position of a pointer associated with the client computer <b>14</b>, which is displayed on the respective display areas <b>17</b> and <b>18</b> of the client computers in response to the pointer message.</p>
<p id="p-0170" num="0169">Advantageously, users are able to view their own real time cursor and their own and other user's pointers on their respective displays. Each user is thus made aware of other user's actions, thus providing a feeling of a real multiple-party presence in the multiple-party communication. Furthermore, the system <b>10</b> facilitates simultaneous user input from all client computers, which is in contrast to some prior art systems that only permit user input from a single designated presenter.</p>
<p id="p-0171" num="0170">In this application the word &#x201c;cursor&#x201d; is used to refer to the client computer cursor on the respective displays <b>15</b>, <b>17</b>, and <b>19</b>. The word &#x201c;pointer&#x201d; is used to refer to a secondary pointer, which is also displayed on the respective displays <b>15</b>, <b>17</b>, and <b>19</b> of the respective client computers <b>14</b>, <b>16</b>, or <b>18</b>.</p>
<p id="p-0172" num="0171">In one embodiment the system <b>10</b> further facilitates public access to published content created during a multiple-party communication and the system <b>10</b> may further include a public access computer <b>40</b> in communication with the server <b>12</b> through the network <b>20</b>. Publication of multiple-party communication content is described later herein.</p>
<p id="h-0007" num="0000">Processor Circuit-Server</p>
<p id="p-0173" num="0172">Referring to <figref idref="DRAWINGS">FIG. 2</figref>, a processor circuit for implementing the server <b>12</b> is shown generally at <b>50</b>. In this embodiment, the server processor circuit <b>50</b> includes a microprocessor <b>52</b>, a program memory <b>54</b>, a random access memory (RAM) <b>56</b>, a persistent memory such as a hard drive <b>58</b>, a media reader <b>59</b>, and an input output port (I/O) <b>60</b>, all of which are in communication with the microprocessor.</p>
<p id="p-0174" num="0173">The I/O port <b>60</b> includes a network interface <b>62</b>, such as a network interface card having an input/output <b>64</b> for connection to the network <b>20</b>, and through which communications are conducted with the client computers <b>14</b>, <b>16</b>, and <b>18</b>, as shown in <figref idref="DRAWINGS">FIG. 1</figref>.</p>
<p id="p-0175" num="0174">Program codes for directing the microprocessor <b>52</b> to effect server functions of the system <b>10</b> are stored in the program memory <b>54</b>, which may be implemented as a random access memory (RAM), and/or a hard disk drive (HDD), or a combination thereof.</p>
<p id="p-0176" num="0175">The program memory <b>54</b> includes a block of codes <b>70</b> for directing the processor circuit <b>50</b> to effect communication manager functions, a block of codes <b>72</b> for directing the processor circuit to effect client manager functions, a block of codes <b>74</b> for directing the processor circuit to effect page management functions, a block of codes <b>75</b> for directing the processor circuit to effect web server functions, and a block of codes <b>78</b> for directing the processor circuit to effect game criteria functions. The program memory <b>54</b> may also optionally include a block of codes <b>76</b> for directing the processor circuit <b>50</b> to effect media relay functions, as will be described later herein.</p>
<p id="p-0177" num="0176">The hard drive <b>58</b> includes a plurality of stores including a client saved content store <b>100</b> for storing content displayed during an ongoing communication. The hard drive <b>58</b> also includes a user interface store <b>101</b> for storing program codes operable to cause a user interface to be displayed on the client computers <b>14</b>, <b>16</b>, and <b>18</b>, when downloaded by the client computers.</p>
<p id="p-0178" num="0177">The hard drive <b>58</b> further includes a web page store <b>102</b> for storing data representing one or more web pages to be displayed on the client computers <b>14</b>, <b>16</b>, or <b>18</b> during the multiple-party communication. The data stored in the web page store <b>102</b> may include Hypertext Markup Language (HTML) data, for example.</p>
<p id="p-0179" num="0178">The hard drive <b>58</b> further includes a communication page store <b>104</b> for saving pages of content created during multiple-party communications, an upload data store <b>106</b> for storing image data and/or other data uploaded by the client computers <b>14</b>, <b>16</b>, and <b>18</b> to the server <b>12</b>, a published communication store <b>108</b> for storing published multiple-party communication content, and a game data store <b>109</b> for storing data associated with a game being played between client computers during the communication.</p>
<p id="p-0180" num="0179">In other embodiments the hard drive <b>58</b> may be substituted by another form of persistent memory, such as a flash memory, for example.</p>
<p id="p-0181" num="0180">The media reader <b>59</b> facilitates loading program codes into the program memory <b>54</b> from a computer readable medium <b>110</b> such as a CD ROM disk <b>112</b>. Alternatively the program codes may be provided by a computer readable signal <b>114</b>, which may be received over a network such as the internet, for example.</p>
<p id="p-0182" num="0181">The RAM <b>56</b> includes a plurality of storage blocks including a communication table storage block <b>80</b> for storing a communication table holding information associated with active multiple-party communications being hosted by the server <b>12</b>.</p>
<p id="p-0183" num="0182">The RAM <b>56</b> also includes a storage block for each active multiple-party communication in the communication table <b>80</b>. In this embodiment the processor circuit <b>50</b> is hosting three active multiple-party communications and accordingly three such storage blocks <b>82</b>, <b>84</b>, and <b>86</b> are shown.</p>
<p id="p-0184" num="0183">Each storage block <b>82</b>, <b>84</b>, and <b>86</b> includes a shared memory buffer <b>88</b> for storing messages received from each of the client computers <b>14</b>, <b>16</b> and <b>18</b>. Each storage block <b>82</b>, <b>84</b>, and <b>86</b> further includes a client table storage block <b>90</b> for storing a client table holding identifications of respective client computers participating in each corresponding multiple-party communication.</p>
<p id="p-0185" num="0184">Each storage block <b>82</b>, <b>84</b>, and <b>86</b> also includes a plurality of server side receive (Rx) buffers <b>92</b> and a plurality of server side transmit (Tx) buffers <b>94</b>, including one Rx buffer and one Tx buffer for each client included in the client table <b>90</b>.</p>
<p id="p-0186" num="0185">In general, each storage block and/or buffer in the RAM <b>56</b> may include a plurality of storage locations implemented in random access memory, for example.</p>
<p id="h-0008" num="0000">Shared Memory Buffer</p>
<p id="p-0187" num="0186">The shared memory buffer <b>88</b> is shown in greater detail in <figref idref="DRAWINGS">FIG. 3</figref>. Referring to <figref idref="DRAWINGS">FIG. 3</figref>, the shared buffer <b>88</b> includes a plurality of message stores <b>120</b> each being of sufficient size to hold one message, which in this embodiment are 30 bytes long. Each message store <b>120</b> (which are labeled as <b>1</b>, <b>2</b>, . . . n in <figref idref="DRAWINGS">FIG. 3</figref>) has an associated memory address. A &#x201c;StartPointer&#x201d; <b>122</b> is used to point to one of the message stores <b>120</b> to which a first message was written. A &#x201c;CurrentPointer&#x201d; <b>124</b> is used to point to one of the message stores <b>120</b> to which a last message was written. A plurality of client &#x201c;SentPointer&#x201d;s <b>126</b> are used to point to one of the message stores <b>120</b>, whose contents were last transmitted to the respective client computer. Each of the client computers <b>14</b>, <b>16</b>, or <b>18</b> thus has a corresponding &#x201c;SentPointer&#x201d; <b>126</b>.</p>
<p id="p-0188" num="0187">In general, the data pointers <b>122</b> and <b>124</b> are variables stored in the communication table <b>80</b> and having respective values that reference (or &#x201c;point&#x201d; to) a memory address of one of the message stores <b>120</b>. Similarly the client &#x201c;SentPointer&#x201d;s <b>126</b> are variables stored in an associated client table <b>90</b>, having respective values that reference a memory address of one of the message stores <b>120</b>.</p>
<p id="p-0189" num="0188">In some embodiments the shared buffer <b>88</b> may be implemented as a circular buffer, in which case after a message has been written to the &#x201c;n<sup>th</sup>&#x201d; message store <b>120</b>, the &#x201c;CurrentPointer&#x201d; <b>124</b> wraps around and is reset to point to the &#x201c;1<sup>st</sup>&#x201d; data store, and newly received messages will overwrite older messages in the shared buffer.</p>
<p id="p-0190" num="0189">Each multiple party communication hosted by the server <b>12</b> has a single associated shared buffer <b>88</b>. The shared buffer <b>88</b> is generally operable to store messages received from the client computers <b>14</b>, <b>16</b>, and <b>18</b> that have joined a multiple party communication. The shared buffer <b>88</b> further acts as a memory buffer for storing output messages to be transmitted to the client computers <b>14</b>, <b>16</b>, and <b>18</b>. Advantageously, in this embodiment, output messages are produced by copying the input messages into the shared buffer <b>88</b>, and accordingly only a single shared buffer <b>88</b> is used for each communication. In other embodiments output messages may have different formats and/or payload data to the input messages and in such embodiments an input shared buffer may be used to hold input messages, and output messages may be produced by reading the payload of the input messages and generating a corresponding output message, which may be stored in an output shared buffer.</p>
<p id="h-0009" num="0000">Web Page</p>
<p id="p-0191" num="0190">Referring to <figref idref="DRAWINGS">FIG. 4</figref>, a screenshot of a web page displayed on the client computers <b>14</b>, <b>16</b>, or <b>18</b> when the client computers first connect to the server <b>12</b> is shown generally at <b>130</b>. In general the client computers <b>14</b>, <b>16</b>, or <b>18</b> connect to the server <b>12</b> by directing a hypertext transfer protocol (HTTP) request for the web page <b>130</b> to the network interface <b>62</b> of the server processor circuit <b>50</b>. The HTTP request from the client computer <b>14</b>, <b>16</b>, or <b>18</b> may be generated by a web browser application running on the client computer, for example.</p>
<p id="p-0192" num="0191">When the HTTP request for the web page <b>130</b> is received at the network interface <b>62</b>, the web server program codes <b>75</b> direct the server microprocessor <b>52</b> to read data representing the web page <b>130</b> from the store <b>102</b> on the hard drive <b>58</b>, and to transmit the data through the network <b>20</b> to the client computer. The data representing the web page <b>130</b> may be communicated in one or more HTTP messages transmitted using a network transport protocol such as transmission control protocol over internet protocol (TCP/IP), for example.</p>
<p id="p-0193" num="0192">When the HTTP data is received by the client computer <b>14</b>, <b>16</b>, or <b>18</b>, the web browser application causes the web page <b>130</b> to be displayed in a browser window on a respective display <b>15</b>, <b>17</b>, or <b>19</b> of the client computers.</p>
<p id="p-0194" num="0193">The web page <b>130</b> includes a &#x201c;create new communication&#x201d; button <b>132</b> and a &#x201c;CommunicationName&#x201d; field <b>134</b> for the user to enter a communication name. The web page <b>130</b> further includes a &#x201c;CommunicationPassword&#x201d; field <b>136</b> for optionally assigning a password when creating a new communication, such that access to the communication may be limited to users who are in possession of the password. The web page <b>130</b> further includes a &#x201c;list active communications&#x201d; button <b>138</b>.</p>
<p id="p-0195" num="0194">When a user of one of the client computers <b>14</b>, <b>16</b>, or <b>18</b> (an originating client) enters a communication name in the &#x201c;CommunicationName&#x201d; field <b>134</b> and clicks on the &#x201c;create new communication&#x201d; button <b>132</b>, the client computer transmits a signal to the network interface <b>62</b> of the server processor circuit <b>50</b> to request creation a new communication. For example, the transmitted signal may include an HTTP request message including the communication name and password (if provided).</p>
<p id="h-0010" num="0000">Create New Communication Process</p>
<p id="p-0196" num="0195">Referring to <figref idref="DRAWINGS">FIG. 5</figref>, a flowchart of blocks of code for directing the processor circuit <b>50</b> (shown in <figref idref="DRAWINGS">FIG. 2</figref>) to create a new multiple-party communication is shown generally at <b>150</b>. The blocks generally represent codes read from the program memory <b>54</b>, for directing the microprocessor <b>52</b> to perform various communication manager, client manager, and page manager functions related to creating a new communication. The actual code to implement each block may be written in any suitable programming language, such as Flash&#x2122;, Java, Delphi&#xae;, C, and/or C++, for example.</p>
<p id="p-0197" num="0196">In general, the communication manager program codes <b>70</b> direct the microprocessor <b>52</b> to provide communication manager functions for creating the new multiple-party communication, and further direct the microprocessor <b>52</b> to cause the page manager program codes <b>74</b> and the client manager program codes to be launched in the process of creating the new communication.</p>
<p id="p-0198" num="0197">The process <b>150</b> begins at <b>152</b> when a signal, such as an HTTP request message, is received from one of the client computers <b>14</b>, <b>16</b>, or <b>18</b> at the network interface <b>62</b>, requesting that a new multiple-party communication be created.</p>
<p id="p-0199" num="0198">Block <b>154</b> then directs the microprocessor <b>52</b> to read the communication name provided and the password (if provided) in the HTTP request message received from the client computer. Block <b>154</b> further directs the microprocessor <b>52</b> to add a new communication entry to the communication table <b>80</b> in the RAM <b>56</b>.</p>
<p id="h-0011" num="0000">Communication Table Entry</p>
<p id="p-0200" num="0199">The communication table entry is shown in greater detail in <figref idref="DRAWINGS">FIG. 6</figref> at <b>180</b>. Referring to <figref idref="DRAWINGS">FIG. 6</figref>, the communication table entry <b>180</b> includes a plurality of fields identifying the communication, which are populated when block <b>154</b> (shown in <figref idref="DRAWINGS">FIG. 5</figref>) directs the microprocessor <b>52</b> to add the new communication entry to the communication table <b>80</b> stored in the RAM <b>56</b>.</p>
<p id="p-0201" num="0200">The communication table entry <b>180</b> includes a communication identifier (&#x201c;CID&#x201d;) field <b>182</b>, which is populated with a unique communication identifier number assigned to the new multiple-party communication.</p>
<p id="p-0202" num="0201">The communication table entry <b>180</b> also includes a &#x201c;CommunicationName&#x201d; field <b>184</b>, which is populated with the communication name assigned by the originating client in the &#x201c;CommunicationName&#x201d; field <b>134</b> on the web page <b>130</b> (shown in <figref idref="DRAWINGS">FIG. 4</figref>). The entry <b>180</b> also includes a &#x201c;CommunicationPassword&#x201d; field <b>186</b>, which is optionally assigned by the originating client in the &#x201c;CommunicationPassword&#x201d; field <b>136</b> on the web page <b>130</b>. If no communication password is assigned by the originating client, the &#x201c;CommunicationPassword&#x201d; field <b>186</b> on the communication table entry <b>180</b> is left empty.</p>
<p id="p-0203" num="0202">The communication table entry <b>180</b> further includes a &#x201c;KeepRunningIdleFlag&#x201d; field <b>188</b> for storing a flag indicating whether the communication should be kept running after the last client has disconnected from the server <b>12</b>.</p>
<p id="p-0204" num="0203">The communication table entry <b>180</b> also includes a &#x201c;StartPointer&#x201d; field <b>190</b> and a &#x201c;CurrentPointer&#x201d; field <b>192</b>, for storing address values of the &#x201c;StartPointer&#x201d; <b>122</b> and the &#x201c;CurrentPointer&#x201d; <b>124</b> respectively, as shown in <figref idref="DRAWINGS">FIG. 3</figref>.</p>
<p id="p-0205" num="0204">The communication table entry <b>180</b> further includes a list of pages field <b>194</b> for storing a listing of the pages created during the communication. The entry <b>180</b> also includes a current page field <b>196</b> for storing a value identifying a currently loaded page in the communication.</p>
<p id="p-0206" num="0205">The communication table entry <b>180</b> may also have an associated &#x201c;HiddenFlag&#x201d; field <b>198</b> for storing a flag value indicating whether the communication should be hidden. As described later herein, certain multiple-party communications may be created to allow the public access computer <b>40</b> (shown in <figref idref="DRAWINGS">FIG. 1</figref>) to access published communication content or to permit lawful intercept authorities to intercept communication content. Advantageously, the client computers <b>14</b>, <b>16</b> and <b>18</b> are not made aware of the existence of communications for which the hidden flag is set to active.</p>
<p id="p-0207" num="0206">Referring back to <figref idref="DRAWINGS">FIG. 5</figref> the process continues at block <b>156</b>, which directs the microprocessor <b>52</b> to create a new shared buffer <b>88</b> and associated the shared buffer with the CID of the multiple-party communication. Block <b>156</b> further directs the microprocessor <b>52</b> to initialize the &#x201c;StartPointer&#x201d; <b>122</b> and the &#x201c;CurrentPointer&#x201d; to refer to a first store <b>120</b> in the shared buffer <b>88</b> and to instantiate a page manager for the multiple-party communication by initiating execution of the page manager program codes <b>74</b>.</p>
<p id="p-0208" num="0207">Block <b>158</b> then directs the microprocessor <b>52</b> to instantiate a new client manager for the multiple-party communication by launching the client manager program codes in the store <b>72</b>.</p>
<p id="p-0209" num="0208">In this embodiment the communication manager instantiates a separate client manager for each communication included in the communication table <b>80</b>. The communication manager continues running in parallel with the page manager and the client manager, such that the processor circuit <b>50</b> is able continue to provide communication manager functions and/or create other new multiple-party communications.</p>
<p id="p-0210" num="0209">The remaining blocks of the process <b>150</b> directs the microprocessor <b>52</b> to perform various client manager functions associated with the newly created multiple-party communication. The process continues at block <b>160</b>, which directs the microprocessor <b>52</b> to generate a new client table <b>90</b> in the RAM <b>56</b>, and to add an identification entry to the client table identifying the originating client computer.</p>
<p id="h-0012" num="0000">Client Table Entry</p>
<p id="p-0211" num="0210">The client table entry is shown in greater detail in <figref idref="DRAWINGS">FIG. 7</figref> at <b>200</b>. Referring to <figref idref="DRAWINGS">FIG. 7</figref>, the client table entry includes a plurality of fields identifying the associated client computer, which are populated when block <b>160</b> (shown in <figref idref="DRAWINGS">FIG. 5</figref>) directs the microprocessor <b>52</b> to add the originating client entry to the client table <b>90</b> stored in the RAM <b>56</b>.</p>
<p id="p-0212" num="0211">The client table entry <b>200</b> includes a client computer identifier field (&#x201c;UID&#x201d;) <b>202</b>, which is populated with a unique client computer identifier number (&#x201c;UID&#x201d;) assigned to the client computer.</p>
<p id="p-0213" num="0212">The client table entry <b>200</b> further includes a client IP address field <b>204</b>, and a client port field <b>206</b>, which are populated with values obtained from the header of an internet protocol data packet received from the client computer at the server network interface <b>62</b>.</p>
<p id="p-0214" num="0213">The client table entry <b>200</b> further includes a &#x201c;CatchUpFlag&#x201d; field <b>208</b>, which when set, indicates that the client computer needs to &#x201c;catch up&#x201d; with previous data shared during the multiple-party communication. When an originating client computer creates a new multiple-party communication, the &#x201c;CatchUpFlag&#x201d; <b>208</b> in the client table entry <b>200</b> for the client computer is set to not active, as described later herein.</p>
<p id="p-0215" num="0214">The client table entry <b>200</b> also includes a &#x201c;SentPointer&#x201d; <b>210</b>, which holds an address of one of the message stores <b>120</b> in the shared buffer <b>88</b>, corresponding to a message that was last transmitted to the corresponding client computer. The client &#x201c;SentPointer&#x201d; field <b>210</b> is initially set to &#x201c;nil&#x201d; and is subsequently set equal to the &#x201c;StartPointer&#x201d; <b>122</b> once a first message is transmitted to the client computer by the server <b>12</b>.</p>
<p id="p-0216" num="0215">Finally the client table entry <b>200</b> may also have an associated &#x201c;SilentFlag&#x201d; <b>212</b> for holding a flag value, which when set to active, indicates that the user of the client computer corresponding to the client &#x201c;UID&#x201d; is an intercept authority. Designated intercept client computers are treated differently by the server than the client computers <b>14</b>, <b>16</b> and <b>18</b>, as described later herein.</p>
<p id="p-0217" num="0216">Referring back to <figref idref="DRAWINGS">FIG. 5</figref> the process <b>150</b> continues at block <b>162</b>, which directs the microprocessor <b>52</b> to create a server side Rx buffer <b>92</b> and a server side Tx buffer <b>94</b> in the RAM <b>56</b> for the originating client. The server side Rx buffer <b>92</b> is used to temporarily store messages received from the client computer and the server side Tx buffer <b>94</b> is used to temporarily store messages to be transmitted to the client computer. Creating the server side Rx buffer <b>92</b> and the server side Tx buffer <b>94</b> may involve opening a network socket for communications between each one of the client computers <b>14</b>, <b>16</b>, and <b>18</b> and the server, for example. A network socket is a software function provided by most operating systems that facilitates communications over a computer network. Network socket functions generally allocate Rx and Tx buffers which may be used as the Rx and Tx buffers <b>92</b> and <b>94</b>.</p>
<p id="p-0218" num="0217">Block <b>164</b> then directs the microprocessor <b>52</b> to read the user interface codes from the user interface store <b>101</b> of the server hard drive <b>58</b> and to cause the network interface <b>62</b> of the I/O PORT <b>60</b> to transmit the user interface codes through the network <b>20</b> to client computer that originated the communication.</p>
<p id="h-0013" num="0000">Join Active Communication Process</p>
<p id="p-0219" num="0218">Referring back to <figref idref="DRAWINGS">FIG. 4</figref>, when a user of one of the client computers <b>14</b>, <b>16</b>, or <b>18</b> clicks on the &#x201c;list active communications&#x201d; button <b>138</b> an HTTP request message is transmitted to the network interface <b>62</b> of the server processor circuit <b>50</b> requesting a listing of active multiple-party communications currently being hosted by the server <b>12</b>.</p>
<p id="p-0220" num="0219">Referring to <figref idref="DRAWINGS">FIG. 8</figref>, a flowchart of blocks of code for directing the processor circuit <b>50</b> (shown in <figref idref="DRAWINGS">FIG. 2</figref>) to transmit a listing of active multiple-party communications to the client computer is shown generally at <b>230</b>. The process begins at <b>232</b> when the HTTP message requesting an identification of active multiple-party communications is received at the network interface <b>62</b>.</p>
<p id="p-0221" num="0220">Block <b>234</b> directs the microprocessor <b>52</b> to read the communication table entries <b>180</b> and the corresponding client table entries <b>200</b> (shown in <figref idref="DRAWINGS">FIGS. 6 and 7</figref> respectively) in the communication table <b>80</b> and corresponding client table <b>90</b> stored in the RAM <b>56</b>. Block <b>235</b> then directs the microprocessor <b>52</b> to transmit data to client computer identifying active communications being hosted by the server. The process <b>230</b> then ends at <b>236</b>.</p>
<p id="p-0222" num="0221">Referring back to <figref idref="DRAWINGS">FIG. 4</figref>, the client computer receives the data from the server <b>12</b> and displays a table identifying active multiple-party communications shown generally at <b>140</b>.</p>
<p id="p-0223" num="0222">The table <b>140</b> includes a first column <b>142</b> listing a sequence number assigned to the multiple-party communication (i.e. 1, 2, 3 . . . for example). The table <b>140</b> also includes a second column <b>144</b> listing the communication name from the &#x201c;CommunicationName&#x201d; field <b>184</b>, and a third column <b>146</b> listing a communication type. The communication type is set to &#x201c;free&#x201d; when no password has been assigned by the originating user for the multiple-party communication, and to &#x201c;password&#x201d; when a password is required to join the multiple-party communication. The table <b>140</b> also includes a fourth column <b>148</b>, listing a number of client computer users involved in each respective multiple-party communication.</p>
<p id="p-0224" num="0223">In this embodiment, the table <b>140</b> is only displayed after the user activates the &#x201c;list active communications&#x201d; button <b>138</b>, but in other embodiments the &#x201c;list active communications&#x201d; button <b>138</b> may be omitted and the table <b>140</b> may be displayed when the web page <b>130</b> is loaded from the server <b>12</b> by the client computer <b>14</b>, <b>16</b>, or <b>18</b>.</p>
<p id="p-0225" num="0224">In general, fields in at least one of the columns in the table <b>140</b> have associated hyperlink properties, which facilitate selection of a particular multiple-party communication by clicking on a hyperlink associated with the multiple-party communication. For example, in the embodiment shown in <figref idref="DRAWINGS">FIG. 4</figref>, the communication names listed in bold font in column <b>144</b> may include such hyperlink properties.</p>
<p id="p-0226" num="0225">When the user of one of the client computers <b>14</b>, <b>16</b>, or <b>18</b> clicks on one of the hyperlinked communication names in column <b>144</b>, the web browser application program codes <b>281</b> (shown in <figref idref="DRAWINGS">FIG. 9</figref>) direct the microprocessor <b>262</b> to transmit an HTTP message to the server <b>12</b>. The HTTP message includes an identifier identifying the multiple-party communication, such as the communication name and/or the communication identifier &#x201c;CID&#x201d; for the multiple-party communication.</p>
<p id="p-0227" num="0226">Still referring to <figref idref="DRAWINGS">FIG. 8</figref>, a flowchart of blocks of code for directing the processor circuit <b>50</b> to add the client computer to an active communication is shown generally at <b>237</b>. The process begins at <b>238</b> when the server processor circuit <b>50</b> receives an HTTP request message identifying an active communication that the user of the client computer wishes to join.</p>
<p id="p-0228" num="0227">Block <b>239</b> directs the microprocessor <b>52</b> to read the information in the HTTP message received from the client computer and to match the information to a multiple-party communication in the communication table <b>80</b>. For example, if the HTTP message includes a communication identifier, the &#x201c;CID&#x201d; is read from the HTTP message and compared with the values in the &#x201c;CID&#x201d; field <b>182</b> in the communication table entries <b>180</b> find the corresponding multiple-party communication. Alternatively, if the HTTP message includes a communication name, the communication name is compared with the values in the &#x201c;CommunicationName&#x201d; field <b>184</b> in the communication table entry <b>180</b> to find the corresponding multiple-party communication.</p>
<p id="p-0229" num="0228">Block <b>239</b> also directs the microprocessor <b>52</b> to instantiate a client manager for the client computer. In general, a separate thread of the client manager is instantiated and associated with each client computer in the communication and each client manager thread is associated with the communication.</p>
<p id="p-0230" num="0229">Referring back to <figref idref="DRAWINGS">FIG. 8</figref>, the remaining blocks <b>240</b> to <b>244</b> in the process <b>230</b> direct the server processor circuit <b>50</b> to perform client manager functions.</p>
<p id="p-0231" num="0230">Block <b>240</b> then directs the microprocessor <b>52</b> to add a new client table entry <b>200</b> identifying the client computer to the corresponding client table <b>90</b> for the selected multiple-party communication. Block <b>240</b> also directs the microprocessor <b>52</b> to populate the fields in the new client table entry, and to set the &#x201c;CatchUpFlag&#x201d; <b>208</b> in the client table entry <b>200</b> to active and to set the client &#x201c;SentPointer&#x201d; field <b>210</b> to &#x201c;nil&#x201d;.</p>
<p id="p-0232" num="0231">When a client computer user joins an already active multiple-party communication, the &#x201c;CatchUpFlag&#x201d; <b>208</b> is set to active to cause messages in the multiple-party communication that the client computer user may have missed by joining the multiple-party communication late to be transmitted to the client computer. The client &#x201c;SentPointer&#x201d; field <b>210</b> is set equal to the &#x201c;StartPointer&#x201d; <b>122</b> once the first message is transmitted to the client computer.</p>
<p id="p-0233" num="0232">Block <b>242</b> then directs the microprocessor <b>52</b> create server side Rx and Tx buffers <b>92</b> and <b>94</b> for the client. Advantageously each client computer <b>14</b>, <b>16</b>, and <b>18</b> has corresponding server side Rx and Tx buffers, which facilitate transmitting multiple-party communication data that may already have been transmitted to other client computers to client computer users who join a multiple-party communication after the multiple-party communication has started (i.e. all clients other than the originating client for the multiple-party communication).</p>
<p id="p-0234" num="0233">Block <b>244</b> then directs the microprocessor <b>52</b> to read the user interface codes from the user interface store <b>101</b> and to cause the network interface <b>62</b> of the I/O PORT <b>60</b> to transmit the user interface codes through the network <b>20</b> to the client computer.</p>
<p id="h-0014" num="0000">Processor Circuit&#x2014;Client Computer</p>
<p id="p-0235" num="0234">Referring to <figref idref="DRAWINGS">FIG. 9</figref>, a processor circuit of the client computers <b>14</b>, <b>16</b>, and/or <b>18</b> is shown generally at <b>260</b>. In this embodiment, the client processor circuit <b>260</b> includes a microprocessor <b>262</b>, a program memory <b>264</b>, a random access memory (RAM) <b>266</b>, a media reader <b>268</b>, and an input/output port (I/O) <b>270</b>, all of which are in communication with the microprocessor <b>262</b>.</p>
<p id="p-0236" num="0235">The I/O port <b>270</b> includes an interface <b>272</b>, such as a network interface card having an input/output <b>274</b> in communication with the network <b>20</b>. The interface <b>272</b> facilitates transmitting messages to the server <b>12</b> and receiving messages from the server, as shown in <figref idref="DRAWINGS">FIG. 1</figref>. Alternatively the interface <b>272</b> may include a wireless interface for connecting to a wireless network access point <b>276</b>, which facilitates connection to the network <b>20</b>.</p>
<p id="p-0237" num="0236">The I/O port <b>270</b> further includes an input <b>278</b> for receiving user input signals from a character input device (such as the character input device <b>28</b> shown in <figref idref="DRAWINGS">FIG. 1</figref>), and from a pointing device (such as the pointing device <b>22</b> shown in <figref idref="DRAWINGS">FIG. 1</figref>).</p>
<p id="p-0238" num="0237">The I/O port <b>270</b> further includes an output <b>279</b> for producing display signals for causing a client computer display (such as the display <b>15</b> shown in <figref idref="DRAWINGS">FIG. 1</figref>) to display images, characters, and cursors, for example.</p>
<p id="p-0239" num="0238">Program codes for directing the microprocessor <b>262</b> to effect client functions of the system <b>10</b>, shown in <figref idref="DRAWINGS">FIG. 1</figref>, are stored in the program memory <b>264</b>, which may be implemented as a random access memory (RAM), and/or a hard disk drive (HDD), or a combination thereof. The program memory <b>264</b> includes a block of codes <b>280</b> for directing the processor circuit to effect operating system (O/S) functions, and a block of codes <b>281</b> for directing the processor circuit to provide web browsing functions.</p>
<p id="p-0240" num="0239">The program memory <b>264</b> also includes a block of codes <b>282</b> for directing the processor circuit <b>260</b> to effect various user interface functions. The block of codes <b>282</b> includes a first block of codes <b>284</b> for directing the processor circuit <b>260</b> to effect a message receiver function, a second block of codes <b>286</b> for directing the processor circuit to effect a message sender function, a third block of codes <b>288</b> for directing the processor circuit to effect interrupt handler functions, and a fourth block of codes <b>289</b> for directing the processor circuit <b>260</b> to effect display functions.</p>
<p id="p-0241" num="0240">In one embodiment the user interface program codes <b>282</b> are received at the interface <b>272</b> in one or more HTTP messages from the server <b>12</b>. The program codes are then extracted from the HTTP message payload and loaded into the program memory <b>264</b>.</p>
<p id="p-0242" num="0241">Alternatively, the media reader <b>268</b> may be used to load user interface program codes from a computer readable medium <b>300</b> into the program memory <b>264</b>. The computer readable medium <b>300</b> may be a CD ROM disk <b>302</b>. Alternatively the program codes may be provided by a computer readable signal <b>304</b>, which may be received over a network such as the internet, for example.</p>
<p id="p-0243" num="0242">The RAM <b>266</b> includes a plurality of storage blocks including a client side receive (Rx) buffer <b>290</b> for temporarily storing messages received from the server <b>12</b> and a client side transmit (Tx) buffer <b>292</b> for temporarily storing messages to be transmitted back to the server <b>12</b>. In general, the buffers <b>290</b> and <b>292</b> include a plurality of storage locations in the RAM <b>266</b> and may be implemented by opening a network socket using operating system functions provided by the operating system <b>280</b>.</p>
<p id="p-0244" num="0243">The RAM <b>266</b> also includes a character entry position store <b>294</b> for storing coordinates of a character entry position, a pointer table store <b>295</b> for storing a table of pointers, and a hyperlink and filename/URL store <b>296</b> for storing coordinates and filenames or internet addresses associated with one or more hyperlinks.</p>
<p id="p-0245" num="0244">The RAM <b>266</b> further includes a game piece image store <b>298</b> for storing information associated with a game that may be played during the multiple-party communication. The RAM <b>266</b> also includes a game piece coordinate <b>299</b> store for storing variables representing coordinates of the game piece images.</p>
<p id="p-0246" num="0245">The processor circuit <b>260</b> may optionally include a persistent data store <b>310</b> (such as a hard drive) for persistent storage of data. The persistent data store <b>310</b> may be used for persistent storage of program codes, and image files, for example. The persistent data store <b>310</b> may also be used for storage of data related to multiple-party communications. However in the embodiments described herein multiple-party communication data is stored on the server hard drive <b>58</b> and the system <b>10</b> does not directly make use of persistent data store <b>310</b> on the client computer processor circuit <b>260</b>.</p>
<p id="h-0015" num="0000">Producing Messages&#x2014;Client Computer</p>
<p id="p-0247" num="0246">In general, client computers <b>14</b>, <b>16</b>, and/or <b>18</b> in a multiple-party communication produce messages in response to user input signals and/or combinations of user input signals and function invocations. The user input signals may include character signals representing character input received from the character input device <b>28</b>, cursor movement signals representing a cursor movement produced in response to user input received at a pointing device <b>22</b>, and actuator button signals produced in response to user actuation of actuator buttons associated with the pointing device. The messages generated by the client computers <b>14</b>, <b>16</b> and <b>18</b> are transmitted to the server <b>12</b>.</p>
<p id="p-0248" num="0247">Still referring to <figref idref="DRAWINGS">FIG. 9</figref>, the operating system program codes <b>280</b> in the program memory <b>264</b> direct the microprocessor <b>262</b> to cause the I/O port <b>270</b> to monitor signals received at the input <b>278</b> from the character input device <b>28</b> and the pointing device <b>22</b>, and to generate interrupt event signals in response to the user input signals. The interrupt event signals produced by the operating system are read by the user interface interrupt handler <b>288</b>. For example, in the Microsoft Windows&#xae; operating system, interrupt event signals are written to a message queue and the interrupt handler <b>288</b> is registered to receive or listen to certain event signals in the message queue.</p>
<p id="p-0249" num="0248">For example, mouse input signals are produced when a button on the pointing device <b>22</b> is actuated and released, the mouse is moved (i.e. no buttons actuated), or the mouse is dragged (i.e. moved while pressing a mouse button). The operating system receives these signals and produces interrupt event messages including coordinate positions and other information identifying the input, which are written into the message queue. Similarly, keyboard input signals produce interrupt event messages which are also written into the message queue.</p>
<p id="p-0250" num="0249">The interrupt handler program codes <b>288</b> further direct the microprocessor <b>262</b> to provide functions for reading the message queue and for handling the operating system interrupt event messages. For example, in Java programming language, getX and getY functions are provided for returning the X and Y coordinates of a cursor, which has been moved in response to user input from the pointing device. The event &#x201c;KeyTyped&#x201d;(KeyEvent e) is invoked following a keyboard interrupt, where the actuated key is represented by a numeric value in a &#x201c;KeyEvent&#x201d; object produced by the Java function.</p>
<p id="p-0251" num="0250">Referring to <figref idref="DRAWINGS">FIG. 10</figref>, a table listing selected methods for acting on mouse and keyboard interrupts in the Java programming language is shown generally at <b>320</b>. The methods listed include a mouseClicked(MouseEvent e) <b>322</b>, which is invoked when the mouse button has been actuated, a mouseDragged(MouseEvent e) <b>324</b>, which is invoked when a mouse button has been actuated on the mouse and then the mouse has been dragged, a mouseMoved(MouseEvent e) <b>326</b>, which is invoked when the mouse cursor has been moved but no buttons have been actuated, and a keyTyped(KeyEvent e) <b>328</b>, which is invoked when a key has been typed.</p>
<p id="p-0252" num="0251">In some instances two or more of the event signals may be generated essentially simultaneously in response to the user input. For example when the user of the client computer <b>14</b>, <b>16</b> or <b>18</b> actuates the mouse button, then drags the mouse while the button is actuated, and then releases the mouse button several event signals are produced. When the mouse button is actuated, none of the events listed in <figref idref="DRAWINGS">FIG. 10</figref> are produced until the user drags the mouse (a &#x201c;mousePressed&#x201d; event is produced, but this event is not used in this embodiment). Generally the mouse drag will produce a plurality of &#x201c;mouseDragged&#x201d; event signals while the mouse is being dragged and each individual &#x201c;mouseDragged&#x201d; signal or message defines a portion of the movement of the mouse. At the end of the mouse drag, the user releases the mouse button, which causes the &#x201c;mouseClicked&#x201d; event signal to be produced (since the button was actuated and then subsequently released). The mouse drag may thus be defined by a plurality of event signals between a location at which the mouse button was actuated and a location at which the mouse button was released.</p>
<p id="p-0253" num="0252">Other programming languages such as Adobe Flash, C<sup>++</sup>, and Delphi provide equivalent functionality for handling such events.</p>
<p id="h-0016" num="0000">User Interface</p>
<p id="p-0254" num="0253">When a user of one of the client computers <b>14</b>, <b>16</b>, or <b>18</b> joins a multiple-party communication, either by clicking the &#x201c;create new communication&#x201d; button <b>132</b> on the web page <b>130</b> shown in <figref idref="DRAWINGS">FIG. 4</figref>, or by clicking the &#x201c;list active communications&#x201d; button <b>138</b> and selecting a multiple-party communication to join from the table <b>140</b>, the server <b>12</b> transmits program codes to the client computer for displaying the user interface <b>470</b> (shown in <figref idref="DRAWINGS">FIG. 11</figref>) on the client computer display <b>15</b>. As described above, the user interface program codes may include Java or Flash program codes for directing the microprocessor <b>262</b> to provide user interface functions. The program codes may be downloaded from the server <b>12</b> and automatically executed after downloading.</p>
<p id="p-0255" num="0254">Alternatively, the client computer may launch program codes (not shown) for instantiating a stand-alone user interface program, which causes the user interface <b>470</b> to be displayed without being downloaded from the server <b>12</b>.</p>
<p id="p-0256" num="0255">Referring to <figref idref="DRAWINGS">FIG. 11</figref>, the user interface <b>470</b> includes a control panel <b>471</b>, a display area <b>472</b> for displaying multiple-party communication content, and a status bar <b>490</b>. The control panel <b>471</b> includes an &#x201c;ImageShow&#x201d; function invocation button <b>474</b> for transmitting a message to the server to cause an image <b>475</b> to be displayed on the display area <b>472</b>, a &#x201c;ClearScreen&#x201d; function invocation button <b>476</b> for transmitting a message to the server to cause the display area to be cleared, a &#x201c;Save&#x201d; function invocation button <b>477</b> for transmitting a message to cause the server to save presently displayed content, and an &#x201c;Open&#x201d; function invocation button <b>494</b> for transmitting a message to cause the server to load and transmit messages representing previously saved content. The control panel <b>471</b> also includes a &#x201c;PageBack&#x201d; function invocation button <b>478</b> and &#x201c;PageForward&#x201d; function invocation button <b>480</b> for transmitting a message to the server for causing messages associated with previous displayed pages to be transmitted to the client computers, a &#x201c;LinkCreate&#x201d; function invocation button <b>495</b> for transmitting a message to the server identifying a link to a web page or previously saved content on the server, and a &#x201c;Publish&#x201d; function invocation button <b>493</b> for transmitting a message to the server to cause content to be published. The control panel <b>471</b> also includes a &#x201c;Clipboard&#x201d; function invocation button <b>488</b> for uploading clipboard data to the server and for transmitting a message to the server identifying the upload data, and a &#x201c;Quit&#x201d; function invocation button <b>482</b> for transmitting a message to the server to cause the client computer to be disconnected when the user of the client computer wishes to leave the multiple-party communication. The control panel <b>471</b> further includes a &#x201c;Game&#x201d; function invocation button <b>491</b> for transmitting as message to the server to cause game piece images to be displayed on the display area <b>472</b>, as described later herein.</p>
<p id="p-0257" num="0256">The control panel <b>471</b> further includes line formatting controls <b>484</b> for selecting a color and width of a line to be drawn on the display area <b>472</b>, and character formatting controls <b>486</b> for selecting a font, color, and size of characters to be displayed on the display area.</p>
<p id="p-0258" num="0257">In general user interface <b>470</b> causes content such as an image <b>475</b>, a single client computer cursor <b>496</b>, and a client computer pointer <b>499</b> for each client computer in the multiple-party communication, to be displayed in response to messages received from the server <b>12</b>. In other embodiments, each client computer may display only its own cursor <b>496</b> and other client computer pointers <b>499</b>, in which case the client computer user will not be able to view their own pointer on the display area. When the user interface <b>470</b> is displayed on the handheld client computer <b>18</b> (shown in <figref idref="DRAWINGS">FIG. 1</figref>) an actual cursor may not be displayed on the display <b>19</b> since the tip of the stylus <b>26</b> provides a visual indication of the cursor position. In such systems, the stylus <b>26</b> acts as the cursor, and although no actual cursor is displayed on the screen, the operating system of such devices receives user input signals in response to movement of the stylus tip in contact with the touch screen display area and produces corresponding interrupt event signals as described above.</p>
<p id="p-0259" num="0258">The status bar <b>490</b> generally display status information associated with the multiple-party communication. In this embodiment the status bar <b>490</b> includes a field <b>492</b> for displaying the number of client computers that have joined the multiple-party communication, and may include other information such as the duration of the multiple-party communication, communication name etc.</p>
<p id="p-0260" num="0259">The display area <b>472</b> may also have a linked area <b>497</b>, which links to a file or web page when clicked by the user. In the embodiment shown the link <b>497</b> includes an identifier (not shown) identifying a filename of a file on the server hard drive <b>58</b> including image data for the Ethna volcano image <b>475</b>. In other embodiments the link identifier may include a uniform resource locator (URL) identifying image data or an image file elsewhere on the network <b>20</b>. When the client cursor <b>496</b> is moved within the linked area <b>497</b>, the user interface image display program codes <b>289</b> direct the microprocessor <b>262</b> to cause the client cursor <b>496</b> to change from displaying an arrow to display a hand-shaped cursor <b>498</b> (in practice, either the arrow cursor <b>496</b> or the hand cursor <b>498</b> is visible, not both as shown in <figref idref="DRAWINGS">FIG. 11</figref> for illustrative purposes only).</p>
<p id="p-0261" num="0260">In general, the display area <b>472</b> may include a plurality of linked areas such as the linked area <b>497</b>, each linked area having an associated identifier. The coordinates of each linked area <b>497</b> and the associated identifier are stored in the store <b>296</b> in the RAM <b>266</b>. In the embodiment shown the linked area <b>497</b> comprises a rectangular area of the display area <b>472</b> and may be defined by a first pair of X and Y coordinates defining a top left hand corner of the linked area and a second pair of X and Y coordinates defining a bottom right hand corner of the linked area. Alternatively, the linked area <b>472</b> may have other geometric shapes having a position and/or shape defined by one or more coordinate pairs.</p>
<p id="h-0017" num="0000">Message Format</p>
<p id="p-0262" num="0261">Referring to <figref idref="DRAWINGS">FIG. 12</figref>, a table of messages used in the communication system <b>10</b> is shown generally at <b>330</b>. In general, three message types are provided including:
<ul id="ul0001" list-style="none">
    <li id="ul0001-0001" num="0000">
    <ul id="ul0002" list-style="none">
        <li id="ul0002-0001" num="0262">Persistent messages <b>332</b> that produce persistent changes to content on the display area <b>472</b>;</li>
        <li id="ul0002-0002" num="0263">Non-persistent messages <b>334</b> that do not result in persistent changes to the display area, for example, messages that cause pointers to change position within the display area <b>472</b>, but do not leave persistent changes on the display area; and</li>
        <li id="ul0002-0003" num="0264">Control messages <b>336</b> that cause a server action to be performed for managing server and/or client activity that also do not cause persistent changes to the content in the display area <b>472</b> (except for messages that cause page changes or clearing of the screen).</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0263" num="0265">Each message <b>330</b> comprises 30 bytes of information, with the 30<sup>th </sup>byte being the null character, indicating the end of the message. Any unused bytes in the message are padded with zeroes.</p>
<p id="p-0264" num="0266">Each message <b>330</b> includes a message identifier (MsgID) in bytes <b>1</b> and <b>2</b>. In this embodiment message identifiers in the range 1-9 are associated with persistent messages <b>332</b>, message identifiers in the range 10-19 are associated with non-persistent messages <b>334</b>, and message identifiers&#x2267;20 are associated with control messages <b>336</b>. Accordingly, in this embodiment the message identifier also functions as a message type indicator, since the message type may be derived from the message identifier. In other embodiments, the messages <b>330</b> may include a separate message type indicator (not shown) indicating a message type associated with each message.</p>
<p id="p-0265" num="0267">Each message <b>330</b> also includes the user identifier (UID) <b>202</b> (shown in <figref idref="DRAWINGS">FIG. 7</figref>) in bytes <b>3</b> and <b>4</b>. In other embodiments the messages <b>330</b> may be of different byte size, may have variable byte lengths, and/or may comprise an Extensible Markup Language (XML) message format, for example.</p>
<p id="p-0266" num="0268">Each message <b>330</b> represents a particular type of user input and may include addition information, such as coordinate positions, in a message payload. The message identifier field indicates the specific type of user input included in the message payload</p>
<p id="p-0267" num="0269">The persistent messages <b>332</b> are generated in response to user input that causes persistent lines to be drawn, characters to be displayed, and/or images to be displayed on the user interface <b>470</b>.</p>
<p id="p-0268" num="0270">The persistent messages <b>332</b> include a &#x201c;KeyTyped&#x201d; message <b>338</b> having a message identifier of 1, which represents a user input key (or character). The specific key typed is represented by a numeric value held in bytes <b>11</b> and <b>12</b>. The &#x201c;KeyTyped&#x201d; message <b>338</b> also includes X and Y coordinates (Xnew, Ynew) held in bytes <b>13</b>-<b>16</b> of the message, color display information associated with the character held in the bytes <b>5</b>-<b>7</b>, a font identifier, style identifier, and a size identifier held in bytes <b>8</b>-<b>10</b>.</p>
<p id="p-0269" num="0271">The persistent messages <b>332</b> also include a &#x201c;MouseDrag&#x201d; message <b>340</b> having a message identifier of 2, which represents a line drawn on the display area <b>472</b> of the user interface <b>470</b>. The &#x201c;MouseDrag&#x201d; message <b>340</b> includes starting X and Y coordinates (Xold, Yold) and ending X and Y coordinates (Xnew, Ynew) held in bytes <b>9</b>-<b>16</b> of the message. Color information associated with the line is held in the bytes <b>5</b>-<b>7</b>, and a width of the line is held in byte <b>8</b>.</p>
<p id="p-0270" num="0272">The persistent messages <b>332</b> also include an &#x201c;ImageShow&#x201d; message <b>342</b> having a message identifier of 3, which represents an image location (such as the image <b>475</b> shown in <figref idref="DRAWINGS">FIG. 11</figref>) posted by the user on the client computer display area <b>472</b> of the user interface <b>470</b>. The &#x201c;ImageShow&#x201d; message <b>342</b> also includes X and Y coordinates (Xnew, Ynew) held in bytes <b>5</b>-<b>8</b> and an image filename held in bytes <b>9</b>-<b>29</b>.</p>
<p id="p-0271" num="0273">The persistent messages <b>332</b> also include a &#x201c;LinkCreate&#x201d; message <b>344</b> having a message identifier of 4, which represents a link created by the user on the client computer display area <b>472</b> of the user interface <b>470</b> (such as the linked area <b>497</b> shown in <figref idref="DRAWINGS">FIG. 11</figref>). The &#x201c;LinkCreate&#x201d; message <b>344</b> also includes X and Y coordinates (X<b>1</b>, Y<b>1</b>) and (X<b>2</b>, Y<b>2</b>) held in bytes <b>5</b>-<b>12</b> and a filename or internet address held in bytes <b>13</b>-<b>29</b>.</p>
<p id="p-0272" num="0274">The persistent messages <b>332</b> also include a &#x201c;Game&#x201d; message <b>359</b> having a message identifier of 5, which represents a request by a user of the client computer to display game piece images on the display area <b>472</b> of the user interface <b>470</b>.</p>
<p id="p-0273" num="0275">In this embodiment the non-persistent messages <b>334</b> include only a &#x201c;MouseMove&#x201d; message <b>346</b> having a message identifier of 10, which represents a mouse movement made by the user that causes the cursor to move without drawing a line on the display area <b>472</b>. The &#x201c;MouseMove&#x201d; message <b>346</b> includes ending X and Y coordinates (Xnew, Ynew) held in bytes <b>5</b>-<b>8</b>. Other embodiments may include further non-persistent messages.</p>
<p id="p-0274" num="0276">The &#x201c;MouseMove&#x201d; message <b>346</b> and the &#x201c;MouseDrag&#x201d; message <b>340</b> represent a change in position of a cursor associated with the display area <b>472</b> of the client computer, and when transmitted to the server <b>12</b> these messages may be referred to as cursor messages.</p>
<p id="p-0275" num="0277">The control messages generally cause functions to be performed by the server <b>12</b>, but generally do not produce new content on the display area <b>472</b>. The control messages <b>336</b> include a &#x201c;ClearScreen&#x201d; message <b>348</b> having a message identifier of 20, which represents a command to clear a page displayed on the display area <b>472</b>.</p>
<p id="p-0276" num="0278">The control messages <b>336</b> also include a &#x201c;Save&#x201d; message <b>350</b> having a message identifier of 21, which represents a request by a client computer user to save content currently displayed on the display area <b>472</b> to the client saved content store <b>100</b> in the server hard drive <b>58</b> (shown in <figref idref="DRAWINGS">FIG. 2</figref>). The &#x201c;Save&#x201d; message <b>350</b> includes a filename, which is held in bytes <b>5</b>-<b>29</b> of the message.</p>
<p id="p-0277" num="0279">The control messages <b>336</b> also include an &#x201c;Open&#x201d; message <b>352</b> having a message identifier of 22, which represents a request by a user to load content saved in the client saved content store <b>100</b> in the server hard drive <b>58</b>. The &#x201c;Open&#x201d; message <b>352</b> includes a filename, which is held in bytes <b>5</b>-<b>29</b> of the message.</p>
<p id="p-0278" num="0280">The control messages <b>336</b> also include a &#x201c;PageChange&#x201d; message <b>354</b> having a message identifier of 23, which represents a request by a user to change the current displayed page to a page stored in the communication page store <b>104</b>. In general the communication page store <b>104</b> may store several pages of content and accordingly the &#x201c;PageChange&#x201d; message <b>354</b> includes a &#x201c;PageFlag&#x201d; value held in byte <b>5</b> of the message for instructing the server <b>12</b> to display a previous page (when the &#x201c;PageFlag&#x201d; value is &#x201c;0&#x201d;), or to display the next page (when the &#x201c;PageFlag&#x201d; is &#x201c;1&#x201d;).</p>
<p id="p-0279" num="0281">The control messages <b>336</b> also include a &#x201c;Disconnect&#x201d; message <b>356</b> having a message identifier of 24, which represents a request of the user to disconnect from the multiple-party communication, while the multiple-party communication continues.</p>
<p id="p-0280" num="0282">The control messages <b>336</b> also include a &#x201c;ShutDown&#x201d; message <b>358</b> having a message identifier of 25, which represents a request by the user to discontinue the multiple-party communication.</p>
<p id="h-0018" num="0000">Message Sender Process&#x2014;Client Computer</p>
<p id="p-0281" num="0283">In general, the message sender process codes stored in the store <b>286</b> of the program memory (shown in <figref idref="DRAWINGS">FIG. 9</figref>) direct the microprocessor <b>262</b> to produce the persistent messages <b>332</b>, the non-persistent messages <b>334</b>, and the control messages <b>336</b>, in response to user input signals, function button invocations, and combinations thereof.</p>
<p id="p-0282" num="0284">Referring to <figref idref="DRAWINGS">FIG. 13A</figref> to <figref idref="DRAWINGS">FIG. 13C</figref>, a flowchart of blocks of code for directing the client computer processor circuit <b>260</b> (shown in <figref idref="DRAWINGS">FIG. 9</figref>) to generate the messages is shown generally at <b>360</b>.</p>
<p id="p-0283" num="0285">Referring to <figref idref="DRAWINGS">FIG. 13A</figref>, the process begins at <b>362</b> when an interrupt event signal produced by the operating system is received by the interrupt handler <b>288</b>.</p>
<p id="p-0284" num="0286">Block <b>364</b> directs the microprocessor <b>262</b> to determine whether the interrupt event signal corresponds to a &#x201c;keyTyped&#x201d; event <b>328</b> (shown in <figref idref="DRAWINGS">FIG. 10</figref>), in which case the process continues at block <b>366</b>, which directs the microprocessor to generate the &#x201c;KeyTyped&#x201d; message <b>338</b> with a message identifier value of 1, a &#x201c;UID&#x201d; <b>202</b> corresponding to the user identifier of the client computer from the client table entry <b>200</b> (shown in <figref idref="DRAWINGS">FIG. 7</figref>), and color and font values corresponding to a color and font currently selected by the user in the character formatting controls <b>486</b> on the user interface. Block <b>366</b> also directs the microprocessor to read the X and Y coordinates of the character entry position from the character entry position store <b>294</b> in the RAM <b>266</b> and to place values of these coordinates in the &#x201c;KeyTyped&#x201d; message <b>338</b>.</p>
<p id="p-0285" num="0287">In this embodiment when a character is entered by the user, the character is not displayed on the screen until the message is received back from the server, as described later herein. Furthermore, each message includes information identifying only a single typed character. In other embodiments the message may represent more than one character.</p>
<p id="p-0286" num="0288">The process then continues at block <b>367</b>, which directs the microprocessor <b>262</b> to compute a new character entry position for the next character that will be typed by the user of the client computer. In this embodiment, subsequent characters are assigned X and Y coordinates read from the character entry position store <b>294</b>, and after each successive character is typed, the X coordinate is incremented (or decremented for in some alphabets) such that the next character typed will be displayed in an appropriate spaced apart relation to the previous character typed. Successive typed characters thus appear in a horizontal line and have the same Y coordinate.</p>
<p id="p-0287" num="0289">When the user types a character corresponding to an &#x201c;Enter&#x201d; or new line control character, then the Y coordinate is incremented (assuming that the display area <b>472</b> has an origin at the top left hand corner) such that the next character typed will be displayed on a new line below the previous character or characters in an appropriate spaced apart relation. The X coordinate is also decremented (or incremented in some alphabets) to cause the character entry position to align horizontally with the first character in the previous line. In this embodiment, the X coordinate of the first character in a line is saved in the character entry position store <b>294</b> and thus when an &#x201c;Enter&#x201d; or new line control character is typed the character entry position X coordinate is set to the X coordinate of the first character in the previous line and the Y coordinate is computed as described above.</p>
<p id="p-0288" num="0290">Block <b>367</b> also directs the microprocessor <b>262</b> to update the character entry position stored in the store <b>294</b> in accordance with the new computed character entry position.</p>
<p id="p-0289" num="0291">The process then continues at block <b>384</b>, which directs the microprocessor <b>262</b> to write the message <b>338</b> into the client side Tx buffer <b>292</b>.</p>
<p id="p-0290" num="0292">If at block <b>364</b> the interrupt event signal does not correspond to a &#x201c;keyTyped&#x201d; event, then the process continues at block <b>368</b>. Block <b>368</b> directs the microprocessor <b>262</b> to determine whether the interrupt event signal corresponds to a &#x201c;mouseDragged&#x201d; event <b>324</b>, in which case the process continues at block <b>370</b>. Block <b>370</b> directs the microprocessor <b>262</b> to determine whether the &#x201c;LinkCreate&#x201d; function invocation button <b>495</b> (shown in <figref idref="DRAWINGS">FIG. 11</figref>) was clicked before the mouse was dragged. If the &#x201c;LinkCreate&#x201d; button <b>495</b> was clicked, then the process continues at block <b>371</b>. Block <b>371</b> directs the microprocessor <b>262</b> to generate the &#x201c;MouseMove&#x201d; message <b>346</b> with a message identifier value of 10, a &#x201c;UID&#x201d; corresponding to the user identifier for the client computer, and X and Y coordinates corresponding to the new cursor location on the display area <b>472</b>. The process then continues at block <b>384</b>, which directs the microprocessor <b>262</b> to write the message <b>346</b> into the client side Tx buffer <b>292</b>.</p>
<p id="p-0291" num="0293">If at block <b>370</b>, the &#x201c;LinkCreate&#x201d; function invocation button <b>495</b> was not clicked before the mouse was dragged then the process continues at block <b>382</b>. Block <b>382</b> directs the microprocessor to generate the &#x201c;MouseDrag&#x201d; message <b>340</b> with a message identifier value of 2, a &#x201c;UID&#x201d; corresponding to the user identifier for the client computer, and color and width values corresponding to a color and width currently selected in the line formatting controls <b>484</b>. Block <b>382</b> also directs the microprocessor to query the operating system to retrieve starting X and Y coordinates and ending X and Y coordinates corresponding to the cursor motion to place these values in the appropriate bytes of the payload of the message <b>340</b>. The process then continues at block <b>384</b>, which directs the microprocessor <b>262</b> to write the message <b>340</b> into the client side Tx buffer <b>292</b>.</p>
<p id="p-0292" num="0294">If at block <b>368</b> the interrupt event signal does not correspond to the &#x201c;mouseDragged&#x201d; event <b>324</b>, then the process continues at block <b>372</b>. Block <b>372</b> directs the microprocessor <b>262</b> to determine whether the event corresponds to a &#x201c;mouseClicked&#x201d; event <b>322</b>, in which case the process continues at block <b>374</b>. Block <b>374</b> directs the microprocessor <b>262</b> to determine whether the &#x201c;ImageShow&#x201d; function invocation button <b>474</b> (shown in <figref idref="DRAWINGS">FIG. 11</figref>) was clicked before the mouse click was produced. If the &#x201c;ImageShow&#x201d; function invocation button <b>474</b> was clicked, then the process continues at block <b>376</b>, which directs the microprocessor to launch a dialog window (not shown) for the user to pick an image to be displayed on the display area <b>472</b>. The image may be represented by data stored in the persistent data store <b>310</b> or the RAM <b>266</b> of the processor circuit <b>260</b>, or the image data may be stored in a location elsewhere on the network <b>20</b>.</p>
<p id="p-0293" num="0295">The process then continues at block <b>377</b>, which directs the microprocessor <b>262</b> to upload the image data to the server processor circuit <b>50</b>. The uploading of the image data may be performed in accordance with a conventional file upload protocol such as file transfer protocol (FTP). Alternatively block <b>377</b> may direct the microprocessor <b>262</b> to initiate a HTTP POST request for uploading the image data to the server using HTTP protocol, for example. The upload data also includes an associated upload data identifier, such as a filename. Alternatively, block <b>377</b> may further direct the microprocessor <b>262</b> to generate a unique upload data identifier, for example by combining the client computer UID with a time and date generated by the operating system.</p>
<p id="p-0294" num="0296">If at block <b>374</b> the &#x201c;ImageShow&#x201d; function invocation button <b>474</b> was not clicked before the mouse click was produced, then the process continues at block <b>375</b>. Block <b>375</b> directs the microprocessor <b>262</b> to determine whether the &#x201c;Clipboard&#x201d; function invocation button <b>488</b> was clicked before the mouse click was produced. If the &#x201c;Clipboard&#x201d; button <b>488</b> was clicked, then the process continues at block <b>377</b> as described above, except that in this case the microprocessor <b>262</b> is directed to upload the clipboard data to the server.</p>
<p id="p-0295" num="0297">Block <b>378</b> then directs the microprocessor <b>262</b> to generate the &#x201c;ImageShow&#x201d; message <b>342</b> with a message identifier value of 3, a &#x201c;UID&#x201d; corresponding to the user identifier for the client computer, and a upload data identifier corresponding to the upload data identifier associated with the upload data, that was transmitted to the server <b>12</b> at block <b>377</b>. Block <b>378</b> also directs the microprocessor <b>262</b> to retrieve the X and Y coordinates of the display location where the mouse actuator button was actuated in block <b>372</b>, which defines the position of the top left hand corner of the image (such as the image <b>475</b> shown in <figref idref="DRAWINGS">FIG. 11</figref>). Block <b>378</b> further directs the microprocessor <b>262</b> to place these values in the appropriate bytes of the &#x201c;ImageShow&#x201d; message <b>342</b>. The process then continues at block <b>384</b>, which directs the microprocessor <b>262</b> to write the message <b>342</b> into the client side Tx buffer <b>292</b>. In other embodiments the information in the &#x201c;ImageShow&#x201d; message may be uploaded at block <b>377</b>, in which case block <b>378</b> may be omitted.</p>
<p id="p-0296" num="0298">Advantageously the upload data may be screenshot image data of a desktop area of the client computer. For example, screenshots may be conveniently produced when using the Microsoft Windows operating system by pressing a &#x201c;Print Screen&#x201d; key on the keyboard to copy the entire desktop to clipboard memory, or by pressing &#x201c;Alt&#x201d; and &#x201c;Print Screen&#x201d; keys to copy the content of an active window to the clipboard memory. Screenshot data is generally in some image data format (for example a bitmap) and may be uploaded directly to the server from the clipboard or converted into a different image format by an image conversion function (not shown).</p>
<p id="p-0297" num="0299">Alternatively, the data in the clipboard memory may be formatted data copied from a program window (for example Microsoft&#xae; Office Word or Excel). Formatted data may include formats, such as Excel spreadsheet formats for example, and such data is generally not suitable for display as an image. Accordingly, when a user of one of the client computers <b>14</b>, <b>16</b>, or <b>18</b> wishes to upload formatted data, the data may require conversion into a format suitable for display as an image.</p>
<p id="p-0298" num="0300">Such data conversions are generally performed by conversion functions that are configured to convert particular types of formatted data into image data. In this embodiment the conversion is performed by the server <b>12</b> after the data has been uploaded from the client computer to the server. Alternatively, the data conversion may be performed by the client computer prior to uploading at block <b>377</b>. In another alternative the formatted data may be uploaded to the sever <b>12</b> and stored on the server without conversion, and the data conversion may be performed on each of the client computers after the formatted data is downloaded for display on the respective display areas <b>472</b>.</p>
<p id="p-0299" num="0301">Whether the data conversion occurs on the client computers or the server, the conversion generally involves determining a formatted data type by reading clipboard parameters associated with the data in the clipboard memory. An appropriate conversion function is then selected from a plurality of conversion functions available and the formatted data is converted into an image format suitable for display in the user interface <b>470</b>. Advantageously, when the data conversion is performed on the server <b>12</b>, only the server need be configured to perform such data conversions. In other embodiments where it is desired to offload the data conversion load from the server, conversion functions may be included in the user interface <b>282</b> program codes, and launched when performing an upload of formatted data to the server <b>12</b> or when downloading formatted data from the server.</p>
<p id="p-0300" num="0302">Advantageously, the clipboard function invocation facilitates sharing content produced by other software applications during the multiple-party communication. All client computers will display the resulting image and will be able to draw lines and type characters over the image.</p>
<p id="p-0301" num="0303">If at block <b>375</b> the &#x201c;Clipboard&#x201d; function invocation button <b>488</b> was not clicked before the mouse click was produced, then the process continues at block <b>380</b>. Block <b>380</b> directs the microprocessor <b>262</b> to determine whether the &#x201c;mouseClicked&#x201d; event (at block <b>372</b>) was immediately preceded by a &#x201c;mouseDragged&#x201d; event <b>324</b>, in which case the process continues at block <b>381</b>. Block <b>381</b> directs the microprocessor <b>262</b> to determine whether the &#x201c;LinkCreate&#x201d; function invocation button <b>495</b> (shown in <figref idref="DRAWINGS">FIG. 11</figref>) was clicked before the mouse was dragged. If at block <b>381</b> the &#x201c;LinkCreate&#x201d; button <b>495</b> was clicked, then the process continues at block <b>385</b>. Block <b>385</b> directs the microprocessor <b>262</b> to launch a dialog box for a user to enter a link identifier to be associated with a linked area <b>497</b>. For example, the link identifier may include a filename identifying a location and name of a client saved content in the client saved content store <b>100</b> on the server hard drive <b>58</b> (shown in <figref idref="DRAWINGS">FIG. 2</figref>). Alternatively, the link identifier may be a Uniform Resource Locator (URL) of another web site (for example www.google.com).</p>
<p id="p-0302" num="0304">The process then continues at block <b>386</b>, which directs the microprocessor <b>262</b> to generate the &#x201c;LinkCreate&#x201d; message <b>344</b> with a message identifier value of 4, a &#x201c;UID&#x201d; corresponding to the user identifier for the client computer, and the link identifier provided by the client computer user. Block <b>386</b> also directs the microprocessor <b>262</b> to query the operating system to retrieve starting X and Y coordinates corresponding to starting coordinates of the mouse drag, and ending X and Y coordinates corresponding to the ending coordinates of the mouse drag. Block <b>386</b> further directs the microprocessor <b>262</b> to write the retrieved coordinate values to appropriate bytes of the message <b>346</b>. The starting X and Y coordinates and ending X and Y coordinates define the linked area <b>497</b> on the display area <b>472</b> shown in <figref idref="DRAWINGS">FIG. 11</figref>. The process then continues at block <b>384</b>, which directs the microprocessor <b>262</b> to write the message <b>344</b> into the client side Tx buffer <b>292</b>.</p>
<p id="p-0303" num="0305">If at block <b>380</b> the event does not correspond to a &#x201c;mouseDragged&#x201d; event <b>324</b> then the process continues at block <b>388</b>. When a &#x201c;mouseClicked&#x201d; interrupt event signal has been generated by the operating system at block <b>372</b>, block <b>388</b> directs the microprocessor <b>262</b> to determine whether the mouse click was within one of the linked areas <b>497</b> defined by information stored in the store <b>296</b> of the RAM <b>266</b> (shown in <figref idref="DRAWINGS">FIG. 9</figref>). If the click was in a linked area <b>497</b> then the process continues at block <b>389</b>, which directs the microprocessor <b>262</b> to generate the &#x201c;Open&#x201d; message <b>352</b> with a message identifier value of 22, a &#x201c;UID&#x201d; corresponding to the user identifier for the client computer, and a link identifier corresponding to a filename or internet address associated with the linked area <b>497</b>. The process then continues at block <b>384</b>, which directs the microprocessor <b>262</b> to write the message <b>352</b> into the client side Tx buffer <b>292</b>.</p>
<p id="p-0304" num="0306">If at block <b>388</b>, a linked area was not clicked the process continues at block <b>400</b>, which directs the microprocessor <b>262</b> to save a coordinate position at which the display area <b>472</b> was clicked to the character entry position store <b>294</b> in the RAM <b>266</b>, thus changing the coordinates for the character entry position for the next character that is entered by the user.</p>
<p id="p-0305" num="0307">The character entry position stored in the store <b>294</b> is initially set to a default position for character entry, such as location (10, 10) on the display area <b>472</b>, for example (i.e. 10 pixels down and 10 pixels to the right from the top left hand corner of the display area <b>472</b>). When the user of the client computer subsequently clicks on the display area <b>472</b> without first pressing the &#x201c;ImageShow&#x201d;, &#x201c;Clipboard&#x201d;, or &#x201c;LinkCreate&#x201d; function invocation buttons <b>474</b>, <b>488</b>, or <b>495</b> respectively, then the coordinates where the user clicked are saved in the character entry position store <b>294</b> and used as the next character entry position, when the user of the client computer types a character.</p>
<p id="p-0306" num="0308">Advantageously the character entry position is implemented as a &#x201c;sticky&#x201d; position, which causes user input characters to be displayed on the display area <b>472</b> at the last character entry position saved in the store <b>294</b>, or the default position if the user has not set a previous character entry position by clicking on the display area <b>472</b> without clicking first on the &#x201c;ImageShow&#x201d;, &#x201c;Clipboard&#x201d;, or &#x201c;LinkCreate&#x201d; function invocation buttons <b>474</b>, <b>488</b>, or <b>495</b> respectively.</p>
<p id="p-0307" num="0309">If at block <b>372</b> the event does not correspond to a MouseClicked event, or at block <b>381</b> the &#x201c;LinkCreate&#x201d; function invocation button was not clicked before the mouse was dragged, then the process continues at block <b>402</b> on <figref idref="DRAWINGS">FIG. 13B</figref>.</p>
<p id="p-0308" num="0310">Referring to <figref idref="DRAWINGS">FIG. 13B</figref>, block <b>402</b> directs the microprocessor <b>262</b> to determine whether the interrupt event signal corresponds to a &#x201c;mouseMoved&#x201d; event <b>326</b> (shown in <figref idref="DRAWINGS">FIG. 10</figref>), in which case the process continues at block <b>404</b>. Block <b>404</b> directs the microprocessor <b>262</b> to generate the &#x201c;MouseMove&#x201d; message <b>346</b> with a message identifier value of 10, a &#x201c;UID&#x201d; corresponding to the user identifier for the client computer, and X and Y coordinates corresponding to the new cursor location on the display area <b>472</b>. The process then continues at block <b>384</b>, which directs the microprocessor <b>262</b> to write the message <b>346</b> into the client side Tx buffer <b>292</b>.</p>
<p id="p-0309" num="0311">The client computer user's pointing device movements may be represented in real time by a cursor displayed by the operating system on the client computer display area <b>472</b> or by a stylus tip on a touch screen display area. Advantageously, the &#x201c;MouseMove&#x201d; message <b>346</b> facilitates transmitting the client computer user's pointing device movements to other client computers, which facilitates display of pointers corresponding to each of a plurality of client computers on the respective display areas <b>472</b> of the other client computers who have joined the multiple-party communication. The client computer that generates the &#x201c;MouseMove&#x201d; message <b>346</b> also receives a copy of the message back from the server, which facilitates display of a local pointer in addition to any cursor that may be displayed by the operating system. Advantageously, display of a cursor and a local pointer permits the client computer user to view the effect of their pointer movements, since while the cursor responds to pointing device movements in near real-time, the pointer only moves once the message representing the movement is received back from the server.</p>
<p id="p-0310" num="0312">Accordingly, when the pointing device is moved, the pointer generally trails the cursor, providing a useful view of a network latency associated with a round trip from one of the client computers <b>14</b>, <b>16</b>, or <b>18</b> to the server <b>12</b> and back again to the client computer. When the pointing device is not moving, the cursor and the pointer will generally be displayed in the same location on the display area <b>472</b>. For touch screen displays where a cursor is not displayed, the stylus tip acts as a cursor and the pointer trails the stylus tip, thus providing a similar view of network latency for the user.</p>
<p id="p-0311" num="0313">If at block <b>402</b> the event does not correspond to a &#x201c;mouseMoved&#x201d; interrupt event signal then the process continues at block <b>406</b>. Block <b>406</b> directs the microprocessor <b>262</b> to determine whether the user has clicked the &#x201c;ClearScreen&#x201d; button <b>476</b>. If the &#x201c;ClearScreen&#x201d; button <b>476</b> has been clicked, then block <b>408</b> directs the microprocessor <b>262</b> to generate the &#x201c;ClearScreen&#x201d; message <b>348</b> with a message identifier value of 20 and a &#x201c;UID&#x201d; corresponding to the user identifier for the client computer. The process then continues at block <b>384</b>, which directs the microprocessor <b>262</b> to write the message <b>348</b> into the client side Tx buffer <b>292</b>.</p>
<p id="p-0312" num="0314">If at block <b>406</b> the &#x201c;ClearScreen&#x201d; button <b>476</b> has not been clicked then the process continues at block <b>410</b>. Block <b>410</b> directs the microprocessor <b>262</b> to determine whether the &#x201c;Save&#x201d; button <b>477</b> has been clicked, in which case the process continues at block <b>412</b>. Block <b>412</b> directs the microprocessor <b>262</b> to launch a dialog box for receiving user input of a filename. Block <b>414</b> then directs the microprocessor <b>262</b> to generate the &#x201c;Save&#x201d; message <b>350</b> with a message identifier value of 21, a &#x201c;UID&#x201d; corresponding to the user identifier for the client computer, and a filename corresponding to the filename input by the user. The process then continues at block <b>384</b>, which directs the microprocessor <b>262</b> to write the message <b>350</b> into the client side Tx buffer <b>292</b>.</p>
<p id="p-0313" num="0315">If at block <b>410</b> the &#x201c;Save&#x201d; button <b>477</b> has not been clicked then the process continues at block <b>416</b> on <figref idref="DRAWINGS">FIG. 13C</figref>. Referring to <figref idref="DRAWINGS">FIG. 13C</figref>, block <b>416</b> directs the microprocessor <b>262</b> to determine whether the user has clicked the &#x201c;Open&#x201d; button <b>494</b>. If the &#x201c;Open&#x201d; button <b>494</b> has been clicked, then block <b>418</b> directs the microprocessor <b>262</b> to launch a dialog box for receiving user input of a filename. Block <b>420</b> then directs the microprocessor to generate the &#x201c;Open&#x201d; message <b>352</b> with a message identifier value of 22 and a &#x201c;UID&#x201d; corresponding to the user identifier for the client computer. The process then continues at block <b>384</b>, which directs the microprocessor <b>262</b> to write the message <b>352</b> into the client side Tx buffer <b>292</b>.</p>
<p id="p-0314" num="0316">If at block <b>416</b> the &#x201c;Open&#x201d; button <b>494</b> has not been clicked, then the process continues at block <b>422</b>. Block <b>422</b> directs the microprocessor <b>262</b> to determine whether either of the &#x201c;PageBack&#x201d; or &#x201c;PageForward&#x201d; buttons <b>478</b> or <b>480</b> has been clicked, in which case the process continues at block <b>424</b>. Block <b>424</b> directs the microprocessor <b>262</b> generate the &#x201c;PageChange&#x201d; message <b>354</b> with a message identifier value of 23, a &#x201c;UID&#x201d; corresponding to the user identifier for the client computer, and a &#x201c;PageFlag&#x201d; value of &#x201c;0&#x201d; where the &#x201c;PageBack&#x201d; button was clicked or &#x201c;1&#x201d; where the &#x201c;PageForward&#x201d; button was clicked. The process then continues at block <b>384</b>, which directs the microprocessor <b>262</b> to write the message <b>354</b> into the client side Tx buffer <b>292</b>.</p>
<p id="p-0315" num="0317">If at block <b>422</b> the &#x201c;PageBack&#x201d; button <b>478</b> or the &#x201c;PageForward&#x201d; button <b>480</b> have not been clicked then the process continues at block <b>426</b>. Block <b>426</b> directs the microprocessor <b>262</b> to determine whether the &#x201c;Quit&#x201d; button <b>482</b> has been clicked, in which case the process continues at block <b>428</b>. Block <b>428</b> directs the microprocessor <b>262</b> to open a dialog window (for example a checkbox dialog form&#x2014;not shown) to present the user with an option of disconnecting the client while keeping the multiple-party communication running or shutting down the multiple-party communication.</p>
<p id="p-0316" num="0318">The process then continues at block <b>430</b>, which directs the microprocessor <b>262</b> to determine whether the user has chosen to disconnect, in which case block <b>432</b> directs the microprocessor <b>262</b> to generate the &#x201c;Disconnect&#x201d; message <b>356</b> with a message identifier value of 24 and a &#x201c;UID&#x201d; corresponding to the user identifier for the client computer. The process then continues at block <b>384</b>, which directs the microprocessor <b>262</b> to write the message <b>356</b> into the client side Tx buffer <b>292</b>.</p>
<p id="p-0317" num="0319">If at block <b>430</b> the user has chosen to shut down the meeting, then the process continues at block <b>434</b>, which directs the microprocessor <b>262</b> to generate the &#x201c;ShutDown&#x201d; message <b>358</b> with a message identifier value of 25 and a &#x201c;UID&#x201d; corresponding to the user identifier for the client computer. As will be described later herein, the request to shut down the communication is only accepted by the server <b>12</b> if the user is the last client computer in the communication. The process then continues at block <b>384</b>, which directs the microprocessor <b>262</b> to write the message <b>358</b> into the client side Tx buffer <b>292</b>.</p>
<p id="p-0318" num="0320">If at block <b>426</b> the &#x201c;Quit&#x201d; button <b>482</b> on the user interface has not been clicked, then the process continues at block <b>362</b> on <figref idref="DRAWINGS">FIG. 13A</figref>, which directs the microprocessor <b>262</b> to wait for the next interrupt (i.e. the event is ignored).</p>
<p id="p-0319" num="0321">From the above description, it will be appreciated that when the client computer receives user input signals and/or function invocation signals representing a function invocation at the client computer, the client computer produces a message having a message type associated with one of a plurality of pre-defined combinations of the user input signals and function invocation signals and transmits the message to the server <b>12</b>. The process <b>360</b> shown in <figref idref="DRAWINGS">FIG. 13A-13C</figref> thus represents a pre-association of certain combinations and/or sequences of user input signals and function invocations that produce messages having one of the persistent, non-persistent and control message type. Other user input signals and combinations such as mouse click events outside the user interface, are ignored by the message sender process.</p>
<p id="h-0019" num="0000">Message Transmission to the Server</p>
<p id="p-0320" num="0322">Referring to <figref idref="DRAWINGS">FIG. 14</figref>, a flowchart of blocks of code for directing the processor circuit <b>262</b> (shown in <figref idref="DRAWINGS">FIG. 9</figref>) to transmit the messages stored in the client side Tx buffer <b>292</b> is shown generally at <b>440</b>.</p>
<p id="p-0321" num="0323">In general messages may be transmitted in accordance with any message transmission protocol, such as TCP/IP, user datagram protocol (UDP), or XML, for example.</p>
<p id="p-0322" num="0324">The process begins at block <b>442</b>, which directs the microprocessor <b>262</b> to determine whether there are any messages in the client side Tx buffer <b>292</b>, in which case block <b>444</b> directs the microprocessor <b>262</b> to read the next message in the Tx buffer on a first-in-first-out (FIFO) basis and to write the message to the interface <b>272</b>. The interface <b>272</b> then produces a data signal representing the message at the input/output <b>274</b>, which is transmitted to the server <b>12</b> through the network <b>20</b>. The process <b>440</b> then returns to block <b>442</b>, repeating blocks <b>442</b> and <b>444</b> until all messages in the client side Tx buffer are transmitted.</p>
<p id="p-0323" num="0325">If at block <b>442</b>, there are no messages in the client side Tx buffer <b>292</b>, then the microprocessor <b>262</b> is directed back to block <b>442</b>, which again determines whether any messages have been written into the client side Tx buffer <b>292</b>.</p>
<p id="h-0020" num="0000">Server Receive Process</p>
<p id="p-0324" num="0326">A flowchart of blocks of code for directing the processor circuit <b>50</b> (shown in <figref idref="DRAWINGS">FIG. 2</figref>) to receive input messages from each of the client computers <b>14</b>, <b>16</b> and <b>18</b> is shown in <figref idref="DRAWINGS">FIGS. 15A and 15B</figref> generally at <b>500</b>.</p>
<p id="p-0325" num="0327">In general, client manager threads are executed for each of the client computers <b>14</b>, <b>16</b>, and <b>18</b> to separately receive input messages in the respective server side Rx buffers for the client computers. Referring to <figref idref="DRAWINGS">FIG. 15A</figref>, the process begins at blocks <b>502</b>, <b>504</b> and <b>506</b>, which direct the microprocessor <b>52</b> wait for input messages to be received from any of the client computers <b>14</b>, <b>16</b>, and <b>18</b> at any of the server side Rx buffers <b>92</b> in the RAM <b>56</b>.</p>
<p id="p-0326" num="0328">The process then continues at block <b>508</b> when an input message is received at <b>502</b>, <b>504</b>, or <b>506</b>. Block <b>508</b> then directs the microprocessor <b>52</b> append a timestamp to the input message (after byte <b>30</b>, shown in <figref idref="DRAWINGS">FIG. 12</figref>).</p>
<p id="p-0327" num="0329">Block <b>510</b> then directs the microprocessor <b>52</b> to produce an output message by inserting the message in the shared buffer <b>88</b> (shown in <figref idref="DRAWINGS">FIG. 3</figref>) at a next message store <b>120</b> after the message store referenced by the &#x201c;CurrentPointer&#x201d; <b>124</b>. Block <b>510</b> further directs the microprocessor <b>52</b> to update the &#x201c;CurrentPointer&#x201d; <b>124</b> to reference the message store <b>120</b> in the shared buffer to which the output message was written, such that the &#x201c;CurrentPointer&#x201d; always points to the last message written to the shared buffer <b>88</b>.</p>
<p id="p-0328" num="0330">In this embodiment, the output messages are produced by copying the input message into the shared buffer. In other embodiments, output messages having different message identifiers or differing format to the input messages may be produced, as described above.</p>
<p id="p-0329" num="0331">In this embodiment the input messages each represent one user input combination (for example a mouse drag or a character typed) and the output messages produced represent the same user input combination. However, in other embodiments, the input messages may represent several user input combinations and the output message produced by the server may represent the same user input combinations, or may combine user input combinations in a plurality of input messages into a singe output message.</p>
<p id="p-0330" num="0332">Block <b>512</b> then directs the microprocessor <b>52</b> to determine the message type associated with the input message, by reading the message identifier. In this embodiment, since the output message is a copy of the corresponding input message the message type may be determined by reading the message identifier in either the input message or the output message.</p>
<p id="p-0331" num="0333">The process then continues at block <b>514</b>, which directs the microprocessor <b>52</b> to determine whether the message is a control type message (i.e. the message identifier&#x2267;20). If the message is not a control type message then it is either a persistent or non-persistent message type and the microprocessor <b>52</b> is directed back to <b>502</b>, <b>504</b>, and <b>506</b> to wait for the next message to be received in the respective Rx buffers.</p>
<p id="p-0332" num="0334">In general, input messages of the persistent message type and the non-persistent message type do not require further processing by the server <b>12</b>. For example, in this embodiment cursor messages received at the server representing &#x201c;MouseDrag&#x201d; and &#x201c;MouseMove&#x201d; user input signals are copied into the shared buffer <b>88</b> as pointer messages, which do not require execution of server functions other than transmitting to the client computers.</p>
<p id="p-0333" num="0335">If at block <b>514</b> the message identifier is greater than or equal to 20, then the message is a control message which directs the server to execute a server function. The process then continues at block <b>516</b>, which directs the microprocessor <b>52</b> to determine whether the message identifier is 20, which corresponds to the &#x201c;ClearScreen&#x201d; message (Shown in <figref idref="DRAWINGS">FIG. 12</figref> at <b>348</b>). If the message identifier is 20, then the process continues at block <b>518</b>, which directs the microprocessor <b>52</b> to set the &#x201c;StartPointer&#x201d; <b>122</b> (shown in <figref idref="DRAWINGS">FIG. 3</figref>) to refer to a memory store <b>120</b> in the shared buffer <b>88</b> after the location at which the &#x201c;ClearScreen&#x201d; message was inserted.</p>
<p id="p-0334" num="0336">Advantageously, by changing the &#x201c;StartPointer&#x201d; <b>122</b> to refer to the location after the &#x201c;ClearScreen&#x201d; message, client computers joining the multiple-party communication only receive messages subsequent to the last &#x201c;ClearScreen&#x201d; message, thus avoiding displaying a plurality of persistent messages in quick succession followed by a &#x201c;ClearScreen&#x201d; message, which may clear the screen before the user has had time to view the content on the display area <b>472</b>.</p>
<p id="p-0335" num="0337">Alternatively in other embodiments, the &#x201c;StartPointer&#x201d; <b>122</b>, the &#x201c;CurrentPointer&#x201d; <b>124</b> and the &#x201c;Client SentPointers&#x201d; <b>126</b> may be set to nil, as they were when communication just started. This will have the effect of overwriting all messages in the shared buffer <b>88</b>. Accordingly, in this alternative embodiment, the shared buffer <b>88</b> may be saved to persistent memory prior to overwriting any previous messages.</p>
<p id="p-0336" num="0338">If at block <b>516</b> the message identifier is not 20, then the process continues at block <b>520</b>, which directs the microprocessor <b>52</b> to determine whether the message identifier is 21, which corresponds to the &#x201c;Save&#x201d; message (Shown in <figref idref="DRAWINGS">FIG. 12</figref> at <b>350</b>). If the message identifier is 21, then the process continues at block <b>522</b>, which directs the microprocessor <b>52</b> to copy all persistent messages (i.e. the messages having a message identifier &#x3c;10) from the shared buffer <b>88</b> to the client saved content store <b>100</b> on the server hard drive <b>58</b>. In this embodiment, only the persistent type messages are saved to the hard drive in response to the client save message. Client saved content may be saved in a server page storage format, described later herein.</p>
<p id="p-0337" num="0339">If at block <b>520</b> the message identifier is not 21, then the process continues at block <b>524</b>, which directs the microprocessor <b>52</b> to determine whether the message identifier is 22, which corresponds to the &#x201c;Open&#x201d; message (Shown in <figref idref="DRAWINGS">FIG. 12</figref> at <b>352</b>). If the message identifier is 22, then the process continues at block <b>526</b>, which directs the microprocessor <b>52</b> to save the shared buffer <b>88</b> in the communication page store <b>104</b> of the server hard drive <b>58</b> and then to clear the shared buffer by setting both the &#x201c;StartPointer&#x201d; <b>122</b> and the &#x201c;CurentPointer&#x201d; <b>124</b> to nil, which has the effect of causing further messages to overwrite previously saved messages in the shared buffer <b>88</b>.</p>
<p id="h-0021" num="0000">Server Page Storage Format</p>
<p id="p-0338" num="0340">In general, when one of the client computers transmits a control message such as the &#x201c;ClearScreen&#x201d;, &#x201c;Open&#x201d;, &#x201c;PageChange&#x201d;, &#x201c;Disconnect&#x201d; or &#x201c;Shutdown&#x201d; control messages, messages in the shared buffer <b>88</b> representing content displayed on the display area <b>472</b> are written to the server hard drive <b>58</b> as pages under control of the page manager, which is instantiated by launching the program codes <b>74</b> in the sever processor circuit <b>50</b> shown in <figref idref="DRAWINGS">FIG. 2</figref>, as described earlier herein. The page manager handles paging requests by causing messages to be saved on and/or read from the communication page store <b>104</b> on the server hard drive <b>58</b>, without the client computer users having to enter any filenames. In order to maintain a complete record of the multiple-party communication, all persistent, non-persistent and control messages are saved by the page manager when a page change request is received from one of the client computers.</p>
<p id="p-0339" num="0341">A page thus generally includes a plurality of messages that define content on the display area (and which may be retransmitted to re-create the content, if desired).</p>
<p id="p-0340" num="0342">In this embodiment, the communication page store <b>104</b> includes a dedicated sub-directory created in a directory structure that saves communication pages by date and time. For example, for a communication having a communication name &#x201c;MyTravel&#x201d; the communication pages are saved in a sub-directory &#x201c;\2007-03-23\15-39-10\My Travel\&#x201d;. Within the &#x201c;MyTravel&#x201d; directory each page has a corresponding sub-directory (for example &#x201c;\2007-03-23\15-39-10\My Travel\Page1\ and/or &#x201c;\2007-03-23\15-39-10\My Travel\Page2\&#x201d;).</p>
<p id="p-0341" num="0343">For example, if the current page is Page 2, and a control message is received that will result in a new page being displayed (by an &#x201c;Open&#x201d;, &#x201c;PageChange&#x201d; or &#x201c;Quit&#x201d; message, for example) messages are saved to the &#x201c;\2007-03-23\15-39-10\My Travel\Page2\&#x201d; sub-directory.</p>
<p id="p-0342" num="0344">If during the communication Page 2 is again displayed, and content added to the page, then the original page is saved to a file in the &#x201c;Page 2&#x201d; subdirectory under a filename &#x201c;Page2-1&#x201d;, or &#x201c;Page2-2&#x201d;. Alternatively, in some communications memory allocated to the shared buffer <b>88</b> may be limited, and when the sheared buffer is overwritten, content is first written to a Page file such as &#x201c;Page2-3&#x201d;, for example.</p>
<p id="p-0343" num="0345">Thus, in this case, the directory &#x201c;\2007-03-23\15-39-10\My Travel\Page2\ will include files Page2-1, Page2-2, and Page3-3.</p>
<p id="p-0344" num="0346">Each of the files (e.g. Page2-1, Page2-2, and Page3-3) includes one or more messages separated by the zero terminator (#0 or byte <b>30</b> of the messages shown in <figref idref="DRAWINGS">FIG. 12</figref>). Each file further includes a header including identifier information such as, when the file was created, the number of clients in the communication, the communication name &#x26; password, and other parameters associated with the communication. For example the file may include the following header in a text format:</p>
<p id="p-0345" num="0347">FileCreated=14-34-23</p>
<p id="p-0346" num="0348">NumberOfUsers=5</p>
<p id="p-0347" num="0349">CommunicationName=My Travel</p>
<p id="p-0348" num="0350">Password=travel</p>
<p id="p-0349" num="0351">#0</p>
<p id="p-0350" num="0352">&#x3c;messages&#x3e;</p>
<p id="p-0351" num="0353">The &#x201c;#0&#x201d; zero terminator is followed by a plurality of messages, each being separated from the next message by the zero terminator.</p>
<p id="p-0352" num="0354">Still referring to <figref idref="DRAWINGS">FIG. 15A</figref>, block <b>526</b> further directs the microprocessor <b>52</b> to generate a clear screen message (message <b>348</b> shown in <figref idref="DRAWINGS">FIG. 8</figref>) and to load the message into the shared buffer <b>88</b> for transmission to the client computers <b>14</b>, <b>16</b> and <b>18</b>. The clear screen message <b>348</b> causes content associated with messages previously transmitted to the respective client computers <b>14</b>, <b>16</b>, and <b>18</b> to be cleared, when the message is received at the respective client computers. Block <b>526</b> also directs the microprocessor <b>52</b> to read the number of pages from the &#x201c;List of Pages&#x201d; field <b>194</b> (shown in <figref idref="DRAWINGS">FIG. 6</figref>) and to set the &#x201c;Current Page&#x201d; field <b>196</b> to a next number in sequence, to update the &#x201c;List of Pages&#x201d; field <b>194</b>, thus creating new page on the server as described above.</p>
<p id="p-0353" num="0355">Block <b>526</b> further directs the microprocessor <b>52</b> to read the filename in the message and to load messages saved under the filename from the client saved content store <b>100</b> into the shared buffer <b>88</b>, to set the &#x201c;StartPointer&#x201d; <b>122</b> to reference the first loaded message. As the shared buffer <b>88</b> is loaded with subsequent messages read from the page file, the &#x201c;CurrentPointer&#x201d; <b>124</b> is incremented to reference the last loaded message store <b>120</b>. Block <b>526</b> also directs the microprocessor <b>52</b> to set the &#x201c;CatchUpFlag&#x201d; to active and the SentPointer to nil, so that all client computers catch up with the newly opened page.</p>
<p id="p-0354" num="0356">If at block <b>524</b>, the message identifier is not 22, then the process continues at block <b>528</b> on <figref idref="DRAWINGS">FIG. 15B</figref>. Referring to <figref idref="DRAWINGS">FIG. 15B</figref>, block <b>528</b> directs the microprocessor <b>52</b> to determine whether the message identifier is 23, in which case the control message is a &#x201c;PageChange&#x201d; Message (shown in <figref idref="DRAWINGS">FIG. 12</figref> at <b>354</b>). If the message is a &#x201c;PageChange&#x201d; message, then the process continues at block <b>530</b>, which directs the microprocessor <b>52</b> to read the &#x201c;PageFlag&#x201d; in the message. If the &#x201c;PageFlag&#x201d; is &#x201c;0&#x201d; then the process continues at block <b>532</b>, which directs the microprocessor <b>52</b> to determine whether the current displayed page (identified by the current page field <b>196</b> shown in <figref idref="DRAWINGS">FIG. 6</figref>) is the first page in the &#x201c;List of Pages&#x201d; field <b>194</b> in the communication table entry <b>180</b> (shown in <figref idref="DRAWINGS">FIG. 6</figref>). If the current displayed page is the first page then no action is taken and the microprocessor <b>52</b> is directed back to blocks <b>502</b>, <b>504</b>, and <b>506</b>.</p>
<p id="p-0355" num="0357">If at block <b>532</b> the current displayed page is not the first page then the process continues at block <b>534</b>, which directs the microprocessor <b>52</b> to save the shared buffer <b>88</b> associated with the current displayed page in the communication page store <b>104</b> on the hard drive <b>58</b>, clear the contents of the shared buffer <b>88</b> by setting both the &#x201c;StartPointer&#x201d; <b>122</b> and the &#x201c;CurentPointer&#x201d; <b>124</b> to nil, and then to decrement the &#x201c;Current Page&#x201d; field <b>196</b> to point to the new page to be displayed. Block <b>534</b> further directs the microprocessor <b>52</b> to generate a clear screen message (i.e. the message <b>348</b> shown in <figref idref="DRAWINGS">FIG. 8</figref>) and to load the message into the shared buffer <b>88</b> for transmission to the client computers <b>14</b>, <b>16</b> and <b>18</b>. The clear screen message <b>348</b> is operable to clear content associated with messages previously transmitted to the respective client computers <b>14</b>, <b>16</b>, and <b>18</b> when received at the respective client computers.</p>
<p id="p-0356" num="0358">The process then continues at block <b>536</b>, which directs the microprocessor <b>52</b> to read the saved page corresponding to the &#x201c;Current Page&#x201d; field <b>196</b> from the communication page store <b>104</b> on the server hard drive <b>58</b> into the shared buffer <b>88</b>. Block <b>536</b> also directs the microprocessor <b>52</b> to set the &#x201c;CatchUpFlag&#x201d; to active and to set the &#x201c;SentPointer&#x201d; to &#x201c;nil&#x201d;. This has the effect of transmitting all messages loaded in the shared buffer to each of the client computers <b>14</b>, <b>16</b> and <b>18</b>, since each user must &#x201c;catch up&#x201d; with the changed page.</p>
<p id="p-0357" num="0359">If at block <b>530</b> the &#x201c;PageFlag&#x201d; is not &#x201c;0&#x201d; then the &#x201c;PageFlag&#x201d; is &#x201c;1&#x201d; and the process continues at block <b>538</b>, which directs the microprocessor <b>52</b> to determine whether the current displayed page is the last page in the &#x201c;List of Pages&#x201d; field <b>194</b>, in which case the process continues at block <b>540</b>. Block <b>540</b> directs the microprocessor <b>52</b> to save the shared buffer <b>88</b> associated with the current page in the communication page store <b>104</b> on the hard drive <b>58</b> and clear the contents of the shared buffer <b>88</b> by setting both the &#x201c;StartPointer&#x201d; <b>122</b> and the &#x201c;CurentPointer&#x201d; <b>124</b> to nil. Block <b>540</b> also directs the microprocessor <b>52</b> to increment the &#x201c;Current Page&#x201d; field <b>196</b> to point to the new current page to be displayed, to set the &#x201c;CatchUpFlag&#x201d; to active, and to set the &#x201c;SentPointer&#x201d; to &#x201c;nil&#x201d;. Block <b>540</b> further directs the microprocessor <b>52</b> to generate a clear screen message (i.e. the message <b>348</b> shown in <figref idref="DRAWINGS">FIG. 8</figref>) and to load the message into the shared buffer <b>88</b> for transmission to the client computers <b>14</b>, <b>16</b> and <b>18</b>. The clear screen message <b>348</b> is operable to clear content associated with messages previously transmitted to the respective client computers <b>14</b>, <b>16</b>, and <b>18</b> when received at the respective client computers. The codes in block <b>540</b> essentially cause the server to generate a new blank page.</p>
<p id="p-0358" num="0360">If at block <b>538</b>, the current displayed page is not the last page then the process continues at block <b>542</b>, which directs the microprocessor <b>52</b> to save the shared buffer <b>88</b> associated with the current displayed page in the communication page store <b>104</b> on the hard drive <b>58</b>, to clear the contents of the shared buffer <b>88</b> by setting both the &#x201c;StartPointer&#x201d; <b>122</b> and the &#x201c;CurentPointer&#x201d; <b>124</b> to nil, and then to increment the &#x201c;Current Page&#x201d; field <b>196</b> to point to the new page to be displayed. Block <b>542</b> further directs the microprocessor <b>52</b> to generate a clear screen message (i.e. the message <b>348</b> shown in <figref idref="DRAWINGS">FIG. 8</figref>) and to load the message into the shared buffer <b>88</b> for transmission to the client computers <b>14</b>, <b>16</b> and <b>18</b>. The clear screen message <b>348</b> is operable to clear content associated with messages previously transmitted to the respective client computers <b>14</b>, <b>16</b>, and <b>18</b> when received at the respective client computers. The process then continues at block <b>536</b> as described above.</p>
<p id="p-0359" num="0361">If at block <b>528</b> the message identifier is not 23, then the process continues at block <b>544</b>, which directs the microprocessor <b>52</b> to determine whether the message identifier is 24, in which case the message corresponds to the &#x201c;Disconnect&#x201d; message (shown in <figref idref="DRAWINGS">FIG. 12</figref> at <b>356</b>). If the message identifier is 24, then the process continues at block <b>546</b>, which directs the microprocessor <b>52</b> to set the &#x201c;KeepRunningIdleFlag&#x201d; <b>188</b> in the communication table <b>80</b> to active.</p>
<p id="p-0360" num="0362">The process then continues at block <b>548</b>, which directs the microprocessor <b>52</b> to remove the client corresponding to the &#x201c;UID&#x201d; in the message from the client table <b>90</b> in the RAM <b>56</b> and to delete the Rx and Tx buffers for the client computer.</p>
<p id="p-0361" num="0363">The process then continues at block <b>550</b>, which directs the microprocessor <b>52</b> to determine whether the client table is empty (i.e. there are no more clients in the multiple-party communication). If the client table is empty then the process continues at block <b>552</b>, which directs the microprocessor <b>52</b> to determine whether the &#x201c;KeepRunningIdleFlag&#x201d; flag <b>188</b> in the communication table <b>80</b> is active (which it will be in this case due to block <b>546</b> having been executed), in which case the process continues at block <b>558</b> and the multiple-party communication is suspended. However the communication table entry <b>180</b> (shown in <figref idref="DRAWINGS">FIG. 6</figref>) remains in the communication table <b>80</b> in the RAM <b>56</b>, and client computer users may still join the multiple-party communication at a later time.</p>
<p id="p-0362" num="0364">If at block <b>550</b> the client table is not empty, then the multiple-party communication should continue for other client computers still in the multiple-party communication, in which case the microprocessor <b>52</b> is directed back to blocks <b>502</b>, <b>504</b>, and <b>506</b> in <figref idref="DRAWINGS">FIG. 15A</figref>.</p>
<p id="p-0363" num="0365">If at block <b>544</b> the message identifier is not 24, then the process continues at block <b>554</b>, which directs the microprocessor <b>52</b> to determine whether the message identifier is 25, in which case the message is a &#x201c;ShutDown&#x201d; message (shown in <figref idref="DRAWINGS">FIG. 12</figref> at <b>358</b>). The process then continues at block <b>556</b>, which directs the microprocessor <b>52</b> to set the &#x201c;KeepRunningIdleFlag&#x201d; flag to not active.</p>
<p id="p-0364" num="0366">The process then continues at blocks <b>548</b> and <b>550</b>, as described above. If at block <b>552</b>, the &#x201c;KeepRunningIdleFlag&#x201d; flag <b>188</b> is not active (which it will be in this case due to block <b>556</b> having been executed), then the process continues at block <b>560</b>. Block <b>560</b> directs the microprocessor <b>52</b> to save the shared buffer in the communication page store <b>104</b> on the server hard drive <b>58</b>, to delete the shared buffer <b>88</b> from RAM <b>56</b>, and to delete the communication table entry <b>180</b> from the communication table <b>80</b>. This has the effect of shutting down the multiple-party communication. However a record of all multiple-party communication messages (persistent and non-persistent) remains saved in the communication page store <b>104</b> on the server hard drive <b>58</b>.</p>
<p id="h-0022" num="0000">Server Upload of Data</p>
<p id="p-0365" num="0367">When one of the client computer users invokes either the &#x201c;ImageShow&#x201d; or the &#x201c;Clipboard&#x201d; functions by clicking on the function invocation buttons <b>474</b> or <b>488</b> and then actuating a pointing device actuator button while the cursor is within the display area <b>472</b>, an upload of data is initiated by the client computer to the server <b>12</b>. In general, upload data is received by the server <b>12</b> and stored in the upload data store <b>106</b> on the server hard drive <b>58</b>. Alternatively the upload data may be stored in an upload data store (not shown) in the RAM <b>56</b>.</p>
<p id="p-0366" num="0368">In the embodiment shown, the user interface embodiment shown in <figref idref="DRAWINGS">FIG. 11</figref> may not be capable of displaying certain types of data that may be uploaded from client computer clipboard memory to the server, such as formatted data from other application programs, for example. Accordingly when the server <b>12</b> receives upload data (for example as an HTTP POST request from a client computer), the server reads the data to determine whether the upload data requires conversion. If the upload data is already in a supported image format then no conversion is required and the data is stored in the upload data store <b>106</b> and associated with the data identifier. If the upload data is not of a supported image format, the server invokes a conversion function to convert the upload data into a supported image format. Accordingly, the server may be configured with a plurality of common conversion functions covering many commonly used formatted data types (for example Microsoft Word and Excel applications). Conversion function program codes for producing image data from many formatted data types are generally available for license by software vendors and third party vendors.</p>
<p id="h-0023" num="0000">Server Transmit Process</p>
<p id="p-0367" num="0369">Referring to <figref idref="DRAWINGS">FIG. 16</figref> a flowchart of blocks of code for directing the processor circuit <b>50</b> (shown in <figref idref="DRAWINGS">FIG. 2</figref>) to process messages in the shared buffer <b>88</b> for transmission to the client computers <b>14</b>, <b>16</b> and <b>18</b> is shown generally at <b>580</b>. The process <b>580</b> is executed by the microprocessor <b>52</b> for each of the client computers <b>14</b>, <b>16</b>, and <b>18</b> and messages are loaded into each of the respective Tx buffers <b>94</b> in the server RAM <b>56</b>.</p>
<p id="p-0368" num="0370">The process begins at block <b>584</b>, which directs the microprocessor <b>52</b> to determine whether the &#x201c;SentPointer&#x201d; <b>126</b> (shown in <figref idref="DRAWINGS">FIG. 3</figref>) for the client computer is equal to the &#x201c;CurrentPointer&#x201d; <b>124</b>. If the &#x201c;SentPointer&#x201d; <b>126</b> is equal to the &#x201c;CurrentPointer&#x201d; <b>124</b>, then the process continues at block <b>586</b>, which directs the microprocessor <b>52</b> to determine whether the &#x201c;CatchUpFlag&#x201d; <b>208</b> is active for the client computer. If the &#x201c;CatchUpFlag&#x201d; is active, then block <b>588</b> directs the microprocessor <b>52</b> to set the &#x201c;CatchUpFlag&#x201d; <b>208</b> to not active, since the client computer has &#x201c;caught up&#x201d; with the multiple-party communication. The microprocessor <b>52</b> is then directed back to block <b>584</b>, and the process <b>580</b> is repeated.</p>
<p id="p-0369" num="0371">If at block <b>584</b> the &#x201c;SentPointer&#x201d; <b>126</b> is not equal to the &#x201c;CurrentPointer&#x201d; <b>124</b> then the process continues at block <b>590</b>, which directs the microprocessor <b>52</b> to determine whether the message identifier for the message in the next shared buffer store after the store indicated by the &#x201c;SentPointer&#x201d; is less than 10, indicating that the message is a persistent message. If the message identifier is less then 10, then the process continues at block <b>592</b>, which directs the microprocessor <b>52</b> to load the message referenced by the &#x201c;SentPointer&#x201d; <b>210</b> (shown in <figref idref="DRAWINGS">FIG. 7</figref>) into the Tx buffer <b>94</b> corresponding to the client. Advantageously, in this embodiment, all client computers that have joined the multiple-party communication receive output messages that are associated with the persistent message type.</p>
<p id="p-0370" num="0372">The process then continues at block <b>596</b>, which directs the microprocessor <b>52</b> to update the &#x201c;SentPointer&#x201d; for the client to indicate that the message has been transmitted to the client computer. The microprocessor <b>52</b> is then directed back to block <b>584</b>, and the process <b>580</b> is repeated.</p>
<p id="p-0371" num="0373">If at block <b>590</b> the message identifier is greater than or equal to 10, then the message is a non-persistent or control message and the process continues at block <b>594</b>, which directs the microprocessor <b>52</b> to determine whether the &#x201c;CatchUpFlag&#x201d; for the client computer is set active. If the &#x201c;CatchUpFlag&#x201d; is not active then the process continues at block <b>592</b> as described above the non-persistent and/or control message is transmitted to the client computer.</p>
<p id="p-0372" num="0374">Advantageously, when the &#x201c;CatchUpFlag&#x201d; is set active for a client computer, the client computer does not meet the criterion for transmission of the message and the non-persistent and control message are not transmitted to the corresponding client computer. If at block <b>594</b> the &#x201c;CatchUpFlag&#x201d; is active, then the process continues at block <b>596</b>, as described above.</p>
<p id="p-0373" num="0375">Referring to <figref idref="DRAWINGS">FIG. 17</figref> a flowchart of blocks of code for directing the processor circuit <b>50</b> (shown in <figref idref="DRAWINGS">FIG. 2</figref>) to transmit messages from the server side Tx buffers <b>94</b> (for each of the client computers <b>14</b>, <b>16</b> and <b>18</b>) is shown generally at <b>597</b>. The process begins at block <b>598</b>, which directs the microprocessor <b>52</b> to determine whether there are any messages in the Tx buffer. If there are messages in the Tx buffer to be sent, then the process continues at block <b>600</b>, which directs the microprocessor <b>52</b> to write the messages to the network interface <b>62</b> of the I/O port <b>60</b>. The process then continues at block <b>598</b>, thus repeating blocks <b>598</b> and <b>600</b>.</p>
<p id="p-0374" num="0376">If at block <b>598</b> there are no further messages to be transmitted to the client then the process repeats block <b>598</b>.</p>
<p id="p-0375" num="0377">Advantageously, only clients that meet the criterion of being &#x201c;caught up&#x201d; with the multiple-party communication are transmitted the non-persistent messages in order to avoid sending generally confusing non-persistent mouse movements to clients who have joined the multiple-party communication late. Once the client has caught up with the multiple-party communication the client then receives all non-persistent messages representing their own pointer movements as well as pointer movements of other clients in the multiple-party communication.</p>
<p id="p-0376" num="0378">In the embodiment shown in <figref idref="DRAWINGS">FIG. 16</figref> control messages will also be transmitted to the client computers, since control messages are also stored in the shared buffer. As will be seen later, with the exception of the &#x201c;ClearScreen&#x201d; message, the control messages transmitted to the clients do not result in any changes to the client display area <b>472</b> and are generally ignored by the client computers.</p>
<p id="p-0377" num="0379">Messages loaded into the Tx buffers <b>94</b> of the respective client computers are transmitted to the client computers through the network <b>20</b> in the order in which they are loaded into the buffer (i.e. on a first-in-first-out FIFO basis).</p>
<p id="h-0024" num="0000">Client Receive Process</p>
<p id="p-0378" num="0380">In general, the message receiver program codes stored in the store <b>284</b> of the program memory (shown in <figref idref="DRAWINGS">FIG. 9</figref>) direct the microprocessor <b>262</b> to receive and process messages transmitted to the client computer <b>14</b>, <b>16</b>, and <b>18</b> from the server <b>12</b>.</p>
<p id="p-0379" num="0381">Referring to <figref idref="DRAWINGS">FIG. 18A</figref> a flowchart of blocks of code for directing the processor circuit <b>260</b> (shown in <figref idref="DRAWINGS">FIG. 9</figref>) to receive messages from the server <b>12</b> is shown generally at <b>620</b>. The process <b>620</b> starts at block <b>621</b> when a message is received at the interface <b>272</b> of the I/O port <b>270</b>.</p>
<p id="p-0380" num="0382">Block <b>622</b> then directs the microprocessor <b>262</b> to write the message into the client side Rx buffer <b>290</b> (shown on <figref idref="DRAWINGS">FIG. 9</figref>). Block <b>623</b> then directs the microprocessor <b>262</b> to read the message identifier (MID) and client computer identifier (UID) included in the message.</p>
<p id="p-0381" num="0383">The process continues at block <b>624</b>, which directs the microprocessor <b>262</b> to determine whether the message identifier is 1. If the message identifier is 1, then the message corresponds to the &#x201c;KeyTyped&#x201d; message <b>338</b> (shown in <figref idref="DRAWINGS">FIG. 12</figref>), and the process continues at block <b>626</b>, which directs the microprocessor <b>262</b> to read the bytes in the message corresponding to color, font identifier, font style identifier, font size, the character to be displayed, and the X and Y coordinates of the position at which to display the character. The process then continues at block <b>628</b>, which directs the microprocessor <b>262</b> to call a function in the image display program codes <b>289</b> for drawing the character on the display area <b>472</b>.</p>
<p id="p-0382" num="0384">If at block <b>624</b>, the message identifier is not 1, then the process continues at block <b>630</b>, which directs the microprocessor <b>262</b> to determine whether the message identifier is 2. If the message identifier is 2, then the message corresponds to the &#x201c;MouseDrag&#x201d; message <b>340</b>, which is a pointer message. Block <b>631</b> then directs the microprocessor <b>262</b> to read the bytes in the message corresponding to color, line width, starting coordinates Xold and Yold, and ending coordinates Xnew and Ynew.</p>
<p id="p-0383" num="0385">Block <b>632</b> then directs the microprocessor <b>262</b> to call a function in the image display program codes <b>289</b> for drawing a line of specified color and width between the starting X and Y coordinates and the ending X and Y coordinates on the display area <b>472</b>.</p>
<p id="p-0384" num="0386">The process then continues at block <b>633</b> which directs the microprocessor <b>262</b> to determine whether the UID read in block <b>631</b> matches one of the UID's in the pointer table <b>295</b> stored in the RAM <b>266</b>. The pointer table <b>295</b> includes an entry (not shown) for each client computer in the multiple-party communication and each entry includes the UID and the current X and Y coordinate position of the pointer associated with the UID. If none of the pointer table entries has a UID that matches the UID read at block <b>631</b>, then the process continues at block <b>635</b>, which directs the microprocessor <b>262</b> to add a new entry (i.e. UID, Xnew, Ynew) to the pointer table <b>295</b>.</p>
<p id="p-0385" num="0387">The process then continues at block <b>637</b>, which directs the microprocessor <b>262</b> to call a function in the image display program codes <b>289</b> to cause a pointer associated with the UID to be displayed at the Xnew and Ynew coordinate position on the display area <b>472</b>.</p>
<p id="p-0386" num="0388">If at block <b>633</b> the UID read in block <b>631</b> matches one of the pointer table entries, then the process continues at block <b>634</b>, which directs the microprocessor <b>262</b> to call a function in the image display program codes <b>289</b> for moving the image of the pointer from its current position (read from the pointer table) to the Xnew and Ynew coordinate position on the display area <b>472</b>. Block <b>648</b> also directs the microprocessor <b>262</b> to update the coordinate position in the pointer table <b>295</b> for the pointer associated with the UID read at block <b>631</b> to the new coordinates Xnew and Ynew.</p>
<p id="p-0387" num="0389">If at block <b>630</b>, the message identifier is not 2, then the process continues at block <b>636</b>, which directs the microprocessor <b>262</b> to determine whether the message identifier is 3. If the message identifier is 3 then the message corresponds to the &#x201c;ImageShow&#x201d; message format <b>342</b>. Block <b>638</b> then directs the microprocessor <b>262</b> to read the bytes in the message corresponding to the data identifier of the image, and the X and Y coordinates at which an upper left hand corner of the image is to be positioned on the display area <b>472</b>. Block <b>640</b> then directs the microprocessor <b>262</b> to download the data associated with the data identifier from the server <b>12</b>. Downloading may be performed in accordance with any conventional file download protocol such as file transfer protocol (FTP), for example. Alternatively block <b>640</b> may direct the microprocessor <b>262</b> to initiate an HTTP GET request to cause the image file to be downloaded to the client computer from the server <b>12</b>.</p>
<p id="p-0388" num="0390">The process then continues at block <b>642</b>, which directs the microprocessor <b>262</b> to call a function in the image display program codes <b>289</b> for displaying the image at the X and Y coordinates on the display area <b>472</b>.</p>
<p id="p-0389" num="0391">If at block <b>636</b>, the message identifier is not 3, then the process continues at block <b>637</b> on <figref idref="DRAWINGS">FIG. 18B</figref>. Referring to <figref idref="DRAWINGS">FIG. 18B</figref>, block <b>637</b> directs the microprocessor <b>262</b> to determine whether the message identifier is 4. If the message identifier is 4, then the message corresponds to the &#x201c;LinkCreate&#x201d; message format <b>344</b>, in which case block <b>639</b> then directs the microprocessor <b>262</b> to read the bytes in the message corresponding to the &#x201c;UID&#x201d;, the X<b>1</b>, Y<b>1</b>, X<b>2</b>, and Y<b>2</b> coordinates representing coordinate positions of corners of the linked area <b>497</b> (shown in <figref idref="DRAWINGS">FIG. 11</figref>), and the filename or internet address in the message <b>344</b>.</p>
<p id="p-0390" num="0392">The process then continues at block <b>641</b>, which directs the microprocessor <b>262</b> to store the filename or internet address and coordinates X<b>1</b>, X<b>2</b>, Y<b>1</b>, and Y<b>2</b> in the filename/URL store <b>296</b> in the RAM <b>266</b> (shown in <figref idref="DRAWINGS">FIG. 9</figref>). As described above in connection with block <b>388</b> (shown in <figref idref="DRAWINGS">FIG. 13A</figref>), a mouse click occurring within one of the linked areas defined by hyperlink information stored in the store <b>296</b> causes the associated filename or internet address to be opened in the display area <b>472</b>.</p>
<p id="p-0391" num="0393">If at block <b>637</b>, the message identifier is not 4, then the process continues at block <b>644</b>, which directs the microprocessor <b>262</b> to determine whether the message identifier is 10. If the message identifier is 10, then the message corresponds to the &#x201c;MouseMove&#x201d; message format <b>346</b>, which is a pointer message. Block <b>645</b> then directs the microprocessor <b>262</b> to read the bytes in the message corresponding to the &#x201c;UID&#x201d;, and the Xnew and Ynew coordinates representing the ending position of the mouse pointer.</p>
<p id="p-0392" num="0394">The process then continues at block <b>646</b> which directs the microprocessor <b>262</b> to determine whether the UID read in block <b>645</b> matches one of the UID's in the pointer table <b>295</b> stored in the RAM <b>266</b>. If none of the pointer table entries has a UID that matches the UID read at block <b>645</b>, then the process continues at block <b>646</b>, which directs the microprocessor <b>262</b> to add a new entry (i.e. UID, Xnew, Ynew) to the pointer table <b>295</b>.</p>
<p id="p-0393" num="0395">The process then continues at block <b>649</b>, which directs the microprocessor <b>262</b> to call a function in the image display program codes <b>289</b> to cause a pointer associated with the UID to be displayed at the Xnew and Ynew coordinate position on the display area <b>472</b>.</p>
<p id="p-0394" num="0396">If at block <b>646</b> the UID read in block <b>645</b> matches one of the pointer table entries, then the process continues at block <b>648</b>, which directs the microprocessor <b>262</b> to call a function in the image display program codes <b>289</b> for moving the image of the pointer from its current position (read from the pointer table <b>295</b>) to the Xnew and Ynew coordinate position on the display area <b>472</b>. Block <b>648</b> also directs the microprocessor <b>262</b> to update the coordinate position in the pointer table <b>295</b> for the pointer associated with the UID read at block <b>645</b> to the new coordinates Xnew and Ynew.</p>
<p id="p-0395" num="0397">Advantageously, when the client computer receives its own &#x201c;MouseMove&#x201d; messages back from the server as pointer messages, the client computer displays a pointer corresponding to the pointer message. Accordingly, in this embodiment, the client computer may display a cursor representing a current (real time) position of the client computer pointing device and further displays the pointer corresponding to its own &#x201c;MouseMove&#x201d; messages, which represent the position of the client computer's pointing device as seen by the server <b>12</b> and the other client computers in the multiple-party communication. Each client computer is thus provided with feedback by receiving their own pointer message, which causes display of their own pointer on their display.</p>
<p id="p-0396" num="0398">Furthermore, by displaying both the client computer cursor, the client computer's pointer, and the other client computer pointers on each of the client computer's respective display areas <b>472</b>, an awareness of what other users are doing during the multiple-party communication is provided. For example the user of the client computer <b>14</b> may cause their cursor <b>496</b> to move to point to specific content displayed on the display area <b>472</b> and the users of other client computers <b>16</b> and <b>18</b> will see corresponding movements of the pointer <b>499</b> corresponding to the client computer <b>14</b> on their respective displays. The user of client computer <b>14</b> will also be able to view their own pointer in relation to their cursor, which may be useful for guiding the user's actions.</p>
<p id="p-0397" num="0399">If at block <b>644</b>, the message identifier is not 10, then the process continues at block <b>654</b>, which directs the microprocessor <b>262</b> to determine whether the message identifier is 20. If the message identifier is 20, then the message corresponds to the &#x201c;ClearScreen&#x201d; message format <b>348</b>. Block <b>656</b> then directs the microprocessor <b>262</b> to call a function in the image display program codes <b>289</b> for clearing the display area <b>472</b>.</p>
<p id="p-0398" num="0400">If at block <b>654</b> the message identifier is not 11, then the message is ignored and the microprocessor <b>262</b> is directed back to block <b>621</b> to wait for the next message to be received. It should be readily appreciated that control messages having a message identifier of &#x2267;20 received by the client computer <b>14</b>, <b>16</b>, and <b>18</b> are ignored in the process <b>620</b>, which only responds to persistent messages and non-persistent messages.</p>
<p id="p-0399" num="0401">Publishing Content</p>
<p id="p-0400" num="0402">In another embodiment, a user of one of the client computers <b>14</b>, <b>16</b>, or <b>18</b> may wish to publish content created during a multiple-party communication to facilitate viewing by other computers in communication with the network <b>20</b>. For example, a client computer user may wish to record a page that may be later viewed by another user, who may not have joined the multiple-party communication. Alternatively a client computer user may wish to record content created in a single client communication and then make the page(s) publicly available for viewing in similar fashion to that provided by web sites on the internet.</p>
<p id="p-0401" num="0403">Referring to <figref idref="DRAWINGS">FIG. 11</figref>, when a client computer user clicks on the &#x201c;Publish&#x201d; function invocation button <b>493</b> on the user interface <b>470</b>, a dialogue window is displayed (not shown), which prompts the user to enter a filename under which the multiple-party communication will be published (for example &#x201c;travel.web&#x201d;). The dialogue window may additionally prompt the user to enter a description for the published page, such as &#x201c;My European Vacation&#x201d;, for example. When the user enters the filename the server processor circuit <b>50</b> (shown in <figref idref="DRAWINGS">FIG. 2</figref>) causes all persistent messages representing content in a currently displayed page to be written to the published communication store <b>108</b> on the server hard drive <b>58</b>.</p>
<p id="p-0402" num="0404">The &#x201c;Publish&#x201d; function invocation button <b>493</b> generally launches a similar process to the process launched by the &#x201c;Save&#x201d; button <b>477</b> (i.e. blocks <b>410</b>, <b>412</b>, and <b>414</b> in <figref idref="DRAWINGS">FIG. 13B</figref>) except that the persistent messages are saved to the published communication store <b>108</b> rather than the client saved content store <b>100</b>. However, published content in the published communication store <b>108</b> are generally made available to anyone who wishes to view the pages, while saved content in the client saved content store <b>100</b> is generally only available to client computer users who have joined a multiple-party communication that caused the respective pages to be saved. In other embodiments, non-persistent messages may also be saved to the published pages store to facilitate replaying non-persistent mouse movements to the public access computer.</p>
<p id="h-0025" num="0000">Viewing Published Multiple-Party Communications</p>
<p id="p-0403" num="0405">Any user of a computer such as the public access computer <b>40</b> shown in <figref idref="DRAWINGS">FIG. 1</figref>, which has a connection to the network <b>20</b>, may view a published multiple-party communication. In general, the user connects to the server <b>12</b> and transmits a request for a web page listing published multiple-party communications (not shown) saved in the published communication store <b>108</b>. The web page generally includes a published pages table that includes information similar to the information listed in table <b>140</b> on the web page <b>130</b> (shown in <figref idref="DRAWINGS">FIG. 4</figref>), except that each entry corresponds to a published page rather than an active multiple-party communication.</p>
<p id="p-0404" num="0406">Alternatively, if a user knows or has been otherwise made aware of the URL under which the page was published, the user may type URL of the published page (for example www.freemeeting.com/travel.web) into an address field of an internet browser application such as Microsoft Internet Explorer.</p>
<p id="p-0405" num="0407">Referring to <figref idref="DRAWINGS">FIG. 19</figref>, a flowchart representing blocks of codes for directing the microprocessor <b>52</b> to create a communication for viewing published pages is shown generally at <b>680</b>. The process <b>680</b> is similar to the process <b>150</b> shown in <figref idref="DRAWINGS">FIG. 5</figref>, in that a communication is created for the public access computer user, thus providing various communication functions generally as described above. However the communication for viewing published content may only have single computer user as a participant. Furthermore certain functions generally available in active multiple-party communications are not necessary for viewing a published multiple-party communication and such functions may be disabled, as described below.</p>
<p id="p-0406" num="0408">In general the server responds to a request from a public access computer including an identifier identifying published content associated with a previous communication. The server then reads saved messages associated with the identifier from persistent memory storage on the server and produces respective output messages representing the content in the saved messages. The output messages are then transmitted to the computer.</p>
<p id="p-0407" num="0409">The process <b>680</b> begins at <b>682</b> when a public access computer user clicks on a hyperlink to a published multiple-party communication in the web page listing available published communication content, which causes a HTTP request message including identifier identifying the selected published multiple-party communication to be transmitted to the server <b>12</b>. In one embodiment the identifier includes the filename under which the multiple-party communication was published and/or the description provided by the client computer user when the content was published.</p>
<p id="p-0408" num="0410">Block <b>684</b> then directs the microprocessor <b>52</b> to read the HTTP message to extract the identifier. Block <b>684</b> also directs the microprocessor <b>52</b> to create a communication for viewing the content by adding a new communication entry to the communication table <b>80</b> (shown in <figref idref="DRAWINGS">FIG. 2</figref>). In this embodiment, communications created for viewing of published pages are created with the &#x201c;HiddenFlag&#x201d; <b>198</b> set to active, such that the communication is not listed when the web page <b>130</b> is displayed to client computer users who request information on active multiple-party communications as per previously described embodiments. Accordingly, since the communication name will not be displayed, the &#x201c;CommunicationName&#x201d; field <b>184</b> in the communication table entry <b>180</b> may be populated with the filename or the description read from the HTTP message, or may be set to a default value. A new unique communication identifier (CID) is also generated for the communication and stored in the CID field <b>182</b> in the communication table <b>80</b> in the RAM <b>56</b>.</p>
<p id="p-0409" num="0411">Block <b>686</b> then directs the microprocessor <b>52</b> to create a new shared buffer <b>88</b> (shown in <figref idref="DRAWINGS">FIG. 2</figref>) for the communication, and to initialize the &#x201c;StartPointer&#x201d; <b>122</b> and the &#x201c;CurrentPointer&#x201d; <b>124</b> to both refer to a first store in the shared buffer <b>88</b>. Block <b>686</b> also directs the microprocessor <b>52</b> to instantiate a page manager for the communication by launching the page manager program codes in the store <b>74</b> of the program memory <b>54</b>.</p>
<p id="p-0410" num="0412">Block <b>688</b> then directs the microprocessor <b>52</b> to instantiate a new client manager for the communication by launching the client manager program codes in the store <b>72</b> of the program memory <b>54</b>.</p>
<p id="p-0411" num="0413">Block <b>690</b> then directs the microprocessor <b>52</b> to generate a new client table <b>90</b> in the RAM <b>56</b>, to add an entry to the client table for the public access computer. In this embodiment block <b>690</b> also directs the microprocessor <b>52</b> to set the &#x201c;CatchUpFlag&#x201d; to active, such that only persistent type messages are transmitted to the public access computer <b>40</b>. In other embodiments, persistent, non-persistent, and control type messages may be transmitted to the public access computer <b>40</b>.</p>
<p id="p-0412" num="0414">Block <b>692</b> then directs the microprocessor <b>52</b> to create server side Rx and Tx buffers <b>92</b> and <b>94</b> for the originating client.</p>
<p id="p-0413" num="0415">Block <b>694</b> then directs the microprocessor <b>52</b> to cause the network interface <b>62</b> of the I/O PORT <b>60</b> to transmit published pages user interface codes through the network <b>20</b> to the public access computer. Alternatively, the public access computer may launch program codes (not shown) for instantiating a stand-alone published pages user interface application.</p>
<p id="p-0414" num="0416">Block <b>696</b> then directs the microprocessor <b>52</b> to read messages from the published page identified by the filename read from the HTTP message in block <b>684</b> and to load the messages into the shared buffer. The &#x201c;StartPointer&#x201d; <b>122</b> is set to reference the message store <b>120</b> in the shared buffer <b>88</b> to which the first message was loaded. As the message stores <b>120</b> of the shared buffer <b>88</b> are loaded with subsequent messages read from the published page file, the &#x201c;CurrentPointer&#x201d; <b>124</b> is incremented to reference the last loaded message store.</p>
<p id="p-0415" num="0417">The published pages user interface may be generally similar to the user interface <b>470</b>, except that user interface function invocation buttons <b>474</b>, <b>476</b>, <b>477</b>, <b>495</b>, <b>488</b>, <b>493</b>, and <b>491</b>, the line formatting controls <b>484</b>, and the character formatting controls <b>486</b>, may be disabled or not displayed in the user interface. Accordingly, only the &#x201c;Open&#x201d; function invocation button <b>494</b>, the &#x201c;PageBack&#x201d; function invocation button <b>478</b>, the &#x201c;PageForward&#x201d; function invocation button <b>480</b>, and the &#x201c;Quit&#x201d; function invocation button <b>482</b> are still active when viewing a published content. The aforementioned function invocation buttons generally operate as described above in connection with <figref idref="DRAWINGS">FIG. 13A-FIG</figref>. <b>13</b>C.</p>
<p id="p-0416" num="0418">The persistent messages associated with the published page in the published communication store <b>108</b> are then processed generally in accordance with the process <b>580</b> shown in <figref idref="DRAWINGS">FIG. 16</figref>. The output messages are then transmitted to the public access computer in accordance with the process <b>597</b> shown in <figref idref="DRAWINGS">FIG. 17</figref>.</p>
<p id="p-0417" num="0419">When a public access computer user views a published multiple-party communication all persistent saved content and any linked areas <b>497</b> are displayed in accordance with the process <b>620</b> shown in <figref idref="DRAWINGS">FIGS. 18A and 18B</figref>. When the &#x201c;CatchUpFlag&#x201d; is set to not active, non-persistent content is also displayed on the public access computer <b>40</b>.</p>
<p id="p-0418" num="0420">The public access client computer <b>40</b> may cause user input signals to be produced but only certain user input signal and function invocation combinations will be processed in accordance with the process <b>360</b> shown in <figref idref="DRAWINGS">FIG. 13A-FIG</figref>. <b>13</b>C. For example, in this embodiment, only blocks <b>416</b>, <b>418</b> and <b>420</b> (&#x201c;Open&#x201d; function invocation), block <b>388</b>, and <b>389</b> (link area clicked), block <b>422</b> and <b>424</b> (&#x201c;PageBack&#x201d; and &#x201c;PageForward&#x201d; function invocations), and/or block <b>426</b>-<b>434</b> (&#x201c;Quit&#x201d; function invocation buttons) are processed by the public access computer.</p>
<p id="p-0419" num="0421">If the published page includes a linked area (such as the linked area <b>497</b> shown in <figref idref="DRAWINGS">FIG. 11</figref>), pointing device user input signals causing interrupt event signals within the linked area cause blocks <b>388</b>, <b>389</b>, and <b>384</b>, shown in <figref idref="DRAWINGS">FIG. 13A</figref> to be launched. Block <b>389</b> directs the microprocessor <b>262</b> to generate the &#x201c;Open&#x201d; message <b>352</b> with a message identifier value of 22, and a &#x201c;UID&#x201d; corresponding to the user identifier for the public access computer, and a filename or internet address associated with the linked area <b>497</b>. The filename may be a filename of other published messages in the published communication store <b>108</b>. The process then continues at block <b>384</b>, which directs the microprocessor <b>262</b> to write the message <b>352</b> into the client side Tx buffer <b>292</b>. The linked areas <b>497</b> thus facilitate providing published content with functioning hyperlink areas to other saved messages and/or other content available elsewhere on the network <b>20</b>.</p>
<p id="p-0420" num="0422">When the &#x201c;Open&#x201d; function invocation button <b>494</b> is clicked, then the blocks <b>416</b>, <b>418</b> and <b>420</b> in the process <b>360</b> are launched. Block <b>418</b> launches a dialog (not shown) for user to enter the filename of other published content in the published communication store <b>108</b>, for example &#x201c;inLondon.web&#x201d;. Block <b>420</b> then directs the microprocessor <b>262</b> to generate the &#x201c;Open&#x201d; message <b>352</b> with a message identifier value of 22, and a &#x201c;UID&#x201d; corresponding to the user identifier for the public access computer, and a filename entered by user in dialog box at block <b>418</b>. The process then continues at block <b>384</b>, which directs the microprocessor <b>262</b> to write the message <b>352</b> into the client side Tx buffer <b>292</b>.</p>
<p id="p-0421" num="0423">When either the &#x201c;PageBack&#x201d; function invocation button <b>478</b> or the &#x201c;PageForward&#x201d; function invocation button <b>480</b> is clicked, the blocks <b>422</b> and <b>424</b> are launched causing a page change message to be transmitted to the server <b>12</b>. Advantageously, if more than one published page has been viewed by the public access computer user by clicking on a linked area <b>497</b>, then the user is permitted to page back and forward through these pages in accordance with the blocks <b>528</b>-<b>542</b> in the process <b>500</b> shown in <figref idref="DRAWINGS">FIG. 15B</figref>.</p>
<p id="p-0422" num="0424">When the &#x201c;Quit&#x201d; function invocation button <b>482</b> is clicked, block <b>426</b> in the process <b>360</b> is launched. However blocks <b>428</b>, <b>430</b> and <b>432</b> are not launched for public access computers. When facilitating viewing published pages, the server <b>12</b> determines whether the communication is to keep running or be shut down.</p>
<p id="p-0423" num="0425">In one embodiment, the communication created for the public access computer <b>40</b> to view a published page may be shut down in accordance with blocks <b>548</b>-<b>560</b> shown in <figref idref="DRAWINGS">FIG. 15B</figref> after the published page has been transmitted to the computer user. The published page view will remain displayed on the public computer display, but the communication that facilitated transmitting the page will be closed. Accordingly, each time the user of the public access computer <b>40</b> requests another page by clicking on a linked area <b>497</b> on the published page, for example, a new communication is created to serve the requested page to the user.</p>
<p id="p-0424" num="0426">In other embodiments the communication may be kept running, transmitting different content files from published communication store <b>108</b> in response to the public access computer user requests, until the user disconnects from the communication by clicking on the quit button, as described earlier herein. This communication will only have a single participant since the Hidden flag <b>198</b> is set to active so that other client computers cannot join the communication.</p>
<p id="p-0425" num="0427">In yet another embodiment, the published multiple-party communication content may be transmitted to public computer user one message at a time with a time interval between messages corresponding to the timestamp appended to the messages at block <b>508</b> in <figref idref="DRAWINGS">FIG. 15A</figref> as described later herein with reference to <figref idref="DRAWINGS">FIG. 32</figref>. This permits the public access computer user to view the published multiple-party communication content at a rate that matches the rate at which the content was created in the original multiple-party communication. In this embodiment a new communication may be created for each public access computer user that wishes to view the published page at the original content creation rate, thus facilitating delayed transmission of messages from a shared buffer associated with the communication.</p>
<p id="p-0426" num="0428">In other embodiment the server may share the communication for the same published content between multiple public access computers, in which case the same communication (having the same CID) may be used to serve the published pages to second and subsequent public access computers. When the last user disconnects from the communication, the communication may then be shut down. Although in such shared public communications, when any user clicks on linked areas <b>497</b>, &#x201c;Open&#x201d;, &#x201c;PageBack&#x201d; or &#x201c;PageForward&#x201d; buttons, all users of public client computers will be transmitted messages associated with the new page. This type of multiple-party communication is suitable when the published content does not have Link areas, and server also repeatedly transmits the same content over and over again in a repeating looped presentation.</p>
<p id="p-0427" num="0429">Advantageously a public access computer user who is not capable of producing web pages by conventional methods (for example using Microsoft FrontPage&#xae; or using hypertext markup language) may record content in a communication and publish the content, thus making the pages available to the public in general. Publishing such pages does not require any specialized knowledge, while providing a simple interface (i.e. the user interface <b>470</b>) for producing content including images, lines and character annotations and links to other content. Accordingly, in this embodiment, the server <b>12</b> is generally configured to act as a content recorder, facilitating subsequent playback of the recorded content to any computer user who is connected to the network <b>20</b>. The published pages may be browsed by a user in the user interface in a similar manner to browsing web pages in a web browser.</p>
<p id="h-0026" num="0000">Game Piece Image Movement</p>
<p id="p-0428" num="0430">In another embodiment the system for supporting multiple-party communications may further facilitate playing of a game between parties who have joined a multiple-party communication.</p>
<p id="p-0429" num="0431">Display of game piece images is initiated when a user of one client computer user clicks on the &#x201c;Game&#x201d; function invocation button <b>491</b> on the user interface <b>470</b>. Image data representing the game piece images and initial position coordinates for displaying the game piece images are stored in the store <b>298</b> of the client computer RAM <b>266</b>.</p>
<p id="p-0430" num="0432">Referring to <figref idref="DRAWINGS">FIG. 20</figref>, a flowchart of blocks of code for directing the processor circuit <b>260</b> (shown in <figref idref="DRAWINGS">FIG. 9</figref>) to generate the game message <b>359</b> is shown generally at <b>710</b>. The blocks in the process <b>710</b> generally represent a modification to the process <b>360</b> shown in <figref idref="DRAWINGS">FIG. 13</figref>.</p>
<p id="p-0431" num="0433">The process begins at <b>712</b>, which directs the microprocessor <b>262</b> to determine whether the &#x201c;Game&#x201d; function invocation button <b>491</b> has been clicked, in which case the process continues at block <b>714</b>. Block <b>714</b> directs the microprocessor <b>262</b> to generate the &#x201c;Game&#x201d; message <b>359</b> with a message identifier value of 5 and a &#x201c;UID&#x201d; corresponding to the user identifier of the client computer that invoked the game function.</p>
<p id="p-0432" num="0434">The process then continues at block <b>384</b>, which directs the microprocessor <b>262</b> to write the message <b>350</b> into the client side Tx buffer <b>292</b>. The message <b>359</b> is then transmitted to the server <b>12</b> in accordance with the process <b>440</b> shown in <figref idref="DRAWINGS">FIG. 14</figref>.</p>
<p id="p-0433" num="0435">The server <b>12</b> receives the &#x201c;Game&#x201d; message <b>359</b> from the client computer in accordance with blocks <b>508</b>-<b>512</b> of the process <b>500</b> shown in <figref idref="DRAWINGS">FIG. 15</figref> as described above. Once inserted into the shared buffer at block <b>510</b> the &#x201c;Game&#x201d; message <b>359</b> is then processed for transmission in accordance with the process <b>580</b> shown in <figref idref="DRAWINGS">FIG. 16</figref>, and transmitted to all client computers in accordance with the process <b>597</b> shown in <figref idref="DRAWINGS">FIG. 17</figref>, as described above.</p>
<p id="p-0434" num="0436">Referring to <figref idref="DRAWINGS">FIG. 21</figref>, a flowchart representing blocks of code for directing each client computer processor circuit <b>262</b> to display the game piece images is shown generally at <b>720</b>. The blocks in the process <b>720</b> generally represent a modification to the process <b>620</b> shown in <figref idref="DRAWINGS">FIG. 18B</figref>.</p>
<p id="p-0435" num="0437">The process <b>720</b> begins at block <b>722</b>, which directs the microprocessor <b>262</b> to determine whether the message received at block <b>621</b> in <figref idref="DRAWINGS">FIG. 18A</figref> has a message identifier of 5. If the message identifier is 5, then the process continues at block <b>724</b>, which directs the microprocessor <b>262</b> to read game piece image data and respective position coordinates from the store <b>298</b> and to call a function in the image display program codes <b>289</b> (shown in <figref idref="DRAWINGS">FIG. 9</figref>) for displaying each game piece image on the display area <b>472</b> at positions corresponding to the respective position coordinates for each game piece image.</p>
<p id="p-0436" num="0438">Referring to <figref idref="DRAWINGS">FIG. 22</figref>, a screenshot of the user interface <b>470</b> (shown in <figref idref="DRAWINGS">FIG. 11</figref>) is shown having a display area <b>740</b> that includes game piece images <b>742</b> displayed thereon. The game piece images <b>742</b> include a game board image <b>744</b>, a plurality of white game piece images <b>746</b> and a plurality of black game piece images <b>748</b>. Each of the game piece images <b>742</b> are displayed at initial position coordinates read from the store <b>298</b> of the client computer RAM <b>266</b>. Each game piece image <b>746</b> and <b>748</b> includes an image boundary <b>747</b> (shown in broken outline), which defines the image extent of the respective game piece.</p>
<p id="p-0437" num="0439">Referring back to <figref idref="DRAWINGS">FIG. 21</figref>, the process then continues at block <b>726</b>, which directs the microprocessor <b>262</b> to write the respective position coordinates to the game piece coordinates store <b>299</b> in the client computer RAM <b>266</b>, such that subsequent movements of the game pieces by the client computer users may be tracked in position coordinate values stored in the game piece coordinates store <b>299</b>.</p>
<p id="p-0438" num="0440">Game Piece Movements</p>
<p id="p-0439" num="0441">In general, the game board image <b>744</b> is displayed at a fixed coordinate position on the display area <b>740</b>, while the game piece images <b>746</b> and <b>748</b> may be moved in response to user input signals received at the respective client computers.</p>
<p id="p-0440" num="0442">Referring to <figref idref="DRAWINGS">FIG. 23</figref>, a flowchart representing blocks of code for directing the microprocessor <b>262</b> to move the game piece images on the display area <b>740</b> is shown generally at <b>770</b>. The process <b>770</b> shown in <figref idref="DRAWINGS">FIG. 23</figref> is a modification of the process <b>620</b> shown in <figref idref="DRAWINGS">FIG. 18A</figref>.</p>
<p id="p-0441" num="0443">In this embodiment, game piece images <b>746</b> and <b>748</b> are moved in response to cursor messages representing &#x201c;MouseDragged&#x201d; user input signal combinations. In other embodiments the game piece images may be moved in response to cursor movement signals in combination with character input signals produced at the keyboard (for example, when the user presses a &#x201c;Ctrl&#x201d; key while simultaneously moving the pointing device.</p>
<p id="p-0442" num="0444">If at block <b>630</b> the message identifier is 2, then the message corresponds to the &#x201c;MouseDrag&#x201d; cursor message <b>340</b>. The process continues at block <b>632</b>, which directs the microprocessor <b>262</b> to read the bytes in the cursor message corresponding to color, line width, starting coordinates Xold and Yold, and ending coordinates Xnew and Ynew.</p>
<p id="p-0443" num="0445">Block <b>772</b> then directs the microprocessor <b>262</b> to determine whether the position coordinates Xnew and Ynew represent a position on the display area <b>740</b> that is inside the boundary <b>747</b> of one of the game piece images represented by coordinates stored in the game piece coordinates store <b>299</b> in the RAM <b>266</b>, in which case the process continues at block <b>774</b>.</p>
<p id="p-0444" num="0446">Block <b>774</b> then directs the microprocessor <b>262</b> to call a function in the image display program codes <b>289</b> to delete the game piece image at and redraw the game piece image at a new location Xg, Yg on the display area. The coordinates Xg, Yg are shifted by &#x394;X and &#x394;Y from a previous location of the game piece image, where &#x394;X and &#x394;Y are calculated according to the relation:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>&#x394;<i>X=X</i><sub>new</sub><i>&#x2212;X</i><sub>old </sub><?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>&#x394;<i>Y=Y</i><sub>new</sub><i>&#x2212;Y</i><sub>old</sub>&#x2003;&#x2003;Eqn 1<?in-line-formulae description="In-line Formulae" end="tail"?>
</p>
<p id="p-0445" num="0447">Block <b>775</b> then directs the microprocessor <b>262</b> to write the new game piece position coordinates into the game piece coordinate store <b>299</b> in the RAM <b>266</b>.</p>
<p id="p-0446" num="0448">Block <b>776</b> then directs the microprocessor <b>262</b> to determine whether the position coordinates Xold and Yold define a position on the display area <b>740</b> that is inside one of the game piece coordinate areas stored in the game piece coordinates store in the RAM <b>266</b>, in which case the process continues at block <b>648</b>.</p>
<p id="p-0447" num="0449">Block <b>648</b> then directs the microprocessor <b>262</b> to call a function in the image display program codes <b>289</b> for moving the image of the pointer from its current position on the display area <b>740</b> to the Xnew and Ynew coordinate position on the display area <b>740</b>.</p>
<p id="p-0448" num="0450">If at block <b>776</b>, the coordinates Xold and Yold define a position that is not inside the boundary <b>747</b> of one of the game piece images <b>746</b> and <b>748</b> on the display area <b>740</b> then the process continues at block <b>634</b>. Block <b>634</b> directs the microprocessor <b>262</b> to call a function in the image display program codes <b>289</b> for drawing a line of specified color and width on the user display area <b>740</b> between the starting coordinates Xold and Yold, and ending coordinates Xnew and Ynew.</p>
<p id="p-0449" num="0451">If at block <b>772</b> the coordinates Xnew and Ynew define a position that is not inside the boundary <b>747</b> of one of the game piece images <b>746</b> and <b>748</b> on the display area <b>740</b> then the process continues at block <b>634</b> and <b>648</b>, as described above.</p>
<p id="p-0450" num="0452">In this embodiment when the user input signals cause the client computer's pointer <b>499</b> to be dragged across the boundary <b>747</b> of one of the game piece images <b>746</b> or <b>748</b> the pointer &#x201c;pushes&#x201d; the game piece image to a new location, while simultaneously drawing a line on the display area. When the user input signals cause client computer's pointer <b>499</b> to be dragged inside the boundary <b>747</b>, the game piece image is moved without drawing a line on the display area <b>740</b>. In other embodiments the line may be discontinued when the pointer crosses the boundary <b>747</b> or the line may be drawn behind the game piece image and game board <b>744</b>.</p>
<p id="p-0451" num="0453">Advantageously, the game piece images are moved in response to pointer messages received at the client computers, and not in response to the corresponding client computer cursor <b>496</b>, thus facilitating some server arbitration of game piece movements in accordance with the timestamp of the messages representing game piece movements received from the client computers. Should two client computer users simultaneously wish to move the same game piece image, a first received message will receive priority of movement. Furthermore, in this embodiment the server <b>12</b> only receives cursor messages and produces pointer messages which are transmitted to the client computers. When the client computers receive the pointer messages, the pointer messages are interpreted by the client computer processor circuit <b>260</b> to cause corresponding game piece image movements on each of the respective display areas <b>740</b>, such that each user receives a common view of the game piece images <b>742</b>. By causing game piece movements in response to pointer messages rather than the client computers real time cursor <b>496</b>, the users are able to adjust their activity to account for any network latency when moving the game piece images.</p>
<p id="p-0452" num="0454">Referring to <figref idref="DRAWINGS">FIG. 24</figref>, in an alternative embodiment, desired game piece movements may be represented by a game piece movement request message shown generally at <b>780</b>. The piece movement request messages <b>780</b> are transmitted by the client computers <b>14</b>, <b>16</b>, and <b>18</b> to the server <b>12</b> in response to user input signals representing movements that cross the boundary <b>747</b> or are within the boundary.</p>
<p id="p-0453" num="0455">The piece movement request message <b>780</b> is a persistent message having a message identifier of 6. The piece movement request message <b>780</b> represents a &#x201c;MouseDrag&#x201d; combination of user input signals between starting X and Y coordinates (Xold, Yold) and ending X and Y coordinates (Xnew, Ynew) held in bytes <b>5</b>-<b>12</b> of the message.</p>
<p id="p-0454" num="0456">The piece movement request message <b>780</b> further includes an &#x201c;Owner UID&#x201d; field held in bytes <b>13</b>-<b>14</b> of the message. The &#x201c;Owner UID&#x201d; field holds a UID corresponding to the UID of the client computer that owns the game piece that it is desired to move. For example, in a game of checkers between a first client computer and a second client computer, the white game pieces <b>746</b> may be assigned to the first client computer user and the white game piece coordinates stored in the store <b>299</b> of the client computer RAM <b>266</b> include an associated &#x201c;Owner UID&#x201d; corresponding to the UID of the first client computer. Similarly the black game pieces <b>748</b> may be assigned to the second client computer and the black game piece coordinates stored in the store <b>299</b> of the client computer RAM <b>266</b> include an associated &#x201c;Owner UID&#x201d; corresponding to the UID of the second client computer.</p>
<p id="p-0455" num="0457">The piece movement request message <b>780</b> further includes an identifier field held in bytes <b>15</b>-<b>16</b> of the message. The identifier identifies a particular game piece image that the client computer user wishes to move. For example, in a game of checkers, the white checkers may be assigned number indices of 1-12 and the black game pieces may be assigned indices of 13-24.</p>
<p id="p-0456" num="0458">When a user of one of the client computers <b>14</b>, <b>16</b>, or <b>18</b> attempts to move one of the game pieces by producing user input signals within the boundary <b>747</b> of one of the game piece images <b>746</b> and <b>748</b>, a piece movement request message <b>780</b> is produced and transmitted to the server <b>12</b>. The server <b>12</b> receives the message <b>780</b> generally in accordance with the process shown in <figref idref="DRAWINGS">FIG. 15A</figref>.</p>
<p id="p-0457" num="0459">In this embodiment, when the server receives a &#x201c;Game&#x201d; message <b>359</b> requesting display of game piece images for playing a game, the server launches the game criteria program codes <b>78</b>, which direct the microprocessor <b>52</b> to wait for piece movement request messages <b>780</b> to be received from the client computers playing the game. The game criteria program codes <b>78</b> additionally directs the microprocessor <b>52</b> to store game piece position coordinates in the game data store <b>109</b> for keeping track of the game piece image position coordinates. When the game is initiated by the &#x201c;Game&#x201d; message <b>359</b>, the game data store is loaded with initial position coordinates of the game piece images.</p>
<p id="p-0458" num="0460">When the server <b>12</b> receives piece movement request messages <b>780</b>, the game criteria program codes direct the microprocessor <b>52</b> to determine whether the piece movement request message meets a criterion associated with rules of the game being played. For example, if the server receives a piece movement request message <b>780</b> having an Owner UID held in bytes <b>13</b>-<b>14</b> that does not correspond to the UID held in bytes <b>3</b>-<b>4</b> of the message, then the message represents an attempt by a client computer user to move a game piece that has been assigned to another client computer user, and the server ignores the piece movement request message.</p>
<p id="p-0459" num="0461">The server <b>12</b> may also compute a desired move magnitude represented by the X and Y coordinates held in the bytes <b>5</b>-<b>8</b> of the message <b>780</b> and determine whether the piece movement request meets a movement criterion associated with the game being played. Similarly, the server <b>12</b> may enforce other game rules by determining whether the piece movement request message represents a move that meets a criterion for the game piece identified by the identifier held in bytes <b>15</b>-<b>16</b> of the message <b>780</b>.</p>
<p id="p-0460" num="0462">When the piece movement message <b>780</b> meets the criterion, the game criteria program codes <b>78</b> directs the microprocessor <b>52</b> to produce a game piece movement message, which in this embodiment has the same format as the message <b>780</b>. The piece movement message is then loaded into the shared buffer <b>88</b> and transmitted to the client computers in accordance with the processes <b>580</b> and <b>597</b> shown in <figref idref="DRAWINGS">FIG. 16</figref> and <figref idref="DRAWINGS">FIG. 17</figref> respectively.</p>
<p id="p-0461" num="0463">Still referring to <figref idref="DRAWINGS">FIG. 24</figref>, in another embodiment, desired game piece actions may be represented by a game piece action message shown generally at <b>782</b>. The piece action messages <b>782</b> are transmitted by the client computers <b>14</b>, <b>16</b>, and <b>18</b> to the server <b>12</b> in response to user input signals representing desired game piece actions. For example, actuation of a mouse actuator button (e.g. a right mouse button) may present the user with a list of options associated with the game piece. In a card game, for example, the options may include flipping the card to show the face or the back of the card, making the card private such that other users are prevented from viewing flipping the card etc. In a game of chess, the options may include a selection of a piece when promoting a pawn that has reached the eighth rank of the chessboard, for example.</p>
<p id="p-0462" num="0464">The piece action request message <b>782</b> is a persistent message having a message identifier of 7. The piece action request message <b>782</b> represents a requested action and includes an &#x201c;Owner UID&#x201d; field held in bytes <b>5</b>-<b>6</b> of the message. The &#x201c;Owner UID&#x201d; field holds a UID corresponding to the UID of the client computer that owns the game piece that it is desired to act upon. The game piece action request message <b>782</b> further includes the identifier field held in bytes <b>7</b>-<b>8</b> of the message, which identifies a particular game piece image that the client computer user wishes to act upon.</p>
<p id="p-0463" num="0465">The piece action request message <b>782</b> also includes an action type field held in byte <b>9</b> of the message. The action type field holds an action indicator index, for example, &#x201c;flip&#x201d;, &#x201c;private&#x201d; or &#x201c;public&#x201d; for a game of cards.</p>
<p id="p-0464" num="0466">The game criteria program codes <b>78</b> on the server processor circuit <b>50</b> direct the microprocessor <b>52</b> to determine whether the piece action request message <b>782</b> meets a criterion associated with rules of the game being played. For example if a game piece action request to flip a card includes a UID and Owner UID that are different, and the game piece has previously been designated as &#x201c;private&#x201d; by the owner, then the action request will not be processed by the server and not transmitted to client computers.</p>
<p id="p-0465" num="0467">When the piece action request message <b>782</b> received at the server meets the criteria, the game criteria program codes <b>78</b> directs the microprocessor <b>52</b> to produce a piece action message representing the action. In this embodiment the piece action message has the same format as the message <b>782</b> and is transmitted to the client computers as described above.</p>
<p id="h-0027" num="0000">Intercepting Communications</p>
<p id="p-0466" num="0468">Referring to <figref idref="DRAWINGS">FIG. 25</figref>, a system for intercepting multiple-party communications in accordance with an embodiment of the invention is shown generally at <b>800</b>. The system <b>800</b> includes the server <b>12</b> and a plurality of client computers <b>14</b>, <b>16</b>, and <b>18</b>, such as those shown in <figref idref="DRAWINGS">FIG. 1</figref>.</p>
<p id="p-0467" num="0469">In this embodiment, the system <b>800</b> further includes a designated client computer <b>802</b>, which has a display <b>804</b> for displaying content. The designated client computer <b>802</b> communicates with the server <b>12</b> through the network <b>20</b>. The designated client computer <b>802</b> also has a pointing device <b>806</b> and a character input device <b>808</b> for producing user input signals.</p>
<p id="p-0468" num="0470">In one embodiment the designated client computer <b>802</b> is used by a lawful intercept authority to access and/or intercept multiple-party communications. In general, when permitting lawful intercept or access to private communications, it is important to only authorize such access to a lawful intercept authority. Authorizing the designated client computer <b>802</b> may involve authenticating a user of the designated client computer. Accordingly the system <b>800</b> may optionally include an authentication server <b>810</b> for authenticating a user of the designated client computer <b>802</b>. The authentication server <b>810</b> generally stores usernames, passwords, and/or other user information and provides an authentication indicator to the server <b>12</b> when credentials supplied by a user have been validated by the authentication server. The authentication server <b>810</b> may implement a Remote Authentication Dial-In User Service (RADIUS) protocol, for example. Alternatively the server <b>12</b> may provide such authentication functions. In some embodiments the authentication server <b>810</b> may further provide authentication services for authenticating users of the client computers <b>14</b>, <b>16</b>, and/or <b>18</b>.</p>
<p id="p-0469" num="0471">In other embodiments the designated client computer <b>802</b> may be located in a secure controlled environment and the client computer may be authorized for access by users who have access to the secure controlled environment.</p>
<p id="p-0470" num="0472">In general, the designated client computer <b>802</b> may be implemented using the processor circuit <b>260</b> shown in <figref idref="DRAWINGS">FIG. 9</figref> and the user interface <b>470</b> shown in <figref idref="DRAWINGS">FIG. 11</figref>. The designated client computer <b>802</b> generally operates in essentially the same way as the other client computers <b>14</b>, <b>16</b> and <b>18</b>. The designated client computers in a multiple-party communication are identified by the &#x201c;SilentFlag&#x201d; <b>212</b> in the client table entry <b>200</b> shown in <figref idref="DRAWINGS">FIG. 7</figref>.</p>
<p id="p-0471" num="0473">Intercept Web Page</p>
<p id="p-0472" num="0474">Referring to <figref idref="DRAWINGS">FIG. 26</figref>, a screenshot of a web page displayed on the designated client computer <b>802</b> when the designated client computer first connects to the server <b>12</b> is shown generally at <b>820</b>. When the designated client computer <b>802</b> transmits a request for the web page <b>820</b> to the server <b>12</b>, the communication manager program codes <b>70</b> direct the microprocessor <b>52</b> of the server processor circuit <b>50</b> shown in <figref idref="DRAWINGS">FIG. 2</figref> to read data representing a web page from the web page store <b>102</b> of the server processor circuit hard drive <b>58</b> and to transmit the data through the network <b>20</b> to the designated client computer. In general, the request from the designated client computer <b>802</b> is generated by an internet browser application running on the designated client computer <b>802</b> and when web page data is received the web page <b>820</b> is displayed in an internet browser window on the display <b>804</b>.</p>
<p id="p-0473" num="0475">The web page <b>820</b> includes a &#x201c;username&#x201d; field <b>822</b>, a &#x201c;password&#x201d; field <b>824</b>, and an &#x201c;OK&#x201d; button <b>826</b>. When a user of the designated client computer <b>802</b> enters their username in the &#x201c;username&#x201d; field <b>822</b>, enters their password in the &#x201c;password&#x201d; field <b>824</b>, and clicks on the &#x201c;OK&#x201d; button <b>826</b>, a message including the username and password credentials is transmitted to the server <b>12</b> (or to the authentication server <b>810</b>, if provided). If the user credentials are authenticated by the server <b>12</b> (or the authentication server <b>810</b>), then the designated client computer is permitted access to communication manager functions provided for users of the designated client computer <b>802</b>. The communication manager program codes <b>70</b> then direct the microprocessor <b>52</b> to read data representing a saved communication pages web page from the web page store <b>102</b> and to transmit the data to the designated client computer <b>802</b>.</p>
<p id="p-0474" num="0476">Referring to <figref idref="DRAWINGS">FIG. 27</figref>, a screenshot of the saved communication pages web page is shown generally at <b>840</b>. The web page <b>840</b> includes a &#x201c;list saved communications&#x201d; button <b>842</b>, and a &#x201c;list active communications&#x201d; button <b>844</b>.</p>
<p id="h-0028" num="0000">Intercept of Active Multiple-Party Communications</p>
<p id="p-0475" num="0477">When the user of the designated client computer <b>802</b> clicks on the &#x201c;list active communications&#x201d; button <b>844</b>, the blocks of code <b>232</b>, <b>234</b>, <b>235</b> and <b>236</b>, shown in <figref idref="DRAWINGS">FIG. 8</figref> are executed as described earlier, causing the microprocessor <b>52</b> to read entries from the communication table <b>80</b> and to display certain fields in a table <b>846</b> on the saved communication pages web page <b>840</b>. The table <b>846</b> includes a first column <b>848</b> listing a multiple-party communication sequence number (1, 2, 3 for example), a second column <b>850</b> listing the communication name from the &#x201c;CommunicationName&#x201d; field <b>184</b>, and a third column <b>852</b> listing the communication type. In this embodiment the third column <b>852</b> is included to indicate to a user whether multiple-party communications are &#x201c;free&#x201d; or &#x201c;password&#x201d; type communications, however the user is able to join &#x201c;password&#x201d; type communications whether or not they are in possession of the communication password.</p>
<p id="p-0476" num="0478">The table <b>846</b> also includes a fourth column <b>854</b>, listing a number of client computer users involved in each respective multiple-party communication. In general, fields in at least one of the columns in the table <b>846</b> have associated hyperlink properties, which facilitate selection of a particular multiple-party communication listed in the display table by the user clicking on, for example, a hyperlinked communication name. When the user clicks on a hyperlink, an HTTP message identifying the multiple-party communication is generated and transmitted to the server processor circuit <b>50</b>.</p>
<p id="p-0477" num="0479">Referring to <figref idref="DRAWINGS">FIG. 28</figref>, a flowchart of blocks of code for directing the processor circuit <b>50</b> (shown in <figref idref="DRAWINGS">FIG. 2</figref>) to permit the designated client computer <b>802</b> to intercept messages being communicated in an active multiple-party communication is shown generally at <b>880</b>.</p>
<p id="p-0478" num="0480">The process begins at <b>882</b> when a HTTP message is received from the designated client computer <b>802</b> identifying a multiple-party communication selected for intercept by the user of the designated client computer <b>802</b>. The HTTP message includes the communication identifier (&#x201c;CID&#x201d;), and/or other associated information identifying the multiple-party communication, such as the communication name, for example.</p>
<p id="p-0479" num="0481">Block <b>883</b> directs the microprocessor <b>52</b> to read the information in the HTTP message received from the designated client computer and to match the information to a multiple-party communication in the communication table <b>80</b>. For example, if the HTTP message includes a communication identifier, the &#x201c;CID&#x201d; is read from the HTTP message and compared with the values in the &#x201c;CID&#x201d; field <b>182</b> in the communication table entries <b>180</b> find the corresponding multiple-party communication. Alternatively, if the HTTP message includes a communication name, the communication name is compared with the values in the &#x201c;CommunicationName&#x201d; field <b>184</b> in the communication table entry <b>180</b> to find the corresponding multiple-party communication.</p>
<p id="p-0480" num="0482">Block <b>884</b> then directs the microprocessor <b>52</b> to generate a new client table entry for the designated client computer <b>802</b> in the communication table <b>80</b> corresponding to the CID. Block <b>884</b> also directs the microprocessor <b>52</b> to add the new client table entry to the client table <b>90</b> stored in the RAM <b>56</b>. In this embodiment the &#x201c;SilentFlag&#x201d; <b>212</b> shown in <figref idref="DRAWINGS">FIG. 7</figref> is set to active to identify the client computer as a designated client computer user (for example a lawful intercept authority).</p>
<p id="p-0481" num="0483">When the designated client computer user joins an already active multiple-party communication, the &#x201c;CatchUpFlag&#x201d; <b>208</b> in the client table entry <b>200</b> (shown in <figref idref="DRAWINGS">FIG. 7</figref>) is set to not active, such that the user will be able to view the effect of non-persistent message types (such as pointer movements) in addition to ant persistent changes to the displayed content. The client &#x201c;SentPointer&#x201d; field <b>210</b> is initially set to &#x201c;nil&#x201d; and will be set equal to the &#x201c;StartPointer&#x201d; <b>122</b> once the first message is sent.</p>
<p id="p-0482" num="0484">Block <b>886</b> then directs the microprocessor <b>52</b> create server side Rx and Tx buffers <b>92</b> and <b>94</b> for the designated client computer <b>802</b>. Block <b>888</b> then directs the microprocessor <b>52</b> to cause the network interface <b>62</b> of the I/O PORT <b>60</b> to transmit data representing the user interface <b>470</b> (shown in <figref idref="DRAWINGS">FIG. 11</figref>) through the network <b>20</b> to the designated client computer.</p>
<p id="p-0483" num="0485">Block <b>888</b> then directs the microprocessor <b>52</b> to read the user interface codes from the user interface store <b>101</b> and to cause the network interface <b>62</b> of the I/O PORT <b>60</b> to transmit the user interface codes through the network <b>20</b> to the designated client computer <b>802</b>. In this embodiment, the designated client computer <b>802</b> receives the same user interface program codes as any other client computer user, and operates in the same manner as any other of the client computers <b>14</b>, <b>16</b>, or <b>18</b>. Accordingly, the designated client computer displays the same user interface <b>470</b> as shown in <figref idref="DRAWINGS">FIG. 11</figref>. However, when the &#x201c;SilentFlag&#x201d; <b>212</b> is active, the number of client computers displayed in the field <b>492</b> of the status bar <b>490</b> does not include the designated client computer <b>802</b>. Accordingly, if for example, a lawful intercept authority has intercepted the multiple-party communication, the field <b>492</b> reflects only the number of client computers other than the designated client computer <b>802</b> that are in the multiple-party communication, thus providing anonymity for the lawful intercept authority. Similarly the column <b>148</b> in the table <b>140</b> shown in <figref idref="DRAWINGS">FIG. 4</figref>, and the column <b>854</b> in the table <b>846</b> shown in <figref idref="DRAWINGS">FIG. 27</figref> do not reflect any designated client computers that may be intercepting the multiple-party communication.</p>
<p id="p-0484" num="0486">Block <b>890</b> then directs the microprocessor <b>52</b> to cause all messages in the shared buffer (including the persistent messages <b>332</b>, the non-persistent messages <b>334</b>, and control messages <b>336</b> shown in <figref idref="DRAWINGS">FIG. 12</figref>) to be transmitted through the network interface <b>62</b> of the I/O PORT <b>60</b> to the designated client computer <b>802</b>.</p>
<p id="p-0485" num="0487">The designated client computer <b>802</b> is also able to produce messages in accordance with the process shown in <figref idref="DRAWINGS">FIG. 13A-13C</figref> and to transmit the messages in accordance with the process shown in <figref idref="DRAWINGS">FIG. 14</figref>. However, as will be described later herein, some messages received in response to user input from the designated client computer user may be ignored by the server.</p>
<p id="p-0486" num="0488">Referring to <figref idref="DRAWINGS">FIG. 29</figref>, a flowchart of blocks of code for directing the server processor circuit <b>50</b> (shown in <figref idref="DRAWINGS">FIG. 2</figref>) to receive messages from the designated client computer <b>802</b> and each of the client computers <b>14</b>, <b>16</b> and <b>18</b> is shown generally at <b>1000</b>. In general, the process <b>1000</b> includes modifications to the process shown in <figref idref="DRAWINGS">FIGS. 15A and 15B</figref> to handle messages from the designated client computer <b>802</b>.</p>
<p id="p-0487" num="0489">The process begins at <b>1002</b> when a message is received at any of the Rx buffers <b>92</b> in the RAM <b>56</b>. When a message is received, block <b>1004</b> directs the microprocessor <b>52</b> to read the &#x201c;SilentFlag&#x201d; <b>212</b> in the client table entry corresponding to the Rx buffer. The process continues at block <b>1006</b>, which directs the microprocessor <b>52</b> to determine whether the &#x201c;SilentFlag&#x201d; <b>212</b> for the client is active.</p>
<p id="p-0488" num="0490">If the &#x201c;SilentFlag&#x201d; <b>212</b> is active, then the corresponding client computer is a designated client computer (such as a lawful intercept authority), and the process continues at block <b>1008</b>. Block <b>1008</b> directs the microprocessor <b>52</b> to determine whether the message identifier of the received message is 23 or 24, indicating that the lawful intercept authority wishes to discontinue intercepting the multiple-party communication. If the message identifier is 23 or 24, then the process continues at block <b>1010</b>, which directs the microprocessor <b>52</b> to remove the designated client computer entry <b>200</b> from the client table <b>90</b> (shown in <figref idref="DRAWINGS">FIG. 2</figref>) and to delete the Rx and Tx buffers <b>92</b> and <b>94</b> for the designated client computer.</p>
<p id="p-0489" num="0491">If at block <b>1008</b>, the message identifier is not 23 or 24, then the process continues at block <b>1012</b>, which directs the microprocessor <b>52</b> to ignore the message.</p>
<p id="p-0490" num="0492">If at block <b>1006</b>, the &#x201c;SilentFlag&#x201d; is not active, then the message was not from a designated client computer, and the process continues at block <b>508</b> of <figref idref="DRAWINGS">FIG. 15A</figref>, as described above.</p>
<p id="p-0491" num="0493">Advantageously, the process <b>1000</b> shown in <figref idref="DRAWINGS">FIG. 29</figref> ignores all messages received from the designated client computer that would cause the user interface <b>470</b> (shown in <figref idref="DRAWINGS">FIG. 11</figref>) to reflect user input from the designated client computer user. Accordingly, no pointer corresponding to the designated client computer mouse movements will be displayed on any of the client computers and the designated client computer will also not be able to cause characters or images to be displayed in the user interface <b>470</b> on any of the client computers.</p>
<p id="p-0492" num="0494">Advantageously access to active multiple-party communications by a designated client computer user is facilitated using the same messages and client computer interface <b>470</b> used by the client computers <b>14</b>, <b>16</b> and <b>18</b>. The &#x201c;SilentFlag&#x201d; <b>212</b> is used at the server <b>12</b> to differentiate between ordinary users of client computers (e.g. the client computers <b>14</b>, <b>16</b>, and <b>18</b>) and designated client computer users.</p>
<p id="p-0493" num="0495">In general, the intercept functions described above facilitate intercept of active multiple-party communications to facilitate viewing in real-time of content created by the client computers <b>14</b>, <b>16</b>, and <b>18</b>, including but not limited to images displayed on the display area <b>472</b>, lines drawn, characters typed, non-persistent pointer movements, and game piece display and movement.</p>
<p id="h-0029" num="0000">Designated Client Computer Access to Saved Communications</p>
<p id="p-0494" num="0496">As described earlier herein, the communication pages are saved in the communication page store <b>104</b>. For intercept purposes, when pages are saved and then subsequently loaded and content added, subsequent versions of the same page are stored in separate files (i.e. &#x201c;Page2-1&#x201d;, &#x201c;Page2-2&#x201d; etc as described above). Accordingly, the server communication page store <b>104</b> facilitates storing, and subsequent replay of meeting content in a sequence corresponding to a sequence in which the content was created during the communication. Consequently, a lawful intercept authority, for example, will have access to all content created in the multiple-party communication, even when the content was subsequently cleared and/or or hidden by display of subsequent content.</p>
<p id="p-0495" num="0497">Similarly, in embodiments where the shared buffer <b>88</b> is implemented as circular buffer, when buffer reaches a pre-determined limit, older messages will be overwritten by the new messages. Accordingly, at a time when the &#x201c;CurrentPointer <b>124</b> is about to wrap around in the circular buffer, the page manager <b>74</b> directs the microprocessor <b>52</b> to save the contents of the shared buffer <b>88</b> to the communication page store <b>104</b>. Thus for intercept purposes, no any content will be lost due to overwriting of old messages in the shared buffer <b>88</b>.</p>
<p id="p-0496" num="0498">Referring to <figref idref="DRAWINGS">FIG. 30</figref>, when the user of the designated client computer <b>802</b> clicks on the &#x201c;list saved communications&#x201d; button <b>842</b>, the blocks of code similar to <b>232</b>, <b>234</b>, <b>235</b> and <b>236</b>, shown in <figref idref="DRAWINGS">FIG. 8</figref> are executed as described earlier, causing the microprocessor <b>52</b> to read data from the communication page store <b>104</b> and to display certain fields in a table <b>1062</b> on the saved communication pages web page <b>840</b>. The table <b>1062</b> includes a first column <b>1064</b> listing a multiple-party communication sequence number (1, 2, 3 for example), a second column <b>1066</b> listing the communication name read from the communication page store <b>104</b>, and a third column <b>1068</b> listing the communication type &#x201c;Free&#x201d; or &#x201c;Password&#x201d;.</p>
<p id="p-0497" num="0499">The table <b>1062</b> also includes a fourth column <b>1070</b>, listing a maximum number of client computer users involved in each respective multiple-party communication, a fifth column <b>1071</b> including a start date and time associated with the communication, and a sixth column <b>1072</b> listing a duration of the respective multiple-party communications.</p>
<p id="p-0498" num="0500">Fields in at least one of the columns in the table <b>1062</b> have associated hyperlink properties, which facilitate selection of a particular multiple-party communication listed in the display table by the user clicking on, for example, a hyperlinked communication name. The hyperlinked field causes a message including information identifying the saved multiple-party communication (for example a communication name and/or filename) to be transmitted to the server <b>12</b>.</p>
<p id="p-0499" num="0501">The saved communication pages web page <b>840</b> shown in <figref idref="DRAWINGS">FIG. 30</figref> further includes a playback rate field <b>1074</b> for entering a desired playback rate for saved messages. In this embodiment the playback rate field <b>1074</b> is implemented as a dropdown list, which permits the user to select a playback rate, such as &#x201c;2&#xd7;&#x201d;, for setting a rate at which messages will be transmitted to the designated client computer <b>802</b>.</p>
<p id="p-0500" num="0502">Referring to <figref idref="DRAWINGS">FIG. 31</figref>, a flowchart of blocks of code for directing the processor circuit <b>50</b> (shown in <figref idref="DRAWINGS">FIG. 2</figref>) to create a communication for the designated client computer <b>802</b> to view a saved multiple-party communication is shown generally at <b>1030</b>.</p>
<p id="p-0501" num="0503">The process begins at <b>1032</b> when a message requesting access to a saved multiple-party communication is received from the designated client computer <b>802</b>. Block <b>1033</b> directs the microprocessor <b>52</b> to read the communication name and/or associated filename included in the request message.</p>
<p id="p-0502" num="0504">Block <b>1034</b> then directs the microprocessor <b>52</b> to add a new communication entry to the communication table <b>80</b> and generate a new unique CID for this communication. Block <b>1034</b> also directs the microprocessor <b>52</b> to set the &#x201c;HiddenFlag&#x201d; <b>198</b> (shown in <figref idref="DRAWINGS">FIG. 6</figref>) to be active, so as to cause the communication to be hidden from the client computers <b>14</b>, <b>16</b>, and <b>18</b>. Referring to <figref idref="DRAWINGS">FIG. 4</figref>, multiple-party communications that have their corresponding &#x201c;HiddenFlag&#x201d; <b>198</b> set to active are not listed in the table <b>140</b> when the process <b>230</b> (shown in FIG. <b>8</b>) is initiated. Since the communication is hidden, the &#x201c;CommunicationName&#x201d; field <b>184</b> in the communication table entry <b>180</b> may be populated with the filename, the communication name or a default value.</p>
<p id="p-0503" num="0505">Referring back to <figref idref="DRAWINGS">FIG. 31</figref>, the process continues at block <b>1036</b>, which directs the microprocessor <b>52</b> to instantiate a new client manager for the communication.</p>
<p id="p-0504" num="0506">Block <b>1038</b> then directs the microprocessor <b>52</b> to create a new shared buffer <b>88</b> (shown in <figref idref="DRAWINGS">FIG. 2</figref>) for the communication and to initialize the &#x201c;StartPointer&#x201d; <b>122</b> and the &#x201c;CurrentPointer&#x201d; <b>124</b> (stored in fields <b>190</b> and <b>192</b> respectively of the communication table entry <b>180</b>) to nil.</p>
<p id="p-0505" num="0507">Block <b>1040</b> then directs the microprocessor <b>52</b> to add the designated client computer to the client table <b>90</b> stored in the RAM <b>56</b>. The &#x201c;CatchUpFlag&#x201d; <b>208</b> is set to not active to allow a lawful authority user to see all content created during the multiple-party communication. The &#x201c;SilentFlag&#x201d; <b>212</b> is also set to active at this point, but since the communication is hidden this is not absolutely necessary, but may provide additional security against a computer hackers seeking to view a saved multiple-party communication, for example.</p>
<p id="p-0506" num="0508">The process <b>1030</b> continues at block <b>1042</b>, which directs the microprocessor <b>52</b> to create server side Rx and Tx buffers <b>92</b> and <b>94</b> for the designated client computer.</p>
<p id="p-0507" num="0509">Block <b>1044</b> then directs the microprocessor <b>52</b> to read web page data from the web page store <b>102</b> of the hard drive <b>58</b>, and cause the network interface <b>62</b> of the I/O PORT <b>60</b> to transmit the data representing the saved communication pages web page <b>840</b> through the network <b>20</b> to the client computers.</p>
<p id="p-0508" num="0510">Block <b>1046</b> then directs the microprocessor <b>52</b> to read messages corresponding to a first page of the multiple-party communication from a file having a filename read in block <b>1033</b> from the saved communication page store <b>104</b> on the server hard drive <b>58</b> (shown in <figref idref="DRAWINGS">FIG. 2</figref>). Block <b>1046</b> also directs the microprocessor <b>52</b> to load the messages into the shared buffer <b>88</b> for the communication. The &#x201c;StartPointer&#x201d; <b>122</b> is set to reference the message store <b>120</b> in the shared buffer <b>88</b> to which the first message was loaded. As the message stores <b>120</b> of the shared buffer <b>88</b> are loaded with subsequent messages read from the page file, the &#x201c;CurrentPointer&#x201d; <b>124</b> is incremented to reference the last loaded message store.</p>
<p id="p-0509" num="0511">The &#x201c;StartPointer&#x201d; <b>122</b> is set to reference the first message and subsequently updated to reference later messages loaded into the shared buffer <b>88</b>.</p>
<p id="p-0510" num="0512">As described above, the saved communication page store <b>104</b> may include a plurality of files for each page created during the multiple-party communication. The files represent different and sequential versions of the messages in the shared buffer <b>88</b> and the files are created the page manager <b>74</b> when:
<ul id="ul0003" list-style="none">
    <li id="ul0003-0001" num="0000">
    <ul id="ul0004" list-style="none">
        <li id="ul0004-0001" num="0513">the user changes the current page to the next or previous page;</li>
        <li id="ul0004-0002" num="0514">the user opens content from client saved content store <b>100</b>;</li>
        <li id="ul0004-0003" num="0515">the user invokes the ClearScreen function;</li>
        <li id="ul0004-0004" num="0516">a last client computer user disconnects from the communication; and</li>
        <li id="ul0004-0005" num="0517">the shared buffer wraps around.</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0511" num="0518">Accordingly, when the designated client computer <b>802</b> accesses a saved communication the communication content is replayed in sequence starting at the first version of the first page (i.e. &#x201c;Page1-1&#x201d;) through all subsequent versions of the page in sequence. Accordingly, no communication content is lost or overwritten, which would cause played back content to differ from actual content displayed during the communication.</p>
<p id="p-0512" num="0519">Referring to <figref idref="DRAWINGS">FIG. 32</figref>, a flowchart of blocks of code for directing the processor circuit <b>50</b> (shown in <figref idref="DRAWINGS">FIG. 2</figref>) to transmit messages from the saved multiple-party communication is shown generally at <b>1130</b>. The transmit messages process is essentially similar to the process <b>580</b> shown in <figref idref="DRAWINGS">FIG. 16</figref>, except for the inclusion of blocks <b>1132</b> to <b>1138</b>.</p>
<p id="p-0513" num="0520">If at block <b>594</b>, the &#x201c;CatchUpFlag&#x201d; is active then the process <b>1130</b> continues at block <b>1132</b>, which directs the microprocessor <b>52</b> to determine whether the &#x201c;SilentFlag&#x201d; <b>212</b> is set to active. If the &#x201c;SilentFlag&#x201d; <b>212</b> is set to active, then the client is a designated client computer, and the process continues at block <b>1134</b>.</p>
<p id="p-0514" num="0521">Block <b>1134</b> directs the microprocessor <b>52</b> to determine whether the message is the first message transmitted to the designated client computer, in which case the process continues at block <b>1136</b>. Block <b>1136</b> directs the microprocessor <b>52</b> to save the message timestamp for the first message as T<sub>m</sub>, and the current server time as T<sub>0</sub>, in locations (not shown) in the RAM <b>56</b>.</p>
<p id="p-0515" num="0522">The process then continues at block <b>1138</b>, which directs the microprocessor <b>52</b> to wait until the current server time matches a &#x201c;Transmit Time&#x201d; calculated according to the relation:</p>
<p id="p-0516" num="0523">
<maths id="MATH-US-00001" num="00001">
<math overflow="scroll">
<mtable>
  <mtr>
    <mtd>
      <mrow>
        <mrow>
          <mi>Transmit</mi>
          <mo>&#x2062;</mo>
          <mstyle>
            <mspace width="0.8em" height="0.8ex"/>
          </mstyle>
          <mo>&#x2062;</mo>
          <mi>Time</mi>
        </mrow>
        <mo>=</mo>
        <mrow>
          <msub>
            <mi>T</mi>
            <mn>0</mn>
          </msub>
          <mo>+</mo>
          <mfrac>
            <mrow>
              <mi>Timestamp</mi>
              <mo>-</mo>
              <msub>
                <mi>T</mi>
                <mi>m</mi>
              </msub>
            </mrow>
            <mi>PBRate</mi>
          </mfrac>
        </mrow>
      </mrow>
    </mtd>
    <mtd>
      <mrow>
        <mi>Eqn</mi>
        <mo>&#x2062;</mo>
        <mstyle>
          <mspace width="1.1em" height="1.1ex"/>
        </mstyle>
        <mo>&#x2062;</mo>
        <mn>2</mn>
      </mrow>
    </mtd>
  </mtr>
</mtable>
</math>
</maths>
<br/>
where &#x201c;PBRate&#x201d; is the playback rate selected by the user at field <b>1074</b> in <figref idref="DRAWINGS">FIG. 30</figref>.
</p>
<p id="p-0517" num="0524">If at block <b>1134</b>, the message was the first message then no wait time will be incurred at block <b>1138</b>, since the timestamp of the first message is equal to T<sub>m</sub>. The process then continues at block <b>592</b>, which directs the microprocessor <b>52</b> to read a message in the shared buffer <b>88</b> referenced by the &#x201c;SentPointer&#x201d; <b>126</b> and to load the message into the Tx buffer <b>94</b> corresponding to the designated client computer <b>802</b>.</p>
<p id="p-0518" num="0525">If at block <b>1134</b>, the message was not the first message then the process continues at block <b>1138</b>, which directs the microprocessor <b>52</b> to wait for a period of time calculated from Eqn 2, before the process continues at block <b>592</b>, as described above.</p>
<p id="p-0519" num="0526">Since the &#x201c;CatchUp&#x201d; flag <b>208</b> for the designated client computer <b>802</b> is set to not active at block <b>1040</b> in <figref idref="DRAWINGS">FIG. 31</figref> and the &#x201c;SilentFlag&#x201d; <b>212</b> is active, all persistent, non-persistent, and control messages will be processed in accordance with the codes includes in block <b>1134</b>-<b>1138</b> and then loaded into the server side Tx buffer for transmission to the designated client computer <b>802</b>.</p>
<p id="p-0520" num="0527">Advantageously, the timestamp associated with each message received from the client computers facilitates viewing messages at a playback rate, which matches the rate at which content was created in the original multiple-party communication. Furthermore the designated client computer user may also select a playback rate at the playback rate field <b>1074</b> of the web page <b>840</b> shown in <figref idref="DRAWINGS">FIG. 30</figref> to cause messages to be displayed at an increased or reduced rate (for example twice the content creation rate), as desired by the designated client computer user.</p>
<p id="p-0521" num="0528">Advantageously, the user of the designated client computer <b>802</b> receives all persistent and non-persistent messages allowing the user to view all mouse movements by the client computer users in the multiple-party communication.</p>
<p id="h-0030" num="0000">Multiple Server System</p>
<p id="p-0522" num="0529">Referring to <figref idref="DRAWINGS">FIG. 33</figref>, a system for supporting multiple-party communications in accordance with a multiple-server embodiment of the invention is shown generally at <b>1170</b>. The system <b>1170</b> includes a first server <b>1172</b>, such as the server <b>12</b> shown in <figref idref="DRAWINGS">FIG. 1</figref>, and may also include a plurality of client computers <b>14</b>, <b>16</b>, and <b>18</b>, such as those shown in <figref idref="DRAWINGS">FIG. 1</figref>. The system <b>1170</b> further includes a second server <b>1174</b>. In the embodiment shown the first and second servers <b>1172</b> and <b>1174</b> are both implemented using the processor circuit <b>50</b> shown in <figref idref="DRAWINGS">FIG. 2</figref>. The first server <b>1172</b> and the second server <b>1174</b> are both in communication with the network <b>20</b>.</p>
<p id="p-0523" num="0530">In general, the first and second servers <b>1172</b> and <b>1174</b> are configured to provide server functions as described above in connection with the server <b>12</b> and the server processor circuit <b>50</b>.</p>
<p id="p-0524" num="0531">The first and second servers <b>1172</b> and <b>1174</b> may be located to provide multiple-party communications in specific geographic regions. For example, the first server <b>1172</b> my be located in Vancouver, Canada for serving North American clients such as the client computers <b>14</b> and <b>16</b>, while the second server <b>1174</b> may be located in London, England for serving European clients such as the client computer <b>18</b>.</p>
<p id="p-0525" num="0532">In other embodiments the first and second servers <b>1172</b> and <b>1174</b> may be members of a server farm used to provide multiple-party communications to a large plurality of clients, and accordingly the first and second servers may be located proximate a virtual server (not shown) that provides load balancing functions. In such embodiments, the server may comprise a plurality of servers, such as the servers <b>1172</b> and <b>1174</b>.</p>
<p id="h-0031" num="0000">Multiple Server Operation</p>
<p id="p-0526" num="0533">In one embodiment, when the process <b>150</b> (shown in <figref idref="DRAWINGS">FIG. 5</figref>) is launched to create a new multiple-party communication on the first server <b>1172</b>, the first server automatically transmits the communication name, password (if used) to the second server <b>1174</b>. The first server <b>1174</b> also adds the second server <b>1174</b> to the client table <b>90</b> stored in the server RAM <b>56</b>, and sets the &#x201c;CatchUpFlag&#x201d; <b>208</b> to not active, which results in the second server being transmitted all persistent, non-persistent, and control messages.</p>
<p id="p-0527" num="0534">In this embodiment, block <b>164</b> of the process <b>150</b>, which transmits the user interface web page to the client computers, is omitted when adding the second server <b>1174</b> to the multiple-party communication.</p>
<p id="p-0528" num="0535">When the second server <b>1174</b> receives the communication name and password from the first server <b>1172</b>, the second server creates a new multiple-party communication to mirror the multiple-party communication created on the first server.</p>
<p id="p-0529" num="0536">Referring to <figref idref="DRAWINGS">FIG. 34</figref>, a flowchart of blocks of code for directing the second server processor circuit <b>50</b> (shown in <figref idref="DRAWINGS">FIG. 2</figref>) to create a mirrored multiple-party communication is shown generally at <b>1200</b>. The process begins at <b>1202</b> when a message including a communication name and optional password is received from the first server <b>1172</b>. In general, each server <b>1172</b> and <b>1174</b> maintains a list of other servers in the system <b>1170</b> and is thus able to distinguish between communications from the client computers <b>14</b>, <b>16</b>, and/or <b>18</b> and communications from other servers <b>1172</b> or <b>1176</b> respectively.</p>
<p id="p-0530" num="0537">Block <b>1204</b> then directs the microprocessor <b>52</b> to add a new communication entry <b>180</b> (shown in <figref idref="DRAWINGS">FIG. 6</figref>) to the communication table <b>80</b> in the RAM <b>56</b>. The communication identifier (&#x201c;CID&#x201d;) field <b>182</b> in the communication table <b>80</b> is set to the unique number assigned by the first server <b>1172</b>, the &#x201c;CommunicationName&#x201d; field <b>184</b> is set to the communication name received from the first server, the &#x201c;CommunicationPassword&#x201d; field <b>186</b> is set to the password received from the first server (if provided).</p>
<p id="p-0531" num="0538">The process continues at block <b>1206</b>, which directs the microprocessor <b>52</b> to create a new shared buffer <b>88</b> (shown in <figref idref="DRAWINGS">FIG. 2</figref>) for the multiple-party communication, and to initialize the &#x201c;StartPointer&#x201d; <b>122</b> and the &#x201c;CurrentPointer&#x201d; <b>124</b> (stored in fields <b>190</b> and <b>192</b> respectively of the communication table entry <b>180</b>) to nil. Block <b>1206</b> also directs the microprocessor <b>52</b> to instantiate a page manager for the multiple-party communication by launching the page manager program codes in the store <b>74</b> of the program memory <b>54</b>.</p>
<p id="p-0532" num="0539">Block <b>1208</b> then directs the microprocessor <b>52</b> to instantiate a new client manager for the multiple-party communication by launching the client manager program codes in the store <b>72</b> of the program memory <b>54</b>.</p>
<p id="p-0533" num="0540">The process continues at block <b>1210</b>, which directs the microprocessor <b>52</b> to generate a new client table <b>90</b> in the RAM <b>56</b>, and to add an entry <b>200</b> to the client table for the first server <b>1172</b>. The client user identifier field (&#x201c;UID&#x201d;) <b>202</b> is set to a unique number identifying the first server <b>1172</b>. The client IP address field <b>204</b> and the client port field <b>206</b> are set to values corresponding to the IP address and port for the first server <b>1172</b>. The &#x201c;CatchUpFlag&#x201d; <b>208</b> is set to not active, which causes all persistent, non-persistent, and control messages received by the second server <b>1174</b> to be transmitted to the first server <b>1172</b>.</p>
<p id="p-0534" num="0541">The process <b>1200</b> then continues at block <b>1212</b>, which directs the microprocessor <b>52</b> to create server side Rx and Tx buffers <b>92</b> and <b>94</b> for the first server <b>1172</b>.</p>
<p id="p-0535" num="0542">Advantageously, by causing each of the first and second servers <b>1172</b> and <b>1174</b> to be included as clients in the respective client tables, all persistent, non-persistent, and control messages received at the first server from the client computers <b>14</b> and <b>16</b> are automatically transmitted to the second server by the process <b>580</b> shown in <figref idref="DRAWINGS">FIG. 16</figref>. The second server <b>1174</b> is essentially treated as any other client computer, in this respect.</p>
<p id="p-0536" num="0543">Similarly, the second server <b>1174</b> essentially treats the first server <b>1172</b> as any other client computer, and inserts the messages received from the first server into the shared buffer on the second server (in accordance with the process <b>500</b> shown in <figref idref="DRAWINGS">FIG. 15A</figref>).</p>
<p id="p-0537" num="0544">Similarly, all persistent, non-persistent, and control messages received at the second server <b>1174</b> from the client computer <b>18</b> are transmitted to the first server <b>1172</b>. The first server <b>1172</b> inserts the messages received from the second server <b>1174</b> into the shared buffer on the first server. Accordingly the shared buffer on the first server <b>1172</b> is continuously updated with messages received at the second server <b>1174</b> and the shared buffer on the second server <b>1174</b> is continuously updated with messages received at the first server <b>1172</b>.</p>
<p id="p-0538" num="0545">Messages received from the first server <b>1172</b> at the second server <b>1174</b> only differ from messages received directly from the client computer <b>18</b>, in that all messages received from the client computer <b>18</b> will have the same UID <b>202</b>, while messages received from the first server <b>1172</b> may have a UID corresponding to either the client computer <b>14</b>, or the client computer <b>16</b>.</p>
<p id="p-0539" num="0546">Client computers, such as the client computer <b>18</b>, which is in a geographical region that is closer to the second server <b>1174</b>, connect to the second server to join the multiple-party communication by launching the process <b>230</b> shown in <figref idref="DRAWINGS">FIG. 8</figref> on the second server <b>1174</b>. Since the second server <b>1174</b> has created an instance of the multiple-party communication, the client computer <b>18</b> should be generally unaware that they connected to the second server <b>1174</b>, while the client computers <b>14</b> and <b>16</b> are connected to the first server <b>1172</b>.</p>
<p id="p-0540" num="0547">Advantageously, the second server <b>1174</b> should be able to provide a faster response to messages received from the client computer <b>18</b> than the first server <b>1172</b>. In one embodiment the web page <b>130</b> shown in <figref idref="DRAWINGS">FIG. 4</figref> may include server buttons allowing clients select either the first server <b>1172</b> or the second server <b>1174</b> when joining a multiple-party communication. In this case the selection of the server is left up to the user of the client computer <b>14</b>, <b>16</b>, or <b>18</b>.</p>
<p id="p-0541" num="0548">In other embodiments, the system <b>1170</b> may further include a central server or a virtual server (not shown) that implements load balancing to redirect a connection from a client computer <b>14</b>, <b>16</b>, or <b>18</b> to either the first server <b>1172</b> or the second server <b>1174</b>, depending on which is able to provide a faster response. Load balancing techniques are well known in the art, and may involve evaluating round trip times for each of the servers <b>1172</b> and <b>1174</b>, before selecting a server having the quickest response to the client.</p>
<p id="p-0542" num="0549">Referring back to <figref idref="DRAWINGS">FIG. 15A</figref>, when messages are received from the client computers <b>14</b>, <b>16</b>, or <b>18</b> in any of the client Rx buffers, block <b>506</b> causes the messages to be time stamped. In the embodiment shown in <figref idref="DRAWINGS">FIG. 15</figref>, the timestamp is appended to the end of the messages (shown in <figref idref="DRAWINGS">FIG. 12</figref>). Accordingly, messages transmitted by the second server <b>1174</b> to the first server <b>1172</b> will thus already been time stamped at the second server.</p>
<p id="p-0543" num="0550">Messages received at the first server <b>1172</b> from client computers <b>14</b> and <b>16</b> are also time stamped when received at the first server. Consequently, all messages received at the first server <b>1172</b> from the second server <b>1174</b> will include a first timestamp appended by the second server and a second timestamp appended by the first server.</p>
<p id="p-0544" num="0551">In this embodiment, messages received at the first server <b>1172</b> are inserted into the shared buffer in ordered time sequence according to the first timestamp appended to the message by the second server <b>1174</b>. The second timestamp appended by the first server <b>1172</b> when receiving the message is ignored by the first server, when determining the time order in which to insert the messages in the shared buffer.</p>
<p id="p-0545" num="0552">Similarly, messages from the client computers <b>14</b> and <b>16</b> received by the first server <b>1172</b> that are transmitted to the second server <b>1174</b> have a timestamp appended to the message, which facilitates determining a time order in which these messages should be inserted into the shared buffer on the second server.</p>
<p id="p-0546" num="0553">Messages transmitted from the first server <b>1172</b> to the second server <b>1174</b> are similarly inserted into the shared buffer on the second server in time order. The first and second servers <b>1172</b> and <b>1174</b> may be time synchronized, for example through a Network Time Protocol, accounting for any time zone differences that may exist between the geographic locations of the servers.</p>
<p id="p-0547" num="0554">Advantageously, inserting messages into the shared buffers in time order causes persistent and non-persistent messages from the client computers <b>14</b>, <b>16</b>, and <b>18</b> to be displayed in a time-sequenced order when received at the client computers from the first and second servers <b>1172</b> and <b>1174</b>, thus at least partially compensating for network latency between the first and second servers. In some embodiments, messages received at each of the server <b>1172</b> and <b>1174</b> may be pre-buffered before being inserted into the respective shared buffers, to compensate for varying network delay. For example, when the network latency between the first server <b>1172</b> and the second server <b>1174</b> is approximately 160 miliseconds, a pre-buffer memory in the RAM <b>56</b> may be configured to have a buffer window of approximately 160 miliseconds. When inserting messages into the shared buffer, the oldest message in the 160 millisecond buffer window is copied from the pre-buffer into the shared buffer first.</p>
<p id="p-0548" num="0555">In yet another embodiment the non-persistent messages from the client computers <b>14</b>, <b>16</b>, and <b>18</b> may be inserted into the shared buffer as soon as they arrive, while persistent and control messages may be inserted in time ordered sequence, in accordance with their respective timestamps. As will be readily appreciated persistent and control messages that cause lines, characters and images to be displayed are more important to have in correct time order than non-persistent messages that only indicated relative pointer positions of the client computers <b>14</b>, <b>16</b>, and <b>18</b>.</p>
<p id="p-0549" num="0556">Advantageously, each client computer <b>14</b>, <b>16</b>, or <b>18</b> generally connects to a server having the quickest round-trip time for transmitting a message from the client and receiving the message back from the server, which may be typically about 60 milliseconds. This creates the impression for the client that the latency between their cursor position and the received pointer position is reduced compared to a single-server system, while the same view is provided on the respective displays <b>15</b>, <b>17</b>, and <b>19</b>. For example, if the client computer <b>18</b> in London connected directly to the first server <b>1172</b> located in Vancouver, then the round-trip time would be about 160 milliseconds for this client.</p>
<p id="h-0032" num="0000">Media Relay</p>
<p id="p-0550" num="0557">In one embodiment the server processor circuit <b>50</b> shown in <figref idref="DRAWINGS">FIG. 2</figref> includes codes <b>76</b> for causing the processor circuit to effect media relay functions.</p>
<p id="p-0551" num="0558">Referring to <figref idref="DRAWINGS">FIG. 35</figref>, when any of the users of the client computers <b>14</b>, <b>16</b>, or <b>18</b> wishes to communicate with each other via audio and/or video links, the server <b>12</b> may provide a media relay function. The media relay receives data representing audio and/or video information from one of the client computers (e.g. the client computer <b>14</b>) and retransmits the audio/video data to one of the other client computers (e.g. the client computer <b>16</b>). The audio data may be produced by a voice over internet protocol (VoIP) software implemented telephone, for example, and the video data may be produced by a webcam, for example. The audio/video data may be formatted to comply with User Datagram Protocol (UDP), or any other suitable network transmission protocol.</p>
<p id="p-0552" num="0559">Advantageously, the when the server <b>12</b> provides media relay functions for relaying communications between users, the server transmits the video/audio data to the designated client computer <b>802</b>, thereby allowing a lawful intercept authority to monitor such communications for lawful intercept purposes. The lawful intercept monitoring may involve receiving audio or video data representing speech or video images of the communication between the users. Alternatively, the lawful intercept authority may only view intercept related information (IRI) information indicating that a communications connection was established between certain client computers, at a certain time, for example.</p>
<p id="p-0553" num="0560">While specific embodiments of the invention have been described and illustrated, such embodiments should be considered illustrative of the invention only and not as limiting the invention as construed in accordance with the accompanying claims.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-math idrefs="MATH-US-00001" nb-file="US08627211-20140107-M00001.NB">
<img id="EMI-M00001" he="6.35mm" wi="76.20mm" file="US08627211-20140107-M00001.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A method for supporting multiple-party communications in a computer network including a server and at least one client computer, the method comprising:
<claim-text>receiving a first cursor message at the server from the client computer, said first cursor message representing a change in a position of a first cursor associated with the client computer in response to user input received from a user of the client computer;</claim-text>
<claim-text>producing a first pointer message in response to said first cursor message, said first pointer message representing said change in said position of said first cursor provided by said first cursor message and being operable to cause display of a pointer on the client computer; and</claim-text>
<claim-text>transmitting said first pointer message to said client computer.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the server is operably configured to host a plurality of multiple-party communications and further comprising locating a multiple-party communication associated with a user identifier, said user identifier being associated with said cursor message.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref> wherein locating said multiple-party communication associated with said user identifier comprises locating a multiple-party communication associated with at least one of:
<claim-text>a user identifier included in a payload of said cursor message;</claim-text>
<claim-text>a port identifier associated with the client computer; and</claim-text>
<claim-text>an internet protocol (IP) address associated with the client computer.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein producing said first pointer message comprises storing said first cursor message in a shared buffer associated with the associated multiple-party communication.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method of <claim-ref idref="CLM-00004">claim 4</claim-ref> wherein transmitting said first pointer message comprises copying said first cursor message into a transmit buffer associated with said user identifier, to facilitate said transmitting.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method of <claim-ref idref="CLM-00004">claim 4</claim-ref> further comprising:
<claim-text>receiving a message from the client computer representing a request by the client computer to clear content displayed on a display area of the client computer; and</claim-text>
<claim-text>transmitting a clear screen message to the client computer, said clear screen message being operable to cause content associated with messages previously transmitted to the client computer to be deleted on said display area of the client computer.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The method of <claim-ref idref="CLM-00004">claim 4</claim-ref> further comprising:
<claim-text>receiving a save message from the client computer, said save message representing a request by the user of the client computer to save content displayed on a display area of the client computer; and</claim-text>
<claim-text>causing pointer messages in said shared buffer to be saved to persistent storage.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The method of <claim-ref idref="CLM-00004">claim 4</claim-ref> further comprising:
<claim-text>receiving an open message from the client computer, said open message representing a request by the user of the client computer to load content previously saved during the multiple-party communication;</claim-text>
<claim-text>saving pointer messages in said shared buffer to a persistent memory;</claim-text>
<claim-text>transmitting a clear screen message to the client computer, said clear screen message being operable to cause content associated with pointer messages previously transmitted to the client computer to be deleted on a display area of the client computer;</claim-text>
<claim-text>loading a plurality of previously saved pointer messages into said shared buffer from said persistent memory; and</claim-text>
<claim-text>transmitting said plurality of previously saved pointer messages to the client computer.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The method of <claim-ref idref="CLM-00004">claim 4</claim-ref> further comprising:
<claim-text>receiving a page change message from the client computer said page change message representing a request by the user of the client computer to change content displayed on a display area of the client computer;</claim-text>
<claim-text>saving pointer messages in said shared buffer to a persistent memory store; and</claim-text>
<claim-text>transmitting a clear screen message to the client computer, said clear screen message being operable to cause content associated with pointer messages previously transmitted to the client computer to be deleted on said display area of the client computer.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The method of <claim-ref idref="CLM-00009">claim 9</claim-ref> further comprising loading a plurality of previously saved pointer messages into said shared buffer from said persistent memory and transmitting said previously saved messages to the client computer.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The method of <claim-ref idref="CLM-00010">claim 10</claim-ref> further comprising determining a message type associated with said pointer message and wherein transmitting said previously saved pointer messages comprises transmitting only pointer messages of a persistent message type to the client computer.</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> further comprising establishing a multiple-party communication in response to a signal received from the client computer.</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The method of <claim-ref idref="CLM-00012">claim 12</claim-ref> wherein establishing said multiple-party communication comprises creating a shared buffer and associating a communication identifier with said shared buffer.</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The method of <claim-ref idref="CLM-00013">claim 13</claim-ref> wherein creating said shared buffer comprises:
<claim-text>allocating a plurality of memory stores to said multiple-party communication;</claim-text>
<claim-text>associating a start data pointer with said plurality of memory stores, said start data pointer representing a location of a store in which a first message associated with the multiple-party communication is stored;</claim-text>
<claim-text>associating a current data pointer with said plurality of memory stores, said current data pointer representing a location of a store in which a last message associated with the multiple-party communication is stored; and</claim-text>
<claim-text>associating a client sent pointer with said plurality of memory stores, said client sent pointer being associated with the client computer and representing a location of a store in which a last message sent to the associated client computer is stored.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The method of <claim-ref idref="CLM-00012">claim 12</claim-ref> further comprising associating a client table with a communication identifier identifying said multiple-party communication.</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The method of <claim-ref idref="CLM-00015">claim 15</claim-ref> further comprising storing an identification of the client computer in the client table.</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The method of <claim-ref idref="CLM-00016">claim 16</claim-ref> further comprising associating a receive buffer and a transmit buffer with the client identifier, said receive buffer being operably configured to store cursor messages received from the client computer and said transmit buffer being operably configured to store pointer messages to be transmitted to the client computer.</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The method of <claim-ref idref="CLM-00016">claim 16</claim-ref> further comprising:
<claim-text>receiving a disconnect message from the client computer, said disconnect message representing a request by the user of the client computer to disconnect from the multiple-party communication; and</claim-text>
<claim-text>deleting said identification of the client computer in the client table.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. The method of <claim-ref idref="CLM-00018">claim 18</claim-ref> further comprising causing the multiple-party communication to be discontinued when said identification of the client computer is an only client computer in the client table and wherein said disconnect message includes a request by said user of the client computer to discontinue the multiple-party communication after disconnecting the client computer.</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. The method of <claim-ref idref="CLM-00018">claim 18</claim-ref> further comprising causing the multiple-party communication to continue running when at least one of:
<claim-text>the client computer is not an only client computer in the client table; and</claim-text>
<claim-text>said disconnect message does not include a request to discontinue the multiple-party communication after disconnecting the client computer; and</claim-text>
<claim-text>said disconnect message includes a request to keep the multiple-party communication running after disconnecting the client computer.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00021" num="00021">
<claim-text>21. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein said client computer is a first client computer in a multiple-party communication, and further comprising:
<claim-text>receiving a second cursor message at the server, said second cursor message representing a change in a position of a second cursor displayed on a second client computer in the computer network; and</claim-text>
<claim-text>transmitting a second pointer message to said first and second client computers, said second pointer message representing said change in said position of said second cursor provided by said second cursor message.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00022" num="00022">
<claim-text>22. The method of <claim-ref idref="CLM-00021">claim 21</claim-ref> further comprising associating a time of receipt of said first cursor message at the server with said first cursor message and associating a time of receipt of said second cursor message at the server with said second cursor message, and wherein transmitting said first pointer message and transmitting said second pointer message comprises transmitting said respective pointer messages in a time order corresponding to said time of receipt of each corresponding cursor message.</claim-text>
</claim>
<claim id="CLM-00023" num="00023">
<claim-text>23. The method of <claim-ref idref="CLM-00021">claim 21</claim-ref> further comprising:
<claim-text>receiving an input message from said first client computer, said input message including a uniform resource locator identifying web page content associated with a web site accessible over the computer network and being operable to identify meeting content displayed on said first client computer;</claim-text>
<claim-text>producing an output message including said uniform resource locator;</claim-text>
<claim-text>transmitting said output message to said second client computer, said output message being operable to cause said web page content to be displayed on said second client computer.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00024" num="00024">
<claim-text>24. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein receiving said first cursor message comprises receiving a plurality of cursor messages, each of said plurality of cursor messages representing a subsequent change in said position of said first cursor, and wherein producing said first pointer message comprises producing a plurality of pointer messages representing said subsequent changes in said position of said first cursor.</claim-text>
</claim>
<claim id="CLM-00025" num="00025">
<claim-text>25. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the at least one client computer comprises a first client computer in a plurality of client computers and further comprising transmitting said first pointer message to client computers in said plurality of client computers other than said first client computer.</claim-text>
</claim>
<claim id="CLM-00026" num="00026">
<claim-text>26. The method of <claim-ref idref="CLM-00025">claim 25</claim-ref> wherein transmitting said first pointer message to client computers in said plurality of client computers other than said first client computer comprises:
<claim-text>determining a message type associated with said first cursor message;</claim-text>
<claim-text>transmitting said first pointer message to:
<claim-text>a) each of the plurality of client computers when said first cursor message has a message type associated with user input that is operable to produce a persistent change to multiple-party communication content; and</claim-text>
<claim-text>b) ones of the plurality of client computers that meet a criterion when said first cursor message has a message type associated with user input that produces a cursor movement at said one of said plurality of client computers and wherein said cursor movement does not produce a persistent change to the multiple-party communication content.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00027" num="00027">
<claim-text>27. The method of <claim-ref idref="CLM-00026">claim 26</claim-ref> wherein transmitting said first pointer message to said ones of the plurality of client computers that meet said criterion comprises transmitting said first pointer message to said ones of the plurality of client computers when all previously received messages of said persistent message type have been transmitted to said ones of the plurality of client computers during the multiple-party communication.</claim-text>
</claim>
<claim id="CLM-00028" num="00028">
<claim-text>28. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein said client computer has meeting content displayed on an associated display area, and wherein said meeting content comprises web page content associated with a web site accessible over the computer network, and wherein said transmitting comprises transmitting said first pointer message to said client computer to cause display of a pointer within said meeting content on said display area on said client computer.</claim-text>
</claim>
<claim id="CLM-00029" num="00029">
<claim-text>29. The method of <claim-ref idref="CLM-00028">claim 28</claim-ref> wherein said client computer is a first client computer in a multiple-party communication and further comprising a second client computer having the web page content displayed on an associated display area of the second client computer, the method further comprising:
<claim-text>receiving an input message at the server from the first client computer, said input message representing user input of a character at the first client computer;</claim-text>
<claim-text>producing an output message representing said character provided by said input message;</claim-text>
<claim-text>transmitting said output message to each of the first client computer and a second client computer to facilitate display of the character within said meeting content on said display area on each of said first and second client computers in response to receiving said output message.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00030" num="00030">
<claim-text>30. The method of <claim-ref idref="CLM-00029">claim 29</claim-ref> wherein receiving said input message comprises receiving an input message at the server representing user input of a plurality of characters at the first client computer, and wherein producing said output message comprises producing an output message representing said plurality of characters provided by said input message.</claim-text>
</claim>
<claim id="CLM-00031" num="00031">
<claim-text>31. The method of <claim-ref idref="CLM-00029">claim 29</claim-ref> wherein receiving said input message comprises receiving an input message including a coordinate position identifying a position within said meeting content where said character is to be displayed and wherein producing said output message comprises producing an output message including said coordinate position to facilitate display of the character at said coordinate position within said meeting content on each of said first and second client computers.</claim-text>
</claim>
<claim id="CLM-00032" num="00032">
<claim-text>32. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein said client computer is a first client computer in a multiple-party communication and further comprising a second client computer in the multiple-party communication, the method further comprising:
<claim-text>receiving an input message at the server from the first client computer, said input message representing user input of a character at the first client computer;</claim-text>
<claim-text>producing an output message representing said character provided by said input message;</claim-text>
<claim-text>transmitting said output message to each of the first client computer and a second client computer to facilitate display of the character on each of said first and second client computers in response to receiving said output message.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00033" num="00033">
<claim-text>33. The method of <claim-ref idref="CLM-00032">claim 32</claim-ref> wherein receiving said input message comprises receiving an input message at the server representing user input of a plurality of characters at the first client computer, and wherein producing said output message comprises producing an output message representing said plurality of characters provided by said input message.</claim-text>
</claim>
<claim id="CLM-00034" num="00034">
<claim-text>34. The method of <claim-ref idref="CLM-00032">claim 32</claim-ref> wherein receiving said input message comprises receiving an input message including a coordinate position identifying a position where said character is to be displayed and wherein producing said output message comprises producing an output message including said coordinate position to facilitate display of the character at said coordinate position on each of said first and second client computers in response to receiving said output message.</claim-text>
</claim>
<claim id="CLM-00035" num="00035">
<claim-text>35. An apparatus for supporting multiple-party communications in a computer network including a server and at least one client computer, the apparatus comprising:
<claim-text>means for receiving a first cursor message at the server from the client computer, said first cursor message representing a change in a position of a first cursor associated with the client computer in response to user input received from a user of the client computer;</claim-text>
<claim-text>means for producing a first pointer message in response to said first cursor message, said first pointer message representing said change in said position of said first cursor provided by said first cursor message and being operable to cause display of a pointer on the client computer, and</claim-text>
<claim-text>means for transmitting said first pointer message to said first client computer.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00036" num="00036">
<claim-text>36. The apparatus of <claim-ref idref="CLM-00035">claim 35</claim-ref> wherein the server is operably configured to host a plurality of multiple-party communications and further comprising means for locating a multiple-party communication associated with a user identifier, said user identifier being associated with said cursor message.</claim-text>
</claim>
<claim id="CLM-00037" num="00037">
<claim-text>37. The apparatus of <claim-ref idref="CLM-00036">claim 36</claim-ref> wherein said means for locating said multiple-party communication associated with said user identifier comprises locating a multiple-party communication associated with at least one of:
<claim-text>a user identifier included in a payload of said cursor message;</claim-text>
<claim-text>a port identifier associated with the client computer; and</claim-text>
<claim-text>an internet protocol (IP) address associated with the client computer.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00038" num="00038">
<claim-text>38. The apparatus of <claim-ref idref="CLM-00035">claim 35</claim-ref> wherein said means for producing said first pointer message comprises means for storing said first cursor message in a shared buffer associated with the associated multiple-party communication.</claim-text>
</claim>
<claim id="CLM-00039" num="00039">
<claim-text>39. The apparatus of <claim-ref idref="CLM-00038">claim 38</claim-ref> wherein said means for transmitting said first pointer message comprises means for copying said first cursor message into a transmit buffer associated with said user identifier, to facilitate said transmitting.</claim-text>
</claim>
<claim id="CLM-00040" num="00040">
<claim-text>40. The apparatus of <claim-ref idref="CLM-00038">claim 38</claim-ref> further comprising:
<claim-text>means for receiving a message from the client computer representing a request by the client computer to clear content displayed on a display area of the client computer; and</claim-text>
<claim-text>means for transmitting a clear screen message to the client computer, said clear screen message being operable to cause content associated with messages previously transmitted to the client computer to be deleted on said display area of the client computer.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00041" num="00041">
<claim-text>41. The apparatus of <claim-ref idref="CLM-00038">claim 38</claim-ref> further comprising:
<claim-text>means for receiving a save message from the client computer, said save message representing a request by the user of the client computer to save content displayed on a display area of the client computer; and</claim-text>
<claim-text>means for causing pointer messages in said shared buffer to be saved to persistent storage.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00042" num="00042">
<claim-text>42. The apparatus of <claim-ref idref="CLM-00038">claim 38</claim-ref> further comprising:
<claim-text>means for receiving an open message from the client computer, said open message representing a request by the user of the client computer to load content previously saved during the multiple-party communication;</claim-text>
<claim-text>means for saving pointer messages in said shared buffer to a persistent memory;</claim-text>
<claim-text>means for transmitting a clear screen message to the client computer, said clear screen message being operable to cause content associated with pointer messages previously transmitted to the client computer to be deleted on a display area of the client computer;</claim-text>
<claim-text>means for loading a plurality of previously saved pointer messages into said shared buffer from said persistent memory; and</claim-text>
<claim-text>means for transmitting said plurality of previously saved pointer messages to the client computer.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00043" num="00043">
<claim-text>43. The apparatus of <claim-ref idref="CLM-00038">claim 38</claim-ref> further comprising:
<claim-text>means for receiving a page change message from the client computer said page change message representing a request by the user of the client computer to change content displayed on a display area of the client computer;</claim-text>
<claim-text>means for saving messages in said shared buffer to a persistent memory; and</claim-text>
<claim-text>means for transmitting a clear screen message to the client computer, said clear screen message being operable to cause content associated with pointer messages previously transmitted to the client computer to be deleted on said display area of the client computer.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00044" num="00044">
<claim-text>44. The apparatus of <claim-ref idref="CLM-00043">claim 43</claim-ref> further comprising means for loading a plurality of previously saved pointer messages into said shared buffer from said persistent memory and means for transmitting said previously saved messages to the client computer.</claim-text>
</claim>
<claim id="CLM-00045" num="00045">
<claim-text>45. The apparatus of <claim-ref idref="CLM-00044">claim 44</claim-ref> further comprising means for determining a message type associated with said pointer message and wherein said means for transmitting said previously saved pointer messages comprises means for transmitting only pointer messages of a persistent message type to the client computer.</claim-text>
</claim>
<claim id="CLM-00046" num="00046">
<claim-text>46. The apparatus of <claim-ref idref="CLM-00035">claim 35</claim-ref> further comprising means for establishing a multiple-party communication in response to a signal received from the client computer.</claim-text>
</claim>
<claim id="CLM-00047" num="00047">
<claim-text>47. The apparatus of <claim-ref idref="CLM-00046">claim 46</claim-ref> wherein said means for establishing said multiple-party communication comprises creating a shared buffer and associating a communication identifier with said shared buffer.</claim-text>
</claim>
<claim id="CLM-00048" num="00048">
<claim-text>48. The apparatus of <claim-ref idref="CLM-00047">claim 47</claim-ref> wherein said means for creating said shared buffer comprises:
<claim-text>means for allocating a plurality of memory stores to said multiple-party communication;</claim-text>
<claim-text>means for associating a start data pointer with said plurality of memory stores, said start data pointer representing a location of a store in which a first message associated with the multiple-party communication is stored;</claim-text>
<claim-text>means for associating a current data pointer with said plurality of memory stores, said current data pointer representing a location of a store in which a last message associated with the multiple-party communication is stored; and</claim-text>
<claim-text>means for associating a client sent pointer with said plurality of memory stores, said client sent pointer being associated with the client computer and representing a location of a store in which a last message sent to the associated client computer is stored.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00049" num="00049">
<claim-text>49. The apparatus of <claim-ref idref="CLM-00046">claim 46</claim-ref> further comprising means for associating a client table with a communication identifier identifying said multiple-party communication.</claim-text>
</claim>
<claim id="CLM-00050" num="00050">
<claim-text>50. The apparatus of <claim-ref idref="CLM-00049">claim 49</claim-ref> further comprising means for storing an identification of the client computer in the client table.</claim-text>
</claim>
<claim id="CLM-00051" num="00051">
<claim-text>51. The apparatus of <claim-ref idref="CLM-00050">claim 50</claim-ref> further comprising means for associating a receive buffer and a transmit buffer with the client identifier, said receive buffer being operably configured to store cursor messages received from the client computer and said transmit buffer being operably configured to store pointer messages to be transmitted to the client computer.</claim-text>
</claim>
<claim id="CLM-00052" num="00052">
<claim-text>52. The apparatus of <claim-ref idref="CLM-00050">claim 50</claim-ref> further comprising:
<claim-text>means for receiving a disconnect message from the client computer, said disconnect message representing a request by the user of the client computer to disconnect from the multiple-party communication; and</claim-text>
<claim-text>means for deleting said identification of the client computer in the client table.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00053" num="00053">
<claim-text>53. The apparatus of <claim-ref idref="CLM-00052">claim 52</claim-ref> further comprising means for causing the multiple-party communication to be discontinued when said identification of the client computer is an only client computer in the client table and wherein said disconnect message includes a request by said user of the client computer to discontinue the multiple-party communication after disconnecting the client computer.</claim-text>
</claim>
<claim id="CLM-00054" num="00054">
<claim-text>54. The apparatus of <claim-ref idref="CLM-00052">claim 52</claim-ref> further comprising means for causing the multiple-party communication to continue running when at least one of:
<claim-text>the client computer is not an only client computer in the client table; and</claim-text>
<claim-text>said disconnect message does not include a request to discontinue the multiple-party communication after disconnecting the client computer; and</claim-text>
<claim-text>said disconnect message includes a request to keep the multiple-party communication running after disconnecting the client computer.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00055" num="00055">
<claim-text>55. The apparatus of <claim-ref idref="CLM-00035">claim 35</claim-ref> wherein said client computer is a first client computer in a multiple-party communication, and further comprising:
<claim-text>means for receiving a second cursor message at the server, said second cursor message representing a change in a position of a second cursor displayed on a second client computer in the computer network; and</claim-text>
<claim-text>means for transmitting a second pointer message to said first and second client computers, said second pointer message representing said change in said position of said second cursor provided by said second cursor message.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00056" num="00056">
<claim-text>56. The apparatus of <claim-ref idref="CLM-00055">claim 55</claim-ref> further comprising means for associating a time of receipt of said first cursor message at the server with said first cursor message and means for associating a time of receipt of said second cursor message at the server with said second cursor message, and wherein said means for transmitting said first pointer message and said means for transmitting said second pointer message comprises means for transmitting said respective pointer messages in a time order corresponding to said time of receipt of each corresponding cursor message.</claim-text>
</claim>
<claim id="CLM-00057" num="00057">
<claim-text>57. The apparatus of <claim-ref idref="CLM-00055">claim 55</claim-ref> further comprising:
<claim-text>means for receiving an input message from said first client computer, said input message including a uniform resource locator identifying web page content associated with a web site accessible over the computer network and being operable to identify meeting content displayed on said first client computer;</claim-text>
<claim-text>means for producing an output message including said uniform resource locator;</claim-text>
<claim-text>means for transmitting said output message to said second client computer, said output message being operable to cause said web page content to be displayed on said second client computer.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00058" num="00058">
<claim-text>58. The apparatus of <claim-ref idref="CLM-00035">claim 35</claim-ref> wherein said means for receiving said first cursor message comprises means for receiving a plurality of cursor messages, each of said plurality of cursor messages representing a subsequent change in said position of said first cursor, and wherein said means for producing said first pointer message comprises means for producing a plurality of pointer messages representing said subsequent changes in said position of said first cursor.</claim-text>
</claim>
<claim id="CLM-00059" num="00059">
<claim-text>59. The apparatus of <claim-ref idref="CLM-00035">claim 35</claim-ref> wherein the at least one client computer comprises a first client computer in a plurality of client computers and further comprising means for transmitting said first pointer message to client computers in said plurality of client computers other than said first client computer.</claim-text>
</claim>
<claim id="CLM-00060" num="00060">
<claim-text>60. The apparatus of <claim-ref idref="CLM-00059">claim 59</claim-ref> wherein said means for transmitting said first pointer message to client computers in said plurality of client computers other than said first client computer comprises:
<claim-text>means for determining a message type associated with said first cursor message;</claim-text>
<claim-text>means for transmitting said first pointer message to:
<claim-text>a) each of the plurality of client computers when said first cursor message has a message type associated with user input that is operable to produce a persistent change to multiple-party communication content; and</claim-text>
<claim-text>b) ones of the plurality of client computers that meet a criterion when said first cursor message has a message type associated with user input that produces a cursor movement at said one of said plurality of client computers and wherein said cursor movement does not produce a persistent change to the multiple-party communication content.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00061" num="00061">
<claim-text>61. The apparatus of <claim-ref idref="CLM-00060">claim 60</claim-ref> wherein said means for transmitting said first pointer message to said ones of the plurality of client computers that meet said criterion comprises means for transmitting said first pointer message to said ones of the plurality of client computers when all previously received messages of said persistent message type have been transmitted to said ones of the plurality of client computers during the multiple-party communication.</claim-text>
</claim>
<claim id="CLM-00062" num="00062">
<claim-text>62. The apparatus of <claim-ref idref="CLM-00035">claim 35</claim-ref> wherein said client computer has meeting content displayed on an associated display area, and wherein said meeting content comprises web page content associated with a web site accessible over the computer network, and wherein said means for transmitting comprises means for transmitting said first pointer message to said client computer to cause display of a pointer within said meeting content on said display area on said client computer.</claim-text>
</claim>
<claim id="CLM-00063" num="00063">
<claim-text>63. The apparatus of <claim-ref idref="CLM-00062">claim 62</claim-ref> wherein said client computer is a first client computer in a multiple-party communication and further comprising a second client computer having the web page content displayed on an associated display area of the second client computer, the apparatus further comprising:
<claim-text>means for receiving an input message at the server from the first client computer, said input message representing user input of a character at the first client computer;</claim-text>
<claim-text>means for producing an output message representing said character provided by said input message;</claim-text>
<claim-text>means for transmitting said output message to each of the first client computer and a second client computer to facilitate display of the character within said meeting content on said display area on each of said first and second client computers in response to receiving said output message.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00064" num="00064">
<claim-text>64. The apparatus of <claim-ref idref="CLM-00063">claim 63</claim-ref> wherein said means for receiving said input message comprises means for receiving an input message at the server representing user input of a plurality of characters at the first client computer, and wherein said means for producing said output message comprises means for producing an output message representing said plurality of characters provided by said input message.</claim-text>
</claim>
<claim id="CLM-00065" num="00065">
<claim-text>65. The apparatus of <claim-ref idref="CLM-00063">claim 63</claim-ref> wherein said means for receiving said input message comprises means for receiving an input message including a coordinate position identifying a position within said meeting content where said character is to be displayed and wherein said means for producing said output message comprises means for producing an output message including said coordinate position to facilitate display of the character at said coordinate position within said meeting content on each of said first and second client computers.</claim-text>
</claim>
<claim id="CLM-00066" num="00066">
<claim-text>66. The apparatus of <claim-ref idref="CLM-00035">claim 35</claim-ref> wherein said client computer is a first client computer in a multiple-party communication and further comprising a second client computer in the multiple-party communication, the apparatus further comprising:
<claim-text>means for receiving an input message at the server from the first client computer, said input message representing user input of a character at the first client computer;</claim-text>
<claim-text>means for producing an output message representing said character provided by said input message;</claim-text>
<claim-text>means for transmitting said output message to each of the first client computer and a second client computer to facilitate display of the character on each of said first and second client computers in response to receiving said output message.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00067" num="00067">
<claim-text>67. The apparatus of <claim-ref idref="CLM-00066">claim 66</claim-ref> wherein said means for receiving said input message comprises means for receiving an input message at the server representing user input of a plurality of characters at the first client computer, and wherein said means for producing said output message comprises means for producing an output message representing said plurality of characters provided by said input message.</claim-text>
</claim>
<claim id="CLM-00068" num="00068">
<claim-text>68. The apparatus of <claim-ref idref="CLM-00066">claim 66</claim-ref> wherein said means for receiving said input message comprises means for receiving an input message including a coordinate position identifying a position where said character is to be displayed and wherein said means for producing said output message comprises means for producing an output message including said coordinate position to facilitate display of the character at said coordinate position on each of said first and second client computers in response to receiving said output message.</claim-text>
</claim>
<claim id="CLM-00069" num="00069">
<claim-text>69. An apparatus for supporting multiple-party communications in a computer network including a server and at least one client computer, the apparatus comprising a processor circuit operably configured to:
<claim-text>receive a first cursor message at the server from the client computer, said first cursor message representing a change in a position of a first cursor associated with the client computer in response to user input received from a user of the client computer,</claim-text>
<claim-text>produce a first pointer message in response to said first cursor message, said first pointer message representing said change in said position of said first cursor provided by said first cursor message and being operable to cause display of a pointer on the client computer; and</claim-text>
<claim-text>transmit said first pointer message to said first client computer.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00070" num="00070">
<claim-text>70. The apparatus of <claim-ref idref="CLM-00069">claim 69</claim-ref> wherein said processor circuit is operably configured to host a plurality of multiple-party communications and said processor circuit is operably configured to locate a multiple-party communication associated with a user identifier, said user identifier being associated with said cursor message.</claim-text>
</claim>
<claim id="CLM-00071" num="00071">
<claim-text>71. The apparatus of <claim-ref idref="CLM-00070">claim 70</claim-ref> wherein said processor circuit is operably configured to locate a multiple-party communication associated with at least one of:
<claim-text>a user identifier included in a payload of said cursor message;</claim-text>
<claim-text>a port identifier associated with the client computer; and</claim-text>
<claim-text>an internet protocol (IP) address associated with the client computer.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00072" num="00072">
<claim-text>72. The apparatus of <claim-ref idref="CLM-00069">claim 69</claim-ref> wherein said processor circuit is operably configured to produce said first pointer message by storing said first cursor message in a shared buffer associated with the associated multiple-party communication.</claim-text>
</claim>
<claim id="CLM-00073" num="00073">
<claim-text>73. The apparatus of <claim-ref idref="CLM-00072">claim 72</claim-ref> wherein said processor circuit is operably configured facilitate transmitting said first pointer message by copying said first cursor message into a transmit buffer associated with said user identifier.</claim-text>
</claim>
<claim id="CLM-00074" num="00074">
<claim-text>74. The apparatus of <claim-ref idref="CLM-00072">claim 72</claim-ref> said processor circuit is operably configured to:
<claim-text>receive a message from the client computer representing a request by the client computer to clear content displayed on a display area of the client computer; and</claim-text>
<claim-text>transmit a clear screen message to the client computer, said clear screen message being operable to cause content associated with messages previously transmitted to the client computer to be deleted on said display area of the client computer.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00075" num="00075">
<claim-text>75. The apparatus of <claim-ref idref="CLM-00072">claim 72</claim-ref> wherein said processor circuit is operably configured to:
<claim-text>receive a save message from the client computer, said save message representing a request by the user of the client computer to save content displayed on a display area of the client computer; and</claim-text>
<claim-text>cause pointer messages in said shared buffer to be saved to persistent storage.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00076" num="00076">
<claim-text>76. The apparatus of <claim-ref idref="CLM-00069">claim 69</claim-ref> wherein said processor circuit is operably configured to establish a multiple-party communication in response to a signal received from the client computer.</claim-text>
</claim>
<claim id="CLM-00077" num="00077">
<claim-text>77. The apparatus of <claim-ref idref="CLM-00076">claim 76</claim-ref> wherein said processor circuit is operably configured to create a shared buffer and associate a communication identifier with said shared buffer.</claim-text>
</claim>
<claim id="CLM-00078" num="00078">
<claim-text>78. The apparatus of <claim-ref idref="CLM-00077">claim 77</claim-ref> wherein said processor circuit is operably configured to create said shared buffer by:
<claim-text>allocating a plurality of memory stores to said multiple-party communication;</claim-text>
<claim-text>associate a start data pointer with said plurality of memory stores, said start data pointer representing a location of a store in which a first message associated with the multiple-party communication is stored;</claim-text>
<claim-text>associate a current data pointer with said plurality of memory stores, said current data pointer representing a location of a store in which a last message associated with the multiple-party communication is stored; and</claim-text>
<claim-text>associate a client sent pointer with said plurality of memory stores, said client sent pointer being associated with the client computer and representing a location of a store in which a last message sent to the associated client computer is stored.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00079" num="00079">
<claim-text>79. The apparatus of <claim-ref idref="CLM-00077">claim 77</claim-ref> wherein said processor circuit is operably configured to:
<claim-text>receive an open message from the client computer, said open message representing a request by the user of the client computer to load content previously saved during the multiple-party communication;</claim-text>
<claim-text>save pointer messages in said shared buffer to a persistent memory;</claim-text>
<claim-text>delete said pointer messages in said shared buffer;</claim-text>
<claim-text>transmit a clear screen message to the client computer, said clear screen message being operable to cause content associated with pointer messages previously transmitted to the client computer to be deleted on a display area of the client computer;</claim-text>
<claim-text>load a plurality of previously saved pointer messages into said shared buffer from said persistent memory; and</claim-text>
<claim-text>transmit said plurality of previously saved pointer messages to the client computer.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00080" num="00080">
<claim-text>80. The apparatus of <claim-ref idref="CLM-00077">claim 77</claim-ref> wherein said processor circuit is operably configured to:
<claim-text>receive a page change message from the client computer said page change message representing a request by the user of the client computer to change content displayed on a display area of the client computer;</claim-text>
<claim-text>save pointer messages in said shared buffer to a persistent memory;</claim-text>
<claim-text>delete said pointer messages in said shared buffer; and</claim-text>
<claim-text>transmit a clear screen message to the client computer, said clear screen message being operable to cause content associated with pointer messages previously transmitted to the client computer to be deleted on said display area of the client computer.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00081" num="00081">
<claim-text>81. The apparatus of <claim-ref idref="CLM-00080">claim 80</claim-ref> wherein said processor circuit is operably configured to load a plurality of previously saved messages into said shared buffer from said persistent memory and to transmit said previously saved messages to the client computer.</claim-text>
</claim>
<claim id="CLM-00082" num="00082">
<claim-text>82. The apparatus of <claim-ref idref="CLM-00081">claim 81</claim-ref> wherein said processor circuit is operably configured to determine a message type associated with said pointer message and wherein said processor circuit is operably configured to transmit said previously saved pointer messages by transmitting only pointer messages of a persistent message type to the client computer.</claim-text>
</claim>
<claim id="CLM-00083" num="00083">
<claim-text>83. The apparatus of <claim-ref idref="CLM-00076">claim 76</claim-ref> said processor circuit is operably configured to associate a client table with a communication identifier identifying said multiple-party communication.</claim-text>
</claim>
<claim id="CLM-00084" num="00084">
<claim-text>84. The apparatus of <claim-ref idref="CLM-00083">claim 83</claim-ref> wherein said processor circuit is operably configured to store an identification of the client computer in the client table.</claim-text>
</claim>
<claim id="CLM-00085" num="00085">
<claim-text>85. The apparatus of <claim-ref idref="CLM-00084">claim 84</claim-ref> wherein said processor circuit is operably configured to associate a receive buffer and a transmit buffer with the client identifier, said receive buffer being operably configured to store cursor messages received from the client computer and said transmit buffer being operably configured to store pointer messages to be transmitted to the client computer.</claim-text>
</claim>
<claim id="CLM-00086" num="00086">
<claim-text>86. The apparatus of <claim-ref idref="CLM-00084">claim 84</claim-ref> wherein said processor circuit is operably configured to:
<claim-text>receive a disconnect message from the client computer, said disconnect message representing a request by the user of the client computer to disconnect from the multiple-party communication; and</claim-text>
<claim-text>delete said identification of the client computer in the client table.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00087" num="00087">
<claim-text>87. The apparatus of <claim-ref idref="CLM-00086">claim 86</claim-ref> wherein said processor circuit is operably configured to cause the multiple-party communication to be discontinued when said identification of the client computer is an only client computer in the client table and wherein said disconnect message includes a request by said user of the client computer to discontinue the multiple-party communication after disconnecting the client computer.</claim-text>
</claim>
<claim id="CLM-00088" num="00088">
<claim-text>88. The apparatus of <claim-ref idref="CLM-00086">claim 86</claim-ref> wherein said processor circuit is operably configured to cause the multiple-party communication to continue running when at least one of:
<claim-text>the client computer is not an only client computer in the client table; and</claim-text>
<claim-text>said disconnect message does not include a request to discontinue the multiple-party communication after disconnecting the client computer; and</claim-text>
<claim-text>said disconnect message includes a request to keep the multiple-party communication running after disconnecting the client computer.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00089" num="00089">
<claim-text>89. The apparatus of <claim-ref idref="CLM-00069">claim 69</claim-ref> wherein said client computer is a first client computer in a multiple-party communication, and wherein said processor circuit is operably configured to:
<claim-text>receive a second cursor message at the server, said second cursor message representing a change in a position of a second cursor displayed on a second client computer in the computer network; and</claim-text>
<claim-text>transmit a second pointer message to said first and second client computers, said second pointer message representing said change in said position of said second cursor provided by said second cursor message.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00090" num="00090">
<claim-text>90. The apparatus of <claim-ref idref="CLM-00089">claim 89</claim-ref> wherein said processor circuit is operably configured to associate a time of receipt of said first cursor message at the server with said first cursor message and to associate a time of receipt of said second cursor message at the server with said second cursor message, and wherein said processor circuit is operably configured to transmit said first pointer message and to transmit said second pointer message in a time order corresponding to said time of receipt of each corresponding cursor message.</claim-text>
</claim>
<claim id="CLM-00091" num="00091">
<claim-text>91. The apparatus of <claim-ref idref="CLM-00089">claim 89</claim-ref> wherein said processor circuit is further operably configured to:
<claim-text>receive an input message from said first client computer, said input message including a uniform resource locator identifying web page content associated with a web site accessible over the computer network and being operable to identify meeting content displayed on said first client computer;</claim-text>
<claim-text>produce an output message including said uniform resource locator;</claim-text>
<claim-text>transmit said output message to said second client computer, said output message being operable to cause said web page content to be displayed on said second client computer.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00092" num="00092">
<claim-text>92. The apparatus of <claim-ref idref="CLM-00069">claim 69</claim-ref> wherein said processor circuit is operably configured to receive said first cursor message by receiving a plurality of cursor messages, each of said plurality of cursor messages representing a subsequent change in said position of said first cursor, and wherein said processor circuit is operably configured to produce said first pointer message by producing a plurality of pointer messages representing said subsequent changes in said position of said first cursor.</claim-text>
</claim>
<claim id="CLM-00093" num="00093">
<claim-text>93. The apparatus of <claim-ref idref="CLM-00069">claim 69</claim-ref> wherein the at least one client computer comprises a first client computer in a plurality of client computers and wherein said processor circuit is operably configured to transmit said first pointer message to client computers in said plurality of client computers other than said first client computer.</claim-text>
</claim>
<claim id="CLM-00094" num="00094">
<claim-text>94. The apparatus of <claim-ref idref="CLM-00093">claim 93</claim-ref> wherein said processor circuit is operably configured to transmit said first pointer message to client computers in said plurality of client computers other than said first client computer by:
<claim-text>determining a message type associated with said first cursor message;</claim-text>
<claim-text>transmitting said first pointer message to:
<claim-text>a) each of the plurality of client computers when said first cursor message has a message type associated with user input that is operable to produce a persistent change to multiple-party communication content; and</claim-text>
<claim-text>b) ones of the plurality of client computers that meet a criterion when said first cursor message has a message type associated with user input that produces a cursor movement at said one of said plurality of client computers and wherein said cursor movement does not produce a persistent change to the multiple-party communication content.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00095" num="00095">
<claim-text>95. The apparatus of <claim-ref idref="CLM-00094">claim 94</claim-ref> wherein said processor circuit is operably configured to transmit said first pointer message to said ones of the plurality of client computers that meet said criterion by transmitting said first pointer message to said ones of the plurality of client computers when all previously received messages of said persistent message type have been transmitted to said ones of the plurality of client computers during the multiple-party communication.</claim-text>
</claim>
<claim id="CLM-00096" num="00096">
<claim-text>96. The apparatus of <claim-ref idref="CLM-00069">claim 69</claim-ref> wherein said client computer has meeting content displayed on an associated display area, and wherein said meeting content comprises web page content associated with a web site accessible over the computer network, and wherein said processor circuit is operably configured to transmit said first pointer message by transmitting a pointer message to said client computer to cause display of a pointer within said meeting content on said display area on said client computer.</claim-text>
</claim>
<claim id="CLM-00097" num="00097">
<claim-text>97. The apparatus of <claim-ref idref="CLM-00096">claim 96</claim-ref> wherein said client computer is a first client computer in a multiple-party communication and further comprising a second client computer having the web page content displayed on an associated display area of the second client computer, the apparatus further comprising a processor circuit operably configured to:
<claim-text>receive an input message at the server from the first client computer, said input message representing user input of a character at the first client computer;</claim-text>
<claim-text>produce an output message representing said character provided by said input message;</claim-text>
<claim-text>transmit said output message to each of the first client computer and a second client computer to facilitate display of the character within said meeting content on said display area on each of said first and second client computers in response to receiving said output message.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00098" num="00098">
<claim-text>98. The apparatus of <claim-ref idref="CLM-00097">claim 97</claim-ref> wherein said processor circuit is operably configured to receive said input message by receiving an input message at the server representing user input of a plurality of characters at the first client computer, and wherein said processor circuit is operably configured to produce said output message by producing an output message representing said plurality of characters provided by said input message.</claim-text>
</claim>
<claim id="CLM-00099" num="00099">
<claim-text>99. The apparatus of <claim-ref idref="CLM-00097">claim 97</claim-ref> wherein said processor circuit is operably configured to receive said input message by receiving an input message including a coordinate position identifying a position within said meeting content where said character is to be displayed and wherein said processor circuit is operably configured to produce said output message by producing an output message including said coordinate position to facilitate display of the character at said coordinate position within said meeting content on each of said first and second client computers.</claim-text>
</claim>
<claim id="CLM-00100" num="00100">
<claim-text>100. The apparatus of <claim-ref idref="CLM-00069">claim 69</claim-ref> wherein said client computer is a first client computer in a multiple-party communication and further comprising a second client computer in the multiple-party communication, the apparatus further comprising a processor circuit operably configured to:
<claim-text>receive an input message at the server from the first client computer, said input message representing user input of a character at the first client computer;</claim-text>
<claim-text>produce an output message representing said character provided by said input message;</claim-text>
<claim-text>transmit said output message to each of the first client computer and a second client computer to facilitate display of the character on each of said first and second client computers in response to receiving said output message.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00101" num="00101">
<claim-text>101. The apparatus of <claim-ref idref="CLM-00100">claim 100</claim-ref> wherein said processor circuit is operably configured to receive said input message by receiving an input message at the server representing user input of a plurality of characters at the first client computer, and wherein said processor circuit is operably configured to produce said output message by producing an output message representing said plurality of characters provided by said input message.</claim-text>
</claim>
<claim id="CLM-00102" num="00102">
<claim-text>102. The apparatus of <claim-ref idref="CLM-00100">claim 100</claim-ref> wherein said processor circuit is operably configured to receive said input message by receiving an input message including a coordinate position identifying a position where said character is to be displayed and wherein said processor circuit is operably configured to produce said output message by producing an output message including said coordinate position to facilitate display of the character at said coordinate position on each of said first and second client computers in response to receiving said output message.</claim-text>
</claim>
<claim id="CLM-00103" num="00103">
<claim-text>103. A computer readable medium encoded with codes for directing a server processor circuit to support multiple-party communications in a computer network including the server and at least one client computer, said codes directing the server processor circuit to:
<claim-text>receive a first cursor message at the server from the client computer, said first cursor message representing a change in a position of a first cursor associated with the client computer in response to user input received from a user of the client computer;</claim-text>
<claim-text>produce a first pointer message in response to said first cursor message, said first pointer message representing said change in said position of said first cursor provided by said first cursor message and being operable to cause display of a pointer on the client computer, and</claim-text>
<claim-text>transmit said first pointer message to said first client computer.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00104" num="00104">
<claim-text>104. The computer readable medium of <claim-ref idref="CLM-00103">claim 103</claim-ref> wherein said client computer has meeting content displayed on an associated display area, and wherein said meeting content comprises web page content associated with a web site accessible over the computer network, and wherein said codes are operable to direct said processor circuit to transmit said first pointer message by transmitting a pointer message to said client computer to cause display of a pointer within said meeting content on said display area on said client computer.</claim-text>
</claim>
<claim id="CLM-00105" num="00105">
<claim-text>105. The computer readable medium of <claim-ref idref="CLM-00103">claim 103</claim-ref> wherein said client computer is a first client computer in a multiple-party communication, and wherein said codes further direct said processor circuit to:
<claim-text>receive a second cursor message at the server, said second cursor message representing a change in a position of a second cursor displayed on a second client computer in the computer network; and</claim-text>
<claim-text>transmit a second pointer message to said first and second client computers, said second pointer message representing said change in said position of said second cursor provided by said second cursor message;</claim-text>
<claim-text>receive an input message from said first client computer, said input message including a uniform resource locator identifying web page content associated with a web site accessible over the computer network and being operable to identify meeting content displayed on said first client computer;</claim-text>
<claim-text>produce an output message including said uniform resource locator;</claim-text>
<claim-text>transmit said output message to said second client computer, said output message being operable to cause said web page content to be displayed on said second client computer.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00106" num="00106">
<claim-text>106. A system for supporting multiple-party communications on a client computer in communication with a server in a computer network, the system comprising:
<claim-text>a client processor circuit operably configured to:
<claim-text>transmit a first cursor message to the server to elicit a first pointer message from the server, said first cursor message representing a change in a position of a first cursor associated with the client computer in response to user input received from a user of the client computer;</claim-text>
</claim-text>
<claim-text>a server processor circuit operably configured to:
<claim-text>receive said first cursor message from the client processor circuit;</claim-text>
<claim-text>produce a first pointer message in response to said first cursor message, said first pointer message representing said change in said position of said first cursor provided by said first cursor message and being operable to cause display of a pointer on the client computer;</claim-text>
<claim-text>transmit said first pointer message to the client processor circuit; and</claim-text>
</claim-text>
<claim-text>said client processor circuit being operably configured to receive said first pointer message from the server and to cause a corresponding change in a position of a first pointer associated with said first cursor and displayed on a display area of the client computer, in response to said first pointer message.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00107" num="00107">
<claim-text>107. The system of <claim-ref idref="CLM-00106">claim 106</claim-ref> further comprising a communications network through which communications are conducted between the server and the client computer.</claim-text>
</claim>
<claim id="CLM-00108" num="00108">
<claim-text>108. The system of <claim-ref idref="CLM-00106">claim 106</claim-ref> wherein said server processor circuit is operably configured to host a plurality of multiple-party communications and said processor circuit is operably configured to locate a multiple-party communication associated with a user identifier, said user identifier being associated with said cursor message.</claim-text>
</claim>
<claim id="CLM-00109" num="00109">
<claim-text>109. The system of <claim-ref idref="CLM-00108">claim 108</claim-ref> wherein said server processor circuit is operably configured to locate a multiple-party communication associated with at least one of:
<claim-text>a user identifier included in a payload of said cursor message;</claim-text>
<claim-text>a port identifier associated with the client computer; and</claim-text>
<claim-text>an internet protocol (IP) address associated with the client computer.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00110" num="00110">
<claim-text>110. The system of <claim-ref idref="CLM-00106">claim 106</claim-ref> wherein said server processor circuit is operably configured to produce said first pointer message by storing said first cursor message in a shared buffer associated with the associated multiple-party communication.</claim-text>
</claim>
<claim id="CLM-00111" num="00111">
<claim-text>111. The system of <claim-ref idref="CLM-00110">claim 110</claim-ref> wherein said server processor circuit is operably configured facilitate transmitting said first pointer message by copying said first cursor message into a transmit buffer associated with said user identifier.</claim-text>
</claim>
<claim id="CLM-00112" num="00112">
<claim-text>112. The system of <claim-ref idref="CLM-00110">claim 110</claim-ref> said server processor circuit is operably configured to:
<claim-text>receive a message from the client computer representing a request by the client computer to clear content displayed on a display area of the client computer; and</claim-text>
<claim-text>transmit a clear screen message to the client computer, said clear screen message being operable to cause content associated with messages previously transmitted to the client computer to be deleted on said display area of the client computer.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00113" num="00113">
<claim-text>113. The system of <claim-ref idref="CLM-00110">claim 110</claim-ref> wherein said server processor circuit is operably configured to:
<claim-text>receive a save message from the client computer, said save message representing a request by the user of the client computer to save content displayed on a display area of the client computer; and</claim-text>
<claim-text>cause pointer messages in said shared buffer to be saved to persistent storage.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00114" num="00114">
<claim-text>114. The system of <claim-ref idref="CLM-00106">claim 106</claim-ref> wherein said server processor circuit is operably configured to establish a multiple-party communication in response to a signal received from the client computer.</claim-text>
</claim>
<claim id="CLM-00115" num="00115">
<claim-text>115. The system of <claim-ref idref="CLM-00114">claim 114</claim-ref> wherein said server processor circuit is operably configured to create a shared buffer and associate a communication identifier with said shared buffer.</claim-text>
</claim>
<claim id="CLM-00116" num="00116">
<claim-text>116. The system of <claim-ref idref="CLM-00115">claim 115</claim-ref> wherein said server processor circuit is operably configured to create said shared buffer by:
<claim-text>allocating a plurality of memory stores to said multiple-party communication;</claim-text>
<claim-text>associate a start data pointer with said plurality of memory stores, said start data pointer representing a location of a store in which a first message associated with the multiple-party communication is stored;</claim-text>
<claim-text>associate a current data pointer with said plurality of memory stores, said current data pointer representing a location of a store in which a last message associated with the multiple-party communication is stored; and</claim-text>
<claim-text>associate a client sent pointer with said plurality of memory stores, said client sent pointer being associated with the client computer and representing a location of a store in which a last message sent to the associated client computer is stored.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00117" num="00117">
<claim-text>117. The system of <claim-ref idref="CLM-00115">claim 115</claim-ref> wherein said server processor circuit is operably configured to:
<claim-text>receive an open message from the client computer, said open message representing a request by the user of the client computer to load content previously saved during the multiple-party communication;</claim-text>
<claim-text>save pointer messages in said shared buffer to a persistent memory;</claim-text>
<claim-text>delete said pointer messages in said shared buffer;</claim-text>
<claim-text>transmit a clear screen message to the client computer, said clear screen message being operable to cause content associated with pointer messages previously transmitted to the client computer to be deleted on a display area of the client computer;</claim-text>
<claim-text>load a plurality of previously saved pointer messages into said shared buffer from said persistent memory; and</claim-text>
<claim-text>transmit said plurality of previously saved pointer messages to the client computer.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00118" num="00118">
<claim-text>118. The system of <claim-ref idref="CLM-00115">claim 115</claim-ref> wherein said server processor circuit is operably configured to:
<claim-text>receive a page change message from the client computer said page change message representing a request by the user of the client computer to change content displayed on a display area of the client computer;</claim-text>
<claim-text>save pointer messages in said shared buffer to a persistent memory;</claim-text>
<claim-text>delete said pointer messages in said shared buffer; and</claim-text>
<claim-text>transmit a clear screen message to the client computer, said clear screen message being operable to cause content associated with pointer messages previously transmitted to the client computer to be deleted on said display area of the client computer.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00119" num="00119">
<claim-text>119. The system of <claim-ref idref="CLM-00118">claim 118</claim-ref> wherein said server processor circuit is operably configured to load a plurality of previously saved messages into said shared buffer from said persistent memory and to transmit said previously saved messages to the client computer.</claim-text>
</claim>
<claim id="CLM-00120" num="00120">
<claim-text>120. The system of <claim-ref idref="CLM-00119">claim 119</claim-ref> wherein said server processor circuit is operably configured to determine a message type associated with said pointer message and wherein said processor circuit is operably configured to transmit said previously saved pointer messages by transmitting only pointer messages of a persistent message type to the client computer.</claim-text>
</claim>
<claim id="CLM-00121" num="00121">
<claim-text>121. The system of <claim-ref idref="CLM-00114">claim 114</claim-ref> said server processor circuit is operably configured to associate a client table with a communication identifier identifying said multiple-party communication.</claim-text>
</claim>
<claim id="CLM-00122" num="00122">
<claim-text>122. The system of <claim-ref idref="CLM-00121">claim 121</claim-ref> wherein said server processor circuit is operably configured to store an identification of the client computer in the client table.</claim-text>
</claim>
<claim id="CLM-00123" num="00123">
<claim-text>123. The system of <claim-ref idref="CLM-00122">claim 122</claim-ref> wherein said server processor circuit is operably configured to associate a receive buffer and a transmit buffer with the client identifier, said receive buffer being operably configured to store cursor messages received from the client computer and said transmit buffer being operably configured to store pointer messages to be transmitted to the client computer.</claim-text>
</claim>
<claim id="CLM-00124" num="00124">
<claim-text>124. The system of <claim-ref idref="CLM-00122">claim 122</claim-ref> wherein said server processor circuit is operably configured to:
<claim-text>receive a disconnect message from the client computer, said disconnect message representing a request by the user of the client computer to disconnect from the multiple-party communication; and</claim-text>
<claim-text>delete said identification of the client computer in the client table.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00125" num="00125">
<claim-text>125. The system of <claim-ref idref="CLM-00124">claim 124</claim-ref> wherein said server processor circuit is operably configured to cause the multiple-party communication to be discontinued when said identification of the client computer is an only client computer in the client table and wherein said disconnect message includes a request by said user of the client computer to discontinue the multiple-party communication after disconnecting the client computer.</claim-text>
</claim>
<claim id="CLM-00126" num="00126">
<claim-text>126. The system of <claim-ref idref="CLM-00124">claim 124</claim-ref> wherein said server processor circuit is operably configured to cause the multiple-party communication to continue running when at least one of:
<claim-text>the client computer is not an only client computer in the client table; and</claim-text>
<claim-text>said disconnect message does not include a request to discontinue the multiple-party communication after disconnecting the client computer; and</claim-text>
<claim-text>said disconnect message includes a request to keep the multiple-party communication running after disconnecting the client computer.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00127" num="00127">
<claim-text>127. The system of <claim-ref idref="CLM-00106">claim 106</claim-ref> wherein said client computer is a first client computer in a multiple-party communication, and wherein said server processor circuit is operably configured to:
<claim-text>receive a second cursor message at the server, said second cursor message representing a change in a position of a second cursor displayed on a second client computer in the computer network; and</claim-text>
<claim-text>transmit a second pointer message to said first and second client computers, said second pointer message representing said change in said position of said second cursor provided by said second cursor message.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00128" num="00128">
<claim-text>128. The system of <claim-ref idref="CLM-00127">claim 127</claim-ref> wherein said server processor circuit is operably configured to associate a time of receipt of said first cursor message at the server with said first cursor message and to associate a time of receipt of said second cursor message at the server with said second cursor message, and wherein said server processor circuit is operably configured to transmit said first pointer message and to transmit said second pointer message in a time order corresponding to said time of receipt of each corresponding cursor message.</claim-text>
</claim>
<claim id="CLM-00129" num="00129">
<claim-text>129. The system of <claim-ref idref="CLM-00106">claim 106</claim-ref> wherein said client processor circuit is operably configured to transmit a first cursor message to the server, said first cursor message representing a change in a position of one of:
<claim-text>a first cursor displayed on a display area of the client computer; and</claim-text>
<claim-text>a stylus tip in contact with a touch screen display area of the client computer.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00130" num="00130">
<claim-text>130. The system of <claim-ref idref="CLM-00106">claim 106</claim-ref> wherein said client processor circuit is operably configured to produce said first cursor message.</claim-text>
</claim>
<claim id="CLM-00131" num="00131">
<claim-text>131. The system of <claim-ref idref="CLM-00130">claim 130</claim-ref> wherein said client processor circuit is operably configured to produce a cursor message comprising a message identifier, a user identifier associated with the client computer, and position coordinates of a current position of said first cursor.</claim-text>
</claim>
<claim id="CLM-00132" num="00132">
<claim-text>132. The system of <claim-ref idref="CLM-00130">claim 130</claim-ref> wherein said client processor circuit is operably configured to produce at least one of:
<claim-text>a persistent message that represents a track of said first cursor in arriving at said current position of said cursor; and</claim-text>
<claim-text>a non-persistent message representing said current position of said first cursor.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00133" num="00133">
<claim-text>133. The system of <claim-ref idref="CLM-00130">claim 130</claim-ref> wherein said client processor circuit is operably configured to:
<claim-text>receive interrupt event signals from an operating system of the client computer;</claim-text>
<claim-text>determine whether at least one of said interrupt event signals represents receipt of user input from a user input device in communication with the client computer;</claim-text>
<claim-text>cause data representing said user input to be received from said operating system of the client computer and extracting change of position data from said data representing said user input; and</claim-text>
<claim-text>produce payload data for said first cursor message in response to said change of position data.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00134" num="00134">
<claim-text>134. The system of <claim-ref idref="CLM-00106">claim 106</claim-ref> wherein said first pointer message comprises a copy of said first cursor message transmitted to the server.</claim-text>
</claim>
<claim id="CLM-00135" num="00135">
<claim-text>135. The system of <claim-ref idref="CLM-00106">claim 106</claim-ref> wherein said first pointer message comprises a message identifier and position coordinates representing a position of said first cursor.</claim-text>
</claim>
<claim id="CLM-00136" num="00136">
<claim-text>136. The system of <claim-ref idref="CLM-00135">claim 135</claim-ref> wherein said client processor circuit is operably configured to cause said first pointer to be deleted and redisplayed at said position coordinates representing said position of said first cursor.</claim-text>
</claim>
<claim id="CLM-00137" num="00137">
<claim-text>137. The system of <claim-ref idref="CLM-00106">claim 106</claim-ref> wherein said client processor circuit is operably configured to:
<claim-text>receive a second pointer message from the server, said second pointer message representing a change in a position of a second cursor associated with another client computer in the computer network; and</claim-text>
<claim-text>cause a corresponding change in a position of a second pointer displayed on said display area of the client computer in response to said second pointer message, said second pointer being associated with said second cursor.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00138" num="00138">
<claim-text>138. The system of <claim-ref idref="CLM-00137">claim 137</claim-ref> wherein said second pointer message comprises a message identifier, a user identifier associated with the other client computer, and position coordinates representing a position of said second cursor.</claim-text>
</claim>
<claim id="CLM-00139" num="00139">
<claim-text>139. The system of <claim-ref idref="CLM-00138">claim 138</claim-ref> wherein said client processor circuit is operably configured to:
<claim-text>determine whether said user identifier corresponds to a displayed pointer on said display area;</claim-text>
<claim-text>cause said pointer to be deleted and then redisplayed at said position coordinates on said display area when said user identifier corresponds to said displayed pointer; and</claim-text>
<claim-text>cause a new pointer to be displayed at said position coordinates on said display area when said user identifier does not correspond to a pointer already displayed on said display area.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00140" num="00140">
<claim-text>140. The system of <claim-ref idref="CLM-00106">claim 106</claim-ref> wherein said client computer has meeting content displayed on an associated display area, and wherein said meeting content comprises web page content associated with a web site accessible over the computer network, and wherein said server processor circuit is operably configured to transmit said first pointer message by transmitting a pointer message to said client computer to cause display of a pointer within said meeting content on said display area on said client computer.</claim-text>
</claim>
<claim id="CLM-00141" num="00141">
<claim-text>141. The system of <claim-ref idref="CLM-00140">claim 140</claim-ref> wherein said client computer is a first client computer in a multiple-party communication and further comprising a second client computer having the web page content displayed on an associated display area of the second client computer, and wherein said server processor circuit is operably configured to:
<claim-text>receive an input message at the server from the first client computer, said input message representing user input of a character at the first client computer;</claim-text>
<claim-text>produce an output message representing said character provided by said input message;</claim-text>
<claim-text>transmit said output message to each of the first client computer and a second client computer to facilitate display of the character within said meeting content on said display area on each of said first and second client computers in response to receiving said output message.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00142" num="00142">
<claim-text>142. The system of <claim-ref idref="CLM-00141">claim 141</claim-ref> wherein said server processor circuit is operably configured to receive said input message by receiving an input message at the server representing user input of a plurality of characters at the first client computer, and wherein said server processor circuit is operably configured to produce said output message by producing an output message representing said plurality of characters provided by said input message.</claim-text>
</claim>
<claim id="CLM-00143" num="00143">
<claim-text>143. The system of <claim-ref idref="CLM-00141">claim 141</claim-ref> wherein said server processor circuit is operably configured to receive said input message by receiving an input message including a coordinate position identifying a position within said meeting content where said character is to be displayed and wherein said server processor circuit is operably configured to produce said output message by producing an output message including said coordinate position to facilitate display of the character at said coordinate position within said meeting content on each of said first and second client computers.</claim-text>
</claim>
<claim id="CLM-00144" num="00144">
<claim-text>144. The system of <claim-ref idref="CLM-00140">claim 140</claim-ref> wherein said client processor circuit of said client computer is operably configured to:
<claim-text>receive user input of a user input signal representing a character;</claim-text>
<claim-text>produce a message representing said character; and</claim-text>
<claim-text>transmit said message to the server.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00145" num="00145">
<claim-text>145. The system of <claim-ref idref="CLM-00144">claim 144</claim-ref> wherein said user input signal represents a plurality of characters and wherein said client processor circuit is operably configured to produce a message representing said plurality of characters.</claim-text>
</claim>
<claim id="CLM-00146" num="00146">
<claim-text>146. The system of <claim-ref idref="CLM-00144">claim 144</claim-ref> wherein said client processor circuit is operably configured to receive user input of said user input signal representing the character in response to receiving user input of a character entry function invocation signal.</claim-text>
</claim>
<claim id="CLM-00147" num="00147">
<claim-text>147. The system of <claim-ref idref="CLM-00146">claim 146</claim-ref> wherein said client processor circuit is operably configured to receive said character entry function invocation signal by receiving an actuator button signal produced by a pointing device associated with the client processor circuit.</claim-text>
</claim>
<claim id="CLM-00148" num="00148">
<claim-text>148. The system of <claim-ref idref="CLM-00147">claim 147</claim-ref> wherein said client processor circuit is operably configured to determine a character entry position in response to a cursor movement signal produced by said pointing device and wherein said client processor circuit is operably configured to produce said message representing said character by producing a message including said character entry position.</claim-text>
</claim>
<claim id="CLM-00149" num="00149">
<claim-text>149. The system of <claim-ref idref="CLM-00144">claim 144</claim-ref> wherein said client computer is a first client computer in the multiple-party communication and further comprising a second client computer having the web page content displayed on an associated display area of the second client computer, and wherein:
<claim-text>said first client processor circuit is operably configured to receive said message representing said character from the server processor circuit and to display the character within said meeting content on said display area on the first client computer in response to receiving said message; and</claim-text>
<claim-text>a second client processor circuit of the second client computer is operably configured to receive said message representing said character from the server processor circuit and to display the character within said meeting content on an associated display area on the second client computer in response to receiving said message.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00150" num="00150">
<claim-text>150. The system of <claim-ref idref="CLM-00106">claim 106</claim-ref> wherein said client computer is a first client computer in a multiple-party communication, and wherein said server processor circuit is operably configured to:
<claim-text>receive a second cursor message at the server, said second cursor message representing a change in a position of a second cursor displayed on a second client computer in the computer network; and</claim-text>
<claim-text>transmit a second pointer message to said first and second client computers, said second pointer message representing said change in said position of said second cursor provided by said second cursor message;</claim-text>
<claim-text>receive an input message from said first client computer, said input message including a uniform resource locator identifying web page content associated with a web site accessible over the computer network and being operable to identify meeting content displayed on said first client computer;</claim-text>
<claim-text>produce an output message including said uniform resource locator;</claim-text>
<claim-text>transmit said output message to said second client computer, said output message being operable to cause said web page content to be displayed on said second client computer.</claim-text>
</claim-text>
</claim>
</claims>
</us-patent-grant>

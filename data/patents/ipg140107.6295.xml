<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08627448-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08627448</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>12938090</doc-number>
<date>20101102</date>
</document-id>
</application-reference>
<us-application-series-code>12</us-application-series-code>
<us-term-of-grant>
<us-term-extension>573</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>9</main-group>
<subgroup>00</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>726 13</main-classification>
</classification-national>
<invention-title id="d2e53">Selective invalidation of packet filtering results</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>6173364</doc-number>
<kind>B1</kind>
<name>Zenchelsky et al.</name>
<date>20010100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>711118</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>7509300</doc-number>
<kind>B2</kind>
<name>Sahni et al.</name>
<date>20090300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>7624126</doc-number>
<kind>B2</kind>
<name>Pizzo et al.</name>
<date>20091100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>7633944</doc-number>
<kind>B1</kind>
<name>Chang et al.</name>
<date>20091200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>2003/0065812</doc-number>
<kind>A1</kind>
<name>Beier et al.</name>
<date>20030400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709236</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>2003/0120622</doc-number>
<kind>A1</kind>
<name>Nurmela et al.</name>
<date>20030600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>2005/0268335</doc-number>
<kind>A1</kind>
<name>Le et al.</name>
<date>20051200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>726 13</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>2008/0192754</doc-number>
<kind>A1</kind>
<name>Ku et al.</name>
<date>20080800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>2009/0217341</doc-number>
<kind>A1</kind>
<name>Sun et al.</name>
<date>20090800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>2010/0067535</doc-number>
<kind>A1</kind>
<name>Ma et al.</name>
<date>20100300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>15</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>726 13</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>5</number-of-drawing-sheets>
<number-of-figures>7</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20120110656</doc-number>
<kind>A1</kind>
<date>20120503</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Santos</last-name>
<first-name>Jose Renato</first-name>
<address>
<city>San Jose</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Turner</last-name>
<first-name>Yoshio</first-name>
<address>
<city>San Francisco</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="003" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Wickeraad</last-name>
<first-name>John</first-name>
<address>
<city>Cupertino</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Santos</last-name>
<first-name>Jose Renato</first-name>
<address>
<city>San Jose</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Turner</last-name>
<first-name>Yoshio</first-name>
<address>
<city>San Francisco</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="003" designation="us-only">
<addressbook>
<last-name>Wickeraad</last-name>
<first-name>John</first-name>
<address>
<city>Cupertino</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
</us-parties>
<examiners>
<primary-examiner>
<last-name>Hailu</last-name>
<first-name>Teshome</first-name>
<department>2434</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">Example embodiments relate to selective invalidation of packet filtering cache results based on rule priority. In example embodiments, a network node determines whether a rule identifier included in a cache entry of a cache of results of a packet filtering rule set is of a higher priority than a highest priority rule corresponding to a rule set version identifier included in the cache entry. If so, the network node may apply an action included in the cache entry.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="158.24mm" wi="249.68mm" file="US08627448-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="137.16mm" wi="202.44mm" file="US08627448-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="253.49mm" wi="174.33mm" orientation="landscape" file="US08627448-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="247.99mm" wi="192.87mm" file="US08627448-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="250.53mm" wi="194.14mm" file="US08627448-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="252.05mm" wi="160.95mm" orientation="landscape" file="US08627448-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">BACKGROUND</heading>
<p id="p-0002" num="0001">When processing network traffic, a network node may perform packet filtering to apply policies specified by a network administrator to provide an additional layer of security in the network. For example, a packet filter may selectively forward or drop packets based on the source address, destination port, protocol, or another property of each packet. Due to its simplicity, packet filtering provides an inexpensive yet effective method for policing incoming and outgoing network traffic.</p>
<p id="p-0003" num="0002">In order to accelerate the packet filtering process and minimize power consumption due to unnecessary processing, many packet filters include a cache that maintains the results of recently-applied packet filtering rules. In this manner, the packet filter may access a cached result for a particular packet, rather than traversing the entire set of filtering rules to determine which rule to apply. To ensure that the correct packet filtering rule is applied, however, packet filters generally implement a time-consuming, expensive process for removing and replacing outdated results in the cache.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0002" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0004" num="0003">The following detailed description references the drawings, wherein:</p>
<p id="p-0005" num="0004"><figref idref="DRAWINGS">FIG. 1</figref> is a block diagram of an example network node for applying a filtering rule included in a cache entry to a packet based on a highest priority rule modified for a corresponding version of a packet filtering rule set;</p>
<p id="p-0006" num="0005"><figref idref="DRAWINGS">FIG. 2</figref> is a block diagram of an example network node for applying a filtering rule result included in a packet filtering cache based on access to a version memory and a current version of the packet filtering rule set;</p>
<p id="p-0007" num="0006"><figref idref="DRAWINGS">FIG. 3</figref> is a flowchart of an example method for applying a packet filtering rule result included in a cache entry for a packet based on a highest priority rule modified for a corresponding version of the packet filtering rule set;</p>
<p id="p-0008" num="0007"><figref idref="DRAWINGS">FIGS. 4A &#x26; 4B</figref> are flowcharts of an example method for processing a received packet using a packet filtering cache based on a current packet filtering rule set version and a highest priority rule modified for a corresponding version of a packet filtering rule set;</p>
<p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. 5</figref> is a flowchart of an example method for updating a version memory that maintains a highest priority rule modified for each version of a packet filtering rule set; and</p>
<p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. 6</figref> is an example operation flow illustrating the processing of two packets using a packet filtering cache, a version memory, a current version identifier, and a packet filtering rule set.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0003" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0011" num="0010">As detailed above, a network node that implements packet filtering may utilize a cache of packet filtering results to accelerate the filtering process. However, in order to accurately process each packet according to a matching packet filtering rule, the network node must ensure that the cache contains an up-to-date filtering result for each packet. As a result, when the packet filtering rules change, the network node must ensure that the result cached for a given packet has not also changed.</p>
<p id="p-0012" num="0011">To address this issue, example embodiments disclosed herein provide for a packet filtering process that ensures that the cache contains updated results by selectively invalidating cached results using a priority assigned to each packet filtering rule. For example, a network node may maintain a list of version identifiers of a packet filtering rule set and, for each version identifier, store a value indicating the highest priority rule modified for that version of the rule set. Then, upon receipt of a packet, the network node may determine a version identifier for the cached result and also determine a priority of the rule corresponding to the cached result. The network node may then determine whether the priority of the corresponding rule is of a higher priority than the highest priority rule modified for that version of the packet filtering rule set. If so, the network node may determine that the cached result has not changed and therefore process the packet according to the cached rule. Otherwise, the network node may ignore the cached rule and access the packet filtering rules to obtain an updated filtering result for the packet.</p>
<p id="p-0013" num="0012">In this manner, because a result of each cache invalidation decision is based on the priority of individual rules, example embodiments provide for application and updating of cached results with a fine granularity. As a result, example embodiments minimize the processing required to update cache entries, while still ensuring that the most recent packet filtering decision is applied to each packet. Additional embodiments and applications of such embodiments will be apparent to those of skill in the art upon reading and understanding the following description.</p>
<p id="p-0014" num="0013">Referring now to the drawings, <figref idref="DRAWINGS">FIG. 1</figref> is a block diagram of an example network node <b>100</b> for applying a filtering rule included in a cache entry to a packet based on a highest priority rule modified for a corresponding version of a packet filtering rule set. Network node <b>100</b> may be, for example, a router, a switch, a bridge, a dedicated packet filter, or any other hardware device suitable for receipt, processing, and transmission of packets. In the embodiment of <figref idref="DRAWINGS">FIG. 1</figref>, network node <b>100</b> includes processor <b>110</b> and machine-readable storage medium <b>120</b>.</p>
<p id="p-0015" num="0014">Processor <b>110</b> may be one or more central processing units (CPUs), semiconductor-based microprocessors, and/or other hardware devices suitable for retrieval and execution of instructions stored in machine-readable storage medium <b>120</b>. Processor <b>110</b> may fetch, decode, and execute instructions <b>122</b>, <b>124</b>, <b>126</b>, <b>128</b> to implement the packet processing procedure described in detail below. As an alternative or in addition to retrieving and executing instructions, processor <b>110</b> may include one or more integrated circuits (ICs) or other electronic circuits that include a number of electronic components for performing the functionality of one or more of instructions <b>122</b>, <b>124</b>, <b>126</b>, <b>128</b>. For example, processor <b>110</b> may be a Field-Programmable Gate Array (FPGA), an Application-Specific Integrated Circuit (ASIC), a hardware state machine, or other hardware device.</p>
<p id="p-0016" num="0015">Machine-readable storage medium <b>120</b> may be any electronic, magnetic, optical, or other physical storage device that contains or stores executable instructions. Thus, machine-readable storage medium <b>120</b> may be, for example, Random Access Memory (RAM), an Electrically Erasable Programmable Read-Only Memory (EEPROM), a storage drive, a Compact Disc Read-Only Memory (CD-ROM), and the like.</p>
<p id="p-0017" num="0016">As described in detail below, machine-readable storage medium <b>120</b> may be encoded with a series of executable instructions <b>122</b>, <b>124</b>, <b>126</b>, <b>128</b> for filtering packets based on a packet filtering rule set and a corresponding set of cached results. Instructions <b>122</b>, <b>124</b>, <b>126</b>, <b>128</b> may be executed by network node <b>100</b> in processing each incoming packet <b>130</b> to determine whether to apply a cached result included in the cache or, alternatively, whether to access the entire packet filtering rule set to determine a matching rule.</p>
<p id="p-0018" num="0017">The packet filtering rule set may specify an action to be taken for a given packet (e.g., forwarding or dropping the packet) when the packet matches a key pattern of the rule (e.g., a pattern based on an Internet Protocol (IP) source or destination address, a Media Access Control (MAC) address, a Transmission Control Protocol (TCP) port, and/or a Virtual Local Area Network (VLAN) identifier). For example, a key pattern may specify a number of fields and a value or wildcard for each field that is used to determine whether an incoming packet matches the particular key pattern. As a specific example, a filtering rule set may be based on the following fields: &#x3c;destMAC, sourceMAC, destIP, sourceIP&#x3e; and a specific key pattern in the rule set may be: &#x3c;*, *, 192.168.0.1, *&#x3e;. This pattern may match any packet with a destination IP address of 192.168.0.1 and any other values for the destination and source MAC addresses and the source IP address.</p>
<p id="p-0019" num="0018">The packet filtering rule set may also include a priority for each rule, such that, when multiple keys match a packet, the highest priority matching rule is applied. The priority of the rule may be represented by an identifier associated with each rule. For example, each rule may be identified by an integer or other alphanumeric identifier, such that the ordering of the identifiers represents the priority of the rules. An example set of fields included in the packet filtering rule set is shown in the following table:</p>
<p id="p-0020" num="0019">
<tables id="TABLE-US-00001" num="00001">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217pt" align="center"/>
<thead>
<row>
<entry namest="1" nameend="1" rowsep="1">TABLE 1</entry>
</row>
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
<row>
<entry>Example Fields of a Packet Filtering Rule Set</entry>
</row>
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="3">
<colspec colname="1" colwidth="98pt" align="center"/>
<colspec colname="2" colwidth="49pt" align="center"/>
<colspec colname="3" colwidth="70pt" align="center"/>
<tbody valign="top">
<row>
<entry>Rule Identifier</entry>
<entry>Key Pattern</entry>
<entry>Action</entry>
</row>
<row>
<entry namest="1" nameend="3" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0021" num="0020">To minimize expensive accesses to the packet filtering rule set, the cache may store a number of results for recently-matched packets, such that the cached action is applied, for example, upon receipt of subsequent packets in the same flow. Each cache entry may include, for example, a key value used to determine whether a packet matches the entry, the action and rule identifier from the matching packet filtering rule, and a version identifier that identifies a version of the packet filtering rule set when the cache entry was created. The key value may include the packet's values for each field identified in the matching key pattern. Thus, continuing with the previous example, a key value that matches the pattern &#x3c;*, *, 192.168.0.1, *&#x3e; would contain the source and destination MAC addresses, the destination IP address (192.168.0.1), and the source IP address. An example set of fields included in the cache is shown in the following table:</p>
<p id="p-0022" num="0021">
<tables id="TABLE-US-00002" num="00002">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217pt" align="center"/>
<thead>
<row>
<entry namest="1" nameend="1" rowsep="1">TABLE 2</entry>
</row>
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
<row>
<entry>Example Fields of a Packet Filtering Cache</entry>
</row>
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="5">
<colspec colname="offset" colwidth="21pt" align="left"/>
<colspec colname="1" colwidth="21pt" align="center"/>
<colspec colname="2" colwidth="56pt" align="center"/>
<colspec colname="3" colwidth="49pt" align="center"/>
<colspec colname="4" colwidth="70pt" align="center"/>
<tbody valign="top">
<row>
<entry/>
<entry>Key</entry>
<entry>Action</entry>
<entry>Rule Identifier</entry>
<entry>Version ID</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="4" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0023" num="0022">Machine-readable storage medium <b>120</b> may include cache entry identifying instructions <b>122</b>, which may first attempt to identify a cache entry that corresponds to an incoming packet <b>130</b>. Identifying instructions <b>122</b> may identify the entry in cache by determining a key value for the incoming packet <b>130</b> and searching for an entry in the cache that includes a matching key. For example, the key stored in the cache for a given packet may be the specific set of values that match a corresponding pattern specified in the packet filtering rule set.</p>
<p id="p-0024" num="0023">Machine-readable storage medium <b>120</b> may also include version match determining instructions <b>124</b>, which, when a matching cache entry is located, may determine whether a rule set version identifier included in the cache entry for incoming packet <b>130</b> matches a current version of the packet filtering rule set. The current version of the set of rules may be, for example, an integer or alphanumeric value that is incremented or otherwise increased each time the packet filtering rule set is modified. As detailed above, each cache entry may store a version identifier that represents the current version of the packet filtering rule set when the cache entry was created. Thus, determining instructions <b>124</b> may determine whether the matching cache entry corresponds to the most recent version of the packet filtering rule set. As described below, if the version identifier matches the current version, packet processing instructions <b>128</b> may then apply the cached action.</p>
<p id="p-0025" num="0024">In addition, machine-readable storage medium <b>120</b> may include rule priority determining instructions <b>126</b>, which may first determine the rule identifier included in the cache entry that matches incoming packet <b>130</b>. Determining instructions <b>126</b> may then determine the rule set version identifier included in the cache entry and, using the version identifier, determine a highest priority rule that was modified for that version of the packet filtering rules. Determining instructions <b>126</b> may then determine whether the rule identifier included in the cache entry is of a higher priority than the highest priority rule modified for the identified version of the packet filtering rule set. As described below, if the rule identifier included in the cache entry is of a higher priority, then packet processing instructions <b>128</b> may apply the cached action.</p>
<p id="p-0026" num="0025">As a specific example, the following table illustrates a number of rule set version identifiers and a highest priority rule modified for each version, assuming that the rule identifiers are ordered beginning with a highest priority value of &#x201c;1&#x201d; and the current version of the packet filtering rule set is &#x201c;4.&#x201d; As detailed below in connection with rule set update engine <b>245</b> of <figref idref="DRAWINGS">FIG. 2</figref> and method <b>500</b> of <figref idref="DRAWINGS">FIG. 5</figref>, this table may be updated each time the packet filtering rule set is modified to maintain an indication of rule priorities for each version that are still valid.</p>
<p id="p-0027" num="0026">
<tables id="TABLE-US-00003" num="00003">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217pt" align="center"/>
<thead>
<row>
<entry namest="1" nameend="1" rowsep="1">TABLE 3</entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
<row>
<entry>Example Table of Highest Priority Modified Rules</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="3">
<colspec colname="offset" colwidth="21pt" align="left"/>
<colspec colname="1" colwidth="56pt" align="center"/>
<colspec colname="2" colwidth="140pt" align="center"/>
<tbody valign="top">
<row>
<entry/>
<entry>Version ID</entry>
<entry>Highest Priority Rule</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="2" align="center" rowsep="1"/>
</row>
<row>
<entry/>
<entry>1</entry>
<entry>105</entry>
</row>
<row>
<entry/>
<entry>2</entry>
<entry>110</entry>
</row>
<row>
<entry/>
<entry>3</entry>
<entry>125</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="2" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0028" num="0027">Continuing with the example, suppose the version identifier included in the matching cache entry for incoming packet <b>130</b> is &#x201c;2&#x201d; and the rule identifier corresponding to the entry is &#x201c;90.&#x201d; Upon receipt of incoming packet <b>130</b>, determining instructions <b>126</b> may access Table 3 and determine that the highest priority rule modified for version <b>2</b> of the packet filtering rule set is &#x201c;110.&#x201d; Accordingly, because 90 is less than 110 (and the cached rule is therefore of a higher priority), determining instructions <b>126</b> may determine that the result cached for packet <b>130</b> is still valid despite the subsequent modification of the packet filtering rules in versions <b>3</b> and <b>4</b>.</p>
<p id="p-0029" num="0028">Packet processing instructions <b>128</b> may process incoming packet <b>130</b> according to the determinations made by determining instructions <b>124</b>, <b>126</b>. For example, if version match determining instructions <b>124</b> determine that the rule set version identifier matches the current version of the packet filtering rule set or rule priority determining instructions <b>126</b> determine that the cached rule identifier is of a higher priority than the highest priority rule modified for the identified version of the packet filtering rule set, packet processing instructions <b>128</b> may apply the cached action for the packet.</p>
<p id="p-0030" num="0029">Alternatively, when the rule set identifier does not match the current version and the cached rule identifier is of an equal or lower priority than the highest priority rule modified for the identified version, packet processing instructions <b>128</b> may determine a matching rule from the packet filtering rule set and update the cache accordingly. Thus, processing instructions <b>128</b> may first access the packet filtering rule set to identify a rule with a matching key pattern and a corresponding action for the packet, which, in some embodiments, may be identified as the highest priority rule with a key pattern that matches the fields of incoming packet <b>130</b>. Processing instructions <b>128</b> may then identify an available entry in the cache and insert a cached result corresponding to the identified rule in the cache. The cached result may include, for example, the key for the packet (e.g., the set of fields that match the key pattern), the matching action, the identifier of the matching rule, and the current version of the packet filtering rule set.</p>
<p id="p-0031" num="0030">Regardless of whether packet processing instructions <b>128</b> utilize the cached result or identify an updated result from the set of filtering rules, processing instructions <b>128</b> may then apply the determined action to the packet. Thus, processing instructions <b>128</b> may forward the packet, as represented by forwarded packet <b>135</b>, or drop the packet, as represented by dropped packet <b>140</b>.</p>
<p id="p-0032" num="0031"><figref idref="DRAWINGS">FIG. 2</figref> is a block diagram of an example network node <b>200</b> for applying a filtering rule result included in a packet filtering cache <b>225</b> based on access to a version memory <b>230</b> and a current version <b>240</b> of the packet filtering rule set <b>220</b>. As detailed below, network node <b>200</b> may include a plurality of components for receiving and processing an incoming packet <b>202</b> to apply a rule specified in packet filtering rule set <b>220</b>.</p>
<p id="p-0033" num="0032">In the following description, reference is made to a number of components <b>205</b>-<b>245</b> of network node <b>200</b>. The components <b>205</b>-<b>245</b> may individually or collectively comprise hardware, executable instructions encoded on a machine-readable storage medium, or a combination thereof. For example, one or more of components <b>205</b>-<b>245</b> may be, alone or in combination, a CPU, a microprocessor, an FPGA, an ASIC, a machine-readable storage medium, or other electronic circuitry. Various arrangements and configurations of the functionality of components <b>205</b>-<b>245</b> will be apparent to those of skill in the art.</p>
<p id="p-0034" num="0033">Receiver <b>205</b> may be, for example, a hardware device suitable for receiving incoming packets <b>202</b> over a corresponding communication channel. For example, receiver <b>205</b> may be a network interface card, line card, or other device that includes a number of interfaces for receiving packetized data from a number of corresponding sources.</p>
<p id="p-0035" num="0034">Key determining module <b>210</b> may receive a packet from receiver <b>205</b> and, in response, determine a key used in identifying a matching entry in cache <b>225</b>. For example, key determining module <b>210</b> may extract one or more fields from incoming packet <b>202</b>, such as a source or destination IP address, source or destination UDP or TCP port, a VLAN identifier, or any other field or fields. As another example, key determining module <b>210</b> may extract one or more fields and, using these fields, compute a key using a hash function or other mathematical function that generates a key for each input value.</p>
<p id="p-0036" num="0035">Packet processor <b>215</b> may receive a key corresponding to incoming packet <b>202</b> and, in response, access cache <b>225</b> to determine whether cache <b>225</b> includes an entry corresponding to the key of incoming packet <b>202</b>. For example, packet processor <b>215</b> may determine whether the fields extracted from incoming packet <b>202</b> match the fields contained in an entry in cache <b>225</b>. If so, packet processor <b>215</b> may retrieve the values included in the matching entry in cache <b>225</b>.</p>
<p id="p-0037" num="0036">Packet processor <b>215</b> may then determine the current version of packet filtering rule set <b>220</b> based on an access of current version <b>240</b>. Next, packet processor <b>215</b> may determine whether the rule set version identifier included in the retrieved entry of cache <b>225</b> is equal to the current version of packet filtering rule set <b>220</b>, as indicated by current version <b>240</b>.</p>
<p id="p-0038" num="0037">Packet processor <b>215</b> may then determine the version identifier stored in the matching cache entry and, based on this value, determine a highest priority rule modified for that version of packet filtering rule set <b>220</b> by accessing the corresponding entry in version memory <b>230</b>. Next, packet processor <b>215</b> may determine whether the rule identifier included in the cache entry is of a higher priority than the highest priority rule stored in version memory <b>230</b> for the rule set version identifier included in the matching cache entry. For example, when the rule identifiers are integers and a lower number indicates a higher priority, packet processor <b>215</b> may determine that the rule identifier included in the cache entry is of a higher priority when it is less than the highest priority rule stored in version memory <b>230</b>.</p>
<p id="p-0039" num="0038">When the rule set version identifier included in the entry from cache <b>225</b> is equal to current version <b>240</b> or the rule identifier included in the cache entry is of a higher priority than the highest priority rule modified for the identified version, packet processor <b>215</b> may apply the action included in the cache entry to incoming packet <b>202</b>. Thus, when the action in the cache entry indicates that packet <b>202</b> is to be forwarded, packet processor <b>215</b> may instruct transmitter <b>235</b> to output packet <b>202</b> as outgoing packet <b>237</b>. Alternatively, when the action in the cache entry indicates that packet <b>202</b> is to be dropped, packet processor <b>215</b> may take no further action, such that packet <b>202</b> is not forwarded.</p>
<p id="p-0040" num="0039">On the other hand, when a matching entry for incoming packet <b>202</b> is not located in cache <b>225</b>, packet processor <b>215</b> may determine an appropriate action for incoming packet <b>202</b> by accessing packet filtering rule set <b>220</b>. Packet processor <b>215</b> may also access packet filtering rule set <b>220</b> to determine the appropriate action when the rule set version identifier included in the matching entry is not equal to current version <b>240</b> and the rule identifier included in the cache entry is of an equal or lower priority than the rule priority retrieved from version memory <b>230</b>.</p>
<p id="p-0041" num="0040">In determining the appropriate action based on an access of packet filtering rule set <b>220</b>, packet processor <b>215</b> may first access packet filtering rule set <b>220</b> to identify a matching rule and the corresponding action for incoming packet <b>202</b> based, for example, on comparison of the key value determined by key determining module <b>210</b> to a key pattern of the entries in rule set <b>220</b>. Packet processor <b>215</b> may then apply the determined action to incoming packet <b>202</b>, either forwarding packet <b>202</b> to transmitter <b>235</b> or dropping the packet.</p>
<p id="p-0042" num="0041">In addition, to accelerate processing of subsequent packets belonging to the same flow as packet <b>202</b>, packet processor <b>215</b> may also generate a new cache entry for packet <b>202</b>. Thus, packet processor <b>215</b> may locate an available entry in cache <b>225</b> and insert a cached result for packet <b>202</b> into the available entry. For example, packet processor <b>215</b> may insert a cached result into cache <b>225</b> including the key value for packet <b>202</b>, the determined action, the identifier of the matching rule from packet filtering rule set <b>220</b>, and the current version <b>240</b> of packet filtering rule set <b>220</b>.</p>
<p id="p-0043" num="0042">Packet filtering rule set <b>220</b> may store a set of rules used to selectively forward or drop packets received in network node <b>200</b>. For example, the rules may be specified by a network administrator to police the traffic passing through network node <b>200</b> based on properties of each flow. As illustrated, packet filtering rule set <b>220</b> may store, for each entry, a key pattern specifying when a packet matches the entry, a rule identifier that uniquely identifies the particular rule, and an action to be taken when a particular packet includes a set of fields matching the key pattern field. In some embodiments, the rule identifier may identify the priority of the rule. For example, the rules may be ordered from a highest priority rule to a lowest priority rule based on an integer rule identifier assigned to each rule. In such implementations, the highest priority rule may be identified as rule &#x201c;1,&#x201d; with a number of lower priority rules starting with identifier &#x201c;2.&#x201d;</p>
<p id="p-0044" num="0043">Cache <b>225</b> may store a plurality of cache entries, each corresponding to a particular rule included in packet filtering rule set <b>220</b>. Each entry in cache <b>225</b> may include, for example, a rule identifier of the corresponding packet filtering rule and a rule set version identifier that identifies a version of packet filtering rule set <b>220</b> when the cache entry was created. Each entry may also include a key value specifying the fields of a packet that match the key pattern of the corresponding rule. In addition, each entry may include an action to be taken when packet processor <b>215</b> determines that the cached rule is to be applied.</p>
<p id="p-0045" num="0044">Version memory <b>230</b> may store a highest priority rule modified for each of a plurality of rule set identifiers. For example, version memory <b>230</b> may maintain a listing of each version identifier of packet filtering rule set <b>220</b> and, for each version identifier, store a corresponding rule priority. As detailed below, rule set update engine <b>245</b> may maintain version memory <b>230</b>, such that each entry in version memory <b>230</b> indicates a highest priority rule modified for the corresponding version of packet filtering rule set <b>220</b> that remains valid after subsequent modifications of packet filtering rule set <b>220</b>.</p>
<p id="p-0046" num="0045">Transmitter <b>235</b> may be, for example, a hardware device suitable for transmitting outgoing packets <b>237</b> over a corresponding communication channel. For example, transmitter <b>235</b> may be a network interface card, line card, or other device that includes a number of interfaces for transmitting packetized data to a number of corresponding destinations. In some embodiments, receiver <b>205</b> and transmitter <b>235</b> may be components of the same hardware device.</p>
<p id="p-0047" num="0046">Current version <b>240</b> may identify a current version of packet filtering rule set <b>220</b> and, as detailed above, may be accessed by packet processor <b>215</b> when processing an incoming packet <b>202</b>. For example, current version <b>240</b> may be an integer or other alphanumeric value that is incremented or otherwise increased each time packet filtering rule set <b>220</b> is modified.</p>
<p id="p-0048" num="0047">Rule set update engine <b>245</b> may manage the process for applying changes to packet filtering rule set <b>220</b> based on receipt of new and/or updated rules <b>247</b>. As an example, a network administrator may desire to insert one or more new rules into packet filtering rule set <b>220</b> and/or modify a rule priority, key pattern, and/or action of one or more existing rules. Upon receipt of rules <b>247</b>, rule set update engine <b>245</b> may apply the modifications of packet filtering rule set <b>220</b>, thereby updating rule set <b>220</b> to a new version.</p>
<p id="p-0049" num="0048">Rule set update engine <b>245</b> may also execute a procedure to update version memory <b>230</b>. For example, rule set update engine <b>245</b> may first determine an identifier of a highest priority rule modified for current version <b>240</b> of packet filtering rule set <b>220</b>. Rule set update engine <b>245</b> may then insert a new entry into version memory <b>230</b>, setting the version identifier of the entry to current version <b>240</b> and the rule identifier of the entry to the highest priority rule modified for current version <b>240</b>.</p>
<p id="p-0050" num="0049">Finally, rule set update engine <b>245</b> may update the highest priority rule stored in version memory <b>230</b> for each corresponding version such that no value in version memory <b>230</b> identifies a rule of a lower priority than the highest priority rule modified for the new version. For example, rule set update engine <b>245</b> may identify each entry in version memory <b>230</b> for which the stored rule priority is of a lower priority than the highest priority rule modified for current version <b>240</b> and, for these entries, replace the stored rule priority with the identifier of the highest priority rule modified for current version <b>240</b>. In this manner, rule set update engine <b>245</b> may modify version memory <b>230</b> as necessary to ensure that version memory <b>230</b> identifies, for each version, a rule priority for which cached results are still valid despite subsequent modifications of packet filtering rules <b>220</b>. After updating version memory <b>230</b> in this manner, rule set update engine <b>245</b> may increment or otherwise increase current version <b>240</b> to a value corresponding to the new version.</p>
<p id="p-0051" num="0050"><figref idref="DRAWINGS">FIG. 3</figref> is a flowchart of an example method <b>300</b> for applying a packet filtering rule result included in a cache entry for a packet based on a highest priority rule modified for a corresponding version of the packet filtering rule set. Although execution of method <b>300</b> is described below with reference to network node <b>100</b>, other suitable components for execution of method <b>300</b> will be apparent to those of skill in the art, such as network node <b>200</b> of <figref idref="DRAWINGS">FIG. 2</figref>. Method <b>300</b> may be implemented in the form of executable instructions stored on a machine-readable storage medium, such as storage medium <b>120</b>, and/or in the form of electronic circuitry.</p>
<p id="p-0052" num="0051">Method <b>300</b> may start in block <b>305</b> and proceed to block <b>310</b>, where network node <b>100</b> may attempt to locate, for a received packet, a cache entry in a cache of packet filtering results of a packet filtering rule set. For example, network node <b>100</b> may determine a key of the received packet (e.g., a number of fields of the packet) and attempt to locate an entry in the cache corresponding to this key.</p>
<p id="p-0053" num="0052">Assuming that network node <b>100</b> locates a cache entry for the received packet, method <b>300</b> may proceed to block <b>315</b>. In block <b>315</b>, network node <b>100</b> may first determine the rule identifier and the rule set version identifier included in the cache entry. Network node <b>100</b> may then determine a highest priority rule modified for the corresponding rule set version identifier. After determining these values, network node <b>100</b> may determine whether the rule identifier is of a higher priority than the highest priority rule modified for the corresponding rule set version identifier. If so, method <b>300</b> may proceed to block <b>320</b>, where network node <b>100</b> may apply the action included in the cache entry to the received packet. Otherwise, method <b>300</b> may proceed to block <b>325</b>, where method <b>300</b> may stop.</p>
<p id="p-0054" num="0053"><figref idref="DRAWINGS">FIGS. 4A &#x26; 4B</figref> are flowcharts of an example method <b>400</b> for processing a received packet <b>202</b> using a packet filtering cache <b>225</b> based on a current packet filtering rule set version <b>240</b> and a highest priority rule modified for a corresponding version of a packet filtering rule set <b>220</b>. Although execution of method <b>400</b> is described below with reference to the components of network node <b>200</b>, other suitable components for execution of method <b>400</b> will be apparent to those of skill in the art. Method <b>400</b> may be implemented in the form of executable instructions stored on a machine-readable storage medium and/or in the form of electronic circuitry.</p>
<p id="p-0055" num="0054">Method <b>400</b> may start in block <b>405</b> and proceed to block <b>410</b>, where receiver <b>205</b> of network node <b>200</b> may receive an incoming packet <b>202</b>. Method <b>400</b> may then proceed to block <b>415</b>, where key determining module <b>210</b> may determine a key for the packet <b>202</b> by extracting one or more fields from packet <b>202</b> and, in some embodiments, computing a hash value of the one or more fields.</p>
<p id="p-0056" num="0055">Method <b>400</b> may then proceed to block <b>420</b>, where packet processor <b>215</b> may determine whether an entry corresponding to packet <b>202</b> is included in cache <b>225</b>. For example, packet processor <b>215</b> may determine whether the key determined in block <b>415</b> is included in an entry in cache <b>225</b>. If the key is not located in cache <b>225</b>, method <b>400</b> may proceed to block <b>450</b>, described below in connection with <figref idref="DRAWINGS">FIG. 4B</figref>. Otherwise, if the key is located in an entry in cache <b>225</b>, method <b>400</b> may proceed to block <b>425</b>.</p>
<p id="p-0057" num="0056">In block <b>425</b>, packet processor <b>215</b> may determine whether the version identifier included in the matching cache entry is equal to the current version <b>240</b> of packet filtering rule set <b>220</b>. If so, method <b>400</b> may proceed to block <b>440</b>, described in detail below. Otherwise, if the version identifier for the matching cache entry is not equal to current version <b>240</b>, method <b>400</b> may proceed to block <b>430</b>.</p>
<p id="p-0058" num="0057">In block <b>430</b>, packet processor <b>215</b> may determine whether the difference between current version <b>240</b> and the version identifier for the matching cache entry is greater than n, where n is the total number of entries available in version memory <b>230</b>. If so, packet processor <b>215</b> may determine that the version identifier from the cache entry is outdated and that version memory <b>230</b> no longer has valid data regarding the identified version. Accordingly, packet processor <b>215</b> may ignore the cache entry and determine an updated result using packet filtering rule set <b>220</b>, as described below in connection with block <b>450</b> of <figref idref="DRAWINGS">FIG. 4B</figref>.</p>
<p id="p-0059" num="0058">Alternatively, when the difference between current version <b>240</b> and the version identifier in the cache entry is less than or equal to n, method <b>400</b> may proceed to block <b>435</b>. In block <b>435</b>, packet processor <b>215</b> may first determine the rule identifier for packet <b>202</b> from the matching cache entry. Packet processor <b>215</b> may then determine the version identifier for packet <b>202</b> from the cache entry and access version memory <b>230</b> using this version identifier. In response, packet processor <b>215</b> may receive a rule identifier representing a highest priority rule modified for the corresponding version of packet filtering rule set <b>220</b>. Packet processor <b>215</b> may then determine whether the rule identifier for the cache entry is of a higher priority than the highest priority rule accessed from version memory <b>230</b>. If so, method <b>400</b> may proceed to block <b>440</b> and may otherwise proceed to block <b>450</b>, described below in connection with <figref idref="DRAWINGS">FIG. 4B</figref>.</p>
<p id="p-0060" num="0059">In block <b>440</b>, packet processor <b>215</b> may perform the action identified in the matching cache entry. For example, when the cached result indicates that the packet <b>202</b> should be forwarded, packet processor <b>215</b> may instruct transmitter <b>235</b> to transmit the packet to an appropriate destination. Otherwise, packet processor <b>215</b> may perform no further action, such that packet <b>202</b> is dropped. Method <b>400</b> may then proceed to block <b>445</b>, where method <b>400</b> may stop.</p>
<p id="p-0061" num="0060">Referring now to <figref idref="DRAWINGS">FIG. 4B</figref>, method <b>400</b> may reach block <b>450</b> in situations in which network node <b>200</b> cannot locate a cached result for packet <b>202</b> or when network node <b>200</b> otherwise determines that the cached result should not be applied. Accordingly, in block <b>450</b>, packet processor <b>215</b> may access packet filtering rule set <b>220</b> to identify a highest priority rule with a matching key pattern and also determine an identified action for packet <b>202</b>. Packet processor <b>215</b> may then apply the determined action to packet <b>202</b>.</p>
<p id="p-0062" num="0061">To save processing time upon receipt of subsequent packets belonging to the same flow as packet <b>202</b>, packet processor <b>215</b> may also generate a new cache entry for packet <b>202</b>. Accordingly, method <b>400</b> may proceed to block <b>455</b>, where packet processor <b>215</b> may locate an available entry in cache <b>225</b>. In blocks <b>460</b>, <b>465</b>, <b>470</b>, and <b>475</b>, packet processor <b>215</b> may insert the cached result for packet <b>202</b> into the located cache entry. In particular, in block <b>460</b>, packet processor <b>215</b> may set the key of the cache entry to the determined key for packet <b>202</b>. In block <b>465</b>, packet processor <b>215</b> may set the action stored in the cache entry to the action included in the matching rule in filtering rule set <b>220</b>. In block <b>470</b>, packet processor <b>215</b> may set the rule identifier of the cache entry to the identifier of the matching rule. Finally, in block <b>475</b>, packet processor <b>215</b> may set the version identifier of the cache entry to current version <b>240</b>. After generating the new cache entry for packet <b>202</b>, method <b>400</b> may proceed to block <b>480</b>, where method <b>400</b> may stop.</p>
<p id="p-0063" num="0062"><figref idref="DRAWINGS">FIG. 5</figref> is a flowchart of an example method <b>500</b> for updating a version memory <b>230</b> that maintains a highest priority rule modified for each version of a packet filtering rule set <b>220</b>. Although execution of method <b>500</b> is described below with reference to the components of network node <b>200</b>, other suitable components for execution of method <b>500</b> will be apparent to those of skill in the art. Method <b>500</b> may be implemented in the form of executable instructions stored on a machine-readable storage medium and/or in the form of electronic circuitry.</p>
<p id="p-0064" num="0063">Method <b>500</b> may start in block <b>505</b> and proceed to block <b>510</b>, where rule set update engine <b>245</b> may receive a modification of packet filtering rule set <b>220</b>, which may include insertion of one or more new rules or modification of one or more existing rules. Method <b>500</b> may then proceed to block <b>515</b>, where rule set update engine <b>245</b> may temporarily block access to packet filtering rule set <b>220</b> and version memory <b>230</b> by, for example, setting a flag used to permit access to false. Method <b>500</b> may then proceed to block <b>520</b>, where rule set update engine <b>245</b> may apply the modifications to packet filtering rule set <b>220</b>.</p>
<p id="p-0065" num="0064">After updating packet filtering rule set <b>220</b>, method <b>500</b> may then proceed to block <b>525</b>, where rule set update engine <b>245</b> may determine the identifier of the highest priority rule modified for the new version of packet filtering rule set <b>220</b>, rule_high. Next, method <b>500</b> may proceed to block <b>530</b>, where rule set update engine <b>245</b> may create a new entry in version memory <b>230</b> including current version <b>240</b> and the identifier of the highest priority rule, as determined in block <b>525</b>.</p>
<p id="p-0066" num="0065">Next, based on repeated execution of blocks <b>535</b>, <b>540</b>, <b>545</b>, and <b>550</b>, rule set update engine <b>245</b> may update the highest priority rule stored in version memory <b>230</b> for each corresponding version such that no value in version memory <b>230</b> identifies a rule of a lower priority than the highest priority rule modified for the new version. Thus, in block <b>535</b>, rule set update engine <b>245</b> may select a next entry in version memory <b>230</b> corresponding to a previous version of packet filtering rule set <b>220</b>. Method <b>500</b> may then proceed to block <b>540</b>, where rule set update engine <b>245</b> may determine whether the priority of the rule identifier stored for the entry in version memory <b>230</b> is less than rule_high. If so, method <b>500</b> may proceed to block <b>545</b>, where rule set update engine <b>245</b> may set the selected entry in version memory <b>230</b> to rule_high. Method <b>500</b> may then proceed to block <b>550</b>. Alternatively, when, in block <b>540</b>, rule set update engine <b>245</b> determines that the priority of the rule identifier for the selected entry in version memory <b>230</b> is greater than or equal to rule_high, method <b>500</b> may skip directly to block <b>550</b>.</p>
<p id="p-0067" num="0066">In block <b>550</b>, rule set update engine <b>245</b> may determine whether there are additional entries in version memory <b>230</b> to be processed. If so, method <b>500</b> may return to block <b>535</b> for processing of the next entry. Otherwise, method <b>500</b> may proceed to block <b>555</b>, where rule set update engine <b>245</b> may update current version <b>240</b> by incrementing or otherwise increasing the stored value. Method <b>500</b> may then proceed to block <b>560</b>, where rule set update engine <b>245</b> may restore access to packet filtering rule set <b>220</b> and version memory <b>230</b> by, for example, setting the flag used to permit access to true. Finally, method <b>500</b> may proceed to block <b>565</b>, where method <b>500</b> may stop.</p>
<p id="p-0068" num="0067"><figref idref="DRAWINGS">FIG. 6</figref> is an example operation flow <b>600</b> illustrating the processing of two packets <b>602</b>, <b>604</b> using components of a network node, including a key determining module <b>610</b>, a packet processor <b>615</b>, a packet filtering cache <b>620</b>, a version memory <b>625</b>, a current version identifier <b>630</b>, and a packet filtering rule set <b>635</b>. The components illustrated in <figref idref="DRAWINGS">FIG. 6</figref> may correspond, for example, to the components of network node <b>200</b> of <figref idref="DRAWINGS">FIG. 2</figref>.</p>
<p id="p-0069" num="0068">Operation flow <b>600</b> may start in block <b>1</b>, where the network node may receive a first packet <b>602</b>. In response, in block <b>2</b>, key determining module <b>610</b> may determine a key for first packet <b>602</b> as one or more fields of first packet <b>602</b>, which, in this case, results in a determined key of &#x201c;192.1.1.0,&#x201d; which is the source IP address of the packet. It should be noted that, in some embodiments, key determining module <b>610</b> may extract multiple fields from packet <b>602</b>.</p>
<p id="p-0070" num="0069">In block <b>3</b>, packet processor <b>615</b> may retrieve the entry in cache <b>620</b> corresponding to the determined key, which, as illustrated, has an action of &#x201c;Drop,&#x201d; a rule identifier of &#x201c;175,&#x201d; and a version identifier of &#x201c;5.&#x201d; In block <b>4</b>, packet processor <b>615</b> may access current version <b>630</b> (&#x201c;5&#x201d; in this case). Accordingly, because the current version <b>630</b> is equal to the version identifier of the matching entry in cache <b>620</b>, packet processor <b>615</b> may take the cached action and therefore drop packet <b>602</b>.</p>
<p id="p-0071" num="0070">In block <b>6</b>, the network node may receive a second packet <b>604</b>. In response, in block <b>7</b>, key determining module <b>610</b> may determine a key for second packet <b>604</b> as one or more fields of the packet <b>604</b>, which results in a determined key of &#x201c;192.25.0.1,&#x201d; which is the source IP address of the packet. In block <b>8</b>, packet processor may retrieve the entry in cache <b>620</b> corresponding to the determined key, which, as illustrated, has an action of &#x201c;Allow,&#x201d; a rule identifier of 180, and a version identifier of &#x201c;3.&#x201d; In block <b>9</b>, packet processor <b>615</b> may access current version <b>630</b> (&#x201c;5&#x201d; in this case) and determine that current version <b>630</b> is not equal to the version identifier included in the cached entry.</p>
<p id="p-0072" num="0071">Accordingly, in block <b>10</b>, packet processor <b>615</b> may access version memory to determine the highest priority rule modified for version <b>3</b> of packet filtering rule <b>635</b>, which, as illustrated, is &#x201c;125.&#x201d; Packet processor <b>615</b> may determine that, because the rule identifier of the matching entry (&#x201c;180&#x201d;) is of a lower priority than &#x201c;125,&#x201d; that it should determine a matching rule for second packet <b>604</b> using packet filtering rule set <b>635</b>. Accordingly, in block <b>11</b>, packet processor <b>615</b> may determine a rule with a matching key pattern in rule set <b>635</b> and, in block <b>12</b>, replace the current entry in cache <b>620</b> with the details of the matching rule (not shown). Finally, in block <b>13</b>, packet processor <b>615</b> may process second packet <b>604</b> according to the matching rule received in block <b>11</b>.</p>
<p id="p-0073" num="0072">According to the foregoing, example embodiments disclosed herein increase performance of a network node that implements packet filtering. In particular, example embodiments provide for application of cached packet filtering rules in a manner that minimizes processing performed to update cached results of a packet filtering rule set, while still ensuring that a most recent packet filtering decision is applied to each packet.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>We claim:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A network node for selective invalidation of packet filtering cache results based on rule priority, the network node comprising:
<claim-text>a cache of results of a packet filtering rule set to store a plurality of entries, each cache entry including a rule identifier of a packet filtering rule to which the cache entry relates and a rule set version identifier that identifies a version of the packet filtering rule set when the cache entry was created;</claim-text>
<claim-text>a version memory to store a highest priority rule modified for each of a plurality of rule set version identifiers;</claim-text>
<claim-text>a current rule set version identifier identifying a current version of the packet filtering rule set; and</claim-text>
<claim-text>a packet processor to:
<claim-text>determine, when a cache entry corresponding to a received packet is included in the cache, whether the rule identifier included in the cache entry is of a higher priority than a highest priority rule stored in the version memory for the rule set version identifier included in the cache entry, and</claim-text>
<claim-text>apply, to the packet, an action included in the cache entry when the rule identifier included in the cache entry is of a higher priority.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The network node of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the packet filtering rule set includes a plurality of rules associated with a priority and, for each rule, a corresponding action to be taken when the packet matches the rule.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The network node of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the packet processor is further configured to:
<claim-text>determine whether the rule set version identifier included in the cache entry is equal to the current rule set version identifier; and</claim-text>
<claim-text>apply the action included in the cache entry to the packet when the rule set version identifier included in the cache entry is equal to the current rule set version identifier.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The network node of <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein:
<claim-text>the version memory stores a total of n entries, and</claim-text>
<claim-text>the packet processor ignores the cache entry when the current rule set version identifier minus the rule set version identifier included in the cache entry is greater than n.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The network node of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the packet processor is further configured to, when a cache entry corresponding to the packet is not included in the cache or the rule identifier included in the cache entry is of an equal or lower priority:
<claim-text>access the packet filtering rule set to identify a matching rule and a corresponding action for the packet;</claim-text>
<claim-text>locate an available entry in the cache; and</claim-text>
<claim-text>insert a cached result for the packet into the available entry in the cache, the cached result including a key for the packet, the corresponding action, an identifier of the matching rule, and the current rule set version identifier.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The network node of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising a rule set update engine to:
<claim-text>apply at least one modification of the packet filtering rule set to update the packet filtering rule set to a new version;</claim-text>
<claim-text>determine an identifier of a highest priority rule modified for the new version;</claim-text>
<claim-text>update the version memory to set the highest priority rule to the highest priority rule modified for the new version for each entry in the version memory for which the highest priority rule is of a lower priority than the highest priority rule modified for the new version; and</claim-text>
<claim-text>update the current rule set version identifier.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The network node of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein:
<claim-text>the plurality of rules in the packet filtering rule set are ordered from a highest priority rule to a lowest priority rule based on an integer rule identifier assigned to each rule, and</claim-text>
<claim-text>the packet processor determines that the rule identifier included in the cache entry is of a higher priority than the highest priority rule stored in the version memory when the rule identifier is less than the highest priority rule.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. A machine-readable storage medium device encoded with instructions executable by a processor of a network node for selective invalidation of packet filtering cache results based on rule priority, the machine-readable storage medium comprising:
<claim-text>instructions for identifying a cache entry of a cache of results of a packet filtering rule set, the identified entry including a key corresponding to a determined key of a received packet;</claim-text>
<claim-text>instructions for determining whether a rule set version identifier included in the cache entry matches a current version of the packet filtering rule set;</claim-text>
<claim-text>instructions for determining whether a rule identifier included in the cache entry is of a higher priority than a highest priority rule modified for a version of the packet filtering rule set identified by the rule set version identifier included in the cache entry; and</claim-text>
<claim-text>instructions for processing the packet according to an action identified by the cache entry when either the rule set version identifier matches or the rule identifier is of a higher priority.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The machine-readable storage medium of <claim-ref idref="CLM-00008">claim 8</claim-ref>, further comprising instructions for updating the cache when the rule set version identifier does not match the current version and when the rule identifier included in the cache entry is of an equal or lower priority, the instructions for updating comprising:
<claim-text>instructions for accessing the packet filtering rule set to identify a matching rule and a matching action for the packet;</claim-text>
<claim-text>instructions for inserting a cached result for the packet into an available entry in the cache, the cached result including the key for the packet, the matching action, an identifier of the matching rule, and the current version of the packet filtering rule set.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The machine-readable storage medium of <claim-ref idref="CLM-00008">claim 8</claim-ref>, further comprising instructions for updating the packet filtering rule set to a new version, the instructions for updating comprising:
<claim-text>instructions for updating the current version of the packet filtering rule set;</claim-text>
<claim-text>instructions for determining an identifier of a highest priority rule modified for the new version; and</claim-text>
<claim-text>instructions for updating a value storing a highest priority rule associated with each version of the packet filtering rule set such that no value identifies a rule of a lower priority than the highest priority rule modified for the new version.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. A method for selectively invalidating packet filtering cache results based on rule priority, the method comprising:
<claim-text>receiving a packet in a network node;</claim-text>
<claim-text>determining, by the network node, whether a key for the packet is located in a cache of results of a packet filtering rule set, the cache including a plurality of keys, each associated with a corresponding action, a corresponding rule identifier, and a corresponding rule set version identifier;</claim-text>
<claim-text>determining, when the key for the packet is included in the cache, whether the corresponding rule identifier is of a higher priority than a highest priority rule modified for the corresponding rule set version identifier; and</claim-text>
<claim-text>applying the corresponding action to the packet when the corresponding rule identifier is of a higher priority.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The method of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein determining whether the corresponding rule identifier is of a higher priority comprises:
<claim-text>accessing the rule identifier corresponding to the key for the packet from the cache;</claim-text>
<claim-text>accessing the highest priority rule modified for the corresponding rule set version identifier from a version memory, the version memory storing a plurality of entries including a highest priority rule modified for each of a plurality of rule set version identifiers; and</claim-text>
<claim-text>determining whether the corresponding rule identifier accessed from the cache is of a higher priority than the highest priority rule accessed from the version memory.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The method of <claim-ref idref="CLM-00012">claim 12</claim-ref>, further comprising updating the packet filtering rule set to a new version, the updating comprising:
<claim-text>updating a current rule set version identifier;</claim-text>
<claim-text>determining an identifier of a highest priority rule modified for the new version; and</claim-text>
<claim-text>updating the version memory to set the highest priority rule to the highest priority rule modified for the new version for each entry in the version memory for which the highest priority rule is of a lower priority than the highest priority rule modified for the new version.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The method of <claim-ref idref="CLM-00011">claim 11</claim-ref>, further comprising, prior to determining whether the corresponding rule identifier is of a higher priority:
<claim-text>determining whether the corresponding rule set version identifier is equal to a current rule set version identifier; and</claim-text>
<claim-text>applying the corresponding action to the packet when the corresponding rule set version identifier is equal to the current rule set version identifier.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The method of <claim-ref idref="CLM-00011">claim 11</claim-ref>, further comprising, when the key for the packet is not located in the cache and the corresponding rule identifier is of an equal or lower priority than the highest priority rule modified for the corresponding rule set version identifier:
<claim-text>accessing the packet filtering rule set to identify a matching rule and a matching action for the packet;</claim-text>
<claim-text>locating an available entry in the cache; and</claim-text>
<claim-text>inserting a cached result for the packet into the available entry in the cache, the cached result including the key for the packet, the matching action, an identifier of the matching rule, and a current rule set version identifier of the packet filtering rule set. </claim-text>
</claim-text>
</claim>
</claims>
</us-patent-grant>

<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08625806-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08625806</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>11673255</doc-number>
<date>20070209</date>
</document-id>
</application-reference>
<us-application-series-code>11</us-application-series-code>
<priority-claims>
<priority-claim sequence="01" kind="national">
<country>DE</country>
<doc-number>10 2006 006 057</doc-number>
<date>20060209</date>
</priority-claim>
</priority-claims>
<us-term-of-grant>
<us-term-extension>1428</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20130101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>21</main-group>
<subgroup>00</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>380286</main-classification>
<further-classification>713189</further-classification>
</classification-national>
<invention-title id="d2e71">Data-processing apparatus and method for processing data</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>2002/0169968</doc-number>
<kind>A1</kind>
<name>Gammel et al.</name>
<date>20021100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>713189</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>2003/0005313</doc-number>
<kind>A1</kind>
<name>Gammel et al.</name>
<date>20030100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>713189</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>2004/0032950</doc-number>
<kind>A1</kind>
<name>Graunke</name>
<date>20040200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>380 42</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>2004/0136530</doc-number>
<kind>A1</kind>
<name>Endo et al.</name>
<date>20040700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>380 44</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>2004/0186979</doc-number>
<kind>A1</kind>
<name>Janke et al.</name>
<date>20040900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>712  1</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>DE</country>
<doc-number>102 01 444</doc-number>
<kind>A1</kind>
<date>20030700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>EP</country>
<doc-number>0 100 954</doc-number>
<kind>A2</kind>
<date>19840200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>EP</country>
<doc-number>0 100 954</doc-number>
<kind>A3</kind>
<date>19840200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>EP</country>
<doc-number>0 100 955</doc-number>
<date>19840200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>EP</country>
<doc-number>0 100 955</doc-number>
<kind>A3</kind>
<date>19840200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00011">
<document-id>
<country>EP</country>
<doc-number>1 118 941</doc-number>
<kind>A1</kind>
<date>20010700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00012">
<document-id>
<country>EP</country>
<doc-number>1 249 010</doc-number>
<kind>B1</kind>
<date>20021000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00013">
<document-id>
<country>EP</country>
<doc-number>1 283 458</doc-number>
<kind>A2</kind>
<date>20030200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00014">
<document-id>
<country>EP</country>
<doc-number>1 472 587</doc-number>
<kind>B1</kind>
<date>20041100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00015">
<document-id>
<country>WO</country>
<doc-number>WO-01/40950</doc-number>
<kind>A2</kind>
<date>20010600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00016">
<document-id>
<country>WO</country>
<doc-number>WO-01/40950</doc-number>
<kind>A3</kind>
<date>20010600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>13</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>713189</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>380286</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>2</number-of-drawing-sheets>
<number-of-figures>2</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20070189543</doc-number>
<kind>A1</kind>
<date>20070816</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Gammel</last-name>
<first-name>Berndt</first-name>
<address>
<city>Markt-Schwaben</city>
<country>DE</country>
</address>
</addressbook>
<residence>
<country>DE</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Kniffler</last-name>
<first-name>Oliver</first-name>
<address>
<city>Munich</city>
<country>DE</country>
</address>
</addressbook>
<residence>
<country>DE</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Gammel</last-name>
<first-name>Berndt</first-name>
<address>
<city>Markt-Schwaben</city>
<country>DE</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Kniffler</last-name>
<first-name>Oliver</first-name>
<address>
<city>Munich</city>
<country>DE</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Schiff Hardin LLP</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>Infineon Technologies AG</orgname>
<role>03</role>
<address>
<city>Neubiberg</city>
<country>DE</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Arani</last-name>
<first-name>Taghi</first-name>
<department>2491</department>
</primary-examiner>
<assistant-examiner>
<last-name>Mangialaschi</last-name>
<first-name>Tracy</first-name>
</assistant-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">A data-processing apparatus has a data provider for providing an input datum encrypted by an encryption key. In addition, the data-processing apparatus has a key stream generator for generating a key stream in a predetermined deterministic manner such that the key stream has a decryption key corresponding to the encryption key. Furthermore, the data-processing apparatus has a data processor for processing the encrypted input datum in a masked manner using the decryption key as a temporary key to obtain an output datum encrypted by an output key such that the encrypted output datum corresponds to a result, encrypted by the output key, of a predetermined operation on the encrypted input datum having been decrypted by the decryption key.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="105.07mm" wi="197.87mm" file="US08625806-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="199.39mm" wi="115.91mm" orientation="landscape" file="US08625806-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="164.85mm" wi="118.53mm" orientation="landscape" file="US08625806-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">CROSS-REFERENCE TO RELATED APPLICATION</heading>
<p id="p-0002" num="0001">This application claims priority from German Patent Application No. 10 2006 006 057.1, which was filed on Feb. 9, 2006, and is incorporated herein by reference in its entirety.</p>
<heading id="h-0002" level="1">BACKGROUND OF THE INVENTION</heading>
<p id="p-0003" num="0002">1. Field of the Invention</p>
<p id="p-0004" num="0003">The present invention relates to the technical field of cryptography and, in particular, the present invention relates to the technical sub-field of cryptographic bus encryption.</p>
<p id="p-0005" num="0004">2. Description of Related Art</p>
<p id="p-0006" num="0005">In order to transfer data from one device to another device on a semiconductor board, signal busses having several parallel lines are frequently used. However, to avoid signal tapping on these bus lines in security-relevant applications, bus encryption is frequently employed so that the data are transferred between the two devices only in an encrypted form. To obtain the information exchanged between the two devices, a potential attacker would have to know the respective encryption key or a pertaining decryption key. Often, a stream cipher is used in the conventional art for this bus encryption.</p>
<p id="p-0007" num="0006">Such a data transfer by means of bus encryption is illustrated in greater detail in a block circuit diagram in <figref idref="DRAWINGS">FIG. 2</figref>. Here, the (encrypted) data m<sub>t </sub>are transferred between a first device CPU and a second device AES by means of a first bus <b>202</b> having m bit lines. The two devices schematically illustrated in <figref idref="DRAWINGS">FIG. 2</figref>, however, may also be realized in software, such as, for example, as different routines running in a processor.</p>
<p id="p-0008" num="0007">Furthermore, (encrypted) data M<sub>T </sub>can be transferred from the second device AES via the second bus <b>204</b> having m bit lines.</p>
<p id="p-0009" num="0008">As regards data processing in each of the two devices CPU or AES, the mode of functioning of this processing can be described as follows. The encrypted data of a data stream are received at an input <b>206</b> of the first functional block (i.e. of the first device) CPU and decrypted by a decryption key T<sub>M </sub>(such as, for example, by an exclusive-OR linking or operation or the like). This decryption key T<sub>M </sub>here may be generated by a one-time pad generator OTPG, however, it may, for example, also be taken from a look-up table. This decryption key T<sub>M </sub>here corresponds to an encryption key T<sub>M </sub>used for encrypting the input data stream on the bus <b>204</b> from the functional unit AES. In the present case, the encryption key T<sub>M </sub>and the decryption key T<sub>M </sub>are identical. As a result of the linking of the encrypted input data with the decryption key in a decrypter <b>208</b>, plain text data M are output and buffered. For further processing in the functional unit CPU which then is to take place in a masked or encrypted manner, encryption is performed in an encrypter <b>210</b> by a T key so that during actual data processing the data are only used in an encrypted/masked form in the functional unit CPU. Subsequently, the processed data are decrypted again by a corresponding T key in a decrypter <b>212</b> and encrypted in a subsequent stage (encrypter <b>214</b>) by another encryption key t<sub>m </sub>to be able to transfer same again in an encrypted manner when transferring to the second functional block AES via the first bus <b>202</b>. The further encryption key t<sub>m </sub>may again be a one-time pad.</p>
<p id="p-0010" num="0009">The processing in the second functional block AES takes place in analogy, i.e. again decryption is performed by a corresponding decryption key t<sub>m </sub>which is, for example, also generated by a one-time pad generator OTPG of the further data encryption apparatus, the result being plain text m which is buffered. Again, encryption of the plain text m or the stored version of the plain text m is performed using a T key to execute the actual calculating steps in the functional block AES using the encrypted data.</p>
<p id="p-0011" num="0010">Subsequently, a value calculated by the functional unit AES is decrypted again, wherein this decrypted value is again produced using the key T<sub>M </sub>provided by the one-time pad generator OTPG, the result being the encrypted data stream M<sub>T </sub>transferred to the first functional unit CPU via the second bus <b>204</b>. The overall circuit diagram is illustrated in <figref idref="DRAWINGS">FIG. 2</figref>, this image showing a combination of encrypted data transfer and encrypted calculation.</p>
<p id="p-0012" num="0011">The realization illustrated in <figref idref="DRAWINGS">FIG. 2</figref>, however, has several problems. First of all, it is to be noted that the greatest problem is that a plain text portion m and M in such a design results from partitioning the bus lines, in particular using the design rule &#x201c;registered out&#x201d;. In particular, an X bus scramble XBS is used for such a partitioning. For such a bus establishing, all automatic tools for establishing a layout try to preferably place, neutral in timing, gates occurring in the center of a bus line. However, a relatively large portion of the line in a bus line can be tapped by this externally (such as, for example, by a probe), which is particularly disadvantageous when transferring plain text on such a bus line in connection with encrypted transfer and encrypted calculation, since such a &#x201c;plain text line&#x201d; has to be considered to be the weakest element in a security-relevant data transfer. Only by means of a complicated hand layout can the plain text portion of the bus lines be kept as small as possible.</p>
<p id="p-0013" num="0012">Furthermore, a temporary key (T key) has to be generated for the encrypted/masked calculation which, however, can only be achieved by additional hardware and/or numerically complicated additional calculations.</p>
<p id="p-0014" num="0013">Thirdly, it is also to be mentioned that changing the T key is only possible for an &#x201c;emptied pipeline&#x201d;, i.e. using a T key on one or several data blocks when calculating in the first functional unit CPU or the second functional unit AES requires applying the key to the respective data block until all corresponding operations have been processed completely.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0015" num="0014">An exemplary embodiment of the present invention will be detailed subsequently referring to the appended drawings, in which:</p>
<p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. 1</figref> is a block circuit diagram of an embodiment of the present invention; and</p>
<p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. 2</figref> is a block circuit diagram of a conventional approach for combining encrypted data transfer and encrypted calculation.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0004" level="1">DESCRIPTION OF THE INVENTION</heading>
<p id="p-0018" num="0017">The present invention provides an approach which, compared to the conventional art, can be put into practice in a considerably more secure and at the same time more simple way.</p>
<p id="p-0019" num="0018">In accordance with a first aspect, the present invention provides a data-processing apparatus, having: data-providing means for providing an input datum encrypted by an encryption key; a key stream-generating unit for generating a key stream in a predetermined deterministic manner so that the key stream has a decryption key corresponding to the encryption key; a data-processing unit for processing the encrypted input datum of the decryption key as a temporary key in a masked manner to obtain an output datum encrypted by an output key such that the encrypted output datum corresponds to a result, encrypted by the output key, of a predetermined operation on the encrypted input datum having been decrypted by the decryption key.</p>
<p id="p-0020" num="0019">In accordance with a second aspect, the present invention provides a bus encryption apparatus, having: a first data-processing apparatus as described above; a second data-processing apparatus as described above; a transfer unit coupled to the first and second data-processing apparatuses such that the data-providing means of the second data-processing unit provides the output datum of the first data-processing unit encrypted by the output key as an encrypted input datum and such that the data-providing means of the first data-processing unit provides the output datum of the second data-processing unit encrypted by the output key as an encrypted input datum, and wherein the key stream-generating unit of the first data-processing unit may be synchronized to the key stream-generating unit of the second data-processing unit such that the encryption key of the second data-processing unit corresponds to the decryption key of the first data-processing unit and the encryption key of the first data-processing unit corresponds to the decryption key of the second data-processing unit.</p>
<p id="p-0021" num="0020">In accordance with a third aspect, the present invention provides a bus encryption apparatus, having: a data-providing unit for providing an input datum encrypted by an encryption key; a data-processing unit for processing the encrypted input datum in a masked manner using a decryption key as a temporary key to obtain an output datum encrypted by an output key such that the encrypted output datum corresponds to a result, encrypted by the output key, of a predetermined operation on the encrypted input datum having been decrypted by the decryption key; and a key stream-generating unit for generating a key stream and for providing the key stream generated to the data-providing unit and the data-processing unit, the data-providing unit being implemented to obtain the encryption key from the key stream, and the data-processing unit being implemented to obtain the decryption key from the key stream such that the encryption key corresponds to the decryption key.</p>
<p id="p-0022" num="0021">In accordance with a fourth aspect, the present invention provides a method for processing data by means of a data-processing apparatus, having the steps of: providing an input datum encrypted by an encryption key; generating a key stream in a predetermined deterministic manner so that the key stream has a decryption key corresponding to the encryption key; and processing the encrypted input datum in a masked manner using the decryption key as a temporary key to obtain an output datum encrypted by an output key such that the encrypted output datum corresponds to a result, encrypted by the output key, of a predetermined operation on the encrypted input datum having been decrypted by the decryption key.</p>
<p id="p-0023" num="0022">In accordance with a fifth aspect, the present invention provides a computer program having a program code for performing the method as described above when the computer program runs on a computer.</p>
<p id="p-0024" num="0023">The present invention is based on the finding that, to avoid an exposed plain text portion, an input data stream encrypted by an encryption key is not decrypted at first by a decryption key corresponding to the encryption key, but, for example, the data of the encrypted input data stream and the encryption key are processed in two processing branches (preferably in parallel). Only in another transmission will the data from the two processing branches be combined, wherein, for example, at the same time another encryption key is taken into consideration to be able to transfer the combined data to another data-processing means in an encrypted manner. This means that decrypting the data of the encrypted input data stream is omitted, the result being that, on the one hand, no plain text portion results and, on the other hand, no complicated re-encryption using the T key is necessary. At the same time, however, the plain text portion, if necessary, can also be obtained from the corresponding data in the respective processing branches by means of combination (such as, for example, by exclusive-OR linking).</p>
<p id="p-0025" num="0024">The present invention offers the advantage that no switching has to be done between encryption during transfer and encryption/masking during processing. Further advantages of this are that no re-encryption has to take place between the reception and the calculating unit and that thus no plain text results on any of the lines, which is why no complicated hand layout is necessary additionally for such a circuit and/or chip design. In addition, another advantage is that the inventive approach only requires minimized hardware expenditure by omitting the T key encryption. Furthermore, preferably any started operation for a masked calculation can receive its own key which is independent of the pipeline state in a calculating unit.</p>
<p id="p-0026" num="0025">Same or similar elements will be provided with same or similar reference numerals in the subsequent description, a repeated explanation of these elements being omitted.</p>
<p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. 1</figref> shows a block circuit diagram of an embodiment of the present invention. Here, a first data encryption apparatus CPU includes data-provider <b>102</b> for receiving an input data stream M<sub>T </sub>encrypted by an encryption key T<sub>M</sub>. This data-provider <b>102</b> may, for example, be a memory or an input of the first data encryption apparatus CPU. In addition, the first data encryption apparatus includes a key-providing unit <b>104</b> for providing a decryption key T<sub>M </sub>corresponding to the encryption key T<sub>M</sub>. The key-providing unit <b>104</b> here may be, as is illustrated in <figref idref="DRAWINGS">FIG. 1</figref>, a one-time pad generator OTPG, however, it may also be a memory in which a corresponding symmetrical or asymmetrical decryption key is stored (exemplarily as a look-up table).</p>
<p id="p-0028" num="0027">Furthermore, the first data encryption apparatus includes a first branch-processing unit <b>106</b> implemented to apply a first operation <b>108</b> to the data of the encrypted input data stream M<sub>T </sub>to obtain first branch data m<sub>r</sub>. In <figref idref="DRAWINGS">FIG. 1</figref>, the first branch-processing unit <b>106</b> is not illustrated explicitly but is only identified by the effect of the first operation <b>108</b>, i.e. by the arrow illustrated in a broken line provided with the reference numeral <b>108</b>. The first operation here may be an AND, OR, XOR, NAND, NOR, XNOR operation or any combination of these operations (corresponding to EP 1472587 B1). In analogy, the first data encryption apparatus CPU also includes a second branch data-processing unit <b>110</b> implemented to apply a second operation <b>112</b> to the decryption key T<sub>M </sub>to obtain second branch data r<sub>m</sub>. Thus, the second operation may be an AND, OR, XOR, NAND, NOR, XNOR operation or any combination of these operations (corresponding to EP 1472587 B1). Again, the second branch data-processing unit <b>110</b> is not illustrated explicitly, but only indicated by the effect of the second operation <b>112</b> (i.e. by the arrow illustrated in a broken line). The first or second operation may also process and/or combine successive bits to obtain corresponding first or second branch data.</p>
<p id="p-0029" num="0028">The first or second branch data-processing unit <b>110</b>, <b>110</b>&#x2032; here may be implemented to execute one or a plurality of mathematical sub-operations indicated by the following secret text-calculating rules:
<ul id="ul0001" list-style="none">
    <li id="ul0001-0001" num="0000">
    <ul id="ul0002" list-style="none">
        <li id="ul0002-0001" num="0029">for an AND operation:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>AND: <i>r</i><sup>(k)</sup><i>&#x2190;a</i><sup>(i)</sup><i>&#xb7;b</i><sup>(j)</sup><i>&#xb7; <o ostyle="single">j</o>+&#x101;</i><sup>(i)</sup><i>&#xb7; <o ostyle="single">b</o></i><sup>(j)</sup><i>&#xb7;j+b</i><sup>(j)</sup><i>&#xb7;&#x12b;&#xb7;j+ <o ostyle="single">b</o></i><sup>(j)</sup><i>&#xb7;i&#xb7; <o ostyle="single">j</o>; </i><?in-line-formulae description="In-line Formulae" end="tail"?>
</li>
        <li id="ul0002-0002" num="0030">for an OR operation:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>OR: <i>r</i><sup>(k)</sup><i>&#x2190;a</i><sup>(i)</sup><i>&#xb7; <o ostyle="single">b</o></i><sup>(j)</sup><i>&#xb7; <o ostyle="single">j</o>+&#x101;</i><sup>(i)</sup><i>&#xb7;b</i><sup>(j)</sup><i>&#xb7;j+b</i><sup>(j)</sup><i>&#xb7; <o ostyle="single">i&#xb7;j</o>+ <o ostyle="single">b</o></i><sup>(j)</sup><i>&#xb7;i&#xb7;j; </i><?in-line-formulae description="In-line Formulae" end="tail"?>
</li>
        <li id="ul0002-0003" num="0031">for an NAND operation:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>NAND: <i>r</i><sup>(k)</sup><i>&#x2190;&#x101;</i><sup>(i)</sup><i>&#xb7;b</i><sup>(j)</sup><i>&#xb7; <o ostyle="single">j</o>+a</i><sup>(i)</sup><i>&#xb7; <o ostyle="single">b</o></i><sup>(j)</sup><i>&#xb7;j+b</i><sup>(j)</sup><i>&#xb7;i&#xb7;j+ <o ostyle="single">b</o></i><sup>(j)</sup><i>&#xb7;&#x12b;&#xb7; <o ostyle="single">j</o></i><?in-line-formulae description="In-line Formulae" end="tail"?>
</li>
        <li id="ul0002-0004" num="0032">for an NOR operation
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>NOR: <i>r</i><sup>(k)</sup><i>&#x2190;&#x101;</i><sup>(i)</sup><i>&#xb7; <o ostyle="single">b</o></i><sup>(j)</sup><i>&#xb7; <o ostyle="single">j</o>+a</i><sup>(i)</sup><i>&#xb7;b</i><sup>(j)</sup><i>&#xb7;j+b</i><sup>(j)</sup><i>&#xb7;i&#xb7; <o ostyle="single">j</o>+ <o ostyle="single">b</o></i><sup>(j)</sup><i>&#xb7;&#x12b;&#xb7;j; </i><?in-line-formulae description="In-line Formulae" end="tail"?>
</li>
        <li id="ul0002-0005" num="0033">for an XOR operation:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>XOR: <i>r</i><sup>(k)</sup><i>&#x2190;a</i><sup>(i)</sup>{circle around (&#x2295;)}b<sup>(j)</sup>;<?in-line-formulae description="In-line Formulae" end="tail"?>
</li>
        <li id="ul0002-0006" num="0034">for an XNOR operation:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>XNOR: <i>r</i><sup>(k)</sup><i>&#x2190;&#x101;</i><sup>(i)</sup>{circle around (&#x2295;)}b<sup>(j)</sup>;<?in-line-formulae description="In-line Formulae" end="tail"?>
</li>
        <li id="ul0002-0007" num="0035">for a full adder function having the following sum bit:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>SUM: <i>r</i><sup>(k)</sup>&#x2190;(<i>&#x101;</i><sup>(i)</sup><i>{circle around (&#x2295;)}j</i>){circle around (&#x2295;)}(<i>b</i><sup>(i)</sup><i>{circle around (&#x2295;)}j</i>){circle around (&#x2295;)}c<sub>in</sub><sup>(k)</sup>; or<?in-line-formulae description="In-line Formulae" end="tail"?>
</li>
        <li id="ul0002-0008" num="0036">for a full adder function having a carry bit:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>CARRY: <i>r</i>(<i>k</i>)&#x2190;(<i>&#x101;</i><sup>(i)</sup><i>{circle around (&#x2295;)}j</i>){circle around (&#x2295;)}(<i>b</i><sup>(i)</sup><i>{circle around (&#x2295;)}j</i>)+(<i>&#x101;</i><sup>(i)</sup><i>{circle around (&#x2295;)}j</i>)&#xb7;c<sub>in</sub><sup>(k)</sup>+(<i>b</i><sup>(i)</sup><i>{circle around (&#x2295;)}j</i>)&#xb7;<i>c</i><sub>in</sub><sup>(k)</sup>;<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
a<sup>(i) </sup>being the first operand encrypted by the first encryption parameter, b<sup>(j) </sup>being the second operand encrypted by the second encryption parameter, i being the first encryption parameter, j being the second encryption parameter, k being the third encryption parameter, the third encryption parameter equaling the XOR linking of the first and second encryption parameters, r<sup>(k) </sup>being the result of the operation encrypted by the third encryption parameter, and c<sub>in</sub><sup>(k) </sup>being a carry input encrypted by the third encryption parameter. Here, it becomes obvious that linking i and j is, for example, performed as two successive one-time pads of the one-time pad generator <b>104</b> by an XOR linking (second operation <b>112</b>), whereas the input data a<sup>(i) </sup>and b<sup>(j) </sup>are not linked alone by an XOR linking (first operation <b>108</b>), but, for example, by an AND or SUM linking mentioned above. However, it is to be mentioned that, for the operations AND, OR, NAND, NOR, SUM and CARRY, the first or second encryption parameters i and j are to be used in the calculation rule, which is how data exchange between the calculating units executing the first and second operations <b>112</b>, <b>108</b> is to take place in such a case.
</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0030" num="0037">Finally, the first data encryption apparatus CPU includes an encrypter <b>114</b> implemented to establish an encrypted output data stream m<sub>t </sub>from the first branch data m<sub>r </sub>and the second branch data r<sub>m </sub>using an output-encryption key t<sub>m</sub>. Here, the encrypter <b>114</b> may be implemented to perform an exclusive-OR linking of the corresponding data to obtain the encrypted output data stream m<sub>t</sub>.</p>
<p id="p-0031" num="0038">Thus, it is to be mentioned that the one-time pad generated by the one-time pad generator OTPG is a temporary key which is preferably processed synchronously to the masked processing of the encrypted input data in the first branch-processing unit. This means that preferably a one-time pad &#x201c;datum&#x201d; is associated with each input datum such that a decryption of the input data processed in a masked manner would be possible. In order to be able to make use of the inventive advantage, however, no decryption of the encrypted input data is performed, so that preferably there are no plain text data exposed in the system (of course except for a direct output of the plain text data to an authorized user).</p>
<p id="p-0032" num="0039">The second data encryption apparatus AES, as is illustrated in the right part of <figref idref="DRAWINGS">FIG. 1</figref>, may have an analog setup. Here, the corresponding elements are identified by corresponding reference numerals adding an apostrophe.</p>
<p id="p-0033" num="0040">If data output from the second data encryption device AES in an encrypted form are to be processed in the first data encryption apparatus CPU, at first the encrypted input data stream M<sub>T </sub>can be received via the second bus <b>204</b> and stored in the data-provider <b>102</b>. Here, it is to be mentioned that a corresponding decryption T<sub>M </sub>which is then provided by the key-providing unit <b>104</b> (and, for example, stored in a memory) should be known. It is to be mentioned here that the data stream received may also be encoded by a stream cipher, wherein in this case a stream cipher necessary for decryption can also be provided by the key-providing unit.</p>
<p id="p-0034" num="0041">In contrast to well-known approaches, however, no decryption of the data provided is performed (wherein the result would be plain text), but rather a parallel processing of both the data of the encrypted input data stream provided and the decryption key is performed. This, on the one hand, takes place in the first branch-processing unit <b>106</b> in which the first operation <b>108</b> is applied to the data of the encrypted input stream. Correspondingly, the second operation <b>112</b> is applied to the decryption key T<sub>M </sub>in the second data-processing unit <b>110</b>. Here, the first or second operation <b>108</b> or <b>112</b> may include a plurality of sub-operations so that applying the first or second operation <b>108</b>, <b>112</b> can also be considered as executing calculating steps of an algorithm on the respective data. Preferably, however, the first and second operations should correspond to one another so that, for example, the same calculating steps are applied to the data of both the encrypted input data stream and the encryption key, so that a parallel processing (in particular separate and independent on each other) of the respective data can be performed to obtain corresponding branch data.</p>
<p id="p-0035" num="0042">If the first branch data m<sub>r </sub>and the second branch data r<sub>m </sub>are present, these branch data can be encrypted in the encrypter <b>114</b> using an output encryption key t<sub>m </sub>to form an encrypted output data stream m<sub>t</sub>. Here, the special effect of the inventive approach becomes evident in that no plain text m has to be established here (which would, for example, result by a corresponding linking of the second branch data r<sub>m </sub>and the first branch data m<sub>r</sub>), but at the same time the output encryption key t<sub>m </sub>is considered and thus the encrypted output data stream can be established directly without calculating plain text data m.</p>
<p id="p-0036" num="0043">It is to be mentioned here that the output encryption key t<sub>m </sub>may also be a one-time pad which may, for example, be generated as well by the key-providing unit <b>104</b>. In addition, the output encryption key t<sub>m </sub>need not correspond to the decryption key T<sub>m </sub>but may, apart from a data sequence (such as, for example, a bit sequence) of a predetermined length, also be a stream cipher using a feedback shift register with a predetermined initial value setting. The same also applies for providing the encryption key T<sub>M </sub>which may also be a code word of a predetermined bit length or a stream cipher from a feedback shift register with a predetermined initial value setting, synchronous in clock, wherein these are only two possibilities without limiting the generality for the key-providing unit.</p>
<p id="p-0037" num="0044">Additionally, the first and second operations <b>108</b> and <b>112</b> are preferably to be applied to the data of the encrypted data input stream and/or the decryption key such that, when combining the first branch data m<sub>r </sub>and the second branch data r<sub>m</sub>, the result would be a plain text which would also result when applying a predetermined third operation to a plain text M, wherein the plain text M would result from a combination of the decryption key T<sub>M </sub>on the data of the (encrypted) input data stream M<sub>T</sub>. The result is that the first operation <b>108</b> and the second operation <b>112</b> are to be implemented such that they are parallel executable sub-operations of the third operation, which would correspond to a masked calculation within the data encryption apparatus when directly generating plain text M.</p>
<p id="p-0038" num="0045">However, executing the encrypter <b>114</b> may also take place as an alternative to an XOR linking, such as, for example, by a symmetrical or asymmetrical encryption, wherein in this case the output encryption key t<sub>m </sub>would be a symmetrical key and/or a public (or private) key, depending on whether public signing and private verifying or private signing and public verifying is to be performed.</p>
<p id="p-0039" num="0046">By way of analogy, the data output from the first data encryption apparatus CPU via the first bus <b>202</b> can be received in a second data encryption apparatus AES and stored in a data-providing memory <b>102</b>&#x2032;. Correspondingly, the data of the encrypted output data stream m<sub>t </sub>of the first data encryption apparatus CPU form the data of the encrypted input data stream of the second data encryption apparatus AES. In analogy, the second data encryption apparatus AES in turn includes a key-providing unit <b>104</b>&#x2032; for providing a decryption key t<sub>m </sub>corresponding to the encryption key t<sub>m</sub>, wherein the key-providing unit <b>104</b>&#x2032; of the second data encryption apparatus AES in turn may be a one-time pad generator OTPG. In analogy to the first data encryption apparatus CPU, the second data encryption apparatus AES also includes a first branch-processing unit <b>106</b>&#x2032; implemented to apply a first operation <b>108</b>&#x2032; to the data of the encrypted input data stream m<sub>t </sub>to obtain first branch data M<sub>R</sub>. In addition, the second data-processing apparatus AES also includes a second branch data-processing unit <b>110</b>&#x2032; implemented to apply a second operation <b>112</b>&#x2032; to the decryption key t<sub>m </sub>to obtain second branch data R<sub>M</sub>. Finally, the second data encryption apparatus AES includes an encrypter <b>114</b>&#x2032; selected to establish an encrypted output data stream M<sub>T </sub>from the first branch data M<sub>R </sub>and the second branch data R<sub>M </sub>using an output encryption key T<sub>M</sub>. The output encryption key T<sub>M </sub>of the second data encryption apparatus here may again be provided by a key-providing unit <b>104</b>&#x2032; and may, for example, again be a one-time pad.</p>
<p id="p-0040" num="0047">It is to be mentioned here that, according to the embodiment illustrated in <figref idref="DRAWINGS">FIG. 1</figref>, the key-providing unit <b>104</b> of the first data encryption apparatus and the key-providing unit <b>104</b>&#x2032; of the second data encryption apparatus may each be a one-time pad generator. In this case, the one-time pads for encryption and decryption may be identical, i.e. the output encryption key T<sub>M </sub>of the second data encryption apparatus may be equal to the decryption key of the first data encryption apparatus CPU. Alternatively, as has been explained above, however, a corresponding symmetrical or asymmetrical encryption may be used. The same applies to the output encryption key t<sub>m </sub>of the first data encryption apparatus and the decryption key t<sub>m </sub>of the second data encryption apparatus AES. It is possible by this to perform the encryption on the basis of, for example, an initial value substitution of a shift register serving as the key-providing unit <b>104</b> and/or <b>104</b>&#x2032;, which is how an encryption algorithm which is simple as far as numeric and/or hardware is concerned may be implemented. It is also to be pointed out here that in the second data encryption apparatus AES, too, no plain text occurs neither in the receive branch (i.e. no combination of the decryption key t<sub>m </sub>and the data of the encrypted input stream m<sub>t </sub>takes place to obtain the plain text m) nor in the transmit branch, such as, for example, by linking the first branch data M<sub>R </sub>and the second branch data R<sub>M </sub>to obtain the plain text M. This means that again the problems resulting from the plain text are avoided and additionally no re-encryption is necessary.</p>
<p id="p-0041" num="0048">It also has to be mentioned that, in particular when using linear first and/or second operations, a simplification in pipelining is possible since in this case a temporally matching provision of the decryption key and/or a part (segment) of an encryption key for corresponding data of the encrypted data stream is allowed and these data can each be subject to the first and/or second operations without preceding and/or subsequent operating steps corrupting the result.</p>
<p id="p-0042" num="0049">The units &#x201c;CPU&#x201d; and &#x201c;AES&#x201d; shown in the block circuit diagram illustrated in <figref idref="DRAWINGS">FIG. 1</figref>, however, are only representative of a plurality of different data-processing units. These data-processing units may include a microprocessor, a co-processor, another CPU, a cryptography processor (such as, for example, for symmetrical algorithms, like AES or DES, or asymmetrical algorithms, like RSA, elliptical curves cryptography, etc.) or different calculating units.</p>
<p id="p-0043" num="0050">As another generalization, the inventive concept may also be applied to communication between several communication partners. Exemplarily, the concept also works for more than two communication partners A, B, C (when, for example, in <figref idref="DRAWINGS">FIG. 1</figref> partner A is the unit CPU and partner B is the unit AES), wherein in this case A may be connected to B and furthermore A may be connected to C (exemplarily of another AES unit), wherein unit A may then be the master. Thus, the configuration illustrated in <figref idref="DRAWINGS">FIG. 1</figref> is only one form of interconnecting the individual units, wherein an interconnection of several units may also be implemented in the form of a bus system transferring data between the more than two connected units in an encrypted manner.</p>
<p id="p-0044" num="0051">Also, an encryption stream may be generated outside the data-processing units CPU and AES illustrated in <figref idref="DRAWINGS">FIG. 1</figref> and then be fed to two such units via a common signal line. Here, no synchronization of the one-time pad generators would have to take place since the synchronized receiving of the key stream already guarantees such a synchronization. The masked processing of encrypted input data, however, is not impeded by such an external feeding of a key stream from which an encryption key and a corresponding decryption key are generated.</p>
<p id="p-0045" num="0052">Depending on the circumstances, the inventive method may be implemented in either hardware or software. The implementation may take place on a digital storage medium, in particular on a disc or CD having control signals which can be read out electronically, which can cooperate with a programmable computer system such that the corresponding method will be executed. In general, the invention is thus also in a computer program product having a program code stored on a machine-readable carrier for performing the inventive method when the computer program product runs on a computer. Put differently, the invention may also be realized as a computer program having a program code for performing the method when the computer program runs on a computer.</p>
<p id="p-0046" num="0053">While this invention has been described in terms of several preferred embodiments, there are alterations, permutations, and equivalents which fall within the scope of this invention. It should also be noted that there are many alternative ways of implementing the methods and compositions of the present invention. It is therefore intended that the following appended claims be interpreted as including all such alterations, permutations, and equivalents as fall within the true spirit and scope of the present invention.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A data-processing apparatus comprising:
<claim-text>a data provider implemented to provide an input datum encrypted by an encryption key;</claim-text>
<claim-text>a key stream generator implemented to generate a key stream in a predetermined deterministic manner such that the key stream sequentially comprises a decryption key corresponding to the encryption key and an output key; and</claim-text>
<claim-text>a data processor implemented to process the encrypted input datum in a masked manner using the decryption key as a temporary key to obtain an output datum encrypted by the output key such that the encrypted output datum corresponds to a result, encrypted by the output key, of a predetermined operation on the encrypted input datum having been decrypted by the decryption key, wherein the data processor comprises
<claim-text>a first branch data processor implemented to apply a first mathematical or logical operation to the encrypted input datum to obtain first branch data which corresponds to a result, encrypted by second branch data, of the predetermined operation on the encrypted input datum having been decrypted by the decryption key;</claim-text>
<claim-text>a second branch data processor implemented to apply a second mathematical or logical operation to the decryption key to obtain the second branch data, the first mathematical or logical operation and the second mathematical or logical operation being separated from each other in that the first mathematical or logical operation does neither involve the decryption key nor any data derived from the decryption key, and the second mathematical or logical operation does neither depend on the encrypted input datum nor any data derived from the encrypted input datum; and</claim-text>
<claim-text>an XOR generator implemented to generate the encrypted output datum by XORing the first branch data, the second branch data and the output key,</claim-text>
<claim-text>wherein the first branch data processor and the second branch data processor are implemented to execute as a first operation and as a second operation operational steps corresponding to operational steps of a third operation which would be applied to generate second plain text data from first plain text data, wherein the first plain text data would correspond to that data which would correspond to a decryption of the data of the encrypted input data stream by the decryption key and the second plain text data would correspond to a combination of the first branch data and the second branch data.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The data-processing apparatus according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the key stream generator includes a key generator implemented to generate the decryption key.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The data-processing apparatus according to <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the key generator is a one-time pad generator.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The data-processing apparatus according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the first branch data processor and the second branch data processor are implemented to execute as a first operation and as a second operation operational steps with the same operational rule.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The data-processing apparatus according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the first branch data processor is implemented to apply a first sub-operation to a first data segment of the encrypted input data stream and to apply a second sub-operation to a second data segment of the data of the encrypted input data stream, and wherein a first encryption key is associated with the data of the first segment of the encrypted input data stream and a second encryption key is associated with the data of the second data segment of the encrypted input data stream.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The data-processing apparatus according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the data processor and the branch data processor are configured such that the first operation is different from the second operation.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. A bus encryption apparatus, comprising:
<claim-text>a first data-processing apparatus and a second data-processing apparatus, each comprising a key stream generator and a data processor,</claim-text>
<claim-text>wherein in the first data-processing apparatus,
<claim-text>the key stream generator is implemented to generate a key stream in a predetermined deterministic manner such that the key stream sequentially comprises a decryption key equal to the encryption key, and an output key; and</claim-text>
<claim-text>the data processor is implemented to process an encrypted input datum encrypted by an encryption key and received from the data processor of the second data-processing apparatus, in a masked manner using the decryption key as a temporary key to obtain an output datum encrypted by an output key such that the encrypted output datum corresponds to a result, encrypted by the output key, of a predetermined operation on the encrypted input datum having been decrypted by the decryption key, wherein the data processor of the first data-processing apparatus comprises a first branch data processor implemented to apply a first mathematical or logical operation to the encrypted input datum to obtain first branch data which corresponds to a result, encrypted by second branch data, of the predetermined operation on the encrypted input datum having been decrypted by the decryption key, a second branch data processor implemented to apply a second mathematical or logical operation to the decryption key to obtain the second branch data, the first mathematical or logical operation and the second mathematical or logical operation being separated from each other in that the first mathematical or logical operation does neither involve the decryption key nor any data derived from the decryption key, and the second mathematical or logical operation does neither depend on the encrypted input datum nor any data derived from the input datum; and an XOR operator implemented to generate the encrypted output datum by XORing the first branch data, the second branch data and the output key;</claim-text>
</claim-text>
<claim-text>wherein in the second data-processing apparatus,
<claim-text>the key stream generator is implemented to generate a key stream in a predetermined deterministic manner such that the key stream sequentially comprises the decryption key corresponding to the encryption key, the output key and a further output key; and</claim-text>
<claim-text>the data processor is implemented to process the output datum received from the data processor of the first data-processing apparatus in a masked manner using the output key as a temporary key to obtain a further output datum encrypted by the further output key such that the further encrypted output datum corresponds to a further result, encrypted by the further output key, of a further predetermined operation on the encrypted output datum having been decrypted by the output key, wherein the data processor of the second data-processing apparatus comprises a third branch data processor implemented to apply a third mathematical or logical operation to the output datum to obtain third branch data which corresponds to a result, encrypted by fourth branch data, of the further predetermined operation on the encrypted input datum having been decrypted by the decryption key, a fourth branch data processor implemented to apply a fourth mathematical or logical operation to the output key to obtain fourth branch data, the third mathematical or logical operation and the fourth mathematical or logical operation being separated from each other in that the third mathematical or logical operation does neither involve the output key nor any data derived from the decryption key, and the fourth mathematical or logical operation does neither depend on the encrypted output datum nor any data derived from the encrypted output datum, and an XOR operator implemented to generate the further encrypted output datum by XORing the third branch data, the fourth branch data and the further output key;</claim-text>
</claim-text>
<claim-text>wherein the key stream generator of the first data-processing apparatus and the key stream generator of the second data-processing apparatus are synchronized.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The bus encryption apparatus according to <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein the data processor is configured to process the encrypted input datum in a masked manner using the decryption key as the temporary key such that no plain text data intermediately results from the input datum within the data processor.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. A bus encryption apparatus, comprising:
<claim-text>a data provider implemented to provide an input datum encrypted by an encryption key;</claim-text>
<claim-text>a data processor implemented to process the encrypted input datum in a masked manner using a decryption key as a temporary key to obtain an output datum encrypted by an output key such that the encrypted output datum corresponds to a result, encrypted by the output key, of a predetermined operation on the encrypted input datum having been decrypted by the decryption key, wherein the data processor comprises a first branch data processor implemented to apply a first mathematical or logical operation to the encrypted input datum to obtain first branch data which corresponds to a result, encrypted by second branch data, of the predetermined operation on the encrypted input datum having been decrypted by the decryption key, a second branch data processor implemented to apply a second mathematical or logical operation to the decryption key to obtain second branch data, the first mathematical or logical operation and the second mathematical or logical operation being separated from each other in that the first mathematical or logical operation does neither involve the decryption key nor any data derived from the decryption key, and the second mathematical or logical operation does neither depend on the encrypted input datum nor any data derived from the encrypted input datum, and an XOR operator implemented to generate the encrypted output datum by XORing the first branch data, the second branch data and the output key; and</claim-text>
<claim-text>a key stream generator implemented to generate a key stream and to provide the key stream generated to the data provider and the data processor, the data provider being implemented to obtain the encryption key from the key stream, and the data processor being implemented to obtain the decryption key from the key stream such that the encryption key corresponds to the decryption key,</claim-text>
<claim-text>wherein the first branch data processor and the second branch data processor are implemented to execute as a first operation and as a second operation operational steps corresponding to operational steps of a third operation which would be applied to generate second plain text data from first plain text data, wherein the first plain text data would correspond to that data which would correspond to a decryption of the data of the encrypted input data stream by the decryption key and the second plain text data would correspond to a combination of the first branch data and the second branch data.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The bus encryption apparatus according to <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the data processor is configured to process the encrypted input datum in a masked manner using the decryption key as the temporary key such that no plain text data intermediately results from the input datum within the data processor.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. A method for processing data by means of a data-processing apparatus, comprising:
<claim-text>providing an input datum encrypted by an encryption key;</claim-text>
<claim-text>generating a key stream in a predetermined deterministic manner so that the key stream sequentially comprises a decryption key corresponding to the encryption key and an output key; and</claim-text>
<claim-text>processing the encrypted input datum using the decryption key as a temporary key to obtain an output datum encrypted by the output key such that the encrypted output datum corresponds to a result, encrypted by the output key, of a predetermined operation on the encrypted input datum having been decrypted by the decryption key, wherein the processing comprises
<claim-text>applying a first mathematical or logical operation to the encrypted input datum to obtain first branch data which corresponds to a result, encrypted by second branch data, of the predetermined operation on the encrypted input datum having been decrypted by the decryption key,</claim-text>
<claim-text>applying a second mathematical or logical operation to the decryption key to obtain the second branch data, the first mathematical or logical operation and the second mathematical or logical operation being separated from each other in that the first mathematical or logical operation does neither involve the decryption key nor any data derived from the decryption key, and the second mathematical or logical operation does neither depend on the encrypted input datum nor any data derived from the encrypted input datum,</claim-text>
<claim-text>generating the encrypted output datum by XORing the first branch data, the second branch data and the output key; and</claim-text>
<claim-text>executing as a first operation and as a second operation operational steps corresponding to operational steps of a third operation which would be applied to generate second plain text data from first plain text data, wherein the first plain text data would correspond to that data which would correspond to a decryption of the data of the encrypted input data stream by the decryption key and the second plain text data would correspond to a combination of the first branch data and the second branch data.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. A non-transitory computer-readable medium having stored thereon a computer program comprising a program code for performing a method for processing data by means of a data-processing apparatus, comprising:
<claim-text>providing an input datum encrypted by an encryption key;</claim-text>
<claim-text>generating a key stream in a predetermined deterministic manner so that the key stream sequentially comprises a decryption key corresponding to the encryption key and an output key; and</claim-text>
<claim-text>processing the encrypted input datum using the decryption key as a temporary key to obtain an output datum encrypted by the output key such that the encrypted output datum corresponds to a result, encrypted by the output key, of a predetermined operation on the encrypted input datum having been decrypted by the decryption key, the processing comprising
<claim-text>applying a first mathematical or logical operation to the encrypted input datum to obtain first branch data which corresponds to a result, encrypted by second branch data, of the predetermined operation on the encrypted input datum having been decrypted by the decryption key,</claim-text>
<claim-text>applying a second mathematical or logical operation to the decryption key to obtain the second branch data, the first mathematical or logical operation and the second mathematical or logical operation being separated from each other in that the first mathematical or logical operation does neither involve the decryption key nor any data derived from the decryption key, and the second mathematical or logical operation does neither depend on the encrypted input datum nor any data derived from the encrypted input datum,</claim-text>
<claim-text>generating the encrypted output datum by XORing the first branch data, the second branch data and the output key, when the computer program runs on a computer, and</claim-text>
<claim-text>executing as a first operation and as a second operation operational steps corresponding to operational steps of a third operation which would be applied to generate second plain text data from first plain text data, wherein the first plain text data would correspond to that data which would correspond to a decryption of the data of the encrypted input data stream by the decryption key and the second plain text data would correspond to a combination of the first branch data and the second branch data.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. A data-processing apparatus, comprising:
<claim-text>data providing means for providing an input datum encrypted by an encryption key;</claim-text>
<claim-text>a key stream generating means for generating a key stream in a predetermined deterministic manner such that the key stream comprises a decryption key corresponding to the encryption key; and</claim-text>
<claim-text>a data processing means for processing the encrypted input datum in a masked manner using the decryption key as a temporary key to obtain an output datum encrypted by an output key such that the encrypted output datum corresponds to a result, encrypted by the output key, of a predetermined operation on the encrypted input datum having been decrypted by the decryption key, wherein the data processing means comprises
<claim-text>a first branch data processor implemented to apply a first mathematical or logical operation to the encrypted input datum to obtain first branch data which corresponds to a result, encrypted by second branch data, of the predetermined operation on the encrypted input datum having been decrypted by the decryption key, and</claim-text>
<claim-text>a second branch data processor implemented to apply a second mathematical or logical operation to the decryption key to obtain the second branch data, the first mathematical or logical operation and the second mathematical or logical operation being separated from each other in that the first mathematical or logical operation does neither involve the decryption key nor any data derived from the decryption key, and the second mathematical or logical operation does neither depend on the encrypted input datum nor any data derived from the encrypted input datum; and</claim-text>
<claim-text>an XOR operator implemented to generate the encrypted output datum by XORing the first branch data, the second branch data and the output key,</claim-text>
<claim-text>wherein the first branch data processor and the second branch data processor are implemented to execute as a first operation and as a second operation operational steps corresponding to operational steps of a third operation which would be applied to generate second plain text data from first plain text data, wherein the first plain text data would correspond to that data which would correspond to a decryption of the data of the encrypted input data stream by the decryption key and the second plain text data would correspond to a combination of the first branch data and the second branch data.</claim-text>
</claim-text>
</claim-text>
</claim>
</claims>
</us-patent-grant>

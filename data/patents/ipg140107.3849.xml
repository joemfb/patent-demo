<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08624916-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08624916</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>13854274</doc-number>
<date>20130401</date>
</document-id>
</application-reference>
<us-application-series-code>13</us-application-series-code>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>T</subclass>
<main-group>1</main-group>
<subgroup>00</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>13</main-group>
<subgroup>00</subgroup>
<symbol-position>L</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>09</class>
<subclass>G</subclass>
<main-group>5</main-group>
<subgroup>36</subgroup>
<symbol-position>L</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>12</main-group>
<subgroup>00</subgroup>
<symbol-position>L</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>15</main-group>
<subgroup>00</subgroup>
<symbol-position>L</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>9</main-group>
<subgroup>00</subgroup>
<symbol-position>L</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>K</subclass>
<main-group>9</main-group>
<subgroup>60</subgroup>
<symbol-position>L</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>H</section>
<class>04</class>
<subclass>N</subclass>
<main-group>1</main-group>
<subgroup>46</subgroup>
<symbol-position>L</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>03</class>
<subclass>F</subclass>
<main-group>3</main-group>
<subgroup>08</subgroup>
<symbol-position>L</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>345589</main-classification>
<further-classification>345522</further-classification>
<further-classification>345530</further-classification>
<further-classification>345538</further-classification>
<further-classification>345545</further-classification>
<further-classification>345556</further-classification>
<further-classification>382305</further-classification>
<further-classification>382307</further-classification>
<further-classification>711  1</further-classification>
<further-classification>711100</further-classification>
<further-classification>711155</further-classification>
<further-classification>712  1</further-classification>
<further-classification>712205</further-classification>
<further-classification>712223</further-classification>
<further-classification>712225</further-classification>
<further-classification>358518</further-classification>
<further-classification>358524</further-classification>
</classification-national>
<invention-title id="d2e43">Processing global atomic operations using the bending unit datapath</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>5826089</doc-number>
<kind>A</kind>
<name>Ireton</name>
<date>19981000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717146</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>5940311</doc-number>
<kind>A</kind>
<name>Dao et al.</name>
<date>19990800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>708204</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>6075942</doc-number>
<kind>A</kind>
<name>Cartwright, Jr.</name>
<date>20000600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717138</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>8108610</doc-number>
<kind>B1</kind>
<name>Glasco et al.</name>
<date>20120100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>711118</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>8135926</doc-number>
<kind>B1</kind>
<name>Glasco et al.</name>
<date>20120300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>711155</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>8233004</doc-number>
<kind>B1</kind>
<name>Molnar et al.</name>
<date>20120700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>345581</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>8411103</doc-number>
<kind>B1</kind>
<name>Kulshrestha et al.</name>
<date>20130400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>345589</main-classification></classification-national>
</us-citation>
</us-references-cited>
<number-of-claims>16</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>345428</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>345581</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>345589</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>345501</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>345519</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>345522</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>345530</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>345538-539</main-classification>
<additional-info>unstructured</additional-info>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>345543</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>345555-557</main-classification>
<additional-info>unstructured</additional-info>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>345561</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>345564-565</main-classification>
<additional-info>unstructured</additional-info>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>345630</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>700  1</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>700  7</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>711  1</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>711  3</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>711100</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>711118</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>711125</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>711155</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>711200</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>708231-236</main-classification>
<additional-info>unstructured</additional-info>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>712  1</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>712 16- 18</main-classification>
<additional-info>unstructured</additional-info>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>712 25</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>712 27- 28</main-classification>
<additional-info>unstructured</additional-info>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>712200</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>712205</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>712214</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>712220-226</main-classification>
<additional-info>unstructured</additional-info>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>358515-519</main-classification>
<additional-info>unstructured</additional-info>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>358524-525</main-classification>
<additional-info>unstructured</additional-info>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>382162</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>382167</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>382305-307</main-classification>
<additional-info>unstructured</additional-info>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>7</number-of-drawing-sheets>
<number-of-figures>7</number-of-figures>
</figures>
<us-related-documents>
<division>
<relation>
<parent-doc>
<document-id>
<country>US</country>
<doc-number>12569743</doc-number>
<date>20090929</date>
</document-id>
<parent-grant-document>
<document-id>
<country>US</country>
<doc-number>8411103</doc-number>
</document-id>
</parent-grant-document>
</parent-doc>
<child-doc>
<document-id>
<country>US</country>
<doc-number>13854274</doc-number>
</document-id>
</child-doc>
</relation>
</division>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20130293564</doc-number>
<kind>A1</kind>
<date>20131107</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only" applicant-authority-category="assignee">
<addressbook>
<orgname>NVIDIA Corporation</orgname>
<address>
<city>Santa Clara</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Kulshrestha</last-name>
<first-name>Narayan</first-name>
<address>
<city>Fremont</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Dreyer</last-name>
<first-name>Adam Paul</first-name>
<address>
<city>Portland</city>
<state>OR</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="003" designation="us-only">
<addressbook>
<last-name>Walker</last-name>
<first-name>Chad D.</first-name>
<address>
<city>San Jose</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="004" designation="us-only">
<addressbook>
<last-name>Bastos</last-name>
<first-name>Rui M.</first-name>
<address>
<city>Porto Alegra</city>
<country>BR</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Patterson &#x26; Sheridan, L.L.P.</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>Nvidia Corporation</orgname>
<role>02</role>
<address>
<city>Santa Clara</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Sajous</last-name>
<first-name>Wesner</first-name>
<department>2677</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">One embodiment of the invention sets forth a CROP configured to perform both color raster operations and atomic transactions. Upon receiving an atomic transaction, the distribution unit within the CROP transmits a read request to the L2 cache for retrieving the destination operand. The distribution unit also transmits the source operands and the operation code to the latency buffer for storage until the destination operand is retrieved from the L2 cache. The processing pipeline transmits the operation code, the source and destination operands and an atomic flag to the blend unit for processing. The blend unit performs the atomic transaction on the source and destination operands based on the operation code and returns the result of the atomic transaction to the processing pipeline for storage in the internal cache. The processing pipeline writes the result of the atomic transaction to the L2 cache for storage at the memory location associated with the atomic transaction.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="234.95mm" wi="153.08mm" file="US08624916-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="256.37mm" wi="187.11mm" file="US08624916-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="259.33mm" wi="181.53mm" file="US08624916-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="210.90mm" wi="192.79mm" file="US08624916-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="211.50mm" wi="144.61mm" file="US08624916-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="225.38mm" wi="189.15mm" orientation="landscape" file="US08624916-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="231.39mm" wi="158.75mm" file="US08624916-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="215.48mm" wi="114.64mm" file="US08624916-20140107-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?RELAPP description="Other Patent Relations" end="lead"?>
<heading id="h-0001" level="1">CROSS-REFERENCE TO RELATED APPLICATIONS</heading>
<p id="p-0002" num="0001">This application is a divisional of co-pending U.S. patent application Ser. No. 12/569,743, filed Sep. 29, 2009, which is hereby incorporated herein by reference.</p>
<?RELAPP description="Other Patent Relations" end="tail"?>
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0002" level="1">BACKGROUND OF THE INVENTION</heading>
<p id="p-0003" num="0002">1. Field of the Invention</p>
<p id="p-0004" num="0003">The present invention relates generally to the field of graphics processing and, more specifically, to processing global atomic operations using the color raster operations unit (CROP).</p>
<p id="p-0005" num="0004">2. Description of the Related Art</p>
<p id="p-0006" num="0005">A graphics processing unit (GPU) is a specialized processor that is configured to efficiently process complex graphics and other numerical computations. Each GPU has several on-chip hardware components, such as memory caches and logic operations units, configured to efficiently perform the graphics and numerical computations. In typical computing systems, graphics processing and other computationally-intensive operations are off-loaded by the central processing unit (CPU) to the GPU.</p>
<p id="p-0007" num="0006">Operations performed by the GPU often include atomic transactions associated with specific memory locations. An atomic transaction associated with a memory location is a type of read-modify-write (RMW) operation. In an RMW operation, the value stored in the associated memory location is read and modified based on a computation operation and then the modified value is written back at the associated memory location. When the atomic transaction is in progress, the memory state of the associated memory location is preserved until that atomic transaction is complete.</p>
<p id="p-0008" num="0007">Typically, dedicated hardware units configured only to execute atomic transactions are included in the GPU. However, one drawback of such hardware design is that area on the GPU chip is consumed by each dedicated hardware unit which only executes atomic transactions. Further, the throughput of the atomic transactions is dependent on the number of dedicated hardware units included in the GPU. Therefore, to achieve acceptable throughput of atomic transactions, a large portion of the area available on the GPU chip is required to include several such dedicated hardware units.</p>
<p id="p-0009" num="0008">As the foregoing illustrates, what is needed in the art is a mechanism for efficiently processing atomic transactions without consuming a significant portion of area available on the GPU chip.</p>
<heading id="h-0003" level="1">SUMMARY OF THE INVENTION</heading>
<p id="p-0010" num="0009">One embodiment of the present invention sets forth a method for processing atomic transactions within a processing subsystem configured to perform both color blending operations and atomic transactions. The method includes the steps of receiving an atomic transaction that includes an operation code, one or more source operands and a memory address associated with a memory location within a memory unit that stores a destination operand, retrieving the destination operand from the memory unit, transmitting the operation code, one or more source operands, destination operand and an atomic flag to a processing unit within the processing subsystem, wherein the atomic flag indicates that the operation code is associated with the atomic transaction, processing the one or more source operands and the destination operand based on the operation code to produce an atomic transaction result, and transmitting the atomic transaction result to the memory unit for storage at the memory address included in the atomic transaction.</p>
<p id="p-0011" num="0010">One advantage of the disclosed method is that the hardware units within the CROP that are configured to perform color raster operations, such as blending operations, are also configured to perform atomic transactions. Such a design saves valuable die space since dedicated hardware for processing atomic transactions is not needed</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0012" num="0011">So that the manner in which the above recited features of the present invention can be understood in detail, a more particular description of the invention, briefly summarized above, may be had by reference to embodiments, some of which are illustrated in the appended drawings. It is to be noted, however, that the appended drawings illustrate only typical embodiments of this invention and are therefore not to be considered limiting of its scope, for the invention may admit to other equally effective embodiments.</p>
<p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. 1</figref> is a block diagram illustrating a computer system configured to implement one or more aspects of the present invention;</p>
<p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. 2</figref> is a block diagram of a parallel processing subsystem for the computer system of <figref idref="DRAWINGS">FIG. 1</figref>, according to one embodiment of the present invention;</p>
<p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. 3A</figref> is a block diagram of a GPC within one of the PPUs of <figref idref="DRAWINGS">FIG. 2</figref>, according to one embodiment of the present invention;</p>
<p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. 3B</figref> is a block diagram of a partition unit within one of the PPUs of <figref idref="DRAWINGS">FIG. 2</figref>, according to one embodiment of the present invention;</p>
<p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. 4</figref> is a detailed block diagram of a color raster operations unit (CROP) within the ROP of <figref idref="DRAWINGS">FIG. 3B</figref>, according to one embodiment of the present invention; and</p>
<p id="p-0018" num="0017"><figref idref="DRAWINGS">FIGS. 5A and 5B</figref> set forth a flow diagram of methods steps for processing an atomic transaction within the CROP, according to one embodiment of the present invention.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0005" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0019" num="0018">In the following description, numerous specific details are set forth to provide a more thorough understanding of the present invention. However, it will be apparent to one of skill in the art that the present invention may be practiced without one or more of these specific details. In other instances, well-known features have not been described in order to avoid obscuring the present invention.</p>
<heading id="h-0006" level="1">System Overview</heading>
<p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. 1</figref> is a block diagram illustrating a computer system <b>100</b> configured to implement one or more aspects of the present invention. Computer system <b>100</b> includes a central processing unit (CPU) <b>102</b> and a system memory <b>104</b> communicating via a bus path through a memory bridge <b>105</b>. Memory bridge <b>105</b> may be integrated into CPU <b>102</b> as shown in <figref idref="DRAWINGS">FIG. 1</figref>. Alternatively, memory bridge <b>105</b>, may be a conventional device, e.g., a Northbridge chip, that is connected via a bus to CPU <b>102</b>. Memory bridge <b>105</b> is connected via communication path <b>106</b> (e.g., a HyperTransport link) to an I/O (input/output) bridge <b>107</b>. I/O bridge <b>107</b>, which may be, e.g., a Southbridge chip, receives user input from one or more user input devices <b>108</b> (e.g., keyboard, mouse) and forwards the input to CPU <b>102</b> via path <b>106</b> and memory bridge <b>105</b>. A parallel processing subsystem <b>112</b> is coupled to memory bridge <b>105</b> via a bus or other communication path <b>113</b> (e.g., a PCI Express, Accelerated Graphics Port, or HyperTransport link); in one embodiment parallel processing subsystem <b>112</b> is a graphics subsystem that delivers pixels to a display device <b>110</b> (e.g., a conventional CRT or LCD based monitor). A system disk <b>114</b> is also connected to I/O bridge <b>107</b>. A switch <b>116</b> provides connections between I/O bridge <b>107</b> and other components such as a network adapter <b>118</b> and various add-in cards <b>120</b> and <b>121</b>. Other components (not explicitly shown), including USB or other port connections, CD drives, DVD drives, film recording devices, and the like, may also be connected to I/O bridge <b>107</b>. Communication paths interconnecting the various components in <figref idref="DRAWINGS">FIG. 1</figref> may be implemented using any suitable protocols, such as PCI (Peripheral Component Interconnect), PCI-Express (PCI-E), AGP (Accelerated Graphics Port), HyperTransport, or any other bus or point-to-point communication protocol(s), and connections between different devices may use different protocols as is known in the art.</p>
<p id="p-0021" num="0020">In one embodiment, the parallel processing subsystem <b>112</b> incorporates circuitry optimized for graphics and video processing, including, for example, video output circuitry, and constitutes a graphics processing unit (GPU). In another embodiment, the parallel processing subsystem <b>112</b> incorporates circuitry optimized for general purpose processing, while preserving the underlying computational architecture, described in greater detail herein. In yet another embodiment, the parallel processing subsystem <b>112</b> may be integrated with one or more other system elements, such as the memory bridge <b>105</b>, CPU <b>102</b>, and I/O bridge <b>107</b> to form a system on chip (SoC).</p>
<p id="p-0022" num="0021">It will be appreciated that the system shown herein is illustrative and that variations and modifications are possible. The connection topology, including the number and arrangement of bridges, may be modified as desired. For instance, in some embodiments, system memory <b>104</b> is connected to CPU <b>102</b> directly rather than through a bridge, and other devices communicate with system memory <b>104</b> via memory bridge <b>105</b> and CPU <b>102</b>. In other alternative topologies, parallel processing subsystem <b>112</b> is connected to I/O bridge <b>107</b> or directly to CPU <b>102</b>, rather than to memory bridge <b>105</b>. In still other embodiments, one or more of CPU <b>102</b>, I/O bridge <b>107</b>, parallel processing subsystem <b>112</b>, and memory bridge <b>105</b> may be integrated into one or more chips. The particular components shown herein are optional; for instance, any number of add-in cards or peripheral devices might be supported. In some embodiments, switch <b>116</b> is eliminated, and network adapter <b>118</b> and add-in cards <b>120</b>, <b>121</b> connect directly to I/O bridge <b>107</b>.</p>
<p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. 2</figref> illustrates a parallel processing subsystem <b>112</b>, according to one embodiment of the present invention. As shown, parallel processing subsystem <b>112</b> includes one or more parallel processing units (PPUs) <b>202</b>, each of which is coupled to a local parallel processing (PP) memory <b>204</b>. In general, a parallel processing subsystem includes a number U of PPUs, where U&#x2267;1. (Herein, multiple instances of like objects are denoted with reference numbers identifying the object and parenthetical numbers identifying the instance where needed.) PPUs <b>202</b> and parallel processing memories <b>204</b> may be implemented using one or more integrated circuit devices, such as programmable processors, application specific integrated circuits (ASICs), or memory devices, or in any other technically feasible fashion.</p>
<p id="p-0024" num="0023">Referring again to <figref idref="DRAWINGS">FIG. 1</figref>, in some embodiments, some or all of PPUs <b>202</b> in parallel processing subsystem <b>112</b> are graphics processors with rendering pipelines that can be configured to perform various tasks related to generating pixel data from graphics data supplied by CPU <b>102</b> and/or system memory <b>104</b>, interacting with local parallel processing memory <b>204</b> (which can be used as graphics memory including, e.g., a conventional frame buffer) to store and update pixel data, delivering pixel data to display device <b>110</b>, and the like. In some embodiments, parallel processing subsystem <b>112</b> may include one or more PPUs <b>202</b> that operate as graphics processors and one or more other PPUs <b>202</b> that are used for general-purpose computations. The PPUs may be identical or different, and each PPU may have its own dedicated parallel processing memory device(s) or no dedicated parallel processing memory device(s). One or more PPUs <b>202</b> may output data to display device <b>110</b> or each PPU <b>202</b> may output data to one or more display devices <b>110</b>.</p>
<p id="p-0025" num="0024">In operation, CPU <b>102</b> is the master processor of computer system <b>100</b>, controlling and coordinating operations of other system components. In particular, CPU <b>102</b> issues commands that control the operation of PPUs <b>202</b>. In some embodiments, CPU <b>102</b> writes a stream of commands for each PPU <b>202</b> to a command buffer (not explicitly shown in either <figref idref="DRAWINGS">FIG. 1</figref> or <figref idref="DRAWINGS">FIG. 2</figref>) that may be located in system memory <b>104</b>, parallel processing memory <b>204</b>, or another storage location accessible to both CPU <b>102</b> and PPU <b>202</b>. PPU <b>202</b> reads the command stream from the command buffer and then executes commands asynchronously relative to the operation of CPU <b>102</b>. CPU <b>102</b> may also create data buffers that PPUs <b>202</b> may read in response to commands in the command buffer. Each command and data buffer may be read by each of PPUs <b>202</b>.</p>
<p id="p-0026" num="0025">Referring back now to <figref idref="DRAWINGS">FIG. 2</figref>, each PPU <b>202</b> includes an I/O (input/output) unit <b>205</b> that communicates with the rest of computer system <b>100</b> via communication path <b>113</b>, which connects to memory bridge <b>105</b> (or, in one alternative embodiment, directly to CPU <b>102</b>). The connection of PPU <b>202</b> to the rest of computer system <b>100</b> may also be varied. In some embodiments, parallel processing subsystem <b>112</b> is implemented as an add-in card that can be inserted into an expansion slot of computer system <b>100</b>. In other embodiments, a PPU <b>202</b> can be integrated on a single chip with a bus bridge, such as memory bridge <b>105</b> or I/O bridge <b>107</b>. In still other embodiments, some or all elements of PPU <b>202</b> may be integrated on a single chip with CPU <b>102</b>.</p>
<p id="p-0027" num="0026">In one embodiment, communication path <b>113</b> is a PCI-Express link, in which dedicated lanes are allocated to each PPU <b>202</b>, as is known in the art. Other communication paths may also be used. An I/O unit <b>205</b> generates packets (or other signals) for transmission on communication path <b>113</b> and also receives all incoming packets (or other signals) from communication path <b>113</b>, directing the incoming packets to appropriate components of PPU <b>202</b>. For example, commands related to processing tasks may be directed to a host interface <b>206</b>, while commands related to memory operations (e.g., reading from or writing to parallel processing memory <b>204</b>) may be directed to a memory crossbar unit <b>210</b>. Host interface <b>206</b> reads each command buffer and outputs the work specified by the command buffer to a front end <b>212</b>.</p>
<p id="p-0028" num="0027">Each PPU <b>202</b> advantageously implements a highly parallel processing architecture. As shown in detail, PPU <b>202</b>(<b>0</b>) includes a processing cluster array <b>230</b> that includes a number C of general processing clusters (GPCs) <b>208</b>, where C&#x2267;1. Each GPC <b>208</b> is capable of executing a large number (e.g., hundreds or thousands) of threads concurrently, where each thread is an instance of a program. In various applications, different GPCs <b>208</b> may be allocated for processing different types of programs or for performing different types of computations. For example, in a graphics application, a first set of GPCs <b>208</b> may be allocated to perform tessellation operations and to produce primitive topologies for patches, and a second set of GPCs <b>208</b> may be allocated to perform tessellation shading to evaluate patch parameters for the primitive topologies and to determine vertex positions and other per-vertex attributes. The allocation of GPCs <b>208</b> may vary depending on the workload arising for each type of program or computation. Alternatively, GPCs <b>208</b> may be allocated to perform processing tasks using a time-slice scheme to switch between different processing tasks.</p>
<p id="p-0029" num="0028">GPCs <b>208</b> receive processing tasks to be executed via a work distribution unit <b>200</b>, which receives commands defining processing tasks from front end unit <b>212</b>. Processing tasks include pointers to data to be processed, e.g., surface (patch) data, primitive data, vertex data, and/or pixel data, as well as state parameters and commands defining how the data is to be processed (e.g., what program is to be executed). Work distribution unit <b>200</b> may be configured to fetch the pointers corresponding to the processing tasks, may receive the pointers from front end <b>212</b>, or may receive the data directly from front end <b>212</b>. In some embodiments, indices specify the location of the data in an array. Front end <b>212</b> ensures that GPCs <b>208</b> are configured to a valid state before the processing specified by the command buffers is initiated.</p>
<p id="p-0030" num="0029">When PPU <b>202</b> is used for graphics processing, for example, the processing workload for each patch is divided into approximately equal sized tasks to enable distribution of the tessellation processing to multiple GPCs <b>208</b>. A work distribution unit <b>200</b> may be configured to output tasks at a frequency capable of providing tasks to multiple GPCs <b>208</b> for processing. In some embodiments of the present invention, portions of GPCs <b>208</b> are configured to perform different types of processing. For example a first portion may be configured to perform vertex shading and topology generation, a second portion may be configured to perform tessellation and geometry shading, and a third portion may be configured to perform pixel shading in screen space to produce a rendered image. The ability to allocate portions of GPCs <b>208</b> for performing different types of processing tasks efficiently accommodates any expansion and contraction of data produced by those different types of processing tasks. Intermediate data produced by GPCs <b>208</b> may be buffered to allow the intermediate data to be transmitted between GPCs <b>208</b> with minimal stalling in cases where the rate at which data is accepted by a downstream GPC <b>208</b> lags the rate at which data is produced by an upstream GPC <b>208</b>.</p>
<p id="p-0031" num="0030">Memory interface <b>214</b> may be partitioned into a number D of memory partition units that are each coupled to a portion of parallel processing memory <b>204</b>, where D&#x2267;1. Each portion of parallel processing memory <b>204</b> generally includes one or more memory devices (e.g DRAM <b>220</b>). Persons skilled in the art will appreciate that DRAM <b>220</b> may be replaced with other suitable storage devices and can be of generally conventional design. A detailed description is therefore omitted. Render targets, such as frame buffers or texture maps may be stored across DRAMs <b>220</b>, allowing partition units <b>215</b> to write portions of each render target in parallel to efficiently use the available bandwidth of parallel processing memory <b>204</b>.</p>
<p id="p-0032" num="0031">Any one of GPCs <b>208</b> may process data to be written to any of the DRAMs <b>220</b> within parallel processing memory <b>204</b>. Crossbar unit <b>210</b> is configured to route the output of each GPC <b>208</b> to the input of any partition unit <b>215</b> or to another GPC <b>208</b> for further processing. GPCs <b>208</b> communicate with memory interface <b>214</b> through crossbar unit <b>210</b> to read from or write to various external memory devices. In one embodiment, crossbar unit <b>210</b> has a connection to memory interface <b>214</b> to communicate with I/O unit <b>205</b>, as well as a connection to local parallel processing memory <b>204</b>, thereby enabling the processing cores within the different GPCs <b>208</b> to communicate with system memory <b>104</b> or other memory that is not local to PPU <b>202</b>. Crossbar unit <b>210</b> may use virtual channels to separate traffic streams between the GPCs <b>208</b> and partition units <b>215</b>.</p>
<p id="p-0033" num="0032">Again, GPCs <b>208</b> can be programmed to execute processing tasks relating to a wide variety of applications, including but not limited to, linear and nonlinear data transforms, filtering of video and/or audio data, modeling operations (e.g., applying laws of physics to determine position, velocity and other attributes of objects), image rendering operations (e.g., tessellation shader, vertex shader, geometry shader, and/or pixel shader programs), and so on. PPUs <b>202</b> may transfer data from system memory <b>104</b> and/or local parallel processing memories <b>204</b> into internal (on-chip) memory, process the data, and write result data back to system memory <b>104</b> and/or local parallel processing memories <b>204</b>, where such data can be accessed by other system components, including CPU <b>102</b> or another parallel processing subsystem <b>112</b>.</p>
<p id="p-0034" num="0033">A PPU <b>202</b> may be provided with any amount of local parallel processing memory <b>204</b>, including no local memory, and may use local memory and system memory in any combination. For instance, a PPU <b>202</b> can be a graphics processor in a unified memory architecture (UMA) embodiment. In such embodiments, little or no dedicated graphics (parallel processing) memory would be provided, and PPU <b>202</b> would use system memory exclusively or almost exclusively. In UMA embodiments, a PPU <b>202</b> may be integrated into a bridge chip or processor chip or provided as a discrete chip with a high-speed link (e.g., PCI-Express) connecting the PPU <b>202</b> to system memory via a bridge chip or other communication means.</p>
<p id="p-0035" num="0034">As noted above, any number of PPUs <b>202</b> can be included in a parallel processing subsystem <b>112</b>. For instance, multiple PPUs <b>202</b> can be provided on a single add-in card, or multiple add-in cards can be connected to communication path <b>113</b>, or one or more PPUs <b>202</b> can be integrated into a bridge chip. PPUs <b>202</b> in a multi-PPU system may be identical to or different from one another. For instance, different PPUs <b>202</b> might have different numbers of processing cores, different amounts of local parallel processing memory, and so on. Where multiple PPUs <b>202</b> are present, those PPUs may be operated in parallel to process data at a higher throughput than is possible with a single PPU <b>202</b>. Systems incorporating one or more PPUs <b>202</b> may be implemented in a variety of configurations and form factors, including desktop, laptop, or handheld personal computers, servers, workstations, game consoles, embedded systems, and the like.</p>
<heading id="h-0007" level="1">Processing Cluster Array Overview</heading>
<p id="p-0036" num="0035"><figref idref="DRAWINGS">FIG. 3A</figref> is a block diagram of a GPC <b>208</b> within one of the PPUs <b>202</b> of <figref idref="DRAWINGS">FIG. 2</figref>, according to one embodiment of the present invention. Each GPC <b>208</b> may be configured to execute a large number of threads in parallel, where the term &#x201c;thread&#x201d; refers to an instance of a particular program executing on a particular set of input data. In some embodiments, single-instruction, multiple-data (SIMD) instruction issue techniques are used to support parallel execution of a large number of threads without providing multiple independent instruction units. In other embodiments, single-instruction, multiple-thread (SIMT) techniques are used to support parallel execution of a large number of generally synchronized threads, using a common instruction unit configured to issue instructions to a set of processing engines within each one of the GPCs <b>208</b>. Unlike a SIMD execution regime, where all processing engines typically execute identical instructions, SIMT execution allows different threads to more readily follow divergent execution paths through a given thread program. Persons skilled in the art will understand that a SIMD processing regime represents a functional subset of a SIMT processing regime.</p>
<p id="p-0037" num="0036">In graphics applications, a GPC <b>208</b> may be configured to implement a primitive engine for performing screen space graphics processing functions that may include, but are not limited to primitive setup, rasterization, and z culling. The primitive engine receives a processing task from work distribution unit <b>200</b>, and when the processing task does not require the operations performed by primitive engine, the processing task is passed through the primitive engine to a pipeline manager <b>305</b>. Operation of GPC <b>208</b> is advantageously controlled via a pipeline manager <b>305</b> that distributes processing tasks to streaming multiprocessors (SPMs) <b>310</b>. Pipeline manager <b>305</b> may also be configured to control a work distribution crossbar <b>330</b> by specifying destinations for processed data output by SPMs <b>310</b>.</p>
<p id="p-0038" num="0037">In one embodiment, each GPC <b>208</b> includes a number M of SPMs <b>310</b>, where M&#x2267;1, each SPM <b>310</b> configured to process one or more thread groups. The series of instructions transmitted to a particular GPC <b>208</b> constitutes a thread, as previously defined herein, and the collection of a certain number of concurrently executing threads across the parallel processing engines (not shown) within an SPM <b>310</b> is referred to herein as a &#x201c;thread group.&#x201d; As used herein, a &#x201c;thread group&#x201d; refers to a group of threads concurrently executing the same program on different input data, with each thread of the group being assigned to a different processing engine within an SPM <b>310</b>. A thread group may include fewer threads than the number of processing engines within the SPM <b>310</b>, in which case some processing engines will be idle during cycles when that thread group is being processed. A thread group may also include more threads than the number of processing engines within the SPM <b>310</b>, in which case processing will take place over multiple clock cycles. Since each SPM <b>310</b> can support up to G thread groups concurrently, it follows that up to G&#xd7;M thread groups can be executing in GPC <b>208</b> at any given time.</p>
<p id="p-0039" num="0038">Additionally, a plurality of related thread groups may be active (in different phases of execution) at the same time within an SPM <b>310</b>. This collection of thread groups is referred to herein as a &#x201c;cooperative thread array&#x201d; (&#x201c;CTA&#x201d;). The size of a particular CTA is equal to m*k, where k is the number of concurrently executing threads in a thread group and is typically an integer multiple of the number of parallel processing engines within the SPM <b>310</b>, and m is the number of thread groups simultaneously active within the SPM <b>310</b>. The size of a CTA is generally determined by the programmer and the amount of hardware resources, such as memory or registers, available to the CTA.</p>
<p id="p-0040" num="0039">An exclusive local address space is available to each thread, and a shared per-CTA address space is used to pass data between threads within a CTA. Data stored in the per-thread local address space and per-CTA address space is stored in L1 cache <b>320</b>, and an eviction policy may be used to favor keeping the data in L1 cache <b>320</b>. Each SPM <b>310</b> uses space in a corresponding L1 cache <b>320</b> that is used to perform load and store operations. Each SPM <b>310</b> also has access to L2 caches within the partition units <b>215</b> that are shared among all GPCs <b>208</b> and may be used to transfer data between threads. Finally, SPMs <b>310</b> also have access to off-chip &#x201c;global&#x201d; memory, which can include, e.g., parallel processing memory <b>204</b> and/or system memory <b>104</b>. An L2 cache may be used to store data that is written to and read from global memory. It is to be understood that any memory external to PPU <b>202</b> may be used as global memory.</p>
<p id="p-0041" num="0040">Also, each SPM <b>310</b> advantageously includes an identical set of functional units (e.g., arithmetic logic units, etc.) that may be pipelined, allowing a new instruction to be issued before a previous instruction has finished, as is known in the art. Any combination of functional units may be provided. In one embodiment, the functional units support a variety of operations including integer and floating point arithmetic (e.g., addition and multiplication), comparison operations, Boolean operations (AND, OR, XOR), bit-shifting, and computation of various algebraic functions (e.g., planar interpolation, trigonometric, exponential, and logarithmic functions, etc.); and the same functional-unit hardware can be leveraged to perform different operations.</p>
<p id="p-0042" num="0041">Each GPC <b>208</b> may include a memory management unit (MMU) <b>328</b> that is configured to map virtual addresses into physical addresses. In other embodiments, MMU(s) <b>328</b> may reside within the memory interface <b>214</b>. The MMU <b>328</b> includes a set of page table entries (PTEs) used to map a virtual address to a physical address of a tile and optionally a cache line index. The physical address is processed to distribute surface data access locality to allow efficient request interleaving among partition units. The cache line index may be used to determine whether of not a request for a cache line is a hit or miss.</p>
<p id="p-0043" num="0042">In graphics applications, a GPC <b>208</b> may be configured such that each SPM <b>310</b> is coupled to a texture unit <b>315</b> for performing texture mapping operations, e.g., determining texture sample positions, reading texture data, and filtering the texture data. Texture data is read via memory interface <b>214</b> and is fetched from an L2 cache, parallel processing memory <b>204</b>, or system memory <b>104</b>, as needed. Texture unit <b>315</b> may be configured to store the texture data in an internal cache. In some embodiments, texture unit <b>315</b> is coupled to L1 cache <b>320</b>, and texture data is stored in L1 cache <b>320</b>. Each SPM <b>310</b> outputs processed tasks to work distribution crossbar <b>330</b> in order to provide the processed task to another GPC <b>208</b> for further processing or to store the processed task in an L2 cache, parallel processing memory <b>204</b>, or system memory <b>104</b> via crossbar unit <b>210</b>. A preROP (pre-raster operations) <b>325</b> is configured to receive data from SPM <b>310</b>, direct data to ROP units within partition units <b>215</b>, and perform optimizations for color blending, organize pixel color data, and perform address translations.</p>
<p id="p-0044" num="0043">It will be appreciated that the core architecture described herein is illustrative and that variations and modifications are possible. Any number of processing engines, e.g., primitive engines, SPMs <b>310</b>, texture units <b>315</b>, or preROPs <b>325</b> may be included within a GPC <b>208</b>. Further, while only one GPC <b>208</b> is shown, a PPU <b>202</b> may include any number of GPCs <b>208</b> that are advantageously functionally similar to one another so that execution behavior does not depend on which GPC <b>208</b> receives a particular processing task. Further, each GPC <b>208</b> advantageously operates independently of other GPCs <b>208</b> using separate and distinct processing engines, L1 caches <b>320</b>, and so on.</p>
<p id="p-0045" num="0044"><figref idref="DRAWINGS">FIG. 3B</figref> is a block diagram of a partition unit <b>215</b> within one of the PPUs <b>202</b> of <figref idref="DRAWINGS">FIG. 2</figref>, according to one embodiment of the present invention. As shown, partition unit <b>215</b> includes a L2 cache <b>350</b>, a frame buffer (FB) <b>355</b>, and a raster operations unit (ROP) <b>360</b>. L2 cache <b>350</b> is a read/write cache that is configured to perform load and store operations received from crossbar unit <b>210</b> and ROP <b>360</b>. Read misses and urgent writeback requests are output by L2 cache <b>350</b> to FB <b>355</b> for processing. Dirty updates are also sent to FB <b>355</b> for opportunistic processing. FB <b>355</b> interfaces directly with DRAM <b>220</b>, outputting read and write requests and receiving data read from DRAM <b>220</b>.</p>
<p id="p-0046" num="0045">In graphics applications, ROP <b>360</b> is a processing unit that performs raster operations, such as stencil, z test, blending, and the like, and outputs pixel data as processed graphics data for storage in graphics memory. In some embodiments of the present invention, ROP <b>360</b> is included within each GPC <b>208</b> instead of partition unit <b>215</b>, and pixel read and write requests are transmitted over crossbar unit <b>210</b> instead of pixel fragment data.</p>
<p id="p-0047" num="0046">The processed graphics data may be displayed on display device <b>110</b> or routed for further processing by CPU <b>102</b> or by one of the processing entities within parallel processing subsystem <b>112</b>. Each partition unit <b>215</b> includes a ROP <b>360</b> in order to distribute processing of the raster operations. In some embodiments, ROP <b>360</b> may be configured to compress z or color data that is written to memory and decompress z or color data that is read from memory.</p>
<p id="p-0048" num="0047">Persons skilled in the art will understand that the architecture described in <figref idref="DRAWINGS">FIGS. 1</figref>, <b>2</b>, <b>3</b>A and <b>3</b>B in no way limits the scope of the present invention and that the techniques taught herein may be implemented on any properly configured processing unit, including, without limitation, one or more CPUs, one or more multi-core CPUs, one or more PPUs <b>202</b>, one or more GPCs <b>208</b>, one or more graphics or special purpose processing units, or the like, without departing the scope of the present invention.</p>
<heading id="h-0008" level="1">Processing Atomic Operations within the CROP</heading>
<p id="p-0049" num="0048"><figref idref="DRAWINGS">FIG. 4</figref> is a detailed block diagram of a color raster operations unit (CROP) <b>402</b> within the ROP <b>360</b> of <figref idref="DRAWINGS">FIG. 3B</figref>, according to one embodiment of the present invention. As shown, the ROP <b>360</b> includes the CROP <b>402</b> and the ROP data manager <b>404</b>, and the CROP <b>402</b> includes a distribution unit <b>406</b>, a latency buffer <b>408</b>, a color processing pipeline <b>410</b> that includes an internal cache <b>412</b> and state configuration <b>413</b>, a decompression unit <b>414</b>, a compression unit <b>416</b> and a blend unit <b>418</b>. In operation, the CROP <b>402</b> performs both color raster operations and atomic transactions based on commands and data received from the ROP data manager <b>404</b>.</p>
<p id="p-0050" num="0049">When performing color raster operations, the CROP <b>402</b> performs single source pixel blending or dual source pixel blending. For single source pixel blending, the ROP data manager <b>404</b> transmits one unit of source pixel data to the distribution unit <b>406</b>. The distribution unit <b>406</b> first determines whether additional pixel data (referred to herein as &#x201c;destination pixel data&#x201d;) needed to perform the color raster operations on the source pixel data is stored in the internal cache <b>412</b>. If the destination pixel data is available in the internal cache <b>412</b>, then the distribution unit <b>406</b> transmits the source pixel data to the color processing pipeline <b>410</b>, which in turn, transmits the source pixel data and the destination pixel data stored in the internal cache <b>412</b> to the blend unit <b>418</b> for processing based on the state configuration <b>413</b>.</p>
<p id="p-0051" num="0050">The blend unit <b>418</b> performs the single source pixel blending operation on the source pixel data and the destination pixel data. The blending operations performed by the blend unit <b>418</b> are represented by the following blending equation:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>source_color&#xd7;source_blending_coefficient+dest_color&#xd7;dest_blending_coefficient&#x2003;&#x2003;(i)<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
where the source_color and dest_color are included in the source pixel data and the destination pixel data, respectively. The blend unit <b>418</b> transmits the result of the blending operation to the color processing pipeline <b>410</b> for storage in the internal cache <b>412</b>. The color processing pipeline <b>410</b> then transmits the result of the blending operation to the compression unit <b>416</b>. The compression unit <b>416</b> optionally compresses the result of the blending operation based on a pre-determined compression format and transmits the compressed result to the L2 cache unit <b>350</b> for storage.
</p>
<p id="p-0052" num="0051">If the destination pixel data is not available in the internal cache <b>412</b>, then the distribution unit <b>406</b> first transmits a read request to the L2 cache unit <b>350</b> requesting the destination pixel data. The distribution unit <b>406</b> then stores the source pixel data in the latency buffer <b>408</b> until the destination pixel data is retrieved from the L2 cache unit <b>350</b>. The L2 cache unit <b>350</b> returns the requested destination pixel data to the decompression unit <b>414</b> that optionally decompresses the requested destination pixel data based on a pre-determined compression format. The decompression unit <b>414</b> transmits the decompressed destination pixel data to the color processing pipeline <b>410</b>. Concurrently, the color processing pipeline <b>410</b> retrieves the source pixel data from the latency buffer <b>408</b>. The color processing pipeline <b>410</b> then transmits the source pixel data and destination pixel data to the blend unit <b>418</b> for processing, as previously described herein.</p>
<p id="p-0053" num="0052">For dual source pixel blending, the ROP data manager <b>404</b> transmits two units of source pixel data to the distribution unit <b>406</b>. The dual source pixel blending operation is performed in the same manner as the single source pixel blending operation described above, except that different blending coefficients are applied to source and destination color included in each unit of source or destination pixel data, respectively.</p>
<p id="p-0054" num="0053">The different elements within the CROP <b>402</b> configured to perform color raster operations are also be configured to perform atomic transactions. As is well-known, most atomic transactions are read-modify-write operations where a memory location is read, the value stored in the memory location is processed, and the resulting value is stored in the same memory location, overwriting the value from the memory location. The SPM <b>310</b> transmits two types of atomic transactions, atomic operations and reduction operations, to the ROP data manager <b>404</b> via the L2 cache unit <b>350</b> for processing within the CROP <b>402</b>.</p>
<p id="p-0055" num="0054">An atomic operation transmitted by the SPM <b>310</b> typically includes one or more source data units (referred to herein as &#x201c;source operands&#x201d;), a memory address associated with a memory location in the L2 cache unit <b>350</b> storing a destination data unit (referred to herein as &#x201c;destination operand&#x201d;) and an operation code specifying the type of atomic operation to be performed on the source and destination operands. With an atomic operation the result of the atomic operation is stored at the memory location associated with the memory address and the destination operand is returned to the SPM <b>310</b>. A reduction operation transmitted by the SPM <b>310</b> is similar to an atomic operation except that the destination operand is not returned to the SPM <b>310</b>.</p>
<p id="p-0056" num="0055">Table 1 shows a subset of different types of atomic operations and reduction operations that are transmitted by the SPM <b>310</b> to the ROP data manager <b>404</b> for processing within the CROP <b>402</b>. In Table 1, &#x201c;A&#x201d; represents the destination operand, &#x201c;B&#x201d; and &#x201c;C&#x201d; represent different source operands and &#x201c;D&#x201d; represents the destination operand that is returned to the SPM <b>310</b>.</p>
<p id="p-0057" num="0056">
<tables id="TABLE-US-00001" num="00001">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="1" colwidth="98pt" align="center"/>
<colspec colname="2" colwidth="119pt" align="center"/>
<thead>
<row>
<entry namest="1" nameend="2" rowsep="1">TABLE 1</entry>
</row>
<row>
<entry namest="1" nameend="2" align="center" rowsep="1"/>
</row>
<row>
<entry>Operation Code</entry>
<entry>Function</entry>
</row>
<row>
<entry namest="1" nameend="2" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry>IMIN</entry>
<entry>A = (A &#x3c; B) ? A:B</entry>
</row>
<row>
<entry>IMAX</entry>
<entry>A = (A &#x3e; B) ? A:B</entry>
</row>
<row>
<entry>INC</entry>
<entry>A = (A &#x3e;= B) ? 0:A + 1</entry>
</row>
<row>
<entry>DEC</entry>
<entry>A = (A = 0 &#x2225; A &#x3e; B) ? B:A &#x2212; 1</entry>
</row>
<row>
<entry>IADD</entry>
<entry>A = A + B</entry>
</row>
<row>
<entry>IMUL</entry>
<entry>A = A * B</entry>
</row>
<row>
<entry>IAND</entry>
<entry>A = A &#x26; B</entry>
</row>
<row>
<entry>IOR</entry>
<entry>A = A | B</entry>
</row>
<row>
<entry>IXOR</entry>
<entry>A = A {circumflex over (&#x2009;)} B</entry>
</row>
<row>
<entry>CAS</entry>
<entry>if (A == B):A = C</entry>
</row>
<row>
<entry>EXCH</entry>
<entry>A = B</entry>
</row>
<row>
<entry>GLD_GST</entry>
<entry>if (reduction operation) A = B:D = A</entry>
</row>
<row>
<entry>FADD</entry>
<entry>A = A + B</entry>
</row>
<row>
<entry>FMIN</entry>
<entry>A = (A &#x3c; B) ? A:B</entry>
</row>
<row>
<entry>FMAX</entry>
<entry>A = (A &#x3e; B) ? A:B</entry>
</row>
<row>
<entry>FMUL</entry>
<entry>A = A * B</entry>
</row>
<row>
<entry>Atomic: D = A; A = A gop {B, C}</entry>
<entry>Reduction: A = A gop {B, C}</entry>
</row>
<row>
<entry namest="1" nameend="2" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0058" num="0057">In operation, the ROP data manager <b>404</b> transmits atomic transactions received from the SPM <b>310</b> to the distribution unit <b>406</b>. As with blending operations, the distribution unit <b>406</b> first determines whether the destination operand is available within the internal cache <b>412</b>.</p>
<p id="p-0059" num="0058">If the destination operand is available in the internal cache <b>412</b>, then the distribution unit <b>406</b> transmits the one or more source operands to the color processing pipeline <b>410</b>. The color processing pipeline <b>410</b> then transmits the source operands, the destination operand, the operation code and an atomic flag indicating that an atomic transaction is being processed to the blend unit <b>418</b> for processing. The blend unit <b>418</b> detects that the received operation is an atomic transaction based on the atomic flag and processes the source operands and the destination operand based on the operation code. If the operation code of the atomic transaction is IADD or FADD, then the blend unit <b>418</b> adjusts the source blending coefficient and the destination blending coefficient in the blending equation previously described herein. If the operation code of the atomic transaction is INC or DEC, then the blend unit <b>418</b> adjusts the source and/or destination colors and/or blending coefficients appropriately. For some of the remaining operation codes, the blend unit <b>418</b> processes the source operands and the destination operands using logic gates and/or MUXers already available within the blend unit <b>418</b> for processing color raster operations. For other operation codes, such as AND, OR and XOR, supplementary logic gates and MUXers are added to the blend unit <b>418</b> for handling those operation codes. Persons skilled in the art will recognize that other types of atomic and reduction operations not shown in Table 1 can be processed by the CROP <b>402</b> in a similar fashion. Once the atomic transaction is processed, the blend unit <b>418</b> transmits the result of the atomic transaction to the color processing pipeline <b>410</b> for storage within the internal cache <b>412</b>.</p>
<p id="p-0060" num="0059">The color processing pipeline <b>410</b> transmits the result of the atomic transaction to the L2 cache unit <b>350</b> via the compression unit <b>416</b> for storage at the memory location associated with the atomic transaction. In one embodiment, because the state configuration <b>413</b> indicates that the compression mode is disabled when processing atomic transactions, the compression unit <b>416</b> writes the result of the atomic transaction to the L2 cache unit <b>350</b> without performing any compression operations. In an alternative embodiment, the compression unit <b>416</b> performs compression operations on the result of the atomic transaction and then writes the compressed result of the atomic transaction to the L2 cache unit <b>350</b>. In cases where the processed atomic transaction is an atomic operation, the destination operand is also transmitted to the L2 cache unit <b>350</b> via the compression unit <b>416</b>. The L2 cache unit <b>350</b> then transmits the destination operand to the SPM <b>310</b>.</p>
<p id="p-0061" num="0060">In one embodiment, the L2 cache unit <b>350</b> transmits an acknowledgement to the color processing pipeline <b>410</b> indicating the receipt of the result of the atomic transaction.</p>
<p id="p-0062" num="0061">If the destination operand is not available in the internal cache <b>412</b>, then the distribution unit <b>406</b> transmits a read request to the L2 cache unit <b>350</b> requesting the destination operand from the memory location associated with the atomic transaction. The distribution unit <b>406</b> then stores the source operands and operation code included in the atomic transaction in the latency buffer <b>408</b> until the destination operand is retrieved from the L2 cache unit <b>350</b>. In one embodiment, because the state configuration <b>413</b> indicates that the compression mode is disabled when processing atomic transactions, upon receiving the requested destination operand from the L2 cache unit <b>350</b>, the decompression unit <b>414</b> transmits the destination operand to the color processing pipeline <b>410</b> without performing any decompression operations. In an alternative embodiment, the decompression unit <b>414</b> decompresses the destination operand received from the L2 cache unit <b>350</b> if the destination operand is compressed. The color processing pipeline <b>410</b>, concurrently, retrieves the source operands stored from the latency buffer <b>408</b>. The color processing pipeline <b>410</b> then transmits the source operands, the destination operand, the operation code and an atomic flag indicating that an atomic transaction is being processed to the blend unit <b>418</b> for processing, as previously described herein.</p>
<p id="p-0063" num="0062">In an alternative embodiment, the source operands and operation code included in the atomic transaction are buffered in a different buffering unit within the ROP <b>360</b> while the destination operand is retrieved from the L2 cache unit <b>350</b>. In such an embodiment, the CROP <b>402</b> may not include the latency buffer <b>408</b> specific for storing the source operands and the operation code. In another alternative embodiment, the destination operand is retrieved from the cproc pipeline stages or a different storage unit within the GPC <b>208</b> when the destination operand is not available in the internal cache <b>412</b>.</p>
<p id="p-0064" num="0063">In one embodiment, the L2 cache unit <b>350</b> also transmits load and store requests received from the SPM <b>310</b> that are associated with memory addresses included in previously transmitted atomic transactions that have not been processed by the CROP <b>402</b> to the ROP data manager <b>404</b>. The load requests are processed by the CROP <b>402</b> as atomic operations and the store requests are processed by the CROP <b>402</b> as reduction operations.</p>
<p id="p-0065" num="0064"><figref idref="DRAWINGS">FIGS. 5A and 5B</figref> set forth a flow diagram of methods steps for processing an atomic transaction within the CROP, according to one embodiment of the present invention. Although the method steps are described in conjunction with the systems for <figref idref="DRAWINGS">FIGS. 1-4</figref>, persons skilled in the art will understand that any system configured to perform the method steps, in any order, is within the scope of the invention.</p>
<p id="p-0066" num="0065">The method <b>500</b> begins at step <b>502</b>, where the distribution unit <b>406</b> receives an atomic transaction from the ROP data manager <b>404</b>. The atomic transaction includes an operation code, one or more source operands and a memory location associated with a memory location in the L2 cache unit <b>350</b> storing the destination operand. At step <b>504</b>, the distribution unit <b>406</b> determines whether the destination operand is available in the internal cache <b>412</b> within the color processing pipeline <b>410</b>.</p>
<p id="p-0067" num="0066">If the destination operand is not available within the internal cache <b>412</b>, then, at step <b>506</b>, the distribution unit <b>406</b> transmits a read request to the L2 cache unit <b>350</b> requesting the destination operand stored at the memory location associated with the atomic transaction. At step <b>508</b>, the distribution unit <b>408</b> transmits the source operands and the operation code to the latency buffer <b>408</b> until the destination operand is retrieved from the L2 cache unit <b>350</b>. At step <b>510</b>, the decompression unit <b>414</b> receives the destination operand from the L2 cache unit <b>350</b>. In one embodiment, because the L2 cache unit <b>350</b> transmits decompressed destination operands of atomic transactions to the decompression unit <b>414</b>, the decompression unit <b>414</b> does not perform any decompression operations.</p>
<p id="p-0068" num="0067">At step <b>512</b>, the color processing pipeline <b>410</b> receives the destination operand from the decompression unit <b>414</b> and the source operands and the operation code from the latency buffer <b>408</b>. At step <b>514</b>, the color processing pipeline <b>410</b> transmits the source operands, the destination operand, the operation code and an atomic flag indicating that an atomic transaction is being processed to the blend unit <b>418</b> for processing. At step <b>516</b>, the blend unit <b>418</b> detects that the received operation is an atomic transaction and processes the source operands and the destination operands based on the operation code. At step <b>518</b>, the blend unit <b>418</b> transmits the result of the atomic transaction to the color processing pipeline <b>410</b> for storage in the internal cache <b>412</b>. At step <b>520</b>, the color processing pipeline <b>410</b> writes the result of the atomic transaction to the L2 cache unit <b>350</b> for storage at the memory location associated with the atomic transaction. In the case of an atomic transaction, the color processing pipeline <b>410</b> also transmits the destination operand to the L2 cache unit <b>350</b> for transmission to the SPM <b>310</b>.</p>
<p id="p-0069" num="0068">Referring back to step <b>504</b>, if the destination operand is available within the internal cache <b>412</b>, then the method <b>500</b> proceeds directly to step <b>514</b>, previously described herein.</p>
<p id="p-0070" num="0069">In sum, the CROP is configured to process both color raster operations and atomic transactions received from the ROP data manager. An atomic transaction includes one or more source operands, a memory address associated with a memory location storing a destination operand and an operation code specifying the type of atomic transaction to be performed on the source and destination operands. Upon receiving an atomic transaction, the distribution unit first transmits a read request to the L2 cache unit for retrieving the destination operand from the memory location associated with the memory address included in the atomic transaction. The distribution unit also transmits the source operands and the operation code to the latency buffer for storage until the destination operand is retrieved from the L2 cache unit.</p>
<p id="p-0071" num="0070">The distribution unit transmits the destination operand received form the L2 cache unit via the decompression unit to the color processing pipeline. Simultaneously, the source operands and the operation code stored in the latency buffer are also transmitted to the color processing pipeline. The color processing pipeline then transmits the operation code, the source and destination operands and an atomic flag to the blend unit for further processing. The blend unit performs the atomic transaction on the source and destination operands and returns the result of the atomic transaction to the color processing pipeline for storage in the internal cache. The color processing pipeline then writes the result of the atomic transaction to the L2 cache unit for storage at the memory location associated with the atomic transaction.</p>
<p id="p-0072" num="0071">One advantage of the techniques described herein is that the hardware units within the CROP that are configured to perform color raster operations, such as blending operations, are also configured to perform atomic transactions. Such a design saves valuable die space since dedicated hardware for processing atomic transactions is not needed. Further, because the CROP processes both color raster operations and atomic transactions efficiently, the overall throughput of the system is increased.</p>
<p id="p-0073" num="0072">While the foregoing is directed to embodiments of the present invention, other and further embodiments of the invention may be devised without departing from the basic scope thereof. For example, aspects of the present invention may be implemented in hardware or software or in a combination of hardware and software. One embodiment of the invention may be implemented as a program product for use with a computer system. The program(s) of the program product define functions of the embodiments (including the methods described herein) and can be contained on a variety of computer-readable storage media. Illustrative computer-readable storage media include, but are not limited to: (i) non-writable storage media (e.g., read-only memory devices within a computer such as CD-ROM disks readable by a CD-ROM drive, flash memory, ROM chips or any type of solid-state non-volatile semiconductor memory) on which information is permanently stored; and (ii) writable storage media (e.g., floppy disks within a diskette drive or hard-disk drive or any type of solid-state random-access semiconductor memory) on which alterable information is stored. Such computer-readable storage media, when carrying computer-readable instructions that direct the functions of the present invention, are embodiments of the present invention.</p>
<p id="p-0074" num="0073">Therefore, the scope of the present invention is determined by the claims that follow.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>We claim:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A raster operations unit, comprising:
<claim-text>a data manager configured to:
<claim-text>receive an atomic transaction that includes an operation code, one or more source operands and a memory address associated with a memory location within a memory unit that stores a destination operand; and</claim-text>
</claim-text>
<claim-text>a color raster operations unit including:
<claim-text>a color processing pipeline including an internal cache unit;</claim-text>
<claim-text>a distribution unit configured to:
<claim-text>receive the atomic transaction from the data manager,</claim-text>
<claim-text>determine whether the destination operand is stored in the internal cache unit, and</claim-text>
<claim-text>transmit the operation code, the one or more source operands and the destination operand to the color processing pipeline; and</claim-text>
</claim-text>
<claim-text>a blend unit configured to:
<claim-text>receive the operation code, one or more source operands, destination operand and an atomic flag from the color processing pipeline, wherein the atomic flag indicates that the operation code is associated with the atomic transaction,</claim-text>
<claim-text>process the one or more source operands and the destination operand based on the operation code to produce an atomic transaction result, and</claim-text>
<claim-text>transmit the atomic transaction result to the color processing pipeline for storage in the internal cache unit,</claim-text>
</claim-text>
<claim-text>wherein the color processing pipeline is configured to transmit the result of the atomic transaction to an intermediate cache unit for storage at the memory location.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The raster operations unit of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the distribution unit is further configured to retrieve the destination operand from the intermediate cache unit when the destination operand is not stored in the internal cache unit.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The raster operations unit of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the distribution unit is further configured to transmit a read request to the intermediate cache unit that requests the destination operand stored at the memory location.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The raster operations unit of <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein the color raster operations unit includes a latency buffer and the distribution unit is further configured to store the one or more source operands and the operation code in the latency buffer until the destination operand is retrieved from the memory unit.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The raster operations unit of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the color processing pipeline is further configured to retrieve the destination operand from the internal cache unit when the destination operand is stored in the internal cache unit.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The raster operations unit of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the atomic transaction is an atomic operation, and the color processing pipeline is further configured to transmit the destination operand to the memory unit for transmission to the processing unit.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The raster operations unit of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the blend unit is further configured to apply a blending equation to the one or more source operands and the destination operand, and wherein the blending equation includes one or more source coefficients and a destination coefficient.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The raster operations unit of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein the blend unit is further configured to adjust the values of the one or more source operands, the destination operand, the one or more source coefficients and the destination coefficient based on the operation code.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. A computing system, comprising:
<claim-text>a processing unit;</claim-text>
<claim-text>a memory unit; and</claim-text>
<claim-text>a raster operations unit, comprising:
<claim-text>a data manager configured to:
<claim-text>receive an atomic transaction that includes an operation code, one or more source operands and a memory address associated with a memory location within a memory unit that stores a destination operand; and</claim-text>
</claim-text>
<claim-text>a color raster operations unit including:
<claim-text>a color processing pipeline including an internal cache unit;</claim-text>
<claim-text>a distribution unit configured to:
<claim-text>receive the atomic transaction from the data manager,</claim-text>
<claim-text>determine whether the destination operand is stored in the internal cache unit, and</claim-text>
<claim-text>transmit the operation code, the one or more source operands and the destination operand to the color processing pipeline; and</claim-text>
</claim-text>
<claim-text>a blend unit configured to:
<claim-text>receive the operation code, one or more source operands, destination operand and an atomic flag from the color processing pipeline, wherein the atomic flag indicates that the operation code is associated with the atomic transaction,</claim-text>
<claim-text>process the one or more source operands and the destination operand based on the operation code to produce an atomic transaction result, and</claim-text>
<claim-text>transmit the atomic transaction result to the color processing pipeline for storage in the internal cache unit,</claim-text>
</claim-text>
</claim-text>
<claim-text>wherein the color processing pipeline is configured to transmit the result of the atomic transaction to an intermediate cache unit for storage at the memory location.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The computing system of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the distribution unit is further configured to retrieve the destination operand from the intermediate cache unit when the destination operand is not stored in the internal cache unit.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The computing system of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the distribution unit is further configured to transmit a read request to the intermediate cache unit that requests the destination operand stored at the memory location.</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The computing system of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the color raster operations unit includes a latency buffer and the distribution unit is further configured to store the one or more source operands and the operation code in the latency buffer until the destination operand is retrieved from the memory unit.</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The computing system of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the color processing pipeline is further configured to retrieve the destination operand from the internal cache unit when the destination operand is stored in the internal cache unit.</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The computing system of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the atomic transaction is an atomic operation, and the color processing pipeline is further configured to transmit the destination operand to the memory unit for transmission to the processing unit.</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The computing system of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the blend unit is further configured to apply a blending equation to the one or more source operands and the destination operand, and wherein the blending equation includes one or more source coefficients and a destination coefficient.</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The computing system of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the blend unit is further configured to adjust the values of the one or more source operands, the destination operand, the one or more source coefficients and the destination coefficient based on the operation code. </claim-text>
</claim>
</claims>
</us-patent-grant>

<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08627152-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08627152</doc-number>
<kind>B1</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>13296003</doc-number>
<date>20111114</date>
</document-id>
</application-reference>
<us-application-series-code>13</us-application-series-code>
<us-term-of-grant>
<us-term-extension>249</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>11</main-group>
<subgroup>00</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>714 49</main-classification>
<further-classification>714  41</further-classification>
</classification-national>
<invention-title id="d2e53">Simultaneous error detection during VM import</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>6961868</doc-number>
<kind>B2</kind>
<name>Tormasov et al.</name>
<date>20051100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714  61</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>8499191</doc-number>
<kind>B2</kind>
<name>Shimada et al.</name>
<date>20130700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714  411</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>2009/0276771</doc-number>
<kind>A1</kind>
<name>Nickolov et al.</name>
<date>20091100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717177</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>2010/0192049</doc-number>
<kind>A1</kind>
<name>Lee et al.</name>
<date>20100700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714804</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>2010/0251035</doc-number>
<kind>A1</kind>
<name>Hasegawa et al.</name>
<date>20100900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714 49</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>2011/0202795</doc-number>
<kind>A1</kind>
<name>Marathe et al.</name>
<date>20110800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714 23</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>2012/0226938</doc-number>
<kind>A1</kind>
<name>Sakaguchi et al.</name>
<date>20120900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714 16</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>2013/0007216</doc-number>
<kind>A1</kind>
<name>Fries et al.</name>
<date>20130100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709218</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>2013/0041872</doc-number>
<kind>A1</kind>
<name>Aizman et al.</name>
<date>20130200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707690</main-classification></classification-national>
</us-citation>
</us-references-cited>
<number-of-claims>25</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>714  41</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>714 49</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>714  63</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>714 48</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>4</number-of-drawing-sheets>
<number-of-figures>4</number-of-figures>
</figures>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Deb</last-name>
<first-name>Bashuman</first-name>
<address>
<city>Herndon</city>
<state>VA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Lissack</last-name>
<first-name>Avichai M.</first-name>
<address>
<city>McLean</city>
<state>VA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Deb</last-name>
<first-name>Bashuman</first-name>
<address>
<city>Herndon</city>
<state>VA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Lissack</last-name>
<first-name>Avichai M.</first-name>
<address>
<city>McLean</city>
<state>VA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Lee &#x26; Hayes, PLLC</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>Amazon Technologies, Inc.</orgname>
<role>02</role>
<address>
<city>Reno</city>
<state>NV</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Wilson</last-name>
<first-name>Yolanda L</first-name>
<department>2113</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">Architectures and techniques for uploading virtual machine (VM) images to a network-accessible computing platform from a client device while simultaneously performing error detection of the VM images at the client device. One technique can include transmitting a request from the client device to upload VM images. The technique can further include receiving an application from the computing platform and using the application to reconstitute the VM images from a first stream at the client device while performing error detection. The technique also includes using the application to upload the VM images from a second stream at the client device to the computing platform while performing the error detection.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="199.39mm" wi="134.96mm" file="US08627152-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="265.43mm" wi="198.37mm" orientation="landscape" file="US08627152-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="243.84mm" wi="191.85mm" file="US08627152-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="205.23mm" wi="139.78mm" file="US08627152-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="212.01mm" wi="166.37mm" file="US08627152-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">BACKGROUND</heading>
<p id="p-0002" num="0001">Large-scale, network-based computing represents a paradigm shift from traditional client-server computing relationships. With large-scale, network-based computing platforms (e.g., data centers), customers are able to leverage shared resources on-demand by renting resources that are owned by third parties and that reside &#x201c;in the cloud.&#x201d; With these resources, customers of the platform are able to launch and maintain large applications without actually owning or servicing the underlying infrastructure necessary for these applications. As such, network-accessible computing platforms, often referred to as &#x201c;cloud-computing platforms&#x2019; or &#x201c;cloud-computing environments,&#x201d; have expanded the class of individuals and companies able to effectively compete in the realm of computing applications.</p>
<p id="p-0003" num="0002">Generally, customers of a network-based computing platform launch and maintain large applications within the network-based computing platform through the use of one or more virtual machine images. Virtual machine images can be created by the network-based computing platform. However, often, the customers already have virtual machine images within their own systems. Thus, it can be desirable to retrieve the virtual machine images from the customer's own system. Such retrieval however generally utilizes a great deal of resources and bandwidth within both the network-based computing platform and the customer's own system. Currently, if the customer already has virtual machine images, the virtual machine images are retrieved from the customer's system by the network-based computing platform and then, once the virtual machine images are fully uploaded to the network-based computing platform, the network-based computing platform checks the virtual machine images to make sure that they are compatible with the platform. That is, the network-based computing platform conducts an error detection process upon receiving the virtual machine images.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0002" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0004" num="0003">The detailed description is set forth with reference to the accompanying figures. In the figures, the left-most digit(s) of a reference number identifies the figure in which the reference number first appears. The use of the same reference numbers in different figures indicates similar or identical items or features.</p>
<p id="p-0005" num="0004"><figref idref="DRAWINGS">FIG. 1</figref> illustrates an example computing environment in which virtual machine (VM) images are uploaded to a network-accessible computing platform from a client device while simultaneously performing error detection of the VM images at the client device.</p>
<p id="p-0006" num="0005"><figref idref="DRAWINGS">FIG. 2</figref> illustrates an example of information flow utilizing some components within the computing environment of <figref idref="DRAWINGS">FIG. 1</figref>.</p>
<p id="p-0007" num="0006"><figref idref="DRAWINGS">FIG. 3</figref> illustrates an example method of uploading VM images from a client device to the network-accessible computing platform within the computing environment of <figref idref="DRAWINGS">FIG. 1</figref>.</p>
<p id="p-0008" num="0007"><figref idref="DRAWINGS">FIG. 4</figref> illustrates an example method of receiving VM images from a client device at the network-accessible computing platform within the computing environment of <figref idref="DRAWINGS">FIG. 1</figref>.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0003" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0009" num="0008">This disclosure describes architectures and techniques for uploading virtual machine images from a client device to a shared computing environment. The disclosure also describes architectures and techniques for reconstituting the virtual machine images from a compressed stream at the client device and performing an error detection process during the reconstituting process while simultaneously uploading the virtual machine images to the shared computing environment from another compressed stream at the client device. In accordance with various embodiments, the shared computing environment is a network-accessible computing platform (or cloud computing environment). For instance, one or more entities may host and operate a network-accessible computing platform that includes different types of network resources, such as a storage service, a load balancing service, a compute service, a security service, or any other similar or different type of network-accessible service. The services are performed using various computing devices, wherein the computing devices include one or more processors that each includes one or more processing cores.</p>
<p id="p-0010" num="0009">In an embodiment, when applications of a client device are to be executed at a particular network-accessible computing platform, virtual machine (VM) images are utilized by the network-accessible computing platform. Often, the network-accessible computing platform creates the VM images on its own on behalf of the client device. However, the client device often already includes VM images that are utilized by the client device itself or are utilized by a different computing platform. Thus, the particular network-accessible computing platform may desire to obtain the VM images from the client device in order to avoid the necessity of creating the VM images from the beginning.</p>
<p id="p-0011" num="0010">The client device can therefore transmit a request to the particular network-accessible computing platform to provide VM images from the client device to the network-accessible computing platform. The client device can receive from the network-accessible computing platform an application for uploading VM images from the client device to the network-accessible computing platform. The application is generally configured to upload the VM images from a first compressed stream at the client device to the network-accessible computing platform and to simultaneously reconstitute the VM images from a second compressed stream at the client device. The application is further configured to perform error detection of the VM images during reconstitution at the client device. Accordingly, the VM images are reconstituted, by the application from the second compressed stream at the client device and while reconstituting the VM images, the application performs error detection of the VM images at the client device.</p>
<p id="p-0012" num="0011">While performing error detection of the VM images, the application uploads the VM images from the first compressed screen at the client device to the network-accessible computing platform. The uploading generally occurs over a network, such as the Internet. When an error is detected within the VM images, uploading of the VM images is halted. The client device is generally notified of the error and the halting of the uploading. Such notification can be performed by the application or by the network-accessible computing platform. In general, if uploading of the VM images is halted, then the application can be removed from the client device and any other resources that have been utilized at the client device can be freed up. Any resources being utilized at the network-accessible computing platform can also be freed up.</p>
<p id="h-0004" num="0000">Example Architecture</p>
<p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. 1</figref> illustrates an environment <b>100</b> for implementing the aforementioned techniques utilizing a cloud-based environment. The environment of <figref idref="DRAWINGS">FIG. 1</figref> includes a network-accessible computing platform or services provider <b>102</b> that provides network-accessible computing services via a network of computing devices represented as one or more servers <b>104</b>(<b>1</b>), <b>104</b>(<b>2</b>), . . . , <b>104</b>(M), which may include both resources and functionality. The network-accessible computing platform <b>102</b> and its services may be referred to as Infrastructure as a Service (IaaS) and/or Platform as a Service (PaaS). The computing devices available to provide computing services within the network-accessible computing platform <b>102</b> may be in the form of dedicated servers, shared servers, virtual servers, server slices, processors, processor cycles, and so forth. While <figref idref="DRAWINGS">FIG. 1</figref> illustrates the computing devices in the form of servers <b>104</b>, this is not meant to be limiting and is presented as such simply for ease and clarity.</p>
<p id="p-0014" num="0013">As illustrated, each of the servers <b>104</b> may include a virtualization layer <b>106</b>, such as a hypervisor or a virtual machine monitor (VMM) that can create one or more virtual machine images (VM) <b>108</b>(<b>1</b>), <b>108</b>(<b>2</b>), . . . , <b>108</b>(N) for sharing resources of the server <b>104</b>, if creation of the one or more virtual machine images <b>108</b> is needed. As illustrated, the virtualization layer <b>106</b> may also include a scheduler <b>110</b>. The scheduler <b>110</b> may generally control processing cores of processors to perform various functions and execute various instructions within the network-accessible computing platform <b>102</b> on behalf of the virtual machine images <b>108</b>. While <figref idref="DRAWINGS">FIG. 1</figref> illustrates the scheduler <b>110</b> as residing within the virtualization layer <b>106</b>, the scheduler <b>110</b> may reside in other locations in other implementations.</p>
<p id="p-0015" num="0014">Each of the servers <b>104</b> also generally includes one or more processors <b>112</b> and memory <b>114</b>, which may comprise any sort of computer-readable storage media and may store one or more applications <b>116</b>. The servers may also include one or more other components typically found in computing devices, such as communication connections, input/output I/O interfaces, and the like.</p>
<p id="p-0016" num="0015">One or more client devices <b>120</b>(<b>1</b>), <b>120</b>(<b>2</b>), . . . , <b>120</b>(P) communicate and interact with the network-accessible computing platform <b>102</b> in order to obtain computing services from the network-accessible computing platform <b>102</b>. The client devices <b>120</b> communicate with the network-accessible computing platform <b>102</b> via a network, such as, for example, the Internet and communication connections and I/O interfaces. Generally, the computing services from the network-accessible computing platform <b>102</b> are available to the client devices <b>120</b> in scalable increments or amounts, which can be dynamically increased or decreased in response to usage and/or demand. Service fees may be tied to the amount of the resources that are actually used.</p>
<p id="p-0017" num="0016">Generally, the client devices <b>120</b> are in the form of one or more servers <b>122</b>. However, this is not meant to be limiting and it is presented as such for ease and clarity. Similar to the network-accessible computing platform <b>102</b>, each of the one or more servers <b>122</b> that make up a client device <b>120</b> generally includes one or more processors <b>124</b> and memory <b>126</b>. The memory <b>126</b> generally has stored therein one or more applications <b>128</b>. One of the applications <b>128</b> is generally in the form of a source hypervisor module or virtual machine monitor module <b>130</b> within a VM module <b>132</b> of the memory <b>126</b>. The source hypervisor module <b>130</b> is utilized to create one or more VM images. VM module <b>132</b> further includes a VM storage module <b>134</b> that can be utilized to store VM images from the source hypervisor module <b>130</b>. Additional applications <b>128</b> within the memory <b>126</b> generally include a dynamic validation platform module <b>136</b> and a client to platform instance uploader module <b>138</b> to provide error detection uploading of the VM images to the network-accessible computing platform <b>102</b>. These various modules and associated techniques will be further described in more detail herein.</p>
<p id="p-0018" num="0017">The computing services available from the network-accessible computing platform <b>102</b> may include functional elements or services. Functional elements or services may comprise applications or sub-applications that are used as building blocks for client device applications. For example, the network-accessible computing platform <b>102</b> may provide predefined database functionality in the form of a discrete service that can be instantiated on behalf of a client device. Functional components may relate to network communications and other services or activities. Network-related services may, for example, include firewalls, load balancers, filters, routers, and so forth. Additional functional components may be available for such things as graphics processing, language translation, searching, etc.</p>
<p id="p-0019" num="0018">The computing services may also be characterized by service types or categories, such as by the types or categories of services they provide. Different types or categories of services may include database services, web servers, firewalls, file replicators, storage services, encryption services, authentication services, and so forth. In some embodiments, services may be categorized at a relatively high level. For example, a &#x201c;database services&#x201d; category may include various different implementations of database services. In other embodiments, services may be categorized more specifically or narrowly, such as by type or family of database services. In embodiments such as this, for example, there may be different categories for relational databases services and non-relational database services, and for SQL and other implementations of databases services.</p>
<p id="p-0020" num="0019">Service parameters for the computing services provided by the network-accessible platform <b>102</b> may correspond to options, configuration details, speeds, capacities, variations, quality-of-service (QoS) assurances/guaranties, and so forth. In the example of a database service, the service parameters may indicate the type of database (relational vs. non-relational, SQL vs. Oracle, etc.), its capacity, its version number, its cost or cost metrics, its network communication parameters, and so forth.</p>
<p id="h-0005" num="0000">Example Processes</p>
<p id="p-0021" num="0020">Referring to <figref idref="DRAWINGS">FIG. 2</figref>, an arrangement <b>200</b> is illustrated for providing one or more virtual machine images from client devices <b>120</b> to a network-accessible computing platform <b>102</b> to provide one or more of the VM images <b>108</b> at one or more servers <b>104</b>. The VM images can be obtained from a source hypervisor module or virtual machine monitor <b>130</b> within the VM module <b>132</b> included at a client device <b>120</b>. The source hypervisor module <b>130</b> can be utilized to create VM images at the client device <b>120</b>. The VM images are generally stored within the VM storage module <b>134</b> within the VM module <b>132</b> at the client device <b>120</b>. The VM images are generally compressed so that storage space is minimized.</p>
<p id="p-0022" num="0021">The client device <b>120</b> also includes a dynamic validation platform module <b>136</b> and a client to platform instance uploader module <b>138</b>. These components can be in the form of software or firmware at the client device <b>102</b>. Generally though, the validation platform module <b>136</b> and the client to platform instance uploader module <b>138</b> are provided in the form of an application by the network-accessible computing platform <b>102</b> to the client device <b>120</b> upon request from the client device <b>120</b>. The validation platform module <b>136</b> and the client to platform instance uploader module <b>138</b> can be utilized by the network-accessible computing platform <b>102</b> to receive VM images from either the source hypervisor module <b>130</b> or from the VM storage module <b>134</b>.</p>
<p id="p-0023" num="0022">As noted, the network-accessible computing platform <b>102</b> generally provides an application to the client device that provides the necessary platforms to the client device such as the dynamic validation platform module <b>136</b> and the client to platform instance uploader module <b>138</b>, if these modules are not already on the client device <b>120</b>. The source hypervisor module <b>130</b> or the VM storage module <b>134</b>, depending upon where the VM images are being retrieved from, begin to stream the compressed VM images in parallel to the dynamic validation platform <b>136</b> and the client to platform instance uploader <b>138</b>. The compressed VM images are streamed along a first stream <b>202</b> to the validation platform module <b>136</b> and the compressed VM images are streamed along a second stream <b>204</b> to the client to platform instance uploader module <b>138</b>.</p>
<p id="p-0024" num="0023">The dynamic validation platform module <b>136</b> then begins to check the compressed VM images for errors and compatibility issues. This is accomplished by reconstituting the VM images within the dynamic validation platform module <b>136</b>. Potential errors include malformed boot sectors, an operating system for the VM images that is not supported by the network-accessible computing platform <b>102</b>, corrupted VM images, encrypted VM images, etc.</p>
<p id="p-0025" num="0024">While the dynamic validation platform module <b>136</b> is checking the VM images for compatibility issues and potential errors, the client to platform instance uploader module <b>138</b> is simultaneously streaming the VM images to the network-accessible computing platform <b>102</b>. This uploading is generally accomplished along an upload stream <b>208</b> over a network <b>210</b> such as, for example, the Internet. The compressed VM images are uploaded to a VM import web service <b>212</b>. The VM import web service <b>212</b> is generally included within a server <b>104</b> with the network-accessible computing platform <b>102</b>, but is not required to be. The VM import web service <b>212</b> decompresses and reconstitutes the VM images uploaded from the client device <b>120</b>. The VM import web service <b>212</b> provides the reconstituted VM images to an appropriate one or more of the servers <b>104</b> within the network-accessible computing platform <b>102</b>. The appropriate one or more servers <b>104</b> could include the server <b>104</b> that provides the VM import web service <b>212</b>.</p>
<p id="p-0026" num="0025">If for some reason the dynamic validation platform module <b>136</b> determines that the VM images are not compatible for use with the network-accessible computing platform <b>102</b> or that the VM images contain one or more errors, a message is sent from the validation platform module <b>136</b> to the client to platform instance uploader module <b>138</b> along the error reporting channel <b>206</b> to stop uploading of the VM images to the network-accessible computing platform <b>102</b>. A message is also provided by the dynamic validation platform module <b>136</b> or by the network-accessible computing platform <b>102</b> to the client device <b>102</b> that the VM images are not compatible and/or contain one or more errors. Resources within the network-accessible computing platform <b>102</b> that have been utilized to upload the VM images are then freed up. Any data relating to the partially uploaded VM images can be deleted from the network-accessible computing platform <b>102</b>. Likewise, resources at the client device <b>120</b> that have been utilized for the error detection and the uploading can be freed up. Resources and/or data at the client device <b>120</b> relating to the partially uploaded VM images can also be deleted. For example, application providing the dynamic validation platform module <b>136</b> and the client to platform instance uploader module <b>138</b> can be deleted from the client device <b>120</b> if desired. The deletion can be performed by the network-accessible computing platform <b>102</b>, by the client device <b>120</b> or by the application itself. Alternatively, these resources can be maintained by the client device <b>120</b> in the event that the client device <b>102</b> fixes whatever problems have been discovered with respect to the VM images and then wishes to try again to provide the VM images to the network-accessible computing platform <b>102</b>.</p>
<p id="p-0027" num="0026">In an alternative embodiment, when one or more errors are detected by the dynamic validation platform module <b>136</b>, the uploading of the VM images may simply be suspended to allow the client device <b>120</b> an opportunity to correct the detected one or more errors. Once corrected, uploading of the VM images may resume. Likewise, reconstitution and error detection of the VM images by the dynamic validation platform module <b>136</b> may be suspended while the client device fixes the detected one or more errors. In another alternative embodiment, if detected errors are minor and/or possibly fixed by the network-accessible computing platform <b>102</b> and/or the client device <b>120</b>, halting of the uploading of the VM images or suspension of the uploading of the VM images may not occur until a threshold of errors is met or exceeded.</p>
<p id="p-0028" num="0027">In the case where the VM images are acceptable for use within the network-accessible computing platform <b>102</b>, i.e. VM images contain no errors and are compatible for use within the network-accessible computing platform <b>102</b>, then upon completion of the uploading of the VM images to the network-accessible platform <b>102</b>, resources being utilized for uploading the VM images within the network-accessible computing platform <b>102</b> can be freed up. Likewise, resources at the client device <b>120</b> that are no longer needed once the VM images have been fully uploaded to the network-accessible computing platform <b>102</b> can be freed up. For example, if desired, the application providing the dynamic validation platform module <b>136</b> and the client to platform instance uploader <b>138</b> can be deleted from the client device <b>120</b>. The deletion can be performed by the network-accessible computing platform <b>102</b>, by the client device <b>120</b> or by the application itself.</p>
<p id="p-0029" num="0028">The application providing the dynamic validation platform module <b>136</b> and the client to platform instance uploader <b>138</b> can also be kept by the client device <b>120</b> if desired. The application can be kept in order to provide additional VM images from the client device <b>120</b> to the network-accessible computing platform <b>102</b> in the future. Provision of the application to the client device <b>120</b> from the network-accessible computing platform <b>102</b> can thus be a one-time occurrence per unique client device <b>120</b>.</p>
<p id="p-0030" num="0029">While the process for simultaneously validating the VM images and uploading the VM images to the network-accessible computing platform <b>102</b> will generally save time due to early detection of potential errors prior to extensive use of resources, there are instances where the entire process may be more time consuming. For example, it may be assumed that the data for the VM images will be provided in an organized format such that needed data for reconstituting the VM images and performing the error detection at the client device <b>120</b> will be obtained in a logical order. However, in some instances, the data for the VM images may be provided in a non-organized or random order. Thus, needed data for reconstituting and validating the VM images at the client side may be received out of order, thus delaying the ability to validate the VM images. However, in such instances, the techniques of the present disclosure are still applicable.</p>
<p id="p-0031" num="0030">In accordance with alternative embodiments, the VM images could be checked directly by obtaining the VM images directly from the source hypervisor module <b>130</b> and/or from the VM storage module <b>134</b> prior to compression of the VM images. Thus, the need for reconstituting the VM images would be eliminated. However, such an embodiment would generally require direct interaction between the network-accessible computing platform <b>102</b> and the client device <b>120</b>. The bandwidth needed for uploading the VM images would also be increased.</p>
<p id="p-0032" num="0031"><figref idref="DRAWINGS">FIGS. 3 and 4</figref> are example processes that the architecture <b>100</b> of <figref idref="DRAWINGS">FIG. 1</figref> may implement. Theses processes (as well as other processes described throughout) are illustrated as a logical flow graph, each operation of which represents a sequence of operations that can be implemented in hardware, software, or a combination thereof. In the context of software, the operations represent computer-executable instructions stored on one or more computer-readable storage media that, when executed by one or more processors, perform the recited operations. Generally, computer-executable instructions include routines, programs, objects, components, data structures, and the like that perform particular functions or implement particular abstract data types. The order in which the operations are described is not intended to be construed as a limitation, and any number of the described operations can be combined in any order and/or in parallel to implement the process. Furthermore, while the architectures and techniques described herein have been described with respect to network-accessible computing platforms, the architectures and techniques are equally applicable to other computing environments and computing devices.</p>
<p id="p-0033" num="0032"><figref idref="DRAWINGS">FIG. 3</figref> illustrates an example method <b>300</b> for providing virtual machine (VM) images from a client device to a computing platform. At <b>302</b>, the method <b>300</b> transmits, from the client device, a request to the computing platform to provide a VM image from the client device to the computing platform.</p>
<p id="p-0034" num="0033">At <b>304</b>, the method <b>300</b> receives, from the computing platform, an application to upload the VM image from the client device to the computing platform. The application is configured to reconstitute the VM image from a first compressed stream at the client device and perform error detection of the VM image during reconstitution at the client device. The application is further configured to upload the VM image from a second compressed stream at the client device to the computing platform.</p>
<p id="p-0035" num="0034">At <b>306</b>, the method <b>300</b> reconstitutes, via the application, the VM image from the first compressed stream at the client device. At <b>308</b>, the method <b>300</b> performs, via the application and while reconstituting the VM image, error detection of the VM image at the client device. At <b>310</b>, the method <b>300</b> uploads, via the application and while performing error detection of the VM image, the VM image from the second compressed stream at the client device to the computing platform. Generally, the uploading is performed over a network, such as, for example, the Internet.</p>
<p id="p-0036" num="0035">At <b>312</b>, the method <b>300</b> determines if an error has been detected within the VM images. If so, then at <b>314</b>, the method <b>300</b> halts uploading of the VM images. Furthermore, at <b>316</b>, the method <b>300</b> notifies the client device of the detected error. If no error is detected, then at <b>318</b>, the method <b>300</b> completes uploading of the VM images to the computing platform.</p>
<p id="p-0037" num="0036"><figref idref="DRAWINGS">FIG. 4</figref> illustrates an example method <b>400</b> of receiving virtual machine (VM) images at a computing platform from a client device. At <b>402</b>, the method <b>400</b> receives, at the computing platform, a request from the client device to provide a VM image from the client device to the computing platform.</p>
<p id="p-0038" num="0037">At <b>404</b>, the method <b>400</b> provides an application to the client device. The application is configured to reconstitute the VM image from a first compressed stream and perform error detection of the VM image during reconstitution of the client device. The application is further configured to upload the VM image from a second compressed stream to the computing platform.</p>
<p id="p-0039" num="0038">At <b>406</b>, the method <b>400</b> receives, at the computing platform and via a network, the VM image from a second compressed stream at the client device. At <b>408</b>, if an error is not detected within the VM image at the client device, the method <b>400</b> completes receiving of the VM image at the computing platform. At <b>410</b>, if an error is detected within the VM image at the client device the method <b>400</b> stops receiving of the VM image at the computing platform.</p>
<heading id="h-0006" level="1">CONCLUSION</heading>
<p id="p-0040" num="0039">Although the subject matter has been described in language specific to structural features and/or methodological acts, it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described. Rather, the specific features and acts are disclosed as exemplary forms of implementing the claims.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A method comprising:
<claim-text>transmitting, from a client device, a request to a computing platform to provide a virtual machine (VM) image from the client device to the computing platform;</claim-text>
<claim-text>receiving, from the computing platform, an application to upload the VM image from the client device to the computing platform, wherein the application is configured to (i) reconstitute the VM image from a first compressed stream at the client device and perform error detection of the VM image during reconstitution at the client device, and (ii) upload the VM image from a second compressed stream at the client device to the computing platform;</claim-text>
<claim-text>reconstituting, via the application, the VM image from the first compressed stream at the client device;</claim-text>
<claim-text>while reconstituting the VM image, performing, via the application, error detection of the VM image from the first compressed stream at the client device; and</claim-text>
<claim-text>while performing error detection of the VM image, uploading, via the application and over a network, the VM image from the second compressed stream at the client device to the computing platform.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:
<claim-text>detecting an error within the VM image while performing the error detection; and</claim-text>
<claim-text>in response to detecting an error within the VM image, halting uploading of the VM image.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, further comprising:
<claim-text>in response to detecting the error within the VM image, receiving, by the client device, notification of the error.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, further comprising:
<claim-text>in response to detecting the error within the VM image, removing the application from the client device.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein potential errors include malformed boot sectors, unsupported operating system for the VM image, corrupted data for the VM image and encrypted data for the VM image.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:
<claim-text>removing the application from the client device after uploading of the VM image is complete.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. A method comprising:
<claim-text>receiving, at a computing platform, a request from an application on a client device to provide a virtual machine (VM) image from the client device to the computing platform, wherein the application is configured to (i) reconstitute the VM image from a first compressed stream and perform error detection of the VM image during reconstitution at the client device, and (ii) upload the VM image from a second compressed stream to the computing platform;</claim-text>
<claim-text>receiving, at the computing platform, the VM image from the second compressed stream at the client device;</claim-text>
<claim-text>if an error is not detected within the VM image at the client device, completing receiving the VM image at the computing platform; and</claim-text>
<claim-text>if an error is detected within the VM image at the client device, stopping receiving of the VM image at the computing platform.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The method of <claim-ref idref="CLM-00007">claim 7</claim-ref>, further comprising:
<claim-text>providing the application to the client device.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The method of <claim-ref idref="CLM-00007">claim 7</claim-ref>, further comprising:
<claim-text>removing the application from the client device.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The method of <claim-ref idref="CLM-00007">claim 7</claim-ref>, further comprising:
<claim-text>if an error is not detected within the VM image at the client device, notifying the client device that receiving the VM image is complete.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The method of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein potential errors include malformed boot sectors, unsupported operating system for the VM image, corrupted data for the VM image and encrypted data for the VM image.</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. One or more computing devices arranged as at least a portion of a network-accessible computing platform, the one or more computing devices comprising:
<claim-text>one or more processors; and</claim-text>
<claim-text>memory, wherein the memory includes a plurality of instructions configured to cause, when executed, the one or more processors to:
<claim-text>provide an application to the client device, wherein the application is configured to (i) reconstitute the VM image from a first compressed stream and perform error detection of the VM image during reconstitution at the client device, and (ii) upload the VM image from a second compressed stream to the computing platform;</claim-text>
<claim-text>receive, over a network, the VM image from the second compressed stream; and</claim-text>
<claim-text>based upon no errors being detected within the VM image at the client device, completing receipt of the VM image.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The one or more computing devices of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the plurality of instructions are further configured to cause, when executed, the one or more processors to:
<claim-text>removing the application from the client device.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The one or more computing devices of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the plurality of instructions are further configured to cause, when executed, the one or more processors to:
<claim-text>receive a request from a client device to provide a virtual machine (VM) image from the client device to the computing platform.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The one or more computing devices of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the plurality of instructions are further configured to cause, when executed, the one or more processors to:
<claim-text>based upon an error being detected within the VM image at the client device, notify the client device of the error.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The one or more computing devices of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the plurality of instructions are further configured to cause, when executed, the one or more processors to:
<claim-text>based upon the error being detected within the VM image at the client device, remove the application from the client device.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The one or more computing devices of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the plurality of instructions are further configured to cause, when executed, the one or more processors to:
<claim-text>based upon no errors being detected within the VM image at the client device, notify the client device that no errors were detected after receiving the VM image is complete.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The one or more computing devices of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein potential errors include malformed boot sectors, unsupported operating system for the VM image, corrupted data for the VM image and encrypted data for the VM image.</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. One or more computing devices comprising:
<claim-text>one or more processors; and</claim-text>
<claim-text>memory, wherein the memory includes a plurality of instructions configured to cause, when executed, the one or more processors to:
<claim-text>transmit a request to a computing platform to provide a virtual machine (VM) image from the one or more computing devices to the computing platform;</claim-text>
<claim-text>reconstitute the VM image from a compressed stream at the one or more computing devices;</claim-text>
<claim-text>while reconstituting the VM image, perform error detection of the VM image; and</claim-text>
<claim-text>while performing error detection of the VM image, upload, over a network, the VM image from another compressed stream at the one or more computing devices to the computing platform.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. The one or more computing devices of <claim-ref idref="CLM-00019">claim 19</claim-ref>, wherein the plurality of instructions are further configured to cause, when executed, the one or more processors to:
<claim-text>detect an error in the VM image; and</claim-text>
<claim-text>in response to detecting an error within the VM image, halt uploading of the VM image.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00021" num="00021">
<claim-text>21. The one or more computing devices of <claim-ref idref="CLM-00020">claim 20</claim-ref>, wherein the plurality of instructions are further configured to cause, when executed, the one or more processors to:
<claim-text>in response to detecting the error within the VM image, receive notification of the error.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00022" num="00022">
<claim-text>22. The one or more computing devices of <claim-ref idref="CLM-00020">claim 20</claim-ref>, wherein potential errors include malformed boot sectors, unsupported operating system for the VM image, corrupted data for the VM image and encrypted data for the VM image.</claim-text>
</claim>
<claim id="CLM-00023" num="00023">
<claim-text>23. The one or more computing devices of <claim-ref idref="CLM-00019">claim 19</claim-ref>, wherein the plurality of instructions are further configured to cause, when executed, the one or more processors to:
<claim-text>receive, from the computing platform, an application to upload the VM image from the one or more computing devices to the computing platform, wherein the application is configured to (i) reconstitute the VM image from the compressed stream and perform error detection of the VM image during reconstitution at the one or more computing devices and (ii) upload the VM image from the another compressed stream at the one or more computing devices to the computing platform; and</claim-text>
<claim-text>place the application in the memory such that at least some instructions associated with the application become part of the plurality of instructions.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00024" num="00024">
<claim-text>24. The one or more computing devices of <claim-ref idref="CLM-00023">claim 23</claim-ref>, wherein the plurality of instructions are further configured to cause, when executed, the one or more processors to:
<claim-text>in response to detecting an error within the VM image, remove the application and the instructions associated with the application from the memory.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00025" num="00025">
<claim-text>25. The one or more computing devices of <claim-ref idref="CLM-00023">claim 23</claim-ref>, wherein the plurality of instructions are further configured to cause, when executed, the one or more processors to:
<claim-text>remove the application and the instructions associated with the application from the memory after uploading of the VM image is complete.</claim-text>
</claim-text>
</claim>
</claims>
</us-patent-grant>

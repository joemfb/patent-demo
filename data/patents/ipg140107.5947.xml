<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08627056-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08627056</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>13750490</doc-number>
<date>20130125</date>
</document-id>
</application-reference>
<us-application-series-code>13</us-application-series-code>
<us-term-of-grant>
<disclaimer>
<text>This patent is subject to a terminal disclaimer.</text>
</disclaimer>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>9</main-group>
<subgroup>00</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>15</main-group>
<subgroup>177</subgroup>
<symbol-position>L</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>713  2</main-classification>
<further-classification>713  1</further-classification>
<further-classification>370409</further-classification>
</classification-national>
<invention-title id="d2e51">Methods and systems for modifying disk images to provide network interface card teaming capabilities</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>7444405</doc-number>
<kind>B2</kind>
<name>Gangadharan</name>
<date>20081000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>7478173</doc-number>
<kind>B1</kind>
<name>Delco</name>
<date>20090100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>7586842</doc-number>
<kind>B2</kind>
<name>McGee et al.</name>
<date>20090900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>370218</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>7693044</doc-number>
<kind>B2</kind>
<name>Jha et al.</name>
<date>20100400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>370216</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>8121051</doc-number>
<kind>B2</kind>
<name>McGee et al.</name>
<date>20120200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>8224988</doc-number>
<kind>B2</kind>
<name>Kubota</name>
<date>20120700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>2008/0089326</doc-number>
<kind>A1</kind>
<name>Kotrla et al.</name>
<date>20080400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00008">
<othercit>European Search Report on 13169862.3 mailed Jul. 26, 2013.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00009">
<othercit>Citrix Systems, Inc.: &#x201c;Citrix Provisioning Server 4.5 SP2, Release Notes, Sep. 2008, Document Rev.1&#x201d;, XP002611510, Retrieved from the Internet: URL:http//support.citrix.com/serylet/KbServlet/download/18159-102-19126/ReleaseNotes.pdf[retrieved on Nov. 26, 2010] p. 4-p. 7.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00010">
<othercit>International Preliminary Report on Patentability for PCT/US2010/030014 mailed Oct. 20, 2011.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00011">
<othercit>International Search Report for PCT/US2010/030014 mailed Oct. 12, 2010.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00012">
<othercit>Notice of Allowance on U.S. Appl. No. 12/754,397 dated Dec. 13, 2012.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00013">
<othercit>Written Opinion of the International Search Authority for PCT/US2010/030014 dated Oct. 5, 2011.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>20</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>713  1</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>713  2</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>370409</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>6</number-of-drawing-sheets>
<number-of-figures>6</number-of-figures>
</figures>
<us-related-documents>
<continuation>
<relation>
<parent-doc>
<document-id>
<country>US</country>
<doc-number>12754397</doc-number>
<date>20100405</date>
</document-id>
<parent-grant-document>
<document-id>
<country>US</country>
<doc-number>8386762</doc-number>
</document-id>
</parent-grant-document>
</parent-doc>
<child-doc>
<document-id>
<country>US</country>
<doc-number>13750490</doc-number>
</document-id>
</child-doc>
</relation>
</continuation>
<us-provisional-application>
<document-id>
<country>US</country>
<doc-number>61166762</doc-number>
<date>20090405</date>
</document-id>
</us-provisional-application>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20130138944</doc-number>
<kind>A1</kind>
<date>20130530</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only" applicant-authority-category="assignee">
<addressbook>
<orgname>Citrix Systems, Inc.</orgname>
<address>
<city>Fort Lauderdale</city>
<state>FL</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Lee</last-name>
<first-name>Moso</first-name>
<address>
<city>Nashua</city>
<state>NH</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Foley &#x26; Lardner LLP</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
<agent sequence="02" rep-type="attorney">
<addressbook>
<last-name>Lanza</last-name>
<first-name>John D.</first-name>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>Citrix Systems, Inc.</orgname>
<role>02</role>
<address>
<city>Fort Lauderdale</city>
<state>FL</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Abbaszadeh</last-name>
<first-name>Jaweed A</first-name>
<department>2115</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">A system for modifying a virtual disk to provide network interface card (NIC) teaming capabilities to a virtual disk. The system can include a virtual disk that has access to one or more NICs. In some instances, the NICs are included in a NIC team that is also available to the virtual disk. A teaming module executing on a computer can identify the NIC team and responsively obtain a media access control (MAC) address of the NIC team. In response to obtaining the NIC team MAC address, the teaming module can obtain a network boot MAC address that was used to PXE boot the virtual disk. The teaming module can then replace the NIC team MAC address of each NIC in the NIC team with the obtained network boot MAC address. The system then boots from the virtual disk that has the modified NIC team configuration.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="188.30mm" wi="175.85mm" file="US08627056-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="211.16mm" wi="166.37mm" orientation="landscape" file="US08627056-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="192.79mm" wi="168.99mm" file="US08627056-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="192.45mm" wi="172.30mm" file="US08627056-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="236.22mm" wi="183.81mm" orientation="landscape" file="US08627056-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="232.58mm" wi="189.82mm" orientation="landscape" file="US08627056-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="197.36mm" wi="176.61mm" file="US08627056-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?RELAPP description="Other Patent Relations" end="lead"?>
<heading id="h-0001" level="1">CROSS REFERENCE TO RELATED APPLICATIONS</heading>
<p id="p-0002" num="0001">This Application is a continuation of application Ser. No. 12/754,397, titled &#x201c;Methods and Systems for Modifying Disk Images to Provide Network Interface Card Teaming Capabilities&#x201d; filed on Apr. 5, 2010, which claims priority to U.S. Provisional Patent Application No. 61/166,762, entitled &#x201c;Methods and Systems for Modifying Disk Images to Provide Network Interface Card Teaming Capabilities&#x201d; filed on Apr. 5, 2009, all of which are incorporated herein by reference for all purposes.</p>
<heading id="h-0002" level="1">RELATED APPLICATIONS</heading>
<p id="p-0003" num="0002">This U.S. Patent Application claims priority to U.S. Provisional Patent Application Ser. No. 61/166,762, filed on Apr. 5, 2009, the disclosure of which is considered part of the disclosure of this application and is herein incorporated by reference in its entirety.</p>
<?RELAPP description="Other Patent Relations" end="tail"?>
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0003" level="1">FIELD OF THE DISCLOSURE</heading>
<p id="p-0004" num="0003">This application relates generally to generating and delivering virtual hard disk images. More specifically, the application relates to generating and delivering virtual hard disk images that have network interface card teaming capabilities.</p>
<heading id="h-0004" level="1">BACKGROUND OF THE DISCLOSURE</heading>
<p id="p-0005" num="0004">Link aggregation is a technology that can be used to link together multiple network ports to create a level of redundancy within a networked environment and to increase the speed by which information is transmitted and processed. In some instances, link aggregation can be used to load balance network traffic amongst multiple network interface cards (NICs), and can provide a level of fault tolerance and redundancy should one or more NICs fail. In most cases implementations of link aggregation in a system may conform to the IEEE 802.1AX standard or the IEEE 802.3ad standard. Link aggregation can be accomplished by teaming NICs together using teaming software or some other software or hardware configuration able to link together multiple NICs. Linking or trunking together NICs can permit the creation of a NIC aggregation that can transmit and receive data over a network at speeds much greater than the speed at which any single network interface card within the aggregation can transmit or receive data.</p>
<p id="p-0006" num="0005">When creating a virtual hard disk for use in a network boot system, a network filter driver associated with a network stack may bind to each of the physical network interface cards on a provisioning server. If multiple network interface cards on the provisioning server have been trunked or linked together via network interface card teaming software, the network interface card teaming software can create a single unified virtual network interface card team to which the network filter driver will bind. Teaming software creates a network interface card team by associating each NIC team member's physical MAC address. When provisioning the virtual hard disk to a client machine, issues arise because the MAC addresses of the NICs differ on different machines. Therefore, the NIC teaming software cannot establish a team during boot time and therefore fails to stream the virtual disk.</p>
<p id="p-0007" num="0006">The issues posed by creating a virtual disk based in part on a physical disk employing a teaming module to link network interface cards may not be overcome by using the physical network interface card details of the client machine and presenting them to the streamed operating system. Such a solution likely will fail because the MAC addresses associated with the physical network interface cards will differ from the MAC addresses on different computing machines. This difference can confuse the network stack and hinder the network stack from operating both efficiently and properly. NIC teaming may also be limited to a private image mode because the physical MAC addresses differ from machine to machine. The differing MAC addresses make it difficult for the NIC teaming software to re-create a NIC team during boot time since each NIC team identifies the underline physical NIC by MAC address. Thus, a need exists for a virtual disk creation and delivery method that permits the virtual disk to retain its network interface card teaming capabilities without hindering the virtual disk provisioning process.</p>
<heading id="h-0005" level="1">SUMMARY OF THE DISCLOSURE</heading>
<p id="p-0008" num="0007">In its broadest interpretation, this disclosure describes systems and methods for provisioning a virtual disk having network interface card teaming capabilities. Linking network interface cards (NIC) together using network interface card teaming software creates a NIC team which is an aggregate of the linked NICs. This NIC team can be used in the system as a single NIC that transmits and receives network data at speeds greater than a single network interface card within the team. Issues can arise when this NIC team is included in a virtual disk because that virtual disk can identify the NIC team as the boot network interface card that can be used to stream applications and content to the virtual disk. In many instances, a NIC teaming software requirement can be that the NIC MAC addresses stored in a registry, match the MAC address of the NIC team. The problems posed by requiring that the NICs of a NIC team have the same MAC address of the NIC team can be overcome by identifying virtual protocol binding information associated with a NIC team and using that information to identify all the NICs within a team. This solution is employed by the methods and systems described herein.</p>
<p id="p-0009" num="0008">In one aspect, described herein is a method for modifying a virtual disk to provide network interface card (NIC) teaming capabilities. A teaming module executing on a computer can identify a NIC team available to a virtual disk. In response to identifying the NIC team, the teaming module can obtain a media access control (MAC) address of the NIC team. Responsive to obtaining the NIC team MAC address, the teaming module can obtain a network boot MAC address used to PXE boot the virtual disk. The teaming module can then replace the NIC team MAC address of each NIC in the NIC team with the obtained network boot MAC address. The virtual disk is then booted to create the NIC team.</p>
<p id="p-0010" num="0009">In some embodiments, the network boot MAC address can comprise a PXE boot MAC address of a NIC used to PXE boot the virtual disk.</p>
<p id="p-0011" num="0010">In other embodiments identifying the NIC team can further include enumerating each NIC that is included in the NIC team.</p>
<p id="p-0012" num="0011">Identifying the NIC team, in other embodiments, can include identifying a NIC team that is configured to bind to a network stack filter driver. In some instances, identifying a NIC team bound to a network stack filter driver can include parsing a registry of the virtual disk for a subkey specifying a bind to the network stack filter driver. In other instances, the NICs of the NIC team can be enumerated by parsing the registry for NICs that have a global identifier substantially similar to a global identifier of the NIC team. In still other embodiments, the NIC team MAC address can be bound to the network stack filter driver.</p>
<p id="p-0013" num="0012">In one embodiment, booting the virtual disk to create the NIC team can include updating a registry of the virtual disk to include the network boot MAC address.</p>
<p id="p-0014" num="0013">In some instances, described herein is a system for modifying a virtual disk to provide network interface card (NIC) teaming capabilities. The system can include a virtual disk, and a NIC team that is available to the virtual disk and that includes a multiple NICs. A NIC teaming module executing on a computer can identify the NIC team and obtain, responsive to identifying the NIC team, a media access control (MAC) address of the NIC team. The teaming module can obtain responsive to obtaining the NIC team MAC address, a network boot MAC address used to PXE boot the virtual disk, and replace the NIC team MAC address of each NIC in the NIC team with the obtained network boot MAC address. The system then boots from the virtual disk that has the modified NIC team configuration.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0006" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0015" num="0014">The following figures depict certain illustrative embodiments of a the methods and systems described herein, where like reference numerals refer to like elements. Each depicted embodiment is illustrative of the method and system and not limiting.</p>
<p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. 1A</figref> is a block diagram illustrative of an embodiment of a remote-access, networked environment with a client machine that communicates with a server.</p>
<p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. 1B and 1C</figref> are block diagrams illustrative of an embodiment of computing machines for practicing the methods and systems described herein.</p>
<p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. 2A</figref> is a block diagram illustrative of an embodiment of a physical machine.</p>
<p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. 2B</figref> is a block diagram illustrative of an embodiment of a physical machine employing network interface card teaming.</p>
<p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. 3</figref> is a flow diagram illustrative of an embodiment of a method for overriding the MAC address associated with a network interface card team.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0007" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. 1A</figref> illustrates one embodiment of a computing environment <b>101</b> that includes one or more client machines <b>102</b>A-<b>102</b>N (generally referred to herein as &#x201c;client machine(s) <b>102</b>&#x201d;) in communication with one or more servers <b>106</b>A-<b>106</b>N (generally referred to herein as &#x201c;server(s) <b>106</b>&#x201d;). Installed in between the client machine(s) <b>102</b> and server(s) <b>106</b> is a network.</p>
<p id="p-0022" num="0021">In one embodiment, the computing environment <b>101</b> can include an appliance installed between the server(s) <b>106</b> and client machine(s) <b>102</b>. This appliance can mange client/server connections, and in some cases can load balance client connections amongst a plurality of backend servers.</p>
<p id="p-0023" num="0022">The client machine(s) <b>102</b> can in some embodiment be referred to as a single client machine <b>102</b> or a single group of client machines <b>102</b>, while server(s) <b>106</b> may be referred to as a single server <b>106</b> or a single group of servers <b>106</b>. In one embodiment a single client machine <b>102</b> communicates with more than one server <b>106</b>, while in another embodiment a single server <b>106</b> communicates with more than one client machine <b>102</b>. In yet another embodiment, a single client machine <b>102</b> communicates with a single server <b>106</b>.</p>
<p id="p-0024" num="0023">A client machine <b>102</b> can, in some embodiments, be referenced by any one of the following terms: client machine(s) <b>102</b>; client(s); client computer(s); client device(s); client computing device(s); local machine; remote machine; client node(s); endpoint(s); endpoint node(s); or a second machine. The server <b>106</b>, in some embodiments, may be referenced by any one of the following terms: server(s), local machine; remote machine; server farm(s), host computing device(s), or a first machine(s).</p>
<p id="p-0025" num="0024">In one embodiment, the client machine <b>102</b> can be a virtual machine <b>102</b>C. The virtual machine <b>102</b>C can be any virtual machine, while in some embodiments the virtual machine <b>102</b>C can be any virtual machine managed by a hypervisor developed by XenSolutions, Citrix Systems, IBM, VMware, or any other hypervisor. In other embodiments, the virtual machine <b>102</b>C can be managed by any hypervisor, while in still other embodiments, the virtual machine <b>102</b>C can be managed by a hypervisor executing on a server <b>106</b> or a hypervisor executing on a client <b>102</b>.</p>
<p id="p-0026" num="0025">The client machine <b>102</b> can in some embodiments execute, operate or otherwise provide an application that can be any one of the following: software; a program; executable instructions; a virtual machine; a hypervisor; a web browser; a web-based client; a client-server application; a thin-client computing client; an ActiveX control; a Java applet; software related to voice over internet protocol (VoIP) communications like a soft IP telephone; an application for streaming video and/or audio; an application for facilitating real-time-data communications; a HTTP client; a FTP client; an Oscar client; a Telnet client; or any other set of executable instructions. Still other embodiments include a client device <b>102</b> that displays application output generated by an application remotely executing on a server <b>106</b> or other remotely located machine. In these embodiments, the client device <b>102</b> can display the application output in an application window, a browser, or other output window. In one embodiment, the application is a desktop, while in other embodiments the application is an application that generates a desktop.</p>
<p id="p-0027" num="0026">The server <b>106</b>, in some embodiments, executes a remote presentation client or other client or program that uses a thin-client or remote-display protocol to capture display output generated by an application executing on a server <b>106</b> and transmits the application display output to a remote client <b>102</b>. The thin-client or remote-display protocol can be any one of the following protocols: the Independent Computing Architecture (ICA) protocol manufactured by Citrix Systems, Inc. of Ft. Lauderdale, Fla.; or the Remote Desktop Protocol (RDP) manufactured by the Microsoft Corporation of Redmond, Wash.</p>
<p id="p-0028" num="0027">The computing environment <b>101</b> can include more than one server <b>106</b>A-<b>106</b>N such that the servers <b>106</b>A-<b>106</b>N are logically grouped together into a server farm <b>106</b>. The server farm <b>106</b> can include servers <b>106</b> that are geographically dispersed and logically grouped together in a server farm <b>106</b>, or servers <b>106</b> that are located proximate to each other and logically grouped together in a server farm <b>106</b>. Geographically dispersed servers <b>106</b>A-<b>106</b>N within a server farm <b>106</b> can, in some embodiments, communicate using a WAN, MAN, or LAN, where different geographic regions can be characterized as: different continents; different regions of a continent; different countries; different states; different cities; different campuses; different rooms; or any combination of the preceding geographical locations. In some embodiments the server farm <b>106</b> may be administered as a single entity, while in other embodiments the server farm <b>106</b> can include multiple server farms <b>106</b>.</p>
<p id="p-0029" num="0028">In some embodiments, a server farm <b>106</b> can include servers <b>106</b> that execute a substantially similar type of operating system platform (e.g., WINDOWS NT, manufactured by Microsoft Corp. of Redmond, Wash., UNIX, LINUX, or SNOW LEOPARD.) In other embodiments, the server farm <b>106</b> can include a first group of servers <b>106</b> that execute a first type of operating system platform, and a second group of servers <b>106</b> that execute a second type of operating system platform. The server farm <b>106</b>, in other embodiments, can include servers <b>106</b> that execute different types of operating system platforms.</p>
<p id="p-0030" num="0029">The server <b>106</b>, in some embodiments, can be any server type. In other embodiments, the server <b>106</b> can be any of the following server types: a file server; an application server; a web server; a proxy server; an appliance; a network appliance; a gateway; an application gateway; a gateway server; a virtualization server; a deployment server; a SSL VPN server; a firewall; a web server; an application server or as a master application server; a server <b>106</b> executing an active directory; or a server <b>106</b> executing an application acceleration program that provides firewall functionality, application functionality, or load balancing functionality. In some embodiments, a server <b>106</b> may be a RADIUS server that includes a remote authentication dial-in user service. In embodiments where the server <b>106</b> comprises an appliance, the server <b>106</b> can be an appliance manufactured by any one of the following manufacturers: the Citrix Application Networking Group; Silver Peak Systems, Inc; Riverbed Technology, Inc.; F5 Networks, Inc.; or Juniper Networks, Inc. Some embodiments include a first server <b>106</b>A that receives requests from a client machine <b>102</b>, forwards the request to a second server <b>106</b>B, and responds to the request generated by the client machine <b>102</b> with a response from the second server <b>106</b>B. The first server <b>106</b>A can acquire an enumeration of applications available to the client machine <b>102</b> and well as address information associated with an application server <b>106</b> hosting an application identified within the enumeration of applications. The first server <b>106</b>A can then present a response to the client's request using a web interface, and communicate directly with the client <b>102</b> to provide the client <b>102</b> with access to an identified application.</p>
<p id="p-0031" num="0030">The server <b>106</b> can, in some embodiments, execute any one of the following applications: a thin-client application using a thin-client protocol to transmit application display data to a client; a remote display presentation application; any portion of the CITRIX ACCESS SUITE by Citrix Systems, Inc. like the METAFRAME or CITRIX PRESENTATION SERVER; MICROSOFT WINDOWS Terminal Services manufactured by the Microsoft Corporation; or an ICA client, developed by Citrix Systems, Inc. Another embodiment includes a server <b>106</b> that is an application server such as: an email server that provides email services such as MICROSOFT EXCHANGE manufactured by the Microsoft Corporation; a web or Internet server; a desktop sharing server; a collaboration server; or any other type of application server. Still other embodiments include a server <b>106</b> that executes any one of the following types of hosted servers applications: GOTOMEETING provided by Citrix Online Division, Inc.; WEBEX provided by WebEx, Inc. of Santa Clara, Calif.; or Microsoft Office LIVE MEETING provided by Microsoft Corporation.</p>
<p id="p-0032" num="0031">Client machines <b>102</b> can, in some embodiments, be a client node that seeks access to resources provided by a server <b>106</b>. In other embodiments, the server <b>106</b> may provide clients <b>102</b> or client nodes with access to hosted resources. The server <b>106</b>, in some embodiments, functions as a master node such that it communicates with one or more clients <b>102</b> or servers <b>106</b>. In some embodiments, the master node can identify and provide address information associated with a server <b>106</b> hosting a requested application, to one or more clients <b>102</b> or servers <b>106</b>. In still other embodiments, the master node can be a server farm <b>106</b>, a client <b>102</b>, a cluster of client nodes <b>102</b>, or an appliance.</p>
<p id="p-0033" num="0032">One or more clients <b>102</b> and/or one or more servers <b>106</b> can transmit data over a network <b>104</b> installed between machines and appliances within the computing environment <b>101</b>. The network <b>104</b> can comprise one or more sub-networks, and can be installed between any combination of the clients <b>102</b>, servers <b>106</b>, computing machines and appliances included within the computing environment <b>101</b>. In some embodiments, the network <b>104</b> can be: a local-area network (LAN); a metropolitan area network (MAN); a wide area network (WAN); a primary network <b>104</b> comprised of multiple sub-networks <b>104</b> located between the client machines <b>102</b> and the servers <b>106</b>; a primary public network <b>104</b> with a private sub-network <b>104</b>; a primary private network <b>104</b> with a public sub-network <b>104</b>; or a primary private network <b>104</b> with a private sub-network <b>104</b>. Still further embodiments include a network <b>104</b> that can be any of the following network types: a point to point network; a broadcast network; a telecommunications network; a data communication network; a computer network; an ATM (Asynchronous Transfer Mode) network; a SONET (Synchronous Optical Network) network; a SDH (Synchronous Digital Hierarchy) network; a wireless network; a wireline network; or a network <b>104</b> that includes a wireless link where the wireless link can be an infrared channel or satellite band. The network topology of the network <b>104</b> can differ within different embodiments, possible network topologies include: a bus network topology; a star network topology; a ring network topology; a repeater-based network topology; or a tiered-star network topology. Additional embodiments may include a network <b>104</b> of mobile telephone networks that use a protocol to communicate among mobile devices, where the protocol can be any one of the following: AMPS; TDMA; CDMA; GSM; GPRS UMTS; or any other protocol able to transmit data among mobile devices.</p>
<p id="p-0034" num="0033">Illustrated in <figref idref="DRAWINGS">FIG. 1B</figref> is an embodiment of a computing device <b>100</b>, where the client machine <b>102</b> and server <b>106</b> illustrated in <figref idref="DRAWINGS">FIG. 1A</figref> can be deployed as and/or executed on any embodiment of the computing device <b>100</b> illustrated and described herein. Included within the computing device <b>100</b> is a system bus <b>150</b> that communicates with the following components: a central processing unit <b>121</b>; a main memory <b>122</b>; storage memory <b>128</b>; an input/output (I/O) controller <b>123</b>; display devices <b>124</b>A-<b>124</b>N; an installation device <b>116</b>; and a network interface <b>118</b>. In one embodiment, the storage memory <b>128</b> includes: an operating system, software routines, and a client agent <b>120</b>. The I/O controller <b>123</b>, in some embodiments, is further connected to a key board <b>126</b>, and a pointing device <b>127</b>. Other embodiments may include an I/O controller <b>123</b> connected to more than one input/output device <b>130</b>A-<b>130</b>N.</p>
<p id="p-0035" num="0034"><figref idref="DRAWINGS">FIG. 1C</figref> illustrates one embodiment of a computing device <b>100</b>, where the client machine <b>102</b> and server <b>106</b> illustrated in <figref idref="DRAWINGS">FIG. 1A</figref> can be deployed as and/or executed on any embodiment of the computing device <b>100</b> illustrated and described herein. Included within the computing device <b>100</b> is a system bus <b>150</b> that communicates with the following components: a bridge <b>170</b>, and a first I/O device <b>130</b>A. In another embodiment, the bridge <b>170</b> is in further communication with the main central processing unit <b>121</b>, where the central processing unit <b>121</b> can further communicate with a second I/O device <b>130</b>B, a main memory <b>122</b>, and a cache memory <b>140</b>. Included within the central processing unit <b>121</b>, are I/O ports, a memory port <b>103</b>, and a main processor.</p>
<p id="p-0036" num="0035">Embodiments of the computing machine <b>100</b> can include a central processing unit <b>121</b> characterized by any one of the following component configurations: logic circuits that respond to and process instructions fetched from the main memory unit <b>122</b>; a microprocessor unit, such as: those manufactured by Intel Corporation; those manufactured by Motorola Corporation; those manufactured by Transmeta Corporation of Santa Clara, Calif.; the RS/6000 processor such as those manufactured by International Business Machines; a processor such as those manufactured by Advanced Micro Devices; or any other combination of logic circuits. Still other embodiments of the central processing unit <b>122</b> may include any combination of the following: a microprocessor, a microcontroller, a central processing unit with a single processing core, a central processing unit with two processing cores, or a central processing unit with more than one processing core.</p>
<p id="p-0037" num="0036">While <figref idref="DRAWINGS">FIG. 1C</figref> illustrates a computing device <b>100</b> that includes a single central processing unit <b>121</b>, in some embodiments the computing device <b>100</b> can include one or more processing units <b>121</b>. In these embodiments, the computing device <b>100</b> may store and execute firmware or other executable instructions that, when executed, direct the one or more processing units <b>121</b> to simultaneously execute instructions or to simultaneously execute instructions on a single piece of data. In other embodiments, the computing device <b>100</b> may store and execute firmware or other executable instructions that, when executed, direct the one or more processing units to each execute a section of a group of instructions. For example, each processing unit <b>121</b> may be instructed to execute a portion of a program or a particular module within a program.</p>
<p id="p-0038" num="0037">In some embodiments, the processing unit <b>121</b> can include one or more processing cores. For example, the processing unit <b>121</b> may have two cores, four cores, eight cores, etc. In one embodiment, the processing unit <b>121</b> may comprise one or more parallel processing cores. The processing cores of the processing unit <b>121</b>, may in some embodiments access available memory as a global address space, or in other embodiments, memory within the computing device <b>100</b> can be segmented and assigned to a particular core within the processing unit <b>121</b>. In one embodiment, the one or more processing cores or processors in the computing device <b>100</b> can each access local memory. In still another embodiment, memory within the computing device <b>100</b> can be shared amongst one or more processors or processing cores, while other memory can be accessed by particular processors or subsets of processors. In embodiments where the computing device <b>100</b> includes more than one processing unit, the multiple processing units can be included in a single integrated circuit (IC). These multiple processors, in some embodiments, can be linked together by an internal high speed bus, which may be referred to as an element interconnect bus.</p>
<p id="p-0039" num="0038">In embodiments where the computing device <b>100</b> includes one or more processing units <b>121</b>, or a processing unit <b>121</b> including one or more processing cores, the processors can execute a single instruction simultaneously on multiple pieces of data (SIMD), or in other embodiments can execute multiple instructions simultaneously on multiple pieces of data (MIMD). In some embodiments, the computing device <b>100</b> can include any number of SIMD and MIMD processors.</p>
<p id="p-0040" num="0039">The computing device <b>100</b>, in some embodiments, can include a graphics processor or a graphics processing unit (Not Shown). The graphics processing unit can include any combination of software and hardware, and can further input graphics data and graphics instructions, render a graphic from the inputted data and instructions, and output the rendered graphic. In some embodiments, the graphics processing unit can be included within the processing unit <b>121</b>. In other embodiments, the computing device <b>100</b> can include one or more processing units <b>121</b>, where at least one processing unit <b>121</b> is dedicated to processing and rendering graphics.</p>
<p id="p-0041" num="0040">One embodiment of the computing machine <b>100</b> includes a central processing unit <b>121</b> that communicates with cache memory <b>140</b> via a secondary bus also known as a backside bus, while another embodiment of the computing machine <b>100</b> includes a central processing unit <b>121</b> that communicates with cache memory via the system bus <b>150</b>. The local system bus <b>150</b> can, in some embodiments, also be used by the central processing unit to communicate with more than one type of I/O device <b>130</b>A-<b>130</b>N. In some embodiments, the local system bus <b>150</b> can be any one of the following types of buses: a VESA VL bus; an ISA bus; an EISA bus; a MicroChannel Architecture (MCA) bus; a PCI bus; a PCI-X bus; a PCI-Express bus; or a NuBus. Other embodiments of the computing machine <b>100</b> include an I/O device <b>130</b>A-<b>130</b>N that is a video display <b>124</b> that communicates with the central processing unit <b>121</b>. Still other versions of the computing machine <b>100</b> include a processor <b>121</b> connected to an I/O device <b>130</b>A-<b>130</b>N via any one of the following connections: HyperTransport, Rapid I/O, or InfiniBand. Further embodiments of the computing machine <b>100</b> include a processor <b>121</b> that communicates with one I/O device <b>130</b>A using a local interconnect bus and a second I/O device <b>130</b>B using a direct connection.</p>
<p id="p-0042" num="0041">The computing device <b>100</b>, in some embodiments, includes a main memory unit <b>122</b> and cache memory <b>140</b>. The cache memory <b>140</b> can be any memory type, and in some embodiments can be any one of the following types of memory: SRAM; BSRAM; or EDRAM. Other embodiments include cache memory <b>140</b> and a main memory unit <b>122</b> that can be any one of the following types of memory: Static random access memory (SRAM), Burst SRAM or SynchBurst SRAM (BSRAM); Dynamic random access memory (DRAM); Fast Page Mode DRAM (FPM DRAM); Enhanced DRAM (EDRAM), Extended Data Output RAM (EDO RAM); Extended Data Output DRAM (EDO DRAM); Burst Extended Data Output DRAM (BEDO DRAM); Enhanced DRAM (EDRAM); synchronous DRAM (SDRAM); JEDEC SRAM; PC100 SDRAM; Double Data Rate SDRAM (DDR SDRAM); Enhanced SDRAM (ESDRAM); SyncLink DRAM (SLDRAM); Direct Rambus DRAM (DRDRAM); Ferroelectric RAM (FRAM); or any other type of memory. Further embodiments include a central processing unit <b>121</b> that can access the main memory <b>122</b> via: a system bus <b>150</b>; a memory port <b>103</b>; or any other connection, bus or port that allows the processor <b>121</b> to access memory <b>122</b>.</p>
<p id="p-0043" num="0042">One embodiment of the computing device <b>100</b> provides support for any one of the following installation devices <b>116</b>: a CD-ROM drive, a CD-R/RW drive, a DVD-ROM drive, tape drives of various formats, USB device, a bootable medium, a bootable CD, a bootable CD for GNU/Linux distribution such as KNOPPIX&#xae;, a hard-drive or any other device suitable for installing applications or software. Applications can in some embodiments include a client agent <b>120</b>, or any portion of a client agent <b>120</b>. The computing device <b>100</b> may further include a storage device <b>128</b> that can be either one or more hard disk drives, or one or more redundant arrays of independent disks; where the storage device is configured to store an operating system, software, programs applications, or at least a portion of the client agent <b>120</b>. A further embodiment of the computing device <b>100</b> includes an installation device <b>116</b> that is used as the storage device <b>128</b>.</p>
<p id="p-0044" num="0043">The computing device <b>100</b> may further include a network interface <b>118</b> to interface to a Local Area Network (LAN), Wide Area Network (WAN) or the Internet through a variety of connections including, but not limited to, standard telephone lines, LAN or WAN links (e.g., 802.11, T1, T3, 56 kb, X.25, SNA, DECNET), broadband connections (e.g., ISDN, Frame Relay, ATM, Gigabit Ethernet, Ethernet-over-SONET), wireless connections, or some combination of any or all of the above. Connections can also be established using a variety of communication protocols (e.g., TCP/IP, IPX, SPX, NetBIOS, Ethernet, ARCNET, SONET, SDH, Fiber Distributed Data Interface (FDDI), RS232, RS485, IEEE 802.11, IEEE 802.11a, IEEE 802.11b, IEEE 802.11g, CDMA, GSM, WiMax and direct asynchronous connections). One version of the computing device <b>100</b> includes a network interface <b>118</b> able to communicate with additional computing devices <b>100</b>&#x2032; via any type and/or form of gateway or tunneling protocol such as Secure Socket Layer (SSL) or Transport Layer Security (TLS), or the Citrix Gateway Protocol manufactured by Citrix Systems, Inc. Versions of the network interface <b>118</b> can comprise any one of: a built-in network adapter; a network interface card; a PCMCIA network card; a card bus network adapter; a wireless network adapter; a USB network adapter; a modem; or any other device suitable for interfacing the computing device <b>100</b> to a network capable of communicating and performing the methods and systems described herein.</p>
<p id="p-0045" num="0044">Embodiments of the computing device <b>100</b> include any one of the following I/O devices <b>130</b>A-<b>130</b>N: a keyboard <b>126</b>; a pointing device <b>127</b>; mice; trackpads; an optical pen; trackballs; microphones; drawing tablets; video displays; speakers; inkjet printers; laser printers; and dye-sublimation printers; or any other input/output device able to perform the methods and systems described herein. An I/O controller <b>123</b> may in some embodiments connect to multiple I/O devices <b>103</b>A-<b>130</b>N to control the one or more I/O devices. Some embodiments of the I/O devices <b>130</b>A-<b>130</b>N may be configured to provide storage or an installation medium <b>116</b>, while others may provide a universal serial bus (USB) interface for receiving USB storage devices such as the USB Flash Drive line of devices manufactured by Twintech Industry, Inc. Still other embodiments include an I/O device <b>130</b> that may be a bridge between the system bus <b>150</b> and an external communication bus, such as: a USB bus; an Apple Desktop Bus; an RS-232 serial connection; a SCSI bus; a FireWire bus; a FireWire 800 bus; an Ethernet bus; an AppleTalk bus; a Gigabit Ethernet bus; an Asynchronous Transfer Mode bus; a HIPPI bus; a Super HIPPI bus; a SerialPlus bus; a SCI/LAMP bus; a FibreChannel bus; or a Serial Attached small computer system interface bus.</p>
<p id="p-0046" num="0045">In some embodiments, the computing machine <b>100</b> can connect to multiple display devices <b>124</b>A-<b>124</b>N, in other embodiments the computing device <b>100</b> can connect to a single display device <b>124</b>, while in still other embodiments the computing device <b>100</b> connects to display devices <b>124</b>A-<b>124</b>N that are the same type or form of display, or to display devices that are different types or forms. Embodiments of the display devices <b>124</b>A-<b>124</b>N can be supported and enabled by the following: one or multiple I/O devices <b>130</b>A-<b>130</b>N; the I/O controller <b>123</b>; a combination of I/O device(s) <b>130</b>A-<b>130</b>N and the I/O controller <b>123</b>; any combination of hardware and software able to support a display device <b>124</b>A-<b>124</b>N; any type and/or form of video adapter, video card, driver, and/or library to interface, communicate, connect or otherwise use the display devices <b>124</b>A-<b>124</b>N. The computing device <b>100</b> may in some embodiments be configured to use one or multiple display devices <b>124</b>A-<b>124</b>N, these configurations include: having multiple connectors to interface to multiple display devices <b>124</b>A-<b>124</b>N; having multiple video adapters, with each video adapter connected to one or more of the display devices <b>124</b>A-<b>124</b>N; having an operating system configured to support multiple displays <b>124</b>A-<b>124</b>N; using circuits and software included within the computing device <b>100</b> to connect to and use multiple display devices <b>124</b>A-<b>124</b>N; and executing software on the main computing device <b>100</b> and multiple secondary computing devices to enable the main computing device <b>100</b> to use a secondary computing device's display as a display device <b>124</b>A-<b>124</b>N for the main computing device <b>100</b>. Still other embodiments of the computing device <b>100</b> may include multiple display devices <b>124</b>A-<b>124</b>N provided by multiple secondary computing devices and connected to the main computing device <b>100</b> via a network.</p>
<p id="p-0047" num="0046">In some embodiments, the computing machine <b>100</b> can execute any operating system, while in other embodiments the computing machine <b>100</b> can execute any of the following operating systems: versions of the MICROSOFT WINDOWS operating systems such as WINDOWS 3.x; WINDOWS 95; WINDOWS 98; WINDOWS 2000; WINDOWS NT 3.51; WINDOWS NT 4.0; WINDOWS CE; WINDOWS XP; and WINDOWS VISTA; the different releases of the Unix and Linux operating systems; any version of the MAC OS manufactured by Apple Computer; OS/2, manufactured by International Business Machines; any embedded operating system; any real-time operating system; any open source operating system; any proprietary operating system; any operating systems for mobile computing devices; or any other operating system. In still another embodiment, the computing machine <b>100</b> can execute multiple operating systems. For example, the computing machine <b>100</b> can execute PARALLELS or another virtualization platform that can execute or manage a virtual machine executing a first operating system, while the computing machine <b>100</b> executes a second operating system different from the first operating system.</p>
<p id="p-0048" num="0047">The computing machine <b>100</b> can be embodied in any one of the following computing devices: a computing workstation; a desktop computer; a laptop or notebook computer; a server; a handheld computer; a mobile telephone; a portable telecommunication device; a media playing device; a gaming system; a mobile computing device; a netbook; a device of the IPOD family of devices manufactured by Apple Computer; any one of the PLAYSTATION family of devices manufactured by the Sony Corporation; any one of the Nintendo family of devices manufactured by Nintendo Co; any one of the XBOX family of devices manufactured by the Microsoft Corporation; or any other type and/or form of computing, telecommunications or media device that is capable of communication and that has sufficient processor power and memory capacity to perform the methods and systems described herein. In other embodiments the computing machine <b>100</b> can be a mobile device such as any one of the following mobile devices: a JAVA-enabled cellular telephone or personal digital assistant (PDA), such as the i55sr, i58sr, i85s, i88s, i90c, i95c1, or the im1100, all of which are manufactured by Motorola Corp; the 6035 or the 7135, manufactured by Kyocera; the i300 or i330, manufactured by Samsung Electronics Co., Ltd; the TREO 180, 270, 600, 650, 680, 700p, 700w, or 750 smart phone manufactured by Palm, Inc; any computing device that has different processors, operating systems, and input devices consistent with the device; or any other mobile computing device capable of performing the methods and systems described herein. In still other embodiments, the computing device <b>100</b> can be any one of the following mobile computing devices: any one series of Blackberry, or other handheld device manufactured by Research In Motion Limited; the iPhone manufactured by Apple Computer; Palm Pre; a Pocket PC; a Pocket PC Phone; or any other handheld mobile device.</p>
<p id="p-0049" num="0048">Illustrated in <figref idref="DRAWINGS">FIG. 2</figref> is block diagram that illustrates an embodiment of a physical machine <b>302</b> environment configured to provision a virtual disk, but not configured to provision a virtual disk having network interface card (NIC) teaming capabilities. The physical machine <b>302</b> includes a set of communication protocols such as the TCP/IP protocols <b>314</b> or the IPX/SPX protocols <b>316</b> that can be used to transmit data over a network. The physical machine further includes two NICS, NIC <b>1</b> <b>310</b> and NIC <b>2</b> <b>312</b>. Also included in the physical machine <b>302</b> a network driver interface specification (NDIS) wrapper <b>304</b> in communication with a network stack filter driver <b>306</b>, a first NIC driver <b>320</b>, a second NIC driver <b>326</b>, a first miniport driver instance <b>322</b> and a second miniport driver instance <b>328</b>. The network filter driver (BNNS) <b>306</b> is further in communication with a protocol driver (BNIStack) <b>308</b>.</p>
<p id="p-0050" num="0049">Further referring to <figref idref="DRAWINGS">FIG. 2</figref>, and in more detail, the physical machine <b>302</b> is a computing machine having the ability to perform logic or functions in accordance with programmed instructions. In some embodiments, the physical machine <b>302</b> may be a computing workstation, a desktop computer, a laptop or notebook computer, a server, or any of the other embodiments of the computing machine <b>100</b> listed above. Still further embodiments include a physical machine <b>302</b> that is referred to by any of the following identifying labels: computing machine; computer; local computing machine; remote computing machine; first computing machine; second computing machine; third computing machine; machine; or any other identifier used to denote some type of system having a processor and a memory element, wherein the processor is able to execute software commands. The physical machine <b>302</b> may be a physical computing machine or virtual computing machine, and may have a characteristic or characteristics identifying the computing machine as one of either of a physical machine or virtual machine.</p>
<p id="p-0051" num="0050">A local physical disk (not shown) can be, in some embodiments, included in the physical machine <b>302</b> and can be a hard disk drive. In further embodiments, the local physical disk may be a combination of physical or virtual disks in a Redundant Array of Independent Disks (RAID). In one embodiment, the local physical disk is in direct communication with any one of the following machine components: an installer program (not shown), and the network driver interface specification (NDIS) wrapper <b>304</b>. In another embodiment, the local physical disk (not shown) communicates with the following machine components: a first NIC driver <b>320</b>, a second NIC driver <b>326</b>, a first miniport driver instance <b>322</b> and a second miniport driver instance <b>328</b>. While in some embodiments a local physical disk can be included, in other embodiments a virtual disk can be included.</p>
<p id="p-0052" num="0051">In communication with the NDIS wrapper <b>304</b> is a network filter driver (BNNS) <b>306</b> that intercepts network packets and determines if the network packets should be de-multiplexed to the NDIS wrapper <b>304</b> or BNIStack <b>308</b>. In one embodiment the BNNS <b>306</b> can determine a packet's destination by examining the packet's header, and determining whether the sockets match. The BNNS <b>306</b> is an intermediate driver for the NDIS wrapper <b>304</b> in that it can bind to third-party NICs and provide some network services. BNNS <b>306</b> is in communication with the BNIStack <b>308</b> which is the protocol driver for computing machines. The BNIStack <b>308</b> can send and receive messages from the filter driver (BNNS) <b>306</b> that filters all read/write requests issued to a virtual disk on either a client or a server. When the read/write requests are issued to a virtual disk, the requests are filtered and sent to the protocol driver <b>308</b>.</p>
<p id="p-0053" num="0052">Further in communication with the NDIS wrapper <b>304</b> is a grouping of elements related to the first NIC <b>310</b> and the second NIC <b>312</b> including a NIC driver <b>320</b>, <b>326</b> and a miniport driver instance <b>322</b>, <b>328</b>. The first and second NIC drivers <b>320</b>, <b>326</b> are drivers used by the operating system or the NDIS wrapper <b>304</b> to communicate with the first and second NICs <b>310</b>, <b>312</b>. In some embodiments, the NIC drivers <b>320</b>, <b>326</b> can be device drivers that provide an abstraction layer between the physical NICs <b>310</b>, <b>312</b> and the operating system. The first and second miniport driver instances <b>322</b>, <b>328</b> can facilitate communication between the operating system and operating system components and other class drivers such as the NIC drivers <b>320</b>, <b>326</b>. In one embodiment, the first and second miniport driver instances <b>322</b>, <b>328</b> are drivers that provide support for a specific network interface card present in a physical machine by translating inputs and outputs from the physical NIC into a format that the operating system can read and interact with, and may enable a computing machine to communicate over a network with a second computing machine (not illustrated). In one embodiment, each of the NIC drivers <b>320</b>, <b>326</b>; and the miniport driver instances <b>322</b>, <b>328</b> are used by the computing machine to communicate with the NICs <b>310</b>, <b>312</b> and to further communication over a network with remote computing machines.</p>
<p id="p-0054" num="0053">In one embodiment, a NDIS wrapper <b>304</b> is included in the physical machine <b>302</b>. The NDIS wrapper <b>304</b>, in some embodiments, is a set of export libraries that provide both an abstraction layer and portability for all interactions between a NIC or NIC miniport driver and the operating system. When a program instructs the physical machine <b>302</b> to bind to a miniport driver <b>322</b>, <b>328</b>, the NDIS wrapper <b>304</b> may generate the resultant binding information which can be stored within the operating system, and included within the created virtual disk. In one embodiment, the physical machine <b>302</b> may contain, in lieu of the NDIS wrapper <b>304</b>, an application, function, routine, logic, virtual object, or other set of code instructions having substantially equivalent functionality to that of the NDIS wrapper <b>304</b>.</p>
<p id="p-0055" num="0054">Further included in the physical machine <b>302</b> is a first and second NIC <b>310</b>, <b>312</b>. In some embodiments, the NICs <b>310</b>, <b>312</b> can be the same type of NIC, while in other embodiments, the NICs <b>310</b>, <b>312</b> can be different types of NICs. The NIC can be referred to as a network adapter, a network interface controller, a LAN adapter or any other moniker indicating that the NIC is a hardware component within the physical machine <b>302</b> that permits the physical machine <b>302</b> to communicate over a network with other machines. In many embodiments, the NICs <b>310</b>, <b>312</b> use MAC addresses, or unique serial numbers assigned to each NIC, to provide low level addressing at the physical network layer. While <figref idref="DRAWINGS">FIG. 2A</figref> illustrates two NICs <b>310</b>, <b>312</b>, in other embodiments, any number of NICs can be included in the physical machine <b>302</b>.</p>
<p id="p-0056" num="0055">In one embodiment, the system described in <figref idref="DRAWINGS">FIG. 2A</figref> can include a NIC teaming intermediate driver that can be used to implement a NIC team. The NIC teaming intermediate driver, in some embodiments, can be any NIC teaming driver. In other embodiments, the NIC teaming intermediate driver can be a NIC teaming driver manufactured by INTEL, INTEL ADVANCED NETWORKING SERVICES, or BROADCOM, BROADCOM ADVANCED SERVER PROGRAM. The NIC teaming driver can balance inbound and outbound network traffic amongst one or more NICs. In one embodiment, the NIC teaming driver can act as a single virtual protocol driver, and can enumerate a single virtual miniport interface that the upper NDIS wrapper <b>304</b> can communicate with. Thus, the NIC teaming driver can act as a single driver for all NICs included in the system. Further, the NIC teaming driver can handle load balancing and fault tolerance for the network traffic handled by each NIC in the NIC team.</p>
<p id="p-0057" num="0056">In some embodiments, the BNNS filter driver <b>306</b> can interface with the NIC teaming driver to take advantage of the functionality provided by the NIC teaming driver. Embodiments where the BNNS filter driver <b>306</b> positions itself on top of a NIC teaming driver may include: a NIC miniport driver that can load at boot time (Start=0); a NIC intermediate driver that can load at boot time (Start=0); and a target device that can be installed after NIC teaming is properly installed and configured. In the above-mentioned embodiment, the NIC teaming driver may only expose one teamed NIC network interface through software based multiplexing or hardware based 802.3ad link aggregation for the upper layer application (BNNS) <b>306</b>. Applications such as operating system streaming and remote application delivery applications (e.g. XENAPP, XENDESKTOP) traffic can benefit from NIC teaming. Further, the virtual disk or the target computer onto which the virtual disk is installed, may take advantage of the NIC teaming, the NIC hardware and software rich functionality. The remote application delivery application may also benefit from NIC teaming since it only needs to communicate with the single IP address.</p>
<p id="p-0058" num="0057">Illustrated in <figref idref="DRAWINGS">FIG. 2B</figref> is an embodiment of the system illustrated in <figref idref="DRAWINGS">FIG. 2A</figref> that further includes a teaming module <b>362</b> that can facilitate changing the configuration of the members of the NIC team. Also included in this embodiment of the physical machine are the elements of NIC teaming software that can be used to create the single aggregate NIC <b>364</b> representative of the NIC team, these elements include: a MUX miniport driver <b>350</b> in communication with a NIC teaming intermediate driver <b>352</b> which is further in communication with a first MUX protocol instance <b>354</b> and a second MUX protocol instance <b>356</b>. All other aspects of the physical machine <b>302</b>, as described in <figref idref="DRAWINGS">FIG. 2A</figref>, are included.</p>
<p id="p-0059" num="0058">The teaming module <b>362</b> can be any program, set of commands or software element executable by a processor on the physical machine <b>302</b> to alter the NIC teaming software <b>364</b> and further alter the configuration of the NIC team created by the NIC teaming software. In one embodiment, the teaming module <b>362</b> can carry out the method <b>402</b> illustrated in <figref idref="DRAWINGS">FIG. 3</figref>. In another embodiment, the teaming module <b>362</b> can carry out any number of steps needed to alter the MAC addresses of the members of a NIC team so that they all have a team MAC address corresponding to the MAC address of a NIC used to PXE boot a streamed virtual hard disk. In some embodiments, the teaming module <b>362</b> may execute on the physical machine <b>302</b> while in other embodiments, the teaming module <b>362</b> may execute on a remote computing machine in communication with the physical machine <b>302</b>.</p>
<p id="p-0060" num="0059">A third party or proprietary teaming software <b>364</b> can be used to create a NIC team. This NIC teaming software <b>364</b> can in some embodiments be used to generate the driver components of a single aggregate NIC <b>364</b> representative of the NIC team. In one embodiment, the teaming software <b>364</b> can include a multiplexed miniport driver <b>350</b> that comprises the NIC team's virtual miniport binding information, the NIC teaming intermediate driver <b>352</b> and the first and second multiplexed (MUX) protocol instances <b>354</b>, <b>356</b>. In one embodiment, the first and second MUX protocol instances <b>354</b>, <b>356</b> correspond to the members of the NIC team which in this embodiment is the first and second NIC <b>310</b>, <b>312</b>. The number of MUX protocol instances <b>354</b>, <b>356</b> can in some embodiments correspond to the number of NICs included in the team. The physical machine <b>302</b> uses the NIC teaming software <b>364</b> components as the drivers used to communicate with the members of the NIC team, i.e. the first and second NICS <b>310</b>, <b>312</b>, and to communicate over a network with remote computing machines. In some embodiments, the NIC teaming software <b>364</b> can load balance the transmission and receipt of network packets amongst the members of the NIC team. Load balancing using the NIC teaming software <b>364</b> can increase the speed at which network packets are transmitted and received over the network. In other embodiments, the NIC teaming software <b>364</b> can be used to introduce NIC redundancy by issuing transmit/receive commands to a second NIC team member when a first NIC team member fails. The teaming software <b>364</b> can in some embodiments generate the NIC team with a NIC team virtual MAC address or network address.</p>
<p id="p-0061" num="0060">While <figref idref="DRAWINGS">FIGS. 2A and 2B</figref> illustrate embodiments of a system that utilizes NIC teaming, in some embodiments the systems can be employed on a virtual disk. Thus, the components illustrated as executing on the physical machine <b>302</b> can execute on a virtual disk. In some embodiments, the virtual disk can be deployed on a virtual machine, while in other embodiments the virtual disk can be deployed on a physical machine <b>302</b>. In some embodiments, substantially each one of the components, with the exception of the physical NICs <b>310</b>, <b>312</b> can be deployed on a virtual disk. In other embodiments, substantially each one of the components with the exception of the physical NICs <b>310</b>, <b>312</b> and the teaming module <b>362</b> can be deployed on a virtual disk.</p>
<p id="p-0062" num="0061">Illustrated in <figref idref="DRAWINGS">FIG. 3</figref> is an embodiment of a method <b>402</b> for aiding the NIC teaming software <b>364</b> in altering the configuration of the NIC team to further create a virtual disk that can have NIC teaming capabilities once it is streamed to a remote machine. The method <b>402</b> includes first identifying the NIC team (Step <b>404</b>) and then enumerating all of the NICs within the registry (Step <b>406</b>). Once all of the NICs are enumerated, a determination must be made as to which NICs are within the NIC team (Step <b>408</b>). The network address or the MAC address of the NIC that the virtual disk uses to PXE boot is identified (Step <b>410</b>). Once this PXE boot MAC address is identified, the MAC addresses or network addresses of each NIC that is a member of the NIC team is replaced with the PXE boot MAC address (Step <b>412</b>). In some embodiments, all or portions of the method <b>402</b> can be carried out by a teaming module executing on the physical computer. In other embodiments, the teaming module can execute on another computer that is in communication with the physical computer.</p>
<p id="p-0063" num="0062">Further referring to <figref idref="DRAWINGS">FIG. 3</figref>, and in more detail, the NIC team is identified (Step <b>404</b>) by identifying whether the upper bind of the NIC team points to the BNNS <b>306</b>. The upper bind is a characteristic of a NIC that identifies where the NIC should pass packets once they are received. In embodiments where the NIC team's upper bind indicates that network packets should be passed up to the BNNS <b>306</b>, that NIC team will be identified as the NIC team of interest or the NIC team to be altered by the teaming module <b>362</b>. In some embodiments, the teaming module <b>362</b> identifies the NIC team by searching through a registry or database to identify the NIC team's virtual miniport binding information. In other embodiments, the binding information and therefore the NIC team can be identified by searching through a registry and iterating over subkeys of
<ul id="ul0001" list-style="none">
    <li id="ul0001-0001" num="0063">HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Class\{4D36E972-E25-11CE-BFC1-08002BE10318} to determine which subkey has an upper bind that specified in BNNS. Determining that the upper bind specifies BNNS is by finding a subkey where &#x3c;XXXX&#x3e;\Linkage\UpperBind=BNNS. In some embodiments, determining the NIC team includes determining confirmation information associated with the third party NIC team. In one embodiment, the following is recorded by the teaming module <b>362</b>, &#x3c;XXXX&#x3e;\Linkage\Export=\Device\{guid}.</li>
</ul>
</p>
<p id="p-0064" num="0064">In some embodiments, identifying the NIC team can further include identifying or obtaining the PXE MAC address of the NIC team. This PXE MAC address can be bound to the BNNS <b>306</b>. Determining the PXE MAC address of the NIC team can include searching through the registry of the virtual disk to identify a key related to a NIC team and bound to the BNNS network filter <b>306</b>. Obtaining the NIC team MAC address can, in some embodiments, occur in response to identifying the NIC team.</p>
<p id="p-0065" num="0065">Once the NIC team has been identified, all of the NICs are enumerated (Step <b>406</b>) by enumerating all NICs and each by searching through the registry for NICs have a global identifier or guid similar to the one stored by the teaming module <b>362</b>. In one embodiment enumerating all the NICs includes enumerating all the NICs on a physical machine <b>302</b>. In other embodiments, enumerating all the NICs includes enumerating all the NICs included in the NIC team. Enumerating the NICs in the NIC team can include parsing the registry for NICs that have a global identifier substantially the same as the global identifier of the NIC team.</p>
<p id="p-0066" num="0066">The teaming module <b>362</b> then identifies which NICs are members of the NIC team (Step <b>408</b>) by determining which of the enumerated NICs have an upper bind specifying BNNS. In some embodiments determining whether an enumerated NIC has an upper bind specifying BNNS includes determining whether the MiniportBindingList subkey matches the LinkageExport of the identified NIC team. The LinkageExport of the identified NIC team is equal to BNNS.</p>
<p id="p-0067" num="0067">The teaming module <b>362</b> then identifies the network address or MAC address used to PXE boot the virtual hard disk (Step <b>410</b>), and replaces the network address or MAC address associated with each member of the NIC team with the PXE boot MAC address (Step <b>412</b>). This step, in some embodiments, can occur in response to obtaining the NIC team MAC address. In other embodiments, the PXE boot MAC address can be a network boot address that was used by the system to PXE boot the virtual disk. In one embodiment, the MAC addresses of each NIC within the NIC team are replaced by searching through the subkeys of
<ul id="ul0002" list-style="none">
    <li id="ul0002-0001" num="0068">HKEY_LOCAL_MACHINE\SYSTEM\CurrentControllSet\Control\Class\{4D36E972-E25-11CE-BFC1-08002BE10318} and inserting the PXE boot MAC address in place of the NIC team virtual network address stored in the registry keys for each NIC team member. In other embodiments, the MAC address of the NIC third party teaming software <b>364</b> is replaced with the PXE boot MAC address. Inserting the PXE boot MAC address in place of the virtual MAC address of the NIC team, permits the NIC teaming module included in the virtual disk to configure and recreate the team on a different machine. Once the virtual disk image is corrected via the steps described in the method <b>402</b>, the virtual disk is streamed to a remote machine.</li>
</ul>
</p>
<p id="p-0068" num="0069">In some embodiments, replacing the NIC team settings with the PXE boot MAC address can include unbinding and uninstalling the PVS target device. In these embodiments, the virtual disk may be required to be unbound and uninstalled, or the NIC team may be required to be unbound and uninstalled.</p>
<p id="p-0069" num="0070">In other embodiments, the method can further include booting the system from the virtual disk that has the modified NIC team configuration. This modified NIC team configuration can include the NIC team that has the modified NIC team MAC address. Booting the virtual disk to create the NIC team, in some embodiments, can include updating keys and subkeys of a registry of the virtual disk to include the network boot MAC address or PXE boot MAC address used to replace the NIC team MAC address.</p>
<p id="p-0070" num="0071">The present disclosure may be provided as one or more computer-readable programs embodied on or in one or more articles of manufacture. The article of manufacture may be a floppy disk, a hard disk, a compact disc, a digital versatile disc, a flash memory card, a PROM, a RAM, a ROM, a computer readable medium having instructions executable by a processor, or a magnetic tape. In general, the computer-readable programs may be implemented in any programming language. Some examples of languages that can be used include C, C++, C#, or JAVA. The software programs may be stored on or in one or more articles of manufacture as object code.</p>
<p id="p-0071" num="0072">While various embodiments of the methods and systems have been described, these embodiments are exemplary and in no way limit the scope of the described methods or systems. Those having skill in the relevant art can effect changes to form and details of the described methods and systems without departing from the broadest scope of the described methods and systems. Thus, the scope of the methods and systems described herein should not be limited by any of the exemplary embodiments and should be defined in accordance with the accompany claims and their equivalents.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A method for providing network interface card (NIC) teaming capabilities, the method comprising:
<claim-text>obtaining, by a teaming module executing on a computer, a media access control (MAC) address of a NIC team;</claim-text>
<claim-text>obtaining, by the teaming module responsive to obtaining the NIC team MAC address, a network boot MAC address used to PXE boot a virtual disk; and</claim-text>
<claim-text>replacing, by the teaming module, the NIC team MAC address of each NIC in the NIC team with the obtained network boot MAC address.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:
<claim-text>identifying the NIC team, the NIC team available to the virtual disk.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:
<claim-text>booting the virtual disk to create the NIC team.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the NIC team includes a plurality of NICs, the method further comprising:
<claim-text>replacing, by the teaming module, the NIC team MAC address of each NIC of the plurality of NICs in the NIC team with the obtained network boot MAC address.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:
<claim-text>modifying the virtual disk to provide NIC teaming capabilities.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the virtual disk includes NIC teaming capabilities.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein obtaining the network boot MAC address further comprises obtaining a PXE boot MAC address.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:
<claim-text>identifying the NIC team, the NIC team available to the virtual disk; and</claim-text>
<claim-text>enumerating each NIC included in the NIC team.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:
<claim-text>identifying the NIC team, wherein the NIC team is configured to bind to a network stack filter driver.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:
<claim-text>parsing a registry of the virtual disk for a subkey specifying a bind to a network stack filter driver.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein obtaining the NIC team MAC address further comprises:
<claim-text>obtaining a NIC team MAC address bound to a network stack filter driver.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:
<claim-text>updating a registry of the virtual disk to include the network boot MAC address.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. A system for providing network interface card (NIC) teaming capabilities, the system comprising:
<claim-text>a teaming module executing on a computer to:
<claim-text>obtain a media access control (MAC) address of a NIC team available to a virtual disk, the NIC team comprising multiple NICs,</claim-text>
<claim-text>obtain, responsive to obtaining the NIC team MAC address, a network boot MAC address used to PXE boot the virtual disk, and</claim-text>
<claim-text>replace the NIC team MAC address of each NIC in the NIC team with the obtained network boot MAC address.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The system of <claim-ref idref="CLM-00013">claim 13</claim-ref>, further comprising the teaming module executing on the computer to identify the NIC team.</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The system of <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein the teaming module identifies the NIC team by identifying a NIC team bound to a network stack filter driver.</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The system of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the NIC team is bound to the network stack filter driver.</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The system of <claim-ref idref="CLM-00014">claim 14</claim-ref>, further comprising the teaming module executing on the computer to set, responsive to identifying the NIC team, the media access control (MAC) address of the NIC team.</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The system of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the network boot MAC address comprises a PXE boot MAC address of a NIC used to PXE boot the virtual disk.</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. The system of <claim-ref idref="CLM-00013">claim 13</claim-ref>, further comprising the teaming module executing on the computer to enumerate each NIC included in the NIC team.</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. The system of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the teaming module updates a registry of the virtual disk to include the network boot MAC address.</claim-text>
</claim>
</claims>
</us-patent-grant>

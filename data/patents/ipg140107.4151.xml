<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08625220-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08625220</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>12896757</doc-number>
<date>20101001</date>
</document-id>
</application-reference>
<us-application-series-code>12</us-application-series-code>
<us-term-of-grant>
<us-term-extension>740</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>11</class>
<subclass>B</subclass>
<main-group>5</main-group>
<subgroup>09</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>360 49</main-classification>
<further-classification>360 40</further-classification>
<further-classification>360 39</further-classification>
</classification-national>
<invention-title id="d2e53">Constrained on-the-fly interleaver address generator circuits, systems, and methods</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>3253084</doc-number>
<kind>A</kind>
<name>Taylor</name>
<date>19660500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>7023946</doc-number>
<kind>B2</kind>
<name>Sawada et al.</name>
<date>20060400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>369 5334</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>7832842</doc-number>
<kind>B2</kind>
<name>Jackson Pulver et al.</name>
<date>20101100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>347 57</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>2004/0136170</doc-number>
<kind>A1</kind>
<name>Tsunezaki et al.</name>
<date>20040700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>DE</country>
<doc-number>1590407</doc-number>
<date>19700400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>DE</country>
<doc-number>102008061234</doc-number>
<date>20100600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>GB</country>
<doc-number>877481</doc-number>
<date>19610900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00008">
<othercit>PCT/US2011/052507 PCT Notification and Partial Search Report dated Jan. 25, 2012, 5 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>25</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>None</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>10</number-of-drawing-sheets>
<number-of-figures>10</number-of-figures>
</figures>
<us-related-documents>
<us-provisional-application>
<document-id>
<country>US</country>
<doc-number>61247913</doc-number>
<date>20091001</date>
</document-id>
</us-provisional-application>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20110080669</doc-number>
<kind>A1</kind>
<date>20110407</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Parthasarathy</last-name>
<first-name>Sivagnanam</first-name>
<address>
<city>Carlsbad</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Garani Srinivasa</last-name>
<first-name>Shayan</first-name>
<address>
<city>San Diego</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="003" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Thipparthi</last-name>
<first-name>Sudha</first-name>
<address>
<city>Los Angeles</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Parthasarathy</last-name>
<first-name>Sivagnanam</first-name>
<address>
<city>Carlsbad</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Garani Srinivasa</last-name>
<first-name>Shayan</first-name>
<address>
<city>San Diego</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="003" designation="us-only">
<addressbook>
<last-name>Thipparthi</last-name>
<first-name>Sudha</first-name>
<address>
<city>Los Angeles</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Graybeal Jackson LLP</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>STMicroelectronics, Inc.</orgname>
<role>02</role>
<address>
<city>Coppell</city>
<state>TX</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Edun</last-name>
<first-name>Muhammad N</first-name>
<department>2686</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">An interleave address generation circuit includes a plurality of linear feedback shift registers operable to generate addresses for permuting a data block in a first domain to a data block in a second domain on a subword basis. The interleave address generation circuit is operable to generate the lane addresses for each subword and the linear feedback registers configured to generate circulant addresses and sub-circulant address to map bits in each subword in the data block in the first domain to a corresponding subword in the second domain.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="156.04mm" wi="226.82mm" file="US08625220-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="231.31mm" wi="183.81mm" orientation="landscape" file="US08625220-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="233.60mm" wi="167.05mm" orientation="landscape" file="US08625220-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="206.25mm" wi="166.71mm" orientation="landscape" file="US08625220-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="241.22mm" wi="192.11mm" orientation="landscape" file="US08625220-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="219.46mm" wi="138.68mm" orientation="landscape" file="US08625220-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="165.69mm" wi="183.81mm" orientation="landscape" file="US08625220-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="179.24mm" wi="185.50mm" orientation="landscape" file="US08625220-20140107-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00008" num="00008">
<img id="EMI-D00008" he="206.93mm" wi="182.88mm" orientation="landscape" file="US08625220-20140107-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00009" num="00009">
<img id="EMI-D00009" he="194.06mm" wi="174.33mm" orientation="landscape" file="US08625220-20140107-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00010" num="00010">
<img id="EMI-D00010" he="175.60mm" wi="173.99mm" orientation="landscape" file="US08625220-20140107-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?RELAPP description="Other Patent Relations" end="lead"?>
<heading id="h-0001" level="1">PRIORITY CLAIM</heading>
<p id="p-0002" num="0001">This application claims the benefit of U.S. Provisional Patent Application No. 61/247,913, filed Oct. 1, 2009, which application is incorporated herein by reference in its entirety.</p>
<?RELAPP description="Other Patent Relations" end="tail"?>
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0002" level="1">TECHNICAL FIELD</heading>
<p id="p-0003" num="0002">Embodiments of the present invention relate generally to data communications and relate more specifically to the interleaving and deinterleaving of data being communicated over a communications channel.</p>
<heading id="h-0003" level="1">BACKGROUND</heading>
<p id="p-0004" num="0003">Digital transmission systems commonly involve techniques for the detection of digital data represented by a sequence of symbols, where a symbol typically encodes or represents a number of bits. Symbols are transferred as signals through a communications channel, such as a magnetic or optical storage disk channel or a wireless channel. During transfer through a communications channel noise is typically undesirably added to the transmitted signals. In a magnetic recording communications channel, for example, data symbols are written to and stored on a magnetic medium through an encoding process and then read from the magnetic medium through a decoding process. For processing convenience, the encoding and decoding processes operate on blocks of data, each block of data representing a portion of an input data sequence.</p>
<p id="p-0005" num="0004">Many communications channels can experience a phenomenon known as &#x201c;burst errors,&#x201d; where a burst error is generally considered to be a contiguous sequence of symbols being transferred through a communications channel such that the first and last symbols in the sequence are in error. Noise corrupts a transmitted signal representing the sequence of symbols for a period of time equivalent to the period of several encoded or decoded being transmitted. The noise thus results in a group or &#x201c;burst&#x201d; of erroneous symbols that undesirably increases the bit error rate (BER) of the communications channel. Furthermore, in communications channels that involve iterative decoding, such as channels utilizing low density parity check (LDPC) codes in the encoding and decoding processes, burst errors can be difficult to correct since such burst errors can happen in a concentrated manner to relatively large numbers of consecutive symbols.</p>
<p id="p-0006" num="0005">Many communications channels, such as magnetic storage communications channels, interleave encoded data such that the data of respective symbols in a block of data are permuted. Interleaving distributes data so that burst errors affect only a relatively small number of bits in each symbol or group of symbols for which error checking and correction is performed during the encoding and decoding processes. In this way, interleaving the symbols in a block of data prior to transmission of the block through the channel distributes burst errors throughout the deinterleaved block. This enables the erroneous bits in the deinterleaved block to be corrected through error correction utilized in such communications channels.</p>
<p id="p-0007" num="0006">Nearly all communication channels use some form of error correction coding, which generally involves adding redundant information to a stream of data to enable bit errors that arise during communication to be detected and corrected. Iterative correction codes, such as turbo codes and low-density parity-check (LDPC) codes, are increasingly utilized in many communications channels, such as communications channels for magnetic storage systems. LDPC codes are a class of linear block codes which provide a near capacity performance on a large collection of communications channels, as will be appreciated by those skilled in the art. In a magnetic storage system utilizing LDPC codes, data to be written is encoded to generate a corresponding code word. If the number of erroneous bits within a given code word exceeds the error-correcting capability of the LDPC code, then the original code word and thus the original data cannot be recovered. Interleaving rearranges symbols across several codewords, creating a more uniform distribution of errors such that when deinterleaved erroneous bits are distributed across enough codewords that enable error correction to be performed on respective codewords. Improved interleaving and deinterleaving techniques are desirable.</p>
<heading id="h-0004" level="1">SUMMARY</heading>
<p id="p-0008" num="0007">An embodiment of the present invention is directed to an interleave address generation circuit that includes a plurality of linear feedback shift registers operable to generate addresses for permuting a data block in a first domain to a data block in a second domain on a subword basis. The interleave address generation circuit is operable to generate the lane addresses for each subword and the linear feedback registers configured to generate circulant addresses and sub-circulant address to map bits in each subword in the data block in the first domain to a corresponding subword in the second domain.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0005" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. 1</figref> is a functional block diagram of a communications channel including an interleaver and deinterleaver that utilize an interleaver address generation (IAG) circuitry according to an embodiment of the present invention.</p>
<p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. 2</figref> a diagram illustrating the various fields forming a mapping address in interleaved subword (ISW) format and deinterleaved subword (DSW) format for codewords in the embodiment of <figref idref="DRAWINGS">FIG. 1</figref>.</p>
<p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. 3</figref> is a functional block diagram of a conventional linear feedback shift register (LFSR) as used in the interleaver and deinterleaver of <figref idref="DRAWINGS">FIG. 1</figref>.</p>
<p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. 4</figref> is a functional block diagram of an interleave address generation (IAG) circuitry including a plurality of LFSRs for generating mapping addresses according to one embodiment of the present invention.</p>
<p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. 5</figref> is a table that can be utilized by the IAG circuitry of <figref idref="DRAWINGS">FIG. 4</figref> to constrain the generation of sub-circulant addresses given a particular circulant address according to one embodiment of the present invention.</p>
<p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. 6</figref> is a functional block diagram of a computer system including computer circuitry coupled to a data storage device that includes the communications channel of <figref idref="DRAWINGS">FIG. 4</figref> according to another embodiment of the present invention.</p>
<p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. 7</figref> is a histogram of distances in the ISI domain between any two variable nodes that participate in a given check node equation for an interleaver including the IAG circuitry of <figref idref="DRAWINGS">FIG. 4</figref>.</p>
<p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. 8</figref> is a histogram of distances in the ISI domain between any two variable nodes that participate in a given check node equation for a relative prime interleaver.</p>
<p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. 9</figref> is a histogram of distances in the ISI domain between any two variable nodes that participate in a given check node equation for a sequential interleaver.</p>
<p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. 10</figref> is a graph showing the showing the sector failure rate (SFR) versus the signal to noise ratio (SNR) for a communications channel utilizing the IAG circuitry of <figref idref="DRAWINGS">FIG. 4</figref>.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0006" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0019" num="0018">In the present description, certain details are set forth in conjunction with the described embodiments of the present invention to provide a sufficient understanding of the invention. One skilled in the art will appreciate, however, that the invention may be practiced without these particular details. Furthermore, one skilled in the art will appreciate that the example embodiments described below do not limit the scope of the present invention, and will also understand that various modifications, equivalents, and combinations of the disclosed embodiments and components of such embodiments are within the scope of the present invention. Embodiments including fewer than all the components of any of the respective described embodiments may also be within the scope of the present invention although not expressly described in detail below. Finally, the operation of well-known components and/or processes has not been shown or described in detail below to avoid unnecessarily obscuring the present invention.</p>
<p id="p-0020" num="0019">An interleaver permutes encoded data such that the data of respective symbols in a block of data are rearranged within the block. This results in burst errors affecting only a relatively small number of bits in each symbol or group of symbols for which error checking and correction is performed, as previously mentioned above. For example, one way to perform the interleaving function is through a block array in which symbols are written into the data array in a first order and read out of the array in a second order. In this way, a block of data having first addresses in a first domain is mapped to second addresses in a second domain to thereby interleave the data bits forming the block. A simple example would be to take all bits in even addresses in the first domain and map each bit into a corresponding odd address in the second domain, or vice versa. Another simple example is the generation of a plurality of pseudorandom addresses for an address space required for interleaving the block of data and storing these addresses in a memory to effectively function as a look-up table for use in mapping the data from the first domain to the second domain.</p>
<p id="p-0021" num="0020">This address mapping should occur so that the bits are randomly&#x2014;pseudo-randomly in practical implementations&#x2014;mapped from the first domain to the second domain. Furthermore, error correction is typically utilized in communications channels and in this situation the block of data will include user data bits along with parity bits generated by the error correction for the user data bits. The parity bits must also be pseudo-randomly mapped from the first domain to the second domain and also be evenly distributed throughout the interleaved block of data in order to maximize the effectiveness of the interleaving in reducing burst errors thereby improve the performance of the communications channel.</p>
<p id="p-0022" num="0021">Embodiments of the present invention utilize linear feedback shift registers (LFSR) to generate the pseudorandom addresses for performing the interleaving and deinterleaving functions on blocks of data being communicated through a communications channel. <figref idref="DRAWINGS">FIG. 1</figref> is a functional block diagram of a communications channel <b>100</b> including interleave and deinterleave circuitry according to an embodiment of the present invention. The communications channel <b>100</b> includes a write portion <b>102</b><i>a </i>that encodes received message bits MB utilizing a low density parity check (LDPC) code and stores these encoded message bits on a storage medium <b>104</b>, such as a magnetic or optical disk or other suitable type of memory device. A read portion <b>102</b><i>b </i>reads the encoded data from the storage medium <b>104</b> and decodes this encoded data to thereby output the recovered or originally stored message bits MB from the communications channel <b>100</b>.</p>
<p id="p-0023" num="0022">There are k message bits MB that are input to the write portion <b>102</b><i>a</i>. More specifically, in the write portion <b>102</b><i>a </i>a cyclic redundancy check (CRC) and run length limited (RLL) encoder <b>106</b> receive the k message bits MB. First, the encoder <b>106</b> applies a CRC code to the k message bits to generate CRC coded data from the message bits. CRC coded data is generated for each k-bit block of message bits MB. The encoder <b>106</b> then performs RLL encoding on the CRC coded data to thereby generate RLL encoded data <b>107</b>. The RLL encoding helps with timing requirements for accurately reading data from the storage medium <b>104</b>, as will be appreciated by those skilled in the art.</p>
<p id="p-0024" num="0023">The encoder <b>106</b> provides the RLL encoded data <b>107</b> to an LDPC encoder <b>108</b> that includes a generator matrix G for encoding the RLL encoded data to generate codewords CW of the LDPC code. An LDPC code includes the generator matrix G for encoding data into corresponding codewords CW and a parity check matrix H and corresponding Tanner graph for decoding the codewords, as will be appreciated by those skilled in the art. Each codeword CW from the LDPC encoder <b>108</b> includes user data bits and parity bits and is output to an interleaver <b>109</b><i>a </i>that includes interleave address generation (IAG) circuitry <b>109</b><i>b </i>containing a plurality of linear feedback shift registers (LFSRs), which are not shown in <figref idref="DRAWINGS">FIG. 1</figref> but which will be described in more detail below. The interleaver <b>109</b><i>a </i>utilizes mapping addresses generated by the IAG circuitry <b>109</b><i>b </i>to interleave the user data and parity bits in the codewords CW to generate interleaved codewords ICW that are then applied to heads and media circuitry <b>110</b> which, in turn, stores these interleaved codewords on the storage medium <b>104</b>.</p>
<p id="p-0025" num="0024">During a read operation, the read portion <b>102</b><i>b </i>reads data stored on the storage medium <b>104</b> and processes the data to output the originally stored message bits MB. More specifically, the read portion <b>102</b><i>b </i>includes analog equalization and timing circuitry <b>112</b> that works in combination with the heads and media circuitry <b>110</b> to sense data stored on the storage medium <b>104</b>. The detailed operation of the analog equalization and timing circuitry <b>112</b>, heads and media circuitry <b>110</b>, and other components in a communication channel <b>100</b> will be understood by those skilled in the art and thus are not described in more detail than necessary herein in order to avoid unnecessarily obscuring aspects of the present invention. Briefly, the equalization and timing circuitry <b>112</b> equalizes analog signals from the heads and media circuitry <b>110</b> that are generated in sensing data stored on the storage medium <b>104</b>. This equalization compensates for intersymbol interference (ISI) in the signal from the heads and media circuitry <b>110</b> that corresponds to the data being sensed from the storage medium <b>104</b>. The analog equalization and timing circuitry <b>112</b> also performs analog-to-digital conversion of the equalized signal and outputs equalized samples that are digital signals corresponding to the data being read.</p>
<p id="p-0026" num="0025">Channel detection scheme circuitry <b>114</b> receives the equalized samples from the analog equalization and timing circuitry <b>112</b>. The channel detection scheme circuitry <b>114</b> performs the iterative decoding of the equalized samples using an associated iterative decoding algorithm, typically the soft output Viterbi algorithm (SOVA) or the BCJR algorithm, as will be appreciated by those skilled in the art. The channel detection scheme circuitry <b>114</b> outputs soft decisions or soft information values, namely log-likelihood ratios (LLRs) of the detected bits to a deinterleaver <b>115</b> that deinterleaves the received soft information values using addresses generated by the IAG circuitry <b>109</b><i>b</i>. This deinterleaving restores the soft information values to their original addresses, meaning the soft information value representing each bit is in its original position as it was in the codeword CW output by the LDPC encoder <b>108</b>. In this was the deinterleaver <b>115</b> utilizes the IAG circuitry <b>109</b><i>b </i>to map the soft information values that collectively represent the interleaved code word ICW to soft information values that collectively represent the codeword CW.</p>
<p id="p-0027" num="0026">An LDPC decoder <b>116</b> receives these soft information values that collectively represent the codeword CW and decodes these values to generate the RLL encoded data <b>107</b> originally supplied to the LDPC encoder <b>108</b>. There is feedback between the channel detection scheme circuitry <b>114</b> and the LDPC decoder <b>116</b> using standard turbo-equalization techniques, as will be understood by those skilled in the art. The LDPC decoder <b>116</b> then outputs codewords of the RLL encoded data <b>107</b> to RLL and CRC decode circuitry <b>118</b> which operates to decode the previous RLL encoding and utilizes the CRC codes to determine the accuracy of the data being read. Once the RLL and CRC decode circuitry <b>118</b> has decoded these codewords the circuitry outputs the message bits MB originally input to the communications channel <b>100</b>.</p>
<p id="p-0028" num="0027">Note that although the heads and media circuitry <b>110</b> is shown as being contained in the write portion <b>102</b><i>a</i>, this circuitry can be viewed as belonging to both the write portion and read portion <b>102</b><i>b </i>since the circuitry functions to access data stored on the storage medium <b>104</b> during both read and write operations of the communications channel <b>100</b>. Also it should be noted that the storage medium <b>104</b> can include different types of storage media in different embodiments of the present invention, such as magnetic disks, optical disks, FLASH memory, and so on.</p>
<p id="p-0029" num="0028">The structure and operation of the IAG circuitry <b>109</b><i>b </i>according to one embodiment of the present invention will now be described in more detail with reference to <figref idref="DRAWINGS">FIGS. 2-4</figref>. <figref idref="DRAWINGS">FIG. 2</figref> illustrates various fields that form a mapping address in interleaved subword (ISW) format and deinterleaved subword (DSW) format in embodiments of the present invention. Referring to <figref idref="DRAWINGS">FIG. 2</figref>, the format of a mapping address ADDR[<b>12</b>:<b>0</b>] generated by the IAG circuitry <b>109</b><i>b </i>is shown where each such mapping address is a thirteen-bit address in order to map each bit B in a data block <b>200</b> that can be up to 4864 bits long. Each data block <b>200</b> includes up to 4352 user bits UB of data along with 512 parity bits PB generated for these user bits by the LDPC encoder <b>108</b> (<figref idref="DRAWINGS">FIG. 1</figref>) that are to be collectively transferred over the communications channel <b>100</b>. The data block <b>200</b> accordingly includes up to 4864 bits with the IAG circuitry <b>109</b><i>b </i>generating an address ADDR[<b>12</b>:<b>0</b>] for each bit. These addresses map the bit from a first domain termed the LDPC decoder domain to a second domain termed the intersymbol interference (ISI) domain during interleaving by the interleaver <b>109</b><i>a</i>. The addresses ADDR[<b>12</b>:<b>0</b>] map from the ISI domain to the LDPC decoder domain during deinterleaving by the deinterleaver <b>115</b>. The IAG circuitry <b>109</b><i>b </i>generates the addresses ADDR[<b>12</b>:<b>0</b>] so that the parity bits PB bits are pseudo-randomly distributed within the block of data <b>200</b> in the ISI domain.</p>
<p id="p-0030" num="0029">The format of deinterleaver/interleaver address ADDR[<b>12</b>:<b>0</b>] is shown in <figref idref="DRAWINGS">FIG. 1</figref> as including a circulant address CA[<b>5</b>:<b>0</b>], a sub-circulant address SCA[<b>4</b>:<b>0</b>], and a lane address LA[<b>1</b>:<b>0</b>]. The range of values for each of these sub-addresses is given by the respective number of bits, except for the CA[<b>5</b>:<b>0</b>] address, as indicated in <figref idref="DRAWINGS">FIG. 1</figref>. Thus, the range of values for the lane address LA[<b>1</b>:<b>0</b>] is 0-3, the range of values for the sub-circulant address SCA[<b>4</b>:<b>0</b>] is 0-31, and the range of values for the circulant address CA[<b>5</b>:<b>0</b>] is from 0-37 (these six bits could provide values up of 0-64 but only the 38 values 0-37 are used in this embodiment).</p>
<p id="p-0031" num="0030">The information in the data block <b>200</b> in the ISI domain contains information in interleaved subword (ISW) format where the data or user bits DB and parity bits PB are interleaved. Each interleaved subword ISW includes 152 (4&#xd7;38) soft decision values and there are 32 interleaved subwords in a 512 byte sector (4096 user bits UB in data block <b>200</b>). The information in the data block <b>200</b> in the LDPC decoder domain contains information in deinterleaved subword (DSW) format and there are 32 deinterleaved subwords DSW in each LDPC codeword CW. The data block <b>200</b> shown in <figref idref="DRAWINGS">FIG. 1</figref> is in the LDPC decoder domain and thus includes 32 deinterleaved subwords DSW.</p>
<p id="p-0032" num="0031">The requirements for operation of the IAG circuitry <b>109</b><i>b </i>in generating the addresses ADDR[<b>12</b>:<b>0</b>] for operation of the deinterleaver <b>115</b> (mapping from ISWs in the ISI domain to DSWs in the LDPC decoder domain) are given below. In the described embodiment the LLR values provided by the channel detection scheme circuit <b>114</b> (<figref idref="DRAWINGS">FIG. 1</figref>) are organized into a pack buffer of 38&#xd7;4 before these values are written using the corresponding subcirculant addresses SCA[<b>4</b>:<b>0</b>]. This is repeated 38 times and four unique lane addresses LA[<b>1</b>:<b>0</b>] are generated. This results in a total of 152 addresses (4 LA[<b>1</b>:<b>0</b>] addresses times 38 circulant addresses CA[<b>5</b>:<b>0</b>]) thus generated with each address having its associated land address LA[<b>1</b>:<b>0</b>], sub-circulant address SCA[<b>4</b>:<b>0</b>], and circulant address CA[<b>5</b>:<b>0</b>].</p>
<p id="p-0033" num="0032">Once 38 unique circulant addresses CA[<b>5</b>:<b>0</b>] components per lane address LA[<b>1</b>:<b>0</b>] have been generated, there must also be 38 sub-circulant addresses SCA[<b>4</b>:<b>0</b>], one corresponding to each of the 38 circulant addresses CA[<b>5</b>:<b>0</b>]. The circulant addresses CA[<b>5</b>:<b>0</b>] on a lane address LA[<b>1</b>:<b>0</b>] basis provide the address for the incoming LLR values (from the detection scheme circuitry <b>114</b>). Also note that 16 addresses (512 PB/32 ISW=16) for the parity bits PB portion of the data block <b>200</b> (<figref idref="DRAWINGS">FIG. 1</figref>) with circulant address CA[<b>5</b>:<b>0</b>] values 34 to 37 (4 each) are to be generated by the time the required 4 unique addresses, one for each lane, has been repeated 38 times. These 16 addresses correspond to locations of the parity bits PB in the interleaved subword ISW and should be pseudo-randomly distributed the interleaved subword.</p>
<p id="p-0034" num="0033">There are 32 interleaved subwords ISW in a 512 byte sector so the generation of 4 unique lane addresses LA[<b>1</b>:<b>0</b>] is repeated 38 times (CA[<b>5</b>:<b>0</b>]) and this is repeated 32 times (SCA[<b>4</b>:<b>0</b>]). At the end of the mapping through the generated mapping addresses ADDR[<b>12</b>:<b>0</b>] for the entire data block there are unique mapping addresses that have been generated for the entire data block <b>200</b>. As part of this mapping there are 32 unique sub-circulant addresses SCA[<b>4</b>:<b>0</b>] for every circulant address CA[<b>5</b>:<b>0</b>] and for each lane address LA[<b>1</b>:<b>0</b>].</p>
<p id="p-0035" num="0034">The data blocks <b>200</b> may also be referred to as a &#x201c;sector&#x201d; herein. For sector <b>200</b> sizes smaller than the maximum size of 38&#xd7;4&#xd7;32=4864 bits (see <figref idref="DRAWINGS">FIG. 1</figref>), the following mapping of addresses applies. The interleaved subwords ISW can now be either 144 or 148 entries, with the zero-padding assumed to be either in row 32 or 33 depending on the sector size. Zero-padding means that zeroes are inserted in these locations to effectively maintain the overall size of the sector at 4864 bits by inserting zeroes at selected locations. The 16 addresses for the 512 parity bits (512 PB/32 ISW=16) with circulant address CA[<b>5</b>:<b>0</b>] values 34 to 37 (4 each) must still be generated for each interleaved subword ISW. The addresses corresponding to the zero-pad locations are skipped but 4 unique addresses per cycle are generated obeying lane constraints. Interleaved subword ISW markers are provided when all the addresses corresponding to the pack buffer size are generated, which can happen after 144, 148 or 152 entries. The ADDR[<b>12</b>:<b>0</b>] addresses generated by the IAG circuitry <b>109</b><i>b</i>, as previously mentioned, must be pseudo-random.</p>
<p id="p-0036" num="0035">Before describing the embodiment of the IAG circuitry <b>109</b><i>b </i>in <figref idref="DRAWINGS">FIG. 4</figref>, a conventional linear feedback shift register (LFSR) <b>300</b> shown in <figref idref="DRAWINGS">FIG. 3</figref> will be briefly described to provide a brief foundation for some of the terms used in describing the operation of the IAG circuitry <b>109</b><i>b </i>of <figref idref="DRAWINGS">FIG. 3</figref> and the LFSRs forming this circuitry. A linear feedback shift register LFSR is a shift register whose input bit is a linear function of its previous state by generating a new input value IN each clock cycle, the new input bit having a value that is determined by the XOR of selected bits contained in stages S of the LFSR. The initial value stored in the stages S of an LFSR is called the &#x201c;seed&#x201d; or &#x201c;seed value.&#x201d; An LFSR generates a sequence of values that with the proper selection of feedback of bits stored in selected stages S can produce a repeating sequence of bits that is pseudo random in nature. The LFSR <b>300</b> of <figref idref="DRAWINGS">FIG. 3</figref> includes feedback or &#x201c;taps&#x201d; on stages S<b>3</b> and S<b>5</b> as seen in the figure. The LFSR <b>300</b> can be viewed as a binary polynomial as defined by the taps and in the example of <figref idref="DRAWINGS">FIG. 3</figref> the LFSR may be represented by the polynomial X<sup>5</sup>+X<sup>3</sup>+1. In operation, as the LFSR <b>300</b> is clocked data bits stored in the stages S<b>0</b>-S<b>5</b> are shifted to the right and a new input value from the XOR gate <b>302</b> is shifted into stage S<b>0</b>.</p>
<p id="p-0037" num="0036"><figref idref="DRAWINGS">FIG. 3</figref> is a functional block diagram of the IAG circuitry <b>109</b><i>b </i>including a plurality of LFSRs for generating mapping addresses according to one embodiment of the present invention. The IAG circuitry <b>109</b><i>b </i>includes 32 sets of circuitry for mapping the 152 bits in each of the 32 deinterleaved subwords DSW<b>0</b>-DSW<b>31</b> forming each data block or sector <b>200</b>. Recall, as discussed above, each data block or sector <b>200</b> (<figref idref="DRAWINGS">FIG. 2</figref>) includes up to 4862 bits, with each DSW<b>0</b>-DSW<b>32</b> subword containing 152 bits such that 152 bits/DSW&#xd7;32 DSWs=4864 bits. Note that each DSW<b>0</b>-DSW<b>32</b> subword is arranged for the address mapping as previously discussed, namely mapping addresses ADDR[<b>12</b>:<b>0</b>] for that DSW subword have the corresponding lane address LA[<b>1</b>:<b>0</b>], sub-circulant address SCA[<b>4</b>:<b>0</b>], and circulant address CA[<b>5</b>:<b>0</b>] portions thereof. In <figref idref="DRAWINGS">FIG. 4</figref> the addresses for the bits of each DSW subword are depicted as a 38 rows time 4 columns (38&#xd7;4) array that may be referred to as an array space herein.</p>
<p id="p-0038" num="0037">Turning now to the embodiment of <figref idref="DRAWINGS">FIG. 4</figref>, for each DSW<b>0</b>-DSW<b>32</b> subword the IAG circuitry <b>109</b><i>b </i>includes four circulant address linear feedback shift registers (LFSR) CA_LFSR<b>0</b>-<b>3</b> that each generates corresponding circulant addresses CA[<b>5</b>:<b>0</b>]. This is shown for the DSW<b>0</b> subword with the circulant addresses CA[<b>5</b>:<b>0</b>] being designated as simply as CA in the figure. Furthermore, the IAG circuitry <b>109</b><i>b </i>further includes a sub-circulant address LFSR SA_LFSR<b>0</b>-<b>31</b> for each DSW<b>0</b>-DSW<b>32</b> subword, respectively. Furthermore, the IAG circuitry <b>109</b><i>b </i>further includes a sub-circulant address LFSR SA_LFSR<b>0</b>-<b>31</b> for each DSW<b>0</b>-DSW<b>32</b> subword, respectively. Each sub-circulant address LFSR SA_LFSR<b>0</b>-<b>31</b> generates a sub-circulant address SCA[<b>4</b>:<b>0</b>] for the corresponding DSW subword, with the generated sub-circulant address being designated as SCA in the figure. Finally, the IAG circuitry <b>109</b><i>b </i>further includes a lane address generator <b>400</b> that effectively generates the lane address LA[<b>1</b>:<b>0</b>] the controls which column or lane in the array space of each DSW subword for which addresses are generated. In the example of <figref idref="DRAWINGS">FIG. 4</figref> the lane address generator <b>400</b> sequentially activates four signals, a first signal f, a second signal s, a third signal t, and a fourth signal q. The activated signal f, s, t, q effectively corresponds to or defines the current lane address LA[<b>1</b>:<b>0</b>].</p>
<p id="p-0039" num="0038">In the embodiment of <figref idref="DRAWINGS">FIG. 4</figref>, the each of the four circulant address LFSRs CA_LFSR<b>0</b>-<b>3</b> for each DSW<b>0</b>-<b>31</b> subword is an LFSR of degree 6, namely has the polynomial representation x<sup>6</sup>+x<sup>5</sup>+1 meaning that the bit stored in the sixth stage and the fifth stage are XOR'd and the result input to the initial stage of the LFSR. Moreover, each of the 32 sub-circulant address LFSRs SA_LFSR<b>0</b>-<b>31</b> is an LFSR of degree 5 and thus has the polynomial representation x<sup>5</sup>+x<sup>3</sup>+1. Each of these circulant address LFSRs CA_LFSR<b>0</b>-<b>3</b> and sub-circulant address LFSRs SA_LFSR<b>0</b>-<b>31</b> operates independent of each other.</p>
<p id="p-0040" num="0039">The four circulant address LFSRs CA_LFSR<b>0</b>-<b>3</b> for each DSW subword generates the circulant addresses for the corresponding subword on a per-lane basis. Only the circulant address LFSRs CA_LFSR<b>0</b>-<b>3</b> for the DSW<b>0</b> subword will now be described in more detail because the operation of the circulant address LFSRs for each of the DSW<b>1</b>-<b>31</b> subwords is the same. The circulant address LFSR CA_LFSR<b>0</b> generates the 38 (0-37) circulant addresses for the lane 0, corresponding to the far right column (selection signal f from lane address generator <b>400</b>) in the array space for the DSW<b>0</b> subword. Furthermore, an independent starting seed value is stored in the circulant address LFSR CA_LFSR<b>0</b>. The circulant address LFSR CA_LFSR<b>1</b> operates in the same way for lane 1 (column receiving the selection signal s from lane address generator <b>400</b>) and receives its own starting seed value. Similarly, the circulant address LFSRs CA_LFSR<b>2</b> and CA_LFSR<b>3</b> operate in the same way for lanes 2 and 3, respectively, and each receives its own starting seed value.</p>
<p id="p-0041" num="0040">The sub-circulant LFSRs SA_LFSR<b>0</b>-<b>31</b> are each of degree 5, namely has the polynomial representation x<sup>5</sup>+x<sup>3</sup>+1 meaning that the bit stored in the fifth stage and the third stage are XOR'd and the result input to the initial stage of the LFSR. The sub-circulant LFSRs SA_LFSR<b>0</b>-<b>31</b> each work with a seed array Seed[<b>38</b>][<b>4</b>:<b>0</b>] where an initial seed array is input to the sub-circulant LFSR<b>0</b> associated with DSW<b>0</b>. Thereafter, for each of the sub-circulant LFSRs SA_LFSR<b>1</b>-<b>31</b> the seed array Seed[<b>38</b>][<b>4</b>:<b>0</b>] is provided as the 38 circulant addresses generated by the prior sub-circulant LFSR as shown through the arrows in <figref idref="DRAWINGS">FIG. 4</figref>. More specifically, the seed array for sub-circulant LFSR SA_LFSR<b>1</b> is supplied by the 38 sub-circulant addresses SCA[<b>4</b>:<b>0</b>] generated by sub-circulant LFSR SA_LFSR<b>0</b>, the seed array for sub-circulant LFSR SA_LFSR<b>2</b> is supplied by the 38 sub-circulant addresses SCA[<b>4</b>:<b>0</b>] generated by sub-circulant LFSR SA_LFSR<b>1</b>, and so on, with the seed array for sub-circulant LFSR SA_LFSR<b>0</b> after the initial operation being supplied by the sub-circulant addresses SCA[<b>4</b>:<b>0</b>] generated by sub-circulant LFSR SA_LFSR<b>31</b>.</p>
<p id="p-0042" num="0041">Note that in other embodiments a single 5 stage LFSR can be utilized 38 times with a corresponding seed array each of these times to generate the 38 sub-circulant addresses SCA[<b>4</b>:<b>0</b>] for each of the DSW<b>0</b>-<b>31</b> subwords. It should also be noted that the circulant address LFSRs CA_LFSR<b>0</b>-<b>3</b> are each capable of generating numbers in the range 0-63 (i.e., 2<sup>6</sup>&#x2212;1). Accordingly, since only sub-circulant addresses in the range 0-37 are required numbers greater than 39 have to be skipped and the number 38 is mapped to the sub-circulant address value 0. Moreover, it has been established that a look-ahead of 4 steps is sufficient to ensure that the circulant LFSRs CA_LFSR<b>0</b>-<b>3</b> always generate numbers in the range 1 to 38 (value 38 being mapped to 0 as just mentioned).</p>
<p id="p-0043" num="0042">In operation, the IAG circuitry <b>109</b><i>b </i>of <figref idref="DRAWINGS">FIG. 4</figref> initially stores four initial seed values into the circulant address LFSRs CA_LFSR<b>0</b>-<b>3</b> and loads the initial seed value Seed[<b>4</b>:<b>0</b>] into the SA_LFSR<b>0</b> LFSR and uses this initial seed value to generate the required remaining 37 seed values. Alternatively, one can expose all the 38 initial seed registers that are used by the SA_LFSR. The IAG circuitry <b>109</b><i>b </i>controls the lane address generator <b>400</b> to generate a first given lane address LA[<b>1</b>:<b>0</b>] (i.e., activates signal f, s, t, or q). The IAG circuitry <b>109</b><i>b </i>clocks the corresponding LFSR CA_LFSR<b>0</b> to generate a corresponding circulant address CA[<b>5</b>:<b>0</b>]. The sub-circulant LFSR SA_LFSR<b>0</b> is then clocked to generate 32 unique sub-circulant addresses SCA[<b>4</b>:<b>0</b>] for the given lane address LA[<b>1</b>:<b>0</b>] and circulant address CA[<b>5</b>:<b>0</b>]. This process is then repeated for each of the three remaining lane addresses LA[<b>1</b>:<b>0</b>] and 37 remaining circulant addresses CA[<b>5</b>:<b>0</b>] to thereby cover the entire address space uniquely and completely. The randomness of the IAG circuitry <b>109</b><i>b </i>address generation is facilitated by the independent circulant address LFSRs CA_LFSR and sub-circulant address LFSRs SA_LFSR that operate on a seed/circulant basis. In operation, the IAG circuitry <b>109</b><i>b </i>pipelines sub-circulant addresses SCA[<b>4</b>:<b>0</b>] in that a set of sub-circulant address are generated for the next DSW/ISW subword while the current DSW/ISW subword is being processed.</p>
<p id="p-0044" num="0043">The sub-circulant LFSRs SC_LFSR can also be implemented using a degree 6 polynomial and thereby map value 32 to zero. A look ahead of 4 is sufficient except for two cases where it is 5 and 7 and these two cases can be managed without planning for a look-ahead of 7, as will be appreciated by those skilled in the art. As previously mentioned, the 38 sub-circulant address SCA[<b>5</b>:<b>0</b>] should be generated prior to processing a DSW/ISW and this is particularly true when processing short sectors (i.e., sectors having fewer than 4864 bits). For short sectors circulant address CA[<b>5</b>:<b>0</b>] and sub-circulant addresses SCA[<b>4</b>:<b>0</b>] combinations that map into the zero padding region should be avoided. This can be easily accomplished when the sub-circulant addresses SCA[<b>4</b>:<b>0</b>] are known prior to the generation of circulant addresses CA[<b>5</b>:<b>0</b>].</p>
<p id="p-0045" num="0044">Determining the end of an ISW/DSW subword can be done by determining the number of skips in a single lane due to the address mapping into the zero padding region. This is part of determining if a maximum of 38 attempts have been made to generate a valid circulant address CA[<b>5</b>:<b>0</b>], at which point end of the ISW/DSW subword is indicated. Also note that the option to program the seed values for the circulant address LFSRs CA_LFSR explicitly remains for each of the 32 steps as opposed to generating them using another random generator. With regard to situations involving shortened sectors (fewer than 4864 bits), it is a requirement that there is a maximum of a single contiguous hole between the end of user data (CA: <b>32</b> or <b>33</b>) and the start of parity bits at CA=34. This results in a limit on the value of the sub-circulant address SA generated for the circulant address CA <b>32</b>, <b>33</b> regions. The sub-circulant LRSRs SA_LFSR should include this constraint and this can be accomplished using the table of <figref idref="DRAWINGS">FIG. 5</figref> to constrain the generation of sub-circulant addresses SCA[<b>4</b>:<b>0</b>] given a particular circulant address CA[<b>5</b>:<b>0</b>].</p>
<p id="p-0046" num="0045">Multiple bit errors in the communications channel <b>100</b> are easily connected via the parity check matrix H for the LDPC code (generated by cyclic shifts, as will be understood by those skilled in the art) and can destroy the desirable &#x201c;short-cycle free&#x201d; or &#x201c;four-cycle free&#x201d; property of the LDPC code, as will be appreciated by those skilled in the art. This effect is identified as a pseudo-cycle. A proper choice of the interleaver can reduce the number of pseudo-cycles, as will also be appreciated by those skilled in the art. The table below using script [4] includes the count of the number of pseudo-cycles for the various interleavers listed:</p>
<p id="p-0047" num="0046">
<tables id="TABLE-US-00001" num="00001">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="4">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="70pt" align="left"/>
<colspec colname="2" colwidth="63pt" align="center"/>
<colspec colname="3" colwidth="70pt" align="center"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="3" align="center" rowsep="1"/>
</row>
<row>
<entry/>
<entry>Interleaver</entry>
<entry>Pseudo-Cycle Count</entry>
<entry>Burst Limit</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="3" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="4">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="70pt" align="left"/>
<colspec colname="2" colwidth="63pt" align="char" char="."/>
<colspec colname="3" colwidth="70pt" align="center"/>
<tbody valign="top">
<row>
<entry/>
<entry>IAG circuitry</entry>
<entry>40890</entry>
<entry>353 bits</entry>
</row>
<row>
<entry/>
<entry>109b</entry>
</row>
<row>
<entry/>
<entry>Relative Prime</entry>
<entry>51341</entry>
<entry>357 bits</entry>
</row>
<row>
<entry/>
<entry>Interleaver</entry>
</row>
<row>
<entry/>
<entry>By-lane Mapper</entry>
<entry>42490</entry>
<entry>359 bits</entry>
</row>
<row>
<entry/>
<entry>Sequential</entry>
<entry>269769</entry>
<entry>308 bits</entry>
</row>
<row>
<entry/>
<entry>Interleaver</entry>
</row>
<row>
<entry/>
<entry>Pass-Through</entry>
<entry>380984</entry>
<entry>252 bits</entry>
</row>
<row>
<entry/>
<entry>Interleaver</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="3" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0048" num="0047"><figref idref="DRAWINGS">FIG. 6</figref> is a functional block diagram of an electronic system <b>600</b> such as a computer system including electronic circuitry <b>602</b> such as computer circuitry coupled to a data storage device <b>604</b> that includes the communications channel <b>100</b> of <figref idref="DRAWINGS">FIG. 1</figref> which, in turn, includes the IAG circuitry <b>109</b><i>b </i>of <figref idref="DRAWINGS">FIG. 4</figref>. Typically, the computer circuitry <b>602</b> also includes memory <b>606</b>, typically random access memory (RAM), for storing data and programming instructions when executing software for performing various computing functions, such as software like word processors or spreadsheets to perform specific calculations or tasks. When executing software the computer circuitry <b>602</b> also accesses data stored in the data storage device <b>604</b> through the communications channel <b>100</b>. The data storage device <b>604</b> may be a hard or floppy magnetic disk, tape cassette, compact disk read-only (CD-ROM) and compact disk read-write (CD-RW) memory, digital video disk (DVD), FLASH memory, or other suitable storage device. The computer system <b>600</b> further includes one or more input devices <b>608</b>, such as a keyboard or a mouse, coupled to the computer circuitry <b>602</b> to allow an operator to interface with the computer system. Typically, the computer system <b>600</b> also includes one or more output devices <b>610</b> coupled to the computer circuitry <b>602</b>, such as a printer, a video display, sound system, and so on.</p>
<p id="p-0049" num="0048"><figref idref="DRAWINGS">FIG. 7</figref> is a histogram of distances in the ISI domain between any two variable nodes that participate in a given check node equation for an interleaver including the IAG circuitry <b>109</b><i>b </i>of <figref idref="DRAWINGS">FIG. 4</figref>. <figref idref="DRAWINGS">FIG. 8</figref> is a histogram of distances in the ISI domain between any two variable nodes that participate in a given check node equation for a relative prime interleaver. <figref idref="DRAWINGS">FIG. 9</figref> is a histogram of distances in the ISI domain between any two variable nodes that participate in a given check node equation for a sequential interleaver. In <figref idref="DRAWINGS">FIGS. 7-9</figref>, for any two variable nodes or bit nodes that participate in a check node equation, the corresponding locations of the two variable nodes in the ISI domain (via ISW subwords generated by the interleaver <b>109</b><i>a </i>of <figref idref="DRAWINGS">FIG. 1</figref>) and the absolute distance between them is shown these figures for these three interleavers.</p>
<p id="p-0050" num="0049"><figref idref="DRAWINGS">FIG. 10</figref> is a graph showing the showing the sector failure rate (SFR) versus the signal to noise ratio (SNR) for a communications channel utilizing the IAG circuitry of <figref idref="DRAWINGS">FIG. 4</figref>. The vertical axis is sector failure rate (SFR) and the horizontal axis signal-to-noise ratio (SNR). Performance is shown for a sequential interleaver, relative prime interleaver, and an interleaver using the IAG circuitry <b>109</b><i>b </i>of <figref idref="DRAWINGS">FIG. 4</figref>. As seen in this graph the performance of the IAG circuitry <b>109</b><i>b </i>is comparable to that of a relative prime interleaver.</p>
<p id="p-0051" num="0050">One skilled in the art will understand that even though various embodiments and advantages of the present invention have been set forth in the foregoing description, the above disclosure is illustrative only, and changes may be made in detail, and yet remain within the broad principles of the invention. Furthermore, components described above may be implemented using digital circuitry or, where appropriate, may be realized through software executing on suitable processing circuitry. Therefore, the present invention is to be limited only by the appended claims.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A circuit, comprising:
<claim-text>an interleave address generation circuit including a plurality of linear feedback shift registers operable to generate addresses for permuting a data block in a first domain to a data block in a second domain on a subword basis, the interleave address generation circuit operable to generate the lane addresses for each subword and the linear feedback registers configured to generate circulant addresses and sub-circulant address to map bits in each subword in the data block in the first domain to a corresponding subword in the second domain.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The circuit of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein each subword includes an array space including N columns and M rows, and wherein the interleave address generation circuit includes a lane address generation circuit to select one of the N columns of the array space for which mapping addresses are generated.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The circuit of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the interleave address generation circuit includes N linear feedback shift registers, each of these N linear feedback shift registers being operable to generate circulant addresses for a corresponding column in the array space of a given subword.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The circuit of <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein each of these N linear feedback shift registers receives an independent seed value.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The circuit of <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein the interleave address generation circuit includes P linear feedback shift registers where P is the number of subwords contained in each data block, each of these P linear feedback shift registers being operable to generate sub-circulant addresses for a corresponding subword.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The circuit of <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein N equals 4, M equals 38, and P equals 32.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The circuit of <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein the interleave address generation circuit includes a single linear feedback shift operable to sequentially generate sub-circulant addresses for each subword.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. A circuit, comprising:
<claim-text>a data communications channel including,
<claim-text>a write portion adapted to receive input message bits and operable to encode these input message bits and store this encoded data on a storage medium, wherein the write portion includes,
<claim-text>an interleaver circuit including interleave address generation circuitry containing a plurality of linear feedback shift registers to generate addresses that are used to interleave user and parity data in a decoder domain to interleaved codewords in an ISI domain, and</claim-text>
</claim-text>
<claim-text>a read portion operable to read encoded data stored on the storage medium and to decode this encoded data to output the input message bits originally supplied to the write portion, wherein the read portion includes,
<claim-text>a deinterleaver circuit including interleave address generation circuitry containing a plurality of linear feedback shift registers to generate addresses that are used to deinterleave encoded data stored on the storage medium in the ISI domain to deinterleaved codewords in an ISI domain.</claim-text>
</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The circuit of <claim-ref idref="CLM-00008">claim 8</claim-ref>,
<claim-text>wherein the write portion further comprises a cyclic redundancy check (CRC) and run length limited (RLL) encoder adapted to receive the input message bits and apply a CRC code to the message bits to generate CRC coded data from the message bits and perform RLL encoding on the CRC coded data to thereby generate RLL encoded data, and</claim-text>
<claim-text>wherein the read portion further comprises RLL and CRC decode circuitry that is adapted to receive codewords of RLL encoded data and is operable to decode these codewords and to utilize CRC codes to determine the accuracy of the data being decoded to thereby output the original input message bits.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The circuit of <claim-ref idref="CLM-00009">claim 9</claim-ref>,
<claim-text>wherein the write portion further comprises an LDPC encoder adapted to receive the RLL encoded data from the CRC and RLL encoder and is operable to encode the RLL encoded data to generate LDPC codewords, and</claim-text>
<claim-text>wherein the read portion further comprises an LDPC decoder adapted to receive soft information values and decode these values to generate the RLL encoded data originally supplied to the LDPC encoder.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The circuit of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the read portion further comprises analog equalization and timing circuitry soft output digital signals corresponding to the data being read.</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The circuit of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the read portion further comprises channel detection scheme circuitry adapted to receive the soft output digital signals from the analog equalization and timing circuitry and is operable to perform iterative decoding of the soft output digital value using an iterative decoding algorithm.</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The circuit of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the iterative decoding algorithm comprises one of the soft output Viterbi algorithm (SOVA) and the BCJR algorithm.</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The circuit of <claim-ref idref="CLM-00008">claim 8</claim-ref>,
<claim-text>wherein each of the interleaver and deinterleaver circuits includes address generation circuitry including a plurality of linear feedback shift registers operable to generate addresses for permuting a data block in a first domain to a data block in a second domain on a subword basis;</claim-text>
<claim-text>the address generation circuitry in the interleaver circuit operable to generate lane addresses for each subword and the linear feedback registers configured to generate circulant addresses and sub-circulant address to map bits in each subword in the data block in the decoder domain to a corresponding subword in the ISI domain; and</claim-text>
<claim-text>the address generation circuitry in the deinterleaver circuit operable to generate lane addresses for each subword and the linear feedback registers configured to generate circulant addresses and sub-circulant address to map bits in each subword in the data block in the ISI domain to a corresponding subword in the decoder domain.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The circuit of <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein each subword includes an array space including N columns and M rows, and wherein the interleave address generation circuit includes a lane address generation circuit to select one of the N columns of the array space for which mapping addresses are generated.</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The circuit of <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein the interleave address generation circuit includes N linear feedback shift registers, each of these N linear feedback shift registers being operable to generate circulant addresses for a corresponding column in the array space of a given subword.</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The circuit of <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein each of these N linear feedback shift registers receives an independent seed value.</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The circuit of <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein the interleave address generation circuit includes P linear feedback shift registers where P is the number of subwords contained in each data block, each of these P linear feedback shift registers being operable to generate sub-circulant addresses for a corresponding subword.</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. The circuit of <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein the interleave address generation circuit includes a single linear feedback shift operable to sequentially generate sub-circulant addresses for each subword.</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. The circuit of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the storage medium comprises a magnetic disk.</claim-text>
</claim>
<claim id="CLM-00021" num="00021">
<claim-text>21. A system, comprising:
<claim-text>computer circuitry;</claim-text>
<claim-text>at least one input device;</claim-text>
<claim-text>at least one output device; and</claim-text>
<claim-text>at least one storage device including a data communications channel including,
<claim-text>a write portion adapted to receive input message bits and operable to encode these input message bits and store this encoded data on a storage medium, wherein the write portion includes,
<claim-text>an interleaver circuit including interleave address generation circuitry containing a plurality of linear feedback shift registers to generate addresses that are used to interleave user and parity data in a decoder domain to interleaved codewords in an ISI domain, and</claim-text>
</claim-text>
<claim-text>a read portion operable to read encoded data stored on the storage medium and to decode this encoded data to output the input message bits originally supplied to the write portion, wherein the read portion includes,
<claim-text>a deinterleaver circuit including interleave address generation circuitry containing a plurality of linear feedback shift registers to generate addresses that are used to deinterleave encoded data stored on the storage medium in the ISI domain to deinterleaved codewords in an ISI domain.</claim-text>
</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00022" num="00022">
<claim-text>22. The system of <claim-ref idref="CLM-00021">claim 21</claim-ref>, wherein the storage device comprises a magnetic disk or an optical disk.</claim-text>
</claim>
<claim id="CLM-00023" num="00023">
<claim-text>23. The system of <claim-ref idref="CLM-00021">claim 21</claim-ref>, wherein the system includes a keyboard as one input device and a video display as one output device.</claim-text>
</claim>
<claim id="CLM-00024" num="00024">
<claim-text>24. A method, comprising:
<claim-text>interleaving a block of data containing a plurality of subwords, the interleaving including the operations of,</claim-text>
<claim-text>for each subword having and N columns and M rows defining an array space,</claim-text>
<claim-text>generating a land address corresponding to one of the N columns;</claim-text>
<claim-text>providing for each of the N columns a seed value to an LFSR of degree 5;</claim-text>
<claim-text>clocking the LFSR to generate pseudo random circulant addresses;</claim-text>
<claim-text>providing a seed value to an LFSR of degree 6 to generate sub-circulant addresses; and</claim-text>
<claim-text>permuting bits of a data block in a first domain to different location in a data block in a second domain using the selected columns, circulant, and sub-circulant addresses.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00025" num="00025">
<claim-text>25. The method of <claim-ref idref="CLM-00024">claim 24</claim-ref>, further comprising deinterleaving the bits in the block of data in the second domain to the first domain. </claim-text>
</claim>
</claims>
</us-patent-grant>

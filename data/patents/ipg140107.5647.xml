<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08626748-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08626748</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>13365918</doc-number>
<date>20120203</date>
</document-id>
</application-reference>
<us-application-series-code>13</us-application-series-code>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>17</main-group>
<subgroup>30</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>707721</main-classification>
<further-classification>715227</further-classification>
</classification-national>
<invention-title id="d2e43">Combined word tree text visualization system</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>7054878</doc-number>
<kind>B2</kind>
<name>Gottsman et al.</name>
<date>20060500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>7373612</doc-number>
<kind>B2</kind>
<name>Risch et al.</name>
<date>20080500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>7475072</doc-number>
<kind>B1</kind>
<name>Ershov</name>
<date>20090100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>2009/0013281</doc-number>
<kind>A1</kind>
<name>Helfman et al.</name>
<date>20090100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>2011/0047455</doc-number>
<kind>A1</kind>
<name>Funes et al.</name>
<date>20110200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00006">
<othercit>Collins et al. &#x201c;DocuBurst: Visualizing Document Content using Language Structure&#x201d;, Eurographics/IEEE-VGTC Symposium on Visualization 2009, vol. 28, No. 3, The Eurographics Association and Blackwell Publishing Ltd., 2009, 8 pgs.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00007">
<othercit>Culy et al. &#x201c;Double Tree: an advanced KWIC visualization for expert users&#x201d;, 2010 14th International Conference Information Visualisation, IEEE, 2010, 6 pgs.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00008">
<othercit>Stasko et al. &#x201c;Jigsaw: supporting investigative analysis through interactive visualization&#x201d;, Information Visualization (2008) 7, 118-132, Palgrave Macmillan Ltd., 2008, 15 pgs.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00009">
<othercit>Weiss-Lijn et al. &#x201c;Supporting document use through interactive visualization of metadata&#x201d;, available at http://vw.indiana.edu/visual01/weiss-lijn-et-al.pdf (accessed Feb. 3, 2012), 2001, 6 pgs.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00010">
<othercit>Viegas et al. &#x201c;Many Eyes: A Site for Visualization at Internet Scale&#x201d;, IEEE Transactions on Visualization and Computer Graphics, vol. 13, No. 6, Nov./Dec. 2007, 1121-1128 pgs.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00011">
<othercit>Wattenberg et al. &#x201c;The Word Tree, an Interactive Visual Concordance&#x201d; IEEE Transactions on Visualization and Computer Graphics, vol. 14, No. 6, Nov./Dec. 2008 (8 pages).</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>19</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>707721</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>707722</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>715227</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>7</number-of-drawing-sheets>
<number-of-figures>7</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20130204897</doc-number>
<kind>A1</kind>
<date>20130808</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>McDougall</last-name>
<first-name>Steven R.</first-name>
<address>
<city>Kanata</city>
<country>CA</country>
</address>
</addressbook>
<residence>
<country>CA</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>McDougall</last-name>
<first-name>Steven R.</first-name>
<address>
<city>Kanata</city>
<country>CA</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Shumaker &#x26; Sieffert, P.A.</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>International Business Machines Corporation</orgname>
<role>02</role>
<address>
<city>Armonk</city>
<state>NY</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Spieler</last-name>
<first-name>William</first-name>
<department>2159</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">An example method includes identifying instances of a search term in a source text, and identifying prefix strings and suffix strings comprising tokens preceding and subsequent to the search term in the source text. The method further includes displaying a visualization interface that includes the search term within a combined tree diagram that includes a prefix tree and a suffix tree extending to either side of the search term. The prefix tree displays the prefix strings and the suffix tree displays the suffix strings, and both have user-selectable branches. The method further includes providing, in response to a user input selecting a branch in the prefix tree or in the suffix tree, a visual indication of a prefix string and a suffix string in the visualization interface that form a matching sequence that originate together in the source text, for matching sequences that are connected through the selected branch.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="180.59mm" wi="256.54mm" file="US08626748-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="260.18mm" wi="204.55mm" orientation="landscape" file="US08626748-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="257.05mm" wi="197.70mm" orientation="landscape" file="US08626748-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="258.66mm" wi="203.62mm" orientation="landscape" file="US08626748-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="252.98mm" wi="206.16mm" orientation="landscape" file="US08626748-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="263.31mm" wi="192.96mm" file="US08626748-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="267.46mm" wi="192.96mm" file="US08626748-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="270.26mm" wi="212.09mm" file="US08626748-20140107-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">TECHNICAL FIELD</heading>
<p id="p-0002" num="0001">The disclosure relates to information visualizations, and particularly to computing devices providing information visualizations.</p>
<heading id="h-0002" level="1">BACKGROUND</heading>
<p id="p-0003" num="0002">Computing systems have been used in various ways to search and analyze text. This includes searches for individual words or phrases or strings of multiple words, as well as visualizations that provide additional context or information.</p>
<heading id="h-0003" level="1">SUMMARY</heading>
<p id="p-0004" num="0003">In one example, a method includes receiving a search term and identifying instances of the search term in a source text. The method further includes, for each of the instances of the search term identified in the source text, identifying a prefix string comprising a plurality of tokens preceding the search term in the source text, and identifying a suffix string comprising a plurality of tokens subsequent to the search term in the source text. The method further includes providing data to display a visualization interface that includes the search term within a combined tree diagram that includes a prefix tree extending to a first side of the search term, and a suffix tree extending to a second side of the search term. The prefix tree displays, in a tree diagram format, the prefix strings for the instances of the search term identified in the source text, and the suffix tree displays, in a tree diagram format, the suffix strings for the instances of the search term identified in the source text. The prefix tree includes tokens that are shared in common among the prefix strings as nodes connected to adjacent tokens by branches, and the suffix tree likewise includes tokens that are shared in common among the suffix strings as nodes connected to adjacent tokens by branches. The branches in the prefix tree and the suffix tree are user-selectable in the visualization interface. The method further includes providing, in response to receiving a user input selecting one of the branches in the prefix tree or in the suffix tree, data to display a visual indication of a prefix string and a suffix string in the visualization interface that form a matching sequence of prefix string, search term, and suffix string that originate together in the source text, for each of one or more matching sequences that are connected through the selected branch.</p>
<p id="p-0005" num="0004">In another example, a computing system includes one or more processors, one or more computer-readable tangible storage devices, a display device; and a user input device. The computing system also includes program instructions, stored on at least one of the one or more computer-readable tangible storage devices for execution by at least one of the one or more processors, to receive a search term. The computing system also includes program instructions, stored on at least one of the one or more computer-readable tangible storage devices for execution by at least one of the one or more processors, to identify instances of the search term in a source text. The computing system also includes program instructions, stored on at least one of the one or more computer-readable tangible storage devices for execution by at least one of the one or more processors, to identify, for each of the instances of the search term identified in the source text, a prefix string comprising a plurality of tokens preceding the search term in the source text, and to identify a suffix string comprising a plurality of tokens subsequent to the search term in the source text. The computing system also includes program instructions, stored on at least one of the one or more computer-readable tangible storage devices for execution by at least one of the one or more processors, to provide data to display on the display device a visualization interface that comprises the search term within a combined tree diagram comprising a prefix tree extending to a first side of the search term, and a suffix tree extending to a second side of the search term, such that the prefix tree displays, in a tree diagram format, the prefix strings for the instances of the search term identified in the source text, and the suffix tree displays, in a tree diagram format, the suffix strings for the instances of the search term identified in the source text, wherein the prefix tree comprises tokens that are shared in common among the prefix strings as nodes connected to adjacent tokens by branches, and the suffix tree comprises tokens that are shared in common among the suffix strings as nodes connected to adjacent tokens by branches, wherein the branches in the prefix tree and the suffix tree are user-selectable in the visualization interface. The computing system also includes program instructions, stored on at least one of the one or more computer-readable tangible storage devices for execution by at least one of the one or more processors, to provide, in response to receiving, through the user input device, a user input selecting one of the branches in the prefix tree or in the suffix tree, data to display a visual indication of a prefix string and a suffix string in the visualization interface that form a matching sequence of prefix string, search term, and suffix string that originate together in the source text, for each of one or more matching sequences that are connected through the selected branch.</p>
<p id="p-0006" num="0005">In another example, a computer program product includes one or more computer-readable tangible storage devices and program instructions stored on at least one of the one or more computer-readable tangible storage devices. The computer program product includes program instructions, stored on at least one of the one or more computer-readable tangible storage devices, to receive a search term. The computer program product further includes program instructions, stored on at least one of the one or more computer-readable tangible storage devices, to identify instances of the search term in a source text. The computer program product further includes program instructions, stored on at least one of the one or more computer-readable tangible storage devices, to identify, for each of the instances of the search term identified in the source text, a prefix string comprising a plurality of tokens preceding the search term in the source text, and to identify a suffix string comprising a plurality of tokens subsequent to the search term in the source text. The computer program product further includes program instructions, stored on at least one of the one or more computer-readable tangible storage devices, to provide data to display a visualization interface that comprises the search term within a combined tree diagram comprising a prefix tree extending to a first side of the search term, and a suffix tree extending to a second side of the search term, such that the prefix tree displays, in a tree diagram format, the prefix strings for the instances of the search term identified in the source text, and the suffix tree displays, in a tree diagram format, the suffix strings for the instances of the search term identified in the source text, wherein the prefix tree comprises tokens that are shared in common among the prefix strings as nodes connected to adjacent tokens by branches, and the suffix tree comprises tokens that are shared in common among the suffix strings as nodes connected to adjacent tokens by branches, wherein the branches in the prefix tree and the suffix tree are user-selectable in the visualization interface. The computer program product further includes program instructions, stored on at least one of the one or more computer-readable tangible storage devices, to provide, in response to receiving a user input selecting one of the branches in the prefix tree or in the suffix tree, data to display a visual indication of a prefix string and a suffix string in the visualization interface that form a matching sequence of prefix string, search term, and suffix string that originate together in the source text, for each of one or more matching sequences that are connected through the selected branch.</p>
<p id="p-0007" num="0006">The details of one or more embodiments are set forth in the accompanying drawings and the description below. Other features, objects, and advantages will be apparent from the description and drawings, and from the claims.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0008" num="0007"><figref idref="DRAWINGS">FIG. 1</figref> depicts a screenshot of an example combined word tree text visualization interface as it may be displayed on a computing device display screen.</p>
<p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. 2</figref> depicts a screenshot of an example combined word tree text visualization interface as it may be displayed on a computing device display screen, as modified from the view of <figref idref="DRAWINGS">FIG. 1</figref> after receiving a user input.</p>
<p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. 3</figref> depicts a screenshot of an example combined word tree text visualization interface as it may be displayed on a computing device display screen, as modified from the view of <figref idref="DRAWINGS">FIG. 2</figref> after receiving another user input.</p>
<p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. 4</figref> depicts a screenshot of an example combined word tree text visualization interface as it may be displayed on a computing device display screen, as modified from the view of <figref idref="DRAWINGS">FIG. 3</figref> after receiving another user input.</p>
<p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. 5</figref> is a block diagram of an example computing network environment in which a server may provide a combined word tree text visualization interface to client computing devices.</p>
<p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. 6</figref> is a block diagram of an example computing device that may run a combined word tree text visualization program.</p>
<p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. 7</figref> is a flowchart illustrating operation of an example method for a combined word tree text visualization interface.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0005" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0015" num="0014">There are set forth herein examples of a method, computing system, and computer program product for providing a combined word tree text visualization interface on a computing device or in a computing environment. Various embodiments disclosed herein may analyze bodies of text and render a combined word tree text visualization interface that potentially provides a great deal of information and context within a single visualization diagram, as well as powerful tools for using the interface to explore additional information and context about the source text, among various other features and advantages. Various illustrative features and advantages of a combined word tree text visualization system are further described below with reference to <figref idref="DRAWINGS">FIGS. 1-7</figref>.</p>
<p id="p-0016" num="0015">A combined word tree text visualization interface according to various implementations disclosed herein seeks to provide rich visualization information on the context of a target word or phrase by providing both preceding and subsequent branches of text in one view, and by providing a means to show complete phrases or sentences within that visualization interface based on user selections of certain branches within the visualization interface, without having to narrow the branches to a single leaf.</p>
<p id="p-0017" num="0016">A user may enter a search term that includes a target word or phrase, or some other string of text. A combined word tree text visualization interface visually represents the search term in context from each of several occurrences of the search term within a source text of potentially very large size, which may be a document or book of any size or type, a collection of books or documents of any size or type, a corpus, or any other collection of text. The combined word tree text visualization interface visually represents the search term in context within the middle of both preceding and subsequent text, represented with a prefix tree extending to one side of the search term, and a suffix tree extending to the other side of the search term, within the same combined tree diagram, in which the search term forms a central node that connects the prefix tree and the suffix tree. Unlike a simple string search within a text that provides a simple list of the different appearances of the search term within the text, a combined word tree text visualization interface provides a user with a visual indication of the frequency of associated words or phrases within the text, for each of several combinations of associated words or phrases when they occur. An illustrative example of such a combined word tree text visualization interface is depicted in <figref idref="DRAWINGS">FIG. 1</figref>.</p>
<p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. 1</figref> depicts a screenshot of a combined word tree text visualization interface <b>10</b> as it may be displayed on a computing device display screen, according to various illustrative examples. In the example depicted in <figref idref="DRAWINGS">FIG. 1</figref>, a user has entered the word &#x201c;love&#x201d; as a search term in a search field box <b>12</b>, with reference to a source text, in this case, the complete text of the play &#x201c;Romeo and Juliet&#x201d; by William Shakespeare. The search term &#x201c;love&#x201d; is accordingly displayed as the central node <b>14</b> of the combined word tree text visualization interface <b>10</b>, which for convenience may be referred to simply as visualization interface <b>10</b>. The word &#x201c;love&#x201d; is rendered in a size proportional to its frequency, or the total number of times it occurs within the source text. The specific size relationship may be that the central node word is portrayed in a size proportional to the square root of the number of times the word occurs in the source text, for example, but any of various specific proportional relationships may be used. The central node <b>14</b> connects a prefix tree <b>20</b> that extends to the left side of central node <b>14</b>, and a suffix tree <b>22</b> that extends to a right side of central node <b>14</b>.</p>
<p id="p-0019" num="0018">Immediately connected, by branches, to central node <b>14</b> are a number of first-level prefix branch nodes <b>24</b>, each of which is a word or other token that appears immediately before the word &#x201c;love&#x201d; in at least one passage of &#x201c;Romeo and Juliet&#x201d;. A number of second-level prefix branch nodes are connected by branches to the first-level prefix branch nodes, with most of the first-level nodes having several second-level nodes connected to them. Each of the second-level prefix nodes includes a word, phrase, or other one or more tokens that appears immediately preceding the words forming the first-level prefix node and the central node at least once in &#x201c;Romeo and Juliet&#x201d;. Some of the second-level nodes show additional branching into third-level nodes. Once the branching reaches a point where it forms a unique phrase with no duplication anywhere else in the text of &#x201c;Romeo and Juliet&#x201d;, a sample of text extends outwardly as a leaf node, i.e. an end-point node with no further branching. The sample of text may include a significant amount of text, such as the entirety of the beginning of the sentence from the play up to the point of branching into a node, or extending into a preceding sentence from the play, thereby providing a substantial amount of context for the search term and the branch node words. Therefore, a user may follow any of the leaf nodes starting from the far left edges of prefix tree <b>20</b> and, following the branches from the selected leaf node to the central node <b>12</b>, read a passage of &#x201c;Romeo and Juliet&#x201d; that leads up to an occurrence of the word &#x201c;love&#x201d;.</p>
<p id="p-0020" num="0019">Similarly, suffix tree <b>22</b> includes a number of first-level suffix nodes <b>26</b>, each of which is a word, punctuation mark, or other token that occurs immediately subsequent to the word &#x201c;love&#x201d; in the text of &#x201c;Romeo and Juliet&#x201d;, and together representing all of the tokens that occur immediately after the word &#x201c;love&#x201d; throughout the text of &#x201c;Romeo and Juliet&#x201d;. In another example, only a subset of all possible suffix strings may be selected or displayed, as may also be done with the prefix tree, and as is described in more detail further below. A number of second-level suffix branch nodes are connected by branches to the first-level suffix branch nodes, with, in this case, all of the first-level nodes having two or more second-level nodes connected to them.</p>
<p id="p-0021" num="0020">In the case of the first-level suffix node <b>30</b> for the comma, this node <b>30</b> has twenty-eight second-level suffix nodes branching off from it, indicating that there are instances in the source text of &#x201c;Romeo and Juliet&#x201d; where the word &#x201c;love&#x201d; followed by a comma, is followed by any of twenty-eight different immediately subsequent tokens&#x2014;and some of those define combined phrases that appear several times in the source text. This is shown, for example, with the second-level suffix node <b>32</b> for the word &#x201c;and&#x201d; branching from the first-level suffix node <b>30</b> for the comma, which together with central node <b>14</b> indicates the sequence &#x201c;love, and&#x201d;, i.e. the sequence of the word &#x201c;love&#x201d; followed by a comma and the word &#x201c;and&#x201d;. As indicated, this sequence itself branches to five different third-order suffix nodes, four of which are leaf nodes and one of which is a fourth-level branch node, branching to two different fifth-level leaf nodes.</p>
<p id="p-0022" num="0021">A user may therefore follow any branching sequence through the suffix tree <b>22</b> starting from the word &#x201c;love&#x201d; at the central node <b>12</b>, and read a sequence of text that appears subsequent to the word &#x201c;love&#x201d; somewhere in the source text of the play &#x201c;Romeo and Juliet&#x201d;. The words or other tokens in the prefix tree <b>20</b> and the suffix tree <b>22</b> are also displayed in a size proportional to their frequency in the source text, as well, so that, for example, the words &#x201c;of&#x201d;, my&#x201d;, and &#x201c;thy&#x201d; among the first-level prefix nodes <b>24</b> are displayed in fairly large size, while the comma, question mark, and exclamation mark tokens are displayed in a fairly large size among the first-level suffix nodes <b>26</b>, indicating the relatively high frequency of these tokens in the corresponding positions relative to the search term &#x201c;love&#x201d; in the text of &#x201c;Romeo and Juliet&#x201d;. The combined word tree text visualization interface <b>10</b> therefore provides a visualization in a single glance of the surrounding context, both preceding and subsequent, of the word &#x201c;love&#x201d; in all of its occurrences in the text of &#x201c;Romeo and Juliet&#x201d;. The combined word tree text visualization interface <b>10</b> makes it easy to pick out repetition among words or phrases on either side of the search term, that either begin or end with the word &#x201c;love&#x201d; in the text of &#x201c;Romeo and Juliet&#x201d;.</p>
<p id="p-0023" num="0022">Visualization interface <b>10</b> also provides the capability to go further, and invoke visualizations of repetition among phrases that include the search term &#x201c;love&#x201d; including both the text preceding the search term together with the text subsequent to the search term, and thereby unify the information from both the prefix tree <b>20</b> and the suffix tree <b>22</b>, by enabling the branches anywhere in the combined tree, including in the prefix tree <b>20</b> and the suffix tree <b>22</b>, to be user-selectable. When a user selects any one of the branches in the combined tree, the interface provides visual indications, such as distinguishing colors in which it renders node words and branches, for all of the matching sequences of prefix string, search term, and suffix string, that form a phrase, sentence, or other string together in the text of &#x201c;Romeo and Juliet&#x201d;. This enables a user to see, at the same time, a number of different matching sequences from the left-most prefix leaf node to the right-most suffix leaf node in the visualization interface, each rendered in a different color or with some other distinguishing visual indication. A user may enter inputs to make a selection, or to select a branch or a node, for example by moving a pointer to the position of the branch or the node and clicking a button on the mouse, or simply hovering the mouse over the position. On a device with a touchscreen, the user may make a selection by touching the screen at the position of a branch or node, for example. These and various other input devices may allow user selections in different implementations</p>
<p id="p-0024" num="0023">For example, a user may select the branch <b>30</b> that extends between the first-level comma node and the second-level node for the word &#x201c;and&#x201d; in the suffix tree <b>22</b>, and visualization interface <b>10</b> will highlight, colorize, or other apply distinguishing visual indications on each of the six strings of text forming a matching sequence through the prefix tree <b>20</b> and the search term at the central node <b>14</b>, through the first-level node for the comma, the branch <b>30</b>, and the second-level node for the word &#x201c;and&#x201d; in the suffix tree <b>22</b>, and then branching out among the five different third-level nodes and two fourth-level nodes connected to the branch <b>30</b>. The visualization interface <b>10</b> may colorize the text and/or branches of one each of these six matching sequences in red, orange, yellow, green, blue, and purple, instead of a default of black, for example. Because the sequences will overlap at least on the central node <b>14</b>, the branch between central node <b>14</b> and the first-level suffix node for the comma, the comma itself at this node, and on the branch <b>30</b> between the first-level suffix node for the comma and the second-level suffix node for the word &#x201c;and&#x201d;, the visualization interface <b>10</b> may either combine the colors in these nodes and branches, or apply one or a subset of them in these nodes and branches, which will still clearly differentiate or distinguish these nodes and branches from the default and from the remainder of the combined word tree outside of the connections of the selected branch <b>30</b>.</p>
<p id="p-0025" num="0024">With these sequences thus highlighted or colorized, a user will be able to see, in one glance, a phrase or sentence of significant length surrounding each occurrence of the sequence &#x201c;love, and&#x201d;, in the text of Romeo and Juliet, including &#x201c;the fearful passage of their death-mark'd love, and the continuance of their parents' rage, which, but their children's end, nought could remove, is now the two hours' traffic of our stage&#x201d;, and &#x201c;she hath forsworn to love, and in that vow do I live dead that live to tell it now&#x201d;, and so forth through all six examples. (All examples omit capital letters in this example rendering.) The user may, in one view, examine all six of these examples of text, and compare them within the greater context of all 139 sequences of text in which the word &#x201c;love&#x201d; is embedded in the text of &#x201c;Romeo and Juliet&#x201d;. (Visualization interface <b>10</b> displays a hit count <b>19</b> indicating the total number of hits, i.e. occurrences, of the search term in the selected text, in this example.)</p>
<p id="p-0026" num="0025">Visualization interface <b>10</b> may render these colorized sequences within the complete visualization view as depicted in <figref idref="DRAWINGS">FIG. 1</figref>, or may omit some or all of the sequences that remain unselected once the user has selected a branch. Whether or not visualization interface <b>10</b> retains the full view of the non-selected sequences while displaying the colorized sequences that include the selected branch, may be a user-selectable option. The visual indications presented for sequences defined by a selected branch are further described below, after introducing additional features in reference to <figref idref="DRAWINGS">FIG. 1</figref>.</p>
<p id="p-0027" num="0026">Visualization interface <b>10</b> may be rendered by a program that may run as a web application on a server, or as a local application on a computing device. In either case, the server or computing device, or a processor thereof, may therefore receive a search term and identify instances of the search term in a source text. Then, for at least a set of the instances of the search term identified in the source text, the device providing the visualization interface <b>10</b> may identify a prefix string comprising a plurality of tokens preceding the search term in the source text, and identify a suffix string comprising a plurality of tokens subsequent to the search term in the source text. These tokens may include words, punctuation marks, or any other tokens in the source text. For example, for the original search term &#x201c;love&#x201d; and the source text of &#x201c;Romeo and Juliet&#x201d;, the device may search the source text of &#x201c;Romeo and Juliet&#x201d; and in one instance in which it finds the word &#x201c;love&#x201d;, the device identifies &#x201c;she hath forsworn to&#x201d; as a prefix string and &#x201c;, and in that vow do I live dead that live to tell it now&#x201d; (including the comma, in this example) as a suffix string. For this particular instance, the identified prefix string, the search term, and the identified suffix string then form a matching sequence that reads &#x201c;she hath forsworn to love, and in that vow do I live dead that live to tell it now&#x201d;, in the form in which the prefix string, search term, and suffix string originate together in the source text.</p>
<p id="p-0028" num="0027">The device may identify a set of such instances of the search term in the source text, where the set may be anywhere from zero instances to all the instances that occur in the source text, i.e. 139 instances in this case. The device then provides data to display visualization interface <b>10</b> such that it includes the search term within a combined tree diagram, such as is depicted in <figref idref="DRAWINGS">FIG. 1</figref>, that includes a prefix tree <b>20</b> extending to a first side of the search term <b>14</b>, and a suffix tree <b>22</b> extending to a second side of the search term <b>14</b>. The device may provide data to display the visualization interface <b>10</b> in the form of a server providing data over a network connection to a client computing device, or in the form of a computing device's processor providing data to the computing device's display screen or other components, for example. While it's natural for the prefix tree <b>20</b> to extend to the left side of the search term <b>14</b> and for the suffix tree <b>22</b> to extend to the right side of the search term <b>14</b> in this English-language example, the reverse may be implemented for examples in which the visualization interface <b>10</b> is provided in languages that are typically written from right to left, such as Farsi and Urdu, for example, while left-to-right, right-to-left, or vertical orientations may be enabled for a visualization interface <b>10</b> in Chinese, Japanese, or Korean, for example.</p>
<p id="p-0029" num="0028">Prefix tree <b>20</b> then displays, in a tree diagram format, at least a set of the prefix strings for the instances of the search term in the source text, and suffix tree <b>22</b> displays, in a tree diagram format, at least a set of the suffix strings for the instances of the search term in the source text. Prefix tree <b>20</b> and suffix string <b>22</b> may display all of the prefix strings and suffix strings, or may omit some according to a set of user options or an algorithm for showing only more common or more important strings in cases where the prefix tree or suffix tree become too dense to be legible, for example. As indicated above, prefix tree <b>20</b> includes tokens that are shared in common among the prefix strings as nodes connected to adjacent tokens by branches, and suffix tree <b>22</b> likewise includes tokens that are shared in common among the suffix strings as nodes connected to adjacent tokens by branches.</p>
<p id="p-0030" num="0029">These branches in both prefix tree <b>20</b> and suffix tree <b>22</b> are user-selectable in visualization interface <b>10</b>. The device providing the visualization interface <b>10</b> may respond to receiving a user input selecting one of the branches by providing data to display a visual indication of a prefix string and a suffix string in the visualization interface that form a matching sequence of prefix string, search term, and suffix string that originate together in the source text, for each of one or more matching sequences that are connected through the selected branch, as further discussed below with reference to <figref idref="DRAWINGS">FIGS. 3 and 4</figref>.</p>
<p id="p-0031" num="0030">Visualization interface <b>10</b> also includes navigation buttons, including a back button <b>16</b> and a forward button <b>17</b>, that enable user inputs for navigating backward or forward among a history of states of the visualization interface, based on a history of user inputs entered to the visualization interface, such as search terms, selected nodes to add to the search term, selected branches, or other user inputs entered to the visualization interface.</p>
<p id="p-0032" num="0031">Visualization interface <b>10</b> also includes a user-selectable menu <b>18</b> that provides different user-selectable options for arranging the ordering of the prefix tree and the suffix tree in visualization interface <b>10</b>. The options in ordering menu <b>18</b> include an occurrence order, a frequency order, and an alphabetical order. The occurrence order arranges the dual tree diagram of the visualization interface <b>10</b> in an order in which the sequences occur in the source text; the frequency order arranges the dual tree diagram of the visualization interface <b>10</b> in an order of frequency in which the sequences occur in the source text, such as from most frequent to least frequent; and the alphabetical order arranges the dual tree diagram of the visualization interface <b>10</b> in alphabetical order.</p>
<p id="p-0033" num="0032">For ordering the leaf nodes, visualization interface <b>10</b> may structure the leaf nodes consistently with the structure of the branches. For example, the first leaf node instance would be placed at the top, but the leaf node directly below it may or may not be the second phrase in the source text from among all of the leaf nodes. It will, however, be the second occurring leaf node from among the leaf nodes that share the same branch. Therefore, in this example, visualization interface <b>10</b> prevents branches from crossing each other to make the visualization more readable. Ordering menu <b>18</b> may also apply any of these ordering arrangements specifically to either prefix tree <b>20</b> or suffix tree <b>22</b>, so that, for example, a user may select to arrange the visualization interface <b>10</b> with the suffix tree <b>22</b> arranged in order of occurrence of the suffix strings in the source text.</p>
<p id="p-0034" num="0033">Visualization interface <b>10</b> may also provide independent scrolling for the prefix tree <b>20</b> and the suffix tree <b>22</b>, so that in examples or in views in which the visualization interface <b>10</b>, or at least one of the prefix tree <b>20</b> or the suffix tree <b>22</b>, runs long enough or is portrayed in a large enough view to run off the view depicted in a single screen, a user may scroll the prefix tree <b>20</b> up or down, and may scroll the suffix tree <b>22</b> up or down, independently of each other.</p>
<p id="p-0035" num="0034">Visualization interface <b>10</b> may also enable each of the nodes to be user-selectable to be added to the search term at the central node <b>14</b>, to narrow down the central node <b>14</b> and thereby prune the combined word tree. Visualization interface <b>10</b> includes drop-down menu <b>21</b> that provides different options for what type of functions a user can operate by clicking with a mouse, or otherwise entering a user input selecting a position on visualization interface <b>10</b>. In the view of <figref idref="DRAWINGS">FIG. 1</figref>, drop-down menu <b>21</b> is set to a &#x201c;clicks will zoom&#x201d; setting, indicating that clicking on another node will zoom in on a combination of the selected node with the search term <b>14</b> at the central node, along with any intervening nodes, and reorganize the tree diagram in visualization interface <b>10</b> based around the new string of words as a new search term to &#x201c;zoom in&#x201d; on. For example, in this setting for clicks to operate to zoom in on a combination of nodes, a user may select the first-level suffix node <b>32</b> for the word &#x201c;be&#x201d;, and visualization interface <b>10</b> may merge this first-level suffix node <b>32</b> into the central node <b>14</b>, resulting in the phrase &#x201c;love be&#x201d; as a new search term, and then pare away all of the combined word tree except those branches and nodes that include the phrase &#x201c;love be&#x201d;. The result of this operation is depicted in <figref idref="DRAWINGS">FIG. 2</figref>.</p>
<p id="p-0036" num="0035">Drop-down menu <b>21</b> may also provide other user-selectable options, such as a &#x201c;highlighter&#x201d; mode that enables user selections of words to highlight them with visual indicators, such as a bright highlighting color surrounding the selected words. Another example option that drop-down menu <b>21</b> may provide is a &#x201c;see all paths&#x201d; mode, in which a user may select one of the nodes in the tree diagram, and visualization interface <b>10</b> displays, highlights, or otherwise visually indicates all the prefix and suffix branches that include the selected node and the search term.</p>
<p id="p-0037" num="0036"><figref idref="DRAWINGS">FIG. 2</figref> shows a substantially reorganized visualization interface <b>10</b>B, which has been refactored to feature only sequences that include the phrase &#x201c;love be&#x201d; from throughout the text of &#x201c;Romeo and Juliet&#x201d;, of which there are only four, as opposed to the 139 sequences displayed by visualization interface <b>10</b> in <figref idref="DRAWINGS">FIG. 1</figref>. (That is, visualization interface <b>10</b>B is visualization interface <b>10</b> rendered in a new state based on new input; likewise, different states of visualization interface are labeled <b>10</b>C and <b>10</b>D in <figref idref="DRAWINGS">FIGS. 3 and 4</figref> below to depict further different states of visualization interface <b>10</b> based on additional new user inputs.) As seen in <figref idref="DRAWINGS">FIG. 2</figref>, the new prefix tree only has two first-level prefix nodes, one of which is a leaf node <b>48</b> and only one of which is a branching node <b>46</b> which leads to two second-level prefix nodes, one a leaf node <b>50</b> and the other being another branching node <b>52</b> that branches to two third-level leaf nodes <b>54</b>, <b>56</b>. (Branching node <b>52</b>, unlike most nodes in this example, does not include dialogue, but rather &#x201c;mer.&#x201d; for the abbreviated name of the character Mercutio, indicating in the text of the play that the subsequent line belongs to a different character than the previous line.) The new suffix tree has three first-level suffix nodes, including two leaf nodes <b>60</b>, <b>64</b>, and one branching node <b>62</b> leading to two second-level leaf nodes <b>66</b>, <b>68</b>. <figref idref="DRAWINGS">FIG. 2</figref> thereby also provides a more simplified example of the visualization interface in which to illustrate the branching nodes and leaf nodes, as well as the selection of branches and the visual indications of matching sequences defined by the selected branches.</p>
<p id="p-0038" num="0037"><figref idref="DRAWINGS">FIG. 2</figref> therefore illustrates the operation of a user refining the search term in order to drill down to a finer level of detail than in <figref idref="DRAWINGS">FIG. 1</figref>. <figref idref="DRAWINGS">FIG. 2</figref> and the following <figref idref="DRAWINGS">FIGS. 3 and 4</figref> also further illustrate the feature of user selection of a branch in the combined word tree, and the visual indications rendered in response to a selected branch. For example, a user may select the branch <b>70</b> that extends between first-level suffix node <b>62</b> and its two leaf nodes <b>66</b>, <b>68</b>. The resulting visual indications are depicted in <figref idref="DRAWINGS">FIG. 3</figref>.</p>
<p id="p-0039" num="0038"><figref idref="DRAWINGS">FIG. 3</figref> depicts a screenshot of another example combined word tree text visualization interface <b>10</b>C (i.e., &#x201c;visualization interface <b>10</b>C&#x201d;) as it may be displayed on a computing device display screen. Visualization interface <b>10</b>C is in a new state after receiving a user input selecting branch <b>70</b>, now labeled <b>70</b>B and displaying a visual indication that it has been selected by the user, connecting suffix nodes <b>62</b> and <b>66</b>. While the visual indication displayed on branch <b>70</b>B is depicted as a filled-in circle on visualization interface <b>10</b>C depicted in <figref idref="DRAWINGS">FIG. 3</figref>, it may take any form in other examples, which may include rendering branch <b>70</b>B in a different and distinguishing color, or highlighting around it with a distinguishing color, or using any other kind of distinguishing shape or pattern on or around branch <b>70</b>B, or any other distinguishing characteristic.</p>
<p id="p-0040" num="0039">Besides displaying that branch <b>70</b>B has been selected by the user, visualization interface <b>10</b>C also displays distinguishing visual indications, represented in <figref idref="DRAWINGS">FIG. 3</figref> with bold print font for the node text and thicker lines for the branches, for the entire matching sequence of text from the source text that includes branch <b>70</b>B. In this case, the selected branch leads to leaf node <b>66</b>, so that it defines only one unique matching sequence of text from the source text. Visualization interface <b>10</b>C visually indicates each portion of this unique matching sequence through the nodes and branches in which it is displayed in the combined tree diagram, so that a user can easily follow along and read the entire original sequence of text, &#x201c;blind is his love and best befits the dark. mercutio: if love be blind, love cannot hit the mark&#x201d;, including a significant amount of contextual text surrounding the search term &#x201c;love be&#x201d; from both before and after the occurrence of the search term in the source text. The text has all been rendered in lower case in this example, to simplify the identification in common of different occurrences of the same word that may be capitalized in one instance and not in another, such as with the word &#x201c;if&#x201d; between the two occurrences from which node <b>46</b> is drawn. In various examples, visualization interface <b>10</b>C may also incorporate upper and lower case from the source text, and may have an option whether or not to be case sensitive.</p>
<p id="p-0041" num="0040">The user can also easily compare this sequence to other sequences from the source text that share more or less material with it surrounding the search term, including other sequences that share in common the strings &#x201c;mercutio: if love be&#x201d;, &#x201c;if love be&#x201d;, and &#x201c;if love be blind&#x201d;, as well as those sequences that share in common only the search term &#x201c;love be&#x201d;. The user can therefore see the matching sequence for the selected branch <b>70</b>B in context compared with similar sequences from throughout the source text, including both similarities and differences in the material both preceding and subsequent to the phrase defined as the search term.</p>
<p id="p-0042" num="0041">As with branch <b>70</b>B, visualization interface <b>10</b>C may use distinguishing colors, shapes, patterns, or any other form of visual indications. While the visual indications are illustratively represented with bold print font for the node text and thicker lines for the branches in the example of <figref idref="DRAWINGS">FIG. 3</figref>, visualization interface <b>10</b>C may also use distinguishing colors in which to render the text font and/or the branches, or use distinguishing colors to highlight around the text font and/or branches, or use underlining, italics, larger font size, all capital letters, flashing patterns or other animations, or any combination of these, or any other distinguishing feature, as the visual indications for the text and/or the branches applicable to a user-selected branch in the combined tree diagram. In another example implementation, for example, visualization interface <b>10</b>C may display the node text for the matching sequence defined by the selected branch <b>70</b>B rendered in orange font color and in bold print, and display the branches for the matching sequence defined by the selected branch <b>70</b>B rendered in orange color and in a thicker size relative to the other branches, while the node text and branches for the combined tree diagram outside of the matching sequence defined by the selected branch may be rendered in black, and in normal font and relatively thinner lines. The user may then make a different selection, the results of which are depicted in <figref idref="DRAWINGS">FIG. 4</figref>.</p>
<p id="p-0043" num="0042"><figref idref="DRAWINGS">FIG. 4</figref> depicts a screenshot of another example combined word tree text visualization interface <b>10</b>D (i.e., &#x201c;visualization interface <b>10</b>D&#x201d;) as it may be displayed on a computing device display screen. Visualization interface <b>10</b>D is in another new state after receiving a user input selecting a different branch, branch <b>72</b> connecting the central node <b>44</b> to the first-order suffix node <b>62</b>. Visualization interface <b>10</b>D displays a visual indication that it has been selected by the user. As with <figref idref="DRAWINGS">FIG. 3</figref>, while the visual indication displayed on branch <b>72</b> is depicted as a filled-in circle on visualization interface <b>10</b>D depicted in <figref idref="DRAWINGS">FIG. 4</figref>, it may take any form in other examples, which may include rendering branch <b>72</b> in a different and distinguishing color, or highlighting around it with a distinguishing color, or using any other kind of distinguishing shape or pattern on or around branch <b>72</b>, or any other distinguishing characteristic.</p>
<p id="p-0044" num="0043">In this case, the selected branch <b>72</b> does not link to a leaf node, and so it does not uniquely define a single selected matching sequence of text among the combined tree diagram of visualization interface <b>10</b>D. Instead, in this instance, the selected branch <b>72</b> defines two different matching sequences that pass through it, both of which include the phrase &#x201c;love be blind&#x201d;, defined by connecting the central node <b>44</b> with the search term &#x201c;love be&#x201d; with the first-order suffix node for the word &#x201c;blind&#x201d;. In this case, visualization interface <b>10</b>D displays the nodes and branches for both of the matching sequences defined by the selected branch <b>72</b> with unique, distinguishing visual indicators, that uniquely distinguish the nodes and branches of each of the individual matching sequences, from each other and from the remainder of the combined tree map displayed in visualization interface <b>10</b>D.</p>
<p id="p-0045" num="0044">These distinguishing visual indicators are depicted with different patterns of dashed and dotted lines in <figref idref="DRAWINGS">FIG. 4</figref> as just one illustrative example, while in other examples, visualization interface <b>10</b>D may again use distinguishing colors in which to render the text font and/or the branches, or use distinguishing colors to highlight around the text font and/or branches, or use underlining, italics, larger font size, all capital letters, flashing patterns or other animations, or any combination of these, or any other distinguishing feature, as the visual indications for the text and/or the branches applicable to a user-selected branch in the combined tree diagram.</p>
<p id="p-0046" num="0045">As another illustrative example using color, visualization interface <b>10</b>D may depict both matching sequences with bold print for the node text and thicker lines for the branches, as well as using a unique color for each of the two matching sequences. For example, visualization interface <b>10</b>D may use orange to render the text and branches for the first matching sequence, &#x201c;lovers can see to do their amorous rites by their own beauties; or, if love be blind, it best agrees with night&#x201d;, and use green for the second matching sequence, &#x201c;blind is his love and best befits the dark. mercutio: if love be blind, love cannot hit the mark&#x201d;. Visualization interface <b>10</b>D may use any of a variety of means for applying color to the nodes and branches that are shared in common, including the central node <b>44</b>, as well as, in this case, the first-level prefix node <b>46</b> for the word &#x201c;if&#x201d; and the first-level suffix node <b>62</b> for the word &#x201c;blind&#x201d;. For example, visualization interface <b>10</b>D may apply parallel lines for the branches and parallel underlining for the node text, with one line for each of the two colors; or it may apply a dashed line that alternates between the two colors; or use some other pattern that combines the two colors in a regular pattern for the nodes and branches shared in common between the two sequences.</p>
<p id="p-0047" num="0046">In another example, visualization interface <b>10</b>D may apply one of the colors for one of the matching sequences to the nodes and branches shared in common among the two sequences defined by the selected branch. So for example, if visualization interface <b>10</b>D uses orange to render the nodes and branches unique to the first matching sequence, and green to render the nodes and branches unique to the second matching sequence, it may simply use either orange or green to render the nodes and branches in common between the two matching sequences, again potentially in combination with the bold font and thicker branch lines. In this example, it is still clear for a user to see and be able to follow each of the matching sequences through the combined tree diagram.</p>
<p id="p-0048" num="0047">In yet another example, visualization interface <b>10</b>D may apply a third color to the nodes and branches shared in common among the two matching sequences. For example, visualization interface <b>10</b>D may render the nodes and branches unique to the first sequence in red and the nodes and branches unique to the second sequence in blue, and render the nodes and branches shared in common between the first and second sequences in purple. Visualization interface <b>10</b>D may apply any type of visual indications that distinguish each of the matching sequences defined by the selected branch.</p>
<p id="p-0049" num="0048">While the example of <figref idref="DRAWINGS">FIG. 3</figref> has only one matching sequence defined by its selected branch <b>70</b>B, and the example of <figref idref="DRAWINGS">FIG. 4</figref> has only two matching sequences defined by its selected branch <b>72</b>, it may be seen that in large, densely populated visualization diagrams, such as depicted for visualization interface <b>10</b> in <figref idref="DRAWINGS">FIG. 1</figref>, there are cases in which a user input for selection of a single branch may define any number of matching sequences that run through that selected branch. For example, referring again to <figref idref="DRAWINGS">FIG. 1</figref>, a user may select branch <b>29</b> connecting the central node <b>14</b> for the original search term &#x201c;love&#x201d; with the first-level suffix node <b>30</b> for the comma. In this case, the user selection of branch <b>29</b> defines thirty-five different matching sequences running across the combined tree diagram visualization interface <b>10</b>, connecting thirty-five different prefix leaf nodes with thirty-five different suffix leaf nodes, interspersed with a pattern of partially shared nodes and branches more complex than those shown in <figref idref="DRAWINGS">FIG. 4</figref>.</p>
<p id="p-0050" num="0049">Visualization interface <b>10</b> may, in this example as well, render uniquely distinguishing visual indicators for each of the thirty-five matching sequences running across the combined tree diagram defined by the selected branch <b>29</b>. For example, it may apply thirty-five different unique colors for the nodes and branches of the various matching sequences, keeping relatively higher-contrast combinations of colors grouped together to aid in distinguishing, and use a subset of the applicable colors for rendering nodes and branches shared among multiple sequences.</p>
<p id="p-0051" num="0050">Visualization interface <b>10</b> may therefore provide a large amount of contextual information, in a single view, about the appearance of the string defined by the selected branch <b>29</b>, in this case a string defined as the original search term &#x201c;love&#x201d; followed by a comma, in each of a large number of different appearances in the source text. This contextual information includes a significant amount of surrounding text both before and after the string defined by the selected branch, for each of the string's occurrences in the source text. Visualization interface <b>10</b> may also offer suggestions or options for adding one of the first-level prefix nodes or suffix nodes to the search term for the central node <b>14</b>, or other suggestions or options for drilling down to details of the combined word tree. Visualization interface <b>10</b> therefore provides a substantial amount of contextual information about the various occurrences of a search term within a source text, with powerful and flexible tools for visualizing how that search term interrelates with various surrounding textual matter among its different occurrences in the source text.</p>
<p id="p-0052" num="0051">Visualization interface <b>10</b> may be implemented in any of a wide variety of types of software, including as a web application provided from a web server in a browser running on another computing device, or as a stand-alone desktop application or mobile application, for example. In one example, visualization interface <b>10</b> may be implemented in a Java applet, and provided by a server for a website and that runs in a browser on a separate computing device. The Java applet may be written in Java or any other language that compiles to Java bytecode, such as Jython, JRuby, or Clojure, for example. In another example, visualization interface <b>10</b> may be implemented as a web application using JavaScript, that may run on a server and provide an interface in a browser on a client computing device. The web application may use a server-side JavaScript implementation such as Node.js, for example. An illustrative computing environment for these implementations is depicted in <figref idref="DRAWINGS">FIG. 5</figref>.</p>
<p id="p-0053" num="0052"><figref idref="DRAWINGS">FIG. 5</figref> is a block diagram of a computing network environment <b>110</b> in which a combined word tree text visualization system may be used, according to an illustrative example. <figref idref="DRAWINGS">FIG. 5</figref> depicts a representation of a network of computer systems including one or more computing devices that implement, execute, or embody a combined word tree text visualization system, and provide a combined word tree text visualization interface <b>10</b> such as is depicted in and described with reference to <figref idref="DRAWINGS">FIGS. 1-4</figref> (including in its specific states <b>10</b>B, <b>10</b>C, <b>10</b>D as depicted in each of the figures).</p>
<p id="p-0054" num="0053">Computing environment <b>110</b> includes network <b>112</b>, that may include one or more networks of any kind that may provide communications links between various devices and computers connected together within computing environment <b>110</b>. Network <b>112</b> may include connections, such as wire, wireless communication links, or fiber optic cables. In the depicted example, server <b>114</b>, server <b>116</b>, and storage unit <b>118</b> connect to network <b>112</b>. In one example, network <b>112</b> is the Internet with a worldwide collection of networks and gateways that use the Transmission Control Protocol/Internet Protocol (TCP/IP) suite of protocols to communicate with one another. At the heart of the Internet is a backbone of high-speed data communication lines between major nodes or host computers, consisting of thousands of commercial, governmental, educational and other computer systems that route data and messages. Network <b>112</b> may also be implemented as a number of different types of networks, such as for example, an intranet, a local area network (LAN), or a wide area network (WAN). <figref idref="DRAWINGS">FIG. 5</figref> is an illustrative example, and not an architectural limitation for the variety of illustrative examples.</p>
<p id="p-0055" num="0054">Servers <b>114</b> and <b>116</b> may include any type of servers, and storage unit <b>118</b> may include any type of storage server, storage area network, redundant array of independent discs (RAID), storage device, cloud storage service, or any other type of data storage. In addition, clients <b>120</b>, <b>122</b>, <b>124</b>, <b>126</b>, and <b>128</b> connect to network <b>112</b>, through any type of wireless and/or hard-line network components or infrastructure. Clients <b>120</b>, <b>122</b>, <b>124</b>, <b>126</b>, and <b>128</b> may be, for example, personal computers, laptop computers, tablet computers, smartphones, or other computing devices. In the depicted example, server <b>114</b> may provide any kind of data, including website content, web applications, a web application interface, or downloaded desktop applications to clients <b>120</b>, <b>122</b>, <b>124</b>, <b>126</b>, and <b>128</b>. Clients <b>120</b>, <b>122</b>, <b>124</b>, <b>126</b>, and <b>128</b> are computing devices that are clients to server <b>114</b> in this example. Computing environment <b>110</b> may include additional servers, clients, storage elements, network elements, and various other devices not shown in <figref idref="DRAWINGS">FIG. 5</figref>.</p>
<p id="p-0056" num="0055">Client computing device <b>128</b> is associated with an illustrative personal computing environment <b>130</b>, as depicted in <figref idref="DRAWINGS">FIG. 3A</figref>, with computing device <b>128</b> being connected to network <b>112</b>, and capable of establishing a network connection to servers <b>114</b> and <b>116</b> through network <b>112</b> and sending requests to servers <b>114</b> and <b>116</b>. Computing environment <b>130</b> in this example also includes user input devices in the form of keyboard <b>136</b>, mouse <b>138</b>, and monitor <b>132</b> rendering a browser window displaying combined word tree text visualization interface <b>10</b>, as shown in <figref idref="DRAWINGS">FIGS. 1-4</figref>. Client computing device <b>128</b> may run a web browser and receive web application data for the combined word tree text visualization web application running on server <b>114</b> or server <b>116</b>, for example. Client computing device <b>128</b> renders the corresponding combined word tree text visualization interface <b>10</b> in the browser window of the web browser program being rendered on the display screen of monitor <b>132</b>, in this example. The web browser program running on computing device <b>128</b> may provide a runtime for the web application interface. For example, the combined word tree text visualization interface <b>10</b> may be written as a Java applet, and the web browser program running on computing device <b>128</b> may include a Java Virtual Machine (JVM) or a Java plugin for executing JVM-compatible bytecode. As another example, the combined word tree text visualization web application may be written at least in part in JavaScript, and the browser may include capability for running JavaScript.</p>
<p id="p-0057" num="0056"><figref idref="DRAWINGS">FIG. 6</figref> is a block diagram of a computing device <b>80</b> that may be used to run a combined word tree text visualization system for providing combined word tree text visualization interface <b>10</b>, according to an illustrative example. Computing device <b>80</b> may be a workstation, server, mainframe computer, notebook or laptop computer, desktop computer, tablet, smartphone, feature phone, or other programmable data processing apparatus of any kind. Computing device <b>80</b> of <figref idref="DRAWINGS">FIG. 6</figref> may represent any of servers <b>114</b>, <b>116</b> or client computing devices <b>120</b>, <b>122</b>, <b>124</b>, <b>126</b>, and <b>128</b> as depicted in <figref idref="DRAWINGS">FIG. 5</figref>, for example. Other possibilities for computing device <b>80</b> are possible, including a computer having capabilities or formats other than or beyond those described herein.</p>
<p id="p-0058" num="0057">In this illustrative example, computing device <b>80</b> includes communications fabric <b>82</b>, which provides communications between processor unit <b>84</b>, memory <b>86</b>, persistent data storage <b>88</b>, communications unit <b>90</b>, and input/output (I/O) unit <b>92</b>. Communications fabric <b>82</b> may include a dedicated system bus, a general system bus, multiple buses arranged in hierarchical form, any other type of bus, bus network, switch fabric, or other interconnection technology. Communications fabric <b>82</b> supports transfer of data, commands, and other information between various subsystems of computing device <b>80</b>.</p>
<p id="p-0059" num="0058">Processor unit <b>84</b> may be a programmable central processing unit (CPU) configured for executing programmed instructions stored in memory <b>86</b>. In another illustrative example, processor unit <b>84</b> may be implemented using one or more heterogeneous processor systems in which a main processor is present with secondary processors on a single chip. In yet another illustrative example, processor unit <b>84</b> may be a symmetric multi-processor system containing multiple processors of the same type. Processor unit <b>84</b> may be a reduced instruction set computing (RISC) microprocessor such as a PowerPC&#xae; processor from IBM&#xae; Corporation, an x86 compatible processor such as a Pentium&#xae; processor from Intel&#xae; Corporation, an Athlon&#xae; processor from Advanced Micro Devices&#xae; Corporation, or any other suitable processor. In various examples, processor unit <b>84</b> may include a multi-core processor, such as a dual core or quad core processor, for example. Processor unit <b>84</b> may include multiple processing chips on one die, and/or multiple dies on one package or substrate, for example. Processor unit <b>84</b> may also include one or more levels of integrated cache memory, for example. In various examples, processor unit <b>84</b> may comprise one or more CPUs distributed across one or more locations.</p>
<p id="p-0060" num="0059">Data storage <b>96</b> includes memory <b>86</b> and persistent data storage <b>88</b>, which are in communication with processor unit <b>84</b> through communications fabric <b>82</b>. Memory <b>86</b> can include a random access semiconductor memory (RAM) for storing application data, i.e., computer program data, for processing. While memory <b>86</b> is depicted conceptually as a single monolithic entity, in various examples, memory <b>86</b> may be arranged in a hierarchy of caches and in other memory devices, in a single physical location, or distributed across a plurality of physical systems in various forms. While memory <b>86</b> is depicted physically separated from processor unit <b>84</b> and other elements of computing device <b>80</b>, memory <b>86</b> may refer equivalently to any intermediate or cache memory at any location throughout computing device <b>80</b>, including cache memory proximate to or integrated with processor unit <b>84</b> or individual cores of processor unit <b>84</b>.</p>
<p id="p-0061" num="0060">Persistent data storage <b>88</b> may include one or more hard disc drives, solid state drives, flash drives, rewritable optical disc drives, magnetic tape drives, or any combination of these or other data storage media. Persistent data storage <b>88</b> may store computer-executable instructions or computer-readable program code for an operating system, application files comprising program code, data structures or data files, and any other type of data. These computer-executable instructions may be loaded from persistent data storage <b>88</b> into memory <b>86</b> to be read and executed by processor unit <b>84</b> or other processors. Data storage <b>96</b> may also include any other hardware elements capable of storing information, such as, for example and without limitation, data, program code in functional form, and/or other suitable information, either on a temporary basis and/or a permanent basis.</p>
<p id="p-0062" num="0061">Persistent data storage <b>88</b> and memory <b>86</b> are examples of physical, tangible, non-transitory computer-readable data storage devices. Data storage <b>96</b> may include any of various forms of volatile memory that may require being periodically electrically refreshed to maintain data in memory, but those skilled in the art will recognize that this also constitutes an example of a physical, tangible, non-transitory computer-readable data storage device. Executable instructions are stored on a non-transitory medium when program code is loaded, stored, relayed, buffered, or cached on a non-transitory physical medium or device, including if only for only a short duration or only in a volatile memory format.</p>
<p id="p-0063" num="0062">Processor unit <b>84</b> can also be suitably programmed to read, load, and execute computer-executable instructions or computer-readable program code for a combined word tree text visualization module that analyzes bodies of text and provides a combined word tree text visualization interface <b>10</b>, as described in greater detail above. This program code may be stored on memory <b>86</b>, persistent data storage <b>88</b>, or elsewhere in computing device <b>80</b>. This program code may also take the form of program code <b>104</b> stored on computer-readable medium <b>102</b> comprised in computer program product <b>100</b>, and may be transferred or communicated, through any of a variety of local or remote means, from computer program product <b>100</b> to computing device <b>80</b> to be enabled to be executed by processor unit <b>84</b>, as further explained below.</p>
<p id="p-0064" num="0063">The operating system may provide functions such as device interface management, memory management, and multiple task management. The operating system can be a Unix based operating system such as the AIX&#xae; operating system from IBM&#xae; Corporation, a non-Unix based operating system such as the Windows&#xae; family of operating systems from Microsoft&#xae; Corporation, a network operating system such as JavaOS&#xae; from Oracle&#xae; Corporation, a mobile device operating system such as iOS&#xae; from Apple&#xae; Inc., or any other suitable operating system. Processor unit <b>84</b> can be suitably programmed to read, load, and execute instructions of the operating system.</p>
<p id="p-0065" num="0064">Communications unit <b>90</b>, in this example, provides for communications with other computing or communications systems or devices. Communications unit <b>90</b> may provide communications through the use of physical and/or wireless communications links. Communications unit <b>90</b> may include a network interface card for interfacing with a LAN <b>16</b>, an Ethernet adapter, a Token Ring adapter, a modem for connecting to a transmission system such as a telephone line, or any other type of communication interface. Communications unit <b>90</b> can be used for operationally connecting many types of peripheral computing devices to computing device <b>80</b>, such as printers, bus adapters, and other computers. Communications unit <b>90</b> may be implemented as an expansion card or be built into a motherboard, for example.</p>
<p id="p-0066" num="0065">The input/output unit <b>92</b> can support devices suited for input and output of data with other devices that may be connected to computing device <b>80</b>, such as keyboard, a mouse or other pointer, a touchscreen interface, an interface for a printer or any other peripheral device, a removable magnetic or optical disc drive (including CD-ROM, DVD-ROM, or Blu-Ray), a universal serial bus (USB) receptacle, or any other type of input and/or output device. Input/output unit <b>92</b> may also include any type of interface for video output in any type of video output protocol and any type of monitor or other video display technology, in various examples. It will be understood that some of these examples may overlap with each other, or with example components of communications unit <b>90</b> or data storage <b>96</b>. Input/output unit <b>92</b> may also include appropriate device drivers for any type of external device, or such device drivers may reside in the operating system or elsewhere on computing device <b>80</b> as appropriate.</p>
<p id="p-0067" num="0066">Computing device <b>80</b> also includes a display adapter <b>94</b> in this illustrative example, which provides one or more connections for one or more display devices, such as display device <b>98</b>, which may include any of a variety of types of display devices, including monitor <b>132</b> of <figref idref="DRAWINGS">FIG. 5</figref>. It will be understood that some of these examples may overlap with example components of communications unit <b>90</b> or input/output unit <b>92</b>. Input/output unit <b>92</b> may also include appropriate device drivers for any type of external device, or such device drivers may reside in the operating system or elsewhere on computing device <b>80</b> as appropriate. Display adapter <b>94</b> may include one or more video cards, one or more graphics processing units (GPUs), one or more video-capable connection ports, or any other type of data connector capable of communicating video data, in various examples. Display device <b>98</b> may be any kind of video display device, such as a monitor, a television, or a projector, in various examples.</p>
<p id="p-0068" num="0067">Input/output unit <b>92</b> may include a drive, socket, or outlet for receiving computer program product <b>100</b>, which comprises a computer-readable medium <b>102</b> having computer program code <b>104</b> stored thereon. For example, computer program product <b>100</b> may be a CD-ROM, a DVD-ROM, a Blu-Ray disc, a magnetic disc, a USB stick, a flash drive, or an external hard disc drive, as illustrative examples, or any other suitable data storage technology. Computer program code <b>104</b> may include a combined word tree text visualization computer program for providing the combined word tree text visualization interface <b>10</b> as described above.</p>
<p id="p-0069" num="0068">Computer-readable medium <b>102</b> may include any type of optical, magnetic, or other physical medium that physically encodes program code <b>104</b> as a binary series of different physical states in each unit of memory that, when read by computing device <b>80</b>, induces a physical signal that is read by processor <b>84</b> that corresponds to the physical states of the basic data storage elements of storage medium <b>102</b>, and that induces corresponding changes in the physical state of processor unit <b>84</b>. That physical program code signal may be modeled or conceptualized as computer-readable instructions at any of various levels of abstraction, such as a high-level programming language, assembly language, or machine language, but ultimately constitutes a series of physical electrical and/or magnetic interactions that physically induce a change in the physical state of processor unit <b>84</b>, thereby physically causing processor unit <b>84</b> to generate physical outputs that correspond to the computer-executable instructions, in a way that modifies computing device <b>80</b> into a new physical state and causes computing device <b>80</b> to physically assume new capabilities that it did not have until its physical state was changed by loading the executable instructions comprised in program code <b>104</b>.</p>
<p id="p-0070" num="0069">In some illustrative examples, program code <b>104</b> may be downloaded over a network to data storage <b>96</b> from another device or computer system, such as a server, for use within computing device <b>80</b>. Program code <b>104</b> comprising computer-executable instructions may be communicated or transferred to computing device <b>80</b> from computer-readable medium <b>102</b> through a hard-line or wireless communications link to communications unit <b>90</b> and/or through a connection to input/output unit <b>92</b>. Computer-readable medium <b>102</b> comprising program code <b>104</b> may be located at a separate or remote location from computing device <b>80</b>, and may be located anywhere, including at any remote geographical location anywhere in the world, and may relay program code <b>104</b> to computing device <b>80</b> over any type of one or more communication links, such as the Internet and/or other packet data networks. The program code <b>104</b> may be transmitted over a wireless Internet connection, or over a shorter-range direct wireless connection such as wireless LAN, Bluetooth&#x2122;, Wi-Fi&#x2122;, or an infrared connection, for example. Any other wireless or remote communication protocol may also be used in other implementations.</p>
<p id="p-0071" num="0070">The communications link and/or the connection may include wired and/or wireless connections in various illustrative examples, and program code <b>104</b> may be transmitted from a source computer-readable medium <b>102</b> over non-tangible media, such as communications links or wireless transmissions containing the program code <b>104</b>. Program code <b>104</b> may be more or less temporarily or durably stored on any number of intermediate tangible, physical computer-readable devices and media, such as any number of physical buffers, caches, main memory, or data storage components of servers, gateways, network nodes, mobility management entities, or other network assets, en route from its original source medium to computing device <b>80</b>.</p>
<p id="p-0072" num="0071"><figref idref="DRAWINGS">FIG. 7</figref> is a flowchart illustrating operation of an example method <b>140</b> for a computing device, such as any of the computing devices depicted in <figref idref="DRAWINGS">FIGS. 5 and 6</figref>, to provide a combined word tree text visualization interface <b>10</b> such as is depicted in <figref idref="DRAWINGS">FIGS. 1-4</figref>. In method <b>140</b>, a computing device receives a search term (<b>142</b>) and identifies instances of the search term in a source text (<b>144</b>). For at least a set of the instances of the search term identified in the source text, the computing device identifies a prefix string comprising a plurality of tokens preceding the search term in the source text, and identifies a suffix string comprising a plurality of tokens subsequent to the search term in the source text (<b>146</b>).</p>
<p id="p-0073" num="0072">The computing device provides data to display a visualization interface that includes the search term within a combined tree diagram that includes a prefix tree extending to a first side of the search term, and a suffix tree extending to a second side of the search term. The prefix tree displays, in a tree diagram format, at least a set of the prefix strings for the instances of the search term in the source text, and the suffix tree displays, in a tree diagram format, at least a set of the suffix strings for the instances of the search term in the source text. The prefix tree includes tokens that are shared in common among the prefix strings as nodes connected to adjacent tokens by branches, and the suffix tree likewise includes tokens that are shared in common among the suffix strings as nodes connected to adjacent tokens by branches. The branches in the prefix tree and the suffix tree are user-selectable in the visualization interface (<b>148</b>).</p>
<p id="p-0074" num="0073">In response to receiving a user input selecting one of the branches, the computing device provides data to display a visual indication of a prefix string and a suffix string in the visualization interface that form a matching sequence of prefix string, search term, and suffix string that originate together in the source text, for each of one or more matching sequences that are connected through the selected branch (<b>150</b>).</p>
<p id="p-0075" num="0074">As will be appreciated by one skilled in the art, aspects of the present invention may be embodied as a method, a computing system, or a computer program product, for example. Accordingly, aspects of the present invention may take the form of an entirely hardware embodiment, an entirely software embodiment (including firmware, resident software, micro-code, etc.) or an embodiment combining software and hardware aspects that may all generally be referred to herein as a &#x201c;circuit,&#x201d; &#x201c;module&#x201d; or &#x201c;system.&#x201d;</p>
<p id="p-0076" num="0075">Furthermore, aspects of the present invention may take the form of a computer program product embodied in one or more computer-readable data storage devices or computer-readable data storage components that include computer-readable medium(s) having computer readable program code embodied thereon. For example, a computer-readable data storage device may be embodied as a tangible device that may include a tangible, non-transitory data storage medium, as well as a controller configured for receiving instructions from a resource such as a central processing unit (CPU) to retrieve information stored at one or more particular addresses in the tangible, non-transitory data storage medium, and for retrieving and providing the information stored at those particular one or more addresses in the data storage medium.</p>
<p id="p-0077" num="0076">The data storage device may store information that encodes both instructions and data, for example, and may retrieve and communicate information encoding instructions and/or data to other resources such as a CPU, for example. The data storage device may take the form of a main memory component such as a hard disc drive or a flash drive in various embodiments, for example. The data storage device may also take the form of another memory component such as a RAM integrated circuit or a buffer or a local cache in any of a variety of forms, in various embodiments. This may include a cache integrated with a controller, a cache integrated with a graphics processing unit (GPU), a cache integrated with a system bus, a cache integrated with a multi-chip die, a cache integrated within a CPU, or the processor registers within a CPU, as various illustrative examples. The data storage apparatus or data storage system may also take a distributed form such as a redundant array of independent discs (RAID) system or a cloud-based data storage service, and still be considered to be a data storage component or data storage system as a part of or a component of an embodiment of a system of the present disclosure, in various embodiments.</p>
<p id="p-0078" num="0077">Any combination of one or more computer readable medium(s) may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be, for example, but is not limited to, an electronic, magnetic, optical, electromagnetic, infrared, electro-optic, heat-assisted magnetic, or semiconductor system, apparatus, or device, or any suitable combination of the foregoing. A non-exhaustive list of additional specific examples of a computer readable storage medium includes the following: an electrical connection having one or more wires, a portable computer diskette, a hard disc, a random access memory (RAM), a read-only memory (ROM), an erasable programmable read-only memory (EPROM or Flash memory), an optical fiber, a portable compact disc read-only memory (CD-ROM), an optical storage device, a magnetic storage device, or any suitable combination of the foregoing. In the context of this document, a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system, apparatus, or device, for example.</p>
<p id="p-0079" num="0078">Program code embodied on a computer readable medium may be transmitted using any appropriate medium, including but not limited to radio frequency (RF) or other wireless, wireline, optical fiber cable, etc., or any suitable combination of the foregoing. Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages, including an object oriented programming language such as Java, Smalltalk, C++, Objective-C, or the like, or other imperative programming languages such as C, or functional languages such as Common Lisp, Haskell, or Clojure, or multi-paradigm languages such as C#, Python, Ruby, or Scala, among a variety of illustrative examples. One or more sets of applicable program code may execute partly or entirely on the user's desktop or laptop computer, smartphone, tablet, or other computing device; as a stand-alone software package, partly on the user's computing device and partly on a remote computing device; or entirely on one or more remote servers or other computing devices, among various examples. In the latter scenario, the remote computing device may be connected to the user's computing device through any type of network, including a local area network (LAN) or a wide area network (WAN), or the connection may be made to an external computer (for example, through a public network such as the Internet using an Internet Service Provider), and for which a virtual private network (VPN) may also optionally be used.</p>
<p id="p-0080" num="0079">In various illustrative embodiments, various computer programs, software applications, modules, or other software elements may be executed in connection with one or more user interfaces being executed on a client computing device, that may also interact with one or more web server applications that may be running on one or more servers or other separate computing devices and may be executing or accessing other computer programs, software applications, modules, databases, data stores, or other software elements or data structures.</p>
<p id="p-0081" num="0080">A graphical user interface may be executed on a client computing device and may access applications from the one or more web server applications, for example. Various content within a browser or dedicated application graphical user interface may be rendered or executed in or in association with the web browser using any combination of any release version of HTML, CSS, JavaScript, XML, AJAX, JSON, and various other languages or technologies. Other content may be provided by computer programs, software applications, modules, or other elements executed on the one or more web servers and written in any programming language and/or using or accessing any computer programs, software elements, data structures, or technologies, in various illustrative embodiments.</p>
<p id="p-0082" num="0081">Aspects of the present invention are described herein with reference to flowchart illustrations and/or block diagrams of methods, apparatus (systems) and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and/or block diagrams, and combinations of blocks in the flowchart illustrations and/or block diagrams, can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer, special purpose computer, or other programmable data processing apparatus to produce a machine, such that the instructions, which execute via the processor of the computer or other programmable data processing apparatus, may create means for implementing the functions/acts specified in the flowchart and/or block diagram block or blocks.</p>
<p id="p-0083" num="0082">These computer program instructions may also be stored in a computer readable medium that can direct a computer, other programmable data processing apparatus, or other devices to function in a particular manner, such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function/act specified in the flowchart and/or block diagram block or blocks. The computer program instructions may also be loaded onto a computer, other programmable data processing apparatus, or other devices to cause a series of operational steps to be performed on the computer, other programmable apparatus or other devices, to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide or embody processes for implementing the functions or acts specified in the flowchart and/or block diagram block or blocks.</p>
<p id="p-0084" num="0083">The flowchart and block diagrams in the figures illustrate the architecture, functionality, and operation of possible implementations of devices, methods and computer program products according to various embodiments of the present disclosure. In this regard, each block in the flowchart or block diagrams may represent a module, segment, or portion of code, which includes one or more executable instructions for implementing the specified logical function(s). It should also be noted that, in some implementations, the functions noted in the block may occur out of the order noted in the figures. For example, two blocks shown in succession may, in fact, be executed substantially concurrently, or the blocks may be executed in a different order, or the functions in different blocks may be processed in different but parallel threads, depending upon the functionality involved. Each block of the block diagrams and/or flowchart illustration, and combinations of blocks in the block diagrams and/or flowchart illustration, may be implemented by special purpose hardware-based systems that perform the specified functions or acts, or combinations of special purpose hardware and computer instructions.</p>
<p id="p-0085" num="0084">The description of the present disclosure has been presented for purposes of illustration and description, and is not intended to be exhaustive or limited to the disclosure in the form disclosed. Many modifications and variations will be understood by those of ordinary skill in the art based on the concepts disclosed herein. The particular examples described were chosen and disclosed in order to explain the principles of the disclosure and example practical applications, and to enable others of ordinary skill in the art to understand the disclosure for various embodiments with various modifications as are suited to the particular use contemplated. The various examples described herein and other embodiments are within the scope of the following claims.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A method comprising:
<claim-text>receiving a search term;</claim-text>
<claim-text>identifying instances of the search term in a source text;</claim-text>
<claim-text>for each of the instances of the search term identified in the source text, identifying a prefix string comprising a plurality of tokens preceding the search term in the source text, and identifying a suffix string comprising a plurality of tokens subsequent to the search term in the source text;</claim-text>
<claim-text>providing data to display a visualization interface that comprises the search term within a combined tree diagram comprising a prefix tree extending to a first side of the search term, and a suffix tree extending to a second side of the search term, such that the prefix tree displays, in a tree diagram format, the prefix strings for the instances of the search term identified in the source text, and the suffix tree displays, in tree diagram format, the suffix strings for the instances of the search term identified in the source text, wherein the prefix tree comprises tokens that are shared in common among the prefix strings as nodes connected to adjacent tokens by branches, and the suffix tree comprises tokens that are shared in common among the suffix strings as nodes connected to adjacent tokens by branches, wherein the branches in each of the prefix tree and the suffix tree are user-selectable in the visualization interface; and</claim-text>
<claim-text>in response to receiving a user input selecting one of the branches in the prefix tree or in the suffix tree, and for each of one or more matching sequences that are connected through the selected branch, providing data to display a visual indication of a particular prefix string and a particular suffix string in the visualization interface that form a unique matching sequence of the particular prefix string, the search term, and the particular suffix string that occur together in the source text, wherein each of the one or more matching sequences forms a unique matching sequence from the source text, and wherein the visual indication comprises a unique graphical indicator applied to each unique matching sequence through the corresponding nodes in the prefix tree, the search term, and the corresponding nodes in the suffix tree for each of the unique matching sequences that comprise the search term and the selected branch.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the unique graphical indicator applied to each unique matching sequence comprises a unique color that is different from a color applied to any of the other unique matching sequences.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the unique color applied to each unique matching sequence comprises one or more of: a font color in which text for a particular unique matching sequence is rendered; a color in which branches in the given matching sequence are rendered; and a highlighting color that is rendered surrounding or proximate to text or branches of the given matching sequence.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the nodes in the prefix tree and the suffix tree are also user-selectable in the visualization interface, the method further comprising:
<claim-text>receiving a user input selecting one of the nodes; and</claim-text>
<claim-text>combining a token in the selected node with the search term into a new search term; and</claim-text>
<claim-text>providing data to display an updated visualization interface that comprises the new search term within a new combined tree diagram, comprising a new prefix tree and a new suffix tree, such that the new prefix tree displays, in tree diagram format, the prefix strings for instances of the new search term in the source text, and the new suffix tree displays, in tree diagram format, the suffix strings for instances of the new search term in the source text.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the selected branch is a first selected branch, the method further comprising:
<claim-text>receiving a user input selecting another one of the branches in the prefix tree or in the suffix tree as a second selected branch; and</claim-text>
<claim-text>for each of one or more matching sequences that are connected through the first selected branch and the second selected branch, providing data to display visual indications of prefix strings and suffix strings in the visualization interface that form a unique matching sequence of a particular prefix string, the search term, and a particular suffix string that occur together in the source text, wherein each of the one or more matching sequences forms a unique matching sequence from the source text, and wherein the visual indication comprises a unique graphical indicator applied to each unique matching sequence through the corresponding nodes in the prefix tree, the search term, and the corresponding nodes in the suffix tree for each of the unique matching sequences that comprise the search term, the first selected branch, and the second selected branch.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising providing user-selectable options for ordering of the prefix tree and the suffix tree in the visualization interface selectable from among two or more ordering options selected from among an occurrence order, a frequency order, and an alphabetical order.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The method of <claim-ref idref="CLM-00006">claim 6</claim-ref>, wherein the occurrence order, the frequency order, or the alphabetical order may each be selected for the prefix tree or the suffix tree.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising providing independent scrolling for the prefix tree and the suffix tree.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising providing navigation buttons for the visualization interface that enable user inputs for navigating backward or forward among a history of states of the visualization interface based on a history of user inputs entered to the visualization interface.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. A computing system comprising:
<claim-text>one or more processors;</claim-text>
<claim-text>one or more computer-readable tangible storage devices;</claim-text>
<claim-text>program instructions, stored on at least one of the one or more computer-readable tangible storage devices for execution by at least one of the one or more processors, to receive a search term;</claim-text>
<claim-text>program instructions, stored on at least one of the one or more computer-readable tangible storage devices for execution by at least one of the one or more processors, to identify instances of the search term in a source text;</claim-text>
<claim-text>program instructions, stored on at least one of the one or more computer-readable tangible storage devices for execution by at least one of the one or more processors, to identify, for each of the instances of the search term identified in the source text, a prefix string comprising a plurality of tokens preceding the search term in the source text, and to identify a suffix string comprising a plurality of tokens subsequent to the search term in the source text;</claim-text>
<claim-text>program instructions, stored on at least one of the one or more computer-readable tangible storage devices for execution by at least one of the one or more processors, to provide data to display on a display device a visualization interface that comprises the search term within a combined tree diagram comprising a prefix tree extending to a first side of the search term, and a suffix tree extending to a second side of the search term, such that the prefix tree displays, in tree diagram format, the prefix strings for the instances of the search term identified in the source text, and the suffix tree displays, in tree diagram format, the suffix strings for the instances of the search term identified in the source text, wherein the prefix tree comprises tokens that are shared in common among the prefix strings as nodes connected to adjacent tokens by branches, and the suffix tree comprises tokens that are shared in common among the suffix strings as nodes connected to adjacent tokens by branches, wherein the branches in the prefix tree and the suffix tree are user-selectable in the visualization interface; and</claim-text>
<claim-text>program instructions, stored on at least one of the one or more computer-readable tangible storage devices for execution by at least one of the one or more processors, to provide, in response to receiving, through a user input device, a user input selecting one of the branches in the prefix tree or in the suffix tree, and for each of one or more matching sequences that are connected through the selected branch, data to display a visual indication of a particular prefix string and a particular suffix string in the visualization interface that form a unique matching sequence of the particular prefix string, the search term, and the particular suffix string that occur together in the source text, wherein each of the one or more matching sequences forms a unique matching sequence from the source text, and wherein the visual indication comprises a unique graphical indicator applied to each unique matching sequence through the corresponding nodes in the prefix tree, the search term, and the corresponding nodes in the suffix tree for each of the unique matching sequences that comprise the search term and the selected branch.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The computing system of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the unique graphical indicator applied to each unique matching sequence comprises a unique color that is different from a color applied to any of the other unique matching sequences.</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The computing system of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the unique color applied to each unique matching sequence comprises one or more of: a font color in which text for the given matching sequence is rendered; a color in which branches in the given matching sequence are rendered; and a highlighting color that is rendered surrounding or proximate to text or branches of the given matching sequence.</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The computing system of <claim-ref idref="CLM-00010">claim 10</claim-ref>, further comprising:
<claim-text>program instructions, stored on at least one of the one or more computer-readable tangible storage devices for execution by at least one of the one or more processors, to receive a user input selecting one of the nodes; and</claim-text>
<claim-text>program instructions, stored on at least one of the one or more computer-readable tangible storage devices for execution by at least one of the one or more processors, to combine a token in the selected node with the search term into a new search term, and to provide data to display an updated visualization interface that comprises the new search term within a combined tree diagram, comprising a new prefix tree and a new suffix tree, such that the new prefix tree displays, in a tree diagram format, the prefix strings for instances of the new search term in the source text, and the new suffix tree displays, in a tree diagram format, the suffix strings for instances of the new search term in the source text.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The computing system of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the selected branch is a first selected branch, the method further comprising:
<claim-text>program instructions, stored on at least one of the one or more computer-readable tangible storage devices for execution by at least one of the one or more processors, to receive a user input selecting another one of the branches in the prefix tree or in the suffix tree as a second selected branch; and</claim-text>
<claim-text>program instructions, stored on at least one of the one or more computer-readable tangible storage devices for execution by at least one of the one or more processors, to provide data to display visual indications of prefix strings and suffix strings in the visualization interface that form unique matching sequences of prefix string, search term, and suffix string that occur together in the source text, for each of one or more of the unique matching sequences that comprises the first selected branch and the second selected branch.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. A computer program product comprising:
<claim-text>one or more computer-readable tangible storage devices;</claim-text>
<claim-text>program instructions, stored on at least one of the one or more computer-readable tangible storage devices, to receive a search term;</claim-text>
<claim-text>program instructions, stored on at least one of the one or more computer-readable tangible storage devices, to identify instances of the search term in a source text;</claim-text>
<claim-text>program instructions, stored on at least one of the one or more computer-readable tangible storage devices, to identify, for each of the instances of the search term identified in the source text, a prefix string comprising a plurality of tokens preceding the search term in the source text, and to identify a suffix string comprising a plurality of tokens subsequent to the search term in the source text;</claim-text>
<claim-text>program instructions, stored on at least one of the one or more computer-readable tangible storage devices, to provide data to display a visualization interface that comprises the search term within a combined tree diagram comprising a prefix tree extending to a first side of the search term, and a suffix tree extending to a second side of the search term, such that the prefix tree displays, in tree diagram format, the prefix strings for the instances of the search term identified in the source text, and the suffix tree displays, in tree diagram format, the suffix strings for the instances of the search term identified in the source text, wherein the prefix tree comprises tokens that are shared in common among the prefix strings as nodes connected to adjacent tokens by branches, and the suffix tree comprises tokens that are shared in common among the suffix strings as nodes connected to adjacent tokens by branches, wherein the branches in the prefix tree and the suffix tree are user-selectable in the visualization interface; and</claim-text>
<claim-text>program instructions, stored on at least one of the one or more computer-readable tangible storage devices, to provide, in response to receiving a user input selecting one of the branches in the prefix tree or in the suffix tree, and for each of one or more matching sequences that are connected through the selected branch, data to display a visual indication of a particular prefix string and a particular suffix string in the visualization interface that form a unique matching sequence of the particular prefix string, the search term, and the particular suffix string that occur together in the source text, wherein each of the one or more matching sequences forms a unique matching sequence from the source text, and wherein the visual indication comprises a unique graphical indicator applied to each unique matching sequence through the corresponding nodes in the prefix tree, the search term, and the corresponding nodes in the suffix tree for each of the unique matching sequences that comprise the search term and the selected branch.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The computer program product of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the unique graphical indicator applied to each unique matching sequence comprises a unique color that is different from a color applied to any of the other unique matching sequences.</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The computer program product of <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein the unique color applied to each unique matching sequence comprises one or more of: a font color in which text for the given matching sequence is rendered; a color in which branches in the given matching sequence are rendered; and a highlighting color that is rendered surrounding or proximate to text or branches of the given matching sequence.</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The computer program product of <claim-ref idref="CLM-00015">claim 15</claim-ref>, further comprising:
<claim-text>program instructions, stored on at least one of the one or more computer-readable tangible storage devices, to receive a user input selecting one of the nodes; and</claim-text>
<claim-text>program instructions, stored on at least one of the one or more computer-readable tangible storage devices, to combine a token in the selected node with the search term into a new search term, and to provide data to display an updated visualization interface that comprises the new search term within a combined tree diagram, comprising a new prefix tree and a new suffix tree, such that the new prefix tree displays, in a tree diagram format, the prefix strings for instances of the new search term in the source text, and the new suffix tree displays, in a tree diagram format, the suffix strings for instances of the new search term in the source text.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. The computer program product of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the selected branch is a first selected branch, the method further comprising:
<claim-text>program instructions, stored on at least one of the one or more computer-readable tangible storage devices, to receive a user input selecting another one of the branches in the prefix tree or in the suffix tree as a second selected branch; and</claim-text>
<claim-text>program instructions, stored on at least one of the one or more computer-readable tangible storage devices, to provide data to display visual indications of prefix strings and suffix strings in the visualization interface that form unique matching sequences of prefix string, search term, and suffix string that occur together in the source text, for each of one or more of the unique matching sequences that comprises the first selected branch and the second selected branch.</claim-text>
</claim-text>
</claim>
</claims>
</us-patent-grant>

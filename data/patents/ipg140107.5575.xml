<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08626675-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08626675</doc-number>
<kind>B1</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>12559943</doc-number>
<date>20090915</date>
</document-id>
</application-reference>
<us-application-series-code>12</us-application-series-code>
<us-term-of-grant>
<us-term-extension>593</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>15</main-group>
<subgroup>18</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>706 12</main-classification>
</classification-national>
<invention-title id="d2e53">Systems and methods for user-specific tuning of classification heuristics</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>7555621</doc-number>
<kind>B1</kind>
<name>Pavlyushchik</name>
<date>20090600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>711162</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>2004/0128355</doc-number>
<kind>A1</kind>
<name>Chao et al.</name>
<date>20040700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709206</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>2006/0015563</doc-number>
<kind>A1</kind>
<name>Judge et al.</name>
<date>20060100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709206</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>2008/0162384</doc-number>
<kind>A1</kind>
<name>Kleist et al.</name>
<date>20080700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>706 12</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>2009/0187992</doc-number>
<kind>A1</kind>
<name>Poston</name>
<date>20090700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>726 24</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>2009/0254970</doc-number>
<kind>A1</kind>
<name>Agarwal et al.</name>
<date>20091000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>726  1</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>2010/0313035</doc-number>
<kind>A1</kind>
<name>Turbin et al.</name>
<date>20101200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>713189</main-classification></classification-national>
</us-citation>
<us-citation>
<nplcit num="00008">
<othercit>Removing web spam links from search engine results Manuel Egele Clemens Kolbitsch Christian Platzer Received: Dec. 22, 2008 / Accepted: Aug. 3, 2009 &#xa9; Springer-Verlag France 2009.</othercit>
</nplcit>
<category>cited by examiner</category>
</us-citation>
</us-references-cited>
<number-of-claims>20</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>706 12</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>6</number-of-drawing-sheets>
<number-of-figures>6</number-of-figures>
</figures>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Satish</last-name>
<first-name>Sourabh</first-name>
<address>
<city>Fremont</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Satish</last-name>
<first-name>Sourabh</first-name>
<address>
<city>Fremont</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>ALG Intellectual Property, LLC</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>Symantec Corporation</orgname>
<role>02</role>
<address>
<city>Mountain View</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Chaki</last-name>
<first-name>Kakali</first-name>
<department>2122</department>
</primary-examiner>
<assistant-examiner>
<last-name>Seck</last-name>
<first-name>Ababacar</first-name>
</assistant-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">A computer-implemented method for user-specific tuning of classification heuristics may include: 1) identifying a trusted software component on the computing device that has been excluded from analysis by a classification heuristic, 2) applying the classification heuristic to the trusted software component, 3) determining that the classification heuristic incorrectly classified the trusted software component, and then 4) lowering a confidence score associated with the classification heuristic.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="186.69mm" wi="180.34mm" file="US08626675-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="234.27mm" wi="181.86mm" file="US08626675-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="247.14mm" wi="160.78mm" file="US08626675-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="244.52mm" wi="154.86mm" file="US08626675-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="235.54mm" wi="190.75mm" orientation="landscape" file="US08626675-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="230.29mm" wi="177.29mm" orientation="landscape" file="US08626675-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="219.12mm" wi="181.53mm" orientation="landscape" file="US08626675-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">BACKGROUND</heading>
<p id="p-0002" num="0001">Decision trees and other heuristics are commonly used as predictive models to map observations about an item with conclusions about the item's target value. For example, a security-software vendor may use decision trees as predictive models for identifying malicious computer files (&#x201c;malware&#x201d;) based on attributes, characteristics, and/or behaviors of files.</p>
<p id="p-0003" num="0002">Decision trees and other heuristics may be trained and refined using a corpus of known samples. For example, a security-software vendor may train a malware-detection heuristic by applying and refining the heuristic using a corpus of samples containing known-malicious files and known-legitimate files. In order to maximize the accuracy and efficacy of such heuristics across large user bases, security-software vendors typically form these training corpuses using files and other software components that are prevalent within their user bases.</p>
<p id="p-0004" num="0003">Unfortunately, because the accuracy of a heuristic is generally limited by the size of the corpus of samples used to train the heuristic, such heuristics may generate false positives upon being deployed and used on end users' machines in the real world. For example, a malware-detection heuristic may falsely classify legitimate administrative utilities (such as network-traffic monitoring tools or the like) on the machine of an IT security analyst if these tools exhibit behaviors and/or attributes that are closely related to behaviors and/or attributes exhibited by known-malicious software components (such as malicious sniffing tools) within the corpus of samples used to train the heuristic.</p>
<p id="p-0005" num="0004">Heuristic vendors may attempt improve the accuracy of a heuristic by: 1) adding misclassified samples to the corpus of samples used to train the heuristic, 2) re-training the heuristic using the modified corpus of samples, and then 3) redeploying the re-trained heuristic. However, if a security-software vendor attempts to tune or otherwise refine a heuristic based on false positives generated on the machines of certain specific classes of end users (such as IT security analysts), the overall efficacy and/or accuracy of the heuristic may suffer with respect to the larger user base as a whole. For example, a security-software vendor may hamper a malware-detection heuristic's ability to detect malicious network sniffing components by adding legitimate network-traffic monitoring tools to a corpus of samples used to re-train the heuristic.</p>
<heading id="h-0002" level="1">SUMMARY</heading>
<p id="p-0006" num="0005">As will be described in greater detail below, the instant disclosure generally relates to systems and methods for user-specific tuning of classification heuristics. In one example, one or more of the various systems described herein may accomplish this task by: 1) identifying at least one trusted software component (such as a digitally signed file) on an end user's computing device that has been excluded from analysis by a classification heuristic (such as a decision tree), 2) causing the end user's machine to apply the classification heuristic to the trusted software component, 3) determining whether the classification heuristic incorrectly classified the trusted software component as malicious (i.e., whether the classification heuristic produced a false positive on the trusted software component), and, if so, 4) modifying or tuning the classification heuristic by either lowering a confidence score associated with a function of the classification heuristic (such as a branch of a decision tree) that resulted in the misclassification or excluding the function that resulted in the misclassification from the classification heuristic altogether.</p>
<p id="p-0007" num="0006">In one example, the trusted software component may represent a software component that would not otherwise have been scanned by the classification heuristic. For example, the trusted software component may represent a digitally signed file that would not otherwise have been analyzed by a malware-detection heuristic due its trusted status.</p>
<p id="p-0008" num="0007">In some examples, the systems described herein may perform each of the above tasks in a background process or thread using free CPU cycles on the end user's machine (e.g., when the end user's machine is idle). In additions, in some examples the systems described herein may automatically allow a trusted software component to execute, even if a classification heuristic misclassifies the trusted software component as malicious. In other examples, the systems described herein may prompt a user of the computing device to allow the trusted software component to execute.</p>
<p id="p-0009" num="0008">In some examples, the systems described herein may only exclude (or lower a confidence score associated with) the function of the classification heuristic that resulted in the misclassification if a confidence score associated with the classification exceeds a predetermined threshold (i.e., if the classification heuristic assigned a high confidence score to the classification, such as, e.g., 75 on a scale of 1-100). In addition, in some examples the systems described herein may: 1) identify, by tracking multiple misclassifications over time, attributes of trusted software components that result in incorrect classifications and then 2) exclude (or lower a confidence score associated with) each function of the classification heuristic that involves the identified attributes.</p>
<p id="p-0010" num="0009">By applying classification heuristics to various trusted software components on end users' machines that would not otherwise have been analyzed by these heuristics, the systems and methods described herein may enable heuristic providers to analyze the accuracy of their heuristics relative to specific end users and automatically modify or tune these heuristics based on results of the same. Moreover, by modifying or tuning heuristics upon deployment on end users' machines, the systems and methods disclosed herein may enable a heuristic provider to improve the accuracy and effectiveness of the provider's heuristics without negatively impacting the overall efficacy of these heuristics relative to the provider's user base as whole.</p>
<p id="p-0011" num="0010">Features from any of the above-mentioned embodiments may be used in combination with one another in accordance with the general principles described herein. These and other embodiments, features, and advantages will be more fully understood upon reading the following detailed description in conjunction with the accompanying drawings and claims.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0012" num="0011">The accompanying drawings illustrate a number of exemplary embodiments and are a part of the specification. Together with the following description, these drawings demonstrate and explain various principles of the instant disclosure.</p>
<p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. 1</figref> is a block diagram of an exemplary system for user-specific tuning of classification heuristics.</p>
<p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. 2</figref> is a block diagram of an exemplary system for user-specific tuning of classification heuristics.</p>
<p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. 3</figref> is a flow diagram of an exemplary method for user-specific tuning of classification heuristics.</p>
<p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. 4</figref> is a block diagram of an exemplary classification heuristic.</p>
<p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. 5</figref> is a block diagram of an exemplary computing system capable of implementing one or more of the embodiments described and/or illustrated herein.</p>
<p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. 6</figref> is a block diagram of an exemplary computing network capable of implementing one or more of the embodiments described and/or illustrated herein.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<p id="p-0019" num="0018">Throughout the drawings, identical reference characters and descriptions indicate similar, but not necessarily identical, elements. While the exemplary embodiments described herein are susceptible to various modifications and alternative forms, specific embodiments have been shown by way of example in the drawings and will be described in detail herein. However, the exemplary embodiments described herein are not intended to be limited to the particular forms disclosed. Rather, the instant disclosure covers all modifications, equivalents, and alternatives falling within the scope of the appended claims.</p>
<heading id="h-0004" level="1">DETAILED DESCRIPTION OF EXEMPLARY EMBODIMENTS</heading>
<p id="p-0020" num="0019">As will be described in greater detail below, the instant disclosure generally relates to systems and methods for user-specific tuning of classification heuristics. The term &#x201c;classification heuristic,&#x201d; or often simply &#x201c;heuristic,&#x201d; as used herein, generally refers to any type or form of algorithm, rule, policy, formula, model, or tool that may be used to classify, or make decisions with respect to, an object or sample. In some examples, the various heuristics described herein may represent, without limitation, decision trees or other algorithms designed to detect and/or identify malware.</p>
<p id="p-0021" num="0020">The following will provide, with reference to <figref idref="DRAWINGS">FIGS. 1-2</figref>, detailed descriptions of exemplary systems for user-specific tuning of classification heuristics. Detailed descriptions of corresponding computer-implemented methods will also be provided in connection with <figref idref="DRAWINGS">FIGS. 3-4</figref>. In addition, detailed descriptions of an exemplary computing system and network architecture capable of implementing one or more of the embodiments described herein will be provided in connection with <figref idref="DRAWINGS">FIGS. 5 and 6</figref>, respectively.</p>
<p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. 1</figref> is a block diagram of an exemplary system <b>100</b> for user-specific tuning of classification heuristics. As illustrated in this figure, exemplary system <b>100</b> may include one or more modules <b>102</b> for performing one or more tasks. For example, and as will be explained in greater detail below, exemplary system <b>100</b> may include an identification module <b>104</b> programmed to identify trusted software components on end users' machines. Exemplary system <b>100</b> may also include a heuristic-application module <b>106</b> programmed to apply classification heuristics to such trusted software components.</p>
<p id="p-0023" num="0022">In addition, and as will be described in greater detail below, exemplary system <b>100</b> may include a classification-analysis module <b>108</b> programmed to determine whether classification heuristics correctly classify trusted software components on end users' machines. Exemplary system <b>100</b> may also include a confidence-adjustment module <b>110</b> programmed to lower confidence scores associated with classification heuristics if these classification heuristics incorrectly classify trusted software components as malicious. Although illustrated as separate elements, one or more of modules <b>102</b> in <figref idref="DRAWINGS">FIG. 1</figref> may represent portions of a single module or application.</p>
<p id="p-0024" num="0023">In certain embodiments, one or more of modules <b>102</b> in <figref idref="DRAWINGS">FIG. 1</figref> may represent one or more software applications or programs that, when executed by a computing device, may cause the computing device to perform one or more tasks. For example, as will be described in greater detail below, one or more of modules <b>102</b> may represent software modules stored and configured to run on one or more computing devices, such as the devices illustrated in <figref idref="DRAWINGS">FIG. 2</figref> (e.g., computing devices <b>202</b>(<b>1</b>)-(N) and/or backend device <b>206</b>), computing system <b>510</b> in <figref idref="DRAWINGS">FIG. 5</figref>, and/or portions of exemplary network architecture <b>600</b> in <figref idref="DRAWINGS">FIG. 6</figref>. One or more of modules <b>102</b> in <figref idref="DRAWINGS">FIG. 1</figref> may also represent all or portions of one or more special-purpose computers configured to perform one or more tasks.</p>
<p id="p-0025" num="0024">As illustrated in <figref idref="DRAWINGS">FIG. 1</figref>, exemplary system <b>100</b> may also include one or more databases. In one embodiment, exemplary system <b>100</b> may include a database <b>120</b> configured to store confidence scores <b>122</b> associated with classification heuristics. Database <b>120</b> may also be configured to store a branch-exclusion list <b>126</b> that identifies undesirable (e.g., false-positive prone) functions within a heuristic (such as false-positive prone decision-tree branches).</p>
<p id="p-0026" num="0025">Database <b>120</b> may represent portions of a single database or computing device or a plurality of databases or computing devices. For example, database <b>120</b> may represent a portion of computing devices <b>202</b>(<b>1</b>)-(N) and/or backend device <b>206</b> in <figref idref="DRAWINGS">FIG. 2</figref>, computing system <b>510</b> in <figref idref="DRAWINGS">FIG. 5</figref>, and/or portions of exemplary network architecture <b>600</b> in <figref idref="DRAWINGS">FIG. 6</figref>. Alternatively, database <b>120</b> in <figref idref="DRAWINGS">FIG. 1</figref> may represent one or more physically separate devices capable of being accessed by a computing device, such as computing devices <b>202</b>(<b>1</b>)-(N) and/or backend device <b>206</b> in <figref idref="DRAWINGS">FIG. 2</figref>, computing system <b>510</b> in <figref idref="DRAWINGS">FIG. 5</figref>, and/or portions of exemplary network architecture <b>600</b> in <figref idref="DRAWINGS">FIG. 6</figref>.</p>
<p id="p-0027" num="0026">Exemplary system <b>100</b> in <figref idref="DRAWINGS">FIG. 1</figref> may be deployed in a variety of ways. For example, all or a portion of exemplary system <b>100</b> may represent portions of a cloud-computing or network-based environment, such as exemplary system <b>200</b> illustrated in <figref idref="DRAWINGS">FIG. 2</figref>. Cloud-computing environments may provide various services and applications via the Internet. These cloud-based services (e.g., software as a service, platform as a service, infrastructure as a service, etc.) may be accessible through a web browser or other remote interface. Various functions described herein may be provided through a remote desktop environment or any other cloud-based computing environment.</p>
<p id="p-0028" num="0027">As shown in <figref idref="DRAWINGS">FIG. 2</figref>, system <b>200</b> may include a plurality of computing devices <b>202</b>(<b>1</b>)-<b>202</b>(N) in communication with a backend device <b>206</b> via a network <b>204</b>. In one embodiment, and as will be described in greater detail below, one or more of computing devices <b>202</b>(<b>1</b>)-(N) may be programmed to: 1) identify a trusted software component on a computing device (such as trusted software components <b>216</b>(<b>1</b>) on computing device <b>202</b>(<b>1</b>) in <figref idref="DRAWINGS">FIG. 2</figref>), 2) apply a classification heuristic (such as classification heuristic <b>214</b>(<b>1</b>)) to the trusted software component, 3) determine that the classification heuristic incorrectly classified the trusted software component, and then 4) modify or tune the classification heuristic by lowering a confidence score associated with the classification heuristic.</p>
<p id="p-0029" num="0028">Computing devices <b>202</b>(<b>1</b>)-(N) generally represent any type or form of computing device capable of reading computer-executable instructions. Examples of computing devices <b>202</b>(<b>1</b>)-(N) include, without limitation, laptops, desktops, servers, cellular phones, personal digital assistants (PDAs), multimedia players, embedded systems, combinations of one or more of the same, exemplary computing system <b>510</b> in <figref idref="DRAWINGS">FIG. 5</figref>, or any other suitable computing device.</p>
<p id="p-0030" num="0029">Backend device <b>206</b> generally represents any type or form of server or backend configured to create and deploy heuristics to one or more computing devices, such as computing devices <b>202</b>(<b>1</b>)-(N). In this example, computing devices <b>202</b>(<b>1</b>)-(N) may represent all or a portion of a single community or a plurality of communities. For example, computing devices <b>202</b>(<b>1</b>)-(N) may represent computing systems within a single or a plurality of user bases, a single or a plurality of enterprises, or portions or combinations of one or more of the same.</p>
<p id="p-0031" num="0030">Network <b>204</b> generally represents any medium or architecture capable of facilitating communication or data transfer. Examples of network <b>204</b> include, without limitation, an intranet, a wide area network (WAN), a local area network (LAN), a personal area network (PAN), the Internet, power line communications (PLC), a cellular network (e.g., a GSM Network), exemplary network architecture <b>600</b> in <figref idref="DRAWINGS">FIG. 6</figref>, or the like. Network <b>204</b> may facilitate communication or data transfer using wireless or wired connections. In one embodiment, network <b>204</b> may facilitate communication between computing devices <b>202</b>(<b>1</b>)-(N) and backend device <b>206</b>.</p>
<p id="p-0032" num="0031"><figref idref="DRAWINGS">FIG. 3</figref> is a flow diagram of an exemplary computer-implemented method <b>300</b> for user-specific tuning of classification heuristics. The steps shown in <figref idref="DRAWINGS">FIG. 3</figref> may be performed by any suitable computer-executable code and/or computing system. In some embodiments, the steps shown in <figref idref="DRAWINGS">FIG. 3</figref> may be performed by one or more of the components of system <b>100</b> in <figref idref="DRAWINGS">FIG. 1</figref> and/or system <b>200</b> in <figref idref="DRAWINGS">FIG. 2</figref>.</p>
<p id="p-0033" num="0032">As illustrated in <figref idref="DRAWINGS">FIG. 3</figref>, at step <b>302</b> one or more of the various systems described herein may identify a trusted software component on a computing device that has been excluded from analysis by a classification heuristic. For example, identification module <b>104</b> in <figref idref="DRAWINGS">FIG. 1</figref> (which may, as detailed above, represent a portion of computing device <b>202</b>(<b>1</b>) in <figref idref="DRAWINGS">FIG. 2</figref>) may identify one or more trusted software components <b>216</b>(<b>1</b>) on computing device <b>202</b>(<b>1</b>) that have been excluded from analysis by classification heuristic <b>214</b>(<b>1</b>) in <figref idref="DRAWINGS">FIG. 2</figref>.</p>
<p id="p-0034" num="0033">The term &#x201c;software component,&#x201d; or sometimes simply &#x201c;component,&#x201d; as used herein, may refer to a software package or file that encapsulates a set of functions or data. In some examples, a software component may also refer to a process launched by a software package or file. Examples of software components include, without limitation, files, processes, and shared objects and libraries (such as DLLs and .so files).</p>
<p id="p-0035" num="0034">In addition, for purposes of this disclosure, a &#x201c;trusted software component&#x201d; may refer to any legitimate or valid (i.e., non-malicious) software package or file. Examples of trusted software components include, without limitation, software components that have been digitally signed by a trusted entity, software components that originate from trusted sources (e.g., trusted portals or protocols), or the like, as discussed in greater detail below.</p>
<p id="p-0036" num="0035">In one example, the trusted software component may represent a software component that would not otherwise have been scanned by the classification heuristic. For example, the trusted software component may represent a digitally signed file (such as a &#x201c;Class 3&#x201d; signed file or a file that has been digitally signed, for example, by a trusted publisher) that would not otherwise have been analyzed by a malware-detection heuristic due its trusted status.</p>
<p id="p-0037" num="0036">Identification module <b>104</b> may identify trusted software components that have been excluded from analysis by a classification heuristic in step <b>302</b> in a variety of ways. In one example, identification module <b>104</b> may scan computing device <b>202</b>(<b>1</b>) for software components that have been digitally signed by trusted signing authorities. In another example, identification module <b>104</b> may scan computing device <b>202</b>(<b>1</b>) for software components that have been excluded from analysis by classification <b>214</b>(<b>1</b>) due to their trusted status. In this example, identification module <b>104</b> may identify such components by analyzing log files generated by classification heuristic <b>214</b>(<b>1</b>).</p>
<p id="p-0038" num="0037">Returning to <figref idref="DRAWINGS">FIG. 3</figref>, at step <b>304</b> the systems described herein may apply a classification heuristic to the trusted software component identified in step <b>302</b>. For example, heuristic-application module <b>106</b> in <figref idref="DRAWINGS">FIG. 1</figref> (which may, as detailed above, represent a portion of computing device <b>202</b>(<b>1</b>) in <figref idref="DRAWINGS">FIG. 2</figref>) may apply classification heuristic <b>214</b>(<b>1</b>) to one or more trusted software components <b>216</b>(<b>1</b>) on computing device <b>202</b>(<b>1</b>) that would not otherwise have been analyzed by classification heuristic <b>214</b>(<b>1</b>).</p>
<p id="p-0039" num="0038">As detailed above, classification heuristic <b>214</b>(<b>1</b>) may represent any type or form of algorithm, rule, policy, formula, model, or tool that may be used to classify, or make decisions with respect to, an object or sample. In one example, and as illustrated in <figref idref="DRAWINGS">FIG. 4</figref>, classification heuristic <b>214</b>(<b>1</b>) may represent a decision tree designed to detect and/or identify malware.</p>
<p id="p-0040" num="0039">In one example, computing device <b>202</b>(<b>1</b>) may receive classification heuristic <b>214</b>(<b>1</b>) from backend device <b>206</b> in <figref idref="DRAWINGS">FIG. 2</figref>. As detailed above, backend device <b>206</b> may represent a server or other computing device configured to train and deploy heuristics to computing devices <b>202</b>(<b>1</b>)-(N). In this example, computing devices <b>202</b>(<b>1</b>)-(N) may represent computing systems within a user base or enterprise. In the context of this example, computing device <b>202</b>(<b>1</b>) may, upon receiving classification heuristic <b>214</b>(<b>1</b>) from backed device <b>206</b>, apply classification heuristic <b>214</b>(<b>1</b>) to one or more trusted software components <b>216</b>(<b>1</b>) on computing device <b>202</b>(<b>1</b>) that have been excluded from analysis by classification heuristic <b>214</b>(<b>1</b>).</p>
<p id="p-0041" num="0040">For example, heuristic-application module <b>106</b> in <figref idref="DRAWINGS">FIG. 1</figref> may apply classification heuristic <b>214</b>(<b>1</b>) in <figref idref="DRAWINGS">FIG. 4</figref> to one or more trusted software components <b>216</b>(<b>1</b>) stored on computing device <b>202</b>(<b>1</b>) that have been excluded from analysis by classification heuristic <b>214</b>(<b>1</b>) due to their trusted status. In this example, classification heuristic <b>214</b>(<b>1</b>) may, at decision node <b>402</b> in <figref idref="DRAWINGS">FIG. 4</figref>, determine whether a trusted software component (such as one or more of trusted software components <b>216</b>(<b>1</b>) on computing device <b>202</b>(<b>1</b>) in <figref idref="DRAWINGS">FIG. 2</figref>) generates more than 32 icons. If so, control may proceed along the branch &#x201c;IconCount&#x3e;32&#x201d; to decision node <b>404</b>, where classification heuristic <b>214</b>(<b>1</b>) may determine whether the trusted software component exhibits or enables drag/drop functionality. If the trusted software component does not exhibit or enable drag/drop functionality, control may proceed along the branch &#x201c;NoDragDropFuncs&#x201d; to classification result <b>403</b>. In this example, classification heuristic <b>214</b>(<b>1</b>) may, at classification result <b>403</b>, determine with a moderately high degree of confidence (e.g., 79 on a scale of 1-100) that the trusted software component in question represents a malicious software component.</p>
<p id="p-0042" num="0041">Returning to <figref idref="DRAWINGS">FIG. 3</figref>, at step <b>306</b> the systems described herein may determine that the classification heuristic applied in step <b>304</b> incorrectly classified the trusted software component identified in step <b>302</b>. For example, classification-analysis module <b>108</b> in <figref idref="DRAWINGS">FIG. 1</figref> (which may, as detailed above, represent a portion of computing device <b>202</b>(<b>1</b>) in <figref idref="DRAWINGS">FIG. 2</figref>) may determine that classification heuristic <b>214</b>(<b>1</b>) incorrectly classified one or more trusted software components <b>216</b>(<b>1</b>) on computing device <b>202</b>(<b>1</b>) as malicious.</p>
<p id="p-0043" num="0042">The term &#x201c;classification,&#x201d; as used herein, may refer to decisions made with respect to a software component based on the component's characteristics, attributes, properties, behaviors, or the like. Examples of such classifications include, without limitation, classifying an executable file as malware, classifying an e-mail as spam, classifying a computing device or network-access point as compromised or untrustworthy, or the like.</p>
<p id="p-0044" num="0043">Classification-analysis module <b>108</b> may determine that a classification heuristic incorrectly classified a trusted software component in step <b>306</b> in a variety of ways. For example, in the context of an antivirus system, classification-analysis module <b>108</b> may determine that classification heuristic <b>214</b>(<b>1</b>) on computing device <b>202</b>(<b>1</b>) incorrectly classified a trusted software component (such as a digitally signed file) as malicious (i.e., the classification represents a false positive).</p>
<p id="p-0045" num="0044">Returning to <figref idref="DRAWINGS">FIG. 3</figref>, at step <b>308</b> the systems described herein may lower a confidence score associated with the classification heuristic applied in step <b>304</b>. For example, confidence-adjustment module <b>110</b> in <figref idref="DRAWINGS">FIG. 1</figref> (which may, as detailed above, represent a portion of computing device <b>202</b>(<b>1</b>) in <figref idref="DRAWINGS">FIG. 2</figref>) may lower a confidence score associated with classification heuristic <b>214</b>(<b>1</b>). Upon completion of step <b>308</b>, exemplary method <b>300</b> in <figref idref="DRAWINGS">FIG. 3</figref> may terminate.</p>
<p id="p-0046" num="0045">Confidence scores generally represent the error-rate potential for a specific function of a heuristic (such as a branch of a decision tree), as judged by the number of training samples encountered or classified by this specific function. Confidence scores may be calculated and quantified in a variety of ways. For example, confidence scores may be calculated using normal approximation intervals, Wilson score intervals, Clopper-Pearson intervals, or any other suitable method or algorithm.</p>
<p id="p-0047" num="0046">Confidence-adjust module <b>110</b> may perform step <b>308</b> in a variety of ways. In one example, confidence-adjust module <b>110</b> may: 1) identify at least one function of the classification heuristic that resulted in the incorrect classification and then 2) lower a confidence score associated with the function that resulted in the incorrect classification. For example, in the context of the decision-tree classification heuristic <b>214</b>(<b>1</b>) illustrated in <figref idref="DRAWINGS">FIG. 4</figref>, confidence-adjustment module <b>110</b> may determine that the branches &#x201c;IconCount&#x3e;32&#x201d; and &#x201c;NoDragDropFuncs&#x201d; in <figref idref="DRAWINGS">FIG. 4</figref> incorrectly classified the trusted software component identified in step <b>302</b> as malicious. In this example, confidence-adjustment module <b>110</b> may lower a confidence score associated with the branches &#x201c;IconCount&#x3e;32&#x201d; and/or &#x201c;NoDragDropFuncs.&#x201d; For example, confidence-adjustment module <b>110</b> may lower a confidence score associated with the branch &#x201c;NoDragDropFuncs&#x201d; from 79 (on a scale of 1-100) to 12.</p>
<p id="p-0048" num="0047">In the above example, the branches &#x201c;IconCount&#x3e;32&#x201d; and/or &#x201c;NoDragDropFuncs&#x201d; may collectively represent a &#x201c;branch configuration.&#x201d; The term &#x201c;branch configuration,&#x201d; as used herein, may refer to a single branch or a sequence of two or more branches within a decision tree. For example, the single branch &#x201c;HasDragDropFuncs&#x201d; in exemplary decision tree <b>400</b> in <figref idref="DRAWINGS">FIG. 4</figref> may represent a branch configuration resulting in classification result <b>401</b>. Similarly, the sequence of branches &#x201c;IconCount&#x3c;=32,&#x201d; &#x201c;ProcessNameCount&#x3c;1,&#x201d; and &#x201c;HasSignificantCompanyName&#x201d; may represent a branch configuration resulting in classification result <b>405</b>. Branch configurations may be order-dependent or order-independent.</p>
<p id="p-0049" num="0048">In another example of step <b>308</b>, confidence-adjust module <b>110</b> may: 1) identify at least one function of the classification heuristic that resulted in the incorrect classification and then 2) exclude or remove this function from the classification heuristic. For example, in the context of the decision-tree classification heuristic <b>214</b>(<b>1</b>) illustrated in <figref idref="DRAWINGS">FIG. 4</figref>, confidence-adjust module <b>110</b> may add identification information (such as one or more unique identifiers) for the branch configuration that resulted in the incorrect classification to a branch-exclusion list, such as branch-exclusion list <b>126</b> in database <b>120</b> in <figref idref="DRAWINGS">FIG. 1</figref>. In this example, branch-exclusion list <b>126</b> may act as a blacklist that identifies undesirable (e.g., false-positive prone) branches or branch configurations in a decision tree.</p>
<p id="p-0050" num="0049">The systems and methods described herein may uniquely identify functions of a heuristic (such as branch configurations of a decision tree) in a variety of ways. For example, these systems and methods may identify a function by name (e.g., by assigning a unique name to a branch configuration and/or each branch within a branch configuration), by number (e.g., by assigning a hexadecimal number to a branch configuration and/or each branch within a branch configuration), or the like. In some examples, these systems and methods may also assign unique identifiers (such as names, numbers, hashes, or the like) to trusted software components, heuristics used to classify such software components, and/or various functions within such heuristics, each of which may also be used to uniquely identify the heuristic function in question.</p>
<p id="p-0051" num="0050">In some examples, the systems described herein may: 1) identify an attribute of the trusted software component identified in step <b>302</b> that resulted in the incorrect classification of step <b>306</b> and then 2) lower a confidence score associated with at least one function of the classification heuristic that involves the identified attribute. For example, if classification-analysis module <b>108</b> determines, by tracking multiple misclassifications over time, that 49 out of 50 nodes within a decision tree involving a specific attribute resulted in false positives, then classification-analysis module <b>108</b> may determine that the decision tree is unable to correctly process or analyze this specific attribute. In this example, confidence-adjustment module <b>110</b> may remove (or simply lower confidence scores associated with) branches within the decision tree that involve this specific attribute.</p>
<p id="p-0052" num="0051">In some examples, the systems described herein may, upon determining that the classification heuristic incorrectly classified the trusted software component in step <b>306</b>, automatically allow the trusted software component to execute. In other examples, the systems described herein may prompt a user of the computing device prior to allowing the trusted software component to execute. For example, one or more of modules <b>102</b> in <figref idref="DRAWINGS">FIG. 1</figref> may, upon determining that classification heuristic <b>214</b>(<b>1</b>) in <figref idref="DRAWINGS">FIG. 2</figref> incorrectly classified one or more trusted software components <b>216</b>(<b>1</b>) on computing device <b>202</b>(<b>1</b>) as malicious, may prompt a user of computing device <b>202</b>(<b>1</b>) to allow or deny execution of these trusted software components <b>216</b>(<b>1</b>). In some examples, classification-analysis module <b>108</b> may only revisit the classification of trusted software components <b>216</b>(<b>1</b>) if subsequent high-confidence detections are triggered by classification heuristic <b>214</b>(<b>1</b>).</p>
<p id="p-0053" num="0052">In one example, confidence-adjustment module <b>110</b> in <figref idref="DRAWINGS">FIG. 1</figref> may only perform step <b>308</b> in <figref idref="DRAWINGS">FIG. 3</figref> if a confidence score associated with the classification result in step <b>304</b> exceeds a predetermined threshold. For example, confidence-adjustment module <b>110</b> may only adjust a confidence score assigned to a function of a classification heuristic that resulted in an incorrect classification if the confidence score associated with this classification or function is greater than or equal to, e.g., 75 on a scale of 1-100.</p>
<p id="p-0054" num="0053">In some examples, the computing device identified in step <b>302</b> may perform each step of exemplary method <b>300</b> in <figref idref="DRAWINGS">FIG. 3</figref>. For example, computing device <b>202</b>(<b>1</b>) in <figref idref="DRAWINGS">FIG. 2</figref> may perform steps <b>302</b>, <b>304</b>, <b>306</b>, and <b>308</b> of <figref idref="DRAWINGS">FIG. 3</figref>. In other words, computing device <b>202</b>(<b>1</b>) may modify or tune various characteristics of classification heuristic <b>214</b>(<b>1</b>) without the aid or assistance of backend device <b>206</b> in <figref idref="DRAWINGS">FIG. 2</figref>.</p>
<p id="p-0055" num="0054">In addition, in some embodiments each step of exemplary method <b>300</b> in <figref idref="DRAWINGS">FIG. 3</figref> may be executed or performed in a low-priority background process or thread on the computing device identified in step <b>302</b>. For example, one or more of modules <b>102</b> in <figref idref="DRAWINGS">FIG. 1</figref> may perform one or more of the steps of exemplary method <b>300</b> in <figref idref="DRAWINGS">FIG. 3</figref> using free CPU cycles on computing device <b>202</b>(<b>1</b>) in <figref idref="DRAWINGS">FIG. 2</figref>. In this example, modules <b>102</b> may perform exemplary method <b>300</b> in <figref idref="DRAWINGS">FIG. 3</figref> in the background so as to not unduly impact the performance of computing device <b>202</b>(<b>1</b>).</p>
<p id="p-0056" num="0055">As detailed above, by applying classification heuristics to various trusted software components on end users' machines that would not otherwise have been analyzed by these heuristics, the systems and methods described herein may enable heuristic providers to analyze the accuracy of their heuristics relative to specific end users and automatically modify or tune these heuristics based on results of the same. Moreover, by modifying or tuning heuristics upon deployment on end users' machines, the systems and methods disclosed herein may enable a heuristic provider to improve the accuracy and effectiveness of the provider's heuristics without negatively impacting the overall efficacy of these heuristics relative to the provider's user base as whole.</p>
<p id="p-0057" num="0056"><figref idref="DRAWINGS">FIG. 5</figref> is a block diagram of an exemplary computing system <b>510</b> capable of implementing one or more of the embodiments described and/or illustrated herein. Computing system <b>510</b> broadly represents any single or multi-processor computing device or system capable of executing computer-readable instructions. Examples of computing system <b>510</b> include, without limitation, workstations, laptops, client-side terminals, servers, distributed computing systems, handheld devices, or any other computing system or device. In its most basic configuration, computing system <b>510</b> may include at least one processor <b>514</b> and a system memory <b>516</b>.</p>
<p id="p-0058" num="0057">Processor <b>514</b> generally represents any type or form of processing unit capable of processing data or interpreting and executing instructions. In certain embodiments, processor <b>514</b> may receive instructions from a software application or module. These instructions may cause processor <b>514</b> to perform the functions of one or more of the exemplary embodiments described and/or illustrated herein. For example, processor <b>514</b> may perform and/or be a means for performing, either alone or in combination with other elements, one or more of the identifying, applying, determining, lowering, excluding, allowing, prompting, and performing steps described herein. Processor <b>514</b> may also perform and/or be a means for performing any other steps, methods, or processes described and/or illustrated herein.</p>
<p id="p-0059" num="0058">System memory <b>516</b> generally represents any type or form of volatile or non-volatile storage device or medium capable of storing data and/or other computer-readable instructions. Examples of system memory <b>516</b> include, without limitation, random access memory (RAM), read only memory (ROM), flash memory, or any other suitable memory device. Although not required, in certain embodiments computing system <b>510</b> may include both a volatile memory unit (such as, for example, system memory <b>516</b>) and a non-volatile storage device (such as, for example, primary storage device <b>532</b>, as described in detail below). In one example, one or more of modules <b>102</b> from <figref idref="DRAWINGS">FIG. 1</figref> may be loaded into system memory <b>516</b>.</p>
<p id="p-0060" num="0059">In certain embodiments, exemplary computing system <b>510</b> may also include one or more components or elements in addition to processor <b>514</b> and system memory <b>516</b>. For example, as illustrated in <figref idref="DRAWINGS">FIG. 5</figref>, computing system <b>510</b> may include a memory controller <b>518</b>, an Input/Output (I/O) controller <b>520</b>, and a communication interface <b>522</b>, each of which may be interconnected via a communication infrastructure <b>512</b>. Communication infrastructure <b>512</b> generally represents any type or form of infrastructure capable of facilitating communication between one or more components of a computing device. Examples of communication infrastructure <b>512</b> include, without limitation, a communication bus (such as an ISA, PCI, PCIe, or similar bus) and a network.</p>
<p id="p-0061" num="0060">Memory controller <b>518</b> generally represents any type or form of device capable of handling memory or data or controlling communication between one or more components of computing system <b>510</b>. For example, in certain embodiments memory controller <b>518</b> may control communication between processor <b>514</b>, system memory <b>516</b>, and I/O controller <b>520</b> via communication infrastructure <b>512</b>. In certain embodiments, memory controller may perform and/or be a means for performing, either alone or in combination with other elements, one or more of the steps or features described and/or illustrated herein, such as identifying, applying, determining, lowering, excluding, allowing, prompting, and performing.</p>
<p id="p-0062" num="0061">I/O controller <b>520</b> generally represents any type or form of module capable of coordinating and/or controlling the input and output functions of a computing device. For example, in certain embodiments I/O controller <b>520</b> may control or facilitate transfer of data between one or more elements of computing system <b>510</b>, such as processor <b>514</b>, system memory <b>516</b>, communication interface <b>522</b>, display adapter <b>526</b>, input interface <b>530</b>, and storage interface <b>534</b>. I/O controller <b>520</b> may be used, for example, to perform and/or be a means for performing, either alone or in combination with other elements, one or more of the identifying, applying, determining, lowering, excluding, allowing, prompting, and performing steps described herein. I/O controller <b>520</b> may also be used to perform and/or be a means for performing other steps and features set forth in the instant disclosure.</p>
<p id="p-0063" num="0062">Communication interface <b>522</b> broadly represents any type or form of communication device or adapter capable of facilitating communication between exemplary computing system <b>510</b> and one or more additional devices. For example, in certain embodiments communication interface <b>522</b> may facilitate communication between computing system <b>510</b> and a private or public network including additional computing systems. Examples of communication interface <b>522</b> include, without limitation, a wired network interface (such as a network interface card), a wireless network interface (such as a wireless network interface card), a modem, and any other suitable interface. In at least one embodiment, communication interface <b>522</b> may provide a direct connection to a remote server via a direct link to a network, such as the Internet. Communication interface <b>522</b> may also indirectly provide such a connection through, for example, a local area network (such as an Ethernet network), a personal area network, a telephone or cable network, a cellular telephone connection, a satellite data connection, or any other suitable connection.</p>
<p id="p-0064" num="0063">In certain embodiments, communication interface <b>522</b> may also represent a host adapter configured to facilitate communication between computing system <b>510</b> and one or more additional network or storage devices via an external bus or communications channel. Examples of host adapters include, without limitation, SCSI host adapters, USB host adapters, IEEE 1394 host adapters, SATA and eSATA host adapters, ATA and PATA host adapters, Fibre Channel interface adapters, Ethernet adapters, or the like. Communication interface <b>522</b> may also allow computing system <b>510</b> to engage in distributed or remote computing. For example, communication interface <b>522</b> may receive instructions from a remote device or send instructions to a remote device for execution. In certain embodiments, communication interface <b>522</b> may perform and/or be a means for performing, either alone or in combination with other elements, one or more of the identifying, applying, determining, lowering, excluding, allowing, prompting, and performing steps disclosed herein. Communication interface <b>522</b> may also be used to perform and/or be a means for performing other steps and features set forth in the instant disclosure.</p>
<p id="p-0065" num="0064">As illustrated in <figref idref="DRAWINGS">FIG. 5</figref>, computing system <b>510</b> may also include at least one display device <b>524</b> coupled to communication infrastructure <b>512</b> via a display adapter <b>526</b>. Display device <b>524</b> generally represents any type or form of device capable of visually displaying information forwarded by display adapter <b>526</b>. Similarly, display adapter <b>526</b> generally represents any type or form of device configured to forward graphics, text, and other data from communication infrastructure <b>512</b> (or from a frame buffer, as known in the art) for display on display device <b>524</b>.</p>
<p id="p-0066" num="0065">As illustrated in <figref idref="DRAWINGS">FIG. 5</figref>, exemplary computing system <b>510</b> may also include at least one input device <b>528</b> coupled to communication infrastructure <b>512</b> via an input interface <b>530</b>. Input device <b>528</b> generally represents any type or form of input device capable of providing input, either computer or human generated, to exemplary computing system <b>510</b>. Examples of input device <b>528</b> include, without limitation, a keyboard, a pointing device, a speech recognition device, or any other input device. In at least one embodiment, input device <b>528</b> may perform and/or be a means for performing, either alone or in combination with other elements, one or more of the identifying, applying, determining, lowering, excluding, allowing, prompting, and performing steps disclosed herein. Input device <b>528</b> may also be used to perform and/or be a means for performing other steps and features set forth in the instant disclosure.</p>
<p id="p-0067" num="0066">As illustrated in <figref idref="DRAWINGS">FIG. 5</figref>, exemplary computing system <b>510</b> may also include a primary storage device <b>532</b> and a backup storage device <b>533</b> coupled to communication infrastructure <b>512</b> via a storage interface <b>534</b>. Storage devices <b>532</b> and <b>533</b> generally represent any type or form of storage device or medium capable of storing data and/or other computer-readable instructions. For example, storage devices <b>532</b> and <b>533</b> may be a magnetic disk drive (e.g., a so-called hard drive), a floppy disk drive, a magnetic tape drive, an optical disk drive, a flash drive, or the like. Storage interface <b>534</b> generally represents any type or form of interface or device for transferring data between storage devices <b>532</b> and <b>533</b> and other components of computing system <b>510</b>. In one example, database <b>120</b> from <figref idref="DRAWINGS">FIG. 1</figref> may be stored in primary storage device <b>532</b>.</p>
<p id="p-0068" num="0067">In certain embodiments, storage devices <b>532</b> and <b>533</b> may be configured to read from and/or write to a removable storage unit configured to store computer software, data, or other computer-readable information. Examples of suitable removable storage units include, without limitation, a floppy disk, a magnetic tape, an optical disk, a flash memory device, or the like. Storage devices <b>532</b> and <b>533</b> may also include other similar structures or devices for allowing computer software, data, or other computer-readable instructions to be loaded into computing system <b>510</b>. For example, storage devices <b>532</b> and <b>533</b> may be configured to read and write software, data, or other computer-readable information. Storage devices <b>532</b> and <b>533</b> may also be a part of computing system <b>510</b> or may be a separate device accessed through other interface systems.</p>
<p id="p-0069" num="0068">In certain embodiments, storage devices <b>532</b> and <b>533</b> may be used, for example, to perform and/or be a means for performing, either alone or in combination with other elements, one or more of the identifying, applying, determining, lowering, excluding, allowing, prompting, and performing steps disclosed herein. Storage devices <b>532</b> and <b>533</b> may also be used to perform and/or be a means for performing other steps and features set forth in the instant disclosure.</p>
<p id="p-0070" num="0069">Many other devices or subsystems may be connected to computing system <b>510</b>. Conversely, all of the components and devices illustrated in <figref idref="DRAWINGS">FIG. 5</figref> need not be present to practice the embodiments described and/or illustrated herein. The devices and subsystems referenced above may also be interconnected in different ways from that shown in <figref idref="DRAWINGS">FIG. 5</figref>. Computing system <b>510</b> may also employ any number of software, firmware, and/or hardware configurations. For example, one or more of the exemplary embodiments disclosed herein may be encoded as a computer program (also referred to as computer software, software applications, computer-readable instructions, or computer control logic) on a computer-readable medium. The phrase &#x201c;computer-readable medium&#x201d; generally refers to any form of device, carrier, or medium capable of storing or carrying computer-readable instructions. Examples of computer-readable media include, without limitation, transmission-type media, such as carrier waves, and physical media, such as magnetic-storage media (e.g., hard disk drives and floppy disks), optical-storage media (e.g., CD- or DVD-ROMs), electronic-storage media (e.g., solid-state drives and flash media), and other distribution systems.</p>
<p id="p-0071" num="0070">The computer-readable medium containing the computer program may be loaded into computing system <b>510</b>. All or a portion of the computer program stored on the computer-readable medium may then be stored in system memory <b>516</b> and/or various portions of storage devices <b>532</b> and <b>533</b>. When executed by processor <b>514</b>, a computer program loaded into computing system <b>510</b> may cause processor <b>514</b> to perform and/or be a means for performing the functions of one or more of the exemplary embodiments described and/or illustrated herein. Additionally or alternatively, one or more of the exemplary embodiments described and/or illustrated herein may be implemented in firmware and/or hardware. For example, computing system <b>510</b> may be configured as an application specific integrated circuit (ASIC) adapted to implement one or more of the exemplary embodiments disclosed herein.</p>
<p id="p-0072" num="0071"><figref idref="DRAWINGS">FIG. 6</figref> is a block diagram of an exemplary network architecture <b>600</b> in which client systems <b>610</b>, <b>620</b>, and <b>630</b> and servers <b>640</b> and <b>645</b> may be coupled to a network <b>650</b>. Client systems <b>610</b>, <b>620</b>, and <b>630</b> generally represent any type or form of computing device or system, such as exemplary computing system <b>510</b> in <figref idref="DRAWINGS">FIG. 5</figref>. In one example, client system <b>610</b> may include system <b>100</b> from <figref idref="DRAWINGS">FIG. 1</figref>.</p>
<p id="p-0073" num="0072">Similarly, servers <b>640</b> and <b>645</b> generally represent computing devices or systems, such as application servers or database servers, configured to provide various database services and/or run certain software applications. Network <b>650</b> generally represents any telecommunication or computer network including, for example, an intranet, a wide area network (WAN), a local area network (LAN), a personal area network (PAN), or the Internet.</p>
<p id="p-0074" num="0073">As illustrated in <figref idref="DRAWINGS">FIG. 6</figref>, one or more storage devices <b>660</b>(<b>1</b>)-(N) may be directly attached to server <b>640</b>. Similarly, one or more storage devices <b>670</b>(<b>1</b>)-(N) may be directly attached to server <b>645</b>. Storage devices <b>660</b>(<b>1</b>)-(N) and storage devices <b>670</b>(<b>1</b>)-(N) generally represent any type or form of storage device or medium capable of storing data and/or other computer-readable instructions. In certain embodiments, storage devices <b>660</b>(<b>1</b>)-(N) and storage devices <b>670</b>(<b>1</b>)-(N) may represent network-attached storage (NAS) devices configured to communicate with servers <b>640</b> and <b>645</b> using various protocols, such as NFS, SMB, or CIFS.</p>
<p id="p-0075" num="0074">Servers <b>640</b> and <b>645</b> may also be connected to a storage area network (SAN) fabric <b>680</b>. SAN fabric <b>680</b> generally represents any type or form of computer network or architecture capable of facilitating communication between a plurality of storage devices. SAN fabric <b>680</b> may facilitate communication between servers <b>640</b> and <b>645</b> and a plurality of storage devices <b>690</b>(<b>1</b>)-(N) and/or an intelligent storage array <b>695</b>. SAN fabric <b>680</b> may also facilitate, via network <b>650</b> and servers <b>640</b> and <b>645</b>, communication between client systems <b>610</b>, <b>620</b>, and <b>630</b> and storage devices <b>690</b>(<b>1</b>)-(N) and/or intelligent storage array <b>695</b> in such a manner that devices <b>690</b>(<b>1</b>)-(N) and array <b>695</b> appear as locally attached devices to client systems <b>610</b>, <b>620</b>, and <b>630</b>. As with storage devices <b>660</b>(<b>1</b>)-(N) and storage devices <b>670</b>(<b>1</b>)-(N), storage devices <b>690</b>(<b>1</b>)-(N) and intelligent storage array <b>695</b> generally represent any type or form of storage device or medium capable of storing data and/or other computer-readable instructions.</p>
<p id="p-0076" num="0075">In certain embodiments, and with reference to exemplary computing system <b>510</b> of <figref idref="DRAWINGS">FIG. 5</figref>, a communication interface, such as communication interface <b>522</b> in <figref idref="DRAWINGS">FIG. 5</figref>, may be used to provide connectivity between each client system <b>610</b>, <b>620</b>, and <b>630</b> and network <b>650</b>. Client systems <b>610</b>, <b>620</b>, and <b>630</b> may be able to access information on server <b>640</b> or <b>645</b> using, for example, a web browser or other client software. Such software may allow client systems <b>610</b>, <b>620</b>, and <b>630</b> to access data hosted by server <b>640</b>, server <b>645</b>, storage devices <b>660</b>(<b>1</b>)-(N), storage devices <b>670</b>(<b>1</b>)-(N), storage devices <b>690</b>(<b>1</b>)-(N), or intelligent storage array <b>695</b>. Although <figref idref="DRAWINGS">FIG. 6</figref> depicts the use of a network (such as the Internet) for exchanging data, the embodiments described and/or illustrated herein are not limited to the Internet or any particular network-based environment.</p>
<p id="p-0077" num="0076">In at least one embodiment, all or a portion of one or more of the exemplary embodiments disclosed herein may be encoded as a computer program and loaded onto and executed by server <b>640</b>, server <b>645</b>, storage devices <b>660</b>(<b>1</b>)-(N), storage devices <b>670</b>(<b>1</b>)-(N), storage devices <b>690</b>(<b>1</b>)-(N), intelligent storage array <b>695</b>, or any combination thereof. All or a portion of one or more of the exemplary embodiments disclosed herein may also be encoded as a computer program, stored in server <b>640</b>, run by server <b>645</b>, and distributed to client systems <b>610</b>, <b>620</b>, and <b>630</b> over network <b>650</b>. Accordingly, network architecture <b>600</b> may perform and/or be a means for performing, either alone or in combination with other elements, one or more of the identifying, applying, determining, lowering, excluding, allowing, prompting, and performing steps disclosed herein. Network architecture <b>600</b> may also be used to perform and/or be a means for performing other steps and features set forth in the instant disclosure.</p>
<p id="p-0078" num="0077">As detailed above, computing system <b>510</b> and/or one or more components of network architecture <b>600</b> may perform and/or be a means for performing, either alone or in combination with other elements, one or more steps of an exemplary method for user-specific tuning of classification heuristics. In one example, such a method may include: 1) identifying a trusted software component on a computing device that has been excluded from analysis by a classification heuristic, 2) applying the classification heuristic to the trusted software component, 3) determining that the classification heuristic incorrectly classified the trusted software component, and then 4) lowering a confidence score associated with the classification heuristic.</p>
<p id="p-0079" num="0078">In some examples, determining that the classification heuristic incorrectly classified the trusted software component may include identifying an attribute of the trusted software component that resulted in the incorrect classification. In this example, lowering the confidence score associated with the classification heuristic may include lowering a confidence score associated with at least one function of the classification heuristic that involves the identified attribute.</p>
<p id="p-0080" num="0079">In one example, lowering the confidence score associated with the classification heuristic may include: 1) identifying a function of the classification heuristic that resulted in the incorrect classification and then 2) lowering a confidence score associated with the function that resulted in the incorrect classification. In this example, lowering the confidence score associated with the function that resulted in the incorrect classification may include excluding the function that resulted in the incorrect classification from the classification heuristic.</p>
<p id="p-0081" num="0080">In some examples, the classification heuristic may include a decision tree and lowering the confidence score associated with the classification heuristic may include: 1) identifying a branch configuration of the decision tree that resulted in the incorrect classification and then 2) lowering a confidence score associated with the branch configuration that resulted in the incorrect classification. In this example, lowering the confidence score associated with the branch configuration that resulted in the incorrect classification may include excluding the branch configuration that resulted in the incorrect classification from the decision tree. The branch configuration may include a single branch or a sequence of at least two branches.</p>
<p id="p-0082" num="0081">In one example, the method may also include automatically allowing the trusted software component to execute and/or prompting a user of the computing device to allow the trusted software component to execute. The method may also include, prior to lowering the confidence score, determining that the confidence score exceeds a predetermined threshold.</p>
<p id="p-0083" num="0082">The trusted software component may include a digitally signed software component and/or a software component that originated from a trusted source. In some examples, the computing device may perform each step of the method. In addition, in some examples each step of the method may be performed by a low-priority background process on the computing device.</p>
<p id="p-0084" num="0083">While the foregoing disclosure sets forth various embodiments using specific block diagrams, flowcharts, and examples, each block diagram component, flowchart step, operation, and/or component described and/or illustrated herein may be implemented, individually and/or collectively, using a wide range of hardware, software, or firmware (or any combination thereof) configurations. In addition, any disclosure of components contained within other components should be considered exemplary in nature since many other architectures can be implemented to achieve the same functionality.</p>
<p id="p-0085" num="0084">The process parameters and sequence of steps described and/or illustrated herein are given by way of example only and can be varied as desired. For example, while the steps illustrated and/or described herein may be shown or discussed in a particular order, these steps do not necessarily need to be performed in the order illustrated or discussed. The various exemplary methods described and/or illustrated herein may also omit one or more of the steps described or illustrated herein or include additional steps in addition to those disclosed.</p>
<p id="p-0086" num="0085">While various embodiments have been described and/or illustrated herein in the context of fully functional computing systems, one or more of these exemplary embodiments may be distributed as a program product in a variety of forms, regardless of the particular type of computer-readable media used to actually carry out the distribution. The embodiments disclosed herein may also be implemented using software modules that perform certain tasks. These software modules may include script, batch, or other executable files that may be stored on a computer-readable storage medium or in a computing system. In some embodiments, these software modules may configure a computing system to perform one or more of the exemplary embodiments disclosed herein.</p>
<p id="p-0087" num="0086">In addition, one or more of the modules described herein may transform data, physical devices, and/or representations of physical devices from one form to another. For example, confidence-adjustment module <b>110</b> may transform various characteristics and/or properties of computing device <b>202</b>(<b>1</b>) by modifying confidence scores <b>122</b> stored in database <b>120</b> of computing device <b>202</b>(<b>1</b>).</p>
<p id="p-0088" num="0087">The preceding description has been provided to enable others skilled in the art to best utilize various aspects of the exemplary embodiments disclosed herein. This exemplary description is not intended to be exhaustive or to be limited to any precise form disclosed. Many modifications and variations are possible without departing from the spirit and scope of the instant disclosure. The embodiments disclosed herein should be considered in all respects illustrative and not restrictive. Reference should be made to the appended claims and their equivalents in determining the scope of the instant disclosure.</p>
<p id="p-0089" num="0088">Unless otherwise noted, the terms &#x201c;a&#x201d; or &#x201c;an,&#x201d; as used in the specification and claims, are to be construed as meaning &#x201c;at least one of.&#x201d; In addition, for ease of use, the words &#x201c;including&#x201d; and &#x201c;having,&#x201d; as used in the specification and claims, are interchangeable with and have the same meaning as the word &#x201c;comprising.&#x201d;</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A computer-implemented method for user-specific tuning of classification heuristics, at least a portion of the method being performed by an end user's computing device comprising at least one processor, the method comprising:
<claim-text>identifying a classification heuristic deployed on the end user's computing device, wherein the classification heuristic is designed to analyze software components for malware;</claim-text>
<claim-text>identifying a confidence score associated with the classification heuristic;</claim-text>
<claim-text>tuning the classification heuristic for the end user post-deployment by:
<claim-text>identifying a trusted software component on the end user's computing device that has been excluded from being analyzed for malware by the classification heuristic due to the trusted software component's trusted status;</claim-text>
<claim-text>causing the classification heuristic to perform a malware analysis on the trusted software component;</claim-text>
<claim-text>after the classification heuristic has performed the malware analysis on the trusted software component, determining that the classification heuristic incorrectly classified the trusted software component as untrustworthy;</claim-text>
<claim-text>in response to determining that the classification heuristic incorrectly classified the trusted software component as untrustworthy, lowering the confidence score associated with the classification heuristic.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein:
<claim-text>determining that the classification heuristic incorrectly classified the trusted software component comprises identifying an attribute of the trusted software component that resulted in the incorrect classification;</claim-text>
<claim-text>lowering the confidence score associated with the classification heuristic comprises lowering a confidence score associated with at least one function of the classification heuristic that involves the identified attribute.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein lowering the confidence score associated with the classification heuristic comprises:
<claim-text>identifying a function of the classification heuristic that resulted in the incorrect classification;</claim-text>
<claim-text>lowering a confidence score associated with the function that resulted in the incorrect classification.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method of <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein lowering the confidence score associated with the function that resulted in the incorrect classification comprises excluding the function that resulted in the incorrect classification from the classification heuristic.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the classification heuristic comprises a decision tree and lowering the confidence score associated with the classification heuristic comprises:
<claim-text>identifying a branch configuration of the decision tree that resulted in the incorrect classification;</claim-text>
<claim-text>lowering a confidence score associated with the branch configuration that resulted in the incorrect classification.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method of <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein lowering the confidence score associated with the branch configuration that resulted in the incorrect classification comprises excluding the branch configuration that resulted in the incorrect classification from the decision tree.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The method of <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein the branch configuration comprises at least one of:
<claim-text>a single branch;</claim-text>
<claim-text>a sequence of at least two branches.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising at least one of:
<claim-text>automatically allowing the trusted software component to execute;</claim-text>
<claim-text>prompting the end user to allow the trusted software component to execute.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising, prior to lowering the confidence score, determining that the confidence score associated with the classification heuristic exceeds a predetermined threshold.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the trusted software component comprises at least one of:
<claim-text>a digitally signed software component;</claim-text>
<claim-text>a software component that originated from a trusted source.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the end user's computing device performs each step of the method.</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein each step of the method is performed by a low-priority background process on the end user's computing device.</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. A system for user-specific tuning of classification heuristics, the system comprising:
<claim-text>an identification module programmed to:
<claim-text>identify a classification heuristic deployed on an end user's computing device, wherein the classification heuristic is designed to analyze software components for malware;</claim-text>
<claim-text>identify a confidence score associated with the classification heuristic;</claim-text>
<claim-text>identify a trusted software component on the end user's computing device that has been excluded from being analyzed for malware by the classification heuristic due to the trusted software component's trusted status;</claim-text>
</claim-text>
<claim-text>a heuristic-application module, a classification-analysis module, and a confidence-adjustment module programmed to tune the classification heuristic for the end user post-deployment by:
<claim-text>causing the classification heuristic to perform a malware analysis on the trusted software component;</claim-text>
<claim-text>after the classification heuristic has performed the malware analysis on the trusted software component, determining that the classification heuristic incorrectly classified the trusted software component as untrustworthy;</claim-text>
<claim-text>in response to determining that the classification heuristic incorrectly classified the trusted software component as untrustworthy, lowering the confidence score associated with the classification heuristic;</claim-text>
</claim-text>
<claim-text>at least one processor configured to execute the identification module, the heuristic-application module, the classification-analysis module, and the confidence-adjustment module.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The system of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein:
<claim-text>the classification-analysis module determines that the classification heuristic incorrectly classified the trusted software component by identifying an attribute of the trusted software component that resulted in the incorrect classification;</claim-text>
<claim-text>the confidence-adjustment module lowers the confidence score associated with the classification heuristic by lowering a confidence score associated with at least one function of the classification heuristic that involves the identified attribute.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The system of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the confidence-adjustment module lowers the confidence score associated with the classification heuristic by:
<claim-text>identifying a function of the classification heuristic that resulted in the incorrect classification;</claim-text>
<claim-text>lowering a confidence score associated with the function that resulted in the incorrect classification.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The system of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the confidence-adjustment module lowers the confidence score associated with the function that resulted in the incorrect classification by excluding the function that resulted in the incorrect classification from the classification heuristic.</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The system of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the heuristic-application module is further programmed to:
<claim-text>automatically allow the trusted software component to execute;</claim-text>
<claim-text>prompt the end user to allow the trusted software component to execute.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The system of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the confidence-adjustment module is further programmed to determine, prior to lowering the confidence score, that the confidence score associated with the classification heuristic exceeds a predetermined threshold.</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. The system of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the processor executes the identification module, the heuristic-application module, the classification-analysis module, and the confidence-adjustment module in a low-priority background process on the system.</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. A non-transitory computer-readable medium comprising computer-executable instructions that, when executed by at least one processor of an end user's computing device, cause the end user's computing device to:
<claim-text>identify a classification heuristic deployed on the end user's computing device, wherein the classification heuristic is designed to analyze software components for malware;</claim-text>
<claim-text>identify a confidence score associated with the classification heuristic;</claim-text>
<claim-text>tune the classification heuristic for the end user post-deployment by:
<claim-text>identifying a trusted software component on the end user's computing device that has been excluded from being analyzed for malware by the classification heuristic due to the trusted software component's trusted status;</claim-text>
<claim-text>causing the classification heuristic to perform a malware analysis on the trusted software component;</claim-text>
<claim-text>after the classification heuristic has performed the malware analysis on the trusted software component, determining that the classification heuristic incorrectly classified the trusted software component as untrustworthy;</claim-text>
<claim-text>in response to determining that the classification heuristic incorrectly classified the trusted software component as untrustworthy, lowering the confidence score associated with the classification heuristic. </claim-text>
</claim-text>
</claim-text>
</claim>
</claims>
</us-patent-grant>

<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08627310-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08627310</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>12895237</doc-number>
<date>20100930</date>
</document-id>
</application-reference>
<us-application-series-code>12</us-application-series-code>
<us-term-of-grant>
<us-term-extension>538</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>9</main-group>
<subgroup>44</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>717174</main-classification>
</classification-national>
<invention-title id="d2e53">Capturing multi-disk virtual machine images automatically</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>7356679</doc-number>
<kind>B1</kind>
<name>Le et al.</name>
<date>20080400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>7577722</doc-number>
<kind>B1</kind>
<name>Khandekar et al.</name>
<date>20090800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>2008/0082976</doc-number>
<kind>A1</kind>
<name>Steinwagner et al.</name>
<date>20080400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>2009/0271589</doc-number>
<kind>A1</kind>
<name>Karpoff et al.</name>
<date>20091000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>711170</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>2010/0088699</doc-number>
<kind>A1</kind>
<name>Sasaki</name>
<date>20100400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>718  1</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>2010/0138830</doc-number>
<kind>A1</kind>
<name>Astete et al.</name>
<date>20100600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>2010/0153617</doc-number>
<kind>A1</kind>
<name>Miroshnichenko et al.</name>
<date>20100600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>711  6</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>2010/0235831</doc-number>
<kind>A1</kind>
<name>Dittmer</name>
<date>20100900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>718  1</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>2011/0246669</doc-number>
<kind>A1</kind>
<name>Kanada et al.</name>
<date>20111000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709238</main-classification></classification-national>
</us-citation>
<us-citation>
<nplcit num="00010">
<othercit>Habib, &#x201c;Virtualization with KVM&#x201d;, Feb. 2008, Linux Journal, vol. 2008, Issue 166, pp. 1-5.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00011">
<othercit>Sapuntzakis et al., &#x201c;Optimizing the Migration of Virtual Computers&#x201d;, Proceedings of the 5th Symposium on Operating Systems Design and Implementation, USENIX Association, 2002, pp. 377-390.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00012">
<othercit>&#x201c;Cloud Computing&#x201d;, NIST.gov Computer Security Division, 1 page, Aug. 27, 2010.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>18</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>717174</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>9</number-of-drawing-sheets>
<number-of-figures>10</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20120084768</doc-number>
<kind>A1</kind>
<date>20120405</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Ashok</last-name>
<first-name>Shamsundar</first-name>
<address>
<city>Austin</city>
<state>TX</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>De Araujo</last-name>
<first-name>Daniel F.</first-name>
<address>
<city>Round Rock</city>
<state>TX</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="003" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Nguyen</last-name>
<first-name>Daniel N.</first-name>
<address>
<city>Cedar Park</city>
<state>TX</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="004" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Nguyen</last-name>
<first-name>Minh</first-name>
<address>
<city>Austin</city>
<state>TX</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Ashok</last-name>
<first-name>Shamsundar</first-name>
<address>
<city>Austin</city>
<state>TX</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>De Araujo</last-name>
<first-name>Daniel F.</first-name>
<address>
<city>Round Rock</city>
<state>TX</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="003" designation="us-only">
<addressbook>
<last-name>Nguyen</last-name>
<first-name>Daniel N.</first-name>
<address>
<city>Cedar Park</city>
<state>TX</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="004" designation="us-only">
<addressbook>
<last-name>Nguyen</last-name>
<first-name>Minh</first-name>
<address>
<city>Austin</city>
<state>TX</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Yee &#x26; Associates, P.C.</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
<agent sequence="02" rep-type="attorney">
<addressbook>
<last-name>Talpis</last-name>
<first-name>Matthew B.</first-name>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>International Business Machines Corporation</orgname>
<role>02</role>
<address>
<city>Armonk</city>
<state>NY</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Wang</last-name>
<first-name>Philip</first-name>
<department>2197</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">A plurality of virtual disk images are established on a virtual machine. The virtual machine identifies corresponding network address translations for a plurality of disks, each having a corresponding plurality of data sets. The virtual machine installs the corresponding plurality of data sets to the plurality of virtual disks using the corresponding network address translations. An image of the plurality of disks is created, wherein the image contains the plurality of virtual disks with the plurality of data sets.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="261.11mm" wi="178.90mm" file="US08627310-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="165.10mm" wi="175.26mm" file="US08627310-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="263.99mm" wi="196.09mm" orientation="landscape" file="US08627310-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="257.64mm" wi="189.06mm" orientation="landscape" file="US08627310-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="254.42mm" wi="114.05mm" file="US08627310-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="253.75mm" wi="160.87mm" file="US08627310-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="256.37mm" wi="165.95mm" orientation="landscape" file="US08627310-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="250.53mm" wi="169.16mm" orientation="landscape" file="US08627310-20140107-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00008" num="00008">
<img id="EMI-D00008" he="260.18mm" wi="178.14mm" file="US08627310-20140107-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00009" num="00009">
<img id="EMI-D00009" he="164.68mm" wi="126.24mm" file="US08627310-20140107-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">BACKGROUND</heading>
<p id="p-0002" num="0001">1. Field</p>
<p id="p-0003" num="0002">The present disclosure related generally to an improved data processing system and in particular to capturing virtual machine images. Still more particularly, the present disclosure relates to a method and apparatus for automatically capturing multi-disk virtual machine images.</p>
<p id="p-0004" num="0003">2. Description of the Related Art</p>
<p id="p-0005" num="0004">A virtual machine image is a virtual representation of a computer, in whole or in part, either physical or virtual. For example, a virtual machine image might contain operating systems, middleware, and end user applications related to one or more computers.</p>
<p id="p-0006" num="0005">However, capturing virtual machine images is difficult, particularly for multiple disk machines. For example, taking a snapshot of a physical machine with multiple disks may yield one single virtual disk. As a result, the user may lose the ability to swap drives, lose physical disk size, and ultimately may obtain a virtual configuration that does not truly capture the physical machine. The same issue may arise with respect to capturing virtual machines having multiple virtual disks. For these reasons, better techniques for capturing multi-disk virtual machine images are desirable.</p>
<heading id="h-0002" level="1">SUMMARY</heading>
<p id="p-0007" num="0006">According to one embodiment, a plurality of virtual disk images is established on a virtual machine. The virtual machine identifies corresponding network address translations for a plurality of disks, each having a corresponding plurality of data sets. The virtual machine installs the corresponding plurality of data sets to the plurality of virtual disks using the corresponding network address translations. An image of the plurality of disks is created, wherein the image contains the plurality of virtual disks with the plurality of data sets.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE SEVERAL VIEWS OF THE DRAWINGS</heading>
<p id="p-0008" num="0007"><figref idref="DRAWINGS">FIG. 1</figref> depicts a cloud computing node according to an embodiment of the present invention;</p>
<p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. 2</figref> depicts a cloud computing environment according to an embodiment of the present invention;</p>
<p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. 3</figref> depicts abstraction model layers according to an embodiment of the present invention;</p>
<p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. 4</figref> is a block diagram of an image management environment, in accordance with an illustrative embodiment;</p>
<p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. 5</figref> is a block diagram of a process of generating a virtual machine from a physical machine with multiple disks, in accordance with an illustrative embodiment;</p>
<p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. 6</figref> is a block diagram of a process of generating a virtual machine from a physical machine with multiple disks, in accordance with an illustrative embodiment;</p>
<p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. 7</figref> is a block diagram of a process of generating a virtual machine from a physical machine with multiple disks, in accordance with an illustrative embodiment;</p>
<p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. 8</figref> is a block diagram of a process of generating a virtual machine from a physical machine with multiple disks, in accordance with an illustrative embodiment; and</p>
<p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. 9</figref> is a flowchart of a process for creating a transferable image of a machine, in accordance with an illustrative embodiment.</p>
<p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. 10</figref> is a flowchart of a process for creating a transferable image of a machine, in accordance with an illustrative embodiment.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0004" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0018" num="0017">It is understood in advance that although this disclosure includes a detailed description on cloud computing, implementation of the teachings recited herein are not limited to a cloud computing environment. Rather, embodiments of the present invention are capable of being implemented in conjunction with any other type of computing environment now known or later developed.</p>
<p id="p-0019" num="0018">Cloud computing is a model of service delivery for enabling convenient, on-demand network access to a shared pool of configurable computing resources (e.g. networks, network bandwidth, servers, processing, memory, storage, applications, virtual machines, and services) that can be rapidly provisioned and released with minimal management effort or interaction with a provider of the service. This cloud model may include at least five characteristics, at least three service models, and at least four deployment models.</p>
<p id="p-0020" num="0019">Characteristics are as follows:</p>
<p id="p-0021" num="0020">On-demand self-service: a cloud consumer can unilaterally provision computing capabilities, such as server time and network storage, as needed automatically without requiring human interaction with the service's provider.</p>
<p id="p-0022" num="0021">Broad network access: capabilities are available over a network and accessed through standard mechanisms that promote use by heterogeneous thin or thick client platforms (e.g., mobile phones, laptops, and PDAs).</p>
<p id="p-0023" num="0022">Resource pooling: the provider's computing resources are pooled to serve multiple consumers using a multi-tenant model, with different physical and virtual resources dynamically assigned and reassigned according to demand. There is a sense of location independence in that the consumer generally has no control or knowledge over the exact location of the provided resources but may be able to specify location at a higher level of abstraction (e.g., country, state, or datacenter).</p>
<p id="p-0024" num="0023">Rapid elasticity: capabilities can be rapidly and elastically provisioned, in some cases automatically, to quickly scale out and rapidly released to quickly scale in. To the consumer, the capabilities available for provisioning often appear to be unlimited and can be purchased in any quantity at any time.</p>
<p id="p-0025" num="0024">Measured service: cloud systems automatically control and optimize resource use by leveraging a metering capability at some level of abstraction appropriate to the type of service (e.g., storage, processing, bandwidth, and active user accounts). Resource usage can be monitored, controlled, and reported providing transparency for both the provider and consumer of the utilized service.</p>
<p id="p-0026" num="0025">Service Models are as follows:</p>
<p id="p-0027" num="0026">Software as a Service (SaaS): the capability provided to the consumer is to use the provider's applications running on a cloud infrastructure. The applications are accessible from various client devices through a thin client interface such as a web browser (e.g., web-based email). The consumer does not manage or control the underlying cloud infrastructure including network, servers, operating systems, storage, or even individual application capabilities, with the possible exception of limited user-specific application configuration settings.</p>
<p id="p-0028" num="0027">Platform as a Service (PaaS): the capability provided to the consumer is to deploy onto the cloud infrastructure consumer-created or acquired applications created using programming languages and tools supported by the provider. The consumer does not manage or control the underlying cloud infrastructure including networks, servers, operating systems, or storage, but has control over the deployed applications and possibly application hosting environment configurations.</p>
<p id="p-0029" num="0028">Infrastructure as a Service (IaaS): the capability provided to the consumer is to provision processing, storage, networks, and other fundamental computing resources where the consumer is able to deploy and run arbitrary software, which can include operating systems and applications. The consumer does not manage or control the underlying cloud infrastructure but has control over operating systems, storage, deployed applications, and possibly limited control of select networking components (e.g., host firewalls).</p>
<p id="p-0030" num="0029">Deployment Models are as follows:</p>
<p id="p-0031" num="0030">Private cloud: the cloud infrastructure is operated solely for an organization. It may be managed by the organization or a third party and may exist on-premises or off-premises.</p>
<p id="p-0032" num="0031">Community cloud: the cloud infrastructure is shared by several organizations and supports a specific community that has shared concerns (e.g., mission, security requirements, policy, and compliance considerations). It may be managed by the organizations or a third party and may exist on-premises or off-premises.</p>
<p id="p-0033" num="0032">Public cloud: the cloud infrastructure is made available to the general public or a large industry group and is owned by an organization selling cloud services.</p>
<p id="p-0034" num="0033">Hybrid cloud: the cloud infrastructure is a composition of two or more clouds (private, community, or public) that remain unique entities but are bound together by standardized or proprietary technology that enables data and application portability (e.g., cloud bursting for load balancing between clouds).</p>
<p id="p-0035" num="0034">A cloud computing environment is service oriented with a focus on statelessness, low coupling, modularity, and semantic interoperability. At the heart of cloud computing is an infrastructure comprising a network of interconnected nodes.</p>
<p id="p-0036" num="0035">Referring now to <figref idref="DRAWINGS">FIG. 1</figref>, a schematic of an example of a cloud computing node is shown. Cloud computing node <b>10</b> is only one example of a suitable cloud computing node and is not intended to suggest any limitation as to the scope of use or functionality of embodiments of the invention described herein. Regardless, cloud computing node <b>10</b> is capable of being implemented and/or performing any of the functionality set forth herein above.</p>
<p id="p-0037" num="0036">In cloud computing node <b>10</b> there is a computer system/server <b>12</b>, which is operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well-known computing systems, environments, and/or configurations that may be suitable for use with computer system/server <b>12</b> include, but are not limited to, personal computer systems, server computer systems, thin clients, thick clients, handheld or laptop devices, multiprocessor systems, microprocessor-based systems, set top boxes, programmable consumer electronics, network PCs, minicomputer systems, mainframe computer systems, and distributed cloud computing environments that include any of the above systems or devices, and the like.</p>
<p id="p-0038" num="0037">Computer system/server <b>12</b> may be described in the general context of computer system executable instructions, such as program modules, being executed by a computer system. Generally, program modules may include routines, programs, objects, components, logic, data structures, and so on that perform particular tasks or implement particular abstract data types. Computer system/server <b>12</b> may be practiced in distributed cloud computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed cloud computing environment, program modules may be located in both local and remote computer system storage media including memory storage devices.</p>
<p id="p-0039" num="0038">As shown in <figref idref="DRAWINGS">FIG. 1</figref>, computer system/server <b>12</b> in cloud computing node <b>10</b> is shown in the form of a general-purpose computing device. The components of computer system/server <b>12</b> may include, but are not limited to, one or more processors or processing unit <b>16</b>, a memory <b>28</b>, and a bus <b>18</b> that couples various system components including memory <b>28</b> to processing unit <b>16</b>.</p>
<p id="p-0040" num="0039">Bus <b>18</b> represents one or more of any of several types of bus structures, including a memory bus or memory controller, a peripheral bus, an accelerated graphics port, and a processor or local bus using any of a variety of bus architectures. By way of example, and not limitation, such architectures include Industry Standard Architecture (ISA) bus, Micro Channel Architecture (MCA) bus, Enhanced ISA (EISA) bus, Video Electronics Standards Association (VESA) local bus, and Peripheral Component Interconnects (PCI) bus.</p>
<p id="p-0041" num="0040">Computer system/server <b>12</b> typically includes a variety of computer system readable media. Such media may be any available media that is accessible by computer system/server <b>12</b>, and it includes both volatile and non-volatile media, removable and non-removable media.</p>
<p id="p-0042" num="0041">Memory <b>28</b> can include computer system readable media in the form of volatile memory, such as random access memory (RAM) <b>30</b> and/or cache <b>32</b>. Computer system/server <b>12</b> may further include other removable/non-removable, volatile/non-volatile computer system storage media. By way of example only, storage system <b>34</b> can be provided for reading from and writing to a non-removable, non-volatile magnetic media (not shown and typically called a &#x201c;hard drive&#x201d;). Although not shown, a magnetic disk drive for reading from and writing to a removable, non-volatile magnetic disk (e.g., a &#x201c;floppy disk&#x201d;), and an optical disk drive for reading from or writing to a removable, non-volatile optical disk such as a CD-ROM, DVD-ROM or other optical media can be provided. In such instances, each can be connected to bus <b>18</b> by one or more data media interfaces. As will be further depicted and described below, memory <b>28</b> may include at least one program product having a set (e.g., at least one) of program modules that are configured to carry out the functions of embodiments of the invention.</p>
<p id="p-0043" num="0042">Program/utility <b>40</b>, having a set (at least one) of program modules <b>42</b>, may be stored in memory <b>28</b> by way of example, and not limitation, as well as an operating system, one or more application programs, other program modules, and program data. Each of the operating systems, one or more application programs, other program modules, and program data or some combination thereof, may include an implementation of a networking environment. Program modules <b>42</b> generally carry out the functions and/or methodologies of embodiments of the invention as described herein.</p>
<p id="p-0044" num="0043">Computer system/server <b>12</b> may also communicate with one or more external devices <b>14</b> such as a keyboard, a pointing device, a display <b>24</b>, etc.; one or more devices that enable a user to interact with computer system/server <b>12</b>; and/or any devices (e.g., network card, modem, etc.) that enable computer system/server <b>12</b> to communicate with one or more other computing devices. Such communication can occur via Input/Output (I/O) interfaces <b>22</b>. Still yet, computer system/server <b>12</b> can communicate with one or more networks such as a local area network (LAN), a general wide area network (WAN), and/or a public network (e.g., the Internet) via network adapter <b>20</b>. As depicted, network adapter <b>20</b> communicates with the other components of computer system/server <b>12</b> via bus <b>18</b>. It should be understood that although not shown, other hardware and/or software components could be used in conjunction with computer system/server <b>12</b>. Examples, include, but are not limited to: microcode, device drivers, redundant processing units, external disk drive arrays, RAID systems, tape drives, and data archival storage systems, etc.</p>
<p id="p-0045" num="0044">Referring now to <figref idref="DRAWINGS">FIG. 2</figref>, illustrative cloud computing environment <b>50</b> is depicted. As shown, cloud computing environment <b>50</b> comprises one or more cloud computing nodes <b>10</b> with which local computing devices used by cloud consumers, such as, for example, personal digital assistant (PDA) or cellular telephone <b>54</b>A, desktop computer <b>54</b>B, laptop computer <b>54</b>C, and/or automobile computer system <b>54</b>N may communicate. Nodes <b>10</b> may communicate with one another. They may be grouped (not shown) physically or virtually, in one or more networks, such as Private, Community, Public, or Hybrid clouds as described hereinabove, or a combination thereof. This allows cloud computing environment <b>50</b> to offer infrastructure, platforms and/or software as services for which a cloud consumer does not need to maintain resources on a local computing device. It is understood that the types of computing devices <b>54</b>A-N shown in <figref idref="DRAWINGS">FIG. 2</figref> are intended to be illustrative only and that computing nodes <b>10</b> and cloud computing environment <b>50</b> can communicate with any type of computerized device over any type of network and/or network addressable connection (e.g., using a web browser).</p>
<p id="p-0046" num="0045">Referring now to <figref idref="DRAWINGS">FIG. 3</figref>, a set of functional abstraction layers provided by cloud computing environment <b>50</b> (<figref idref="DRAWINGS">FIG. 2</figref>) is shown. It should be understood in advance that the components, layers, and functions shown in <figref idref="DRAWINGS">FIG. 3</figref> are intended to be illustrative only and embodiments of the invention are not limited thereto. As depicted, the following layers and corresponding functions are provided:</p>
<p id="p-0047" num="0046">Hardware and software layer <b>60</b> includes hardware and software components. Examples of hardware components include mainframes, in one example IBM&#xae; zSeries&#xae; systems; RISC (Reduced Instruction Set Computer) architecture based servers, in one example IBM pSeries&#xae; systems; IBM xSeries&#xae; systems; IBM BladeCenter&#xae; systems; storage devices; networks and networking components. Examples of software components include network application server software, in one example IBM WebSphere&#xae; application server software; and database software, in one example IBM DB2&#xae; database software. (IBM, zSeries, pSeries, xSeries, BladeCenter, WebSphere, and DB2 are trademarks of International Business Machines Corporation registered in many jurisdictions worldwide).</p>
<p id="p-0048" num="0047">Virtualization layer <b>62</b> provides an abstraction layer from which the following examples of virtual entities may be provided: virtual servers; virtual storage; virtual networks, including virtual private networks; virtual applications and operating systems; and virtual clients.</p>
<p id="p-0049" num="0048">In one example, management layer <b>64</b> may provide the functions described below. Resource provisioning provides dynamic procurement of computing resources and other resources that are utilized to perform tasks within the cloud computing environment. Metering and Pricing provide cost tracking as resources are utilized within the cloud computing environment, and billing or invoicing for consumption of these resources. In one example, these resources may comprise application software licenses. Security provides identity verification for cloud consumers and tasks, as well as protection for data and other resources. User portal provides access to the cloud computing environment for consumers and system administrators. Service level management provides cloud computing resource allocation and management such that required service levels are met. Service Level Agreement (SLA) planning and fulfillment provide pre-arrangement for, and procurement of, cloud computing resources for which a future requirement is anticipated in accordance with an SLA.</p>
<p id="p-0050" num="0049">Workloads layer <b>66</b> provides examples of functionality for which the cloud computing environment may be utilized. Examples of workloads and functions which may be provided from this layer include: mapping and navigation; software development and lifecycle management; virtual classroom education delivery; data analytics processing; transaction processing; and generating multiple virtual disks. A plurality of virtual disk images is established on a virtual machine. The virtual machine identifies corresponding network address translations for a plurality of disks, each having a corresponding plurality of data sets. The virtual machine installs the corresponding plurality of data sets to the plurality of virtual disks using the corresponding network address translations. An image of the plurality of disks is created, wherein the image contains the plurality of virtual disks with the plurality of data sets. These embodiments may also be implemented in virtualization layer <b>62</b>, or in still other embodiments possibly hardware and software layer <b>60</b> or management layer <b>64</b>.</p>
<p id="p-0051" num="0050">As will be appreciated by one skilled in the art, the present invention may be embodied as a system, method or computer program product. Accordingly, the present invention may take the form of an entirely hardware embodiment, an entirely software embodiment (including firmware, resident software, micro-code, etc.) or an embodiment combining software and hardware aspects that may all generally be referred to herein as a &#x201c;circuit,&#x201d; &#x201c;module&#x201d; or &#x201c;system.&#x201d; Furthermore, the present invention may take the form of a computer program product embodied in any tangible medium of expression having computer usable program code embodied in the medium.</p>
<p id="p-0052" num="0051">Any combination of one or more computer usable or computer readable medium(s) may be utilized. The computer-usable or computer-readable medium may be, for example, but not limited to, an electronic, magnetic, optical, electromagnetic, infrared, or semiconductor system, apparatus, device, or propagation medium. More specific examples (a non-exhaustive list) of the computer-readable medium would include the following: an electrical connection having one or more wires, a portable computer diskette, a hard disk, a random access memory (RAM), a read-only memory (ROM), an erasable programmable read-only memory (EPROM or Flash memory), an optical fiber, a portable compact disc read-only memory (CDROM), an optical storage device, a transmission media such as those supporting the Internet or an intranet, or a magnetic storage device.</p>
<p id="p-0053" num="0052">Note that the computer usable or computer readable medium could even be paper or another suitable medium upon which the program is printed, as the program can be electronically captured, via, for instance, optical scanning of the paper or other medium, then compiled, interpreted, or otherwise processed in a suitable manner, if necessary, and then stored in a computer memory. In the context of this document, a computer-usable or computer-readable medium may be any medium that can contain, store, communicate, propagate, or transport the program for use by or in connection with the instruction execution system, apparatus, or device. The computer-usable medium may include a propagated data signal with the computer-usable program code embodied therewith, either in baseband or as part of a carrier wave. The computer usable program code may be transmitted using any appropriate medium, including but not limited to wireless, wireline, optical fiber cable, RF, etc.</p>
<p id="p-0054" num="0053">Computer program code for carrying out operations of the present invention may be written in any combination of one or more programming languages, including an object oriented programming language such as Java, Smalltalk, C++ or the like, and conventional procedural programming languages, such as the &#x201c;C&#x201d; programming language or similar programming languages. The program code may execute entirely on the user's computer, partly on the user's computer, as a stand-alone software package, partly on the user's computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario, the remote computer may be connected to the user's computer through any type of network, including a local area network (LAN) or a wide area network (WAN), or the connection may be made to an external computer (for example, through the Internet using an Internet Service Provider).</p>
<p id="p-0055" num="0054">The present invention is described below with reference to flowchart illustrations and/or block diagrams of methods, apparatus (systems) and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and/or block diagrams, and combinations of blocks in the flowchart illustrations and/or block diagrams, can be implemented by computer program instructions.</p>
<p id="p-0056" num="0055">These computer program instructions may be provided to a processor of a general purpose computer, special purpose computer, or other programmable data processing apparatus to produce a machine, such that the instructions, which execute via the processor of the computer or other programmable data processing apparatus, create means for implementing the functions/acts specified in the flowchart and/or block diagram block or blocks. These computer program instructions may also be stored in a computer-readable medium that can direct a computer or other programmable data processing apparatus to function in a particular manner, such that the instructions stored in the computer-readable medium produce an article of manufacture including instruction means which implement the function/act specified in the flowchart and/or block diagram block or blocks.</p>
<p id="p-0057" num="0056">The computer program instructions may also be loaded onto a computer or other programmable data processing apparatus to cause a series of operational steps to be performed on the computer or other programmable apparatus to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions/acts specified in the flowchart and/or block diagram block or blocks.</p>
<p id="p-0058" num="0057"><figref idref="DRAWINGS">FIG. 4</figref> is a block diagram of an image management environment, in accordance with an illustrative embodiment. The image management environment <b>400</b> shown in <figref idref="DRAWINGS">FIG. 4</figref> may be implemented using one or more data processing systems or networks, such as those shown in <figref idref="DRAWINGS">FIGS. 1 through 3</figref>. The exemplary process described in <figref idref="DRAWINGS">FIG. 4</figref> is non-limiting, as other embodiments are described further herein. The processes are described as being performed by &#x201c;units,&#x201d; which may refer to hardware or software, and may be performed by the same or different entities.</p>
<p id="p-0059" num="0058">In an embodiment, user selection receipt <b>402</b> receives a user selection of software to be installed on a virtual machine <b>404</b>. Bundle unit <b>406</b> bundles the user selections in a specific manner into a bundle. In an embodiment, the specific manner may be any format that allows the virtual system to install an application. For example, while the embodiments described herein may relate to International Organization for Standards (ISO) images, the format could be a tarball, a zip file, any kind of compressed file, or other format useful in a particular situation. The bundle unit then distributes the bundle to devices that will execute the additional processes described below. Parsing unit <b>408</b> then parses the bundle.</p>
<p id="p-0060" num="0059">The embodiments described herein provide a process performing various functions. In an embodiment, the process is performed by an executable (software or hardware) that allows users to create virtual disks. In an embodiment, the executable might be qemu-img, VMware software development kits, or other tools.</p>
<p id="p-0061" num="0060">Then the process will create first virtual disk <b>410</b> and second virtual disk <b>412</b>, though possibly more or fewer virtual disks may be created. The number of disks is consistent with the user selection made above. For example, if a user specified a disk configuration that included three virtual disks with sizes of 80 gigabytes, and 420 gigabytes, then the process creates corresponding virtual disks. Additionally, if the user specified that a mount/opt command on the third virtual disk, then the configuration process would create a configuration file for the host operating system to consume.</p>
<p id="p-0062" num="0061">After the virtual disks are created, the process may gather media <b>414</b> to be installed on the virtual machine <b>404</b>. The process then creates image <b>416</b>, which is preferably an installable image writable to a storage medium. While the embodiments described herein may create and use an International Organization for Standards image <b>418</b>, other embodiments are contemplated. For example, some other image may be substituted for the International Organization for Standards image. The image may include one or more operating systems, applications to install, patches, disk layouts, or scripts that drive the installation and cleanup of a virtual or physical machine. In an embodiment, the operating system included in the image may be modified such that it contains a boot service that queries the presence of one or more applications and data. For example, a boot service may be configured to query the presence of disk configurations, applications, scripts to install or cleanup data, and pre-created secure shell (SSH) keys.</p>
<p id="p-0063" num="0062">Once the image <b>416</b> is created, the process may issue a command <b>420</b> to boot the virtual machine <b>404</b> with the installable image. This command may be invoked via command line interface (cli) or an application program interface (API). Additionally, the process may establish network address translations (NATs) and ports <b>422</b> on the host operating system such that any request to a specified port may be forwarded to the virtual machine <b>404</b>. The process may also add any pre-created secure shell keys to its list of authorized keys on the host operating system. Once the virtual machine <b>404</b> is booted at boot virtual machine <b>424</b>, the process may poll the presence of a utility unique identifier file, such as a UUID.done file, which may be used to determine which files to configure or clean up. The process may also determine which virtual machine to configure or cleanup after the stack (contained within the image) has been installed and the virtual machine has booted. In an embodiment, multiple virtual machines may exist, and a utility unique identifier file might be unique to each virtual machine.</p>
<p id="p-0064" num="0063">Virtual machine <b>404</b>, which may be the same virtual machine mentioned earlier in the process shown in <figref idref="DRAWINGS">FIG. 4</figref>, may execute on one or more processors. Virtual machine <b>404</b> further may be implemented on a web-based console or an application running on a host operating system, and further may be executed locally or remotely. In another embodiment, a physical machine might replace virtual machine <b>404</b>. In an embodiment, virtual machine <b>404</b> may be used to install the operating system or application stack, or both. In this case, the user may log in to the virtual machine <b>404</b> to perform customization, cleanup, shutdown, or other functions either alone or in combination.</p>
<p id="p-0065" num="0064">Upon startup of the virtual machine <b>404</b>, a number of installation tasks may be performed by installation tasks unit <b>426</b>. Exemplary installation tasks are described below. For example, the first virtual disk <b>410</b> and second virtual disk <b>412</b> may be formatted and partitioned. The operating system may then be installed. Subsequently, the virtual machine <b>404</b> may pivot the root directory to boot the operating system. While the operating system is booting, the virtual machine <b>404</b> may invoke a boot process that checks for the presence of installable media on the image <b>418</b>. If such media exists, the boot process may relinquish control to installation scripts.</p>
<p id="p-0066" num="0065">Installation tasks unit <b>426</b> then performs installation of data onto the virtual machine and the virtual disks. In particular, the installation scripts may install the applications and media, install any patches included with the image, and run any post installation tasks. After the installation is complete, another script on the image may add the pre-created secure shell key or keys to the list of keys authorized for use on the virtual machine <b>404</b>. The script may also configure and start network. The script may also perform a secure shell into the host operating system using the pre-created secure shell key and write a utility unique identifier done file (UUID.done file).</p>
<p id="p-0067" num="0066">Turning now from the functions of the exemplary installation tasks unit <b>426</b>, once the utility unique identifier done file is detected by the host operating system, the shutdown unit <b>428</b> may be invoked. The shutdown unit <b>428</b> may invoke a number of processes. For example, the host operating system may perform a secure shell into the virtual machine <b>404</b> and run a shutdown command. Upon shutdown, the virtual machine <b>404</b> may, by use of the same scripts on the image, perform a number of other shutdown tasks. Other shutdown tasks include removal of the secure shell keys, removal of any data not required by the virtual machine <b>404</b>, cleanup of residual installation files, removal of network configurations, removal of the boot service so that no other applications or data may be installed, and other tasks. During shut down of the virtual machine virtual machine <b>404</b>, the host operating system may poll to determine whether the virtual machine has shut down completely. Upon halt, the host operating system may add any scripts of configuration files usable by the consuming user.</p>
<p id="p-0068" num="0067">Turning now from the functions of the shutdown unit <b>428</b>, the host operating system may use tarball creation unit <b>430</b> to create a tarball and then store the tarball in tarball storage unit <b>432</b>. A tarball is a storable collection of data and files, sometimes bundled together in a manner which saves space on a storage medium relative to all of the data and files being separately loaded on the storage medium. In an embodiment, the created tarball may be a tarball of the first virtual disk <b>410</b> and second virtual disk <b>412</b> as well as other files, such as the ones described above. The tarball then may be distributed in a manner consistent with the original virtual or physical disks imaged. Furthermore, the tarball contains the correct data and files in the correct mount points.</p>
<p id="p-0069" num="0068">The image management environment <b>400</b> may be further modified, or may take different forms. For example, in some embodiments, user selection receipt <b>402</b>, bundle unit <b>406</b>, parsing unit <b>408</b>, and media <b>414</b> might not be needed before establishing virtual machine <b>404</b>. First virtual disk <b>410</b> and second virtual disk <b>412</b> may be replaced by a plurality of virtual disks images on virtual machine <b>404</b>. In an embodiment, image <b>416</b> and command <b>420</b> might not be required. In an embodiment, network address translations and ports <b>420</b> might be replaced by identifying, by the virtual machine, corresponding network address translations for a plurality of disks (virtual or physical), each having a corresponding plurality of data sets. In a similar embodiment, boot virtual machine <b>424</b>, installation tasks unit <b>426</b>, shutdown unit <b>428</b>, tarball creation unit <b>430</b>, and tarball storage unit <b>432</b> might all be replaced by the following two steps. The virtual machine might install the corresponding plurality of data sets to the plurality of virtual disks using the corresponding network address translations, and creating an image of the plurality of disks, wherein the image contains the plurality of virtual disks with the plurality of data sets. Accordingly, many variations of the environment of <figref idref="DRAWINGS">FIG. 4</figref> are possible.</p>
<p id="p-0070" num="0069"><figref idref="DRAWINGS">FIG. 5</figref> is a block diagram of a process of generating a virtual machine from a physical machine with multiple disks, in accordance with an illustrative embodiment. The process shown in <figref idref="DRAWINGS">FIG. 5</figref> may be implemented in one or more data processing systems or networks, such as those shown in <figref idref="DRAWINGS">FIGS. 1 through 3</figref>. The exemplary process described in <figref idref="DRAWINGS">FIG. 5</figref> is non-limiting, as other embodiments are described further herein.</p>
<p id="p-0071" num="0070">The process <b>500</b> shown in <figref idref="DRAWINGS">FIG. 5</figref> captures a virtual machine <b>502</b> of a physical machine <b>504</b>. Physical machine <b>504</b> includes three physical disks <b>506</b>, <b>508</b>, and <b>510</b>, storing different information such as, for example, a root file system, stored documents, and stored data respectively. Process <b>500</b> inspects the current setup of physical machine <b>504</b>, and then copies its configuration and data to a single virtual disk <b>512</b>. However, the copying might be performed without regard to the multiple disk partitioning within physical machine <b>504</b>. As a result, when virtual disk <b>512</b> is created, the user may lose the ability to swap drives, lose physical disk size, and may obtain a configuration that does not capture the physical machine <b>504</b>.</p>
<p id="p-0072" num="0071">In order to capture the other two disks, the user might have to use process <b>500</b> on each of physical disks <b>506</b>, <b>508</b>, and <b>510</b> separately. However, performing separate processes may be undesirable as additional time and inconvenience may be incurred.</p>
<p id="p-0073" num="0072"><figref idref="DRAWINGS">FIG. 6</figref> is a block diagram of a process of generating a virtual machine from a physical machine with multiple disks, in accordance with an illustrative embodiment. The process shown in <figref idref="DRAWINGS">FIG. 6</figref> may be implemented in one or more data processing systems or networks, such as those shown in <figref idref="DRAWINGS">FIGS. 1 through 3</figref>. The exemplary process described in <figref idref="DRAWINGS">FIG. 6</figref> is non-limiting, as other embodiments are described further herein.</p>
<p id="p-0074" num="0073">The process <b>600</b> shown in <figref idref="DRAWINGS">FIG. 6</figref> captures a virtual machine <b>602</b> of a virtual machine <b>604</b>. Virtual machine <b>604</b> includes three physical disks <b>606</b>, <b>608</b>, and <b>610</b>, storing different information such as, for example, a root file system, stored documents, and stored data respectively. Process <b>600</b> inspects the current setup of virtual machine <b>604</b>, and then copies its configuration and data to a single virtual disk <b>612</b>. However, the copying might be performed without regard to the multiple disk partitioning within virtual machine <b>604</b>. As a result, when virtual disk <b>612</b> is created, the user may lose the ability to swap drives, lose physical disk size, and may obtain a configuration that does not capture the virtual machine <b>604</b>.</p>
<p id="p-0075" num="0074">In order to capture the other two disks, the user might have to use process <b>600</b> on each of physical disks <b>606</b>, <b>608</b>, and <b>610</b> separately. However, performing separate processes may be undesirable as additional time and inconvenience may be incurred.</p>
<p id="p-0076" num="0075"><figref idref="DRAWINGS">FIG. 7</figref> is a block diagram of a process of generating a virtual machine from a physical machine with multiple disks, in accordance with an illustrative embodiment. The process <b>700</b> shown in <figref idref="DRAWINGS">FIG. 7</figref> may be implemented in one or more data processing systems or networks, such as those shown in <figref idref="DRAWINGS">FIGS. 1 through 3</figref>. The exemplary process described in <figref idref="DRAWINGS">FIG. 7</figref> is non-limiting, as other embodiments are described further herein. For example, while three virtual disks are shown in <figref idref="DRAWINGS">FIG. 7</figref>, more or fewer virtual disks may be present.</p>
<p id="p-0077" num="0076">Process <b>700</b> begins by creating virtual machine <b>702</b>. Virtual machine <b>702</b> contains the images of virtual disks, including virtual disk <b>704</b>, virtual disk <b>706</b>, and virtual disk <b>708</b>. Each of these virtual disks corresponds to physical disks which are to be imaged. Virtual machine <b>702</b> then installs onto the virtual disks the corresponding applications, files, and other data that were present on the corresponding physical disks. Thus, for example, operating system <b>712</b> is placed on virtual disk <b>704</b>, applications <b>714</b> are placed on virtual disk <b>706</b>, and database <b>716</b> is placed on virtual disk <b>708</b>.</p>
<p id="p-0078" num="0077">The process <b>700</b> then configures the virtual machine <b>702</b> such that the three virtual disks will fully reflect the corresponding three physical disks. For example, the virtual machine <b>702</b> configures patches <b>720</b>, users <b>722</b>, network <b>724</b>, and residual installation files <b>726</b> with respect to operating system <b>712</b>, and possibly also applications <b>714</b> and database <b>716</b>.</p>
<p id="p-0079" num="0078">The process <b>700</b> then captures the configured virtual machine <b>728</b>, which now includes all three of operating system <b>712</b>, applications <b>714</b>, and database <b>716</b>; and additionally includes patches <b>720</b>, users <b>722</b>, and network <b>724</b>. However, the residual installation files may be cleaned up, in an embodiment. From that point, the captured virtual image may be distributed <b>730</b>.</p>
<p id="p-0080" num="0079"><figref idref="DRAWINGS">FIG. 8</figref> is a block diagram of a process of generating a virtual machine from a physical machine with multiple disks, in accordance with an illustrative embodiment. The process <b>800</b> shown in <figref idref="DRAWINGS">FIG. 8</figref> may be implemented in one or more data processing systems or networks, such as those shown in <figref idref="DRAWINGS">FIGS. 1 through 3</figref>. The exemplary process described in <figref idref="DRAWINGS">FIG. 8</figref> is non-limiting, as other embodiments are described further herein. For example, while three virtual disks are shown in <figref idref="DRAWINGS">FIG. 8</figref>, more or fewer virtual disks may be present.</p>
<p id="p-0081" num="0080">Process <b>800</b> begins as the user <b>802</b> selects a virtual machine configuration. This configuration is transmitted to the host operating system <b>804</b>, which uses hypervisor <b>806</b> to establish and/or communicate with virtual machine <b>808</b>. A script <b>810</b> receives and consumes the selected virtual machine configuration. The script <b>810</b> sends and receives commands via secure shell communication <b>812</b> to network interface card <b>814</b>. In turn, network interface card <b>814</b> communicates with virtual network interface card <b>816</b> using one or more secure shell keys. In turn, secure shell communication <b>818</b> commands are transmitted to virtual disk <b>826</b>, which contains the virtual operating system. An image <b>820</b> is generated and then is installed onto the three virtual disks, including virtual disk <b>822</b>, which includes applications; virtual disk <b>824</b>, which includes a database; and virtual disk <b>826</b>.</p>
<p id="p-0082" num="0081">After the virtual machine <b>808</b> and virtual disks are configured, the host operating system <b>804</b> shuts down the virtual machine <b>808</b> and may remove any unnecessary or undesirable or other data, as described above. Removal of data considered unnecessary or undesirable may be performed either during or after shutdown. The host operating system <b>804</b> or the virtual machine <b>808</b> may create a tarball of the three virtual disks. One or more configuration files, or other data, may be added to the tarball. The user may then store the tarball or distribute the tarball, as desired, for later installation onto either physical or virtual machines.</p>
<p id="p-0083" num="0082">In an embodiment, a private network between the host operating system <b>804</b> and the user <b>802</b> may provide a number of advantages. For example, a private network may provide for graceful shut down of the virtual machine <b>808</b>. The ability to gracefully shut down a virtual machine may be important in some non-limiting embodiments in order to prevent potential file system corruption. Furthermore, while most hypervisors may provide the ability to shut down virtual machines, when building a lightweight embedded virtual machine where services like Advanced Configuration for Power Interface (ACPI) do not exist, the events sent from the hypervisor <b>806</b> may not be seen by the virtual machine <b>808</b>. A private network between the host operating system <b>804</b> and the user <b>802</b> may resolve this issue.</p>
<p id="p-0084" num="0083">A private network between the host operating system <b>804</b> and the user <b>802</b> may have another advantage, in addition to graceful shut down of virtual machines. In particular, such a network may provide a channel for exchanging configuration data between the host and guest in order to customize the virtual machine being created. When building closed virtual machines, it may be important in some non-limiting embodiments that the created image be configured in such a way that the image is optimized for ease of use. For example, the image may be installable, configurable, and packaged in a ready to use form that may be easily deployed on a server. Having this communication channel may allow a vast variety of commands or scripts to be executed on virtual machine <b>808</b>.</p>
<p id="p-0085" num="0084"><figref idref="DRAWINGS">FIG. 9</figref> is a flowchart of a process for creating a transferable image of a machine, in accordance with an illustrative embodiment. The process <b>900</b> shown in <figref idref="DRAWINGS">FIG. 9</figref> may be implemented in one or more data processing systems or networks, such as those shown in <figref idref="DRAWINGS">FIGS. 1 through 3</figref>. The exemplary process described in <figref idref="DRAWINGS">FIG. 9</figref> is non-limiting, as other embodiments are described further herein. The process shown in <figref idref="DRAWINGS">FIG. 9</figref> may be implemented in an image management environment, such as image management environment <b>400</b> shown in <figref idref="DRAWINGS">FIG. 4</figref>. The process described in <figref idref="DRAWINGS">FIG. 9</figref> is described in relation to a processor performing the corresponding steps, blocks, or functions; however, multiple processors might be used and the processor might implement the steps using software, or physical hardware might take the place of software.</p>
<p id="p-0086" num="0085">The process beings as a processor receives selection of software to be installed on a virtual machine (step <b>902</b>). The processor bundles the selection of software (step <b>904</b>). Bundling may be performed by any convenient means, such as but not limited to using a Zip file, or other file compression, or by associating the files together using metadata. The software may be bundled for ease of distribution. Thereafter, the processor distributes a bundle to a host operating system (step <b>906</b>), and parses the bundle at the host operating system (step <b>908</b>). The processor then creates a first virtual disk and a second virtual disk consistent with the selection of the software (step <b>910</b>). The processor gathers media to be installed on a virtual machine to include on the first virtual disk and the second virtual disk (step <b>912</b>). The media may be arranged on the virtual machine, in one embodiment, exactly as the media is arranged on the device being imaged.</p>
<p id="p-0087" num="0086">The processor then generates ISO image (step <b>914</b>). The processor invokes a command to boot the virtual machine with the ISO image (step <b>916</b>). The processor then sets up a network address translation (NAT) on a host operating system (step <b>918</b>). The network address translation may be used such that any request to a specified port may be forwarded to the virtual machine. In this manner, among others, information may be transferred from the disks to be imaged to the corresponding disk images. As a result, the image will contain not just one disk having all of the information in the first and second disks to be imaged, but will contain first and second disk images having the corresponding information that was also present on the first and second disks to be imaged. Another example of this result may be seen with respect to <figref idref="DRAWINGS">FIG. 6</figref>, particularly with respect to operating system <b>612</b>, applications <b>614</b>, and database <b>616</b>.</p>
<p id="p-0088" num="0087">The processor may add a pre-created secure shell key to a list of authorized keys for the virtual machine (step <b>920</b>). The secure shell keys allow users or other software to access the virtual machine, as explained further in below. The processor then formats the first virtual disk and the second virtual disk (step <b>922</b>).</p>
<p id="p-0089" num="0088">The processor installs the ISO image to the virtual machine (step <b>924</b>). Next, the processor uses the pre-created secure shell key to access the host operating system and write a utility unique identifier done file (step <b>926</b>). The processor also uses the pre-created secure shell key to access the virtual machine and issue a command to shut down the virtual machine (step <b>928</b>). Optionally, during shut down, the processor may clean up any undesirable or unnecessary files or other data present in the virtual machine.</p>
<p id="p-0090" num="0089">The processor then creates a tarball comprising the first virtual disk and the second virtual disk (step <b>930</b>). Finally, the processor stores the tarball on a computer readable medium (step <b>932</b>). The process terminates thereafter.</p>
<p id="p-0091" num="0090"><figref idref="DRAWINGS">FIG. 10</figref> is a flowchart of a process for creating a transferable image of a machine, in accordance with an illustrative embodiment. The process <b>1000</b> shown in <figref idref="DRAWINGS">FIG. 10</figref> may be implemented in one or more data processing systems or networks, such as those shown in <figref idref="DRAWINGS">FIGS. 1 through 3</figref>. The exemplary process described in <figref idref="DRAWINGS">FIG. 10</figref> is non-limiting, as other embodiments are described further herein. The process shown in <figref idref="DRAWINGS">FIG. 10</figref> may be implemented in an image management environment, such as image management environment <b>400</b> shown in <figref idref="DRAWINGS">FIG. 4</figref>. The process described in <figref idref="DRAWINGS">FIG. 10</figref> is described in relation to a processor performing the corresponding steps, blocks, or functions; however, multiple processors might be used and the processor might implement the steps using software, or physical hardware might take the place of software.</p>
<p id="p-0092" num="0091">The process begins as the processor establishes a plurality of virtual disk images on a virtual machine (step <b>1002</b>). The processor identifies, using the virtual machine, corresponding network address translations for a plurality of disks, each having a corresponding plurality of data sets (step <b>1004</b>). The processor installs, using the virtual machine, the corresponding plurality of data sets to the plurality of virtual disks using the corresponding network address translations (step <b>1006</b>). The processor creates an image of the plurality of disks, wherein the image contains the plurality of virtual disks with the plurality of data sets (step <b>1008</b>). The process terminates thereafter.</p>
<p id="p-0093" num="0092">Thus, the embodiments provide for a computer implemented method implemented by a processor. A plurality of virtual disk images is established on a virtual machine. The virtual machine identifies corresponding network address translations for a plurality of disks, each having a corresponding plurality of data sets. The virtual machine installs the corresponding plurality of data sets to the plurality of virtual disks using the corresponding network address translations. An image of the plurality of disks is created, wherein the image contains the plurality of virtual disks with the plurality of data sets.</p>
<p id="p-0094" num="0093">In another embodiment, the virtual machine is booted using an installable image of a device having the plurality of disks. In still another embodiment, any data not related to the plurality of sets of data is removed from the virtual machine. In yet another embodiment, responsive to creating the image of the plurality of disks, the virtual machine is stopped and the image of the plurality of disks is stored. In a further embodiment the image is installed onto a physical computer.</p>
<p id="p-0095" num="0094">In yet another embodiment, the installable image further includes a plurality of pre-created secure shell keys, operating systems for the plurality of virtual disks, applications to install to the plurality of virtual disks, virtual disk layouts for the plurality of virtual disks, and a boot service configured to query all of a presence of a disk configuration, at least one application, at least one script to install and clean up data, and at least one pre-created secure shell. In a further embodiment a pre-created secure shell key is added to a list of authorized keys on a host operating system on which the virtual machine is running, wherein during installation of the installable image, the pre-created secure shell key is added to the list of authorized keys for the virtual machine; the pre-created secure shell key is used to access the host operating system and write a utility unique identifier done file; and the pre-created secure shell key is used to access the virtual machine and issue a command to shut down the virtual machine.</p>
<p id="p-0096" num="0095">The embodiments also provide for a computer implemented method implemented by a processor. A selection of software to be installed on a virtual machine is received, wherein the selection of software relates to a first disk and a second disk. The selection of software is bundled, distributed to a host, and parsed at the host. A first virtual disk and a second virtual disk are created consistent with the selection of software. Media to be installed on a virtual machine, which is to include the first virtual disk and the second virtual disk, is gathered. An installable image is created. The installable image may be writable to a computer readable medium. A command is invoked to boot the virtual machine with the installable image. A network address translation is setup on a host operating system such that any request to a specified port will be forwarded to the virtual machine and such that information related to the first disk can be forwarded to a first image of the first disk, and such that information related to the second disk can be forwarded to a second image of the second disk. The first virtual disk and the second virtual disk are formatted. The image is installed to the virtual machine such that the first virtual disk represents a first image of the first disk and the second virtual disk represents a second image of the second disk. A tarball is created, the tarball comprising the first virtual disk and the second virtual disk. The tarball is stored on a computer readable medium.</p>
<p id="p-0097" num="0096">In an embodiment, the first disk comprises one of a third virtual disk and a first physical disk and wherein the second disk comprises one of a fourth virtual disk and a second physical disk. In another embodiment, the image comprises an International Organization for Standards image that further comprises at least one patch, and at least one script that drives installation and cleanup of the virtual machine.</p>
<p id="p-0098" num="0097">In yet another embodiment, the International Organization for Standards image further includes a plurality of pre-created secure shell keys, and wherein the International Organization for Standards image comprises all of first and second operating systems for the first and second virtual disks, first and second applications to install to the first and second virtual disks, first and second virtual disk layouts for the first and second virtual disks, and a boot service, wherein the boot service is configured to query all of a presence of a disk configuration, at least one application, at least one script to install and clean up data, and at least one pre-created secure shell.</p>
<p id="p-0099" num="0098">In still another embodiment, a pre-created secure shell key is added to a list of authorized keys on the host operating system, wherein during installation, the pre-created secure shell key is added to the list of authorized keys for the virtual machine. The pre-created secure shell key is used to access the host operating system and write a utility unique identifier done file. The pre-created secure shell key is used to access the virtual machine and issue a command to shut down the virtual machine. Responsive to creating the tarball, a configuration file is added to the tarball.</p>
<p id="p-0100" num="0099">In another embodiment, the pre-created secure shell key is removed. Data not required by the virtual machine is removed. Residual installation files are cleaned up, network configurations are removed, and the boot service is removed.</p>
<p id="p-0101" num="0100">In yet another embodiment, the first and second virtual disks are installed from the tarball onto first and second physical disks.</p>
<p id="p-0102" num="0101">The flowcharts and block diagrams in the different depicted embodiments illustrate the architecture, functionality, and operation of some possible implementations of apparatus and methods in different illustrative embodiments. In this regard, each block in the flowchart or block diagrams may represent a module, segment, function, and/or a portion of an operation or step. For example, one or more of the blocks may be implemented as program code, in hardware, or a combination of the program code and hardware. When implemented in hardware, the hardware may, for example, take the form of integrated circuits that are manufactured or configured to perform one or more operations in the flowcharts or block diagrams.</p>
<p id="p-0103" num="0102">In some alternative implementations, the function or functions noted in the block may occur out of the order noted in the figures. For example, in some cases, two blocks shown in succession may be executed substantially concurrently, or the blocks may sometimes be executed in the reverse order, depending upon the functionality involved. Also, other blocks may be added in addition to the illustrated blocks in a flowchart or block diagram.</p>
<p id="p-0104" num="0103">According to an embodiment of the invention, a computer implemented method implemented by a processor is provided. The computer implemented method presented below may be stored in executable form on a computer readable medium, and may also be implemented in hardware or software on a device such as a computer. The computer implemented method presented below is exemplary only, and many other embodiments are possible.</p>
<p id="p-0105" num="0104">The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein, the singular forms &#x201c;a&#x201d;, &#x201c;an&#x201d; and &#x201c;the&#x201d; are intended to include the plural forms as well, unless the context clearly indicates otherwise. It will be further understood that the terms &#x201c;comprises&#x201d; and/or &#x201c;comprising,&#x201d; when used in this specification, specify the presence of stated features, integers, steps, operations, elements, and/or components, but do not preclude the presence or addition of one or more other features, integers, steps, operations, elements, components, and/or groups thereof.</p>
<p id="p-0106" num="0105">The corresponding structures, materials, acts, and equivalents of all means or step plus function elements in the claims below are intended to include any structure, material, or act for performing the function in combination with other claimed elements as specifically claimed. The description of the inventions has been presented for purposes of illustration and description, but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiment was chosen and described in order to best explain the principles of the invention and the practical application, and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.</p>
<p id="p-0107" num="0106">The description of the present invention has been presented for purposes of illustration and description, and is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art. The embodiment was chosen and described in order to best explain the principles of the invention, the practical application, and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A computer implemented method implemented by a processor, the computer implemented method comprising:
<claim-text>establishing a plurality of virtual disks on a virtual machine;</claim-text>
<claim-text>identifying, by the virtual machine, corresponding network address translations for a plurality of disks, each having a corresponding plurality of data sets;</claim-text>
<claim-text>installing, using the virtual machine, the corresponding plurality of data sets to the plurality of virtual disks using the corresponding network address translations;</claim-text>
<claim-text>creating an installable image of the plurality of disks, wherein the installable image contains the plurality of virtual disks with the plurality of data sets, wherein the installable image further includes a plurality of pre-created secure shell keys, operating systems for the plurality of virtual disks, applications to install to the plurality of virtual disks, virtual disk layouts for the plurality of virtual disks, and a boot service configured to query all of a presence of a disk configuration, at least one application, at least one script to install and clean up data, and at least one pre-created secure shell; and</claim-text>
<claim-text>booting the virtual machine using the installable image of the plurality of disks.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The computer implemented method of <claim-ref idref="CLM-00001">claim 1</claim-ref> further comprising:
<claim-text>removing from the virtual machine any data not related of the plurality of sets of data;</claim-text>
<claim-text>responsive to creating the image of the plurality of disks, stopping the virtual machine; and</claim-text>
<claim-text>storing the image of the plurality of disks.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The computer implemented method of <claim-ref idref="CLM-00002">claim 2</claim-ref> further comprising:
<claim-text>installing the image onto a physical computer.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The computer implemented method of <claim-ref idref="CLM-00001">claim 1</claim-ref> further comprising:
<claim-text>adding a pre-created secure shell key to a list of authorized keys on a host operating system on which the virtual machine is running, wherein during installation of the installable image, the pre-created secure shell key is added to the list of authorized keys for the virtual machine;</claim-text>
<claim-text>using the pre-created secure shell key to access the host operating system and write a utility unique identifier done file; and</claim-text>
<claim-text>using the pre-created secure shell key to access the virtual machine and issue a command to shut down the virtual machine.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. A computer implemented method implemented by a processor, the computer implemented method comprising:
<claim-text>receiving a selection of software to be installed on a virtual machine, wherein the selection of software relates to a first disk and a second disk;</claim-text>
<claim-text>bundling the selection of software;</claim-text>
<claim-text>distributing the bundle to a host;</claim-text>
<claim-text>parsing the bundle at the host;</claim-text>
<claim-text>creating a first virtual disk and a second virtual disk consistent with the selection of software;</claim-text>
<claim-text>gathering media to be installed on a virtual machine to include the first virtual disk and the second virtual disk;</claim-text>
<claim-text>creating an installable image which is writable to a computer readable medium;</claim-text>
<claim-text>invoking a command to boot the virtual machine with the installable image;</claim-text>
<claim-text>setting up a network address translation on a host operating system such that any request to a specified port will be forwarded to the virtual machine and such that information related to the first disk can be forwarded to a first image of the first disk, and such that information related to the second disk can be forwarded to a second image of the second disk;</claim-text>
<claim-text>formatting the first virtual disk and the second virtual disk;</claim-text>
<claim-text>installing the image to the virtual machine such that the first virtual disk represents a first image of the first disk and the second virtual disk represents a second image of the second disk;</claim-text>
<claim-text>creating a tarball comprising the first virtual disk and the second virtual disk; and</claim-text>
<claim-text>storing the tarball on a computer readable medium.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The computer implemented method of <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein the first disk comprises one of a third virtual disk and a first physical disk and wherein the second disk comprises one of a fourth virtual disk and a second physical disk.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The computer implemented method of <claim-ref idref="CLM-00006">claim 6</claim-ref>, wherein the image comprises an International Organization for Standards image that further comprises at least one patch, and at least one script that drives installation and cleanup of the virtual machine.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The computer implemented method of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein the International Organization for Standards image further includes a plurality of pre-created secure shell keys, and wherein the International Organization for Standards image comprises all of first and second operating systems for the first and second virtual disks, first and second applications to install to the first and second virtual disks, first and second virtual disk layouts for the first and second virtual disks, and a boot service, wherein the boot service is configured to query all of a presence of a disk configuration, at least one application, at least one script to install and clean up data, and at least one pre-created secure shell.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The computer implemented method of <claim-ref idref="CLM-00008">claim 8</claim-ref> further comprising:
<claim-text>adding a pre-created secure shell key to a list of authorized keys on the host operating system, wherein during installation, the pre-created secure shell key is added to the list of authorized keys for the virtual machine;</claim-text>
<claim-text>using the pre-created secure shell key to access the host operating system and write a utility unique identifier done file;</claim-text>
<claim-text>using the pre-created secure shell key to access the virtual machine and issue a command to shut down the virtual machine;</claim-text>
<claim-text>responsive to creating the tarball, adding a configuration file to the tarball.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The computer implemented method of <claim-ref idref="CLM-00009">claim 9</claim-ref> further comprising:
<claim-text>removing the pre-created secure shell key;</claim-text>
<claim-text>removing data not required by the virtual machine;</claim-text>
<claim-text>cleaning up residual installation files;</claim-text>
<claim-text>removing network configurations; and</claim-text>
<claim-text>removing the boot service.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The computer implemented method of <claim-ref idref="CLM-00010">claim 10</claim-ref> further comprising:
<claim-text>installing the first and second virtual disks from the tarball onto first and second physical disks.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. A computer program product comprising:
<claim-text>a non-transitory computer readable storage medium having computer readable program code embodied therewith, the computer readable program code comprising:</claim-text>
<claim-text>computer readable program code for receiving a selection of software to be installed on a virtual machine, wherein the selection of software relates to a first disk and a second disk;</claim-text>
<claim-text>computer readable program code for bundling the selection of software;</claim-text>
<claim-text>computer readable program code for distributing the bundle to a host;</claim-text>
<claim-text>computer readable program code for parsing the bundle at the host;</claim-text>
<claim-text>computer readable program code for creating a first virtual disk and a second virtual disk consistent with the selection of software;</claim-text>
<claim-text>computer readable program code for gathering media to be installed on a virtual machine to include the first virtual disk and the second virtual disk;</claim-text>
<claim-text>computer readable program code for creating an installable image which is writable to a computer readable medium;</claim-text>
<claim-text>computer readable program code for invoking a command to boot the virtual machine with the installable image;</claim-text>
<claim-text>computer readable program code for setting up a network address translation on a host operating system such that any request to a specified port will be forwarded to the virtual machine and such that information related to the first disk can be forwarded to a first image of the first disk, and such that information related to the second disk can be forwarded to a second image of the second disk;</claim-text>
<claim-text>computer readable program code for formatting the first virtual disk and the second virtual disk;</claim-text>
<claim-text>computer readable program code for installing the image to the virtual machine such that the first virtual disk represents a first image of the first disk and the second virtual disk represents a second image of the second disk;</claim-text>
<claim-text>computer readable program code for creating a tarball comprising the first virtual disk and the second virtual disk; and</claim-text>
<claim-text>computer readable program code for storing the tarball on a computer readable medium.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The computer program product of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the first disk comprises one of a third virtual disk and a first physical disk and wherein the second disk comprises one of a fourth virtual disk and a second physical disk.</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The computer program product of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the image comprises an International Organization for Standards image that further comprises at least one patch, and at least one script that drives installation and cleanup of the virtual machine.</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The computer program product of <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein the International Organization for Standards image further includes a plurality of pre-created secure shell keys, and wherein the International Organization for Standards image comprises all of first and second operating systems for the first and second virtual disks, first and second applications to install to the first and second virtual disks, first and second virtual disk layouts for the first and second virtual disks, and a boot service, wherein the boot service is configured to query all of a presence of a disk configuration, at least one application, at least one script to install and clean up data, and at least one pre-created secure shell.</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The computer program product of <claim-ref idref="CLM-00015">claim 15</claim-ref> further comprising:
<claim-text>computer readable program code for adding a pre-created secure shell key to a list of authorized keys on the host operating system, wherein during installation, the pre-created secure shell key is added to the list of authorized keys for the virtual machine;</claim-text>
<claim-text>computer readable program code for using the pre-created secure shell key to access the host operating system and write a utility unique identifier done file;</claim-text>
<claim-text>computer readable program code for using the pre-created secure shell key to access the virtual machine and issue a command to shut down the virtual machine;</claim-text>
<claim-text>computer readable program code for responsive to creating the tarball, adding a configuration file to the tarball.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The computer program product of <claim-ref idref="CLM-00016">claim 16</claim-ref> further comprising:
<claim-text>computer readable program code for removing the pre-created secure shell key;</claim-text>
<claim-text>computer readable program code for removing data not required by the virtual machine;</claim-text>
<claim-text>computer readable program code for cleaning up residual installation files;</claim-text>
<claim-text>computer readable program code for removing network configurations; and</claim-text>
<claim-text>computer readable program code for removing the boot service.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The computer program product of <claim-ref idref="CLM-00017">claim 17</claim-ref> further comprising:
<claim-text>computer readable program code for installing the first and second virtual disks from the tarball onto first and second physical disks. </claim-text>
</claim-text>
</claim>
</claims>
</us-patent-grant>

<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08627277-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08627277</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>11965286</doc-number>
<date>20071227</date>
</document-id>
</application-reference>
<us-application-series-code>11</us-application-series-code>
<us-term-of-grant>
<us-term-extension>1519</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>9</main-group>
<subgroup>44</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>717109</main-classification>
<further-classification>717104</further-classification>
<further-classification>717105</further-classification>
<further-classification>715762</further-classification>
</classification-national>
<invention-title id="d2e53">Machine driven process for user interface driven data modeling collaboration</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>2004/0227776</doc-number>
<kind>A1</kind>
<name>Bent et al.</name>
<date>20041100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>345700</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>2005/0071749</doc-number>
<kind>A1</kind>
<name>Goerke et al.</name>
<date>20050300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>7155011</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>2005/0289450</doc-number>
<kind>A1</kind>
<name>Bent et al.</name>
<date>20051200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>715506</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>2006/0259868</doc-number>
<kind>A1</kind>
<name>Hirschberg et al.</name>
<date>20061100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>715762</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>2008/0104540</doc-number>
<kind>A1</kind>
<name>Sawyer</name>
<date>20080500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>715809</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>2009/0083697</doc-number>
<kind>A1</kind>
<name>Zhang et al.</name>
<date>20090300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717105</main-classification></classification-national>
</us-citation>
</us-references-cited>
<number-of-claims>18</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>717109</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>5</number-of-drawing-sheets>
<number-of-figures>9</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20090172566</doc-number>
<kind>A1</kind>
<date>20090702</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Mosher</last-name>
<first-name>Barry Courtenay</first-name>
<address>
<city>North Saanich</city>
<country>CA</country>
</address>
</addressbook>
<residence>
<country>CA</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Mosher</last-name>
<first-name>Barry Courtenay</first-name>
<address>
<city>North Saanich</city>
<country>CA</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Yee &#x26; Associates, P.C.</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
<agent sequence="02" rep-type="attorney">
<addressbook>
<last-name>Tham</last-name>
<first-name>Yeen</first-name>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>International Business Machines Corporation</orgname>
<role>02</role>
<address>
<city>Armonk</city>
<state>NY</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Zhen</last-name>
<first-name>Li B</first-name>
<department>2197</department>
</primary-examiner>
<assistant-examiner>
<last-name>Miller</last-name>
<first-name>V</first-name>
</assistant-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">A computer implemented method and computer program product build a data-bound user interface. An instruction from a graphical designer is received for creating the presentation field within the presentation user interface. When the presentation field is created, a corresponding data element is created within a reserved data model, and the presentation field is automatically bound to the data element. Instructions from a data modeler are received for relocating the data element from within the reserved data model to within a custom data model. The data element is relocated to the custom model, and the binding from the presentation field to the data element is maintained. The data bound user interface is then built, including the presentation field and the data element.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="201.34mm" wi="167.30mm" file="US08627277-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="256.20mm" wi="177.55mm" file="US08627277-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="201.00mm" wi="166.29mm" file="US08627277-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="256.37mm" wi="172.55mm" file="US08627277-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="252.98mm" wi="178.48mm" file="US08627277-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="223.77mm" wi="112.69mm" file="US08627277-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">BACKGROUND OF THE INVENTION</heading>
<p id="p-0002" num="0001">1. Field of the Invention</p>
<p id="p-0003" num="0002">The present invention relates generally to an improved data processing system, and in particular to a computer implemented method, computer usable program product, and apparatus. Still more particularly, the present invention relates to a computer implemented method, apparatus, and computer usable program product for a machine driven process for user interface driven data modeling collaboration.</p>
<p id="p-0004" num="0003">2. Description of the Related Art</p>
<p id="p-0005" num="0004">Building data-bound user interfaces for desktop interfaces, web applications, and electronic forms, involves two conceptually different types of tasks: graphical design of the user interfaces and data modeling of the data underlying the user interface. Indeed, at most organizations, the two tasks are completed by different people taking on the roles of a graphical designer and a data modeler. A major difficulty arrives from the interaction of these different people in those roles when creating a new application or when maintaining new iterations of an existing application.</p>
<p id="p-0006" num="0005">The graphical designer is concerned with the design and layout of the user interface in terms of placement of items like labels, fields, buttons, graphics, and other presentation type items. According to business needs, the design and layout of the user interface should be easy to work with, easy to understand, and provide an aesthetically pleasing appearance. Because the visual design of the user interface is both a showcase of the organization to business analysts, and the primary vehicle for access to the organization for users, the presentation of the user interface is of paramount importance to most organizations. The design and layout for the presentation of the user interface is usually prototyped, reviewed, and updated many times before a final appearance is established.</p>
<p id="p-0007" num="0006">While the graphical designer is busy going through each iteration of the design and layout of the user interface, data modeling is required for each iteration to make the application actually work. Data modeling includes the design of the underlying data model according to business needs. Data models must ensure compatibility with external systems, standards, and technical requirements. The data model may need to conform to and work with XML schemas, XSD schemas, WSDL, SOA, and databases. Data models must also &#x201c;bind&#x201d; the presentation of the user interface to data model. Binding the user interface indicates where values that are entered by a user in the presentation are stored in the data model. Binding the user interface indicates where the presentation gets data to display.</p>
<p id="p-0008" num="0007">Development of a data-bound user interface is typically an iterative process, with both the graphical designer and data modeler doing work on each iteration of the user interface. Changes made to the user interface by the graphical designer can often break or corrupt previous work done by the data modeler. Ideally, the graphical designer would never have to edit the data model, or even be aware of it. However, because the presentation must be &#x201c;bound&#x201d; to the data model in a completed application, changes made to presentation do in fact affect the binding.</p>
<p id="p-0009" num="0008">In an attempt to overcome the problem described, some systems enforce that all presentation items are bound to a data model. Such a solution is not desirable as it requires a single user to simultaneously perform both the role of graphical designer and data modeler. Furthermore, systems enforcing that all presentation items are bound to a data model also suffer from other problems. These systems either do not protect the data model from alteration when modifying the presentation, or they do not allow the user interface design to influence the model design at all. Such systems are constrained by the model, i.e., model-driven design, instead of allowing the user interface to dictate the underlying model, i.e., UI-driven modeling.</p>
<p id="p-0010" num="0009">Organizations have also attempted human-managed approaches to solving the problem of graphical designers breaking the binding between the presentation and the data model. One approach is simply to assign one person to perform both the role of graphical designer and the role of data modeler. However, qualified people possessing both these skill sets are very difficult to find. Furthermore, even when one person is fulfilling both roles, they are generally forced to perform one role at a time. It is helpful that when they modify the presentation, they understand what work they are creating for themselves to fix as the data modeler. Attempting to fill both roles at the same time is difficult.</p>
<p id="p-0011" num="0010">Another approach is for the graphical designer to be made partially aware of the data model. When the graphical designer knows of potential impacts on the data model, the graphical designer can be tasked with creating a list of any changes they make to the presentation that might impact binding to the data model. Any fields, labels, or buttons within the user interface that are added, removed, or renamed can then be included in the list. When the graphical designer is done with their work, the list is given to the data modeler. The data modeler can then make any necessary corrections. However, this approach is only a partial solution. The application is generally in a broken or non-working state after the graphical designer has made modifications. The graphical designer therefore cannot successful test or preview the application until the data modeler fixes the binding. Thus, this approach may force many more iterations and hand-offs between the two roles than is desired.</p>
<heading id="h-0002" level="1">SUMMARY OF THE INVENTION</heading>
<p id="p-0012" num="0011">A computer implemented method and computer program product build a data-bound user interface. An instruction from a graphical designer is received for creating the presentation field within the presentation user interface. When the presentation field is created, a corresponding data element is created within a reserved data model, and the presentation field is automatically bound to the data element. Instructions from a data modeler are received for relocating the data element from within the reserved data model to within a custom data model. The data element is relocated to the custom model, and the binding from the presentation field to the data element is maintained. The data bound user interface is then built, including the presentation field and the data element.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0013" num="0012">The novel features believed characteristic of the invention are set forth in the appended claims. The invention itself, however, as well as a preferred mode of use, further objectives and advantages thereof, will best be understood by reference to the following detailed description of an illustrative embodiment when read in conjunction with the accompanying drawings, wherein:</p>
<p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. 1</figref> is a pictorial representation of a network of data processing systems in which illustrative embodiments may be implemented;</p>
<p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. 2</figref> is a block diagram of a data processing system in which illustrative embodiments may be implemented;</p>
<p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. 3</figref> is a data flow diagram depicting the flow of data between various components according to an illustrative embodiment;</p>
<p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. 4</figref> is a first iteration of a user interface build according to an illustrative embodiment;</p>
<p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. 5</figref> is a second iteration of a user interface build according to an illustrative embodiment;</p>
<p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. 6</figref> is a third iteration of a user interface build according to an illustrative embodiment;</p>
<p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. 7</figref> is a fourth iteration of a user interface build according to an illustrative embodiment;</p>
<p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. 8</figref> is a flow chart for creating a new presentation field according to an illustrative embodiment; and</p>
<p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. 9</figref> is a flow chart for manipulating data elements within a data model according to an illustrative embodiment.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0004" level="1">DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENT</heading>
<p id="p-0023" num="0022">With reference now to the figures and in particular with reference to <figref idref="DRAWINGS">FIGS. 1-2</figref>, exemplary diagrams of data processing environments are provided in which illustrative embodiments may be implemented. It should be appreciated that <figref idref="DRAWINGS">FIGS. 1-2</figref> are only exemplary and are not intended to assert or imply any limitation with regard to the environments in which different embodiments may be implemented. Many modifications to the depicted environments may be made.</p>
<p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. 1</figref> depicts a pictorial representation of a network of data processing systems in which illustrative embodiments may be implemented. Network data processing system <b>100</b> is a network of computers in which the illustrative embodiments may be implemented. Network data processing system <b>100</b> contains network <b>102</b>, which is the medium used to provide communications links between various devices and computers connected together within network data processing system <b>100</b>. Network <b>102</b> may include connections, such as wire, wireless communication links, or fiber optic cables.</p>
<p id="p-0025" num="0024">In the depicted example, server <b>104</b> and server <b>106</b> connect to network <b>102</b> along with storage unit <b>108</b>. In addition, clients <b>110</b>, <b>112</b>, and <b>114</b> connect to network <b>102</b>. Clients <b>110</b>, <b>112</b>, and <b>114</b> may be, for example, personal computers or network computers. In the depicted example, server <b>104</b> provides data, such as boot files, operating system images, and applications to clients <b>110</b>, <b>112</b>, and <b>114</b>. Clients <b>110</b>, <b>112</b>, and <b>114</b> are clients to server <b>104</b> in this example. In the illustrative embodiments, a data modeler, and a graphical designer can use <b>110</b>, <b>112</b>, and <b>114</b> to access the user interface builder. The user interface builder can be stored remotely on server <b>104</b>. Network data processing system <b>100</b> may include additional servers, clients, and other devices not shown.</p>
<p id="p-0026" num="0025">In the depicted example, network data processing system <b>100</b> is the Internet with network <b>102</b> representing a worldwide collection of networks and gateways that use the Transmission Control Protocol/Internet Protocol (TCP/IP) suite of protocols to communicate with one another. At the heart of the Internet is a backbone of high-speed data communication lines between major nodes or host computers, consisting of thousands of commercial, governmental, educational and other computer systems that route data and messages. Of course, network data processing system <b>100</b> also may be implemented as a number of different types of networks, such as for example, an intranet, a local area network (LAN), or a wide area network (WAN). <figref idref="DRAWINGS">FIG. 1</figref> is intended as an example, and not as an architectural limitation for the different illustrative embodiments.</p>
<p id="p-0027" num="0026">With reference now to <figref idref="DRAWINGS">FIG. 2</figref>, a block diagram of a data processing system is shown in which illustrative embodiments may be implemented. Data processing system <b>200</b> is an example of a computer, such as server <b>104</b> or client <b>110</b> in <figref idref="DRAWINGS">FIG. 1</figref>, in which computer usable program code or instructions implementing the processes may be located for the illustrative embodiments. In this illustrative example, data processing system <b>200</b> includes communications fabric <b>202</b>, which provides communications between processor unit <b>204</b>, memory <b>206</b>, persistent storage <b>208</b>, communications unit <b>210</b>, input/output (I/O) unit <b>212</b>, and display <b>214</b>.</p>
<p id="p-0028" num="0027">Processor unit <b>204</b> serves to execute instructions for software that may be loaded into memory <b>206</b>. Processor unit <b>204</b> may be a set of one or more processors or may be a multi-processor core, depending on the particular implementation. Further, processor unit <b>204</b> may be implemented using one or more heterogeneous processor systems in which a main processor is present with secondary processors on a single chip. As another illustrative example, processor unit <b>204</b> may be a symmetric multi-processor system containing multiple processors of the same type.</p>
<p id="p-0029" num="0028">Memory <b>206</b>, in these examples, may be, for example, a random access memory or any other suitable volatile or non-volatile storage device. Persistent storage <b>208</b> may take various forms depending on the particular implementation. For example, persistent storage <b>208</b> may contain one or more components or devices. For example, persistent storage <b>208</b> may be a hard drive, a flash memory, a rewritable optical disk, a rewritable magnetic tape, or some combination of the above. The media used by persistent storage <b>208</b> also may be removable. For example, a removable hard drive may be used for persistent storage <b>208</b>.</p>
<p id="p-0030" num="0029">Communications unit <b>210</b>, in these examples, provides for communications with other data processing systems or devices. In these examples, communications unit <b>210</b> is a network interface card. Communications unit <b>210</b> may provide communications through the use of either or both physical and wireless communications links.</p>
<p id="p-0031" num="0030">Input/output unit <b>212</b> allows for input and output of data with other devices that may be connected to data processing system <b>200</b>. For example, input/output unit <b>212</b> may provide a connection for user input through a keyboard and mouse. Further, input/output unit <b>212</b> may send output to a printer. Display <b>214</b> provides a mechanism to display information to a user.</p>
<p id="p-0032" num="0031">Instructions for the operating system and applications or programs are located on persistent storage <b>208</b>. These instructions may be loaded into memory <b>206</b> for execution by processor unit <b>204</b>. The processes of the different embodiments may be performed by processor unit <b>204</b> using computer implemented instructions, which may be located in a memory, such as memory <b>206</b>. These instructions are referred to as program code, computer usable program code, or computer readable program code that may be read and executed by a processor in processor unit <b>204</b>. The program code in the different embodiments may be embodied on different physical or tangible computer readable media, such as memory <b>206</b> or persistent storage <b>208</b>.</p>
<p id="p-0033" num="0032">Program code <b>216</b> is located in a functional form on computer readable media <b>218</b> that is selectively removable and may be loaded onto or transferred to data processing system <b>200</b> for execution by processor unit <b>204</b>. Program code <b>216</b> and computer readable media <b>218</b> form computer program product <b>220</b> in these examples. In one example, computer readable media <b>218</b> may be in a tangible form, such as, for example, an optical or magnetic disc that is inserted or placed into a drive or other device that is part of persistent storage <b>208</b> for transfer onto a storage device, such as a hard drive that is part of persistent storage <b>208</b>. In a tangible form, computer readable media <b>218</b> also may take the form of a persistent storage, such as a hard drive, a thumb drive, or a flash memory that is connected to data processing system <b>200</b>. The tangible form of computer readable media <b>218</b> is also referred to as computer recordable storage media. In some instances, computer recordable media <b>218</b> may not be removable.</p>
<p id="p-0034" num="0033">Alternatively, program code <b>216</b> may be transferred to data processing system <b>200</b> from computer readable media <b>218</b> through a communications link to communications unit <b>210</b> and/or through a connection to input/output unit <b>212</b>. The communications link and/or the connection may be physical or wireless in the illustrative examples. The computer readable media also may take the form of non-tangible media, such as communications links or wireless transmissions containing the program code.</p>
<p id="p-0035" num="0034">The different components illustrated for data processing system <b>200</b> are not meant to provide architectural limitations to the manner in which different embodiments may be implemented. The different illustrative embodiments may be implemented in a data processing system including components in addition to or in place of those illustrated for data processing system <b>200</b>. Other components shown in <figref idref="DRAWINGS">FIG. 2</figref> can be varied from the illustrative examples shown.</p>
<p id="p-0036" num="0035">As one example, a storage device in data processing system <b>200</b> is any hardware apparatus that may store data. Memory <b>206</b>, persistent storage <b>208</b>, and computer readable media <b>218</b> are examples of storage devices in a tangible form.</p>
<p id="p-0037" num="0036">In another example, a bus system may be used to implement communications fabric <b>202</b> and may be comprised of one or more buses, such as a system bus or an input/output bus. Of course, the bus system may be implemented using any suitable type of architecture that provides for a transfer of data between different components or devices attached to the bus system. Additionally, a communications unit may include one or more devices used to transmit and receive data, such as a modem or a network adapter. Further, a memory may be, for example, memory <b>206</b> or a cache such as found in an interface and memory controller hub that may be present in communications fabric <b>202</b>.</p>
<p id="p-0038" num="0037">The illustrated embodiments describe a process for automatically generating and synchronizing a data model and its binding to the application's presentation, while allowing both the graphical designer and the data modeler to work on the application in iterations. The graphical designer and the data modeler are able to work on the application without negatively impacting each other's work. The illustrated embodiments enable a user interface driven data modeling collaboration between the graphical designer and the data modeler.</p>
<p id="p-0039" num="0038">A reserved data model is automatically generated and synchronized. The reserved data model is managed separately from the custom data model generated by the data modeler. The data modeler is not permitted to directly edit the reserved data model. The reserved data model is automatically generated by the data processing system simultaneously with graphical design, to ensure that it is always complete and kept synchronized with the presentation of the user interface.</p>
<p id="p-0040" num="0039">The binding of the presentation to the reserved data model is also automatically generated by the data processing system simultaneously with graphical design. This automatic binding enforces the rule that all presentation items are bound to the data model. The data modeler is able to build the rest of the data model as desired or required, and changes the presentations to be bound to the custom model instead of the automatically generated reserved model. As the data modeler changes the presentations to be bound to the custom model, elements of the automatically generated reserved model are removed as part of the synchronization. The reserved model generation and synchronization processes therefore never impact the custom model or the binding of presentation items to it.</p>
<p id="p-0041" num="0040">Beyond the mere automatic generation of the reserved model, the illustrative embodiments offer advantages over the human-managed approach of the prior art. In addition to keeping track of binding impacts in the data model due to changes by the graphical designer, the process also ensures that a complete working data model is always available. Furthermore, presentation of the user interface is always fully bound to the working data model. The graphical designer can preview and test the application at any time without waiting for updates and completion from the data modeler.</p>
<p id="p-0042" num="0041">Furthermore, implementation by the data modeler is no longer invalidated due to changes in the project by the graphical designer. The data modeler is provided with an automatically generated reserved data model that matches both in terms of the number of elements within the user interface, and the names of the elements within the user interface. This generated, reserved model can then be used as the starting point for building the exact model desired by the data modeler.</p>
<p id="p-0043" num="0042">Finally, the data modeler is informed of changes made by the graphical designer. The list of changes is complete and accurate, and is reflected in updates to the data model and binding. Therefore, much of the revisions that the data modeler must implement in response to changes by the graphical designer are performed automatically.</p>
<p id="p-0044" num="0043">Referring now to <figref idref="DRAWINGS">FIG. 3</figref>, a data flow diagram depicting the flow of data between various components is shown according to an illustrative embodiment. The process works by reserving part of the data model for a machine managed generation and modification.</p>
<p id="p-0045" num="0044">User interface builder <b>312</b> executes on data processing system <b>310</b>. User interface builder <b>312</b> is a software component that allows developers, including graphical designers and data modelers, to develop data-bound user interfaces for desktop interfaces, web applications, and electronic forms. Data processing system <b>310</b> can be data processing system <b>200</b> of <figref idref="DRAWINGS">FIG. 2</figref>.</p>
<p id="p-0046" num="0045">A graphical designer uses data processing system <b>314</b> to access user interface builder <b>312</b>. Data processing system <b>314</b> can be a client, such as clients <b>110</b>, <b>112</b>, and <b>114</b> of <figref idref="DRAWINGS">FIG. 1</figref>. The graphical designer sends instructions <b>316</b> to user interface builder <b>312</b>. Instructions <b>316</b> are computer instructions, or program code, to manipulate the user interface that is being built.</p>
<p id="p-0047" num="0046">Responsive to receiving instructions <b>316</b>, user interface builder <b>312</b> performs the instructions, placing or removing appropriate presentation fields <b>318</b> within the design and layout of the presentation user interface <b>320</b>. Presentation fields <b>318</b> are labels, fields, buttons, graphic designs, and other presentation type items, as well as the layout of those items, placed within presentation user interface <b>320</b>. Presentation user interface <b>320</b> is the design and layout of the user interface which is seen when executing the data-bound user interface.</p>
<p id="p-0048" num="0047">Responsive to presentation fields <b>318</b> being placed within presentation user interface <b>320</b>, user interface builder <b>312</b> generates and synchronizes reserved data model <b>322</b> within the data model <b>324</b>. Reserved data model <b>322</b> is a functional data model that is generated by user interface builder <b>312</b>. User interface builder <b>312</b> creates data elements <b>326</b> within reserved data model <b>322</b>. User interface builder <b>312</b> binds data elements <b>326</b> to the appropriate presentation fields <b>318</b> within presentation user interface <b>320</b>. By binding data elements <b>326</b> to appropriate presentation fields <b>318</b>, user interface builder <b>312</b> provides a reference from appropriate presentation fields <b>318</b> to data elements <b>326</b>. The binding of data elements specifies from where presentation fields <b>318</b> retrieves data, and to where presentation fields <b>318</b> should store any data input from the user.</p>
<p id="p-0049" num="0048">Thus, as the graphical designer adds presentation fields <b>318</b>, reserved data model <b>322</b> is automatically generated and maintained. Reserved data model <b>322</b> is generated in real time as the graphical designer works with user interface builder <b>312</b>.</p>
<p id="p-0050" num="0049">A data modeler uses data processing system <b>328</b> to access user interface builder <b>312</b>. Data processing system <b>328</b> can be a client, such as clients <b>110</b>, <b>112</b>, and <b>114</b> of <figref idref="DRAWINGS">FIG. 1</figref>. The data modeler sends instructions <b>330</b> to user interface builder <b>312</b>. Instructions <b>330</b> are computer instructions, or program code, to manipulate data model <b>324</b> and data elements <b>326</b> therein.</p>
<p id="p-0051" num="0050">By receiving instructions <b>330</b>, user interface builder <b>312</b> enables the data modeler to build the rest of data model <b>324</b> as desired or required, and to make changes to data model <b>324</b>. As changes are made to data model <b>324</b>, user interface builder <b>312</b> removes data elements <b>326</b> being acted upon by the data modeler from reserved data model <b>322</b>. Thus, the data modeler places corresponding data elements <b>327</b> into custom data model <b>324</b>. The data modeler can then relocate the binding between presentation fields <b>318</b> and data elements <b>326</b>, with a binding between presentation fields <b>318</b> and corresponding data elements <b>327</b> in custom data model <b>332</b> within data model <b>324</b>. Custom data model <b>332</b> is a functional data model containing data elements that have been manipulated by the data modeler.</p>
<p id="p-0052" num="0051">As the data modeler relocates the bindings of data elements from data elements <b>326</b> of reserved data model <b>322</b> to the corresponding data elements <b>327</b> of custom data model <b>332</b>, data elements <b>326</b> are automatically removed from reserved data model <b>322</b>. Reserved data model <b>322</b> will therefore shrink and eventually disappear, as bindings to the data elements <b>326</b> therein are removed.</p>
<p id="p-0053" num="0052">The data modeler can remove data elements <b>326</b> from reserved data model <b>322</b> to create the desired data model that is required by the application. The presentation bindings between presentation fields <b>318</b> and data elements <b>326</b> are maintained so that data elements <b>326</b> can only be removed from reserved data model <b>322</b> by substituting a corresponding data element into custom data model <b>332</b>, and binding presentation fields <b>318</b> thereto.</p>
<p id="p-0054" num="0053">Therefore, as the data modeler changes the data elements <b>326</b> bound to presentations fields <b>318</b> to be bound to corresponding data elements <b>327</b> of custom data model <b>332</b>, data elements <b>326</b> of the automatically generated reserved data model <b>322</b> are removed from reserved data model <b>322</b> as part of the synchronization. The generation and synchronization processes of the reserved data model <b>322</b> therefore never impact custom data model <b>332</b>. Likewise, the generation and synchronization processes of reserved data model <b>322</b> never impact the binding of presentation fields <b>318</b> to corresponding data elements <b>327</b> within custom data model <b>332</b>.</p>
<p id="p-0055" num="0054">Changes to presentation user interface <b>320</b> by the graphical designer do not change custom data model <b>332</b>. When adding a new field, such as presentation fields <b>318</b>, a new data model element, such as data elements <b>326</b>, is added to reserved data model <b>322</b>. If the graphical designer chooses to delete presentation fields <b>318</b> from the custom model, data elements <b>326</b> bound thereto will also be deleted. Conversely, when the graphical designer deletes presentation fields <b>318</b>, the data element bound thereto having been previously relocated to custom data model <b>332</b>, the data element within custom data model <b>332</b> is not deleted.</p>
<p id="p-0056" num="0055">Similarly, if the graphical designer renames one of presentation fields <b>318</b> bound to a data element in the reserved data model <b>322</b>, the corresponding data element in reserved data model <b>322</b> will also be renamed. However, if the graphical designer renames one of presentation fields <b>318</b> that is bound to a data element in custom data model <b>332</b>, the data element within custom data model <b>332</b> will not be renamed.</p>
<p id="p-0057" num="0056">Conversely, the data modeler can directly modify custom data model <b>332</b>, but with the restriction that the binds and references from presentation fields <b>318</b> cannot be broken. The data modeler cannot delete data elements <b>326</b> if presentation fields <b>318</b> are bound to that data element. If data elements <b>326</b> are a group of data elements, the data modeler can change which of data elements <b>326</b> that the presentation fields <b>318</b> are bound to. However, the data modeler must maintain the binding of presentation fields <b>318</b> to either data elements <b>326</b> of reserved data model <b>322</b> or corresponding data elements <b>327</b> of custom data model <b>332</b>.</p>
<p id="p-0058" num="0057">If a binding from presentation fields <b>318</b> to certain data elements <b>326</b> is changed to refer to corresponding data elements <b>327</b> within custom data model <b>332</b>, data elements <b>326</b> of reserved data model <b>322</b> are removed automatically. The data modeler can therefore not add new bindings from presentation fields <b>318</b> to data elements <b>326</b> in reserved data model <b>322</b>.</p>
<p id="p-0059" num="0058">The data modeler is allowed to rename corresponding data elements <b>327</b> without renaming the presentation fields <b>318</b> bound to corresponding data elements <b>327</b>. The name synchronization applicable to reserved data model <b>322</b> is therefore not applicable to custom data model <b>332</b>. Name synchronization between presentation fields <b>318</b> and data elements <b>326</b> is only enforced between presentation fields <b>318</b> and reserved data model <b>322</b>; name synchronization is not enforced between presentation fields <b>318</b> and the custom data model <b>332</b>.</p>
<p id="p-0060" num="0059">Finally, the data modeler is allowed to change the multiple presentation fields <b>318</b> to refer to the same corresponding data elements <b>327</b> within custom data model <b>332</b>. The data modeler is allowed to add new and possibly unused corresponding data elements <b>327</b> to custom data model <b>332</b>. The data modeler therefore has complete control of the design of custom data model <b>332</b>, within the constraints of the design of the presentation user interface <b>320</b>.</p>
<p id="p-0061" num="0060">Referring now to <figref idref="DRAWINGS">FIG. 4</figref>, a first iteration of a user interface build is shown according to an illustrative embodiment. Presentation user interface <b>410</b> can be presentation user interface <b>320</b> of <figref idref="DRAWINGS">FIG. 3</figref>. Data model <b>412</b> can be data model <b>324</b> of <figref idref="DRAWINGS">FIG. 3</figref>.</p>
<p id="p-0062" num="0061">A graphical designer initially adds presentation field <b>414</b> and presentation field <b>416</b> to presentation user interface <b>410</b>. Presentation field <b>416</b> and presentation user interface <b>410</b> are presentation fields, such as presentation fields <b>318</b> of <figref idref="DRAWINGS">FIG. 3</figref>.</p>
<p id="p-0063" num="0062">Responsive to adding presentation field <b>414</b> to presentation user interface <b>410</b>, data element <b>418</b> is generated within reserved data model <b>422</b>. Similarly, data element <b>420</b> is generated within reserved data model <b>422</b> responsive to adding presentation field <b>416</b> to presentation user interface <b>410</b>. Reserved data model <b>422</b> within the data model <b>324</b> is a functional data model that is generated and synchronized. Data element <b>418</b> is bound to presentation field <b>414</b> and data element <b>420</b> is bound to presentation field <b>416</b>.</p>
<p id="p-0064" num="0063">Thus, at the end of the graphical designer's work on the first iteration shown in <figref idref="DRAWINGS">FIG. 4</figref>, a complete matching reserved data model <b>422</b> has been generated automatically. When the data modeler later views reserved data model <b>422</b>, the data modeler may find that reserved data model <b>422</b> largely meets the needs of the application. The data modeler may then pull reserved data model <b>422</b> into custom data model <b>424</b>, making very few changes to the automatically generated reserved data model <b>422</b>.</p>
<p id="p-0065" num="0064">Otherwise, exact requirements for data model <b>412</b> may have been provided to the data modeler. In this case, the data modeler can create the required custom data model <b>424</b> by changing the presentation field <b>414</b> and presentation field <b>416</b> from their bindings to corresponding data elements in the reserved data model <b>422</b> to be bound to data elements in the custom data model <b>424</b>. As the data modeler relocates the bindings of data elements from the reserved data model <b>422</b> to the data elements of the custom data model <b>424</b>, reserved data model <b>422</b> shrinks, as bindings to the data elements therein are removed.</p>
<p id="p-0066" num="0065">Referring now to <figref idref="DRAWINGS">FIG. 5</figref>, a second iteration of a user interface build is shown according to an illustrative embodiment. Presentation user interface <b>510</b> is presentation user interface <b>410</b> of <figref idref="DRAWINGS">FIG. 4</figref>. Data model <b>512</b> is data model <b>412</b> of <figref idref="DRAWINGS">FIG. 4</figref>.</p>
<p id="p-0067" num="0066">A data modeler removes data elements from within reserved data model <b>522</b>. The data modeler replaces data element, such as data elements <b>418</b> and <b>420</b> of <figref idref="DRAWINGS">FIG. 4</figref>, with corresponding data element <b>519</b> and corresponding data element <b>521</b>. Corresponding data element <b>519</b> and corresponding data element <b>521</b> are located in custom data model <b>524</b>. The data modeler may also provide a more descriptive name for corresponding data element <b>519</b> and corresponding data element <b>521</b>.</p>
<p id="p-0068" num="0067">The original bindings between presentation field <b>414</b> of <figref idref="DRAWINGS">FIG. 4</figref> to data element <b>418</b> of <figref idref="DRAWINGS">FIG. 4</figref>, and from presentation field <b>416</b> <figref idref="DRAWINGS">FIG. 4</figref> to data element <b>420</b> <figref idref="DRAWINGS">FIG. 4</figref> are preserved as those data elements are replaced with corresponding data element <b>519</b> and corresponding data element <b>521</b> respectively. Thus, presentation field <b>514</b> is bound to corresponding data element <b>519</b> in custom data model <b>524</b>. Presentation field <b>516</b> is bound to corresponding data element <b>521</b> in custom data model <b>524</b>.</p>
<p id="p-0069" num="0068">The data modeler removes data element <b>518</b> and data element <b>520</b> from reserved data model <b>522</b> to create the custom data model <b>524</b> desired by the data modeler. The presentation bindings are maintained, so data element <b>518</b> and data element <b>520</b> can only be removed from reserved data model <b>522</b> by replacing their use with bindings to corresponding data element <b>519</b> and corresponding data element <b>521</b> within the custom data model <b>524</b>.</p>
<p id="p-0070" num="0069">Referring now to <figref idref="DRAWINGS">FIG. 6</figref>, a third iteration of a user interface build is shown according to an illustrative embodiment. Presentation user interface <b>610</b> is presentation user interface <b>510</b> of <figref idref="DRAWINGS">FIG. 5</figref>. Data model <b>612</b> is data model <b>512</b> of <figref idref="DRAWINGS">FIG. 5</figref>.</p>
<p id="p-0071" num="0070">In presentation user interface <b>610</b>, the graphical designer removes presentation field <b>516</b> of <figref idref="DRAWINGS">FIG. 5</figref>. The graphical designer adds new presentation field <b>626</b> to presentation user interface <b>610</b>.</p>
<p id="p-0072" num="0071">Responsive to adding presentation field <b>626</b> to presentation user interface <b>610</b>, data element <b>628</b> is generated within reserved data model <b>622</b>. Data element <b>628</b> is then automatically bound to presentation field <b>626</b>.</p>
<p id="p-0073" num="0072">Corresponding data element <b>621</b> is preserved within custom data model <b>624</b>. Because the graphical designer does not have access to custom data model <b>624</b>, data element <b>621</b> remains even though the corresponding data field, presentation field <b>516</b> of <figref idref="DRAWINGS">FIG. 5</figref>, has been removed.</p>
<p id="p-0074" num="0073">Changes to presentation user interface <b>610</b> by the graphical designer do not change custom data model <b>624</b>. When adding a new field, such as presentation field <b>626</b>, a new data model element, data element <b>628</b>, is added to reserved data model <b>622</b>. If the graphical designer chooses to delete a presentation field that is bound to the custom model, the data element bound thereto will also be deleted. Conversely, when the graphical designer deletes a field, such as presentation field <b>516</b> of <figref idref="DRAWINGS">FIG. 5</figref>, that is bound to a data element of the custom model, such as data element <b>521</b> of <figref idref="DRAWINGS">FIG. 5</figref>, the data element of the custom model is not deleted.</p>
<p id="p-0075" num="0074">Similarly, should the graphical designer rename a presentation field bound to a data element in the reserved model, the corresponding data element in the reserved model will also be renamed. However, if the graphical designer renames a presentation field that is bound to a data element in the custom data model, the data element within the custom data model will not be renamed.</p>
<p id="p-0076" num="0075">Referring now to <figref idref="DRAWINGS">FIG. 7</figref>, a fourth iteration of a user interface build is shown according to an illustrative embodiment. Presentation user interface <b>710</b> is presentation user interface <b>610</b> of <figref idref="DRAWINGS">FIG. 6</figref>. Data model <b>712</b> is data model <b>612</b> of <figref idref="DRAWINGS">FIG. 6</figref>.</p>
<p id="p-0077" num="0076">A data modeler has replaced data element <b>628</b> of <figref idref="DRAWINGS">FIG. 6</figref> from within reserved data model <b>722</b> with corresponding data element <b>729</b> within the custom data model <b>724</b>. The data modeler has thus relocated data element <b>628</b> of <figref idref="DRAWINGS">FIG. 6</figref> to custom data model <b>724</b>. The binding created from presentation field <b>726</b> to data element <b>628</b> of <figref idref="DRAWINGS">FIG. 6</figref> has been preserved as data element <b>628</b> of <figref idref="DRAWINGS">FIG. 6</figref> is replaced with corresponding data element <b>729</b>. Thus, presentation field <b>726</b> is bound to corresponding data element <b>729</b> in custom data model <b>724</b>.</p>
<p id="p-0078" num="0077">The data modeler can remove data element <b>628</b> of <figref idref="DRAWINGS">FIG. 6</figref> and from reserved data model <b>722</b> to create the custom data model <b>724</b> desired by the data modeler. The presentation bindings are maintained, so data element <b>628</b> of <figref idref="DRAWINGS">FIG. 6</figref> can only be removed from reserved data model <b>722</b> by replacing their use with bindings to corresponding data element <b>729</b> within custom data model <b>724</b>.</p>
<p id="p-0079" num="0078">Thus, the data modeler can directly modify custom data model <b>724</b>, with the restriction that the binds and references from the presentation fields cannot be broken. The data modeler cannot delete a data element if there are still presentation fields that are bound to that data element. The data modeler can change what data elements that the presentation fields are bound to, but must maintain the binding of the presentation field to a data element.</p>
<p id="p-0080" num="0079">If the binding from a presentation field to a certain data element is changed to refer to the custom model, the element of the reserved model is removed automatically. The data modeler can therefore not add new bindings from the presentation fields to data elements in the reserved model.</p>
<p id="p-0081" num="0080">The data modeler is allowed to rename the data elements without renaming the presentation fields bound to those data elements. The name synchronization applicable to the graphical designer is therefore not applicable to the data modeler. Name synchronization between presentation fields and data elements is only enforced between the presentation fields and the reserved data model; name synchronization is not enforced between the presentation fields and the custom data model.</p>
<p id="p-0082" num="0081">Finally, the data modeler is allowed to change the multiple presentation items to refer to the same custom model element. The data modeler is allowed to add new and possibly unused elements to the custom data model. The data modeler therefore has complete control of the design of the custom data model, within the constraints of the design of the presentation user interface.</p>
<p id="p-0083" num="0082">Referring now to <figref idref="DRAWINGS">FIG. 8</figref>, a flow chart for creating a new presentation field is shown according to an illustrative embodiment. Process <b>800</b> is a software process, executing on a software component, such as user interface builder <b>312</b> of <figref idref="DRAWINGS">FIG. 3</figref>.</p>
<p id="p-0084" num="0083">Process <b>800</b> begins by receiving instructions to create a presentation field (step <b>810</b>). The instructions are computer instructions, or program code, to manipulate the user interface that is being built. The presentation field is a label, field, button, graphics design, or other presentation type item to be placed within the presentation user interface. The presentation field may also include the layout of those items.</p>
<p id="p-0085" num="0084">Responsive to receiving the instructions, process <b>800</b> creates the presentation field within the presentation user interface (step <b>820</b>). Process <b>800</b> performs the instructions, placing or removing appropriate presentation fields within the design and layout of the presentation user interface.</p>
<p id="p-0086" num="0085">Responsive to creating the presentation field, process <b>800</b> creates a corresponding data element within a reserved data model (step <b>830</b>). The data element is generated and synchronized within the reserved data model.</p>
<p id="p-0087" num="0086">Responsive to creating corresponding data element within a reserved data model, process <b>800</b> binds the data elements to the appropriate presentation field within the presentation user interface (step <b>840</b>), with the process terminating thereafter. By binding the data elements to appropriate the presentation fields, the user interface builder provides a reference from the appropriate presentation fields to the data elements. The bind specifies from where the presentation fields retrieves data, and to where the presentation fields should store any data input from the user.</p>
<p id="p-0088" num="0087">Referring now to <figref idref="DRAWINGS">FIG. 9</figref>, a flow chart for manipulating data elements within a data model is shown according to an illustrative embodiment. Process <b>900</b> is a software process, executing on a software component, such as user interface builder <b>312</b> of <figref idref="DRAWINGS">FIG. 3</figref>.</p>
<p id="p-0089" num="0088">Process <b>900</b> begins by receiving instructions <b>330</b> to manipulate a reserved data model (step <b>910</b>), such as reserved data model <b>322</b> of <figref idref="DRAWINGS">FIG. 3</figref>, and data elements therein. By receiving instructions, process <b>900</b> enables the data modeler to build the rest of the data model as desired or required, and to make changes to the data model.</p>
<p id="p-0090" num="0089">Responsive to receiving the instructions, process <b>900</b> relocates the manipulated data element from the reserved data model to a custom data model (step <b>920</b>). As changes are made to the data model, process <b>900</b> removes data elements being acted upon by the data modeler from the reserved data model and places those data elements in a custom data model within the data model. The custom data model is a functional data model containing data elements that have been manipulated by the data modeler.</p>
<p id="p-0091" num="0090">Process <b>900</b> maintains the binding from the data element to the corresponding presentation field in the presentation user interface (step <b>930</b>), with the process terminating thereafter. As the data modeler changes presentations fields to be bound to the custom data model, data elements of the automatically generated reserved data model are removed as part of the synchronization. The generation and synchronization processes of the reserved data model therefore never impact the custom data model. Likewise, the generation and synchronization processes of the reserved data model never impacts the binding of presentation fields to data elements that have been relocated to custom data model.</p>
<p id="p-0092" num="0091">Thus, the illustrated embodiments describe a process for automatically generating a synchronizing a data model and its binding to the applications presentation, while allowing both the graphical designer and the data modeler to work on the application in iterations. The graphical designer and the data modeler are able to work on the application without negatively impacting each other's work. The illustrated embodiments enable a user interface driven data modeling collaboration between the graphical designer and the data modeler.</p>
<p id="p-0093" num="0092">A reserved data model is automatically generated and synchronized. The reserved data model is managed separately from the custom data model generated by the data modeler. The data modeler is not permitted to directly edit the reserved data model. The reserved data model is automatically generated by the data processing system simultaneously with graphical design, to ensure that it is always complete and kept synchronized with the presentation of the user interface.</p>
<p id="p-0094" num="0093">The binding of the presentation to the reserved data model is also automatically generated by the data processing system simultaneously with graphical design. This automatic binding enforces the rule that all presentation items are bound to the data model. The data modeler is able to build the rest of the data model as desired or required, and changes the presentations to be bound to the custom model instead of the automatically generated reserved model. As the data modeler changes the presentations to be bound to the custom model, elements of the automatically generated reserved model are removed as part of the synchronization. The reserved model generation and synchronization processes therefore never impact the custom model or the binding of presentation items to it.</p>
<p id="p-0095" num="0094">Beyond the mere automatic generation of the reserved model, the illustrative embodiments offer advantages over the human-managed approach of the prior art. In addition to keeping track of binding impacts in the data model due to changes by the graphical designer, the process also ensures that a complete working data model is always available. Furthermore, presentation of the user interface is always fully bound to the working data model. The graphical designer can therefore preview and test the application at any time without waiting for updates and completion from the data modeler.</p>
<p id="p-0096" num="0095">Furthermore, implementation by the data modeler is no longer invalidated due to changes in the project by the graphical designer. The data modeler is provided with an automatically generated reserved data model that matches both in terms of the number of elements within the user interface, and the names of the elements within the user interface. This generated reserved model can then be used as the starting point for building the exact model desired by the data modeler.</p>
<p id="p-0097" num="0096">Finally, the data modeler is informed of changes made by the graphical designer. The list of changes is complete and accurate, and is reflected in updates to the data model and binding. Therefore, much of the revisions that the data modeler must implement in response to changes by the graphical designer are performed automatically.</p>
<p id="p-0098" num="0097">The invention can take the form of an entirely hardware embodiment, an entirely software embodiment or an embodiment containing both hardware and software elements. In a preferred embodiment, the invention is implemented in software, which includes, but is not limited to, firmware, resident software, microcode, etc.</p>
<p id="p-0099" num="0098">Furthermore, the invention can take the form of a computer program product accessible from a computer-usable or computer-readable medium providing program code for use by or in connection with a computer or any instruction execution system. For the purposes of this description, a computer-usable or computer readable medium can be any tangible apparatus that can contain, store, communicate, propagate, or transport the program for use by or in connection with the instruction execution system, apparatus, or device.</p>
<p id="p-0100" num="0099">The medium can be an electronic, magnetic, optical, electromagnetic, infrared, or semiconductor system (or apparatus or device) or a propagation medium. Examples of a computer-readable medium include a semiconductor or solid state memory, magnetic tape, a removable computer diskette, a random access memory (RAM), a read-only memory (ROM), a rigid magnetic disk and an optical disk. Current examples of optical disks include compact disk-read only memory (CD-ROM), compact disk-read/write (CD-R/W) and DVD.</p>
<p id="p-0101" num="0100">A data processing system suitable for storing and/or executing program code will include at least one processor coupled directly or indirectly to memory elements through a system bus. The memory elements can include local memory employed during actual execution of the program code, bulk storage, and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution.</p>
<p id="p-0102" num="0101">Input/output or I/O devices (including but not limited to keyboards, displays, pointing devices, etc.) can be coupled to the system either directly or through intervening I/O controllers.</p>
<p id="p-0103" num="0102">Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems, cable modems, and Ethernet cards are just a few of the currently available types of network adapters.</p>
<p id="p-0104" num="0103">The description of the present invention has been presented for purposes of illustration and description, and is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art. The embodiment was chosen and described in order to best explain the principles of the invention, the practical application, and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A computer implemented method for building a data-bound user interface, the data bound user interface comprising a presentation user interface and a reserved data model, the method comprising:
<claim-text>receiving a first instruction associated with a presentation user interface;</claim-text>
<claim-text>responsive to receiving the first instruction, creating a presentation field within the presentation user interface;
<claim-text>performing synchronization of the reserved data model with the presentation user interface by creating a data element within the reserved data model, wherein the reserved data model is a functional data model, within a data model, generated programmatically by the computer in real time;</claim-text>
<claim-text>binding the presentation field to the data element as part of the synchronization of the reserved data model; and</claim-text>
</claim-text>
<claim-text>building the data bound user interface, wherein the data bound user interface includes the presentation field and the data element;</claim-text>
<claim-text>receiving a second instruction;</claim-text>
<claim-text>responsive to receiving the second instruction, relocating the data element from within the reserved data model to within a custom data model, wherein the custom data model is within the data model and is generated non-programmatically and wherein the data element is removed from the reserved data model; and</claim-text>
<claim-text>programmatically maintaining the binding from the presentation field to the data element, wherein the synchronization of the reserved data model with the presentation user interface does not impact the data element relocated to the custom model.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The computer implemented method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:
<claim-text>receiving a third instruction;</claim-text>
<claim-text>responsive to receiving the third instruction, deleting the presentation field within the presentation user interface; and</claim-text>
<claim-text>deleting the data element within the reserved data model.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The computer implemented method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the first instruction is a first instruction from a graphical designer.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The computer implemented method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the second instruction is a second instruction from a data modeler.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The computer implemented method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the presentation field is selected from the group comprising a label to be placed within the presentation user interface, a field to be placed within the presentation user interface, a button to be placed within the presentation user interface, and a graphics design to be placed within the presentation user interface.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The computer implemented method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the steps of creating a data element within a reserved data model and binding the presentation field to the data element are performed automatically in response to receiving the first instruction.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. A computer program product comprising:
<claim-text>a computer readable non-transitory medium having computer usable program code for building a data-bound user interface, the data bound user interface comprising a presentation user interface and a reserved data model, the computer program product comprising:</claim-text>
<claim-text>computer usable program code for receiving a first instruction associated with a presentation user interface;</claim-text>
<claim-text>computer usable program code, responsive to receiving the first instruction, for creating a presentation field within the presentation user interface;
<claim-text>computer usable program code for performing synchronization of the reserved data model with the presentation user interface by creating a data element within the reserved data model, wherein the reserved data model is a functional data model, within a data model, generated programmatically by the computer in real time;</claim-text>
<claim-text>computer usable program code for binding the presentation field to the data element as part of the synchronization of the reserved data model;</claim-text>
</claim-text>
<claim-text>computer usable program code for building the data bound user interface, wherein the data bound user interface includes the presentation field and the data element;</claim-text>
<claim-text>computer usable program code for receiving a second instruction;</claim-text>
<claim-text>computer usable program code, responsive to receiving the second instruction, for relocating the data element from within the reserved data model to within a custom data model, wherein the custom data model is within the data model and generated non-programmatically and wherein the data element is removed from the reserved data model as part of the synchronization of the reserved data model; and</claim-text>
<claim-text>computer usable program code for programmatically maintaining the binding from the presentation field to the data element wherein the synchronization of the reserved data model with the presentation user interface does not impact the data element relocated to the custom model.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The computer program product of <claim-ref idref="CLM-00007">claim 7</claim-ref>, further comprising:
<claim-text>computer usable program code for receiving a second instruction;</claim-text>
<claim-text>computer usable program code, responsive to receiving the second instruction, for deleting the presentation field within the presentation user interface; and</claim-text>
<claim-text>computer usable program code for deleting the data element within the reserved data model.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The computer program product of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein the first instruction is a first instruction from a graphical designer.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The computer program product of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein the second instruction is a second instruction from a data modeler.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The computer program product of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein the presentation field is selected from the group comprising a label to be placed within the presentation user interface, a field to be placed within the presentation user interface, a button to be placed within the presentation user interface, and a graphics design to be placed within the presentation user interface.</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The computer program product of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein the computer usable program code for creating a data element within a reserved data model and the computer usable program code for binding the presentation field to the data element are performed automatically in response to receiving the first instruction.</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. A computer implemented method for building a data-bound user interface, the data bound user interface comprising a presentation user interface and a reserved data model, the method comprising:
<claim-text>providing a presentation user interface and a data model, the data model comprising a reserved data model and a custom data model, wherein the reserved data model is a functional data model, within the data model, generated programmatically by the computer in real time;</claim-text>
<claim-text>allowing a graphical designer access to the presentation user interface to add a presentation field to the presentation user interface, wherein a data element is automatically generated within the reserved data model in response to the graphical designer adding the presentation field, performing synchronization of the reserved data model with the presentation user interface;</claim-text>
<claim-text>binding the presentation field to the data element within the reserved data model to form a bind as part of synchronization of the reserved data model;</claim-text>
<claim-text>allowing a data modeler access to the reserved data model to relocate the data element from the reserved data model to the custom data model wherein the custom data model is within the data model and generated non-programmatically; and</claim-text>
<claim-text>responsive to the data modeler relocating the data element from the reserved data model to the custom data model, programmatically maintaining the bind between the presentation field and the data element relocated to the custom data model as part of the synchronization of the reserved data model, wherein the synchronization of the reserved data model with the presentation user interface does not impact the data element relocated to the custom model;</claim-text>
<claim-text>wherein the graphical designer cannot modify the data element once the data element is relocated to the custom data model, and wherein the data modeler only has access to the reserved data model to relocate the data element to the custom data model.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The computer implemented method of <claim-ref idref="CLM-00013">claim 13</claim-ref> further comprising:
<claim-text>allowing a graphical designer access to the presentation user interface to delete the presentation field from the presentation user interface.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The computer implemented method of <claim-ref idref="CLM-00014">claim 14</claim-ref> further comprising:
<claim-text>responsive to the graphical designer deleting the presentation field, deleting the data element only if the data element is within the reserved data model.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The computer implemented method of <claim-ref idref="CLM-00014">claim 14</claim-ref> further comprising:
<claim-text>responsive to the graphical designer deleting the presentation field, retaining the data element if the data element is within the custom data model.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The computer implemented method of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the presentation field is selected from the group comprising a label to be placed within the presentation user interface, a field to be placed within the presentation user interface, a button to be placed within the presentation user interface, and a graphics design to be placed within the presentation user interface.</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The computer implemented method of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the steps of creating a data element within a reserved data model and binding the presentation field to the data element are performed automatically in response to the graphical designer adding a presentation field to the presentation user interface. </claim-text>
</claim>
</claims>
</us-patent-grant>

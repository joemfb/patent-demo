<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08627203-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08627203</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>12713008</doc-number>
<date>20100225</date>
</document-id>
</application-reference>
<us-application-series-code>12</us-application-series-code>
<us-term-of-grant>
<us-term-extension>297</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>17</main-group>
<subgroup>27</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>715243</main-classification>
<further-classification>715244</further-classification>
<further-classification>715255</further-classification>
</classification-national>
<invention-title id="d2e53">Method and apparatus for capturing, analyzing, and converting scripts</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>5596705</doc-number>
<kind>A</kind>
<name>Reimer et al.</name>
<date>19970100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>6105045</doc-number>
<kind>A</kind>
<name>Kurabayashi et al.</name>
<date>20000800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>715201</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>7849081</doc-number>
<kind>B1</kind>
<name>Chang</name>
<date>20101200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>8090724</doc-number>
<kind>B1</kind>
<name>Welch</name>
<date>20120100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>8209600</doc-number>
<kind>B1</kind>
<name>Koh</name>
<date>20120600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>2002/0099499</doc-number>
<kind>A1</kind>
<name>Takayama et al.</name>
<date>20020700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>2004/0139384</doc-number>
<kind>A1</kind>
<name>Lin</name>
<date>20040700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>715500</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>2007/0154190</doc-number>
<kind>A1</kind>
<name>Gilley et al.</name>
<date>20070700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>2008/0243820</doc-number>
<kind>A1</kind>
<name>Chang</name>
<date>20081000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>2008/0281805</doc-number>
<kind>A1</kind>
<name>Xiaolu et al.</name>
<date>20081100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00011">
<document-id>
<country>WO</country>
<doc-number>WO 03/098370</doc-number>
<kind>A2</kind>
<date>20031100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
</us-citation>
<us-citation>
<nplcit num="00012">
<othercit>Screenplay Formatting; 2003; Scriptologist.com; pp. 1-5.</othercit>
</nplcit>
<category>cited by examiner</category>
</us-citation>
<us-citation>
<nplcit num="00013">
<othercit>Finite State Machine; Mar. 24, 1998; TechTarget.com, p. 1.</othercit>
</nplcit>
<category>cited by examiner</category>
</us-citation>
<us-citation>
<nplcit num="00014">
<othercit>U.S. Appl. No. 11/728,069, filed Mar. 23, 2007, 33 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00015">
<othercit>U.S. Appl. No. 11/946,637, filed Nov. 28, 2007, 46 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00016">
<othercit>U.S. Appl. No. 11/946,671, filed Nov. 28, 2007, 50 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00017">
<othercit>U.S. Appl. No. 12/471,814, filed May 26, 2009, 54 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>20</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>715243</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>715244</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>715255</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>11</number-of-drawing-sheets>
<number-of-figures>10</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20130124979</doc-number>
<kind>A1</kind>
<date>20130516</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Chang</last-name>
<first-name>Walter</first-name>
<address>
<city>San Jose</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Welch</last-name>
<first-name>Michael J.</first-name>
<address>
<city>Los Angeles</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Chang</last-name>
<first-name>Walter</first-name>
<address>
<city>San Jose</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Welch</last-name>
<first-name>Michael J.</first-name>
<address>
<city>Los Angeles</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Wolfe-SBMC</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>Adobe Systems Incorporated</orgname>
<role>02</role>
<address>
<city>San Jose</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Dyer</last-name>
<first-name>Andrew</first-name>
<department>2176</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">Methods and apparatus for capturing, analyzing, and converting documents are provided. Provided in some embodiments is a method that includes obtaining a script document comprising script elements, assessing a layout of the script document, wherein the layout comprises a physical location of the script elements within the script document, determining an identification of one or more of the script elements based at least in part on the physical location of the one or more script elements within the script document, and assessing the one of the script elements using a finite state machine, wherein the finite state machine assesses one or more of the script elements preceding or following the one of the script elements to determine an accuracy of the identification of the one or more of the script elements determined.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="178.05mm" wi="268.05mm" file="US08627203-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="264.58mm" wi="174.24mm" file="US08627203-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="242.99mm" wi="160.02mm" file="US08627203-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="246.97mm" wi="188.04mm" file="US08627203-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="228.35mm" wi="158.75mm" orientation="landscape" file="US08627203-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="253.83mm" wi="182.63mm" file="US08627203-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="267.04mm" wi="179.66mm" orientation="landscape" file="US08627203-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="264.16mm" wi="186.52mm" file="US08627203-20140107-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00008" num="00008">
<img id="EMI-D00008" he="264.16mm" wi="188.55mm" file="US08627203-20140107-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00009" num="00009">
<img id="EMI-D00009" he="267.04mm" wi="181.19mm" file="US08627203-20140107-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00010" num="00010">
<img id="EMI-D00010" he="267.55mm" wi="182.63mm" file="US08627203-20140107-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00011" num="00011">
<img id="EMI-D00011" he="185.08mm" wi="176.70mm" file="US08627203-20140107-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">BACKGROUND</heading>
<heading id="h-0002" level="1">Description of the Related Art</heading>
<p id="p-0002" num="0001">Documents are generally formatted according to some layout pattern, whether the pattern is a simple block format or a more complex multi-column format. In many documents, metadata may be indicated by the document layout pattern. For example, the title of a document is typically located at the beginning of a document, and is typically presented in the center and top of the page. As another example, page number and publisher information is often presented in the center bottom of the page or in the top left or right corner of the page. The layout of a document may thus provide features that are indicate useful metadata information related to elements of the document.</p>
<p id="p-0003" num="0002">As an example of a document format including features indicative of metadata, movie scripts often abide by a script layout format that is recognized as a film industry standard. The standard has evolved over decades in the industry, and has generally become a universal standard script format for writers in the film medium worldwide, from short dramas through feature-length films. Movie scripts typically conform to format requirements according to the evolved standard such as &#x201c;There should be 2&#xd7; returns between Scene Description and Dialogue (and vice versa)&#x201d; and &#x201c;Dialogue should be indented (tabbed but not centered) so that accurate script timings can be made.&#x201d; By using these standard or similar variations of the standard, it is straightforward for a person viewing the document, for example, to identify scene descriptions and dialogues from movie scripts. Although some scripts vary from standard script formatting, they are typically formatted consistent throughout the respective document such that similar elements share certain features with one another.</p>
<p id="p-0004" num="0003">It is often desirable to identify discrete elements of the script, such as scene headings, action elements, character names, parenthetical, transitions, shot elements, and the like. Identification of the discrete elements of a script may enable a user to extract various elements of the script without having to search through the entire document. Unfortunately, identifying each of the elements may require a considerable amount of time and effort, especially where a script document is quire large and there is variation from standard script formatting.</p>
<p id="p-0005" num="0004">Accordingly, it is desirable to provide a technique for automatically identifying and extracting document elements.</p>
<heading id="h-0003" level="1">SUMMARY</heading>
<p id="p-0006" num="0005">Various embodiments of methods and apparatus for identifying and/or extracting elements of documents are described. Provided in some embodiments is a computer-implemented method that includes obtaining a script document comprising script elements, assessing a layout of the script document, wherein the layout comprises a physical location of the script elements within the script document, determining an identification of one or more of the script elements based at least in part on the physical location of the one or more script elements within the script document, and assessing the one of the script elements using a finite state machine, wherein the finite state machine assesses one or more of the script elements preceding or following the one of the script elements to determine an accuracy of the identification of the one or more of the script elements determined.</p>
<p id="p-0007" num="0006">In some embodiments computer-readable storage medium includes program instructions stored thereon that are computer-executable to implement: obtaining a script document comprising script elements, assessing a layout of the script document, wherein the layout comprises a physical location of the script elements within the script document, determining an identification of one or more of the script elements based at least in part on the physical location of the one or more script elements within the script document, and assessing the one of the script elements using a finite state machine, wherein the finite state machine assesses one or more of the script elements preceding or following the one of the script elements to determine an accuracy of the identification of the one or more of the script elements determined.</p>
<p id="p-0008" num="0007">In certain embodiments, a computer-implemented method includes obtaining a document comprising elements, assessing a layout of the document, wherein the layout comprises a physical location of the elements within the document, determining an identification of one or more of the script elements based at least in part on the physical location of the one or more elements within the document, and assessing the one of the elements using a finite state machine, wherein the finite state machine assesses elements preceding or following the one of the elements to determine an accuracy of the identification of the one or more of the elements.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. 1</figref> is a block diagram that illustrates components of and dataflow in a document element identification/extraction method in accordance with one or more embodiments of the present technique.</p>
<p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. 2</figref> is a flowchart that illustrates a document element identification/extraction method in accordance with one or more embodiments of the present technique.</p>
<p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. 3</figref> is an illustration of an exemplary script document in accordance with one or more embodiments of the present technique.</p>
<p id="p-0012" num="0011"><figref idref="DRAWINGS">FIGS. 4A and 4B</figref> are charts that illustrate exemplary outputs of a statistical analysis of a script document in accordance with one or more embodiments of the present technique.</p>
<p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. 5</figref> is a flow diagram illustrating an example embodiment of operating a finite state machine in accordance with one or more embodiments of the present technique.</p>
<p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. 6</figref> is a depiction of an exemplary script document in accordance with one or more embodiments of the present technique.</p>
<p id="p-0015" num="0014"><figref idref="DRAWINGS">FIGS. 7A and 7B</figref> are depictions of exemplary tagged/structured script document output in accordance with one or more embodiments of the present technique.</p>
<p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. 8</figref> is a block diagram that illustrates an example computer system in accordance with one or more embodiments of the present technique.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<p id="p-0017" num="0016">While the invention is described herein by way of example for several embodiments and illustrative drawings, those skilled in the art will recognize that the invention is not limited to the embodiments or drawings described. It should be understood, that the drawings and detailed description thereto are not intended to limit the invention to the particular form disclosed, but on the contrary, the intention is to cover all modifications, equivalents and alternatives falling within the spirit and scope of the present invention. The headings used herein are for organizational purposes only and are not meant to be used to limit the scope of the description. As used throughout this application, the word &#x201c;may&#x201d; is used in a permissive sense (i.e., meaning having the potential to), rather than the mandatory sense (i.e., meaning must). Similarly, the words &#x201c;include&#x201d;, &#x201c;including&#x201d;, and &#x201c;includes&#x201d; mean including, but not limited to. As used throughout this application, the singular forms &#x201c;a&#x201d;, &#x201c;an&#x201d; and &#x201c;the&#x201d; include plural referents unless the content clearly indicates otherwise. Thus, for example, reference to &#x201c;an element&#x201d; includes a combination of two or more elements.</p>
<heading id="h-0005" level="1">DETAILED DESCRIPTION OF EMBODIMENTS</heading>
<p id="p-0018" num="0017">In the following detailed description, numerous specific details are set forth to provide a thorough understanding of claimed subject matter. However, it will be understood by those skilled in the art that claimed subject matter may be practiced without these specific details. In other instances, methods, apparatuses or systems that would be known by one of ordinary skill have not been described in detail so as not to obscure claimed subject matter.</p>
<p id="p-0019" num="0018">Some portions of the detailed description which follow are presented in terms of algorithms or symbolic representations of operations on binary digital signals stored within a memory of a specific apparatus or special purpose computing device or platform. In the context of this particular specification, the term specific apparatus or the like includes a general purpose computer once it is programmed to perform particular functions pursuant to instructions from program software. Algorithmic descriptions or symbolic representations are examples of techniques used by those of ordinary skill in the signal processing or related arts to convey the substance of their work to others skilled in the art. An algorithm is here, and is generally, considered to be a self-consistent sequence of operations or similar signal processing leading to a desired result. In this context, operations or processing involve physical manipulation of physical quantities. Typically, although not necessarily, such quantities may take the form of electrical or magnetic signals capable of being stored, transferred, combined, compared or otherwise manipulated. It has proven convenient at times, principally for reasons of common usage, to refer to such signals as bits, data, values, elements, symbols, characters, terms, numbers, numerals or the like. It should be understood, however, that all of these or similar terms are to be associated with appropriate physical quantities and are merely convenient labels. Unless specifically stated otherwise, as apparent from the following discussion, it is appreciated that throughout this specification discussions utilizing terms such as &#x201c;processing,&#x201d; &#x201c;computing,&#x201d; &#x201c;calculating,&#x201d; &#x201c;determining&#x201d; or the like refer to actions or processes of a specific apparatus, such as a special purpose computer or a similar special purpose electronic computing device. In the context of this specification, therefore, a special purpose computer or a similar special purpose electronic computing device is capable of manipulating or transforming signals, typically represented as physical electronic or magnetic quantities within memories, registers, or other information storage devices, transmission devices, or display devices of the special purpose computer or similar special purpose electronic computing device.</p>
<p id="p-0020" num="0019">Various embodiments of methods and apparatus for capturing, analyzing, and converting documents are provided. In some embodiments, a document includes a script document, such as a movie or speculative script that outlines visual, audio, behavioral, and spoken elements required to tell a story. In certain embodiments, a script document is extracted into a layout-preserved format, such that features such as spacing and indentation can be extracted from the layout-preserved document. In some embodiments, the layout preserved document is provided to a document generator that is capable of assessing/processing the layout-preserved document to produce a structured/tagged document. In some embodiments, the document generator used to process the layout-preserved document implements a combination of statistical analysis, feature matching and finite state machine (FSM) analysis to assess and determine the tags of document elements that are ultimately identified in the structured/tagged document. In certain embodiments, features may be initially identified via statistical analysis and feature matching, and processing by the FSM is used to analyze the sequence of the identified elements to assess/determine/verify element identifiers for each of the lines/elements. In some embodiments, the resulting structured/tagged document may include a sequential listing of the lines of the document in accordance with their order in the original document along with a tag (e.g., &#x201c;TRAN&#x201d;, &#x201c;ACTN&#x201d;, &#x201c;CHAR&#x201d;, &#x201c;DIAG&#x201d;, &#x201c;PARN&#x201d; or the like) identifying a determined element type associated with each line. In certain embodiments, the structured/tagged document may be associated with other documents, such as a time-aligned with corresponding video based on the script such that dialog text within the script is synchronized to the audio dialog portion of the video content.</p>
<p id="p-0021" num="0020">While embodiments are described as being applied to the extraction of metadata from script documents, embodiments may be adapted for use with other document formats including various layouts and features that can be used to identify elements within the document. In addition, while embodiments are described as being applied to the extraction of textual elements from documents, embodiments may be adapted for use in extracting document elements other than textual elements.</p>
<p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. 1</figref> is a block diagram that illustrates components of and dataflow in a document element identification/extraction method <b>100</b> in accordance with one or more embodiments of the present technique. In the illustrated embodiment, a document <b>102</b> (e.g., a script) is provided to a document extractor <b>104</b>. Document extractor <b>104</b> may include a layout-preserved text generator that extracts data, including layout information, from document <b>102</b> and provides a corresponding layout-preserved document <b>106</b>. Layout preserved document <b>106</b> may be provided to a document analyzer <b>108</b> of a document generator <b>107</b>. Document analyzer <b>108</b> may process layout-preserved document <b>106</b> to provide a corresponding parsed document <b>110</b>.</p>
<p id="p-0023" num="0022">In some embodiments, document generator <b>107</b>, or another component, may provide for pre-processing of layout preserved document <b>106</b>. For example, where layout preserved document <b>106</b> includes a certain type of script document (e.g., closed caption script document), document generator <b>107</b> may include a pre-processing module for modifying layout preserved document <b>106</b> (e.g., identifies/filters/extracts certain portions of document <b>106</b>) such that it can be processed using the techniques described herein.</p>
<p id="p-0024" num="0023">In some embodiments, document analyzer <b>108</b> may include one, or both, of a statistical analysis module <b>112</b> and a feature identification module <b>114</b>. In some embodiment, statistical analysis module <b>112</b> and feature identification module <b>114</b> may be separate or integrated modules for performing feature identification. Statistical analysis module <b>108</b> may process layout-preserved document <b>106</b> to build a statistical model of a layout of layout-preserved document <b>106</b>. Feature matching module <b>110</b> may invoke various techniques, such as matching, to assess and determine how to interpret/identify each element contained in layout preserved document <b>106</b>. Document analyzer <b>108</b> may use the information derived from statistical analysis module <b>112</b> and/or feature identification module <b>114</b> to tokenize each line such that each line is associated with an element identifier (e.g., scene heading, action element, character name, parenthetical, transition, shot element, etc.). For example, document analyzer may apply features identified for a particular line of the document via matching by feature matching module <b>114</b> to a similar grouping of lines identified in statistical analysis module <b>112</b>, such that similarly formatted lines share the same element identifier.</p>
<p id="p-0025" num="0024">Document analyzer may provide a parsed document (or parsed information) <b>110</b> that include results of the tokenization, including, for example, a structured document (or set of information) that includes at least a sequential listing of the element identifiers in association with their relative locations in the layout of document <b>102</b>. For example, parsed information <b>110</b> may include a set of information (e.g., a document) listing of each line of document <b>102</b> in the same sequence they were presented in document <b>102</b>, along with a tag/heading for each line. Parsed information <b>110</b> may, then, be forwarded to finite state machine module (FSM) <b>116</b> for further processing. In some embodiments, FSM <b>116</b> includes a model of possible transitions between states. For example, FSM <b>116</b> may indicate only a finite number of possible transitions from a current state to one or more subsequent states, or to the current state from one or more preceding states. In some embodiments, FSM <b>116</b> may include a model of acceptable transitions</p>
<p id="p-0026" num="0025">Thus, FSM <b>116</b> may analyze the sequence of the identified elements in parsed information <b>110</b> to assess/determine/verify element identifiers for each of the lines/elements in parsed document <b>110</b>. In some embodiments, FSM <b>116</b> may assess/determine/verify an element identifier assigned to a particular line/element based on one or more of the element identifiers assigned to lines/elements preceding and/or following the particular line/element being assessed. In other words, FSM <b>116</b> may process the context of a line/element using a state machine to assess whether or not the element identifier of parsed information <b>110</b> appears to be accurate (e.g., correct), or appears to be inaccurate (e.g., incorrect) based on its position relative to other identifier elements. For example, where FSM <b>116</b> provides for a valid/expected transition from a dialog state to a character state (see, for example <figref idref="DRAWINGS">FIG. 5</figref> including a direct transition (<b>18</b>) from dialog state to character state), a &#x201c;dialog element&#x201d; identified immediately after a &#x201c;character name&#x201d; element is likely correct and is verified. However, where FSM <b>116</b> does not provide for a valid/expected transition from a dialog state to a scene state (see, for example <figref idref="DRAWINGS">FIG. 5</figref>, where no direct transition is present between a scene state and a dialog state), a &#x201c;dialog element&#x201d; identified immediately after a &#x201c;scene heading&#x201d; is likely incorrect and may be reassessed. FSM <b>116</b> may repeat assessment for each line/element to determine which elements in parsed information <b>110</b> are accurate. In some embodiments, FSM <b>116</b> may confirm the element identifier assigned in parsed information <b>110</b>, may determine that certain element identifiers might be incorrect/inaccurate and may need to be reassessed, or determine that an element identifier is incorrect/inaccurate and change the identifier. Where FSM <b>116</b> determines that one or more identifiers need to be reassessed, FSM <b>116</b> may forward a set of parsed/revised information <b>120</b> to document analyzer for additional processing. Where FSM <b>116</b> determines that an element identifier is in incorrect/inaccurate, FSM <b>116</b> may assign an accurate element identifier to the respective line/element and/or may forward a set of parsed/revised information <b>120</b> to document analyzer <b>108</b> for additional processing.</p>
<p id="p-0027" num="0026">Cycling through FSM <b>116</b> and document analyzer <b>108</b> may be repeated for one or more iteration until it is determined that each of the assigned element identifiers are correct/accurate. For example, the information may be assessed until the FSM determines that no additional changes to the element identifiers need to be made (e.g., all of the element identifiers appear to be correct). Accordingly, information associated with a structured document that includes at least a sequential listing of the element identifiers in association with their relative locations in the layout of document <b>102</b> may pass through multiple iterations until each of the element identifiers is verified. Once processing of layout preserved document <b>106</b> is complete, a structured/tagged document <b>116</b> may be generated. Structured/tagged document <b>122</b> may include a standard structured format including element identifiers (e.g., tags) for each line/element of document <b>116</b>. In some embodiments, structured/tagged document may include an Extensible Markup Language (XML) format or Extensible Telephony Markup Language (XTML) format, such as *.ASTX format used by certain products produced by ADOBE Systems. As discussed in more detail below with respect to <figref idref="DRAWINGS">FIG. 8</figref>, structured/tagged document <b>122</b> may include a sequential listing of the lines of the document that is the same as their order in document <b>102</b>, along with a tag identifying the determined element type associated with each line. Structured/tagged document <b>122</b> may be stored on a storage medium <b>124</b> (e.g., including the script elements extracted to a script metadata database), provided to a display device <b>126</b> for presentation to a user, and/or provided to one or more other modules <b>128</b> for additional processing. As discussed in more detail below, structured/tagged document <b>122</b> may be associated/processed with other documents, such as a time-aligned with corresponding video based on the script such that dialog text within the script is synchronized to the audio dialog portion of the video content.</p>
<p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. 2</figref> is a flowchart that illustrates a document element identification/extraction method <b>200</b> according to one or more embodiments of the present technique. In the illustrated embodiment, method <b>200</b> generally includes obtaining a document, extracting a layout preserved version of the document, performing a statistical analysis and/or feature matching of features contained within the document, identifying document elements based on the statistical analysis and/or the feature matching, passing the identified document elements through a finite state machine to assess/determine/verify the identified document elements, assessing whether or not document elements are incorrectly identified, and, if it is determined that there are incorrectly identified document elements, re-performing at least a portion of the identification steps, or, if it is determined that there are no (or sufficiently few) incorrectly identified document elements, generating/storing/outputting a structured/tagged document.</p>
<p id="p-0029" num="0028">In some embodiments, method <b>200</b> includes obtaining a document as depicted at block <b>202</b>. Obtaining a document may include receiving a hard copy or an electronic copy of a document <b>102</b>, for instance. Receiving a hard-copy of a document may include receiving one or more physical pages of a document having one or more document elements (e.g., script elements) printed thereon. For example, an older script document (e.g., a legacy script) may be available only in a printed hard copy consisting of a plurality of script pages. In the case of receiving a hard copy of a document, the hard-copy may be transformed into an electronic format that is capable of being stored and processed on a computing device. For example, in some embodiments, obtaining a script document may include scanning, or otherwise processing, one or more pages of the physical document into a electronic format, such as PORTABLE DOCUMENT FORMAT (PDF) (by ADOBE Systems headquartered in San Jose, Calif.) or another image format (e.g., a Joint Photographic Experts Group (JPEG), a Tagged Image File Format (TIFF), a bitmap (BMP), or the like). In some embodiment, obtaining a document may include receiving a document/file in an electronic format, such as a PDF format, a MICROSOFT WORD Document format (by MICROSOFT Corporation, headquartered in Redmond, Wash.), an HTML document format, image formats, or the like. As described in more detail below, electronic documents may be suitable for extracting a layout-preserved document <b>106</b> that can be further processed by system <b>100</b>.</p>
<p id="p-0030" num="0029">In some embodiments, document <b>102</b> may include a script document, such as a movie script (e.g., a Hollywood script), a speculative script, a shooting script (e.g., a Hollywood shooting script), a closed caption (SRT) video transcript or the like. A movie script may include a document that outlines all of the visual, audio, behavioral, and spoken elements required to tell a story. A speculative (&#x201c;spec&#x201d;) script or screenplay may include a preliminary script used in both film and television industries. A spec script for film generally includes an original screenplay and may be a unique plot idea, an adaptation of a book, or a sequel to an existing movie. A &#x201c;television&#x201d; spec script is typically written for an existing show using characters and storylines that have already been established. A &#x201c;pilot&#x201d; spec script typically includes an original idea for a new show. A television spec script is typically 20-30 pages for a half hour of programming, 40-60 pages for a full hour of programming, or 80-120 pages for two hours of programming. It will be appreciated that once a spec script is purchased, it may undergo a series of complete rewrites or edits before it is put into production. Once in &#x201c;production&#x201d;, the script may evolve into a &#x201c;Shooting Script&#x201d; or &#x201c;Production Script&#x201d; having a more complex format. Numerous scripts exist and new scripts are continually created and sold.</p>
<p id="p-0031" num="0030">Since film production is a highly collaborative process, the director, cast, editors, and production crew may use various forms of the script to interpret the underlying story during the production process. Further, since numerous individuals are involved in the making of a film, it is generally desirable that a script conform to specific standards and conventions that all involved parties understand (e.g., it will use a specific format w.r.t. layout, margins, notation, and other production conventions). Thus, a script document is intended to structure all of the script elements used in a screenplay into a consistent layout.</p>
<p id="p-0032" num="0031">Scripts generally include script elements embedded in the script document. Script elements often include a title, author name(s), scene headings, action elements, character names, parentheticals, transitions, shot elements, and the like. Titles and author name(s) are typically listed at the beginning of the document. The title and author name(s) are often centered at the head/start of the document with the author name(s) located below the title, and with one or more blank lines between the two.</p>
<p id="p-0033" num="0032"><figref idref="DRAWINGS">FIG. 3</figref> illustrates an exemplary script document <b>102</b><i>a </i>in accordance with one or more embodiments of the present technique. Exemplary script document <b>102</b><i>a </i>depicts an exemplary layout of the above described script elements. For example, exemplary script document <b>102</b><i>a </i>includes a representation of a title element <b>300</b>, an author name element <b>302</b>, a transition element <b>304</b>, a scene heading element <b>306</b>, action elements <b>308</b><i>a</i>, <b>308</b><i>b </i>and <b>308</b><i>c</i>, character name elements <b>310</b><i>a</i>, <b>310</b><i>b</i>, <b>310</b><i>c</i>, <b>310</b><i>d</i>, and <b>310</b><i>e</i>, dialog elements <b>312</b><i>a</i>, <b>312</b><i>b</i>, <b>312</b><i>c</i>, <b>312</b><i>d</i>, and <b>312</b><i>e</i>, parenthetical elements <b>314</b><i>a </i>and <b>314</b><i>b</i>, and shot element <b>316</b>. Another exemplary script document, including actual text of a script, is discussed and described in more detail with respect to <figref idref="DRAWINGS">FIG. 6A</figref>.</p>
<p id="p-0034" num="0033">A scene heading (also referred to as a &#x201c;slugline&#x201d;) includes a description of where the scene physically occurs. For example, a scene heading may indicate that the scene takes place indoors (e.g., INT.) or outdoors (e.g., EXT.), or possibly both indoors and outdoors (e.g., INT./EXT.) Typically, a location name follows the description of where the scene physically occurs. For example, &#x201c;INT./EXT.&#x201d; may be immediately followed by a more detailed description of where the scene occurs. (e.g., INT. KITCHEN, INT. LIVING ROOM, EXT. BASEBALL STADIUM, INT. AIRPLANE, etc.). The scene heading may also include the time of day (e.g., NIGHT, DAY, DAWN, EVENING, etc.). This information embedded in the script helps to &#x201c;set the scene.&#x201d; Scene headings are usually left aligned with a margin located about 1.5&#x2033; from the left edge of the document. The scene heading is usually provided entirely in uppercase text and includes a blank line before and after the scene heading. The scene type is typically designated as internal (INT.) or external (EXT.), and includes a period following the INT or EXT designation. A hyphen is typically used between other elements of the scene heading. For example, a complete scene heading may read, &#x201c;INT. FERRY TERMINAL BAR-DAY&#x201d; or &#x201c;EXT. MAROON MOVIE STUDIO-DAY&#x201d;.</p>
<p id="p-0035" num="0034">An action element (also referred to as a description element) typically describes the setting of the scene and introduces the characters providing a setup for a scene. Action elements also describe what will actually happen during the scene. Action elements are usually left aligned, at a left margin with about 1.5&#x2033; from the left edge of the document (e.g., aligned with the scene heading), and have text extending to a right margin located about 1.0&#x2033; from the right edge of the document. Action elements typically use the full width of the line/text on the page and thus, the text is typically word wrapped (e.g., text is continued on a new line when a line is full, such that each line fits in the viewable window, allowing text to be read from top to bottom without any horizontal scrolling) to simplify editing and rewrites. Text of action elements is usually single-spaced and provided in a mixed case (e.g., a paragraph case including capitalization the first letter of each sentence and the first letter of proper nouns, and providing other letters in lower case). Further, where a speaking character is introduced for the first time, the text of the character's name is typically provided in all uppercase text within the action element.</p>
<p id="p-0036" num="0035">A character name element may include an actual name (e.g., MS. SUTTER), description (e.g., BIG MAN) or occupation (e.g., BARTENDER) of a character. Sequence numbers are typically used to differentiate similar characters (e.g., COP #1 and COP #2). Character names are usually indented to a location about 3.5&#x2033; from the left edge of the document. Character names are typically formatted in all uppercase letters. A character name is almost always inserted prior to a character speaking (e.g., just before dialog element), to indicate that the character's dialogue follows.</p>
<p id="p-0037" num="0036">A dialog element indicates what a character says when anyone on screen or off screen speaks. This may include conversation between characters, when a character speaks out loud to themselves, or when a character is off-screen and only their voice is heard (e.g., in a narration). Dialog elements may also include voice-overs or narration when the speaker is on screen but is not actively speaking on screen. Dialog elements are usually indented to a location about 2.5&#x2033; from the left edge of the document and are usually left aligned. Generally, a line of dialogue is between about thirty and thirty-five spaces/characters in length. The right margin of a dialog element is generally flexible, and is usually located at about 2.0&#x2033; to 2.5&#x2033; from the right edge of the document. Dialog elements are usually single-spaced and provided in a mixed case.</p>
<p id="p-0038" num="0037">A parenthetical typically includes a remark that indicates an attitude in dialog delivery, and/or specifies a verbal direction or action direction for the actor who is speaking the part of a character. Parentheticals are typically short, concise and descriptive statements located under the characters name. Parentheticals are usually left indented to a location about 3.0&#x2033; form the left edge of the document and include a right margin located at about 3.5&#x2033; from the right edge of the document. Parentheticals are not necessarily centered under the character name, although they may be generally aligned under the character's name.</p>
<p id="p-0039" num="0038">A transition typically includes a notation indicating an editing transition within the telling of a story. For example, &#x201c;DISSOLVE TO:&#x201d; means the action seems to blur and refocus into another scene, as generally used to denote a passage of time. A transition is usually indented to a location about 6.5&#x2033; from the left edge of the document, and usually includes a right margin located at about 1.0&#x2033; from the right edge of the document. Transitions are typically formatted in all uppercase. Transitions almost always follow an action element and precede a scene heading. Common transitions include: &#x201c;DISSOLVE TO:&#x201d;, &#x201c;CUT TO:&#x201d;, &#x201c;SMASH CUT:&#x201d;, &#x201c;QUICK CUT:&#x201d;, &#x201c;FADE IN:&#x201d;, &#x201c;FADE OUT:&#x201d;, and &#x201c;FADE TO:&#x201d;.</p>
<p id="p-0040" num="0039">A shot element typically indicates what the camera sees. For example, a shot element that recites &#x201c;TRACKING SHOT&#x201d; generally indicates the camera should follow a character as he walks in a scene. &#x201c;WIDE SHOT&#x201d; generally indicates that every character appears in the scene. Shots are often formatted similar to scene headings, flush with a left margin located at about 1.5&#x2033; from the left edge of the document, in all uppercase, with a blank line before and after the shot element. A SHOT tells the reader the focal point within a scene has changed. Example of shot elements include: &#x201c;ANGLE ON . . . &#x201d;, &#x201c;PAN TO . . . &#x201d;, &#x201c;EXTREME CLOSE UP . . . &#x201d;, &#x201c;FRANKIE'S POV . . . &#x201d;, and &#x201c;REVERSE ANGLE . . . &#x201d;.</p>
<p id="p-0041" num="0040">In some embodiments, method <b>200</b> includes extracting a layout-preserved document, as depicted at block <b>202</b>. Extracting a layout-preserved document may include processing document <b>102</b> to generate layout preserved document <b>106</b>. In some embodiments, a document extractor may implement an optical character recognition (OCR) routine, or a similar technique to extract data from the document such that the extracted data can be provided in a format suitable for use in a document analyzer. For example, OCR may be performed by document extractor <b>104</b> where an image (e.g., PDF, JPEG, TIFF, or BMP) of document <b>102</b> is provided that does not include character information capable of being processed by document analyzer <b>108</b>. Moreover, a document extractor may implement one or more text extraction filters to obtain layout-preserved reading order text from document. For example, document extractor <b>104</b> may implement one or more routines to preserve information relating to the indentation, spacing, capitalization, and other layout features of document <b>102</b>. Such a technique may ensure that formatting of the document is preserved for processing by document analyzer <b>108</b> (e.g., statistical module <b>112</b> and feature identification module <b>114</b>) which may rely on the layout (e.g., location and format) of portions of document <b>102</b> to appropriately identify various elements of document <b>102</b>. Embodiments of methods and apparatus for generating layout-preserved text output from PORTABLE DOCUMENT FORMAT (PDF) input may include techniques such as those described in U.S. patent application Ser. No. 12/471,814 entitled &#x201c;Method and Apparatus for Generating Layout-Preserved Text&#x201d; filed May 26, 2009 and having inventors Eunyee Koh and Walter Chang, the content of which is incorporated by reference herein in its entirety as if fully set forth herein. Other document to text extraction techniques may be used, such as XPDF, an open source PDF viewer. During extraction noise artifacts may be removed and rotation or alignment errors may be accounted for. Method <b>200</b> may include forwarding layout preserved document <b>106</b> to document analyzer <b>108</b> of document generator <b>107</b> for processing to generate structured/tagged document <b>122</b>.</p>
<p id="p-0042" num="0041">In some embodiments, layout preserved document <b>106</b> may be preprocessed to ensure it is provided in an appropriate format for processing by document generator <b>107</b>. In certain embodiments, preprocessing may be provided after or in parallel with extracting layout-preserved document (block <b>204</b>), and prior to performing statistical analysis of the document (block <b>206</b>). In some embodiments, document generator <b>107</b> may provide for pre-processing of layout preserved document <b>106</b>. For example, where layout preserved document <b>106</b> includes a type of script document (e.g., closed caption script document) not immediately suitable for subsequent processing, document generator <b>107</b> may include a pre-processing module that pre-processes the layout preserved document <b>106</b> (e.g., filters/extracts certain portions of document <b>106</b>) such that the pre-processed document can be subsequently processed using the document generation techniques described herein. In some embodiments, pre-processing may be employed to format an existing script document (e.g., a closed caption script document, Hollywood shooting scripts, or the like) to a format that can be processed by document generator <b>107</b> (e.g., to a format similar to that of a traditional movie script).</p>
<p id="p-0043" num="0042">In some embodiments, preprocessing may include extracting character/speaker markers in source text of the document. For example, in a closed captioned script document, indentifying the names of persons speaking relative to the substantive text/symbols representing the spoken phrases that traditionally follow the speaker's name when displayed in closed captioning. In some embodiments, preprocessing may include extracting text runs of dialog or narrative that follow the speaker markers. For example, extracting the substantive text/symbols representing the spoken phrases that traditionally follow the speaker's name. In some embodiments, preprocessing may include filtering out annotations or markups within the text run of the respective dialog sections. For example, comments or descriptions typically included as bold or italicization tags may be removed or extracted. In some embodiments, preprocessing may include reformatting the extracted speaker identification and text run data into canonical spec. script format. In certain embodiments, the reformatted/pre-processed document may be similar to a spec. script, but may be missing certain elements, such as scene headings, scene and/or action descriptors, parentheticals, camera transition information, or the like. In some embodiments, the pre-processed document may, then, be processed in accordance with the techniques described herein. For example, the pre-processed document may be subsequently processed. For example, after pre-processing, the document may be subject to statistical analysis, feature matching, feature identification, processing by a FSM, tagging and the like.</p>
<p id="p-0044" num="0043">In some embodiments, method <b>200</b> may include performing a statistical analysis, as depicted at block <b>206</b>, and/or performing feature matching, as depicted at block <b>208</b>. In the illustrated embodiment, statistical analysis is performed prior to performing feature matching. Such an embodiment may be of particular use where the results of statistical analysis aid in feature matching. For example, feature identification may rely on formatting statistics (e.g., indentation grouping of document elements) to match an element identification with a particular element identifier. However, other embodiments may include statistical analysis performed after or in parallel with feature matching. In some embodiments, statistical analysis or feature matching may not be performed.</p>
<p id="p-0045" num="0044">Performing statistical analysis (block <b>206</b>) may include building a statistical model of the document. For example, performing statistical analysis may include building a statistical model of text and line elements of layout-preserved document <b>106</b> based on the locations of margins/indentations, spacing, and the like. Such a statistical model may be used to determine grouping of lines associated with one or more elements based on the margins/indentations of each line. Statistical analysis may include generating an element offset distribution histogram by recording the first-left-most element of each line (e.g., the indentation location of the first character of each line). Each line may be identified with a most likely element identifier based on the lines indentation relative to other lines in the element offset distribution histogram. Due to screenwriter tendencies to stray from standard script formats (e.g., intentionally or unintentionally by inadvertently inserting extra spaces/tabs) there may be some variability in what a certain characteristic (e.g., indentation) means. However, within each script, screen writers tend to be self-consistent and conform to their own standards within the particular script document. For example, a screen writer who indents an action element by an additional 0.5&#x2033; is likely to do so throughout the entire document such that the lines containing action elements may be grouped together in the element offset distribution histogram, thereby allowing the element identifier to be associated with the respective grouping. In some embodiments, grouping of lines having similar format may be identified by the statistical analysis, and subsequent feature matching and analysis by the FSM may be used to assign appropriate element identifiers to the grouping and/or sub-groups within the grouping. Based on experience reviewing numerous movie scripts, it may be expected that five groupings of lines may emerge from a script document based on indentation. These groupings may include (1) scene element, shot element, action element; (2) dialog; (3) parenthetical; (4) character; and (5) transition. Accordingly, a line grouped with group (1) is likely to be one of a scene element, a shot element, an action element, and additional processing (e.g., feature matching and/of FSM analysis) may be used to determine which of the three element types the line is associated with. A line grouped with groups (2), (3), (4), or (5) is likely a dialog, parenthetical, character or transition element, respectively, and, thus, each respective line (or grouping of lines) may be assigned to a dialog element type without much or any additional processing (e.g., additional processing may be used to verify the element type).</p>
<p id="p-0046" num="0045">In some embodiments, a score may be assigned to each line based on the confidence of which each line represents. In the case of a line associated with group associated with a larger number of elements (e.g., group 1 associated with three element types), a moderate confidence score may be assigned to the associated elements, although the confidence score may be higher than the elements not associated with the grouping (e.g., scene=20%, shot=20%, action=20%, dialog=5%, parenthetical=5%, character=5%, transition=5%). In the case of a line associated with group associated with lesser numbers of elements (e.g., group 2 associated with a single element), a high confidence score may be assigned to the associated element, with lower scores for elements not associated with the grouping (e.g., scene=3%, shot=3%, action=3%, dialog=80%, parenthetical=3%, character=3%, transition=3%). A score may also be adjusted based on characteristics relative to other grouping. For example, scoring may be higher for grouping having similar indentation features, and lower for grouping having indentation features that are not similar. It will be appreciated that the confidence scores may be expressed in any variety of forms that are indicative of a level of confidence. In certain embodiments, the confidence level scores are interpreted relative to one another, and in the case of percentages, do not necessarily have to add up to 100%.</p>
<p id="p-0047" num="0046">To find the emerging points (1, 2, 3, 4, 5) for any given input script, a local line count maxima for each indention count for each position within the script file for each line of text may be determined using the following:</p>
<p id="p-0048" num="0047">
<maths id="MATH-US-00001" num="00001">
<math overflow="scroll">
<mtable>
  <mtr>
    <mtd>
      <mrow>
        <mrow>
          <mi>MarginCount</mi>
          <mo>&#x2061;</mo>
          <mrow>
            <mo>(</mo>
            <mrow>
              <mi>Position</mi>
              <mo>&#x2061;</mo>
              <mrow>
                <mo>(</mo>
                <mi>i</mi>
                <mo>)</mo>
              </mrow>
            </mrow>
            <mo>)</mo>
          </mrow>
        </mrow>
        <mo>=</mo>
        <mrow>
          <munderover>
            <mo>&#x2211;</mo>
            <mrow>
              <mi>j</mi>
              <mo>=</mo>
              <mn>1</mn>
            </mrow>
            <mi>N</mi>
          </munderover>
          <mo>&#x2062;</mo>
          <mrow>
            <mi>MarginScore</mi>
            <mo>&#x2061;</mo>
            <mrow>
              <mo>(</mo>
              <mrow>
                <mi>i</mi>
                <mo>,</mo>
                <mi>j</mi>
              </mrow>
              <mo>)</mo>
            </mrow>
          </mrow>
        </mrow>
      </mrow>
    </mtd>
    <mtd>
      <mrow>
        <mo>(</mo>
        <mn>1</mn>
        <mo>)</mo>
      </mrow>
    </mtd>
  </mtr>
</mtable>
</math>
</maths>
<br/>
where: N=number of spec. script lines; Position(i)=the i'th column position within a line; and MarginScore(i,j)=1, if Left-Most-Margin(Line[j]) i; else 0
</p>
<p id="p-0049" num="0048">Using equation (1), if a screenwriter even conforms loosely to script formatting guidelines, a script element offset distribution can be detected. For the full distribution, equation (1) must be computed for each of the 1 . . . N script file lines.</p>
<p id="p-0050" num="0049">Further, all values which fall outside of the cluster offset maximums may be rounded to their nearest cluster maximum. In the case where values are equidistant to cluster maximums (which is possible but highly unlikely), round up. Even if this rounding is incorrect in the rare case it occurs, the FSM processing may provide the final determination/verification as to the script element type.</p>
<p id="p-0051" num="0050"><figref idref="DRAWINGS">FIG. 4A</figref> illustrates an exemplary histogram chart <b>400</b> in accordance with one or more embodiments of the preset technique. Histogram chart <b>400</b> includes a layout margin offset position histogram for a script using the above described technique. Histogram <b>400</b> includes graphical representations <b>402</b> of the number of lines having a given margin position (e.g., spaces/distances from the left edge of the document or the left margin). For example &#x201c;2062&#x201d; lines are identified having a margin position of &#x201c;5&#x201d; and a number of tick marks extend to the right, forming a bar graph, indicative of the number of lines having that margin position relative to the number of lines at other margin positions. In certain embodiments, the chart may be scaled accordingly to accommodate the amount of data. For example, in some embodiments, the &#x201c;X-axis&#x201d; of histogram chart <b>400</b> may include a logarithmic (log base-10) scale to accommodate large count values (e.g., number of lines) for respective features (e.g., respective margin positions).</p>
<p id="p-0052" num="0051">In the illustrated embodiment, likely element identifiers <b>404</b> are listed in association with the margin position they are most likely associated with. For example, the label &#x201c;(SCN, SHOT, ACTION)&#x201d; is provided proximate the portion of the histogram indicative of the &#x201c;2062&#x201d; lines having a margin position of &#x201c;5&#x201d;. In the illustrated embodiment, additional statistical information provided includes the number of lines (&#x201c;nLines&#x201d;), the breakdown of the number of scene types (e.g., EXT=29, INT=36, INT/EXT=0), and the number of various elements (e.g., ActionRefs=1811 . . . ). <figref idref="DRAWINGS">FIG. 4B</figref> illustrates an exemplary chart <b>410</b> including additional information that may be provided as a result of the statistical analysis. <figref idref="DRAWINGS">FIG. 4B</figref> includes identifications of the number and breakdown of scene type and other elements types, as well as warnings relating to various elements. For example, a warning is posted for one of the character names, stating that there is mixed case (e.g., where all upper case was expected based on typical character name formatting). Such a warning may be forwarded to subsequent processing in the form of an explicit request to verify the element, and/or a reduction in the confidence score associated with the document element that provokes the warning. Similar warnings may be provided where layout is indicative of an element type, however, the actual text conflicts with the indicated element type.</p>
<p id="p-0053" num="0052">In the illustrated embodiment, histogram <b>400</b> indicates the strongest offset clusters formed around margin positions of five, fifteen, twenty-two, thirty-one and forty-six. Weaker offsets occur around margin positions at four, six, sixteen, eighteen, nineteen, twenty-one, twenty-three, twenty-four, twenty-six, twenty-seven, thirty-two, thirty-nine, forty, forty-seven and forty-eight. The weaker offsets may be grouped with the strongest offsets based on the respective margin position of each of the weaker offsets to the margin position of the strongest offsets. For example, offsets at four and six may be grouped with the offset at five (e.g., grouping of margin positions 4, 5, 6), offsets at sixteen and eighteen may be grouped with the offset at fifteen (e.g., grouping of margin positions 15, 16, 18), offsets at nineteen, twenty-one, twenty-three, twenty-four, and twenty-six may be grouped with the offset at twenty-two (e.g., grouping of margin positions 19, 21, 22, 23, 24, 26), offsets at twenty-seven and thirty-two, may be grouped with the offset at thirty-one (e.g., grouping of margin positions 27, 31, 32), and offsets at thirty-nine, forty, forty-seven and forty-eight may be grouped with the offset at forty-six (e.g., grouping of margin positions 39, 40, 46, 47, 48). Such a technique may be used to provide a preliminary assessment of element identifiers to lines of the script document. The element identifiers from the preliminary assessment may be used as an input/starting point for subsequent processing and the extraction of all valid script element sequences. For example, the element identifiers may be combined with or used as a basis for feature identification of block <b>210</b>.</p>
<p id="p-0054" num="0053">In some embodiments, performing feature matching (block <b>208</b>) includes comparing portions of the document with typical characteristics associated with particular document element types, and assigning a document element type to the respective portion of the document having characteristics/features similar to the known characteristics. For example, feature matching may include matching known characteristics of particular document element types to characteristics found in one or more lines of the document, and assigning the matching document element type to the respective one or more lines of the document.</p>
<p id="p-0055" num="0054">In some embodiments, feature matching includes matching a word or phrase to a word/phrase/symbol found in a line of the document. For example, where feature identification module <b>114</b> locates the term &#x201c;INT&#x201d; in a script document, feature identification module may assign a scene heading element identifier/tag to the line including the term &#x201c;INT&#x201d;. In some embodiments, words/phrases/symbols may be stored in a predetermined look-up table (LUT). For example, a LUT for script documents may include a plurality of words/phrases/symbols commonly used in scripts. In some embodiments, matching may include pattern matching one or more words/phrases/symbols and/or a particular sequence of words/phrases/symbols. For example, where feature identification module <b>114</b> locates the term &#x201c;INT&#x201d; in combination with a period following the term (&#x201c;INT.&#x201d;) in a script document, feature matching module <b>114</b> may assign a scene heading element identifier/tag to the line including the phrase &#x201c;INT.&#x201d;. In some embodiments, a parenthetical may be identified by matching the parenthesis located around the text. In some embodiments, feature matching may include identifying a feature based on a format of the text. For example, a short word including all uppercase letters may be matched with a character name element type/identifier. In some embodiments, feature identification may assign an element identifier to all or less than all of the lines of a document. For example, in some embodiments, lines may not be assigned an element identifier if no match is found in the line. This may occur where the line does not include a word/phrase/symbol stored in a LUT.</p>
<p id="p-0056" num="0055">In some embodiments, a score may be associated with assigned identifiers. Higher scores may be assigned to matches that include a greater number of elements, as it may indicate a higher probability that the assigned identifier is correct. For example, finding only the terms &#x201c;INT&#x201d; may be assigned a confidence score 90%, whereas the matching of a phrase &#x201c;INT.&#x201d; (including the period) may be assigned a confidence score of 98%.</p>
<p id="p-0057" num="0056">In some embodiments, method <b>200</b> may include performing feature identification, as depicted at block <b>210</b>. Feature identification may include document analyzer assigning an element identifier to some, substantially all, or all of the lines of a document. In some embodiments, feature identification assigns an element identifier based on the results from one or both of the statistical analysis (block <b>206</b>) and feature matching (block <b>208</b>). For example, feature identification may include identifying which lines have been assigned an element identifier by feature matching module <b>114</b>, identifying groupings of lines associated with one another by statistical analysis module <b>112</b>, and may assign the element identifiers assigned to a particular line by matching module <b>114</b> to each of the other lines in the group associated with the particular line as identified by statistical analysis module <b>112</b>. In some embodiments, where a conflict exists between two or more previously assigned element identifier for a particular line or grouping of lines, feature identification may include determining and assigning the most likely element identifier to a line or a group of lines. For example, where statistical analysis indicates that a line includes a dialog element with a confidence score of 10%, but the matching module indicates that a line includes an action element with a score of 90%, feature identification may assign a scene heading to the line and/or an associated grouping of line. The assignment of element identifiers to each line may be referred to as &#x201c;tokenizing&#x201d; the line. Accordingly, the combination of statistical analysis, feature matching, and/or element identification may be referred to as &#x201c;tokenizing&#x201d; the document.</p>
<p id="p-0058" num="0057">In some embodiments, lines and their associated element identifiers determined during feature identification are assembled into an initial set of structured/tagged information (e.g., parsed information <b>110</b>) that includes an element identifier assigned to some, substantially all, or all of the lines of the document. Parsed information <b>110</b> may be passed to a FSM module (e.g., FMS <b>116</b>) for further processing.</p>
<p id="p-0059" num="0058">In some embodiments, method <b>200</b> may include passing identified document elements through a FSM, as depicted at block <b>212</b>. For example, parsed information <b>110</b> may be passed to FSM <b>116</b>, and FSM <b>116</b> may analyze the sequence of the identified elements in parsed information <b>110</b> to assess/determine/verify element identifiers assigned to the lines/elements by the tokenization. In some embodiments, FSM <b>116</b> includes a model of expected transitions between elements (e.g., states) of a document. FSM <b>116</b>, thus, may reflect and expected flow in a script document that includes transitions from one script element to the next.</p>
<p id="p-0060" num="0059"><figref idref="DRAWINGS">FIG. 5</figref> is a flow diagram <b>500</b> illustrating an embodiment of operation a FSM (e.g., FSM <b>116</b>) in accordance with one or more embodiments of the present technique. In the illustrated embodiment, flow diagram <b>500</b> depicts operation of an FSM for a script document, although a FSM may include any variety of flow information based on the expected flow of the document to be processed. Each circle indicates an element states (e.g., START, HOME, TRANS . . . ). Each of the states corresponds to a script element. The START state is an initial entry point into the FSM and the END state is the final element captures (typically the element &#x201c;THE END&#x201d;). Arrows from one state to another indicate a transition and represent the progression to one or more of the next elements expected to be captured. FSM defines the allowable sequence of script elements that are encountered in a typical script document.</p>
<p id="p-0061" num="0060">Table I illustrates an element transition table that provides a listing of the illustrated transitions along with a description of the expected characteristics of the transition:</p>
<p id="p-0062" num="0061">
<tables id="TABLE-US-00001" num="00001">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="1" colwidth="42pt" align="center"/>
<colspec colname="2" colwidth="175pt" align="left"/>
<thead>
<row>
<entry namest="1" nameend="2" rowsep="1">TABLE I</entry>
</row>
<row>
<entry namest="1" nameend="2" align="center" rowsep="1"/>
</row>
<row>
<entry>Transition #</entry>
<entry>State/Comment</entry>
</row>
<row>
<entry namest="1" nameend="2" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry>&#x2002;(1)</entry>
<entry>Attribution and preamble to HOME STATE</entry>
</row>
<row>
<entry>&#x2002;(2)</entry>
<entry>Optional to 1st TRANSITION STATE</entry>
</row>
<row>
<entry>&#x2002;(3)</entry>
<entry>Expect 1st SCENE STATE</entry>
</row>
<row>
<entry>&#x2002;(4)</entry>
<entry>Go to 1st SCENE STATE</entry>
</row>
<row>
<entry>&#x2002;(5)</entry>
<entry>Optional SHOT STATE before Action or Char.</entry>
</row>
<row>
<entry>&#x2002;(6)</entry>
<entry>Transition to ACTION STATE with Scene setup</entry>
</row>
<row>
<entry>&#x2002;(7)</entry>
<entry>Zero or more SHOTs for each Scene</entry>
</row>
<row>
<entry>&#x2002;(8)</entry>
<entry>Zero or more ACTIONs for each Scene</entry>
</row>
<row>
<entry>&#x2002;(9)</entry>
<entry>Zero or more SHOT STATEs may follow an ACTION</entry>
</row>
<row>
<entry/>
<entry>STATE</entry>
</row>
<row>
<entry>(10)</entry>
<entry>SHOTs may be interspersed between Actions</entry>
</row>
<row>
<entry>(11)</entry>
<entry>SCENEs may end after Action element</entry>
</row>
<row>
<entry>(12)</entry>
<entry>Action to CHARACTER STATE</entry>
</row>
<row>
<entry>(13)</entry>
<entry>Scene to CHARACTER STATE (No Action State)</entry>
</row>
<row>
<entry>(14)</entry>
<entry>Shot to CHARACTER STATE</entry>
</row>
<row>
<entry>(15)</entry>
<entry>Optional Char. PARENTHETICAL STATE</entry>
</row>
<row>
<entry>(16)</entry>
<entry>Optional Paren. State to DIALOG STATE</entry>
</row>
<row>
<entry>(17)</entry>
<entry>Char. To DIALOG STATE</entry>
</row>
<row>
<entry>(18)</entry>
<entry>Zero or more CHARACTER-PAREN-DIALOG</entry>
</row>
<row>
<entry/>
<entry>consecutive sequences</entry>
</row>
<row>
<entry>(19)</entry>
<entry>Zero or more Action and Shot States may be occur between</entry>
</row>
<row>
<entry/>
<entry>CHARACTER STATEs</entry>
</row>
<row>
<entry>(20)</entry>
<entry>DIALOG STATE can transition to new SCENE STATE or</entry>
</row>
<row>
<entry/>
<entry>new TRANSITION STATE</entry>
</row>
<row>
<entry>(21)</entry>
<entry>Final Transition before END STATE</entry>
</row>
<row>
<entry>(22)</entry>
<entry>Transition from HOME STATE to END STATE (w.o.</entry>
</row>
<row>
<entry/>
<entry>Transition)</entry>
</row>
<row>
<entry namest="1" nameend="2" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0063" num="0062">In some embodiments, method <b>200</b> includes determining whether or not incorrectly identified document elements remain, as depicted at block <b>216</b>. In some embodiments, FSM <b>116</b> may assess/determine/verify an element identifier assigned to a particular line/element based the state machine expected flow (e.g., diagram <b>500</b>) and one or more of the element identifiers assigned to lines/elements preceding and/or following the particular line/element. In other words, FSM <b>116</b> may process the context of a line/element using a state machine to assess whether or not the element identifier of parsed document <b>110</b> is correct, or appears to be incorrect based on its position relative to other identifier elements. For example, a &#x201c;DIALOG&#x201d; element immediately after a &#x201c;CHARACTER&#x201d; element is likely correct and is verified, whereas a &#x201c;DIALOG&#x201d; element immediately after a &#x201c;SCENE&#x201d; heading is likely incorrect and may be flagged to be reassessed. FSM <b>116</b> may implement assessment for each line/element to determine which elements in parsed document <b>110</b> are accurate. In some embodiments, FSM <b>116</b> may confirm the element identifier assigned in parsed document <b>110</b>, may determine that certain element identifiers might be incorrect and may need to be reassessed, or determine that an element identifier is incorrect/inaccurate and change/reassign the element identifier unilaterally (e.g., where there is only one option for the element type).</p>
<p id="p-0064" num="0063">In some embodiments, if it is determined that an (or at least a sufficient number of) incorrectly identified document elements remain, some, substantially all, or all of the identified elements may be returned upstream processing to perform additional processing of the features, as indicated by the arrow extending from block <b>214</b> to block <b>210</b>. For example, where FSM <b>116</b> determines that one or more identifiers need to be reassessed, FSM <b>116</b> may forward parsed/revised information <b>120</b> to document analyzer for additional processing. Where FSM <b>116</b> determines that an element identifier is in incorrect/inaccurate, FSM <b>116</b> may assign an accurate element identifier to the respective line/element and/or may forward parsed/revised information <b>120</b> to document analyzer <b>108</b> for additional processing. In some embodiments, the elements identifiers may be returned for additional statistical analysis and/or feature matching. For example, where statistical analysis is static (e.g., does not change based on subsequent processing), parsed revised document <b>120</b> may be returned only to feature matching module <b>114</b> of document analyzer <b>108</b>, such that feature matching and/or feature identification are performed. In such an embodiment, method <b>200</b> may include an arrow extending from block <b>214</b> to block <b>208</b>. Cycling through FSM <b>116</b> and Document Analyzer <b>108</b> may be repeated for one or more iterations and/or until it is determined that each (or at least a sufficient number) of the assigned element identifiers is accurate/correct. Accordingly, a structured document that includes at least a sequential listing of the element identifiers in association with their relative locations in the layout of document <b>102</b> may pass through multiple iterations until each of the element identifiers is accurate/correct/verified.</p>
<p id="p-0065" num="0064">In some embodiments, method <b>200</b> includes providing (e.g., generating, storing, displaying) structured/tagged document <b>216</b>, as depicted at block <b>216</b>. For example, once processing of layout preserved document <b>106</b> by document generator <b>107</b> is complete, a structured/tagged document <b>122</b> may be generated. Structured/tagged document <b>122</b> may include a sequential listing of the lines of the document in accordance with their order in document <b>102</b> along with a tag (e.g., tags&#x2014;&#x201c;TRAN&#x201d;, &#x201c;SCEN&#x201d;, &#x201c;ACTN&#x201d;, &#x201c;CHAR&#x201d;, &#x201c;DIAG&#x201d;, &#x201c;PARN&#x201d; or the like) identifying a determined element type associated with some, substantially all, or all of each of the lines or groupings of the lines. In some embodiments, structured/tagged document may include an Extensible Markup Language (XML) format. As discussed in more detail below with respect to <figref idref="DRAWINGS">FIG. 8</figref>, structured/tagged document <b>122</b> may include a sequential listing of the lines of the document in accordance with their order in document <b>102</b> along with a tag identifying a determined element type associated with some, substantially all, or all of each of the lines. Structured/tagged document <b>122</b> may be stored on a storage medium <b>124</b>. For example, structured/tagged document <b>122</b> may be provided to a script metadata database. In some embodiments, structured/tagged document <b>122</b> may be provided to a display device <b>126</b> for presentation to a user. For example, a visual representation of structured/tagged document <b>122</b> may be displayed on a graphical display (e.g., a monitor) of a computer system. In some embodiments, structured/tagged document <b>122</b> may be provided to one or more other modules <b>128</b> for additional processing. For example, structured/tagged document <b>122</b> may be processed such that the metadata contained in structured/tagged document <b>122</b> (e.g., the element identifiers) can be matched/associated with portions of other documents and files. In some embodiments, metadata of structured/tagged document <b>122</b> may be extracted such that element identifiers are time-aligned with corresponding video based on the script such that dialog text within the script is synchronized to the audio dialog portion of the video content. In some embodiments, time alignment may be accomplished via software, such as Premiere Pro by ADOBE Systems.</p>
<p id="p-0066" num="0065">FIGS. <b>6</b> and <b>7</b>A-<b>7</b>B illustrate portions of an exemplary script document and corresponding portions of structure/tagged documents that may be generated via processing of the exemplary script document in accordance with the techniques described herein. <figref idref="DRAWINGS">FIG. 6</figref> illustrates an exemplary script document <b>102</b><i>b </i>in accordance with one or more embodiments of the present technique. Exemplary script document <b>102</b><i>b </i>depicts an exemplary layout of the above described script elements. For example, exemplary script document <b>102</b><i>b </i>includes a transition element <b>304</b>, a scene heading element <b>306</b>, action elements <b>308</b><i>a</i>-<b>308</b><i>e</i>, character name elements <b>310</b><i>a</i>-<b>310</b><i>h</i>, and dialog elements <b>312</b><i>a</i>-<b>312</b><i>i. </i></p>
<p id="p-0067" num="0066"><figref idref="DRAWINGS">FIG. 7A</figref> illustrates at least a portion of an exemplary structured/tagged document information <b>122</b><i>a </i>in accordance with one or more embodiments of the present technique. Exemplary script document information <b>122</b><i>a </i>may be indicative of a structured tagged document provided in response processing of exemplary/source script document <b>102</b><i>b </i>of <figref idref="DRAWINGS">FIG. 6</figref> in accordance with techniques described with regard to system <b>100</b> and method <b>200</b>. Exemplary structured tagged document information <b>122</b><i>a </i>includes a sequential listing of lines of exemplary script <b>102</b><i>b</i>. The lines of tagged/structured document information <b>122</b><i>a </i>area arranged in the same order as the lines were presented in the exemplary script document <b>102</b><i>b</i>. Each line includes a line number identifier <b>600</b><i>a</i>. Line number <b>600</b><i>a </i>may correspond to the associated line position in the source script document <b>102</b><i>b</i>. Each line includes an element identifier (e.g., tag) <b>602</b><i>a</i>. Tags <b>602</b><i>a </i>may correspond to the element identifier assigned to the respective line during processing. Each line also includes a listing of text <b>604</b><i>a </i>provided in brackets. Listing of text <b>604</b><i>a </i>may include the text of the corresponding line of the source script document <b>102</b><i>b</i>. For example, action element <b>308</b><i>a </i>of <figref idref="DRAWINGS">FIG. 6</figref> is represented in <figref idref="DRAWINGS">FIG. 7A</figref> by line numbers &#x201c;00012&#x201d; and &#x201c;00013&#x201d; associated with &#x201c;ACTN&#x201d; tags (e.g., action element identifier), and the corresponding bracketed text &#x201c;JUSTIN SUTTER, 18, lies sideways and comatose in bed at well&#x201d; and &#x201c;past ten in the morning.&#x201d; In the illustrated embodiment, each line of text of exemplary script document <b>102</b><i>b </i>of <figref idref="DRAWINGS">FIG. 6</figref> is broken into their original line arrangement (e.g., the text of lines 12 and 13 of script document <b>102</b><i>b </i>of <figref idref="DRAWINGS">FIG. 6</figref> are represented by separate lines, [00012] and [00013], of information <b>122</b><i>a </i>in <figref idref="DRAWINGS">FIG. 7A</figref>). Information <b>122</b><i>a </i>also includes a header <b>606</b><i>a</i>. Header <b>606</b><i>a </i>may include additional information, such as the extracted title, as well as other information regarding processing of the script document. A corresponding structured/tagged document <b>122</b> may include tagged/structured document information <b>122</b><i>a </i>of <figref idref="DRAWINGS">FIG. 7A</figref> and/or <b>122</b><i>b </i>of <figref idref="DRAWINGS">FIG. 7B</figref>. Where the length of the source script requires, a second page of similar information may continue with additional tagged lines arranged in accordance with the subsequent lines of a source document. In some embodiments, structured/tagged document may include an Extensible Markup Language (XML) format, such as *.ASTX format used by certain products produced by ADOBE Systems.</p>
<p id="p-0068" num="0067"><figref idref="DRAWINGS">FIG. 7B</figref> illustrates at least a portion of an exemplary structured/tagged document information <b>122</b><i>b </i>provided in an Extensible Markup Language (XML) format in accordance with one or more embodiments of the present technique. Exemplary script document information <b>122</b><i>b </i>may be indicative of a structured tagged document provided in response processing of exemplary/source script document <b>102</b><i>b </i>of <figref idref="DRAWINGS">FIG. 6</figref> in accordance with techniques described with regard to system <b>100</b> and method <b>200</b>. Exemplary structured tagged document <b>122</b><i>b </i>includes a sequential listing of script elements of exemplary script <b>102</b><i>b </i>of <figref idref="DRAWINGS">FIG. 6</figref>. The identified elements of tagged/structured document <b>122</b><i>b </i>area arranged in the same order as the elements were presented in the exemplary script document <b>102</b><i>b </i>of <figref idref="DRAWINGS">FIG. 6</figref>. Each line includes a numerical identifier <b>600</b><i>b</i>. Numerical identifier <b>600</b><i>b </i>may correspond to the associated position of the respective element in the source script document <b>102</b><i>b </i>of <figref idref="DRAWINGS">FIG. 6</figref>. For example, in the illustrated embodiment, items &#x201c;1:9&#x201d; and &#x201c;1:10&#x201d; are associated with the respective action element. Each element includes an element identifier (tag) <b>602</b><i>b</i>. Tags <b>602</b><i>b </i>may correspond to the element identifier assigned to the respective element during processing. Each element also includes a listing of text <b>604</b><i>b </i>associated with each element. Listing of text <b>604</b><i>b </i>may include the text of the corresponding line of the source script document <b>102</b><i>b</i>. For example, tag <b>602</b><i>b </i>includes an &#x201c;Action&#x201d; tag associated with the numerical identifier &#x201c;1:9&#x201d; and the associated text (&#x201c;JUSTIN SUTTER, 18, lies sideways and comatose in bed at well past ten in the morning&#x201d;) for the action element follows to the right of numerical identifier &#x201c;1:10&#x201d;. In the illustrated embodiment, several lines of text of exemplary script document <b>102</b><i>b </i>may be combined into element descriptors that are not necessarily broken into their original line arrangement (e.g., the text of lines 12 and 13 of script document <b>102</b><i>b </i>are represented in a single line of information <b>122</b><i>b</i>). Information <b>122</b><i>b </i>also includes a header <b>606</b><i>b</i>. Header <b>606</b><i>b </i>may include additional information, such as the extracted title, as well as other information regarding processing of the script document. A corresponding structured/tagged document <b>122</b> may include tagged/structured document information <b>122</b><i>b. </i></p>
<p id="p-0069" num="0068">In some embodiments, processing may be performed in parallel on one or more documents. For example, where multiple processors are implemented, at least a portion of the processing for one or more documents may be performed simultaneously on two or more processors. In some embodiments, a single complete a source script document may initially be processed (e.g., at document analyzer <b>108</b>) to determine indentation offsets for various script elements. Subsequent to the initial processing, the script document may be divided into smaller segments that are processed separately (e.g., in parallel). Before separate (e.g., parallel) processing is done, the source script document may be intelligently segmented into N parts (e.g., substantially equal parts), where N is the number of processors available for processing. Intelligent segmenting may require that logical script elements are not broken between segments and that character/dialog elements are preserved (e.g., that a segment does not start or stop in the middle of the dialog element). A simple heuristic may be used to segment the script using scene heading boundaries, for example. Once segmented, each segment may be submitted separately for additional processing (e.g., feature matching, FSM processing, etc.) and can be merged together to provide a structured/tagged document output while preserving the original line numbering.</p>
<p id="p-0070" num="0069">In some embodiments, documents being processed in parallel may share certain information. For example, two or more processing running in parallel may share a look up table (LUT) or generated metadata. For example, if processing several scripts from a single television series at once, a shared lookup table of character names may be used for identifying and tagging respective character name elements within the documents.</p>
<p id="h-0006" num="0000">Exemplary Computer System</p>
<p id="p-0071" num="0070">Various components of embodiments of a document element identification/extraction technique as described herein may be executed on one or more computer systems, which may interact with various other devices. One such computer system is illustrated by <figref idref="DRAWINGS">FIG. 8</figref>. In the illustrated embodiment, computer system <b>700</b> includes one or more processors <b>710</b> coupled to a system memory <b>720</b> via an input/output (I/O) interface <b>730</b>. Computer system <b>700</b> further includes a network interface <b>740</b> coupled to I/O interface <b>730</b>, and one or more input/output devices <b>750</b>, such as cursor control device <b>760</b>, keyboard <b>770</b>, audio device <b>790</b>, and display(s) <b>780</b>. In some embodiments, it is contemplated that embodiments may be implemented using a single instance of computer system <b>700</b>, while in other embodiments multiple such systems, or multiple nodes making up computer system <b>700</b>, may be configured to host different portions or instances of embodiments. For example, in one embodiment some elements may be implemented via one or more nodes of computer system <b>700</b> that are distinct from those nodes implementing other elements.</p>
<p id="p-0072" num="0071">In various embodiments, computer system <b>700</b> may be a uniprocessor system including one processor <b>710</b>, or a multiprocessor system including several processors <b>710</b> (e.g., two, four, eight, or another suitable number). Processors <b>710</b> may be any suitable processor capable of executing instructions. For example, in various embodiments, processors <b>710</b> may be general-purpose or embedded processors implementing any of a variety of instruction set architectures (ISAs), such as the x86, PowerPC, SPARC, or MIPS ISAs, or any other suitable ISA. In multiprocessor systems, each of processors <b>710</b> may commonly, but not necessarily, implement the same ISA.</p>
<p id="p-0073" num="0072">In some embodiments, at least one processor <b>710</b> may be a graphics processing unit. A graphics processing unit or GPU may be considered a dedicated graphics-rendering device for a personal computer, workstation, game console or other computer system. Modern GPUs may be very efficient at manipulating and displaying computer graphics, and their highly parallel structure may make them more effective than typical CPUs for a range of complex graphical algorithms. For example, a graphics processor may implement a number of graphics primitive operations in a way that makes executing them much faster than drawing directly to the screen with a host central processing unit (CPU). In various embodiments, the methods disclosed herein for layout-preserved text generation may be implemented by program instructions configured for execution on one of, or parallel execution on two or more of, such GPUs. The GPU(s) may implement one or more application programmer interfaces (APIs) that permit programmers to invoke the functionality of the GPU(s). Suitable GPUs may be commercially available from vendors such as NVIDIA Corporation, ATI Technologies, and others.</p>
<p id="p-0074" num="0073">System memory <b>720</b> may be configured to store program instructions and/or data accessible by processor <b>710</b>. In various embodiments, system memory <b>720</b> may be implemented using any suitable memory technology, such as static random access memory (SRAM), synchronous dynamic RAM (SDRAM), nonvolatile/Flash-type memory, or any other type of memory. In the illustrated embodiment, program instructions and data implementing desired functions, such as those described above for a layout-preserved text generation method, are shown stored within system memory <b>720</b> as program instructions <b>725</b> and data storage <b>735</b>, respectively. In other embodiments, program instructions and/or data may be received, sent or stored upon different types of computer-accessible media or on similar media separate from system memory <b>720</b> or computer system <b>700</b>. Generally speaking, a computer-accessible medium may include storage media or memory media such as magnetic or optical media, e.g., disk or CD/DVD-ROM coupled to computer system <b>700</b> via I/O interface <b>730</b>. Program instructions and data stored via a computer-accessible medium may be transmitted by transmission media or signals such as electrical, electromagnetic, or digital signals, which may be conveyed via a communication medium such as a network and/or a wireless link, such as may be implemented via network interface <b>740</b>.</p>
<p id="p-0075" num="0074">In one embodiment, I/O interface <b>730</b> may be configured to coordinate I/O traffic between processor <b>710</b>, system memory <b>720</b>, and any peripheral devices in the device, including network interface <b>740</b> or other peripheral interfaces, such as input/output devices <b>750</b>. In some embodiments, I/O interface <b>730</b> may perform any necessary protocol, timing or other data transformations to convert data signals from one component (e.g., system memory <b>720</b>) into a format suitable for use by another component (e.g., processor <b>710</b>). In some embodiments, I/O interface <b>730</b> may include support for devices attached through various types of peripheral buses, such as a variant of the Peripheral Component Interconnect (PCI) bus standard or the Universal Serial Bus (USB) standard, for example. In some embodiments, the function of I/O interface <b>730</b> may be split into two or more separate components. In addition, in some embodiments some or all of the functionality of I/O interface <b>730</b>, such as an interface to system memory <b>720</b>, may be incorporated directly into processor <b>710</b>.</p>
<p id="p-0076" num="0075">Network interface <b>740</b> may be configured to allow data to be exchanged between computer system <b>700</b> and other devices attached to a network, such as other computer systems, or between nodes of computer system <b>700</b>. In various embodiments, network interface <b>740</b> may support communication via wired or wireless general data networks, such as any suitable type of Ethernet network, for example; via telecommunications/telephony networks such as analog voice networks or digital fiber communications networks; via storage area networks such as Fibre Channel SANs, or via any other suitable type of network and/or protocol.</p>
<p id="p-0077" num="0076">Input/output devices <b>750</b> may, in some embodiments, include one or more display terminals, keyboards, keypads, touchpads, scanning devices, voice or optical recognition devices, or any other devices suitable for entering or retrieving data by one or more computer system <b>700</b>. Multiple input/output devices <b>750</b> may be present in computer system <b>700</b> or may be distributed on various nodes of computer system <b>700</b>. In some embodiments, similar input/output devices may be separate from computer system <b>700</b> and may interact with one or more nodes of computer system <b>700</b> through a wired or wireless connection, such as over network interface <b>740</b>.</p>
<p id="p-0078" num="0077">As shown in <figref idref="DRAWINGS">FIG. 8</figref>, memory <b>720</b> may include program instructions <b>725</b>, configured to implement embodiments of a layout-preserved text generation method as described herein, and data storage <b>735</b>, comprising various data accessible by program instructions <b>725</b>. In one embodiment, program instructions <b>725</b> may include software elements of a layout-preserved text generation method illustrated in the above Figures. Data storage <b>735</b> may include data that may be used in embodiments, for example input PDF documents or output layout-preserved text documents. In other embodiments, other or different software elements and/or data may be included.</p>
<p id="p-0079" num="0078">Those skilled in the art will appreciate that computer system <b>700</b> is merely illustrative and is not intended to limit the scope of a layout-preserved text generation method as described herein. In particular, the computer system and devices may include any combination of hardware or software that can perform the indicated functions, including computers, network devices, internet appliances, PDAs, wireless phones, pagers, etc. Computer system <b>700</b> may also be connected to other devices that are not illustrated, or instead may operate as a stand-alone system. In addition, the functionality provided by the illustrated components may in some embodiments be combined in fewer components or distributed in additional components. Similarly, in some embodiments, the functionality of some of the illustrated components may not be provided and/or other additional functionality may be available.</p>
<p id="p-0080" num="0079">Those skilled in the art will also appreciate that, while various items are illustrated as being stored in memory or on storage while being used, these items or portions of them may be transferred between memory and other storage devices for purposes of memory management and data integrity. Alternatively, in other embodiments some or all of the software components may execute in memory on another device and communicate with the illustrated computer system via inter-computer communication. Some or all of the system components or data structures may also be stored (e.g., as instructions or structured data) on a computer-accessible medium or a portable article to be read by an appropriate drive, various examples of which are described above. In some embodiments, instructions stored on a computer-accessible medium separate from computer system <b>700</b> may be transmitted to computer system <b>700</b> via transmission media or signals such as electrical, electromagnetic, or digital signals, conveyed via a communication medium such as a network and/or a wireless link. Various embodiments may further include receiving, sending or storing instructions and/or data implemented in accordance with the foregoing description upon a computer-accessible medium. Accordingly, the present invention may be practiced with other computer system configurations.</p>
<p id="p-0081" num="0080">Various embodiments may further include receiving, sending or storing instructions and/or data implemented in accordance with the foregoing description upon a computer-accessible medium. Generally speaking, a computer-accessible medium may include storage media or memory media such as magnetic or optical media, e.g., disk or DVD/CD-ROM, volatile or non-volatile media such as RAM (e.g. SDRAM, DDR, RDRAM, SRAM, etc.), ROM, etc., as well as transmission media or signals such as electrical, electromagnetic, or digital signals, conveyed via a communication medium such as network and/or a wireless link.</p>
<p id="p-0082" num="0081">Various methods as illustrated in the Figures and described herein represent examples of embodiments of methods. The methods may be implemented in software, hardware, or a combination thereof. The order of method may be changed, and various elements may be added, reordered, combined, omitted, modified, etc.</p>
<p id="p-0083" num="0082">Various modifications and changes may be to the above technique made as would be obvious to a person skilled in the art having the benefit of this disclosure. For example, although several embodiments are discussed with regard to script documents, the techniques described herein may be applied to any variety of documents including elements identifiable by one or more of the techniques described herein. It is intended that the invention embrace all such modifications and changes and, accordingly, the above description to be regarded in an illustrative rather than a restrictive sense.</p>
<p id="p-0084" num="0083">ADOBE and ADOBE PDF are either registered trademarks or trademarks of ADOBE Systems Incorporated in the United States and other countries.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-math idrefs="MATH-US-00001" nb-file="US08627203-20140107-M00001.NB">
<img id="EMI-M00001" he="9.14mm" wi="76.20mm" file="US08627203-20140107-M00001.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A computer-implemented method, comprising:
<claim-text>obtaining a script document comprising script elements;</claim-text>
<claim-text>assessing a layout of the script document, the layout comprising a physical location of the script elements within the script document;</claim-text>
<claim-text>determining a preliminary identification of a plurality of the script elements based at least in part on the physical location of the script elements within the script document, the preliminary identification indicating for each respective script element a type of script element from among a plurality of different types of script elements; and</claim-text>
<claim-text>assessing the plurality of the script elements using a finite state machine to determine an accuracy of the preliminary identification, the finite state machine comprising a predefined model having a predefined plurality of states each representing a different script element identifier for a different one of the plurality of different types of script elements, and the predefined model being configured to specify a predefined plurality of allowed transitions between the states such that the model defines which of the plurality of different types of script elements are allowed to immediately precede each particular type of script element and which of the plurality of different types of script elements are allowed to immediately follow each particular type of script element in the script document, the plurality of the script elements being assessed by at least:
<claim-text>applying the finite state machine to a sequence of the plurality of script elements of the script document to determine whether the sequence of the plurality of script elements follows the allowed transitions defined in the finite state machine; and</claim-text>
<claim-text>for one or more of the plurality of the script elements determined to not follow the allowed transitions defined in the finite state machine, indicating that the preliminary identification of the script element is incorrect or changing the preliminary identification of the script element.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the script elements comprise one or more of a title, a scene heading, an action element, a character name, a dialog element, a parenthetical, a transition, and a shot element.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein said assessing a layout of the script document comprises performing a statistical analysis of the layout of the script document, and wherein determining a preliminary identification of the plurality of script elements comprises using results of the statistical analysis to identify one or more of the script elements based on statistical groupings of the one or more script elements according to relative physical locations of the one or more script elements within the script document.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method of <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein said performing a statistical analysis comprises generating a histogram indicative of the physical locations of the one or more script elements relative to other portions of the script document, wherein the histogram comprises counts of elements in the script document at a plurality of respective physical locations in the script document.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method of <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein the statistical analysis comprises an indication of an indentation of each respective script element, and wherein determining a preliminary identification of the plurality of the script elements comprises grouping the script elements based on the indentation of the script elements from a margin of the script document.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method of <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein said using the results of the statistical analysis to identify the one or more of the script elements comprises grouping one or more script elements having similar physical locations within the script document.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein said determining a preliminary identification of the plurality of the script elements comprises matching one or more features of the script elements to one or more predetermined features, wherein each predetermined feature is indicative of a particular one of the plurality of different types of script elements.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The method of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein said matching comprises matching one or more words of the script elements to a predetermined set of words that are each indicative of a particular one of the plurality of different types of script elements.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The method of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein said matching comprises matching capitalization of one or more words of the script elements to a predetermined capitalization that is indicative of a particular one of the plurality of different types of script elements.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The method of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein said matching comprises matching one or more characters or symbols of the script elements to a predetermined set of characters or symbols that are each indicative of a particular one of the plurality of different types of script elements.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The method of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein said matching comprises matching one or more sequences of words, characters, or symbols of the script elements to a predetermined set of sequences of words, characters, or symbols, wherein each sequence is indicative of a particular one of the plurality of different types of script elements.</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein said determining a preliminary identification of the plurality of the script elements comprises:
<claim-text>scoring each of a plurality of script element identifiers for a respective script element using a plurality of identification techniques, wherein the plurality of identification techniques comprises:
<claim-text>a statistical model of physical positions of script elements within the script document, wherein the statistical model indicates script element identifiers based on relative physical positions of script elements within the script document; and</claim-text>
<claim-text>feature matching of one or more features of the respective script element to known script element features for each of the plurality of script element identifiers;</claim-text>
</claim-text>
<claim-text>wherein said scoring comprises generating a separate score for each identification technique; and</claim-text>
<claim-text>in response to a conflict between the plurality of identification techniques as to a correct script element identifier for the respective script element based on said scoring, assigning the script element identifier from one of the plurality of identification techniques having a highest score as the preliminary identification for the respective script element.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:
<claim-text>determining an identification for each of the plurality of the script elements; and</claim-text>
<claim-text>generating a structured script document comprising each of the plurality of the script elements in association with a respective tag, wherein each respective tag comprises the respective determined identification.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, in response to determining that a preliminary identification of one or more of the script elements is incorrect according to the finite state machine, then for a script element having the incorrect identification and one or more other script elements immediately surrounding the script element having the incorrect identification, repeating said determining a preliminary identification of the element and said assessing the element using a finite state machine.</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. A non-transitory computer-readable medium comprising program instructions stored thereon, the program instructions being computer-executable to perform operations comprising:
<claim-text>obtaining a script document comprising script elements;</claim-text>
<claim-text>assessing a layout of the script document, the layout comprising a physical location of the script elements within the script document;</claim-text>
<claim-text>determining a preliminary identification of a plurality of the script elements based at least in part on the physical location of the script elements within the script document, the preliminary identification indicating for each respective script element a type of script element from among a plurality of different types of script elements; and</claim-text>
<claim-text>assessing the plurality of the script elements using a finite state machine to determine an accuracy of the preliminary identification, the finite state machine comprising a predefined model having a predefined plurality of states that each represent a different script element identifier for a different one of the plurality of different types of script elements, and the model configured to specify a predefined plurality of allowed transitions between the states such that the model defines which of the plurality of different types of script elements are allowed to immediately precede each particular type of script element and which of the plurality of different types of script elements are allowed to immediately follow each particular type of script element in a script document, the plurality of the script elements being assessed by at least:
<claim-text>applying the finite state machine to a sequence of the script elements of the script document to determine whether the sequence of script elements follows the allowed transitions defined in the finite state machine; and</claim-text>
<claim-text>for one or more of the plurality of the script elements determined to not follow the allowed transitions defined in the finite state machine, indicating that the preliminary identification of the script element is incorrect or changing the preliminary identification of the script element.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The non-transitory computer-readable medium of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein said assessing a layout of the script document comprises performing a statistical analysis of the layout of the script document, and wherein determining a preliminary identification of the plurality of the script elements comprises using results of the statistical analysis to identify one or more of the script elements based on statistical groupings of the one or more script elements according to relative physical locations of the one or more script elements within the script document.</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The non-transitory computer-readable medium of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein said determining a preliminary identification of the plurality of the script elements comprises matching one or more features of the script elements to one or more predetermined features, wherein each predetermined feature is indicative of a particular one of the plurality of different types of script elements.</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The non-transitory computer-readable medium of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the operations further comprise:
<claim-text>determining an identification for each of the plurality of the script elements; and</claim-text>
<claim-text>generating a structured script document comprising each of the plurality of the script elements in association with a respective tag, wherein each respective tag comprises the respective determined identification.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. A computing device, comprising:
<claim-text>one or more processors; and</claim-text>
<claim-text>memory storing instructions that, responsive to execution by the one or more processors, cause the one or more processors to perform operations comprising:
<claim-text>obtaining a script document comprising script elements;</claim-text>
<claim-text>assessing a layout of the script document, the layout comprising a physical location of the script elements within the script document;</claim-text>
<claim-text>determining a preliminary identification of a plurality of the script elements based at least in part on the physical location of the script elements within the script document, the preliminary identification indicating for each respective script element a type of script element from among a plurality of different types of script elements; and</claim-text>
<claim-text>assessing the plurality of the script elements using a finite state machine to determine an accuracy of the preliminary identification, the finite state machine comprising a predefined model having a predefined plurality of states that each represent a different script element identifier for a different one of the plurality of different types of script elements, and the model being configured to specify a predefined plurality of allowed transitions between the states such that the model defines which of the plurality of different types of script elements are allowed to immediately precede each particular type of script element and which of the plurality of different types of script elements are allowed to immediately follow each particular type of script element in the script document, the plurality of the script elements being assessed by at least:
<claim-text>applying the finite state machine to a sequence of the preliminarily identified script elements of the script document to determine whether the sequence of preliminarily identified script elements follows the allowed transitions defined in the finite state machine; and</claim-text>
<claim-text>for one or more of the plurality of the script elements determined to not follow the allowed transitions defined in the finite state machine, indicating that the preliminary identification of the script element is incorrect or changing the preliminary identification of the script element.</claim-text>
</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. The computing device of <claim-ref idref="CLM-00019">claim 19</claim-ref>, wherein the operations further comprise:
<claim-text>determining an identification for each of the plurality of the script elements; and</claim-text>
<claim-text>generating a structured document comprising each of the plurality of the script elements in association with a respective tag, wherein each respective tag comprises the respective determined identification.</claim-text>
</claim-text>
</claim>
</claims>
</us-patent-grant>

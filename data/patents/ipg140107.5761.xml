<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08626866-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08626866</doc-number>
<kind>B1</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>13206705</doc-number>
<date>20110810</date>
</document-id>
</application-reference>
<us-application-series-code>13</us-application-series-code>
<us-term-of-grant>
<disclaimer>
<text>This patent is subject to a terminal disclaimer.</text>
</disclaimer>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>15</main-group>
<subgroup>167</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>709216</main-classification>
<further-classification>709203</further-classification>
<further-classification>709204</further-classification>
<further-classification>709214</further-classification>
<further-classification>709217</further-classification>
<further-classification>709218</further-classification>
<further-classification>711118</further-classification>
<further-classification>711119</further-classification>
<further-classification>711120</further-classification>
<further-classification>711130</further-classification>
<further-classification>711138</further-classification>
<further-classification>711148</further-classification>
</classification-national>
<invention-title id="d2e51">System and method for caching network file systems</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>4156907</doc-number>
<kind>A</kind>
<name>Rawlings et al.</name>
<date>19790500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>4399503</doc-number>
<kind>A</kind>
<name>Hawley</name>
<date>19830800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>4408273</doc-number>
<kind>A</kind>
<name>Plow</name>
<date>19831000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>4570217</doc-number>
<kind>A</kind>
<name>Allen et al.</name>
<date>19860200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>4598357</doc-number>
<kind>A</kind>
<name>Swenson et al.</name>
<date>19860700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>4688221</doc-number>
<kind>A</kind>
<name>Nakamura et al.</name>
<date>19870800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>4698808</doc-number>
<kind>A</kind>
<name>Ishii</name>
<date>19871000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>4761785</doc-number>
<kind>A</kind>
<name>Clark et al.</name>
<date>19880800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>4805090</doc-number>
<kind>A</kind>
<name>Coogan</name>
<date>19890200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>4837675</doc-number>
<kind>A</kind>
<name>Bean et al.</name>
<date>19890600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>4864497</doc-number>
<kind>A</kind>
<name>Lowry et al.</name>
<date>19890900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>4896259</doc-number>
<kind>A</kind>
<name>Jacobs et al.</name>
<date>19900100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00013">
<document-id>
<country>US</country>
<doc-number>4899342</doc-number>
<kind>A</kind>
<name>Potter et al.</name>
<date>19900200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00014">
<document-id>
<country>US</country>
<doc-number>4989206</doc-number>
<kind>A</kind>
<name>Dunphy, Jr. et al.</name>
<date>19910100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00015">
<document-id>
<country>US</country>
<doc-number>5124987</doc-number>
<kind>A</kind>
<name>Milligan et al.</name>
<date>19920600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00016">
<document-id>
<country>US</country>
<doc-number>RE34100</doc-number>
<kind>E</kind>
<name>Hartness</name>
<date>19921000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00017">
<document-id>
<country>US</country>
<doc-number>5155835</doc-number>
<kind>A</kind>
<name>Belsan</name>
<date>19921000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00018">
<document-id>
<country>US</country>
<doc-number>5163131</doc-number>
<kind>A</kind>
<name>Row et al.</name>
<date>19921100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00019">
<document-id>
<country>US</country>
<doc-number>5202979</doc-number>
<kind>A</kind>
<name>Hillis et al.</name>
<date>19930400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00020">
<document-id>
<country>US</country>
<doc-number>5278979</doc-number>
<kind>A</kind>
<name>Foster et al.</name>
<date>19940100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00021">
<document-id>
<country>US</country>
<doc-number>5355453</doc-number>
<kind>A</kind>
<name>Row et al.</name>
<date>19941000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00022">
<document-id>
<country>US</country>
<doc-number>5426747</doc-number>
<kind>A</kind>
<name>Weinreb et al.</name>
<date>19950600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00023">
<document-id>
<country>US</country>
<doc-number>5485579</doc-number>
<kind>A</kind>
<name>Hitz et al.</name>
<date>19960100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00024">
<document-id>
<country>US</country>
<doc-number>5519844</doc-number>
<kind>A</kind>
<name>Stallmo et al.</name>
<date>19960500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00025">
<document-id>
<country>US</country>
<doc-number>5535381</doc-number>
<kind>A</kind>
<name>Kopper</name>
<date>19960700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00026">
<document-id>
<country>US</country>
<doc-number>5568455</doc-number>
<kind>A</kind>
<name>Balsom</name>
<date>19961000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00027">
<document-id>
<country>US</country>
<doc-number>5581724</doc-number>
<kind>A</kind>
<name>Belsan et al.</name>
<date>19961200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00028">
<document-id>
<country>US</country>
<doc-number>5737747</doc-number>
<kind>A</kind>
<name>Vishlitzky et al.</name>
<date>19980400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00029">
<document-id>
<country>US</country>
<doc-number>5802366</doc-number>
<kind>A</kind>
<name>Row et al.</name>
<date>19980900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00030">
<document-id>
<country>US</country>
<doc-number>5819292</doc-number>
<kind>A</kind>
<name>Hitz et al.</name>
<date>19981000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00031">
<document-id>
<country>US</country>
<doc-number>5829046</doc-number>
<kind>A</kind>
<name>Tzelnic et al.</name>
<date>19981000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00032">
<document-id>
<country>US</country>
<doc-number>5918229</doc-number>
<kind>A</kind>
<name>Davis et al.</name>
<date>19990600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00033">
<document-id>
<country>US</country>
<doc-number>5931918</doc-number>
<kind>A</kind>
<name>Row et al.</name>
<date>19990800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00034">
<document-id>
<country>US</country>
<doc-number>5933603</doc-number>
<kind>A</kind>
<name>Vahalia et al.</name>
<date>19990800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00035">
<document-id>
<country>US</country>
<doc-number>5940838</doc-number>
<kind>A</kind>
<name>Schmuck et al.</name>
<date>19990800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00036">
<document-id>
<country>US</country>
<doc-number>5941972</doc-number>
<kind>A</kind>
<name>Hoese et al.</name>
<date>19990800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00037">
<document-id>
<country>US</country>
<doc-number>5963962</doc-number>
<kind>A</kind>
<name>Hitz et al.</name>
<date>19991000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00038">
<document-id>
<country>US</country>
<doc-number>5974544</doc-number>
<kind>A</kind>
<name>Jeffries et al.</name>
<date>19991000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00039">
<document-id>
<country>US</country>
<doc-number>5978792</doc-number>
<kind>A</kind>
<name>Bhargava et al.</name>
<date>19991100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00040">
<document-id>
<country>US</country>
<doc-number>5991810</doc-number>
<kind>A</kind>
<name>Shapiro et al.</name>
<date>19991100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709229</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00041">
<document-id>
<country>US</country>
<doc-number>6038570</doc-number>
<kind>A</kind>
<name>Hitz et al.</name>
<date>20000300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00042">
<document-id>
<country>US</country>
<doc-number>6065037</doc-number>
<kind>A</kind>
<name>Hitz et al.</name>
<date>20000500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00043">
<document-id>
<country>US</country>
<doc-number>6138162</doc-number>
<kind>A</kind>
<name>Pistriotto et al.</name>
<date>20001000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709229</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00044">
<document-id>
<country>US</country>
<doc-number>6229806</doc-number>
<kind>B1</kind>
<name>Lockhart et al.</name>
<date>20010500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00045">
<document-id>
<country>US</country>
<doc-number>6269431</doc-number>
<kind>B1</kind>
<name>Dunham</name>
<date>20010700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00046">
<document-id>
<country>US</country>
<doc-number>6360330</doc-number>
<kind>B1</kind>
<name>Mutalik et al.</name>
<date>20020300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00047">
<document-id>
<country>US</country>
<doc-number>6425035</doc-number>
<kind>B2</kind>
<name>Hoese et al.</name>
<date>20020700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00048">
<document-id>
<country>US</country>
<doc-number>6493718</doc-number>
<kind>B1</kind>
<name>Petculescu et al.</name>
<date>20021200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00049">
<document-id>
<country>US</country>
<doc-number>6513051</doc-number>
<kind>B1</kind>
<name>Bolosky et al.</name>
<date>20030100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00050">
<document-id>
<country>US</country>
<doc-number>6571259</doc-number>
<kind>B1</kind>
<name>Zheng et al.</name>
<date>20030500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00051">
<document-id>
<country>US</country>
<doc-number>6574618</doc-number>
<kind>B2</kind>
<name>Eylon et al.</name>
<date>20030600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00052">
<document-id>
<country>US</country>
<doc-number>6598121</doc-number>
<kind>B2</kind>
<name>Challenger et al.</name>
<date>20030700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>711122</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00053">
<document-id>
<country>US</country>
<doc-number>6629138</doc-number>
<kind>B1</kind>
<name>Lambert et al.</name>
<date>20030900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00054">
<document-id>
<country>US</country>
<doc-number>6636879</doc-number>
<kind>B1</kind>
<name>Doucette et al.</name>
<date>20031000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00055">
<document-id>
<country>US</country>
<doc-number>6643654</doc-number>
<kind>B1</kind>
<name>Patel et al.</name>
<date>20031100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00056">
<document-id>
<country>US</country>
<doc-number>6735601</doc-number>
<kind>B1</kind>
<name>Subrahmanyam</name>
<date>20040500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00057">
<document-id>
<country>US</country>
<doc-number>6772161</doc-number>
<kind>B2</kind>
<name>Mahalingham et al.</name>
<date>20040800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00058">
<document-id>
<country>US</country>
<doc-number>6804690</doc-number>
<kind>B1</kind>
<name>Dysert et al.</name>
<date>20041000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00059">
<document-id>
<country>US</country>
<doc-number>6813633</doc-number>
<kind>B2</kind>
<name>Wong et al.</name>
<date>20041100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709217</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00060">
<document-id>
<country>US</country>
<doc-number>6895413</doc-number>
<kind>B2</kind>
<name>Edwards</name>
<date>20050500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00061">
<document-id>
<country>US</country>
<doc-number>7043503</doc-number>
<kind>B2</kind>
<name>Haskin et al.</name>
<date>20060500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00062">
<document-id>
<country>US</country>
<doc-number>7107385</doc-number>
<kind>B2</kind>
<name>Rajan et al.</name>
<date>20060900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00063">
<document-id>
<country>US</country>
<doc-number>7171465</doc-number>
<kind>B1</kind>
<name>Endo et al.</name>
<date>20070100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00064">
<document-id>
<country>US</country>
<doc-number>7171469</doc-number>
<kind>B2</kind>
<name>Ackaouy et al.</name>
<date>20070100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00065">
<document-id>
<country>US</country>
<doc-number>7191290</doc-number>
<kind>B1</kind>
<name>Ackaouy et al.</name>
<date>20070300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00066">
<document-id>
<country>US</country>
<doc-number>7194579</doc-number>
<kind>B2</kind>
<name>Robinson et al.</name>
<date>20070300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00067">
<document-id>
<country>US</country>
<doc-number>7197490</doc-number>
<kind>B1</kind>
<name>English</name>
<date>20070300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00068">
<document-id>
<country>US</country>
<doc-number>7296068</doc-number>
<kind>B1</kind>
<name>Sarma et al.</name>
<date>20071100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00069">
<document-id>
<country>US</country>
<doc-number>7337214</doc-number>
<kind>B2</kind>
<name>Douglass et al.</name>
<date>20080200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709214</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00070">
<document-id>
<country>US</country>
<doc-number>7426617</doc-number>
<kind>B2</kind>
<name>Stager et al.</name>
<date>20080900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00071">
<document-id>
<country>US</country>
<doc-number>7430571</doc-number>
<kind>B2</kind>
<name>Edwards et al.</name>
<date>20080900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00072">
<document-id>
<country>US</country>
<doc-number>7447937</doc-number>
<kind>B2</kind>
<name>Grubbs et al.</name>
<date>20081100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00073">
<document-id>
<country>US</country>
<doc-number>7565423</doc-number>
<kind>B1</kind>
<name>Fredricksen</name>
<date>20090700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709223</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00074">
<document-id>
<country>US</country>
<doc-number>7631078</doc-number>
<kind>B2</kind>
<name>Ackaouy et al.</name>
<date>20091200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00075">
<document-id>
<country>US</country>
<doc-number>7664916</doc-number>
<kind>B2</kind>
<name>Griffin et al.</name>
<date>20100200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>711115</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00076">
<document-id>
<country>US</country>
<doc-number>7689609</doc-number>
<kind>B2</kind>
<name>Lango et al.</name>
<date>20100300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00077">
<document-id>
<country>US</country>
<doc-number>8224964</doc-number>
<kind>B1</kind>
<name>Fredrickson et al.</name>
<date>20120700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709227</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00078">
<document-id>
<country>US</country>
<doc-number>8271677</doc-number>
<kind>B2</kind>
<name>Gordon et al.</name>
<date>20120900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709231</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00079">
<document-id>
<country>US</country>
<doc-number>2002/0035672</doc-number>
<kind>A1</kind>
<name>Challenger et al.</name>
<date>20020300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00080">
<document-id>
<country>US</country>
<doc-number>2002/0083037</doc-number>
<kind>A1</kind>
<name>Lewis et al.</name>
<date>20020600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00081">
<document-id>
<country>US</country>
<doc-number>2002/0112022</doc-number>
<kind>A1</kind>
<name>Kazar et al.</name>
<date>20020800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00082">
<document-id>
<country>US</country>
<doc-number>2002/0133537</doc-number>
<kind>A1</kind>
<name>Lau et al.</name>
<date>20020900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00083">
<document-id>
<country>US</country>
<doc-number>2002/0194484</doc-number>
<kind>A1</kind>
<name>Bolosky et al.</name>
<date>20021200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00084">
<document-id>
<country>US</country>
<doc-number>2003/0018878</doc-number>
<kind>A1</kind>
<name>Dorward et al.</name>
<date>20030100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00085">
<document-id>
<country>US</country>
<doc-number>2003/0115434</doc-number>
<kind>A1</kind>
<name>Mahalingham et al.</name>
<date>20030600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00086">
<document-id>
<country>US</country>
<doc-number>2003/0126107</doc-number>
<kind>A1</kind>
<name>Yamagami et al.</name>
<date>20030700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00087">
<document-id>
<country>US</country>
<doc-number>2003/0158863</doc-number>
<kind>A1</kind>
<name>Haskin et al.</name>
<date>20030800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00088">
<document-id>
<country>US</country>
<doc-number>2003/0158873</doc-number>
<kind>A1</kind>
<name>Sawdon et al.</name>
<date>20030800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00089">
<document-id>
<country>US</country>
<doc-number>2003/0182253</doc-number>
<kind>A1</kind>
<name>Chen et al.</name>
<date>20030900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00090">
<document-id>
<country>US</country>
<doc-number>2003/0182301</doc-number>
<kind>A1</kind>
<name>Patterson et al.</name>
<date>20030900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00091">
<document-id>
<country>US</country>
<doc-number>2003/0182389</doc-number>
<kind>A1</kind>
<name>Edwards</name>
<date>20030900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00092">
<document-id>
<country>US</country>
<doc-number>2003/0195887</doc-number>
<kind>A1</kind>
<name>Vishlitzky et al.</name>
<date>20031000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00093">
<document-id>
<country>US</country>
<doc-number>2004/0019615</doc-number>
<kind>A1</kind>
<name>Sutoh et al.</name>
<date>20040100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00094">
<document-id>
<country>US</country>
<doc-number>2004/0030668</doc-number>
<kind>A1</kind>
<name>Pawlowski et al.</name>
<date>20040200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00095">
<document-id>
<country>US</country>
<doc-number>2004/0030822</doc-number>
<kind>A1</kind>
<name>Rajan et al.</name>
<date>20040200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00096">
<document-id>
<country>US</country>
<doc-number>2004/0044744</doc-number>
<kind>A1</kind>
<name>Grosner et al.</name>
<date>20040300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00097">
<document-id>
<country>US</country>
<doc-number>2004/0054748</doc-number>
<kind>A1</kind>
<name>Ackaouy et al.</name>
<date>20040300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00098">
<document-id>
<country>US</country>
<doc-number>2004/0054777</doc-number>
<kind>A1</kind>
<name>Ackaouy et al.</name>
<date>20040300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709225</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00099">
<document-id>
<country>US</country>
<doc-number>2004/0117437</doc-number>
<kind>A1</kind>
<name>Frank</name>
<date>20040600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00100">
<document-id>
<country>US</country>
<doc-number>2004/0139161</doc-number>
<kind>A1</kind>
<name>Loh</name>
<date>20040700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00101">
<document-id>
<country>US</country>
<doc-number>2004/0186961</doc-number>
<kind>A1</kind>
<name>Kimura et al.</name>
<date>20040900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00102">
<document-id>
<country>US</country>
<doc-number>2004/0268068</doc-number>
<kind>A1</kind>
<name>Curran et al.</name>
<date>20041200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00103">
<document-id>
<country>US</country>
<doc-number>2005/0008016</doc-number>
<kind>A1</kind>
<name>Shimozono</name>
<date>20050100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00104">
<document-id>
<country>US</country>
<doc-number>2005/0021566</doc-number>
<kind>A1</kind>
<name>Mu</name>
<date>20050100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00105">
<document-id>
<country>US</country>
<doc-number>2005/0033926</doc-number>
<kind>A1</kind>
<name>Dumont</name>
<date>20050200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>711138</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00106">
<document-id>
<country>US</country>
<doc-number>2005/0038850</doc-number>
<kind>A1</kind>
<name>Oe</name>
<date>20050200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00107">
<document-id>
<country>US</country>
<doc-number>2005/0050110</doc-number>
<kind>A1</kind>
<name>Sawdon et al.</name>
<date>20050300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00108">
<document-id>
<country>US</country>
<doc-number>2005/0114289</doc-number>
<kind>A1</kind>
<name>Fair</name>
<date>20050500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00109">
<document-id>
<country>US</country>
<doc-number>2005/0114672</doc-number>
<kind>A1</kind>
<name>Duncan et al.</name>
<date>20050500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00110">
<document-id>
<country>US</country>
<doc-number>2005/0154825</doc-number>
<kind>A1</kind>
<name>Fair et al.</name>
<date>20050700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00111">
<document-id>
<country>US</country>
<doc-number>2005/0192932</doc-number>
<kind>A1</kind>
<name>Kazar et al.</name>
<date>20050900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00112">
<document-id>
<country>US</country>
<doc-number>2005/0240725</doc-number>
<kind>A1</kind>
<name>Robinson et al.</name>
<date>20051000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00113">
<document-id>
<country>US</country>
<doc-number>2005/0246382</doc-number>
<kind>A1</kind>
<name>Edwards et al.</name>
<date>20051100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00114">
<document-id>
<country>US</country>
<doc-number>2005/0246401</doc-number>
<kind>A1</kind>
<name>Edwards et al.</name>
<date>20051100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00115">
<document-id>
<country>US</country>
<doc-number>2005/0278383</doc-number>
<kind>A1</kind>
<name>Kazar</name>
<date>20051200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00116">
<document-id>
<country>US</country>
<doc-number>2006/0036676</doc-number>
<kind>A1</kind>
<name>Cardone et al.</name>
<date>20060200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00117">
<document-id>
<country>US</country>
<doc-number>2006/0085471</doc-number>
<kind>A1</kind>
<name>Rajan et al.</name>
<date>20060400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00118">
<document-id>
<country>US</country>
<doc-number>2006/0136418</doc-number>
<kind>A1</kind>
<name>Hudis et al.</name>
<date>20060600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00119">
<document-id>
<country>US</country>
<doc-number>2006/0179261</doc-number>
<kind>A1</kind>
<name>Rajan</name>
<date>20060800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00120">
<document-id>
<country>US</country>
<doc-number>2007/0088929</doc-number>
<kind>A1</kind>
<name>Hanai et al.</name>
<date>20070400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00121">
<document-id>
<country>US</country>
<doc-number>2007/0124341</doc-number>
<kind>A1</kind>
<name>Lango et al.</name>
<date>20070500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00122">
<document-id>
<country>US</country>
<doc-number>2007/0156966</doc-number>
<kind>A1</kind>
<name>Sundarrajan et al.</name>
<date>20070700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>711133</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00123">
<document-id>
<country>US</country>
<doc-number>2008/0155220</doc-number>
<kind>A1</kind>
<name>Edwards et al.</name>
<date>20080600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00124">
<document-id>
<country>US</country>
<doc-number>2008/0195819</doc-number>
<kind>A1</kind>
<name>Dumont</name>
<date>20080800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>711138</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00125">
<document-id>
<country>US</country>
<doc-number>2010/0169392</doc-number>
<kind>A1</kind>
<name>Lev Ran et al.</name>
<date>20100700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00126">
<document-id>
<country>EP</country>
<doc-number>1349089</doc-number>
<kind>A2</kind>
<date>20030100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00127">
<document-id>
<country>WO</country>
<doc-number>WO 89/10594</doc-number>
<date>19891100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00128">
<document-id>
<country>WO</country>
<doc-number>PCT/US2003/02398</doc-number>
<date>20030900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00129">
<document-id>
<country>WO</country>
<doc-number>WO 2004/025429</doc-number>
<kind>A2</kind>
<date>20040300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00130">
<document-id>
<country>WO</country>
<doc-number>WO 2004/015521</doc-number>
<date>20040700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00131">
<othercit>Azagury et al. &#x201c;Point-in-Time Copy: Yesterday, Today and Tomorrow&#x201d;, IBM, 2002, 12 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00132">
<othercit>&#x201c;Notification of Transmittal of the International Search Report and the Written Opinion of the International Searching Authority, or the Declaration&#x201d;, mailed Apr. 24, 2006, International Application No. PCT/US2006/015442, 7 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00133">
<othercit>Cramer et al. &#x201c;System and Method for Associating a Network Address with a Storage Device&#x201d;, U.S. Appl. No. 10/138,918, filed May 3, 2002, 35 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00134">
<othercit>Common Internet File System (CIFS) Version: CIFS-Spec 0.9, Storage Networking Industry Association (SNIA), Draft SNIA CIFS Documentation Work Group Work-in-Progress, Revision Date: Mar. 26, 2001, 126 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00135">
<othercit>Fielding et al. (1999) Request for Comments (RFC) 2616, HTTP/1.1, 143 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00136">
<othercit>Black, David L. &#x201c;Scheduling and Resource Management Techniques for Multiprocessors&#x201d;, Jul. 1009, CMU-CS-90-152.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00137">
<othercit>Lango et al. &#x201c;System and Method for Sparse Volumes&#x201d;, U.S. Appl. No. 60/674,611, filed Apr. 25, 2005, 52 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00138">
<othercit>Lango, Jason Ansel. &#x201c;System and Method for Restoring Data on Demand for Instant Volume Restoration&#x201d;, U.S. Appl. No. 60/674,430, filed Apr. 25, 2005, 57 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00139">
<othercit>Akyurek, Sedat, Placing Replicated Data to Reduce Seek Delays, Department of Computer Science, University of Maryland, UMIACS-TR-91-121, CS-TR-2746, Aug. 1991.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00140">
<othercit>Chaudhuri, Surajit, et al., Self-Tuning Technology in Microsoft SQL Server, Data Engineering Journal 22, Feb. 1999 pp. 20-27.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00141">
<othercit>Coyne, Robert A., et al., Storage Systems for National Information Assets, Proc. Supercomputing 92, Minneapolis, Nov. 1992, pp. 626-633.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00142">
<othercit>Finlayson, Ross S., et al., Log Files: An Extended File Service Exploiting Write-Once Storage Department of Computer Science, Stanford University, Report No. STAN-CS-87-1177, Sep. 1987.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00143">
<othercit>Gray, Jim, et al., The Recovery Manager of the System R Database Manager, ACM Computing Surveys, (13)2:223-242 1981.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00144">
<othercit>Hecht, Matthew S., et al. Shadowed Management of Free Disk Pages with a Linked List, ACM Transactions on Database Systems, 8/4, Dec. 1983, pp. 503-514.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00145">
<othercit>Kazar, Michael Leon, Synchronization and Caching Issues in the Andrew File System, Carnegie Mellon University, CMU-ITC-88-063.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00146">
<othercit>Kemper, Alfons, et al., Performance Tuning for SAP R/3, Data Engineering Journal 22, Feb. 1999 pp. 33-40.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00147">
<othercit>Kent, Jack et al., Optimizing Shadow Recovery Algorithms, IEEE Transactions on Software Engineering, 14( 2): 155-168 , Feb. 1988.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00148">
<othercit>Kistler, et al., Disconnected Operation in the Coda File System, ACM Transactions on Computer SYstems, vol. 10, No. 1, Feb. 1992, pp. 3-25.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00149">
<othercit>Rosenblum, Mendel, The Design and Implementation of a Log-Structured File System, 1992 pp. 1-93.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00150">
<othercit>Schiefer, Berni, et al., DB2 Universal Database Performance Tuning, Data Engineering Journal 22, Feb. 1999 pp. 12-19.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00151">
<othercit>Seltzer, Margo I., et al., Journaling Versus Soft Updates: Asynchronous Meta-Data Protection in File Systems, Proceedings of 200 USENIX Annual Technical Conference, Jun. 18-23, 2000.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00152">
<othercit>Shasha, Dennis, Tuning Time Series Queries in Finance: Case Studies and Recommendations, Data Engineering Journal 22, Feb. 1999 pp. 41-47.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00153">
<othercit>Subramanian, Muralidhar, et al., Performance Challenges in Object-Relational DBMSs, Data Engineering Journal 22, Feb. 1999 pp. 28-32.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00154">
<othercit>Weikum, Gerhard, et al., Towards Self-Tuning Memory Management for Data Servers, Data Engineering Journal 22, Feb. 1999 pp. 3-11.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00155">
<othercit>West, Michael, et al. The ITC Distributed File System: Prototype and Experience, Carnegie-Mellon University, Technical Report CMU-ITC-040, Mar. 1985.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00156">
<othercit>Zayas, Edward R., AFS-3 Programmer's Reference: Architectural Overview, Transarc Corporation, Pittsburgh, PA, 1.0 edition 1991.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00157">
<othercit>&#x201c;Notification of Transmittal of the International Search Report and the Written Opinion of the International Searching Authority, or the Declaration&#x201d;, mailed Apr. 24, 2006, International Application No. PCT/US2006/015242, 12 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00158">
<othercit>Kaczmarski et al. &#x201c;Beyond Backup Toward Storage Management&#x201d;, IBM Systems Journal, vol. 42, No. 2, 2003, 8 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00159">
<othercit>Wilhelm-Olsen et al. &#x201c;Data Protection Strategies for Network Appliance Storage Systems&#x201d;, Apr. 25, 2003, 13 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00160">
<othercit>Burns et al. &#x201c;Storage Virtualization&#x2014;Definition Why, What, Where and How?&#x201d;, Nov. 1, 2004, 3 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00161">
<othercit>Kang et al. &#x201c;Improving Storage System Flexibility Through Virtual Allocation&#x201d;, Dept. of Electrical Engineering, Texas A&#x26;M University, College Station, Texas, 7 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00162">
<othercit>Kim et al., &#x201c;Exploiting Metadata of Absent Objects for Proxy Cache Consistency&#x201d;, IEICE Transactions on Communications, vol. E-84B, No. 5, May 2001, pp. 1406-1412.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00163">
<othercit>Caplinger, Michael, &#x201c;An Information System Based on Distributed Objects&#x201d;, OOPSLA Proceedings, Oct. 4-8, 1987, pp. 126-137.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00164">
<othercit>Lango et al., &#x201c;System and Method for Sparse Volumes&#x201d;, U.S. Appl. No. 11/409,887, filed Apr. 24, 2006, 52 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00165">
<othercit>Rabinovich, M., et al., &#x201c;Web Caching and Replication,&#x201d; Addison Wesley, Dec. 2001, pp. 47-61, 153-175 and 207-210.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00166">
<othercit>Administration Guide found at http://www.openafs.org/pages/doc/AdminGuide/auagd010.htm, visited on Mar. 2, 2005.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00167">
<othercit>Basilico, et al., <i>Error Correction System Using &#x201c;Shadow Memory</i>,&#x201d; IBM Technical Disclosure Bulletin, May 1984, pp. 5792-5793.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00168">
<othercit>Bitton, Dina, <i>Disk Shadowing</i>, Proceedings of the 14<sup>th </sup>VLDB Conference, LA, CA (1988).</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00169">
<othercit>Blasgen, M.W. et al., <i>System R:An architectural Overview</i>,Reprinted from IBM Systems Journal vol. 20, No. 1, 1981&#xa9; 1981, 1999.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00170">
<othercit>Borenstein, Nathaniel S., <i>CMU's Andrew project a retrospective</i>, Communications of ACM, (39)12, Dec. 1996.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00171">
<othercit>Brown, Mark R. et al., <i>The Alpine file system</i>, ACM Transactions on Computing Systems, 3(4):261-293, Nov. 1985.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00172">
<othercit>Chen, Peter M., et al., <i>An Evaluation of Redundant Arrays of Disks Using an Amdahl 5890 </i>Performance Evaluation, pp. 74-85, 1990.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00173">
<othercit>Chutani, Sailesh, et al., <i>The Episode file system</i>, In Proceedings of the USENIX Winter 1992.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00174">
<othercit>Clark, B.E., et al., <i>Application System /400 Performance Characteristics</i>, IBM Systems Journal, 28(3): 407-423, 1989.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00175">
<othercit>Clark, Timothy A., et al., <i>Using the ISIS Resource Manager for Distributed, Fault-Tolerant Computing</i>, IEEE 1993, pp. 257-265.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00176">
<othercit>Data Sheet for the Check Point Software Technologies product Flood-Gate-1 (1997).</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00177">
<othercit>Dibble, Peter C., et al., Beyond Striping: The Bridge Multiprocessor File System, Computer Science Department, University of Rochester, Aug. 11, 1989.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00178">
<othercit>Douglis, Fred, et al., <i>A comparison of two distributed systems: Amoeba and Sprite</i>&#x2014;Computing Systems, 4(4), Fall 1991, pp. 353-385.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00179">
<othercit>Gait, Jason, <i>Phoenix: A Safe In-Memory File System</i>. Communications of the ACM, 33(1):81-86, Jan. 1990.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00180">
<othercit>Godbole, Rajesh, <i>An Introduction to FlexCache Volumes / Implementing File Caching on Filers</i>, Network Appliance, Inc., May 2005, pp. 1-14, TR3399.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00181">
<othercit>Hartman, John H. et al., <i>Performance Measurements of a Multiprocessor Sprite Kernel</i>, Proceedings of the USENIX Conference, 1990.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00182">
<othercit>Hitz, Dave et al., <i>File System Design for an NFS File Server Appliance</i>, Technical Report 3002, Rev. C395, presented Jan. 19, 1994.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00183">
<othercit>Howard, John H, et al. <i>Scale and Performance in a Distributed File System</i>, Carnegie Mellon University, CMU-ITC-87-068, Aug. 5, 1987.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00184">
<othercit>Howard, John, H. et al., <i>Scale and performance in a distributed file system</i>, ACM Trans. Computer. System., 6(1), Feb. 1988 pp. 51-81.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00185">
<othercit>Howard, John H., <i>An Overview of the Andrew File System</i>, Carnegie Mellon University, CMU-ITC-88-062.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00186">
<othercit><i>The IBM System/38</i>, Chapter 8, pp. 137-15.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00187">
<othercit>Isomaki, Markus, <i>Differentiated Service for the Internet</i>, Department of Technical Physics and Mathematics, May 9, 1998.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00188">
<othercit>Kazar, Michael L., et al., <i>Decorum File System Architectural Overview</i>, USENIX Summer Conference, Anaheim, California, 1990.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00189">
<othercit>Lango, Jason, et al., <i>Architecture for Supporting Sparse Volumes</i>, USPTO U.S. Appl. No. 60/674,641, filed Apr. 25, 2005.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00190">
<othercit>Lango, Jason, et al., <i>Architecture for Supporting Sparse Volumes</i>, USPTO U.S. Appl. No. 11/409,624, filed Apr. 24, 2006.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00191">
<othercit>Lango, Jason, <i>System and Method for Caching Network File Systems</i>, USPTO U.S. Appl. No. 60/674,609, filed Apr. 25, 2005.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00192">
<othercit>Lomet, David., et al., <i>The performance of a multiversion access method</i>, ACM SIGMOD International Conference on Management of Data, 19:353-363.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00193">
<othercit>Lorie, Raymond, A, <i>Physical integrity in a large segmented database</i>, ACM Trans. Database Systems, (2)1:91-104, Mar. 1977.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00194">
<othercit>Lorie, RA, <i>Shadow Page Mechanism</i>, IBM Technical Disclosure Bulletin, Jun. 1986, pp. 340-342.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00195">
<othercit>McKusick, Marshall Kirk, et al., <i>A Fast File System for UNIX</i>, Computer Science Division, Department of Electrical Engineering and Computer Sciences, Univ. of CA, Berkley, Feb. 18, 1994.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00196">
<othercit>Miller, Ethan L., et al., <i>RAMA:A File System for Massively Parallel Computers</i>, 12<sup>th </sup>IEEE Symposium on Mass Storage Systems, Monterey CA, Apr. 1993, pp. 163-168.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00197">
<othercit>Moons, Herman et al., <i>Location-Independent Object Invocation in Open Distributed Systems</i>, Autumn 1991 EurOpen Technical Conference and Exhibition, pp. 287-300 (Sep. 16-20, 1991).</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00198">
<othercit>Morris, James H., Et Al, <i>Andrew: A Distributed Personal Computing Environment</i>, Comm. of the ACM, vol. 29, Mar. 1986, pp. 184-201.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00199">
<othercit>Mullender, Sape J., et al., <i>A distributed file service based on optimistic concurrency control</i>, ACM Symposium on Operating System Principles (Orcas Island, Washington). Published as Operating Systems Review, 19(5):51-62, Dec. 1985.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00200">
<othercit>Muller, Keith, et al., <i>A High Performance Multi-Structured File System Design</i>, In Proceedings of the 13th ACM Symposium on Operating Systems Principles, Oct. 1991, pp. 56-67.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00201">
<othercit>Ousterhout, John K. et al., <i>The Sprite Network Operating System</i>, Computer Science Division, Department of Electrical Engineering and Computer Sciences, Univ. of CA, Berkley, Nov. 19, 1987.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00202">
<othercit>Ousterhout, John et al., <i>Beating the I/O Bottleneck: A Case for Log-Structured File Systems</i>, Technical Report, Computer Science Division, Electrical Engineering and Computer Sciences, University of California at Berkeley, Oct. 30, 1988.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00203">
<othercit>Ousterhout, John, <i>Why Aren't Operating Systems Getting Faster as Fast as Hardware?</i>, Digital WRL Technical Note TN-11, Oct. 1989.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00204">
<othercit>Ousterhout, John, <i>A Brief Retrospective on the Sprite Network Operating System</i>, found at http://www.cs.berkeley.edu/projects/sprite/retrospective.html,visited on Mar. 11, 2005.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00205">
<othercit>Patterson, D., et al., <i>A Case for Redundant Arrays of Inexpensive Disks </i>(<i>RAID</i>),<sub>&#x2014;</sub>Technical Report, CSD-87-391, Computer Science Division, Electrical Engineering and Computer Sciences, University of California at Berkeley (1987).</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00206">
<othercit>Patterson, D., et al., <i>A Case for Redundant Arrays of Inexpensive Disks </i>(<i>RAID</i>),<sub>&#x2014;</sub>SIGMOD International Conference on Management of Data, Chicago, IL, USA, Jun. 1-3, 1988, SIGMOD Record (17)3:109-16 (Sep. 1988).</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00207">
<othercit>Peterson, Zachary Nathaniel Joseph, <i>Data Placement for Copy-on-Write Using Virtual Contiguity</i>, University of CA, Santa Cruz, Master of Science in Computer Science Thesis, Sep. 2002.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00208">
<othercit>Quinlan, Sean, <i>A Cached WORM File System</i>, Software-Practice and Experience, 21(12):1289-1299 (1991).</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00209">
<othercit>Redundant Array of Independent Disks, from Wikipedia, the free encyclopedia, found at http://en.wikipedia.org/wiki/RAID, visited on Mar. 9, 2005.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00210">
<othercit>Rosenberg, J., et al., <i>Stability in a Persistent Store Based on a Large Virtual Memory</i>, In Security and Persistence, Rosenber, J. &#x26; Keedy, J.L. (ed), Springer-Verlag (1990) pp. 229-245.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00211">
<othercit>Rosenblum, Mendel, et al., <i>The LFS Storage Manager</i>, Computer Science Division, Electrical Engin. and Computer Sciences, Univ. of CA, presented at Summer '90 USENIX Technical Conference, Anaheim, CA Jun. 1990.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00212">
<othercit>Rosenblum, Mendel, et al, The <i>Design and Implementation of a Log-Structured File System </i>Jul. 24, 1991 pp. 1-15.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00213">
<othercit>Rosenblum, Mendel, et al., <i>The Design and Implementation of a Log-Structured File System</i>, , In Proceedings of ACM Transactions on Computer Systems, (10)1:26-52, Feb. 1992.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00214">
<othercit>Sandberg, Russel et al., <i>Design and implementation of the Sun Network Filesystem</i>. In Proc. Summer 1985 USENIX Conf., pp. 119-130, Portland OR (USA), Jun. 1985.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00215">
<othercit>Santry, Douglas S., et al., <i>Deciding When to Forget in the Elephant File System</i>, Operating Systems Review, 34(5), (Dec. 1999) pp. 110-123.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00216">
<othercit>Satyanarayanan, M., et al.,<i>The ITC Distributed File System: Principles and Design</i>, In Proceedings of the 10th ACM Symposium on Operating Systems Principles, (19)5:56-67, Dec. 1985.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00217">
<othercit>Satyanarayanan,.M.. <i>A survey of distributed file-systems</i>. Annual Review of Computing Science, 4(73-104), 1989.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00218">
<othercit>Satyanarayanan, M., et al, <i>Coda: A highly available file system for a distributed workstation environment </i>Carnegie Mellon University, CMU-ITC.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00219">
<othercit>Satyanarayanan, M., et al, <i>Coda: A highly available file system for a distributed workstation environment</i>. IEEE Transactions on Computers, 39(4):447-459, 1990.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00220">
<othercit>Satyanarayanan, Mahadev, <i>Scalable, Secure, and Highly Available Distributed File Access</i>, Computer May 1990: 9-21.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00221">
<othercit>Sidebotham, Bob, <i>Volumes: The Andrew File System Data Structuring Primitive</i>, EEUG Conference Proceedings, Manchester, UK, Autumn 1986.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00222">
<othercit>User Guide found at http.//www.openafs.org/pages/doc/UserGuide/auusg004.htm, visited on Mar. 2, 2005.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00223">
<othercit>Welch, Brent B., et al., <i>Pseudo Devices: User-Level Extensions to the Sprite File System</i>, Computer Science Division, Department of Electrical Engineering and Computer Sciences, Univ. of CA, Berkley, Apr. 1988.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00224">
<othercit>Welch, Brent B., et al., <i>Pseudo-File-Systems</i>, Computer Science Division, Department of Electrical Engineering and Computer Sciences, Univ. of CA, Berkley, Oct. 1989.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00225">
<othercit>Wittle, Mark, et al, LADDIS: The next generation in NFS file server benchmarking, USENIX Association Conference Proceedings, Apr. 1993.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00226">
<othercit>Notification of Transmittal of the International Search Report and the Written Opinion of the International Searching Authority, or the Declaration PCT/US2006/015279 Apr. 24, 2006.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00227">
<othercit>&#x201c;An Introduction to Flexcache Vlumes Implementing File Caching on Filers&#x201d; Rajesh Goodboie May 2005.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>18</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>709203</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709216</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709204</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709214</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709217</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709218</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>711118</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>711119</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>711120</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>711133</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>711134</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>711136</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>711137</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>711138</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>711148</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>11</number-of-drawing-sheets>
<number-of-figures>12</number-of-figures>
</figures>
<us-related-documents>
<continuation>
<relation>
<parent-doc>
<document-id>
<country>US</country>
<doc-number>11409625</doc-number>
<date>20060424</date>
</document-id>
<parent-grant-document>
<document-id>
<country>US</country>
<doc-number>8055702</doc-number>
</document-id>
</parent-grant-document>
</parent-doc>
<child-doc>
<document-id>
<country>US</country>
<doc-number>13206705</doc-number>
</document-id>
</child-doc>
</relation>
</continuation>
<us-provisional-application>
<document-id>
<country>US</country>
<doc-number>60674609</doc-number>
<date>20050425</date>
</document-id>
</us-provisional-application>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Lango</last-name>
<first-name>Jason Ansel</first-name>
<address>
<city>Mountain View</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>English</last-name>
<first-name>Robert M.</first-name>
<address>
<city>Menlo Park</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="003" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Eastham</last-name>
<first-name>Paul Christopher</first-name>
<address>
<city>Mountain View</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="004" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Zheng</last-name>
<first-name>Qinghua</first-name>
<address>
<city>San Jose</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="005" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Quirion</last-name>
<first-name>Brian Mederic</first-name>
<address>
<city>San Jose</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="006" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Griess</last-name>
<first-name>Peter</first-name>
<address>
<city>San Francisco</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="007" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Amdur</last-name>
<first-name>Matthew Benjamin</first-name>
<address>
<city>San Francisco</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="008" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Ayyar</last-name>
<first-name>Kartik</first-name>
<address>
<city>Sunnyvale</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="009" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Tsai</last-name>
<first-name>Robert Lieh-Yuan</first-name>
<address>
<city>Boston</city>
<state>MA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="010" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Grunwald</last-name>
<first-name>David</first-name>
<address>
<city>Santa Clara</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="011" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Wagner</last-name>
<first-name>J. Chris</first-name>
<address>
<city>Langley</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="012" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Ackaouy</last-name>
<first-name>Emmanuel</first-name>
<address>
<city>Cambridge</city>
<country>GB</country>
</address>
</addressbook>
<residence>
<country>GB</country>
</residence>
</us-applicant>
<us-applicant sequence="013" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Prakash</last-name>
<first-name>Ashish</first-name>
<address>
<city>Morrisville</city>
<state>NC</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Lango</last-name>
<first-name>Jason Ansel</first-name>
<address>
<city>Mountain View</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>English</last-name>
<first-name>Robert M.</first-name>
<address>
<city>Menlo Park</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="003" designation="us-only">
<addressbook>
<last-name>Eastham</last-name>
<first-name>Paul Christopher</first-name>
<address>
<city>Mountain View</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="004" designation="us-only">
<addressbook>
<last-name>Zheng</last-name>
<first-name>Qinghua</first-name>
<address>
<city>San Jose</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="005" designation="us-only">
<addressbook>
<last-name>Quirion</last-name>
<first-name>Brian Mederic</first-name>
<address>
<city>San Jose</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="006" designation="us-only">
<addressbook>
<last-name>Griess</last-name>
<first-name>Peter</first-name>
<address>
<city>San Francisco</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="007" designation="us-only">
<addressbook>
<last-name>Amdur</last-name>
<first-name>Matthew Benjamin</first-name>
<address>
<city>San Francisco</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="008" designation="us-only">
<addressbook>
<last-name>Ayyar</last-name>
<first-name>Kartik</first-name>
<address>
<city>Sunnyvale</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="009" designation="us-only">
<addressbook>
<last-name>Tsai</last-name>
<first-name>Robert Lieh-Yuan</first-name>
<address>
<city>Boston</city>
<state>MA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="010" designation="us-only">
<addressbook>
<last-name>Grunwald</last-name>
<first-name>David</first-name>
<address>
<city>Santa Clara</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="011" designation="us-only">
<addressbook>
<last-name>Wagner</last-name>
<first-name>J. Chris</first-name>
<address>
<city>Langley</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="012" designation="us-only">
<addressbook>
<last-name>Ackaouy</last-name>
<first-name>Emmanuel</first-name>
<address>
<city>Cambridge</city>
<country>GB</country>
</address>
</addressbook>
</inventor>
<inventor sequence="013" designation="us-only">
<addressbook>
<last-name>Prakash</last-name>
<first-name>Ashish</first-name>
<address>
<city>Morrisville</city>
<state>NC</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Cesari and McKenna, LLP</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>NetApp, Inc.</orgname>
<role>02</role>
<address>
<city>Sunnyvale</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Nguyen</last-name>
<first-name>Thu Ha</first-name>
<department>2453</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">A network caching system has a multi-protocol caching filer coupled to an origin server to provide storage virtualization of data served by the filer in response to data access requests issued by multi-protocol clients over a computer network. The multi-protocol caching filer includes a file system configured to manage a sparse volume that &#x201c;virtualizes&#x201d; a storage space of the data to thereby provide a cache function that enables access to data by the multi-protocol clients. To that end, the caching filer further includes a multi-protocol engine configured to translate the multi-protocol client data access requests into generic file system primitive operations executable by both the caching filer and the origin server.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="151.13mm" wi="209.21mm" file="US08626866-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="217.42mm" wi="160.78mm" orientation="landscape" file="US08626866-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="239.78mm" wi="167.05mm" orientation="landscape" file="US08626866-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="148.93mm" wi="115.82mm" file="US08626866-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="235.20mm" wi="164.93mm" file="US08626866-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="211.92mm" wi="144.78mm" orientation="landscape" file="US08626866-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="239.01mm" wi="172.89mm" orientation="landscape" file="US08626866-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="125.22mm" wi="107.19mm" file="US08626866-20140107-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00008" num="00008">
<img id="EMI-D00008" he="224.45mm" wi="150.62mm" file="US08626866-20140107-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00009" num="00009">
<img id="EMI-D00009" he="239.01mm" wi="156.55mm" file="US08626866-20140107-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00010" num="00010">
<img id="EMI-D00010" he="248.41mm" wi="170.52mm" file="US08626866-20140107-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00011" num="00011">
<img id="EMI-D00011" he="157.99mm" wi="131.49mm" file="US08626866-20140107-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?RELAPP description="Other Patent Relations" end="lead"?>
<heading id="h-0001" level="1">CROSS-REFERENCE TO RELATED APPLICATIONS</heading>
<p id="p-0002" num="0001">The present application is a continuation of commonly assigned U.S. patent application Ser. No. 11/409,625, which was filed on Apr. 24, 2006 now U.S. Pat. No. 8,055,702, by Jason Ansel Lango et al. for a SYSTEM AND METHOD FOR CACHING NETWORK FILE SYSTEMS which claims the benefit of U.S. Provisional Patent Application Ser. No. 60/674,609, which was filed on Apr. 25, 2005, by Jason Lango for a System And Method For Caching Network File Systems and is hereby incorporated by reference.</p>
<heading id="h-0002" level="1">CROSS-REFERENCE TO RELATED APPLICATIONS</heading>
<p id="p-0003" num="0002">The present invention is related to the following commonly assigned U.S. patent application Ser. Nos. 11/409,887, filed on Apr. 24, 2006, titled System and Method for Sparse Volumes, 11/409,624, filed on Apr. 24, 2006, titled Architecture for Supporting of Sparse Volumes, which is now issued as U.S. Pat. No. 7,689,609 on Mar. 30, 2010 and 11/409,626, filed on Apr. 24, 2006, titled System and Method for Restoring Data On Demand for Instant Volume Restoration, which is now issued as U.S. Pat. No. 7,809,693 on Oct. 5, 2010, the contents of which are hereby incorporated by reference.</p>
<?RELAPP description="Other Patent Relations" end="tail"?>
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0003" level="1">FIELD OF THE INVENTION</heading>
<p id="p-0004" num="0003">The present invention relates to caching systems, and more specifically, to storage virtualization of data served by a caching filer in response to data access requests issued by multi-protocol clients over a computer network.</p>
<heading id="h-0004" level="1">BACKGROUND OF THE INVENTION</heading>
<p id="p-0005" num="0004">Often, organizations with remote locations may need to replicate critical data, such as engineering applications and libraries, to different locations. In order to make such critical data available to users in those remote locations without incurring network delays, the organizations may consume substantial resources (such as, e.g., file systems executing on file servers) managing a complex replication infrastructure and process. Data replication is a known technique that enables distributed online access to generally read-only data sets. Traditional data replication may rely heavily on file system minoring to create entire read-only copies of data sets on distributed servers.</p>
<p id="p-0006" num="0005">The mirrors generated by file system mirroring typically require a large amount of is administrative overhead. For example, an administrator must determine what data needs to be replicated, as well as manage physical resources (file systems, files servers, etc.) for each mirror. As data sets grow, this type of data replication becomes increasingly impractical. In addition, the replication infrastructure may require the presence of servers in remote locations to store the replicated data, thus preventing organizations from consolidating their server infrastructures to a central location. Therefore, there remains a need to eliminate this expensive replication infrastructure and process without losing the benefit of immediate access to critical data.</p>
<p id="p-0007" num="0006">One alternative to data replication minoring is proxy caching. Proxy caching systems are typically employed to transparently replicate data sets on demand. A typical proxy cache system includes a front-end storage system or &#x201c;proxy device&#x201d; having local storage, i.e., a &#x201c;cache&#x201d;, coupled to a back-end storage system or &#x201c;origin server&#x201d; having remote storage. When a client request cannot be satisfied by the cache, it is proxied to the origin server. The server response is, in turn, proxied back to the requesting client and all associated data is cached in the local storage. This type of transaction is called a &#x201c;cache miss&#x201d;. Cache misses typically result in the data, such as file system data, being &#x201c;filled&#x201d; into the cache. When the data required to satisfy a client request is available in the cache, the proxy device may construct and send a response without communicating with its associated server. Such a transaction is called a &#x201c;cache hit&#x201d;. Using cache miss transactions, a proxy device allows clients to modify the state of a file system on the device. In contrast to standard replicas, this enables automatic replication without constraining clients to read-only access.</p>
<p id="p-0008" num="0007">A conventional proxy caching solution provides the ability to distribute data, e.g., files, to remote locations without the need for continuous hands-on administrative management. An example of such a proxy caching solution is described in U.S. patent application Ser. No. 10/245,798 titled Apparatus and Method for a Proxy Cache, by E. Ackaouy, now issued as U.S. Pat. No. 7,284,030 on Oct. 6, 2007 and assigned to Network Appliance, Inc., Sunnyvale, Calif. A proxy storage system or appliance is having a cache is coupled to a server storage system. A file system manages a set of files served by the proxy appliance; these files are accessed by clients using a file system protocol, such as the Network File System (NFS) and/or Common Internet File System (CIFS) protocol. In response, the proxy appliance serves the files using a file index hashing scheme based on file handles.</p>
<p id="p-0009" num="0008">Broadly stated, the proxy appliance &#x201c;listens&#x201d; for a NFS/CIFS data access request issued by a client and determines whether it can serve that request locally using the hashing scheme. To that end, the proxy appliance converts the client request to a unique caching name before forwarding to its file system for a caching decision. A hashing function performed on the file handle produces the caching name, which is used by the file system to obtain a cache file or object store identifier to determine if the file is resident in the cache. If the file is resident in the cache, a determination is made as to whether all of the data that is requested by the client is resident in the cache. If not, the appliance proxies the request over to the server. When the server responds with the requested data or acknowledgement, the appliance passes the server response to the client. The proxy appliance also &#x201c;fills&#x201d; its cache with the server response to ensure that subsequent client requests may be served by the appliance.</p>
<p id="p-0010" num="0009">The present invention is directed, in part, to an improved caching system that enables multi-protocol access by clients to data served by the system. In addition, the present invention is directed, in part, to an improved caching system that enables efficient client access to data served by the system using file system data structures and names. Moreover, the present invention is directed, in part, to an improved caching system that provides storage virtualization of data served by the system in response to multi-protocol data access requests issued by clients. In this context, storage virtualization denotes presenting a transparent view of storage to a client that involves cooperating storage resources from multiple storage systems, typically across a network.</p>
<heading id="h-0005" level="1">SUMMARY OF THE INVENTION</heading>
<p id="p-0011" num="0010">The present invention relates to a network caching system having a multi-protocol caching storage system (&#x201c;filer&#x201d; coupled to an origin server to provide storage virtualization of data served by the filer in response to data access requests issued by multi-protocol clients over a computer network. The multi-protocol caching filer includes a file system configured to manage a sparse volume to thereby provide a cache function that enables access to data by the multi-protocol clients. To that end, the caching filer further includes a multi-protocol engine configured to translate the multi-protocol client data access requests into generic file system primitive operations executable by both the caching filer and the origin server.</p>
<p id="p-0012" num="0011">In the illustrative embodiment, the cache function is provided, in part, by a &#x201c;local cache&#x201d; of the caching filer that includes a cache volume comprising one or more disks coupled to the caching filer. According to an aspect of the invention, the cache volume is illustratively embodied as a sparse volume adapted to serve data requested by a client from one or more storage objects, e.g., files, having at least one block (i.e., an absent block) that may be missing from the cache volume (i.e., not stored locally on its disk). The missing data of an absent block is stored on the origin server and is illustratively retrieved (&#x201c;filled&#x201d;) using a remote fetch operation in a manner that is transparent to the client.</p>
<p id="p-0013" num="0012">Advantageously, the present invention utilizes the storage space of the multi-protocol caching filer to enable fast and efficient client access to data served by the network caching system. Unlike previous caching systems that require explicit file handleto-object store conversion, the novel multi-protocol caching filer enables efficient client access to data served by the network caching system through use of the file system and, in particular, the use of actual names of the storage objects (files) organized by the file system. Moreover, the file system cooperates with the sparse volume of the caching filer to provide storage space virtualization of the served data in a manner that is transparent to the multi-protocol clients</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0006" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0014" num="0013">The above and further advantages of the invention may be better understood by referring to the following description in conjunction with the accompanying drawings in is which like reference numerals indicate identical or functionally similar elements:</p>
<p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. 1</figref> is a schematic block diagram of an exemplary network environment in accordance with an embodiment of the present invention;</p>
<p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. 2</figref> is a schematic block diagram of an exemplary storage operating system in accordance with an embodiment of the present invention;</p>
<p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. 3</figref> is a schematic block diagram of an exemplary inode in accordance with an embodiment of the present invention;</p>
<p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. 4</figref> is a schematic block diagram of an exemplary buffer tree in accordance with an embodiment of the present invention;</p>
<p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. 5</figref> is a schematic block diagram of an illustrative embodiment of a buffer tree of a file that may be advantageously used with the present invention;</p>
<p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. 6</figref> is a schematic block diagram of an exemplary aggregate in accordance with an embodiment of the present invention;</p>
<p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. 7</figref> is a schematic block diagram of an exemplary on-disk layout in accordance with an embodiment of the present invention;</p>
<p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. 8</figref> is a schematic block diagram of an exemplary fsinfo block in accordance with an embodiment of the present invention;</p>
<p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. 9</figref> is a flowchart illustrating the steps of a procedure for processing a data modifying access request in accordance with an embodiment of the present invention;</p>
<p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. 10</figref> is a flowchart illustrating the steps of a procedure for processing a non-data modifying access request in accordance with an embodiment of the present invention;</p>
<p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. 11</figref> is a flowchart illustrating the steps of a procedure for implementing a cache coherency policy in accordance with an embodiment of the present invention; and</p>
<p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. 12</figref> is a flowchart illustrating the steps of a procedure for implementing a cache ejection policy in accordance with an embodiment of the present invention.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0007" level="1">DETAILED DESCRIPTION OF AN ILLUSTRATIVE EMBODIMENT</heading>
<heading id="h-0008" level="1">A. Network Environment</heading>
<p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. 1</figref> is a schematic block diagram of a network caching system environment <b>100</b> that includes a front-end storage system configured to provide a cache function for serving information (data) sourced from a back-end storage system. To that end, the front-end storage system is a computer illustratively embodied as a caching filer <b>120</b> that provides storage service relating to the organization of information on storage devices, such as disks <b>130</b> of a disk array <b>160</b>. The caching filer <b>120</b> comprises a processor <b>122</b>, a memory <b>124</b>, one or more network adapters <b>126</b><i>a, b </i>and a storage adapter <b>128</b> interconnected by a system bus <b>125</b>. The caching filer <b>120</b> also includes a storage operating system <b>200</b> that preferably implements a high-level module, such as a file system, to logically organize the information as named file, directory, and virtual disk (hereinafter spear cial file or &#x201c;block&#x201d;) storage objects on the disks.</p>
<p id="p-0028" num="0027">In the illustrative embodiment, the memory <b>124</b> comprises storage locations that are addressable by the processor and adapters for storing software program code. A portion of the memory may be further organized as a buffer cache <b>170</b> for storing data structures associated with the present invention. The processor and adapters may, in turn, comprise processing elements and/or logic circuitry configured to execute the software code and manipulate the data structures. Storage operating system <b>200</b>, portions of which is typically resident in memory and executed by the processing elements, functionally organizes the filer <b>120</b> by, inter alia, invoking storage operations executed by the filer. It will be apparent to those skilled in the art that other processing and memory means, including various computer readable media, may be used for storing and executing program instructions pertaining to the inventive technique described herein.</p>
<p id="p-0029" num="0028">The network adapters <b>126</b><i>a, b </i>(hereinafter referred to generally as &#x201c;network adapter <b>126</b>&#x201d;) comprise the mechanical, electrical and signaling circuitry needed to connect the caching filer to a client and to the back-end storage system over a computer network <b>140</b>, which may comprise a point-to-point connection or a shared medium, such as a local area network (LAN) or wide area network (WAN). Illustratively, the computer network <b>140</b> may be embodied as an Ethernet network or a Fibre Channel (FC) network. The client <b>110</b> may communicate with the filer <b>120</b> over network <b>140</b> by exchanging discrete frames or packets of data according to pre-defined protocols, such as the Transmission Control Protocol/Internet Protocol (TCP/IP).</p>
<p id="p-0030" num="0029">The client <b>110</b> may be a general-purpose computer configured to execute applications <b>112</b>. Moreover, the client <b>110</b> may interact with the caching filer <b>120</b> in accordance with a client/server model of information delivery. That is, the client may request the services of the caching filer, and the filer may return the results of the services requested by the client, by exchanging packets over the network <b>140</b>. The clients may issue packets including file-based access protocols, such as the Common Internet File System (CIFS) protocol or Network File System (NFS) protocol, over TCP/IP when accessing information in the form of files and directories. Alternatively, the client may issue packets including block-based access protocols, such as the Small Computer Systems Interface (SCSI) protocol encapsulated over TCP (iSCSI) and SCSI encapsulated over Fibre Channel (FCP), when accessing information in the form of blocks.</p>
<p id="p-0031" num="0030">The storage adapter <b>128</b> cooperates with the storage operating system <b>200</b> executing on the filer <b>120</b> to access information requested by a user (or client). The information may be stored on any type of attached array of writable storage device media such as video tape, optical, DVD, magnetic tape, bubble memory, electronic random access memory, micro-electro mechanical and any other similar media adapted to store information, including data and parity information. However, as illustratively described herein, the information is preferably stored on the disks <b>130</b>, such as HDD and/or DASD, of array <b>160</b>. The storage adapter includes input/output (I/O) interface circuitry that couples to the disks over an I/O interconnect arrangement, such as a conventional highperformance, FC serial link topology.</p>
<p id="p-0032" num="0031">Storage of information on array <b>160</b> is preferably implemented as one or more storage &#x201c;volumes&#x201d; that comprise a collection of physical storage disks <b>130</b> cooperating to define an overall logical arrangement of volume block number (vbn) space on the volume(s). Each logical volume is generally, although not necessarily, associated with its is own file system. The disks within a logical volume/file system are typically organized as one or more groups, wherein each group may be operated as a Redundant Array of Independent (or Inexpensive) Disks (RAID). Most RAID implementations, such as a RAID-4 level implementation, enhance the reliability/integrity of data storage through the redundant writing of data stripes across a given number of physical disks in the RAID group, and the appropriate storing of parity information with respect to the striped data. An illustrative example of a RAID implementation is a RAID-4 level implementation, although it should be understood that other types and levels of RAID implementations may be used in accordance with the inventive principles described herein.</p>
<p id="p-0033" num="0032">In an illustrative embodiment, the cache function of the caching filer <b>120</b> is provided, in part, by a &#x201c;local cache&#x201d;. In this context, the local cache denotes a cache memory hierarchy that includes (i) a high-level processor cache <b>123</b>, (ii) an intermediate-level buffer cache <b>170</b> and (iii) a low-level &#x201c;tertiary&#x201d; cache volume <b>150</b> comprising one or more disks <b>130</b> coupled to the filer. According to an aspect of the invention described further herein, the cache volume <b>150</b> is illustratively embodied as a sparse volume adapted to serve data requested by a client <b>110</b> from one or more storage objects, e.g., files, having at least one block (i.e., an absent block) that may be missing from the cache volume <b>150</b> (i.e., not stored locally on its disk). The missing data of an absent block is stored on the back-end storage system and is illustratively retrieved (&#x201c;filled&#x201d;) using a remote fetch operation in a manner that is transparent to the client.</p>
<p id="p-0034" num="0033">The back-end storage system is a computer illustratively embodied as an origin server <b>180</b> that, like caching filer <b>120</b>, provides storage service relating to the organization of information on disks organized as an origin volume <b>185</b>. The origin server <b>180</b> is operatively interconnected with the caching filer <b>120</b> over network <b>140</b> and generally comprises hardware similar to filer <b>120</b>. However, the origin server <b>180</b> may alternatively execute a modified storage operating system that adapts that storage system for use as an origin server. In an alternate embodiment described further herein, there may be a plurality of caching filers <b>120</b> coupled to origin server <b>180</b> in network caching system environment <b>100</b>.</p>
<heading id="h-0009" level="1">B. Storage Operating System</heading>
<p id="p-0035" num="0034">To facilitate access to the disks <b>130</b>, the storage operating system <b>200</b> implements a write-anywhere file system that cooperates with virtualization modules to manage the cache (sparse) volume <b>150</b> and &#x201c;virtualize&#x201d; the storage space provided by disks <b>130</b>. The file system logically organizes the information as a hierarchical structure of named directories and files on the disks. Each on-disk file may be implemented as set of disk blocks configure to store information, such as data, whereas the directory may be implemented as a specially formatted file in which names and links to other files and directories are stored. The virtualization modules allow the file system to further logically organize information as a hierarchical structure of blocks on the disks that are exported as named logical unit numbers (luns).</p>
<p id="p-0036" num="0035">In the illustrative embodiment, the storage operating system is preferably the NetApp&#xae; Data ONTAP&#x2122; operating system available from Network Appliance, Inc., Sunnyvale, Calif. that implements a Write Anywhere File Layout (WAFL&#x2122;) file system. However, it is expressly contemplated that any appropriate storage operating system may be enhanced for use in accordance with the inventive principles described herein. As such, where the term &#x201c;WAFL&#x201d; is employed, it should be taken broadly to refer to any file system that is otherwise adaptable to the teachings of this invention.</p>
<p id="p-0037" num="0036"><figref idref="DRAWINGS">FIG. 2</figref> is a schematic block diagram of the storage operating system <b>200</b> that may be advantageously used with the present invention. The storage operating system cornprises a series of software layers organized to form an integrated network protocol stack or, more generally, a multi-protocol engine that provides data paths for multi-protocol clients to access information stored on the caching filer using block and file access protocols. The protocol stack includes a media access layer <b>210</b> of network drivers (e.g., gigabit Ethernet drivers) that interfaces to network protocol layers, such as the IP layer <b>212</b> and its supporting transport mechanisms, the TCP layer <b>214</b> and the User Datagram Protocol (UDP) layer <b>216</b>. A file system protocol layer provides multi-protocol file access and, to that end, includes support for the Direct Access File System (DAFS) protocol <b>218</b>, the NFS protocol <b>220</b>, the CIFS protocol <b>222</b> and the Hypertext Transfer Protocol (HTTP) protocol <b>224</b>. A VI layer <b>226</b> implements the VI architecture to provide direct is access transport (DAT) capabilities, such as RDMA, as required by the DAFS protocol <b>218</b>.</p>
<p id="p-0038" num="0037">An iSCSI driver layer <b>228</b> provides block protocol access over the TCP/IP network protocol layers, while a FC driver layer <b>230</b> receives and transmits block access requests and responses to and from the caching filer. The FC and iSCSI drivers provide FCspecific and iSCSI-specific access control to the blocks and, thus, manage exports of luns to either iSCSI or FCP or, alternatively, to both iSCSI and FCP when accessing the blocks on the filer. In addition, the storage operating system includes a storage module embodied as a RAID system <b>240</b> that manages the storage and retrieval of information to and from the volumes/disks in accordance with I/O operations, and a disk driver system <b>250</b> that implements a disk access protocol such as, e.g., the SCSI protocol.</p>
<p id="p-0039" num="0038">The storage operating system <b>200</b> further comprises a NetApp Remote Volume (NRV) protocol layer <b>295</b> that interfaces with file system <b>280</b>. The NRV protocol is generally utilized for remote fetching of data blocks that are not stored locally on disk. However, as described herein, the NRV protocol may be further utilized in caching filerto-origin server communication to fetch absent blocks in the sparse cache volume <b>150</b> in accordance with the principles of the present invention. It should be noted that, in alternate embodiments, conventional file/block level protocols, such as the NFS protocol, or other proprietary block fetching protocols may be used in place of the NRV protocol within the teachings of the present invention.</p>
<p id="p-0040" num="0039">As described further herein, a demand generator <b>296</b> of the storage operating system <b>200</b> is used to systematically retrieve data blocks that are not stored locally on disk, i.e., on cache volume <b>150</b> of caching filer <b>120</b>, while a pump module <b>298</b> may be used to regulate the retrieval of those and other data blocks requested from the origin server <b>180</b>. Moreover, in accordance with the present invention, a truncator <b>294</b> implements a cache ejection policy to reclaim storage space as the local cache (e.g., cache volume <b>150</b>) becomes full and a Remote Update Engine (RUE <b>292</b>) is used to forward any file system operations that would modify the cache volume <b>150</b> to the origin server <b>180</b>. Although shown and described herein as separate software modules, the demand generator <b>296</b>, is pump <b>298</b>, truncator <b>294</b> and RUE <b>292</b> may be alternatively integrated within a single module of the operating system <b>200</b>. Moreover, it should be noted that these modules may be implemented as hardware, software, firmware, or any combination thereof.</p>
<p id="p-0041" num="0040">Bridging the disk software layers with the multi-protocol engine layers is a virtualization system that is implemented by file system <b>280</b> interacting with virtualization modules illustratively embodied as, e.g., vdisk module <b>290</b> and SCSI target module <b>270</b>. The vdisk module <b>290</b> is layered on the file system <b>280</b> to enable access by administrative interfaces, such as a user interface (UI) <b>275</b>, in response to a user (such as a system administrator) issuing commands to the filer. The UI <b>275</b> is disposed over the storage operating system in a manner that enables administrative or user access to the various layers and systems. The SCSI target module <b>270</b> is disposed between the FC and iSCSI drivers <b>228</b>, <b>230</b> and the file system <b>280</b> to provide a translation layer of the virtualization system between the block (lun) space and the file system space, where luns are represented as blocks.</p>
<p id="p-0042" num="0041">The file system is illustratively a message-based system that provides logical volume management capabilities for use in access to the information stored on the storage devices, such as disks. That is, in addition to providing file system semantics, the file system <b>280</b> provides functions normally associated with a volume manager. These functions include (i) aggregation of the disks, (ii) aggregation of storage bandwidth of the disks, and (iii) reliability guarantees, such as minoring and/or parity (RAID). The file system <b>280</b> illustratively implements the WAFL file system (hereinafter generally the &#x201c;write-anywhere file system&#x201d;) having an on-disk format representation that is block-based using, e.g., 4 kilobyte (kB) blocks and using index nodes (&#x201c;inodes&#x201d;) to identify files and file attributes (such as creation time, access permissions, size and block location). The file system uses files to store metadata describing the layout of its file system; these metadata files include, among others, an inode file. A file handle, i.e., an identifier that includes an inode number, is used to retrieve an inode from disk.</p>
<p id="p-0043" num="0042">Broadly stated, all inodes of the write-anywhere file system are organized into the inode file. A file system (fs) info block specifies the layout of information in the file system and includes an inode of a file that includes all other inodes of the file system. Each logical volume (file system) has an fsinfo block that is preferably stored at a fixed location within, e.g., a RAID group. The inode of the root fsinfo block may directly reference (point to) blocks of the inode file or may reference indirect blocks of the inode file that, in turn, reference direct blocks of the inode file. Within each direct block of the inode file are embedded inodes, each of which may reference indirect blocks that, in turn, reference data blocks of a file.</p>
<p id="p-0044" num="0043">Operationally, a request from the client <b>110</b> is forwarded as a packet over the computer network <b>140</b> and onto the caching filer <b>120</b> where it is received at the network adapter <b>126</b>. A network driver (of layer <b>210</b> or layer <b>230</b>) processes the packet and, if appropriate, passes it on to a network protocol and file access layer for additional processing prior to forwarding to the write-anywhere file system <b>280</b>. As described further herein, if the request modifies data stored on the cache volume <b>150</b>, the caching filer <b>120</b> conveys the request to the origin server <b>180</b> via an NRV write request. However, if the request does not modify data on the volume <b>150</b>, the request is passed directly into the file system <b>280</b>, which attempts to service the request. If the data is not resident on the local cache (resulting in a &#x201c;cache miss&#x201d;), the caching filer sends an NRV read request to the origin server <b>180</b> to fetch the missing data. Upon receiving a response from the server <b>180</b>, the caching filer stores the fetched data in its local cache, constructs a reply with the requested data and returns that reply to the client <b>110</b>.</p>
<p id="p-0045" num="0044">However, if the requested data is resident in the local cache, the caching filer (file system <b>280</b>) services that request. To that end, the file system generates operations to load (retrieve) the requested data from disk <b>130</b> if it is not resident &#x201c;in core&#x201d;, i.e., in the buffer cache <b>170</b>. Illustratively this operation may be embodied as a Load_Block( ) function <b>284</b> of the file system <b>280</b>. If the information is not in the cache <b>170</b>, the file system <b>280</b> indexes into the inode file using the inode number to access an appropriate entry and retrieve a logical vbn. The file system then passes a message structure including the logical vbn to the RAID system <b>240</b>; the logical vbn is mapped to a disk identifier and disk block number (disk,dbn) and sent to an appropriate driver (e.g., SCSI) of the disk driver is system <b>250</b>. The disk driver accesses the dbn from the specified disk <b>130</b> and loads the requested data block(s) in buffer cache <b>170</b> for processing by the filer. Upon completion of the request, the filer (and operating system) returns a reply to the client <b>110</b> over the network <b>140</b>.</p>
<p id="p-0046" num="0045">The file system <b>280</b> generally provides the Load_Block( ) function <b>284</b> to retrieve one or more blocks from disk. These blocks may be retrieved in response to a read request or an exemplary read ahead algorithm directed to, e.g., a file. As described further herein, if any requested blocks within a buffer tree of the file contain a special ABSENT value (thereby denoting absent blocks), then the Load_Block( ) function <b>284</b> initiates a fetch operation to retrieve the absent blocks from an appropriate backing store (such, e.g., origin server <b>180</b>) using the illustrative NRV protocol <b>295</b>. Once the blocks (including any data blocks) have been retrieved, the Load_Block( ) function <b>284</b> returns with the requested data. The NRV protocol is further described in the above-referenced U.S. Pat. No. 7,689,609, issued Mar. 30, 2010, entitled Architecture for Supporting of Sparse Volumes, by Jason Lango et al. However, it should be noted that any other suitable file or block based protocol that can retrieve data from a remote backing store, including, e.g., the NFS protocol, can be advantageously used with the present invention. The file system also illustratively includes a Load_Inode( ) function <b>288</b> that retrieves inode and file geometry when first accessing a file.</p>
<p id="p-0047" num="0046">It should be further noted that the software path through the storage operating system layers described above needed to perform data storage access for the client request received at the caching filer may alternatively be implemented in hardware. That is, in an alternate embodiment of the invention, a storage access request data path may be implemented as logic circuitry embodied within a field programmable gate array (FPGA) or an application specific integrated circuit (ASIC). This type of hardware implementation increases the performance of the storage service provided by filer <b>120</b> in response to a request issued by client <b>110</b>. Moreover, in another alternate embodiment of the invention, the processing elements of adapters <b>126</b>, <b>128</b> may be configure to offload some or all of the packet processing and storage access operations, respectively, from processor <b>122</b>, to thereby increase the performance of the storage service provided by the filer. It is expressly contemplated that the various processes, architectures and procedures described herein can be implemented in hardware, firmware or software.</p>
<p id="p-0048" num="0047">As used herein, the term &#x201c;storage operating system&#x201d; generally refers to the computer-executable code operable to perform a storage function in a storage system, e.g., that manages data access and may, in the case of a caching filer, implement file system semantics. In this sense, the ONTAP software is an example of such a storage operating system implemented as a microkernel and including the WAFL layer to implement the WAFL file system semantics and manage data access. The storage operating system can also be implemented as an application program operating over a general-purpose operating system, such as UNIX&#xae; or Windows NT&#xae;, or as a general-purpose operating system with configurable functionality, which is configured for storage applications as described herein.</p>
<p id="p-0049" num="0048">In addition, it will be understood to those skilled in the art that the inventive system and method described herein may apply to any type of special-purpose (e.g., file server, filer or multi-protocol storage appliance) or general-purpose computer, including a standalone computer or portion thereof, embodied as or including a storage system. An example of a multi-protocol storage appliance that may be advantageously used with the present invention is described in U.S. patent application Ser. No. 10/215,917 titled Multi-protocol Storage Appliance that Provides Integrated Support for File and Block Access Protocols, filed on Aug. 9, 2002, which was published as U.S. Patent Publication No. 2004/0030668 A1 on Feb. 12, 2004, now issued as U.S. Pat. No. 7,873,700. Moreover, the teachings of this invention can be adapted to a variety of storage system architectures including, but not limited to, a network-attached storage environment, a storage area network and disk assembly directly-attached to a client or host computer. The term &#x201c;storage system&#x201d; should therefore be taken broadly to include such arrangements in addition to any subsystems configure to perform a storage function and associated with other equipment or systems.</p>
<heading id="h-0010" level="1">C. File System Organization</heading>
<p id="p-0050" num="0049">In the illustrative embodiment, a file is represented in the write-anywhere file system as an inode data structure adapted for storage on the disks <b>130</b>. <figref idref="DRAWINGS">FIG. 3</figref> is a schematic block diagram of an inode <b>300</b>, which preferably includes a metadata section <b>310</b> and a data section <b>350</b>. The information stored in the metadata section <b>310</b> of each inode <b>300</b> describes the file and, as such, includes the type (e.g., regular, directory, virtual disk) <b>312</b> of file, the size <b>314</b> of the file, time stamps (e.g., access and/or modification times) <b>316</b> for the file and ownership, i.e., user identifier (UID <b>318</b>) and group ID (GID <b>320</b>), of the file. The contents of the data section <b>350</b> of each inode, however, may be interpreted differently depending upon the type of file (inode) defined within the type field <b>312</b>. For example, the data section <b>350</b> of a directory inode contains metadata controlled by the file system, whereas the data section of a regular inode contains file system data. In this latter case, the data section <b>350</b> includes a representation of the data associated with the file.</p>
<p id="p-0051" num="0050">Specifically, the data section <b>350</b> of a regular on-disk inode may include file system data or pointers, the latter referencing 4 kB data blocks on disk used to store the file system data. Each pointer is preferably a logical vbn to facilitate efficiency among the file system and the RAID system <b>240</b> when accessing the data on disks. Given the restricted size (e.g., 128 bytes) of the inode, file system data having a size that is less than or equal to 64 bytes is represented, in its entirety, within the data section of that inode. However, if the file system data is greater than 64 bytes but less than or equal to 64 kB, then the data section of the inode (e.g., a first level inode) comprises up to 16 pointers, each of which references a 4 kB block of data on the disk.</p>
<p id="p-0052" num="0051">Moreover, if the size of the data is greater than 64 kB but less than or equal to 64 megabytes (MB), then each pointer in the data section <b>350</b> of the inode (e.g., a second level inode) references an indirect block (e.g., a first level block) that contains up to 1024 pointers, each of which references a 4 kB data block on disk. For file system data having a size greater than 64 MB, each pointer in the data section <b>350</b> of the inode (e.g., a third level inode) references a double-indirect block (e.g., a second level block) that contains up to 1024 pointers, each referencing an indirect (e.g., a first level) block. The indirect block, in turn, contains 1024 pointers, each of which references a 4 kB data block on disk. When accessing a file, each block of the file may be loaded from disk <b>130</b> into the buffer cache <b>170</b>.</p>
<p id="p-0053" num="0052">When an on-disk inode (or block) is loaded from disk <b>130</b> into buffer cache <b>170</b>, its corresponding in core structure embeds the on-disk structure. For example, the dotted line surrounding the inode <b>300</b> (<figref idref="DRAWINGS">FIG. 3</figref>) indicates the in core representation of the on-disk inode structure. The in core structure is a block of memory that stores the on-disk structure plus additional information needed to manage data in the memory (but not on disk). The additional information may include, e.g., a dirty bit <b>360</b>. After data in the inode (or block) is updated/modified as instructed by, e.g., a write operation, the modified data is marked dirty using the dirty bit <b>360</b> so that the inode (block) can be subsequently &#x201c;flushed&#x201d; (stored) to disk. The in core and on-disk format structures of the WAFL file system, including the inodes and inode file, are disclosed and described in the previously incorporated U.S. Pat. No. 5,819,292 titled Method for Maintaining Consistent States of a File System and for Creating User-Accessible Read-Only Copies of a File System by David Hitz et al., issued on Oct. 6, 1998.</p>
<p id="p-0054" num="0053"><figref idref="DRAWINGS">FIG. 4</figref> is a schematic block diagram of an embodiment of a buffer tree of a file that may be advantageously used with the present invention. The buffer tree is an internal representation of blocks for a file (e.g., file <b>400</b>) loaded into the buffer cache <b>170</b> and maintained by the write-anywhere file system <b>280</b>. A root (top-level) inode <b>402</b>, such as an embedded inode, references indirect (e.g., level <b>1</b>) blocks <b>404</b>. Note that there may be additional levels of indirect blocks (e.g., level <b>2</b>, level <b>3</b>) depending upon the size of the file. The indirect blocks (and inode) contain pointers <b>405</b> that ultimately reference data blocks <b>406</b> used to store the actual data of the file. That is, the data of file <b>400</b> are contained in data blocks and the locations of these blocks are stored in the indirect blocks of the file. Each level <b>1</b> indirect block <b>404</b> may contain pointers to as many as 1024 data blocks. According to the &#x201c;write anywhere&#x201d; nature of the file system, these blocks may be located anywhere on the disks <b>130</b>.</p>
<p id="p-0055" num="0054">A file system layout is provided that apportions an underlying physical volume into one or more virtual volumes (vvols) of a storage system, such as caching filer <b>120</b>. An example of such a file system layout is described in U.S. patent application Ser. No. 10/836,817 titled Extension of Write Anywhere File System Layout, by John K. Edwards et al., now issued as U.S. Pat. No. 7,409,494 on Aug. 5, 2008, and assigned to Network Appliance, Inc. The underlying physical volume is an aggregate comprising one or more groups of disks, such as RAID groups, of the caching filer. The aggregate has its own physical volume block number (pvbn) space and maintains metadata, such as block allocation structures, within that pvbn space. Each vvol has its own virtual volume block number (vvbn) space and maintains metadata, such as block allocation structures, within that vvbn space. Each vvol is a file system that is associated with a container file; the container file is a file in the aggregate that contains all blocks used by the vvol. Moreover, each vvol comprises data blocks and indirect blocks that contain block pointers that point at either other indirect blocks or data blocks.</p>
<p id="p-0056" num="0055">In one embodiment, pvbns are used as block pointers within buffer trees of files (such as file <b>400</b>) stored in a vvol. This &#x201c;hybrid&#x201d; vvol embodiment involves the insertion of only the pvbn in the parent indirect block (e.g., inode or indirect block). On a read path of a logical volume, a &#x201c;logical&#x201d; volume (vol) info block has one or more pointers that reference one or more fsinfo blocks, each of which, in turn, points to an Mode file and its corresponding Mode buffer tree. The read path on a vvol is generally the same, following pvbns (instead of vvbns) to find appropriate locations of blocks; in this context, the read path (and corresponding read performance) of a vvol is substantially similar to that of a physical volume. Translation from pvbn-to-disk,dbn occurs at the file system/RAID system boundary of the storage operating system <b>200</b>.</p>
<p id="p-0057" num="0056">In an illustrative dual vbn hybrid (&#x201c;flexible&#x201d;) vvol embodiment, both a pvbn and its corresponding vvbn are inserted in the parent indirect blocks in the buffer tree of a file. That is, the pvbn and vvbn are stored as a pair for each block pointer in most buffer tree structures that have pointers to other blocks, e.g., level <b>1</b> (L<b>1</b>) indirect blocks, Mode file level <b>0</b> (L<b>0</b>) blocks. <figref idref="DRAWINGS">FIG. 5</figref> is a schematic block diagram of an illustrative embodiment of a buffer tree of a file <b>500</b> that may be advantageously used with the present invention. A root (top-level) Mode 502, such as an embedded Mode, references indirect (e.g., level <b>1</b>) blocks <b>504</b>. Note that there may be additional levels of indirect blocks (e.g., level <b>2</b>, level <b>3</b>) depending upon the size of the file. The indirect blocks (and Mode) contain pvbn/vvbn pointer pair structures <b>508</b> that ultimately reference data blocks <b>506</b> used to store the actual data of the file.</p>
<p id="p-0058" num="0057">The pvbns reference locations on disks of the aggregate, whereas the vvbns reference locations within files of the vvol. The use of pvbns as block pointers <b>508</b> in the indirect blocks <b>504</b> provides efficiencies in the read paths, while the use of vvbn block pointers provides efficient access to required metadata. That is, when freeing a block of a file, the parent indirect block in the file contains readily available vvbn block pointers, which avoids the latency associated with accessing an owner map to perform pvbn-tovvbn translations; yet, on the read path, the pvbn is available.</p>
<p id="p-0059" num="0058">As noted, each Mode has 64 bytes in its data section that, depending upon the size of the Mode file (e.g., greater than 64 bytes of data), function as block pointers to other blocks. For traditional and hybrid volumes, those 64 bytes are embodied as 16 block pointers, i.e., sixteen (16) 4 byte block pointers. For the illustrative dual vbn flexible volume, the 64 bytes of an Mode are embodied as eight (8) pairs of 4 byte block pointers, wherein each pair is a vvbn/pvbn pair. In addition, each indirect block of a traditional or hybrid volume may contain up to 1024 (pvbn) pointers; each indirect block of a dual vbn flexible volume, however, has a maximum of 510 (pvbn/vvbn) pairs of pointers.</p>
<p id="p-0060" num="0059">Moreover, one or more of pointers <b>508</b> may contain a special ABSENT value to signify that the object(s) (e.g., an indirect block or data block) referenced by the pointer(s) is not locally stored (e.g., on the cache volume <b>150</b>) and, thus, must be fetched (retrieved) from the origin volume <b>185</b> of origin server <b>180</b>. In the illustrative embodiment, the Load_Block( ) function <b>284</b> of file system <b>280</b> interprets the content of the each pointer and, if a requested block is ABSENT, initiates transmission of an appropriate request (e.g., a remote fetch operation) for the data to the origin server <b>180</b> using, e.g. the NRV protocol.</p>
<p id="p-0061" num="0060">It should be noted that the cache volume <b>150</b> is illustratively embodied as a flexible vvol, whereas the origin volume <b>185</b> could be either a flexible vvol or a traditional volume, primarily because of the use of a logical file protocol (NRV). As noted, a traditional volume and flexible vvol differ in their indirect block format; however, the indirect block format difference is irrelevant in the case of the network caching system. In other words, because there is no physical relationship between the cache volume and the origin volume, the origin volume's type is irrelevant.</p>
<p id="p-0062" num="0061"><figref idref="DRAWINGS">FIG. 6</figref> is a schematic block diagram of an embodiment of an aggregate <b>600</b> that may be advantageously used with the present invention. Luns (blocks) <b>602</b>, directories <b>604</b>, qtrees <b>606</b> and files <b>608</b> may be contained within vvols <b>610</b>, such as dual vbn flexible vvols, that, in turn, are contained within the aggregate <b>600</b>. The aggregate <b>600</b> is illustratively layered on top of the RAID system, which is represented by at least one RAID plex <b>650</b> (depending upon whether the storage configuration is mirrored), wherein each plex <b>650</b> comprises at least one RAID group <b>660</b>. Each RAID group further comprises a plurality of disks <b>630</b>, e.g., one or more data (D) disks and at least one (P) parity disk.</p>
<p id="p-0063" num="0062">Whereas the aggregate <b>600</b> is analogous to a physical volume of a conventional storage system, a vvol is analogous to a file within that physical volume. That is, the aggregate <b>600</b> may include one or more files, wherein each file contains a vvol <b>610</b> and wherein the sum of the storage space consumed by the vvols is physically smaller than (or equal to) the size of the overall physical volume. The aggregate utilizes a physical pvbn space that defines a storage space of blocks provided by the disks of the physical volume, while each embedded vvol (within a file) utilizes a logical vvbn space to organize those blocks, e.g., as files. Each vvbn space is an independent set of numbers that corresponds to locations within the file, which locations are then translated to dbns on disks. Since the vvol <b>610</b> is also a logical volume, it has its own block allocation structures (e.g., active, space and summary maps) in its vvbn space.</p>
<p id="p-0064" num="0063">A container file is a file in the aggregate that contains all blocks used by a vvol. The container file is an internal (to the aggregate) feature that supports a vvol; illustratively, there is one container file per vvol. Similar to a pure logical volume in a file approach, the container file is a hidden file (not accessible to a user) in the aggregate that holds every block in use by the vvol. The aggregate includes an illustrative hidden metais data root directory that contains subdirectories of vvols:</p>
<heading id="h-0011" level="1">WAFL/fsid/filesystem File, Storage Label File</heading>
<p id="p-0065" num="0064">Specifically, a physical file system (WAFL) directory includes a subdirectory for each vvol in the aggregate, with the name of subdirectory being a file system identifier (fsid) of the vvol. Each fsid subdirectory (vvol) contains at least two files, a filesystem file and a storage label file. The storage label file is illustratively a 4 kB file that contains metadata similar to that stored in a conventional raid label. In other words, the storage label file is the analog of a raid label and, as such, contains information about the state of the vvol such as, e.g., the name of the vvol, a universal unique identifier (uuid) and fsid of the vvol, whether it is online, being created or being destroyed, etc.</p>
<p id="p-0066" num="0065"><figref idref="DRAWINGS">FIG. 7</figref> is a schematic block diagram of an on-disk representation of an aggregate <b>700</b>. The storage operating system <b>200</b>, e.g., the RAID system <b>240</b>, assembles a physical volume of pvbns to create the aggregate <b>700</b>, with pvbns <b>1</b> and <b>2</b> comprising a &#x201c;physical&#x201d; volinfo block <b>702</b> for the aggregate. The volinfo block <b>702</b> contains block pointers to fsinfo blocks <b>704</b>, each of which may represent a snapshot of the aggregate. Each fsinfo block <b>704</b> includes a block pointer to an inode file <b>706</b> that contains inodes of a plurality of files, including an owner map <b>710</b>, an active map <b>712</b>, a summary map <b>714</b> and a space map <b>716</b>, as well as other special metadata files. The inode file <b>706</b> further includes a root directory <b>720</b> and a &#x201c;hidden&#x201d; metadata root directory <b>730</b>, the latter of which includes a namespace having files related to a vvol in which users cannot &#x201c;see&#x201d; the files. The hidden metadata root directory includes the WAFL/fsid/directory structure that contains filesystem file <b>740</b> and storage label file <b>790</b>. Note that root directory <b>720</b> in the aggregate is empty; all files related to the aggregate are organized within the hidden metadata root directory <b>730</b>.</p>
<p id="p-0067" num="0066">The hidden metadata root directory <b>730</b> also includes, per vvol, a sparse configuration metafile (&#x201c;sparse config file&#x201d; <b>732</b>) if the vvol is a sparse volume. The sparse config file <b>732</b> is thus associated with a sparse volume and, to that end, identifies (among other things) the host name of the origin server <b>180</b> and the origin volume <b>185</b>. During a mount process of the sparse volume, the sparse config file <b>732</b> is retrieved and converted is into an in-core format. Notably, the sparse config file also includes identifiers that indicate whether the sparse volume is a cache volume <b>150</b>. These identifiers allow the caching filer <b>120</b> to determine whether it should perform remote updates or local updates for various client requests; as described further herein, the caching filer of the network caching system environment <b>100</b> illustratively performs remote updates.</p>
<p id="p-0068" num="0067">In addition to being embodied as a container file having level <b>1</b> blocks organized as a container map, the filesystem file <b>740</b> includes block pointers that reference various file systems embodied as vvols <b>750</b>. The aggregate <b>700</b> maintains these vvols <b>750</b> at special reserved inode numbers. Each vvol <b>750</b> also has special reserved inode numbers within its vvol space that are used for, among other things, the block allocation bitmap structures. As noted, the block allocation bitmap structures, e.g., active map <b>762</b>, summary map <b>764</b> and space map <b>766</b>, are located in each vvol.</p>
<p id="p-0069" num="0068">Specifically, each vvol <b>750</b> has the same inode file structure/content as the aggregate, with the exception that there is no owner map and no WAFL/fsid/filesystem file, storage label file directory structure in a hidden metadata root directory <b>780</b>. To that end, each vvol <b>750</b> has a volinfo block <b>752</b> that points to one or more fsinfo blocks <b>800</b>, each of which may represent a snapshot, along with the active file system of the vvol. Each fsinfo block, in turn, points to an inode file <b>760</b> that, as noted, has the same inode structure/content as the aggregate with the exceptions noted above. Each vvol <b>750</b> has its own inode file <b>760</b> and distinct inode space with corresponding inode numbers, as well as its own root (fsid) directory <b>770</b> and subdirectories of files that can be exported separately from other vvols.</p>
<p id="p-0070" num="0069">The storage label file <b>790</b> contained within the hidden metadata root directory <b>730</b> of the aggregate is a small file that functions as an analog to a conventional raid label. A raid label includes physical information about the storage system, such as the volume name; that information is loaded into the storage label file <b>790</b>. Illustratively, the storage label file <b>790</b> includes the name <b>792</b> of the associated vvol <b>750</b>, the online/offline status <b>794</b> of the vvol, and other identity and state information <b>796</b> of the associated vvol (whether it is in the process of being created or destroyed).</p>
<heading id="h-0012" level="1">D. Sparse Volume</heading>
<p id="p-0071" num="0070">As noted, the cache volume <b>150</b> is illustratively embodied as a sparse volume and, accordingly, the terms &#x201c;cache volume <b>150</b>&#x201d; and &#x201c;sparse volume <b>150</b>&#x201d; may be used interchangeably hereinafter. The sparse volume <b>150</b> is identified by a special marking of an on-disk structure of the volume (vvol) to denote the inclusion of a file with an absent block. <figref idref="DRAWINGS">FIG. 8</figref> is a schematic block diagram of the on-disk structure, which illustratively is an exemplary fsinfo block <b>800</b>. The fsinfo block <b>800</b> includes a set of persistent consistency point image (PCPI) pointers <b>805</b>, a sparse volume flag field <b>810</b>, an inode for the inode file <b>815</b> and, in alternate embodiments, additional fields <b>820</b>. The PCPI pointers <b>805</b> are dual vbn (vvbn/pvbn) pairs of pointers to PCPIs (snapshots) associated with the file system. The sparse volume flag field <b>810</b> identifies whether the vvol described by the fsinfo block is sparse. In the illustrative embodiment, a flag is asserted in field <b>810</b> to identify the volume as sparse. The sparse volume flag field <b>810</b> may be further embodied as a type field identifying the type of a vvol associated with the fsinfo block. The inode is for the inode file <b>815</b> includes the inode containing the root-level pointers to the inode file <b>760</b> (<figref idref="DRAWINGS">FIG. 7</figref>) of the file system associated with the fsinfo block.</p>
<p id="p-0072" num="0071">Appropriate block pointer(s) of the file are marked (labeled) with special ABSENT value(s) to indicate that certain block(s), including data and/or indirect blocks, within the sparse volume <b>150</b> are not physically located on the caching filer serving the volume. The special ABSENT value further alerts the file system that the data is to be obtained from the alternate source, namely origin server <b>180</b>. In response to a data access request, the Load_Block( ) function <b>284</b> of the file system <b>280</b> detects whether an appropriate block pointer of a file is marked as ABSENT and, if so, transmits a remote NRV fetch (e.g., read) operation message from the caching filer to the origin server to fetch the required data. The fetch operation illustratively requests one or more file block numbers (fbns) of the file stored on the origin volume <b>185</b>. It should be noted that while the present description is written in terms of a single origin volume, the principles of the present invention may be applied to an environment where a single sparse volume is supported by a plurality of origin volumes, each of which may support the entire or a subset of the sparse volume. As such, the teachings should not be taken to be limited to a single origin volume.</p>
<p id="p-0073" num="0072">The origin server <b>180</b> retrieves the requested data from its storage devices and returns the requested data to the caching filer <b>120</b>, which processes the data access request and stores the returned data in its memory <b>124</b>. Subsequently, the file system <b>280</b> &#x201c;flushes&#x201d; (writes) the data stored in memory to local disk during a write allocation procedure. This could be in response to the data being marked as &#x201c;dirty,&#x201d; or other notation denoting to the file system that the data must be write allocated. In accordance with an illustrative write anywhere policy of the procedure, the file system <b>280</b> assigns pointer values (other than ABSENT values) to indirect block(s) of the file to thereby identify location(s) of the data stored locally within the cache volume <b>150</b>. Thus, the remote fetch operation is no longer needed to access the data.</p>
<p id="p-0074" num="0073">It should be noted that all NRV messages transmitted over the network <b>140</b> between the caching filer <b>120</b> and origin server <b>180</b> involve logical file addresses as opis posed to physical disk addresses. Accordingly, there is no need to size the caching filer storage in any relation to the origin server storage. When the requested data is provided to the caching filer, that data is write allocated and accorded the appropriate vvbn (and/or pvbn) block numbering. In other words, write allocation of the cache volume <b>150</b> is totally distinct from write allocation on the origin volume <b>185</b>.</p>
<p id="p-0075" num="0074">An example of a write allocation procedure that may be advantageously used with the present invention is described in U.S. patent application Ser. No. 10/836,090 titled, Extension of Write Anywhere File Layout Write Allocation, by John K. Edwards, now issued as U.S. Pat. No. 7,430,571 on Sep. 30, 2008, which application is hereby incorporated by reference. Broadly stated, block allocation proceeds in parallel on the flexible vvol and aggregate when write allocating a block within the vvol, with a write allocator <b>282</b> (<figref idref="DRAWINGS">FIG. 2</figref>) selecting an actual pvbn in the aggregate and a vvbn in the vvol. The write allocator adjusts block allocation bitmap structures, such an active map and space map, of the aggregate to record the selected pvbn and adjusts similar structures of the vvol to record the selected vvbn. A vvid (vvol identifier) of the vvol and the vvbn are inserted into owner map <b>710</b> of the aggregate at an entry defined by the selected pvbn. The selected pvbn is also inserted into a container map (not shown) of the destination vvol. Finally, an indirect block or inode file parent of the allocated block is updated with one or more block pointers to the allocated block. The content of the update operation depends on the vvol embodiment. For a dual vbn hybrid vvol embodiment, both the pvbn and vvbn are inserted in the indirect block or inode as block pointers.</p>
<heading id="h-0013" level="1">E. Network Caching System Operation</heading>
<p id="p-0076" num="0075">The present invention relates to a network caching system <b>100</b> having a multi-protocol caching filer <b>120</b> coupled to an origin server <b>180</b> to provide storage virtualization of data served by the filer in response to data access requests issued by multi-protocol clients <b>110</b> over a computer network <b>140</b>. The multi-protocol caching filer <b>120</b> includes file system <b>280</b> configured to manage a sparse volume that &#x201c;virtualizes&#x201d; a storage space of the data to thereby provide a cache function that enables access to data by the multi-protocol clients. To that end, the caching filer further includes a multi-protocol is engine of storage operating system <b>200</b> configured to translate the multi-protocol client data access requests into generic file system primitive operations executable by both the caching filer and the origin server <b>180</b>.</p>
<p id="p-0077" num="0076"><figref idref="DRAWINGS">FIG. 9</figref> is a flowchart illustrating the steps of a procedure <b>900</b> for processing a data modifying access request in accordance with an embodiment of the present invention. As used herein, a data modifying access request involves any operation that modifies the cache volume <b>150</b> of caching filer <b>120</b>. Examples of such modifying operations include create (file), set attribute and write operations. The procedure <b>900</b> starts at Step <b>902</b> and proceeds to Step <b>904</b> where a client write request is received at the caching filer <b>120</b>. In Step <b>906</b>, the appropriate protocol layer of the multi-protocol engine converts the write request into a generic file system write message for transfer to the file system <b>280</b>.</p>
<p id="p-0078" num="0077">In Step <b>908</b>, the file system determines whether the file system write message is directed to cache volume <b>150</b>, i.e., a sparse volume configured to support remote update operations. Illustratively, the file system renders this determination by examining the fsinfo block <b>800</b> and sparse config file <b>732</b>. As noted, the fsinfo block <b>800</b> has a sparse volume flag <b>810</b> that, if asserted, identifies the volume as a sparse volume. In addition, the sparse config file <b>732</b> contains identifiers that identify the sparse volume <b>150</b> in application type, i.e., whether it supports remote updates for data modifying access requests. If the write message is not directed to the cache volume, the file system passes the file system write message to a conventional write handler of the file system for processing as a primitive write operation request (Step <b>910</b>) and the procedure ends at Step <b>922</b>.</p>
<p id="p-0079" num="0078">However, if the write message is directed to cache volume <b>150</b>, the file system forwards the write message to the RUE <b>292</b> in Step <b>912</b>. In Step <b>914</b>, the RUE <b>292</b> converts the generic file system write message into a remote update request and, in Step <b>916</b>, sends the update request to the pump module <b>298</b>. In the illustrative embodiment, a pump worker thread of the pump module receives the request, which is then prioritized among other requests. In Step <b>918</b>, the remote update request is translated into an NRV write message and, in Step <b>920</b>, the NRV write message is sent over the network <b>140</b> to is the origin server <b>180</b> for execution by a file system on the server. The procedure then ends at Step <b>922</b>.</p>
<p id="p-0080" num="0079"><figref idref="DRAWINGS">FIG. 10</figref> is a flowchart illustrating the steps of a procedure <b>1000</b> for processing a non-data modifying access request in accordance with an embodiment of the present invention. As used herein, a non-data modifying access request involves any operation that does not modify the cache volume <b>150</b> of caching filer <b>120</b>. An example of a non-modifying operation is a read operation. The procedure <b>1000</b> starts at Step <b>1002</b> and proceeds to Step <b>1004</b> where a client read request is received at the caching filer <b>120</b>. In Step <b>1006</b>, the appropriate protocol layer of the multi-protocol engine converts the read request into a generic file system read message for transfer to the file system <b>280</b> which, in Step <b>1008</b>, passes the message to a conventional read handler of the file system for processing as a primitive read operation request.</p>
<p id="p-0081" num="0080">In Step <b>1010</b>, a determination is made as to whether the requested data is resident on the local cache of the caching filer. Illustratively, the file system renders this determination by loading one or more blocks using, e.g., the Load_Block( ) <b>284</b> function and examining a block pointer of each block to determine whether it is marked ABSENT. If the block is not absent, i.e., the requested data is resident on the local cache, the file system <b>280</b> services the read message/request (as previously described) in Step <b>1012</b> and the procedure ends at Step <b>1032</b>.</p>
<p id="p-0082" num="0081">However, if the block is absent, i.e., the requested data is not resident on the local cache, the file system converts the read message into a fetch request that is sent to the pump module <b>298</b> in Step <b>1014</b>. A pump worker thread of the pump module receives the request, which is then prioritized among other requests. In Step <b>1016</b>, the pump thread maintains a placeholder for storing the fetch request until a response is received. In Step <b>1018</b>, the pump thread cooperates with the NRV module <b>295</b> to translate the fetch request into an NRV read message and, in Step <b>1020</b>, the NRV read message is sent over the network <b>140</b> to the origin server <b>180</b> for execution by the server.</p>
<p id="p-0083" num="0082">In Step <b>1022</b>, the origin server responds to the caching filer (pump thread) with the fetched data and, in Step <b>1024</b>, the pump thread cooperates with a fill handler of the is file system to service the pending read/fetch request maintained on the placeholder at the pump module by, e.g., performing a fill operation using the fetched data. In Step <b>1026</b>, the file system constructs a reply with the requested data and, in Step <b>1028</b>, returns that reply to the client. In Step <b>1030</b>, write allocation is subsequently performed at the file system to store the fetched data on one or more local storage devices of the caching filer and the procedure ends at Step <b>1032</b>.</p>
<heading id="h-0014" level="1">F. Cache Coherency</heading>
<p id="p-0084" num="0083">In a general network caching system embodiment of the present invention, multiple clients <b>110</b> may be coupled to each of a plurality of caching filers <b>120</b>, and both the clients and filers may be coupled to the origin server <b>180</b>. It is thus possible that, in this general system embodiment, the origin volume <b>185</b> may be modified by clients and/or caching filers <b>120</b>. As a result, a cache coherency policy is needed to insure that data accessed by clients either directly from the origin server <b>180</b> or via a caching filer <b>120</b> is always consistent. According to the invention, a cache coherency policy used in the network caching system <b>100</b> specifies that the caching filer <b>120</b> is configured to check with the origin server <b>180</b> to determine if changes occurred to data prior to delivering that data to a client <b>110</b>.</p>
<p id="p-0085" num="0084">In response to a client data access request, e.g., a read request, directed to a particular storage object, e.g., a file, the file system <b>280</b> of the caching filer <b>120</b> sends a fetch on demand (FOD) request to the origin server <b>180</b> requesting a latest copy of the file's attributes, e.g., modification time, number of links, creation time, etc. A change in any of the attributes indicates that the file has been modified since it was last cached at the filer. As a result, the caching filer triggers an ejection of the current file stored on its local cache. The caching filer then generates appropriate fetch operations using NRV read messages to retrieve the requested data from the origin server.</p>
<p id="p-0086" num="0085"><figref idref="DRAWINGS">FIG. 11</figref> is a flowchart illustrating the steps of a procedure <b>1100</b> for implementing a cache coherency policy in accordance with an embodiment of the present invention. The procedure <b>1100</b> starts at Step <b>1102</b> and proceeds to Step <b>1104</b> where a client data access request, e.g., a read request, is received at the caching filer. In Step <b>1106</b>, the reis quest is converted into a file system read message for transfer to the file system <b>280</b> which, in Step <b>1108</b>, passes the message to a conventional read handler of the file system for processing as a primitive read operation request. In Step <b>1110</b>, the read handler retrieves an inode of the file involved in the read request/message using, e.g., the Load_Inode( ) <b>288</b> function.</p>
<p id="p-0087" num="0086">In Step <b>1112</b>, the file system also passes the read message to the pump module as a FOD request to retrieve attributes of the inode from the origin server. In Step <b>1114</b>, a pump thread maintains a placeholder for storing the FOD request until a response is received. In Step <b>1116</b>, the pump thread cooperates with the NRV module to translate the FOD request into an NRV read message and, in Step <b>1118</b>, the NRV read message is sent over the network <b>140</b> to the origin server <b>180</b> for execution by the server. In Step <b>1120</b>, the origin server responds to the caching filer (pump thread) with the attributes and, in Step <b>1122</b>, the pump thread cooperates with a fill handler of the file system to service the pending read/FOD request maintained on the placeholder at the pump module by, e.g., performing a fill operation using the response.</p>
<p id="p-0088" num="0087">It should be noted that a fill operation that has no data (i.e., a zero length read or &#x201c;verify&#x201d;) only carries the attributes; thus, in Step <b>1124</b>, the fill handler determines if the attributes for the requested file (as received from the origin server) differ from the attributes of that file as currently stored on the caching filer. As for the latter, the state of the attributes for the file stored on the caching filer is determined by examining, e.g., the access and/or modification time stamps <b>316</b> stored in the inode <b>300</b> for the file. Note that a property of a NRV read message is that any data that is returned in a NRV response also includes the file's latest attributes. A zero length read (verify) is thus equivalent to retrieving the file's latest attributes without fetching any data.</p>
<p id="p-0089" num="0088">If there is no difference in the attributes (the attributes have not changed), the fill handler triggers a verification that the inode (file) attributes has been verified (Step <b>1126</b>). Therefore, the NRV exchange between the caching filer <b>120</b> and the origin server <b>180</b> is essentially a &#x201c;no op&#x201d; that has injected extra latency (at least in the simplest cache coherency policy) into the system. In Step <b>1128</b>, the file system searches the local cache is to determine if the client requested data is present on the caching filer. If so, the file system services the read request/message (as previously described) in Step <b>1130</b> and the procedure ends at Step <b>1136</b>.</p>
<p id="p-0090" num="0089">However, if the requested data (or a portion thereof) is not resident on the local cache (i.e., data is missing), the file system converts the read message into a fetch request that is eventually sent to the origin server to acquire the missing data (as previously described) in Step <b>1132</b>. Note that the response from the origin server includes both the missing data and the latest attributes of the file. Note also that if there is a difference in attributes (as determined at Step <b>1124</b>) the procedure continues to Step <b>1132</b>. In Step <b>1134</b>, a determination is made as to whether those attributes have changed (i.e., they have changed between the time there were initially verified on the caching filer and the time at which the missing data is retrieved). If so, the procedure returns to Step <b>1132</b>. Otherwise, the procedure continues to Step <b>1130</b>.</p>
<p id="p-0091" num="0090">Notably, the data requested by a client is verified prior to determining whether it is present on the caching filer <b>120</b>. This is because, if the data is present on the caching filer, there is no issue even if an update to that data occurred on the origin server <b>180</b> between verification and serving of the data to the client. In this latter case, those operations are considered &#x201c;overlapping operations&#x201d; and are serialized by treating the read request as occurring first. Note further that the attributes may change considering the network caching system deployment with multiple clients accessing multiple caching filers and/or the origin server.</p>
<p id="p-0092" num="0091">In the illustrative embodiment, there is no explicit locking on a network caching system deployment. However, the network caching system relies on a semantic that a read operation overlapping with a write operation (i.e., the write does not occur before a verify) could return the read prior to the write. In other words, the verify response indicates that no attributes have changed for the file and that file data can be served from the cache volume <b>150</b> of the caching filer (if possible). When subsequently serving that data from the cache volume, the caching filer <b>120</b> operates as though the read operation occurred before the write operation.</p>
<p id="p-0093" num="0092">Clearly in a cache hit case, the network caching system <b>100</b> preserves that semantic. In a partial cache miss case, the network caching system preserves that semantic by effectively starting from scratch. As for the latter, assume a client issues a 32 kB read request and the caching filer is missing just a 4 kB block of that request (that missing data is not on the cache volume). A normal response to this situation is for the caching filer to send a 4 kB NRV read message to fill in the missing data, along with an implicit verify (because every read returns file attributes). Assume further that a previous explicit verify indicates that nothing has changed to the data, but that an intervening write operation occurs between the explicit verify and sending of the 4 kB NRV read message. The caching filer detects that intervening write because the attributes have changed in the read response (as indicated by the implicit verify accompanying the response). This, in turn, causes the caching filer <b>120</b> to eject its copy of the file on its cache volume <b>150</b> and generate appropriate fetch operations using NRV read messages to retrieve the requested data from the origin server <b>180</b>. This situation presents a case where write operations may cause excessive and wasteful read operations.</p>
<p id="p-0094" num="0093">In accordance with an aspect of the invention, the pump module <b>298</b> can be used to alleviate such starvation. The pump module implements flow control and the novel network caching system architecture provides another form of flow control that essentially proxies read operations to the origin server <b>180</b> instead of servicing them via the normal file system read handler. That is, in response to difficulty loading data for a file into its local cache in order to serve client requests, the caching filer <b>120</b> switches to a mode where read operations directed to that file are passed to the RUE <b>292</b> (similar to a write operation) and onto the origin server <b>180</b>, rather than through the file system <b>280</b> to the read handler. The origin server then uses standard flow control and atomicity mechanisms in order to return a single response to that read operation.</p>
<heading id="h-0015" level="1">G. Prioritization</heading>
<p id="p-0095" num="0094">According to an aspect of the present invention, readahead operations are performed by the caching filer and, thus, the filer implements prioritization as there is a distinction between client requests and speculative readahead requests. An advantage of this is feature to the network caching system implementation is that because it does not &#x201c;see&#x201d; all client requests, the origin server does not have as much knowledge as the caching filer normally would when making readahead decisions. Because it has a multi-protocol engine executing thereon, the caching filer can make the same readahead decisions that would ordinarily be made by the origin server, even though there is a cache volume between the filer and server. In particular, the caching filer uses the same readahead engine as would be used by the origin server and, thus, generates the same readahead request as would the origin server. As for prioritization of the requests, the network caching system implementation treats the requests as two different priority bands, wherein a client request prioritizes over speculative readahead and if the system is saturated, speculative readahead requests are dropped.</p>
<heading id="h-0016" level="1">H. Cache Ejection</heading>
<p id="p-0096" num="0095">As noted, the truncator <b>294</b> encodes a cache ejection policy to reclaim storage space as the local cache (e.g., cache volume <b>150</b>) becomes full. In the situation where the cache volume <b>150</b> of the caching filer <b>120</b> is smaller than a working set stored on the origin volume <b>185</b> of the origin server <b>180</b>, cache ejection decisions frequently arise. As client requests are received, the caching filer needs to free up volume storage space to cache (store) those requests. In freeing up space, some data must be evicted from the cache volume <b>150</b>. In the illustrative embodiment, the truncator <b>294</b> is embodied as a scanner configured to, as space is needed, (i) &#x201c;walk&#x201d; the cache volume <b>150</b> to scan buffer trees of files stored on the volume and (ii) make decisions as to which previously cached data should be evicted.</p>
<p id="p-0097" num="0096">Illustratively, the cache ejection policy is a round-robin procession through the inode file, with the advantage that there is no need to maintain a global least recently used (LRU) list. To that end, the truncator <b>294</b> scans the inode file in a round-robin manner, e.g., starting at the beginning of the inode file, progressing to the end and then restarting at the beginning of that file, and arbitrarily evicts every entire file that it comes across (until the required free space is met). Thus, the policy randomly evicts files when space is required, but has the property that the same file is not evicted twice until the inode file has been entirely traversed. If the cache volume is busy, it is highly likely that the vast majority of the working set will be cached at any given time. However, if a &#x201c;popular&#x201d; file is mistakenly evicted, the policy won't evict that file again until the truncator traverses the entire inode file.</p>
<p id="p-0098" num="0097"><figref idref="DRAWINGS">FIG. 12</figref> is a flowchart illustrating the steps of a procedure <b>1200</b> for implementing a cache ejection policy in accordance with an embodiment of the present invention. The procedure starts at Step <b>1202</b> and proceeds to Step <b>1204</b> where the truncator is initialized to a first inode of the inode file. In Step <b>1206</b>, the truncator is awoken (invoked) in response to, e.g., the cache volume getting fully populated. In Step <b>1208</b>, the truncator &#x201c;evicts&#x201d; the first inode and, in Step <b>1210</b>, proceeds to evict subsequent inodes (files) until there is sufficient available storage space on the volume. In essence, the truncator is activated and sweeps across the inode file only when storage space on the cache volume needs to reclaimed. An inode or file (or, more specifically, the inode buffer tree of a file) is illustratively evicted by passing the buffer tree to a &#x201c;zombie&#x201d; system that deletes the existing blocks and that inode is then replaced with an inode that has a &#x201c;hole&#x201d; at a top level. In this context, a hole is defined as an unallocated section of the inode file on the cache volume (as opposed to an absent block, which is allocated). The procedure then ends at Step <b>1212</b>.</p>
<p id="p-0099" num="0098">An optimization to the cache ejection policy evicts (deletes) entire blocks of inodes, e.g., deletes every inode in an inode file block, frees the inode file block and inserts a hole at its location in the inode file (allocates a new empty inode file block). A hole (or unallocated section of the inode file) on the cache volume is in accord with an inode file block on the origin server that might actually have inodes allocated. In this latter case, the caching filer only allocates an inode file block when a client requests access to a particular file; upon allocating the inode file block, the caching filer initiates a fetch to acquire the file contents. This cache-specific format enables use of a file system default policy for filling holes in the inode file with fresh unallocated inodes.</p>
<p id="p-0100" num="0099">In the illustrative embodiment, there are two triggers for activating the truncator <b>294</b>. One trigger occurs at fill time (wherein the term &#x201c;fill&#x201d; denotes actions that take place when a response is received at the caching filer from the origin). At fill time, it is is desirable to insert any returned data into the buffer tree of its file; but if there is insufficient physical disk space to accommodate that data, the truncator is triggered by space accounting in the file system. Illustratively, the number of free blocks in the aggregate is examined and, based on a low-high water mark (e.g., 85-95%), a determination is made that it is appropriate to trigger the truncator.</p>
<p id="p-0101" num="0100">Another trigger of the truncator is at a file system consistency point (CP) time. Because cache volumes are flexible vvols, they might co-exist on the same aggregate with traditional volumes. As a traditional (or virtual) volume expands to consume more disk space, truncation is triggered on the cache volume to restrict its consumption of disk space. The amount of disk space (free physical space in the aggregate) is tested at CP time (e.g., every 10 seconds or however frequently a CP occurs). Here, the write allocator <b>282</b> signals the truncator <b>294</b> to re-start and free up aggregate storage space until the available space falls below the established low water mark.</p>
<heading id="h-0017" level="1">I. Conclusion</heading>
<p id="p-0102" num="0101">Advantageously, the present invention virtualizes the storage space of the multi-protocol caching filer to enable fast and efficient client access to data served by the network caching system. Unlike previous caching systems that require explicit file handleto-object store conversion, the novel multi-protocol caching filer enables efficient client access to data served by the network caching system through use of the file system and, in particular, the use of actual names of the storage objects (files) organized by the file system. Moreover, the file system cooperates with the sparse volume of the caching filer to provide storage space virtualization of the served data in a manner that is transparent to the multi-protocol clients.</p>
<p id="p-0103" num="0102">While there has been shown and described illustrative embodiments of a network caching system having a multi-protocol caching filer coupled to an origin server to provide storage virtualization of data served by the filer in response to data access requests issued by multi-protocol clients over a computer network, it is to be understood that various other adaptations and modifications may be made within the spirit and scope of the invention. For example, in an alternate embodiment of the invention, the demand generator <b>296</b> may be used to systematically retrieve data blocks that are not stored locally on disk for purposes of pre-populating the cache volume. Note that it is common in a caching deployment to have a cache volume <b>150</b> that is much smaller than the origin volume <b>185</b> (e.g., to provide an advantage over pure replication). As a result, pre-population of the smaller cache volume requires a specialized demand generator configured to render intelligent decisions about the data that should be resident in the local cache, since not all of the origin data can fit in the cache.</p>
<p id="p-0104" num="0103">The foregoing description has been directed to specific embodiments of this invention. It will be apparent, however, that other variations and modifications may be made to the described embodiments, with the attainment of some or all of their advantages. For instance, it is expressly contemplated that the teachings of this invention can be implemented as software, including a computer-readable medium having program instructions executing on a computer, hardware, firmware, or a combination thereof. Accordingly this description is to be taken only by way of example and not to otherwise limit the scope of the invention. Therefore, it is the object of the appended claims to cover all such variations and modifications as come within the true spirit and scope of the invention.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A network caching system, comprising:
<claim-text>a caching computer having a processor and configured to receive a data access request from a client for data, the caching computer coupled to an origin computer;</claim-text>
<claim-text>the caching computer further configured to send a fetch on demand (FOD) request to the origin computer to obtain attributes associated with the data;</claim-text>
<claim-text>the caching computer further configured to receive the attributes associated with the data and determine whether attributes associated with the data at the caching computer differ from the attributes received from the origin computer;</claim-text>
<claim-text>the caching computer to service the data access request in response to the caching computer determining that the attributes at the caching computer do not differ from the attributes received from the origin computer; and</claim-text>
<claim-text>the caching computer to acquire the data and the attributes associated with the data from the origin computer in response to the caching computer determining that the attributes at the caching computer differ from the attributes received from the origin computer.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The network caching system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein a multi-protocol engine of the caching computer converts the received data access request into a generic operating system message executable by the caching computer and the origin computer of the network caching system.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The network caching system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:
<claim-text>a local cache of the caching computer, the local cache including a sparse volume configured to serve the data requested by the client, wherein the sparse volume includes at least one absent block representing that the data is missing from the sparse volume, wherein the missing data of the absent block is stored on the origin computer and retrieved using the FOD request in a manner that is transparent to the client.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The network caching system of <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein the sparse volume includes a cache volume, and wherein the cache volume includes one or more storage devices coupled to the caching computer.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The network caching system of <claim-ref idref="CLM-00004">claim 4</claim-ref>, further comprising:
<claim-text>a remote update engine (RUE) of the caching computer, the RUE configured to forward any file system operations that modify the cache volume to the origin computer of the network caching system.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The network caching system of <claim-ref idref="CLM-00003">claim 3</claim-ref>, further comprising:
<claim-text>a truncator of the caching computer, the truncator configured to implement a cache ejection policy to reclaim storage space if the sparse volume becomes full.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The network caching system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the data is associated with one of a file and a logical unit number.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The network caching system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the caching computer to service the data access request further comprises:
<claim-text>the caching computer further configured to determine whether the data is located at the caching computer;</claim-text>
<claim-text>in response to determining that the data is located at the caching computer, the caching computer further configured to send the data to the client; and</claim-text>
<claim-text>in response to determining that the data is not located at the caching computer, the caching computer further configured to acquire the data from the origin computer and send the data to the client.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The network caching system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the caching computer is configured to determine whether the data is resident at the caching computer without hashing a file handle associated with the data access request.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. A method for operating a network caching system, comprising:
<claim-text>receiving, at a caching computer having a processor, a data access request for data from a client, wherein the caching computer is coupled to an origin computer;</claim-text>
<claim-text>sending a fetch on demand (FOD) request from the caching computer to the origin computer to obtain attributes associated with the data;</claim-text>
<claim-text>receiving, at the caching computer, the attributes associated with the data from the origin computer;</claim-text>
<claim-text>determining, at the caching computer, whether attributes associated with the data at the caching computer differ from the attributes received from the origin computer;</claim-text>
<claim-text>in response to determining that the attributes at the caching computer do not differ from the attributes received from the origin computer, servicing the data access request; and</claim-text>
<claim-text>in response to determining that the attributes at the caching computer differ from is the attributes received from the origin computer, acquiring the data and the attributes associated with the data from the origin computer.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The method of <claim-ref idref="CLM-00010">claim 10</claim-ref>, further comprising:
<claim-text>maintaining the data as one of a file and a logical unit number.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The method of <claim-ref idref="CLM-00010">claim 10</claim-ref>, further comprising:
<claim-text>including a modification time of the data and a creation time of the data as the attributes of the data.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The method of <claim-ref idref="CLM-00012">claim 12</claim-ref>, further comprising:
<claim-text>indicating that the data has been modified since being cached at the caching computer by a change occurring in the attributes.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The method of <claim-ref idref="CLM-00010">claim 10</claim-ref>, further comprising:
<claim-text>embodying the FOD request as a remote volume read message.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The method of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein servicing the data access request further comprises:
<claim-text>determining whether the data is located at the caching computer;</claim-text>
<claim-text>in response to determining the data is located at the caching computer, sending the data to the client; and</claim-text>
<claim-text>in response to determining that the data is not located at the caching computer, acquiring the data from the origin computer and sending the data to the client.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The method of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein determining whether the data is located at the caching computer is determined without hashing a file handle of the data access request.</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. A non-transitory computer-readable storage medium containing executable program instructions executed by a processor, comprising:
<claim-text>program instructions that receive a data access request for data from a client at a caching computer coupled to an origin computer;</claim-text>
<claim-text>program instructions that send a fetch on demand (FOD) request to the origin computer to obtain attributes associated with the data;</claim-text>
<claim-text>program instructions that receive the attributes associated with the data and determine whether attributes associated with the data at the caching computer differ from the attributes received from the origin computer;</claim-text>
<claim-text>program instructions that, in response to determining that the attributes at the caching computer do not differ from the attributes received from the origin computer, service the data access request; and</claim-text>
<claim-text>program instructions that, in response to determining that the attributes at the caching computer differ from the attributes received from the origin computer, acquire the data and the attributes associated with the data from the origin computer.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The non transitory computer-readable storage medium of <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein the program instructions that service the data access request further comprise:
<claim-text>program instructions that determine whether the data is located at the caching computer;</claim-text>
<claim-text>program instruction that, in response to determining that the data is located at the caching computer, send the data to the client; and</claim-text>
<claim-text>program instructions that, in response to determining that the data is not located at the caching computer, acquire the data from the origin computer and send the data to the client.</claim-text>
</claim-text>
</claim>
</claims>
</us-patent-grant>

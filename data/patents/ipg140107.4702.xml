<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08625793-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08625793</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>12135987</doc-number>
<date>20080609</date>
</document-id>
</application-reference>
<us-application-series-code>12</us-application-series-code>
<us-term-of-grant>
<us-term-extension>1372</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>H</section>
<class>04</class>
<subclass>K</subclass>
<main-group>1</main-group>
<subgroup>00</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>H</section>
<class>04</class>
<subclass>L</subclass>
<main-group>9</main-group>
<subgroup>32</subgroup>
<symbol-position>L</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>380247</main-classification>
<further-classification>380249</further-classification>
<further-classification>713170</further-classification>
</classification-national>
<invention-title id="d2e53">Resynchronization for push message security using secret keys</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>5060266</doc-number>
<kind>A</kind>
<name>Dent</name>
<date>19911000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>380274</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>5241598</doc-number>
<kind>A</kind>
<name>Raith</name>
<date>19930800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>380248</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>5995624</doc-number>
<kind>A</kind>
<name>Fielder et al.</name>
<date>19991100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>713169</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>RE36752</doc-number>
<kind>E</kind>
<name>Koopman et al.</name>
<date>20000600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>380262</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>6502135</doc-number>
<kind>B1</kind>
<name>Munger et al.</name>
<date>20021200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709225</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>7436964</doc-number>
<kind>B2</kind>
<name>Klingler et al.</name>
<date>20081000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>380274</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>2007/0016778</doc-number>
<kind>A1</kind>
<name>Lyle</name>
<date>20070100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>713169</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>2007/0105548</doc-number>
<kind>A1</kind>
<name>Mohan et al.</name>
<date>20070500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>4554261</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>2007/0214496</doc-number>
<kind>A1</kind>
<name>Perkins et al.</name>
<date>20070900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>726  3</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>2008/0008138</doc-number>
<kind>A1</kind>
<name>Pun</name>
<date>20080100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>370338</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>2008/0046728</doc-number>
<kind>A1</kind>
<name>Lyle</name>
<date>20080200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>713169</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00012">
<document-id>
<country>TW</country>
<doc-number>436747</doc-number>
<kind>B</kind>
<date>20010500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00013">
<document-id>
<country>TW</country>
<doc-number>200631375</doc-number>
<date>20060900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00014">
<document-id>
<country>TW</country>
<doc-number>200636488</doc-number>
<date>20061000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00015">
<document-id>
<country>TW</country>
<doc-number>200642404</doc-number>
<date>20061200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00016">
<document-id>
<country>WO</country>
<doc-number>WO0124436</doc-number>
<date>20010400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00017">
<document-id>
<country>WO</country>
<doc-number>WO2005015819</doc-number>
<kind>A1</kind>
<date>20050200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00018">
<othercit>IP in Wireless Networks Section 12.5 Pub. Date: Jan. 31, 2003.</othercit>
</nplcit>
<category>cited by examiner</category>
</us-citation>
<us-citation>
<nplcit num="00019">
<othercit>Appeal from the United States District Court for the District of Nevada in case No. 05-CV-820, Judge Brian E. Sandoval. Decided: Mar. 28, 2008.</othercit>
</nplcit>
<category>cited by examiner</category>
</us-citation>
<us-citation>
<nplcit num="00020">
<othercit>International Search Report and Written Opinion&#x2014;PCT/US2008/066612&#x2014;ISA/EPO&#x2014;Aug. 19, 2009.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00021">
<othercit>Taiwan Search Report&#x2014;TW097121841&#x2014;TIPO&#x2014;May 23, 2012.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>60</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>380247</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>380249</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>713170</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>6</number-of-drawing-sheets>
<number-of-figures>6</number-of-figures>
</figures>
<us-related-documents>
<us-provisional-application>
<document-id>
<country>US</country>
<doc-number>60943277</doc-number>
<date>20070611</date>
</document-id>
</us-provisional-application>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20090319792</doc-number>
<kind>A1</kind>
<date>20091224</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Hawkes</last-name>
<first-name>Philip Michael</first-name>
<address>
<city>Warrimoo</city>
<country>AU</country>
</address>
</addressbook>
<residence>
<country>AU</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Wachter</last-name>
<first-name>Andreas K.</first-name>
<address>
<city>San Francisco</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="003" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Paddon</last-name>
<first-name>Michael</first-name>
<address>
<city>Tokyo</city>
<country>JP</country>
</address>
</addressbook>
<residence>
<country>JP</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Hawkes</last-name>
<first-name>Philip Michael</first-name>
<address>
<city>Warrimoo</city>
<country>AU</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Wachter</last-name>
<first-name>Andreas K.</first-name>
<address>
<city>San Francisco</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="003" designation="us-only">
<addressbook>
<last-name>Paddon</last-name>
<first-name>Michael</first-name>
<address>
<city>Tokyo</city>
<country>JP</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<last-name>Kim</last-name>
<first-name>Won Tae</first-name>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>QUALCOMM Incorporated</orgname>
<role>02</role>
<address>
<city>San Diego</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Zand</last-name>
<first-name>Kambiz</first-name>
<department>2434</department>
</primary-examiner>
<assistant-examiner>
<last-name>Kaplan</last-name>
<first-name>Benjamin</first-name>
</assistant-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">A method for a server to initiate resynchronization with an access terminal, when synchronization has been lost, that cannot be exploited by attackers is provided. The server may provide the access terminal with a secret key that is only known to the access terminal and the server. The access terminal may store the secret key in a secure storage device to prevent the secret key from being hacked. If the server determines that synchronization has been lost, the server may send a resynchronization message to the access terminal with the secret key attached. The access terminal retrieves the stored secret key from the secure memory device and compares it to the secret key attached to the resynchronization message. If there is a match, the access terminal may initiate a secure communication link with the server to reestablish synchronization.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="188.13mm" wi="215.39mm" file="US08625793-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="200.15mm" wi="155.79mm" file="US08625793-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="215.98mm" wi="187.11mm" orientation="landscape" file="US08625793-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="85.60mm" wi="143.68mm" file="US08625793-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="222.00mm" wi="149.52mm" file="US08625793-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="91.86mm" wi="145.03mm" file="US08625793-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="184.23mm" wi="151.30mm" file="US08625793-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?RELAPP description="Other Patent Relations" end="lead"?>
<heading id="h-0001" level="1">CLAIM OF PRIORITY UNDER 35 U.S.C. &#xa7;119</heading>
<p id="p-0002" num="0001">The present Application for Patent claims priority to U.S. Provisional Application No. 60/943,277 entitled &#x201c;Resynchronization for Push Message Security Using Secret Password&#x201d; filed Jun. 11, 2007, and assigned to the assignee hereof and hereby expressly incorporated by reference herein.</p>
<?RELAPP description="Other Patent Relations" end="tail"?>
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0002" level="1">BACKGROUND</heading>
<p id="p-0003" num="0002">1. Field</p>
<p id="p-0004" num="0003">At least one feature relates to communication systems, and, more particularly, to a method for resynchronizing an access terminal with a server using a secret key.</p>
<p id="p-0005" num="0004">2. Background</p>
<p id="p-0006" num="0005">The field of communications has many applications including, e.g., paging, wireless local loops, Internet telephony, and satellite communication systems. An exemplary application is a cellular telephone system for mobile subscribers. (As used herein, the term &#x201c;cellular&#x201d; system encompasses both cellular and personal communications services (PCS) system frequencies.)</p>
<p id="p-0007" num="0006">In communication systems, a user or access terminal may establish a data connection to communicate with a server for sending and receiving messages, such as Short Message Services (SMS) messages. In order to protect the SMS messages from being attacked, the access terminal and server may protect the SMS messages by various known methods in the art, such an encryption using a key. For example, when the server and access terminal communicate with each other they might share a key so that when the server sends a SMS message to the access terminal it will add a message authentication code tag to the SMS message which is computed using that key. The message authentication code tag on the SMS message allows the access terminal to verify the source of the message. This method of protection works well unless the access terminal loses the key or if the key gets changed in memory causing synchronization to be lost between the access terminal and the server. If the access terminal and server lose synchronization, then the server needs to send a push message to request the client to resynchronize. However, finding a secure way for the server to initiate resynchronization that cannot be exploited by attackers is problematic. Consequently, a secure way for the server to initiate resynchronization with an access terminal that cannot be exploited by attackers is needed.</p>
<heading id="h-0003" level="1">SUMMARY</heading>
<p id="p-0008" num="0007">One aspect provides a method for a server to initiate resynchronization with an access terminal, when synchronization has been lost, that cannot be exploited by attackers. The server may provide the access terminal with a secret key that is only known to the access terminal and the server. The access terminal may store the secret key in a redundant or secure storage device to prevent the secret key from being hacked. If the server determines that synchronization has been lost with the access terminal, the server may send a resynchronization message to the access terminal. The secret key known only to the access terminal and the server may be attached to the resynchronization message. Upon receiving the resynchronization message, the access terminal retrieves the stored secret key from the secure memory device and compares it to the secret key attached to the resynchronization message. If there is a match, the access terminal may initiate a secure communication link with the server to reestablish synchronization. If there is not a match, the access terminal may ignore the resynchronization message as it is coming from an unknown source.</p>
<p id="p-0009" num="0008">A method operational on an access terminal is provided, comprising: (a) establishing a first secret key for resynchronizing with a server; (b) storing the first secret key in a secure memory device; (c) receiving a resynchronization message from the server when the server detects a loss of synchronization, the resynchronization message including the first secret key; and (d) comparing the stored first secret key to the first secret key in the synchronization message to authenticate the resynchronization message.</p>
<p id="p-0010" num="0009">The method may further comprise (e) establishing a first link key for verifying messages sent from the server or from entities authorized by the server; and (f) storing the first link key in application memory device. Wherein if the stored first secret key matches the first secret key in the synchronization message, the access terminal may establish a secure communication link with the server.</p>
<p id="p-0011" num="0010">An access terminal is provided comprising a computer interface and a processing circuit. The processor may be configured to (a) establish a first secret key for resynchronizing with a server; (b) store the first secret key in a secure memory device; (c) receive a resynchronization message from the server when the server detects a loss of synchronization, the resynchronization message including the first secret key; and (d) compare the stored first secret key to the first secret key in the synchronization message to authenticate the resynchronization message.</p>
<p id="p-0012" num="0011">The processing circuit of the access terminal may be further configured to (e) establish a first link key for verifying messages sent from the server or from entities authorized by the server; and (f) store the first link key in application memory device. Wherein if the stored first secret key matches the first secret key in the synchronization message, the access terminal may establish a secure communication link with the server.</p>
<p id="p-0013" num="0012">Consequently, an access terminal is provided comprising: (a) means for establishing a first secret key for resynchronizing with a server; (b) means for storing the first secret key in a secure memory device; (c) means for receiving a resynchronization message from the server when the server detects a loss of synchronization, the resynchronization message including the first secret key; and (d) means for comparing the stored first secret key to the first secret key in the synchronization message to authenticate the resynchronization message. The access terminal may further comprise: (e) means for establishing a first link key for verifying messages sent from the server or from entities authorized by the server; and (f) means for storing the first link key in application memory device. Wherein if the stored first secret key matches the first secret key in the synchronization message, the access terminal may further comprise: (g) means for establishing a secure communication link with the server.</p>
<p id="p-0014" num="0013">Additionally, a circuit for wireless network communications is provided, the circuit may be adapted to (a) establish a first secret key for resynchronizing with a server; (b) store the first secret key in a secure memory device; (c) receive a resynchronization message from the server when the server detects a loss of synchronization, the resynchronization message including the first secret key; and (d) compare the stored first secret key to the first secret key in the synchronization message to authenticate the resynchronization message.</p>
<p id="p-0015" num="0014">The circuit may be further adapted to: (e) establish a first link key for verifying messages sent from the server or from entities authorized by the server; and (f) store the first link key in application memory device. Wherein if the stored first secret key matches the first secret key in the synchronization message, further adapted to: (g) establish a secure communication link with the server.</p>
<p id="p-0016" num="0015">A computer readable medium comprising instructions that may be used by one or more processors is provided, the instructions comprising: (a) establish a first secret key for resynchronizing with a server; (b) store the first secret key in a secure memory device; (c) receive a resynchronization message from the server when the server detects a loss of synchronization, the resynchronization message including the first secret key; and (d) compare the stored first secret key to the first secret key in the synchronization message to authenticate the resynchronization message. The instructions may further comprise; (e) establish a first link key for verifying messages sent from the server or from entities authorized by the server; and (f) store the first link key in application memory device. Wherein if the stored first secret key matches the first secret key in the synchronization message, the instructions may further comprise; (g) establish a secure communication link with the server; (h) discard the stored first secret key after the secure communication link has been established; (i) establish a second secret key for resynchronizing with a server; and (j) store the second secret key in the secure memory device.</p>
<p id="p-0017" num="0016">A method operational on a server is also provided comprising: (a) generating a first secret key for resynchronizing with an access terminal; (b) sending the first secret key to the access terminal over a secure communication link, the first secret key to be stored in a secure memory device on the access terminal; and (c) sending a resynchronization message to the access terminal if synchronization has been lost, the first secret key included to the resynchronization message for verifying identify of the server. The method may also comprise; (d) generating a first link key for verifying a source of the messages or from entities authorized by the server; and (e) sending the first link key to the access terminal over the secure communication link, the first link key to be stored in an application memory device.</p>
<p id="p-0018" num="0017">A server is provided comprising a computer interface and a processing circuit. The processing circuit may be configured to (a) generate a first secret key for resynchronizing with an access terminal; (b) send the first secret key to the access terminal over a secure communication link, the first secret key to be stored in a secure memory device on the access terminal; and (c) send a resynchronization message to the access terminal if synchronization has been lost, the first secret key included to the resynchronization message for verifying identify of the server. The processing circuit may be further configured to: generate a first link key for verifying a source of the messages or from entities authorized by the server; and send the first link key to the access terminal over the secure communication link, the first link key to be stored in an application memory device.</p>
<p id="p-0019" num="0018">Consequently, a server is provided comprising: (a) means for generating a first secret key for resynchronizing with an access terminal; (b) means for sending the first secret key to the access terminal over a secure communication link, the first secret key to be stored in a secure memory device on the access terminal; and (c) means for sending a resynchronization message to the access terminal if synchronization has been lost, the first secret key included to the resynchronization message for verifying identify of the server. The server may further comprise: (d) means for generating a first link key for verifying a source of the messages or from entities authorized by the server; (e) means for sending the first link key to the access terminal over the secure communication link, the first link key to be stored in an application memory device; and (f) means for sending traffic messages to the access terminal signed with the first link.</p>
<p id="p-0020" num="0019">Additionally, a circuit for wireless network communications is provided, the circuit may be adapted to (a) generate a first secret key for resynchronizing with an access terminal; (b) send the first secret key to the access terminal over a secure communication link, the first secret key to be stored in a secure memory device on the access terminal; and (c) send a resynchronization message to the access terminal if synchronization has been lost, the first secret key included to the resynchronization message for verifying identify of the server. The circuit is further adapted to: (d) generate a first link key for verifying a source of the messages or from entities authorized by the server; and (e) send the first link key to the access terminal over the secure communication link, the first link key to be stored in an application memory device.</p>
<p id="p-0021" num="0020">A computer readable medium comprising instructions that may be used by one or more processors is provided, the instructions comprising: (a) generate a first secret key for resynchronizing with an access terminal; (b) send the first secret key to the access terminal over a secure communication link, the first secret key to be stored in a secure memory device on the access terminal; and (c) send a resynchronization message to the access terminal if synchronization has been lost, the first secret key included to the resynchronization message for verifying identify of the server. The circuit is further adapted to: (d) generate a first link key for verifying a source of the messages or from entities authorized by the server; and (e) send the first link key to the access terminal over the secure communication link, the first link key to be stored in an application memory device.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0022" num="0021">Various features, nature, and advantages may become apparent from the detailed description set forth below when taken in conjunction with the drawings in which like reference characters identify correspondingly throughout.</p>
<p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. 1</figref> is a block diagram illustrating a wireless communication system in which secret keys may be used for resynchronizing one or more access terminals with a server.</p>
<p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. 2</figref> is a flow diagram illustrating the operation of a wireless communication system in which a server initiates resynchronization with an access terminal.</p>
<p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. 3</figref> is a block diagram illustrating an access terminal configured to perform resynchronization using a secret key with a server.</p>
<p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. 4</figref> is a flow diagram illustrating a method operational in an access terminal to perform resynchronization with a server using a secret key.</p>
<p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. 5</figref> is a block diagram illustrating a server configured to facilitate resynchronization with an access terminal using a secret key.</p>
<p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. 6</figref> is a flow diagram illustrating a method operational in a server access terminal to facilitate resynchronization with an access terminal using a secret key.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0005" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0029" num="0028">In the following description, specific details are given to provide a thorough understanding of the configurations. However, it will be understood by one of ordinary skill in the art that the configurations may be practiced without these specific detail. For example, circuits may be shown in block diagrams in order not to obscure the configurations in unnecessary detail. In other instances, well-known circuits, structures and techniques may be shown in detail in order not to obscure the configurations.</p>
<p id="p-0030" num="0029">Also, it is noted that the configurations may be described as a process that is depicted as a flowchart, a flow diagram, a structure diagram, or a block diagram. Although a flowchart may describe the operations as a sequential process, many of the operations can be performed in parallel or concurrently. In addition, the order of the operations may be re-arranged. A process is terminated when its operations are completed. A process may correspond to a method, a function, a procedure, a subroutine, a subprogram, etc. When a process corresponds to a function, its termination corresponds to a return of the function to the calling function or the main function.</p>
<p id="p-0031" num="0030">In one or more examples and/or configurations, the functions described may be implemented in hardware, software, firmware, or any combination thereof. If implemented in software, the functions may be stored on or transmitted over as one or more instructions or code on a computer-readable medium. Computer-readable media includes both computer storage media and communication media including any medium that facilitates transfer of a computer program from one place to another. A storage media may be any available media that can be accessed by a general purpose or special purpose computer. By way of example, and not limitation, such computer-readable media can comprise RAM, ROM, EEPROM, CD-ROM or other optical disk storage, magnetic disk storage or other magnetic storage devices, or any other medium that can be used to carry or store desired program code means in the form of instructions or data structures and that can be accessed by a general-purpose or special-purpose computer, or a general-purpose or special-purpose processor. Also, any connection is properly termed a computer-readable medium. For example, if the software is transmitted from a website, server, or other remote source using a coaxial cable, fiber optic cable, twisted pair, digital subscriber line (DSL), or wireless technologies such as infrared, radio, and microwave, then the coaxial cable, fiber optic cable, twisted pair, DSL, or wireless technologies such as infrared, radio, and microwave are included in the definition of medium. Disk and disc, as used herein, includes compact disc (CD), laser disc, optical disc, digital versatile disc (DVD), floppy disk and blu-ray disc where disks usually reproduce data magnetically, while discs reproduce data optically with lasers. Combinations of the above are also be included within the scope of computer-readable media.</p>
<p id="p-0032" num="0031">Moreover, a storage medium may represent one or more devices for storing data, including read-only memory (ROM), random access memory (RAM), magnetic disk storage mediums, optical storage mediums, flash memory devices and/or other machine readable mediums for storing information.</p>
<p id="p-0033" num="0032">Furthermore, configurations may be implemented by hardware, software, firmware, middleware, microcode, or any combination thereof. When implemented in software, firmware, middleware or microcode, the program code or code segments to perform the necessary tasks may be stored in a computer-readable medium such as a storage medium or other storage(s). A processor may perform the necessary tasks. A code segment may represent a procedure, a function, a subprogram, a program, a routine, a subroutine, a module, a software package, a class, or any combination of instructions, data structures, or program statements. A code segment may be coupled to another code segment or a hardware circuit by passing and/or receiving information, data, arguments, parameters, or memory contents. Information, arguments, parameters, data, etc. may be passed, forwarded, or transmitted via any suitable means including memory sharing, message passing, token passing, network transmission, etc.</p>
<p id="p-0034" num="0033">In the following description, certain terminology is used to describe certain features. The terms &#x201c;access terminal&#x201d; and &#x201c;communication device&#x201d; may be interchangeably used to refer to a mobile device, mobile phone, wireless terminal, and/or other types of mobile or fixed communication apparatus capable of communicating over a wireless network.</p>
<p id="p-0035" num="0034">One aspect provides a method for a server to initiate resynchronization with an access terminal, when synchronization has been lost, that cannot be exploited by attackers. The server may provide the access terminal with a secret key that is only known to the access terminal and the server. The access terminal may store the secret key in a redundant or secure storage device to prevent the secret key from being hacked. If the server determines that synchronization has been lost with the access terminal, the server may send a resynchronization message to the access terminal. The secret key known only to the access terminal and the server may be attached to the resynchronization message. Upon receiving the resynchronization message, the access terminal retrieves the stored secret key from the secure memory device and compares it to the secret key attached to the resynchronization message. If there is a match, the access terminal may initiate a secure communication link with the server to reestablish synchronization. If there is not a match, the access terminal may ignore the resynchronization message as it is coming from an unknown source.</p>
<p id="p-0036" num="0035"><figref idref="DRAWINGS">FIG. 1</figref> is a block diagram illustrating a wireless communication system <b>100</b> in which secret keys may be used for resynchronizing one or more access terminals with a server. In the wireless communication system <b>100</b>, remote stations <b>102</b><i>a</i>-<b>102</b><i>d</i>, also known as access terminals (AT), user equipment or subscriber units, may be mobile or stationary, and may communicate with one or more access nodes <b>104</b><i>a </i>and <b>104</b><i>b</i>, also known as base stations, base transceiver stations (BTSs) or node Bs. The access terminals <b>102</b><i>a</i>-<b>102</b><i>d </i>may transmit and receive data packets through the one or more access nodes <b>104</b><i>a </i>and <b>104</b><i>b </i>to an access node controller <b>106</b>, also known as a base station controller or radio network controller (RNC). Base stations and base station controllers are parts of a network <b>108</b> called an access network.</p>
<p id="p-0037" num="0036">A server <b>110</b> may be connected to the network <b>108</b>. In an access terminal-server application, the server may be able to send or push messages to the access terminals <b>102</b><i>a</i>-<b>102</b><i>d </i>(e.g. using Short Message Service (SMS), Wireless Access Protocol (WAP) push, Uniform Dial Plan (UDP)) when the access terminals <b>102</b><i>a</i>-<b>102</b><i>d </i>may not have a session active. As a result, End-to-End protection such as Integrity protection and/or replay protection and/or encryption of the push message contents may be desired. To maintain this protection, the access terminals <b>102</b><i>a</i>-<b>102</b><i>d </i>may maintain the synchronized state using replay counters and/or keys. If one or more of the access terminals <b>102</b><i>a</i>-<b>102</b><i>d </i>lose synchronization with the server <b>110</b>, then the server <b>110</b> may send a push message to request the one or more access terminals <b>102</b><i>a</i>-<b>102</b><i>d </i>that have lost synchronization to resynchronize.</p>
<p id="p-0038" num="0037">The access network may transport data packets between multiple access terminals <b>102</b><i>a</i>-<b>102</b><i>d</i>. The access network may be further connected to additional networks outside the access network, such as a corporate intranet or the Internet, and may transport data packets between each access terminal and such outside networks. An access terminal that has established an active traffic channel connection with one or more access nodes may be called an active access terminal, and may be said to be in a traffic state. An access terminal that is in the process of establishing an active traffic channel connection with one or more access nodes may be said to be in a connection setup state. An access terminal may be any data device that communicates through a wireless channel. An access terminal may further be any of a number of types of devices including but not limited to PC card, compact flash, external or internal modem, or wireless phone. The communication link through which the access terminal sends signals to the access node may be called an uplink, also known as a reverse link. The communication link through which an access node sends signals to a remote station may be called a downlink, also known as a forward link.</p>
<p id="p-0039" num="0038">As used herein, an access node may be a fixed station used for communicating with the access terminals and may also be referred to as, and include some or all the functionality of, a base station, a Node B, or some other terminology. An access terminal may also be referred to as, and include some or all the functionality of, a user equipment (UE), a wireless communication device, terminal, mobile terminal, a mobile station or some other terminology.</p>
<p id="p-0040" num="0039">The transmission techniques described herein may also be used for various wireless communication systems such as a CDMA system, a TDMA system, an FDMA system, an orthogonal frequency division multiple access (OFDMA) system, a single carrier FDMA (SC-FDMA) system, and so on. An OFDMA system utilizes orthogonal frequency division multiplexing (OFDM), which is a modulation technique that partitions the overall system bandwidth into multiple (K) orthogonal subcarriers. These subcarriers are also called tones, bins, and so on. With OFDM, each subcarrier may be independently modulated with data. An SC-FDMA system may utilize interleaved FDMA (IFDMA) to transmit on subcarriers that are distributed across the system bandwidth, localized FDMA (EFDMA) to transmit on a block of adjacent subcarriers, or enhanced FDMA (EFDMA) to transmit on multiple blocks of adjacent subcarriers. In general, modulation symbols are sent in the frequency domain with OFDM and in the time domain with SC-FDMA.</p>
<p id="p-0041" num="0040"><figref idref="DRAWINGS">FIG. 2</figref> is a flow diagram illustrating the operation of a wireless communication system in which a server initiates resynchronization with an access terminal. In this example, the server <b>110</b> and access terminal <b>102</b> of <figref idref="DRAWINGS">FIG. 1</figref> are used for illustration purposes. A secure communication link or channel may have been previously established with the access terminal <b>102</b>. In one example, the server <b>110</b> may generate a first secret key and a first link key that are unique to the access terminal <b>202</b>. The first secret key and the first link key may be generated by any method known in the art that may allow the keys to not be predicted so that they may remain secrets only the server <b>110</b> and the access terminal <b>102</b> know. For example, the keys may be randomly generated by the server <b>110</b>, generated with the assistance of a third party (for example in a system using the 3GPP/3GPP2 Generic Bootstrapping Mechanism that may use a Boostrapping Server Function to assist establishing a secret key) or by the access terminal <b>102</b> establishing a first root key with the server and computing the first secret key from the first root secret key.</p>
<p id="p-0042" num="0041">Once the first secret key and the first link key have been generated, the server <b>110</b> may send the keys to the access terminal <b>102</b> over the secure communication link previously established by the access terminal <b>204</b>. The keys may be sent using protection, such as encryption, integrity protection and/or replay protection. The server <b>110</b> may send the keys via push messaging or during an access terminal-server session. The protection may be specific to the first secret key and the first link key or the protection may be specific to the established end-to-end security or (if applicable) link-layer security. The access terminal may establish the first secret key by receiving it over the secure communication channel <b>206</b>. Alternatively, as described above, the first secret key may be established by the access terminal, with the assistance of a third party, by computing it from a first root key previously established with the server. Furthermore, the first secret key may be established by any known method in the art. The access terminal may receive the keys from the server the first time that the access terminal contacts the server after it is powered up. The first time that the access terminal contacts the server could be (a) shortly after the access terminal initializes after power-up (if the access terminal is configured in this manner) (b) when the first push message is received (which the access terminal might be unable to process if synchronization has been lost) or (c) when the access terminal contacts the server for an access-initiated session.</p>
<p id="p-0043" num="0042">After the first secret key and the first link key have been established, the access terminal may store the first secret key in a redundant or secure memory space or device where it may not be corrupted or changed <b>208</b>. Secure memory device may be more stable than an application memory device as it may not be accessed as much and may not be able to be accessed by hacking the system. As describe above, the first secret key may be unique to the server-access terminal relationship. Next, the first link key may be stored in an application storage space or device as it may be accessed more often than the first secret key <b>210</b>.</p>
<p id="p-0044" num="0043">After the first secret key and the first link key have been established, the server may push, send or broadcast messages to the access terminal. Messages sent from the server to the access terminal may be signed using the first link key <b>212</b>. The access terminal may receive the messages and verify or authenticate the messages using the first link key it has stored in the application memory device <b>214</b>. The access terminal may verify that the messages are being sent from the server or from other entities authorized by the server. If the server sends or pushes messages to the access terminal and the access terminal does not acknowledge or respond to these messages, the server may determine that synchronization with the access terminal has been lost and the access terminal and server are no longer in an active session <b>216</b>. Upon making the determination that synchronization has been lost, the server may push, send or broadcast a resynchronization message to the access terminal. The resynchronization message may include the first secret key previously sent to the access terminal from the server which may be stored in the secure memory device on the access terminal <b>218</b>. The first secret key attached to the resynchronization message may not be protected using encryption, integrity protection or replay protection (since the encryption, integrity protection or replay protection may also be out of synch). The server may continually or repeatedly send or push messages to the access terminal where the messages contain the first secret key until the access terminal contacts the server for resynchronization (for example, if the push message was not delivered successfully).</p>
<p id="p-0045" num="0044">Next, the access terminal may receive the resynchronization message with the first secret key attached <b>220</b>. To verify the message, the access terminal may retrieve the first secret key it stored in the secure memory device and compare it to the first secret key that was attached to the resynchronization message <b>222</b>. If the stored first secret key and the attached first secret key match, the access terminal may authenticate or verify the source of the resynchronization message and may initiate or establish a secure communication link with the server for resynchronization <b>224</b>. Next, the access terminal may discard the first secret key that is has stored in the secure memory location in anticipation of a new or second secret key <b>226</b>. The server may then generate a second secret key and optionally may generate a second link key <b>228</b>. The second secret key, and optionally the second link key, may be generated as described above. The second secret key and the second link key (if generated) may then be pushed, sent or broadcast to the access terminal over the secure communication link established by the access terminal <b>230</b>. Next, the access terminal may establish the second secret key by receiving it over the secure communication channel <b>232</b>. Alternatively, as described above, the second secret key may be established by the access terminal with the assistance of a third party or may be established by computing it from a second root key previously established with the server. The second secret key may also be established by any other known method in the art.</p>
<p id="p-0046" num="0045">After the second secret key, and optionally the second link key, have been established, the access terminal may store the second secret key in the redundant or secure memory device where it may not be corrupted or changed <b>234</b>. The second secret key may be unique to the server-access terminal relationship. If established, the second link key may be stored in the application storage device as it may be accessed more often <b>236</b>. The access terminal may ensure that the first secret key may be stored in such a way that corruption of the first secret key may be detected. The access terminal may initiate resynchronization when corruption of the first secret key is detected.</p>
<p id="p-0047" num="0046">An attacker may not be able to predict the secret keys and only sees the secret keys after the server has sent a secret key to initiate a resynchronization. The attacker may gain nothing by replaying that message since it is only of use up until when the access terminal initiates resynchronization. Since the secret key may be sent without protection during resynchronization, the access terminal may be able to verify the resynchronization message using the secret key as described above.</p>
<p id="p-0048" num="0047">The secret keys may be different than the link keys so that an attacker may not be able to intercept the secret key being sent, stop that message being delivered, and then the use the value of the secret key in the way that the link key is used (that is, for generating verifiable messages) to send fake messages to the access terminal. If the secret and link key are the same, fake messages may then be verified at the access terminal.</p>
<p id="p-0049" num="0048"><figref idref="DRAWINGS">FIG. 3</figref> is a block diagram illustrating an access terminal configured to perform resynchronization with a server using a secret key. The access terminal <b>302</b> may include a processing circuit <b>304</b> coupled to a wireless communication interface <b>306</b> to communicate over a wireless network with a server, a secure storage device <b>308</b> to store a secret key that may be uniquely associated with the access terminal and the server and an application storage device <b>310</b> to store a link key uniquely associated with the access terminal and the server. The processing circuit <b>304</b> may be configured authenticate or verify messages sent by the server and to initiate a secure communication link with the server for resynchronization.</p>
<p id="p-0050" num="0049"><figref idref="DRAWINGS">FIG. 4</figref> is a flow diagram illustrating a method operational in an access terminal to perform resynchronization with a server using a secret key. Initially, a secure communication link may be established with the server. The access terminal may then listen for broadcasts from the server so that it may establish a first secret key and a first link key <b>400</b>. The first secret key and the first link key may be unique to the particular access terminal and server combination. Upon establishing the first secret key, the access terminal may store the first secret key in a secure memory space or device <b>402</b>. Upon receiving the first link key, the access terminal may store the first link key in an application memory space or device <b>404</b>.</p>
<p id="p-0051" num="0050">The access terminal may then listen for pushed, sent or broadcasted messages from the server. When messages are received, the access terminal may verify or authenticate the sender of the message using the first link key <b>406</b>. As the first link key may be unique with the server, the access terminal may know if the messages are from the server or from another sender. If the first link key sent with the pushed message matches the first link key the access terminal has stored in the application memory device, the pushed message may be verified as coming from the server. If the access terminal falls out of synchronization with the server, it may receive a resynchronization message from the server with the first secret key attached <b>408</b>. If a resynchronization message is identified, the access terminal may determine if the attached first secret key matches the first secret key it stored in the secure memory device <b>410</b>. If the stored first secret key and the attached first secret key do not match, the access terminal may continue to receive and verify messages from pushed, sent or broadcast from the server using the first link key <b>408</b>, as described above. If the stored first secret key and the attached first secret key match, the access terminal may initiate or establish a secure communication link or channel with the server in preparation for resynchronization <b>412</b>. After establishing the secure communication link, the access terminal may discard the first secure key stored in the secure memory storage in preparation for establishing new or second secret key <b>414</b>.</p>
<p id="p-0052" num="0051">The access terminal may then listen for broadcasts from the server so that it may establish a second secret key, and optionally establish a second link key <b>416</b>. The second secret key and the second link key, if established, may be unique to the particular access terminal and server combination. Upon receiving the second secret key, the access terminal may store the second secret key in the secure memory device <b>418</b>. If a second link key is received, the access terminal may store the second link key in the application memory device <b>420</b>. Alternatively, if a second link key is not established, the access terminal and the server may continue to utilize the first link key to send and verify messages. This resynchronization process may be repeated each time there is a loss of synchronization.</p>
<p id="p-0053" num="0052">Furthermore, the first link key may be updated/refreshed/changed multiple times prior to a resynchronization message being received. As a result, the first secret key may not be changed despite the first link key being changed.</p>
<p id="p-0054" num="0053">According to yet another configuration, a circuit in an access terminal may be adapted to perform resynchronization with a server. The same circuit, a different circuit, or a second section of the same or different circuit may be adapted to establish a first secret key and a first link key with the server over a secure communication link. In addition, the same circuit, a different circuit, or a third section may be adapted to store the first secret key in a redundant or secure memory device. Similarly, the same circuit, a different circuit, or a fourth section may be adapted to store the first link key in an application memory device. The same circuit, a different circuit, or a fifth section may be adapted to receive and verify messages from the server using the first link key. The same circuit, a different circuit, or a sixth section may be adapted to receive resynchronization messages from the server with the first secret key attached. The same circuit, a different circuit, or a seventh section may be adapted to compare the stored first secret key with the first secret key attached to the resynchronization message. The same circuit, a different circuit, or an eighth section may be adapted to initiate or establish a secure communication link with the server. The same circuit, a different circuit, or a ninth section may be adapted to discard the stored first secret key. The same circuit, a different circuit, or a tenth section may be adapted to receive a second secret key and optionally a second link key from the server. The same circuit, a different circuit, or an eleventh section may be adapted to store the second secret key in the secure memory device. The same circuit, a different circuit, or a twelfth section may be adapted to store a second link key in the application memory device if the server generates a second link key.</p>
<p id="p-0055" num="0054">One of ordinary skill in the art will recognize that, generally, most of the processing described in this disclosure may be implemented in a similar fashion. Any of the circuit(s) or circuit sections may be implemented alone or in combination as part of an integrated circuit with one or more processors. The one or more of the circuits may be implemented on an integrated circuit, an Advance RISC Machine (ARM) processor, a digital signal processor (DSP), a general purpose processor, etc.</p>
<p id="p-0056" num="0055"><figref idref="DRAWINGS">FIG. 5</figref> is a block diagram illustrating a server configured to facilitate resynchronization with an access terminal using a secret key. The authenticator <b>502</b> may include a processing circuit <b>504</b> coupled to a communication interface <b>506</b> to communicate over a network with an access terminal and a storage device <b>508</b> to store secret keys and link keys uniquely associated with access terminals. The processing circuit <b>504</b> (e.g., processor, processing module, etc.) may include a key generator module <b>510</b> configured to generate one or more secret and link keys that can be used to secure a communication session. In various applications, the server <b>502</b> may be a located at a network controller or it may be co-located with one or more access nodes.</p>
<p id="p-0057" num="0056"><figref idref="DRAWINGS">FIG. 6</figref> is a flow diagram illustrating a method operational in a server to facilitate resynchronization with an access terminal using a secret key. Initially, the server may generate a first secret key and a first link key uniquely associated with an access terminal <b>600</b>. As described above, the first secret key and the first link key may be generated by any method known in the art that may allow the keys to not be predicted so that they may remain secrets only the server and the access terminal know.</p>
<p id="p-0058" num="0057">The first secret key and the first link key may be sent to the access terminal over the secure communication link or channel that may have been previously established by the access terminal <b>602</b>. The sever may then push, send or broadcast messages signed with the first link key to the access terminal <b>604</b>. The server may determine if synchronization has been lost with the access terminal <b>606</b>. It may be determined that synchronization has been lost if the server does not receive a reply to messages it is sending or if it gets a denial to a message from the access terminal, for example if the access terminal lost the first link key. If synchronization has not been lost, the server may continue to broadcast messages signed with the first link key to the access terminal <b>604</b>. If synchronization has been lost, the server may push, send or broadcast a resynchronization message, with the first secret key attached, to the access terminal <b>608</b>. A second secret key and optionally a second link key may then be generated by the server <b>610</b>. Once generated, the server may push, send or broadcast the second secret key and the second link key, if generated, to the access terminal <b>612</b>. Alternatively, if a second link key is not generated, the access terminal and the server may continue to utilize the first link key to send and verify messages. This resynchronization process may be repeated each time there is a loss of synchronization.</p>
<p id="p-0059" num="0058">Furthermore, the first link key may be updated/refreshed/changed multiple times prior to a resynchronization message being received. As a result, the first secret key may not be changed despite the first link key being changed.</p>
<p id="p-0060" num="0059">According to yet another configuration, a circuit in a server may be adapted to perform resynchronization using a secret key with the access terminal. The same circuit, a different circuit, or a second section of the same or different circuit may be adapted to generate a first secret key and a first link key associated with the access terminal. In addition, the same circuit, a different circuit, or a third section may be adapted to send or broadcast the first secret key and the first link key to the access terminal. Similarly, the same circuit, a different circuit, or a fourth section may be adapted to send or broadcast messages signed with the first link key to the access terminal. The same circuit, a different circuit, or a fifth section may be adapted to determine if synchronization has been lost with the access terminal. The same circuit, a different circuit, or a sixth section may be adapted to send or broadcast a resynchronization message, with the first secret key attached, to the access terminal. The same circuit, a different circuit, or a seventh section may be adapted to generate a second secret key and optionally a second link key uniquely associated with the access terminal. The same circuit, a different circuit, or an eighth section may be adapted to send or broadcast the second secret key and the second link key, if generated, to the access terminal.</p>
<p id="p-0061" num="0060">One of ordinary skill in the art will recognize that, generally, most of the processing described in this disclosure may be implemented in a similar fashion. Any of the circuit(s) or circuit sections may be implemented alone or in combination as part of an integrated circuit with one or more processors. The one or more of the circuits may be implemented on an integrated circuit, an Advance RISC Machine (ARM) processor, a digital signal processor (DSP), a general purpose processor, etc.</p>
<p id="p-0062" num="0061">One or more of the components, steps, and/or functions illustrated in <figref idref="DRAWINGS">FIGS. 1</figref>, <b>2</b>, <b>3</b>, <b>4</b>, <b>5</b> and/or <b>6</b> may be rearranged and/or combined into a single component, step, or function or embodied in several components, steps, or functions. Additional elements, components, steps, and/or functions may also be added. The apparatus, devices, and/or components illustrated in <figref idref="DRAWINGS">FIGS. 1</figref>, <b>3</b>, and <b>5</b> may be configured or adapted to perform one or more of the methods, features, or steps described in <figref idref="DRAWINGS">FIGS. 2</figref>, <b>4</b> and/or <b>6</b>. The algorithms described herein may be efficiently implemented in software and/or embedded hardware.</p>
<p id="p-0063" num="0062">Those of skill in the art would further appreciate that the various illustrative logical blocks, modules, circuits, and algorithm steps described in connection with the configurations disclosed herein may be implemented as electronic hardware, computer software, or combinations of both. To clearly illustrate this interchangeability of hardware and software, various illustrative components, blocks, modules, circuits, and steps have been described above generally in terms of their functionality. Whether such functionality is implemented as hardware or software depends upon the particular application and design constraints imposed on the overall system.</p>
<p id="p-0064" num="0063">It should be noted that the foregoing configurations are merely examples and are not to be construed as limiting the claims. The description of the configurations is intended to be illustrative, and not to limit the scope of the claims. As such, the present teachings can be readily applied to other types of apparatuses and many alternatives, modifications, and variations will be apparent to those skilled in the art.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>The invention claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A method operational on an access terminal, comprising:
<claim-text>establishing a first secret key for resynchronizing with a server;</claim-text>
<claim-text>storing the first secret key in a secure memory device;</claim-text>
<claim-text>receiving a resynchronization message from the server when the server detects a loss of synchronization, the resynchronization message including an attached first secret key;</claim-text>
<claim-text>comparing the stored first secret key to the attached first secret key in the synchronization message to authenticate the resynchronization message; and</claim-text>
<claim-text>in response to a determination that the stored first key matches the attached first secret key in the resynchronization message, receiving a second secret key, storing the second secret key in the secure memory device, and comparing the second secret key to an attached second secret key in a second resynchronization message when another loss of synchronization occurs.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:
<claim-text>establishing a first link key for verifying messages sent from the server or from entities authorized by the server; and</claim-text>
<claim-text>storing the first link key in application memory device.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the first secret key and the first link key are randomly selected by the server.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the server repeatedly sends the resynchronization message to the access terminal until a reply is received from the access terminal.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the first link key allows the access terminal to identify received messages that should be processed and those that should be ignored.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the first secret key and the first link key are different.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein if the stored first secret key matches the first secret key in the synchronization message, further comprising:
<claim-text>establishing a secure communication link with the server.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The method of <claim-ref idref="CLM-00007">claim 7</claim-ref>, further comprising:
<claim-text>discarding the stored first secret key after the secure communication link has been established.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The method of <claim-ref idref="CLM-00008">claim 8</claim-ref>, further comprising:
<claim-text>establishing the second secret key for resynchronizing with the server; and</claim-text>
<claim-text>storing the second secret key in the secure memory device.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The method of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the second secret key is randomly selected by the server.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The method of <claim-ref idref="CLM-00009">claim 9</claim-ref>, further comprising:
<claim-text>establishing a second link key for verifying messages sent from the server; and</claim-text>
<claim-text>storing the second link key in the application memory device.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the resynchronization message is sent after the access terminal fails to respond to messages sent by the server.</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The method of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the messages are Short Message Service (SMS) messages.</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The method of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the messages are signed using the first link key and the access terminal uses the first link key stored in the application memory device to verify the messages.</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the resynchronization message is sent unencrypted.</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the access terminal is a mobile wireless device.</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. An access terminal comprising:
<claim-text>a communication interface;</claim-text>
<claim-text>a processing circuit coupled to the communication interface, the processing circuit configured to:</claim-text>
<claim-text>establish a first secret key for resynchronizing with a server;</claim-text>
<claim-text>store the first secret key in a secure memory device;</claim-text>
<claim-text>receive a resynchronization message from the server when the server detects a loss of synchronization, the resynchronization message including an attached first secret key;</claim-text>
<claim-text>compare the stored first secret key to the attached first secret key in the synchronization message to authenticate the resynchronization message; and</claim-text>
<claim-text>in response to a determination that the stored first key matches the attached first secret key in the resynchronization message, receive a second secret key, store the second secret key in the secure memory device, and compare the second secret key to an attached second secret key in a second resynchronization message when another loss of synchronization occurs.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The access terminal of <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein the processing circuit is further configured to:
<claim-text>establish a first link key for verifying messages sent from the server or from entities authorized by the server; and</claim-text>
<claim-text>store the first link key in application memory device.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. The access terminal of <claim-ref idref="CLM-00018">claim 18</claim-ref>, wherein the first secret key and the first link key are randomly selected by the server.</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. The access terminal of <claim-ref idref="CLM-00018">claim 18</claim-ref>, wherein the first link key allows the access terminal to identify received messages that should be processed and those that should be ignored.</claim-text>
</claim>
<claim id="CLM-00021" num="00021">
<claim-text>21. The access terminal of <claim-ref idref="CLM-00018">claim 18</claim-ref>, wherein the first secret key and the first link key are different.</claim-text>
</claim>
<claim id="CLM-00022" num="00022">
<claim-text>22. The access terminal of <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein if the stored first secret key matches the first secret key in the synchronization message, the processing circuit is further configured to:
<claim-text>establish a secure communication link with the server.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00023" num="00023">
<claim-text>23. The access terminal of <claim-ref idref="CLM-00022">claim 22</claim-ref>, wherein the processing circuit is further configured to:
<claim-text>discard the stored first secret key after the secure communication link has been established.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00024" num="00024">
<claim-text>24. The access terminal of <claim-ref idref="CLM-00023">claim 23</claim-ref>, wherein the processing circuit is further configured to:
<claim-text>establish the second secret key for resynchronizing with the server; and</claim-text>
<claim-text>store the second secret key in the secure memory device.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00025" num="00025">
<claim-text>25. The access terminal of <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein the resynchronization message is sent after the access terminal fails to respond to messages sent by the server.</claim-text>
</claim>
<claim id="CLM-00026" num="00026">
<claim-text>26. The access terminal of <claim-ref idref="CLM-00025">claim 25</claim-ref>, wherein the messages are signed using the first link key and the access terminal uses the first link key stored in the application memory device to verify the messages.</claim-text>
</claim>
<claim id="CLM-00027" num="00027">
<claim-text>27. A circuit for wireless network communications, wherein the circuit is adapted to:
<claim-text>establish a first secret key for resynchronizing with a server;</claim-text>
<claim-text>store the first secret key in a secure memory device;</claim-text>
<claim-text>receive a resynchronization message from the server when the server detects a loss of synchronization, the resynchronization message including an attached first secret key;</claim-text>
<claim-text>compare the stored first secret key to the attached first secret key in the synchronization message to authenticate the resynchronization message; and</claim-text>
<claim-text>in response to a determination that the stored first key matches the attached first secret key in the resynchronization message, receive a second secret key, store the second secret key in the secure memory device, and compare the second secret key to an attached second secret key in a second resynchronization message when another loss of synchronization occurs.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00028" num="00028">
<claim-text>28. The circuit of <claim-ref idref="CLM-00027">claim 27</claim-ref>, further adapted to:
<claim-text>establish a first link key for verifying messages sent from the server or from entities authorized by the server; and</claim-text>
<claim-text>store the first link key in application memory device.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00029" num="00029">
<claim-text>29. The circuit of <claim-ref idref="CLM-00027">claim 27</claim-ref>, wherein if the stored first secret key matches the first secret key in the synchronization message, further adapted to:
<claim-text>establish a secure communication link with the server.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00030" num="00030">
<claim-text>30. The circuit of <claim-ref idref="CLM-00029">claim 29</claim-ref>, further adapted to:
<claim-text>discard the stored first secret key after the secure communication link has been established;</claim-text>
<claim-text>establish the second secret key for resynchronizing with the server; and</claim-text>
<claim-text>store the second secret key in the secure memory device.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00031" num="00031">
<claim-text>31. A non-transitory computer-readable medium comprising instructions for resynchronization, which when executed by a processor causes the processor to:
<claim-text>establish a first secret key for resynchronizing with a server;</claim-text>
<claim-text>store the first secret key in a secure memory device;</claim-text>
<claim-text>receive a resynchronization message from the server when the server detects a loss of synchronization, the resynchronization message including an attached first secret key;</claim-text>
<claim-text>compare the stored first secret key to the attached first secret key in the synchronization message to authenticate the resynchronization message; and</claim-text>
<claim-text>in response to a determination that the stored first key matches the attached first secret key in the resynchronization message, receive a second secret key, store the second secret key in the secure memory device, and compare the second secret key to an attached second secret key in a second resynchronization message when another loss of synchronization occurs.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00032" num="00032">
<claim-text>32. The non-transitory computer-readable medium of <claim-ref idref="CLM-00031">claim 31</claim-ref>, further comprising instructions which when executed by a processor causes the processor to:
<claim-text>establish a first link key for verifying messages sent from the server or from entities authorized by the server; and</claim-text>
<claim-text>store the first link key in application memory device.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00033" num="00033">
<claim-text>33. The non-transitory computer-readable medium of <claim-ref idref="CLM-00031">claim 31</claim-ref>, wherein if the stored first secret key matches the first secret key in the synchronization message, further comprising instructions which when executed by a processor causes the processor to:
<claim-text>establish a secure communication link with the server;</claim-text>
<claim-text>discard the stored first secret key after the secure communication link has been established;</claim-text>
<claim-text>establish the second secret key for resynchronizing with the server; and</claim-text>
<claim-text>store the second secret key in the secure memory device.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00034" num="00034">
<claim-text>34. A method operational on a server, comprising:
<claim-text>generating a first secret key for resynchronizing with an access terminal;</claim-text>
<claim-text>sending the first secret key to the access terminal over a secure communication link, the first secret key to be stored in a secure memory device on the access terminal;</claim-text>
<claim-text>sending a resynchronization message to the access terminal if synchronization has been lost, the resynchronization message including an attached first secret key for verifying identify of the server; and</claim-text>
<claim-text>in response to a determination that the stored first key matches the attached first secret key in the resynchronization message, sending a second secret key for storing in the secure memory device, the stored second secret key compared to an attached second secret key in a second resynchronization message received when another loss of synchronization occurs.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00035" num="00035">
<claim-text>35. The method of <claim-ref idref="CLM-00034">claim 34</claim-ref>, further comprising:
<claim-text>generating a first link key for verifying a source of the messages or from entities authorized by the server; and</claim-text>
<claim-text>sending the first link key to the access terminal over the secure communication link, the first link key to be stored in an application memory device.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00036" num="00036">
<claim-text>36. The method of <claim-ref idref="CLM-00035">claim 35</claim-ref>, wherein the first secret key and the first link key are randomly generated.</claim-text>
</claim>
<claim id="CLM-00037" num="00037">
<claim-text>37. The method of <claim-ref idref="CLM-00035">claim 35</claim-ref>, wherein the synchronization with the access terminal has been lost if the access terminal fails to respond to messages sent by the server.</claim-text>
</claim>
<claim id="CLM-00038" num="00038">
<claim-text>38. The method of <claim-ref idref="CLM-00035">claim 35</claim-ref>, further comprising
<claim-text>sending traffic messages to the access terminal signed with the first link key.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00039" num="00039">
<claim-text>39. The method of <claim-ref idref="CLM-00035">claim 35</claim-ref>, wherein the first link key allows the access terminal to identify received messages that should be processed and those that should be ignored.</claim-text>
</claim>
<claim id="CLM-00040" num="00040">
<claim-text>40. The method of <claim-ref idref="CLM-00035">claim 35</claim-ref>, wherein the first secret key and the first link key are different.</claim-text>
</claim>
<claim id="CLM-00041" num="00041">
<claim-text>41. The method of <claim-ref idref="CLM-00034">claim 34</claim-ref>, wherein the resynchronization message is sent unencrypted.</claim-text>
</claim>
<claim id="CLM-00042" num="00042">
<claim-text>42. The method of <claim-ref idref="CLM-00034">claim 34</claim-ref>, wherein the first secret key is initially sent using encryption, integrity protection or replay protection.</claim-text>
</claim>
<claim id="CLM-00043" num="00043">
<claim-text>43. The method of <claim-ref idref="CLM-00034">claim 34</claim-ref>, wherein the resynchronization message is sent if the traffic messages are unacknowledged by the access terminal.</claim-text>
</claim>
<claim id="CLM-00044" num="00044">
<claim-text>44. The method of <claim-ref idref="CLM-00034">claim 34</claim-ref>, further comprising:
<claim-text>generating the second secret key for resynchronizing with the access terminal; and</claim-text>
<claim-text>sending the second secret key to the access terminal over a secure communication link initiated by the access terminal, the second secret key to be stored in the secure memory device on the access terminal.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00045" num="00045">
<claim-text>45. The method of <claim-ref idref="CLM-00044">claim 44</claim-ref>, wherein the second secret key is sent using encryption, integrity protection or replay protection.</claim-text>
</claim>
<claim id="CLM-00046" num="00046">
<claim-text>46. The method of <claim-ref idref="CLM-00039">claim 39</claim-ref>, wherein the access terminal is a mobile wireless device.</claim-text>
</claim>
<claim id="CLM-00047" num="00047">
<claim-text>47. A server comprising:
<claim-text>a communication interface;</claim-text>
<claim-text>a processing circuit coupled to the communication interface, the processing circuit configured to:</claim-text>
<claim-text>generate a first secret key for resynchronizing with an access terminal;</claim-text>
<claim-text>send the first secret key to the access terminal over a secure communication link, the first secret key to be stored in a secure memory device on the access terminal;</claim-text>
<claim-text>send a resynchronization message to the access terminal if synchronization has been lost, the resynchronization message including an attached first secret key for verifying identify of the server; and</claim-text>
<claim-text>in response to a determination that the stored first key matches the attached first secret key in the resynchronization message, send a second secret key for storing in the secure memory device, the stored second secret key compared to an attached second secret key in a second resynchronization message received when another loss of synchronization occurs.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00048" num="00048">
<claim-text>48. The server of <claim-ref idref="CLM-00047">claim 47</claim-ref>, wherein the processing circuit is further configured to:
<claim-text>generate a first link key for verifying a source of the messages or from entities authorized by the server; and</claim-text>
<claim-text>send the first link key to the access terminal over the secure communication link, the first link key to be stored in an application memory device.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00049" num="00049">
<claim-text>49. The server of <claim-ref idref="CLM-00048">claim 48</claim-ref>, wherein the first secret key and the first link key are randomly generated.</claim-text>
</claim>
<claim id="CLM-00050" num="00050">
<claim-text>50. The server of <claim-ref idref="CLM-00048">claim 48</claim-ref>, wherein the first secret key and the first link key are different.</claim-text>
</claim>
<claim id="CLM-00051" num="00051">
<claim-text>51. The server of <claim-ref idref="CLM-00047">claim 47</claim-ref>, wherein the resynchronization message is sent unencrypted.</claim-text>
</claim>
<claim id="CLM-00052" num="00052">
<claim-text>52. The server of <claim-ref idref="CLM-00047">claim 47</claim-ref>, wherein the processing circuit is further configured to:
<claim-text>send traffic messages to the access terminal signed with the first link key.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00053" num="00053">
<claim-text>53. The server of <claim-ref idref="CLM-00047">claim 47</claim-ref>, wherein the resynchronization message is sent if the traffic messages are unacknowledged by the access terminal.</claim-text>
</claim>
<claim id="CLM-00054" num="00054">
<claim-text>54. The server of <claim-ref idref="CLM-00047">claim 47</claim-ref>, wherein the processing circuit is further configured to:
<claim-text>generate the second secret key for resynchronizing with the access terminal; and</claim-text>
<claim-text>send the second secret key to the access terminal over a secure communication link initiated by the access terminal, the second secret key to be stored in the secure memory device on the access terminal.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00055" num="00055">
<claim-text>55. A circuit for wireless network communications, wherein the circuit is adapted to:
<claim-text>generate a first secret key for resynchronizing with an access terminal;</claim-text>
<claim-text>send the first secret key to the access terminal over a secure communication link, the first secret key to be stored in a secure memory device on the access terminal;</claim-text>
<claim-text>send a resynchronization message to the access terminal if synchronization has been lost, the resynchronization message including an attached first secret key for verifying identify of the server; and</claim-text>
<claim-text>in response to a determination that the stored first key matches the attached first secret key in the resynchronization message, send a second secret key for storing in the secure memory device, the stored second secret key compared to an attached second secret key in a second resynchronization message received when another loss of synchronization occurs.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00056" num="00056">
<claim-text>56. The circuit of <claim-ref idref="CLM-00055">claim 55</claim-ref>, wherein the circuit is further adapted to
<claim-text>generate a first link key for verifying a source of the messages or from entities authorized by the server; and</claim-text>
<claim-text>send the first link key to the access terminal over the secure communication link, the first link key to be stored in an application memory device.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00057" num="00057">
<claim-text>57. The circuit of <claim-ref idref="CLM-00055">claim 55</claim-ref>, wherein the synchronization with the access terminal has been lost if the access terminal fails to respond to messages sent by the server.</claim-text>
</claim>
<claim id="CLM-00058" num="00058">
<claim-text>58. A non-transitory computer-readable medium comprising instructions for resynchronization, which when executed by a processor causes the processor to:
<claim-text>generate a first secret key for resynchronizing with an access terminal;</claim-text>
<claim-text>send the first secret key to the access terminal over a secure communication link, the first secret key to be stored in a secure memory device on the access terminal;</claim-text>
<claim-text>send a resynchronization message to the access terminal if synchronization has been lost, the resynchronization message including an attached first secret key for verifying identify of the server; and</claim-text>
<claim-text>in response to a determination that the stored first key matches the attached first secret key in the resynchronization message, send a second secret key for storing in the secure memory device, the stored second secret key compared to an attached second secret key in a second resynchronization message received when another loss of synchronization occurs.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00059" num="00059">
<claim-text>59. The non-transitory computer-readable medium of <claim-ref idref="CLM-00058">claim 58</claim-ref>, further comprising instructions which when executed by a processor causes the processor to
<claim-text>generate a first link key for verifying a source of the messages or from entities authorized by the server; and</claim-text>
<claim-text>send the first link key to the access terminal over the secure communication link, the first link key to be stored in an application memory device.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00060" num="00060">
<claim-text>60. The non-transitory computer-readable medium of <claim-ref idref="CLM-00058">claim 58</claim-ref>, wherein the synchronization with the access terminal has been lost if the access terminal fails to respond to messages sent by the server. </claim-text>
</claim>
</claims>
</us-patent-grant>

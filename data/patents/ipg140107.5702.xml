<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08626803-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08626803</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>12154873</doc-number>
<date>20080527</date>
</document-id>
</application-reference>
<us-application-series-code>12</us-application-series-code>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>7</main-group>
<subgroup>00</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>707807</main-classification>
<further-classification>707809</further-classification>
</classification-national>
<invention-title id="d2e43">Method and apparatus for automatically providing network services</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>6473748</doc-number>
<kind>B1</kind>
<name>Archer</name>
<date>20021000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>706 45</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>6631519</doc-number>
<kind>B1</kind>
<name>Nicholson et al.</name>
<date>20031000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717169</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>6996570</doc-number>
<kind>B2</kind>
<name>Noble et al.</name>
<date>20060200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>  1  1</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>2001/0009033</doc-number>
<kind>A1</kind>
<name>Morisaki et al.</name>
<date>20010700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717  1</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>2002/0147611</doc-number>
<kind>A1</kind>
<name>Greene et al.</name>
<date>20021000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>705  1</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>2003/0041065</doc-number>
<kind>A1</kind>
<name>Lucovsky et al.</name>
<date>20030200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707 10</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>2003/0115548</doc-number>
<kind>A1</kind>
<name>Melgar</name>
<date>20030600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>715513</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>2004/0002958</doc-number>
<kind>A1</kind>
<name>Seshadri et al.</name>
<date>20040100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707  3</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>2004/0122656</doc-number>
<kind>A1</kind>
<name>Abir</name>
<date>20040600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>704  4</main-classification></classification-national>
</us-citation>
<us-citation>
<nplcit num="00010">
<othercit>Ceri et al. IEEE Internet Computing, Aug. 2002, pp. 20-30.</othercit>
</nplcit>
<category>cited by examiner</category>
</us-citation>
<us-citation>
<nplcit num="00011">
<othercit>Ceri et al., Computer Networks, 2000, pp. 137-157.</othercit>
</nplcit>
<category>cited by examiner</category>
</us-citation>
<us-citation>
<nplcit num="00012">
<othercit>Microsoft Corporation, Microsoft Computer Dictionary, 5th Edition, 2002, pp. 487 and 576.</othercit>
</nplcit>
<category>cited by examiner</category>
</us-citation>
<us-citation>
<nplcit num="00013">
<othercit>Ceri et al., Proceedings of the 25th VLDB Conference, Edingburg, Scotland, pp. 615-626, 1999.</othercit>
</nplcit>
<category>cited by examiner</category>
</us-citation>
<us-citation>
<nplcit num="00014">
<othercit>Sakellaris et al., 2002 Proceedings of thte 23rd Annual EMBS International Conference Oct. 25-28, Istanbul Turkey, pp. 3630-3633.</othercit>
</nplcit>
<category>cited by examiner</category>
</us-citation>
<us-citation>
<nplcit num="00015">
<othercit>Ramakrishnan, R., Database Management Systems, WCB/McGraw-Hill, 1997, p. 232.</othercit>
</nplcit>
<category>cited by examiner</category>
</us-citation>
</us-references-cited>
<number-of-claims>24</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>707807</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>707809</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>18</number-of-drawing-sheets>
<number-of-figures>18</number-of-figures>
</figures>
<us-related-documents>
<continuation>
<relation>
<parent-doc>
<document-id>
<country>US</country>
<doc-number>10401121</doc-number>
<date>20030327</date>
</document-id>
<parent-grant-document>
<document-id>
<country>US</country>
<doc-number>7457815</doc-number>
</document-id>
</parent-grant-document>
</parent-doc>
<child-doc>
<document-id>
<country>US</country>
<doc-number>12154873</doc-number>
</document-id>
</child-doc>
</relation>
</continuation>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20080235270</doc-number>
<kind>A1</kind>
<date>20080925</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Hsu</last-name>
<first-name>Karl</first-name>
<address>
<city>San Jose</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Jouaux</last-name>
<first-name>Francois</first-name>
<address>
<city>Woodside</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="003" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Kim</last-name>
<first-name>Ernest</first-name>
<address>
<city>Redwood City</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="004" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Lue-Sang</last-name>
<first-name>Ron</first-name>
<address>
<city>Sunnyvale</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="005" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Turner</last-name>
<first-name>Melissa</first-name>
<address>
<city>Burlingame</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="006" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Wendker</last-name>
<first-name>Andreas</first-name>
<address>
<city>San Jose</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Hsu</last-name>
<first-name>Karl</first-name>
<address>
<city>San Jose</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Jouaux</last-name>
<first-name>Francois</first-name>
<address>
<city>Woodside</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="003" designation="us-only">
<addressbook>
<last-name>Kim</last-name>
<first-name>Ernest</first-name>
<address>
<city>Redwood City</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="004" designation="us-only">
<addressbook>
<last-name>Lue-Sang</last-name>
<first-name>Ron</first-name>
<address>
<city>Sunnyvale</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="005" designation="us-only">
<addressbook>
<last-name>Turner</last-name>
<first-name>Melissa</first-name>
<address>
<city>Burlingame</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="006" designation="us-only">
<addressbook>
<last-name>Wendker</last-name>
<first-name>Andreas</first-name>
<address>
<city>San Jose</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Novak Druce Connolly Bove + Quigg LLP</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>Apple Inc.</orgname>
<role>02</role>
<address>
<city>Cupertino</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Ly</last-name>
<first-name>Cheyne D</first-name>
<department>2168</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">An embodiment of the invention is directed to a method and apparatus for automatically providing network services in a way that improves upon the prior art. Systems implementing aspects of the invention can, for instance, provide developers with a mechanism for creating Web Services without having to write low-level SOAP, XML, or WSDL code. The system utilizes a rule-based approach to provide a mechanism for dynamically reconfiguring the system with requiring redeployment of the entire system.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="179.49mm" wi="173.82mm" file="US08626803-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="232.33mm" wi="182.71mm" file="US08626803-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="219.03mm" wi="161.21mm" file="US08626803-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="156.80mm" wi="182.29mm" file="US08626803-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="155.96mm" wi="181.44mm" file="US08626803-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="211.16mm" wi="165.86mm" file="US08626803-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="194.82mm" wi="172.80mm" file="US08626803-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="242.99mm" wi="168.40mm" file="US08626803-20140107-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00008" num="00008">
<img id="EMI-D00008" he="160.70mm" wi="175.85mm" file="US08626803-20140107-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00009" num="00009">
<img id="EMI-D00009" he="198.88mm" wi="166.79mm" file="US08626803-20140107-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00010" num="00010">
<img id="EMI-D00010" he="171.79mm" wi="175.77mm" file="US08626803-20140107-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00011" num="00011">
<img id="EMI-D00011" he="237.83mm" wi="171.87mm" file="US08626803-20140107-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00012" num="00012">
<img id="EMI-D00012" he="149.01mm" wi="175.43mm" file="US08626803-20140107-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00013" num="00013">
<img id="EMI-D00013" he="235.88mm" wi="178.39mm" file="US08626803-20140107-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00014" num="00014">
<img id="EMI-D00014" he="162.81mm" wi="184.74mm" file="US08626803-20140107-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00015" num="00015">
<img id="EMI-D00015" he="180.85mm" wi="165.86mm" file="US08626803-20140107-D00015.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00016" num="00016">
<img id="EMI-D00016" he="145.12mm" wi="173.65mm" file="US08626803-20140107-D00016.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00017" num="00017">
<img id="EMI-D00017" he="236.98mm" wi="169.67mm" file="US08626803-20140107-D00017.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00018" num="00018">
<img id="EMI-D00018" he="176.53mm" wi="176.87mm" file="US08626803-20140107-D00018.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?RELAPP description="Other Patent Relations" end="lead"?>
<p id="p-0002" num="0001">This application is a continuation of U.S. patent application Ser. No. 10/401,121, issued as U.S. Pat. No. 7,457,815, entitled METHOD AND APPARATUS FOR AUTOMATICALLY PROVIDING NETWORK SERVICES, filed Mar. 27, 2003, which is incorporated herein by reference for all purposes.</p>
<?RELAPP description="Other Patent Relations" end="tail"?>
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">FIELD OF THE INVENTION</heading>
<p id="p-0003" num="0002">The invention relates to the field of computer software. More particularly, the invention is directed to computer software configured to enable systems to provide network services.</p>
<heading id="h-0002" level="1">BACKGROUND</heading>
<p id="p-0004" num="0003">Computer networks provide users with an efficient way to share information. It is commonplace, for example, for users to exchange data using collaborative applications such as email or access stored information using other data retrieval applications. One of the more widely used data retrieval applications is referred to as a web browser. Web browsers are typically configured to obtain data from a World Wide Web of interconnected server computers (hereinafter the Web) using a number of standardized data communication protocols. The Web utilizes a client-server architecture made up of multiple client computers executing a Web Browser application that handles connecting to and retrieving information from one or more server applications.</p>
<p id="p-0005" num="0004">Once the requested information is retrieved, the Web Browser application parses the obtained information and displays aspects of that information to the user. For example, a user may utilize a Web Browser to access a web site that provides information served in the form of Hyper-Text Markup Language (HTML) or in Extended Markup Language (XML). The portions of HTML or XML information that relate to components intended for display are presented to the user via a standard computer display.</p>
<p id="p-0006" num="0005">The server computer(s) executing at the web site are configured to handle requests for information by executing a suite of applications. One such a web server application handles requests to transfer data (e.g., HTTP requests), whereas Common Gateway Interface (CGI) programs handle access to data stored in a database and can generate HTML documents that are then transmitted to the requesting user. A web server will typically invoke a CGI program when the system receives a request from a client for a particular script. Practical Extension Reporting Language (PERL) scripts and other server side scripting languages are examples of the type of scripts often handled using CGI. Although such scripts can fulfill many system needs, a problem with using CGI scripts is that the scripts become increasingly difficult to create when utilized to access complex data sources or dynamically provide information.</p>
<p id="p-0007" num="0006">Due in large part to the complexity involved when using the scripting approach, those of ordinary skill in the art often prefer to use Application Servers in lieu of writing complex scripts. Application Servers have far more flexibility and can provide an effective mechanism for accessing databases and generating output documents using a framework that enables developers to add new functionality and handle tasks such as object persistence, session management, and fail-over protection. However, programming an interface to an Application Server is made difficult by the fact that most systems do not have a tightly constrained set of end-users. Since it is increasingly common for businesses to provide business-to-business services involving multiple types of end-users, there is a need for a more flexible approach to building Application Server interfaces.</p>
<p id="p-0008" num="0007">When developing server applications for electronic data providers, developers face several challenges. The end-users of such systems are generally not pre-defined. Adequately serving the needs of these users requires that the functions implemented to serve the data made available by the system be modified, or new functions added every time the data representation relating to the served data is modified or new data content added. To minimize the cost of adding new functionality or modifying existing ones, an efficient architecture for interfacing with an Application Server or some other data source is needed. It would, for example, be highly desirable if developers could reuse existing program code, minimize the number of locations where the source code must be altered, and prevent alterations in some parts of the code that affect other functions if such effect is not intentional.</p>
<p id="p-0009" num="0008">A breed of Web application called Web Services, provides a way to resolve some of the problems and accomplish some of the goals stated above. Web Services are self-contained, self-describing, modular applications that can be published, located, and invoked across the Web. Web Services perform functions, which can be anything from simple requests to complicated business processes. Once a Web Service is deployed, other applications (and other Web services) can discover and invoke the deployed service.</p>
<p id="p-0010" num="0009">Viewed from an application architecture perspective, Web Services provide a method that enables programmatic access to a service which is then implemented by other kinds of software (e.g., middleware). Access is achieved through the use of a listener and an interface for exposing operations supported by a business logic implemented by a traditional middleware platform. The Web Service architecture segments the services it provides into discrete functional components generally destined for use by other server-side software (e.g. CGI programs). The component-based model involves blocks of software program code, which programmers may reuse to extend the system's capabilities. To exchange data between servers associated with different business entities, Application Servers at each of the different business entities communicate using mutually recognizable data communication protocols. An overview of the various protocols and components of the Web Services platform is helpful for purposes of understanding how the architecture is adapted to provide various services.</p>
<p id="p-0011" num="0010">The basic platform upon which Web Services are based utilizes eXtensible Markup Language (XML), plus Hyper-Text Transport Protocol (HTTP). HTTP is a ubiquitous protocol that acts as the basic mechanism for transporting data across the Web. XML provides a metalanguage for developers to write specialized languages to express complex interactions between clients and services or between components of a service. At the server level the XML data acts as a message that gets converted to a middleware request and the results converted back to XML. Platform support services, such as discovery, transactions, security, authentication, etc. . . . are provided by other services such as SOAP and the Web Services Definition Language (WSDL). Thus, a fully functioning Web Services platform can be thought of as XML+HTTP+SOAP+WSDL+Universal Description, Discovery and Integration Service (UDDI). At higher levels, one might also add technologies such as XAML, XLANG, XKMS, and XFS, although such services are not universally accepted as a mandatory part of the Web Services platform.</p>
<p id="p-0012" num="0011">Even though some of the protocols have overlapping functionality, each protocol is generally used for a specific purpose. SOAP, for instance, provides remote invocation, UDDI acts as a kind of trader/directory service, WSDL enables the system to express service characteristics, XLANG/XAML provides transaction support for complex web transactions involving multiple web services, and XKMS supports authentication and registration.</p>
<p id="p-0013" num="0012">SOAP as it is understood by those of ordinary skill in the art is a protocol that defines a uniform way of passing XML-encoded data between computers. SOAP also defines a way to perform Remote Procedure Calls (RPCs) using HTTP as the underlying communication protocol. For example, SOAP provides a framework for describing data using XML to transfer data between computers using existing network infrastructures.</p>
<p id="p-0014" num="0013">UDDI provides a mechanism for client computers to dynamically locate other web services. This enables business using a UDDI interface, to dynamically connect to services provided by other businesses. A UDDI registry can be thought of as a lookup service for business applications. A UDDI registry has two kinds of clients: businesses that want to offer a service (and its usage interfaces), and clients who want to obtain and use the offered service. UDDI is layered over SOAP and assumes that requests and responses are UDDI objects sent as SOAP messages.</p>
<p id="p-0015" num="0014">WSDL provides a way for service providers to describe the basic format of Web Service requests over different protocols or encodings. WSDL is used to describe what a Web Service can do, where it resides, and how to invoke it. WSDL typically assumes SOAP/HTTP/MIME are to provide the remote object invocation mechanism. UDDI registries describe numerous aspects of Web Services, including the binding details of the service. Thus, WSDL fits into the subset of a UDDI service description.</p>
<p id="p-0016" num="0015">WSDL defines services as collections of network endpoints or ports. In WSDL the abstract definition of endpoints and messages is separated from the network deployment or data format binding information. This allows the reuse of abstract definitions of messages (e.g., descriptions of the data being exchanged and collections of operations such as port types). The protocol and data format information relating to a particular port type constitutes a reusable binding. A port is defined by associating a network address with a reusable binding. Each collection of ports is what defines a service. A WSDL document typically defines a network service using the following elements:
<ul id="ul0001" list-style="none">
    <li id="ul0001-0001" num="0000">
    <ul id="ul0002" list-style="none">
        <li id="ul0002-0001" num="0016">Types&#x2014;a container for data type definitions using some type system (such as XSD).</li>
        <li id="ul0002-0002" num="0017">Message&#x2014;an abstract, typed definition of the data being communicated.</li>
        <li id="ul0002-0003" num="0018">Operation&#x2014;an abstract description of an action supported by the service.</li>
        <li id="ul0002-0004" num="0019">Port Type&#x2014;an abstract set of operations supported by one or more endpoints.</li>
        <li id="ul0002-0005" num="0020">Binding&#x2014;a concrete protocol and data format specification for a particular port type.</li>
        <li id="ul0002-0006" num="0021">Port&#x2014;a single endpoint defined as a combination of a binding and a network address.</li>
        <li id="ul0002-0007" num="0022">Service&#x2014;a collection of related endpoints.
<br/>
So, put simply, WSDL is a template for how services can be described and used by client computers.
</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0017" num="0023">A limitation in using these existing technologies to provide Web Services is that developers must manually write code to access data sources, provide functions called by clients, and retrieve or modify the data in the data source. This is a laborious process. When the data source is modified (e.g. by modifying a database schema), the developer is required to manually modify the source code for any Web Services affected by alterations to the data source. This requires that the developer have an intimate level of knowledge about the source code structure. For the companies that need to maintain such systems, this process is costly and particularly so, when the developer doing the maintenance is different from the one who performed the initial development. Moreover, each time there is a need to modify the database schema, the developer is required to modify many parts of the source code and propagate each of these changes to the clients that interface with the system. When an operation is to be added or modified, all affected services with which the operation (or operation type) is associated may require modification.</p>
<p id="p-0018" num="0024">To reduce the development and deployment time, there is a need for a method and framework that assists developers and other users with the process of providing network services (e.g. web services) to end-users and facilitates the development and deployment of such network services.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0003" level="1">DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0019" num="0025"><figref idref="DRAWINGS">FIG. 1</figref> depicts an architecture for enabling systems to provide web services in accordance with one or more embodiments of the invention.</p>
<p id="p-0020" num="0026"><figref idref="DRAWINGS">FIG. 2</figref> illustrates the steps involved in developing and serving network services in accordance with one or more embodiments of the invention.</p>
<p id="p-0021" num="0027"><figref idref="DRAWINGS">FIG. 3</figref> depicts an example interface for providing schema information to assist with the configuration of network services in accordance with one or more embodiments of the invention.</p>
<p id="p-0022" num="0028"><figref idref="DRAWINGS">FIG. 4</figref> depicts an example interface for providing configuration information related to one or more web services in accordance with one or more embodiments of the invention.</p>
<p id="p-0023" num="0029"><figref idref="DRAWINGS">FIG. 5</figref> illustrates the steps involved in generating rule sets that govern the creation and serving of network services in accordance with one or more embodiments of the invention.</p>
<p id="p-0024" num="0030"><figref idref="DRAWINGS">FIG. 6</figref> is a block diagram illustrating the processes involved in providing network services in accordance with one or more embodiments of the invention.</p>
<p id="p-0025" num="0031"><figref idref="DRAWINGS">FIG. 7A</figref> and <figref idref="DRAWINGS">FIG. 7B</figref> illustrate a mechanism for providing network services in accordance with one or more embodiments of the invention.</p>
<p id="p-0026" num="0032"><figref idref="DRAWINGS">FIG. 8A</figref> and <figref idref="DRAWINGS">FIG. 8B</figref> illustrate the process for handling a request to a Web Service in accordance with one or more embodiments of the invention.</p>
<p id="p-0027" num="0033"><figref idref="DRAWINGS">FIGS. 9A and 9B</figref> illustrate the process for generating WSDL data in accordance with one or more embodiments of the invention.</p>
<p id="p-0028" num="0034"><figref idref="DRAWINGS">FIG. 10A</figref> and <figref idref="DRAWINGS">FIG. 10B</figref> illustrate the process for invoking a Web Service in accordance with one or more embodiments of the invention.</p>
<p id="p-0029" num="0035"><figref idref="DRAWINGS">FIGS. 11A and 11B</figref> illustrate the process for dynamically handling Web Service objects and the creation and execution of operations objects in accordance with one or more embodiments of the invention.</p>
<p id="p-0030" num="0036"><figref idref="DRAWINGS">FIG. 12A</figref> and <figref idref="DRAWINGS">FIG. 12B</figref> illustrate the process for utilizing rule based serializers and deserializers in accordance with one or more embodiments of the invention.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0004" level="1">SUMMARY OF THE INVENTION</heading>
<p id="p-0031" num="0037">An embodiment of the invention is directed to a method and apparatus for automatically providing network services in a way that improves upon the prior art. Systems implementing aspects of the invention can, for instance, provide developers with a mechanism for creating Web Services without having to write low-level SOAP, XML, or WSDL code. The system utilizes a rule-based approach that enables administrators and other users to dynamically adjust the system to include or exclude certain network services without having to engage in a complex redeployment effort.</p>
<p id="p-0032" num="0038">The term network services as it is utilized herein, means the provision of a requested service between two or more parties using a client-server architecture to communicate data relating to the requested service. Typically, client computers request services from a server computer. The server is configured to dynamically provide the requested service by interfacing with one or more rules and data sources to obtain the data needed to perform the requested service.</p>
<p id="p-0033" num="0039">A type of network service referred to as a Web Service is an example of a widely used network services. Web Services are supported by several standards for posting requests between clients and servers, and for encoding streams of data/objects. In one embodiment of the invention, requests and responses are posted between clients and servers using HTTP, and data messages relating to the provision of the requested service are encoded using SOAP. In such instances, these Web Services are supported using the WSDL to describe XML data objects.</p>
<p id="p-0034" num="0040">Systems implementing one or more aspects of the invention utilize a highly modularized architecture. These modules are built around a rule engine that can infer most aspects of the system's behavior.</p>
<p id="p-0035" num="0041">At the receiving end of the system, the requests are analyzed to check whether a request is destined for a network service (e.g., a Web Service). When the system receives a request for a Web Service, the system parses the message contained in the request under the supervision of the rule engine which can determine: the name of the Web Service, the operations necessary to respond to the request, and the arguments that allow the operations to execute and generate a response.</p>
<p id="p-0036" num="0042">The system is capable of invoking the rule engine at any step of the processing and can evaluate request values on invocation. This ability provides administrators or users with a mechanism for dynamically reconfiguring the system with requiring redeployment of the entire system. Thus, an embodiment of the invention allows updates or changes to the system without requiring a start and stop of the system.</p>
<p id="p-0037" num="0043">One aspect of the invention relates to implementing the capability to generate rules to govern such processing. Embodiments of the invention include an assistance tool that enables developers to specify the data schema of one or more data sources, the names of Web Services to be implemented, and other parameters relating to the Web Service such as properties and configuration parameters. In addition, the assistance tool, or simply the network services assistant, is capable of reverse engineering the schema and including the schema information into the web services definitions. The developer is also able, using the network services assistant, to manually add functionality to the system by entering specific rules. Once the network services assistant obtains the data schema and a set of configuration parameters the network services assistant generates a set of rules utilized by the rule engine at run-time. These rules direct the network services assistant to execute the proper component in order to handle a Web Services request.</p>
<p id="p-0038" num="0044">The architecture implemented by one or more embodiments of the invention improves upon current systems in that it allows for greater control over the handling of inputs, processing and the generation of outputs during the provision of network services. Furthermore, by concentrating the control mechanism in a rule system, the architecture allows a developer to drastically change the system's behavior simply modifying rules, without requiring alteration of the source code modules associated with each network service.</p>
<heading id="h-0005" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0039" num="0045">Embodiments of the invention are directed to an improved method and apparatus for automatically providing network services. In the following description numerous specific details are set forth in order to provide a more thorough understanding of the invention. In some instances, well-known features have not been described in detail so as not to obscure certain aspects of the invention. It will be apparent, however, to an artisan of ordinary skill, that it is possible to practice the present invention without these specific details or by using well-know techniques, equivalents or alternatives to the specific examples given. As such, this detailed description of preferred and alternative embodiments should not be construed to limit the scope or breadth of the present invention. The claims and the full scope of any equivalents are what define the meets and bounds of the invention. Moreover, the reader should note that the invention described herein leverages technologies described in U.S. patent application Ser. No. 09/618,390 entitled &#x201c;Dynamic Generation and Automated Distribution of User Interface from Database model&#x201d; (filed on Jul. 18, 2000) and incorporated herein by reference.</p>
<p id="h-0006" num="0000">Terminology</p>
<p id="p-0040" num="0046">Throughout the following disclosure, the term user refers to a person using a computer application and/or to one or more automatic processes. The automatic processes may include a computer program executing locally or on a remote computer, and may be triggered to communicate with embodiments of the invention following an event. Usage of the term client is without distinction as to whether the client is a user's application, a client machine or another server.</p>
<p id="p-0041" num="0047">The term server is used to refer to any functional entity that provides services to a requestor. Thus, the term server can refer to a set of one or more physical machines or software executing on one or more machines. It should be clear to a person of ordinary skill in the art of computer programming that the term machine may refer to the physical hardware itself, or to a virtual machine such as a JAVA Virtual Machine (JVM), or even to separate virtual machines running different Operating Systems on the same physical machine and sharing that machine's computing resources.</p>
<p id="p-0042" num="0048">It should be assumed that references made to client and server connections, or even generalized network connections, do not necessarily involve the user of a physical network such as an Ethernet network. Clients and servers may reside on the same machine and thus such connections can be local to one machine. This is the case, for example, on web sites running on a supercomputer. In the latter case, both web servers (e.g. Apache&#x2122; Web Server) and one or more Application Servers may execute within the same physical machine or on different virtual machines. The network connecting the virtual machines is in this case a virtual network. Embodiments of the invention are capable of running on such virtual networks.</p>
<p id="p-0043" num="0049">The term data source refers to any mechanism or protocol for storing and retrieving computer data files. In its simplest form, a data source is a flat file residing on a file system. However, an electronic mail server, or a directory services server (e.g., an Lightweight Access Directory Protocol, etc. . . . ), a database, or any other type of data repository can all function as data sources. Thus, references to the term database are interchangeable with the term data source. In the case of relational databases, a schema is conventionally used (e.g. star schema) to refer to the structure/organization of data in the relational database. Therefore, throughout this disclosure references to a database schema should be viewed as referring to the general data structure or organization that distinctly characterizes the data source in question (e.g. electronic mail server or directory services server). Moreover, the term developer as used herein is not limited to those with computer programming skills, but means any computer user or person regardless of the level of technical skill associated with that person.</p>
<p id="p-0044" num="0050">The invention is implemented as a computer program based on a modularized architecture as will be detailed below. The system is designed to implement each component as a part of a large infrastructure (e.g. within an Application Server) or as a plug-in or applet embedded within, or interfaced with third party applications.</p>
<p id="h-0007" num="0000">High-Level System Overview</p>
<p id="p-0045" num="0051"><figref idref="DRAWINGS">FIG. 1</figref> is a block diagram depicting an architecture for enabling systems to provide network services such as Web Services. When client <b>150</b> issues a request to a system implementing the invention, application server <b>140</b> initially handles the request by performing multiple checks to determine the validity and/or type of the request being made. Application server <b>140</b> contains one or more components for handling these requests and may, for instance, utilize these components to determine what object type to map a particular request.</p>
<p id="p-0046" num="0052">Application server <b>140</b> is configured to have the ability to check one or more rules associated with the request against rule store <b>130</b>. Rule store <b>130</b> provides a rule set for accessing, manipulating and/or serving data from a data source such as database <b>120</b>. Developer <b>100</b> defines the rule set contained within rule store <b>130</b> and may, for instance, manually input rules and/or utilize the network services assistant <b>110</b> described herein to construct rules for accessing data in one or more data sources (e.g., database <b>120</b>) and providing network services relating to that data.</p>
<p id="p-0047" num="0053">The network services assistant allows a user to easily develop server-side services and publish those services to a client-side application. For example, when a service is created and a system implementing one or more aspects of the invention adds operations relating to that service, the service provider can publish a document containing a Uniform Resource Locator configured to enable the client to automatically connect back to the proper service. Also, in the architecture provided by the invention, simply changing the rules can easily change a system's behavior.</p>
<p id="p-0048" num="0054"><figref idref="DRAWINGS">FIG. 2</figref> illustrates the steps for developing and serving network services in accordance with one or more embodiments of the invention. At step <b>210</b>, a system implementing the invention receives a developer's input. In the large majority of cases, but not all cases, a developer through the use of the network services assistant selects one or more data sources (e.g. relational databases, Lightweight Directory Access, Electronic mail systems, etc. . . . ) and inputs one or more parameters relating to the selected data source. Some examples of such parameters include data defining subsets within the data source, the creation of aliases, constraints on a particular data selection, or data used to classify and define a type of data within the data source.</p>
<p id="p-0049" num="0055">At step <b>220</b> the system obtains information about the data source. This information describes the structure and organization of the data in the data source. In the case of a relational database, the information is a relational schema that describes how data fields are organized in the database tables and how tables are linked to each other in the database. In select embodiments of the invention the system obtains the relational database schema via a flat file or any other data source. The system is also capable of reverse engineering a relational database to generate a description for the database. At step <b>220</b>, a system implementing the invention may use one or more database connectivity interfaces (e.g. JAVA Database Connectivity &#x201c;JDBC&#x201d; or Open Database Connectivity &#x201c;ODBC&#x201d;) to connect to a relational database and obtain an appropriate database schema.</p>
<p id="p-0050" num="0056">The system can analyze the data source information to determine the data types (e.g., step <b>230</b>) and may also determine the hierarchy of links between data fields and the properties and the operation types associated with those data fields. In some instances, this determination involves utilizing the relational database schema to ascertain which fields certain users may alter. Such information provides a mechanism for defining privilege levels within the data source. At step <b>240</b>, the system generates rules for accessing the database. These rules define what operations can be performed upon the data source and may, for instance, define what type of information is in the database, how to obtain certain data within that database and what users are authorized to access that data.</p>
<p id="p-0051" num="0057">At step <b>250</b>, the system obtains a set of configuration rules that function at a layer above the rules for accessing the database. These configuration rules define a set of further constraints for interacting with the data source. In one or more embodiments of the invention, this latter step includes obtaining input from a developer through a specialized tool for generating such configuration rules (e.g., the network services assistant). The system can also obtain configuration information from other sources of data such as flat files, computer programs, or LDAP servers. Once the system obtains input defining the configuration rules, the system can generate a set of configuration rules (see e.g., step <b>260</b>) that determine the system's behavior at runtime. Configuration rules define, for example, whether a network service is to be made accessible to certain users and can provide a way to control the level of accessibility to operations associated with each network service.</p>
<p id="h-0008" num="0000">Network Services Assistant</p>
<p id="p-0052" num="0058">Embodiments of the invention utilize a network services assistant configured to assist developers with the creation of the source code required to provide network services to requesting users. The network services assistant may, for instance, allow a developer to view the data schema, determine what networks services are available, and implement those services by configuring the operations and other properties associated with each service. The network services assistant may independently perform one or more aspects of the functionality describe herein. In some case, for example, the term network services assistant and system are interchangeable in that the network services assistant may, but is not required to, perform all or only some of the functions described as being performed by the network services assistant. Thus, the reader should note that the system itself or other software modules independent of the system can also perform the functions described as being performed by the network services assistant.</p>
<p id="p-0053" num="0059">A. Obtaining a Data Source Schema</p>
<p id="p-0054" num="0060"><figref idref="DRAWINGS">FIG. 3</figref> depicts an example interface for providing schema information to assist with the configuration of network services. The interface comprises a set of display regions <b>310</b> that optionally contain one or more other display elements (e.g. <b>320</b>, <b>330</b> and <b>410</b>). Each of these display elements or regions are rendered to present the developer with a series of design choices. Display element <b>320</b>, for instance, lists a set of network services (e.g. Web Services <b>322</b>, <b>324</b>, <b>326</b> and <b>328</b>) the developer may implement. The network services assistant also provides a mechanism for inputting a database schema or simply providing connection parameters to a data source. For example, by providing a user name, password and database connection protocol (e.g. ODBC, JDBC) a developer may connect to a data source such as a relational database. Once the appropriate database is identified, the network services assistant connects to the database for purposes of retrieving the database schema. In instances where a schema is not available, the network services assistant applies a reverse engineering function to the database in order to obtain the schema information.</p>
<p id="p-0055" num="0061">Once obtained, the schema is displayed in display region <b>330</b>. In <figref idref="DRAWINGS">FIG. 3</figref>, for instance, display region <b>330</b> contains three database tables. The network services assistant is capable of determining the relationships between one or more database tables and can traverse the hierarchy of tables to define network services that require the use of multiple tables. In <figref idref="DRAWINGS">FIG. 3</figref>, the assistant located two relationships: one between table <b>332</b> and table <b>334</b>, and a second one between table <b>333</b> and <b>334</b>. Each table has a primary key (e.g. tbl_<b>1</b>_id, tbl_<b>2</b>_id and tbl_<b>3</b>_id) that is unique to each record in the table. Primary keys are further used to link records from two or more tables into an association table. For example, in <figref idref="DRAWINGS">FIG. 3</figref> table <b>334</b> is an association table that allows the system to associate tables <b>332</b> and <b>333</b>. The system utilizes these relationships to determine the hierarchical structure of the fields in a database. Once the system determines such a structure, this relational mapping is used to provide data needed for purposes of providing network services. If data from multiple tables is required, the system is able use the hierarchical structure to determine how and where to obtain the required data.</p>
<p id="p-0056" num="0062">B. Implementing Network Services</p>
<p id="p-0057" num="0063">In addition to providing developers with an interface for obtaining and viewing data source information, the network services assistant allows developers to utilize a set of network services (e.g., individual web services or a set of web services that make up a transaction). In one embodiment of the invention, the network services available to the developer are shown within display region <b>320</b>. The services illustrated in <figref idref="DRAWINGS">FIG. 3</figref>, (e.g., services <b>322</b>, <b>324</b>, <b>326</b>) provide a way to access data fields (e.g., tbl_<b>1</b>_field_<b>1</b>, tbl_<b>1</b>_field_<b>2</b>), (tbl_<b>1</b>_field_<b>1</b>, tbl_<b>2</b>_field_<b>4</b>) and (tbl_<b>1</b>_field_<b>2</b>, tbl_<b>2</b>_field_<b>3</b>).</p>
<p id="p-0058" num="0064">The network services assistant also allows the developer to create network services that manipulate data from the database. Network service <b>328</b>, for instance, is designed to execute an operation that returns the sum of a particular data field or fields from one or more tables. To perform operations that utilize data from the database, the network services assistant dynamically evaluates a set of predefined rules, uses those rules to retrieve the data needed to perform the operation, performs the operation and returns an appropriate result.</p>
<p id="p-0059" num="0065"><figref idref="DRAWINGS">FIG. 4</figref> shows an example of the graphical user interface components used to provide developers with the information needed to configure a network service. This is accomplished in one or more embodiments of the invention through the use of a graphical user interface that contains a set of display regions designed to allow developers to create operations relating to a particular service. In the example given, display region <b>410</b> shows a set of operations <b>402</b>, <b>403</b>, <b>404</b> and <b>405</b> that relate to searching a given data source as well as inserting, deleting and updating that data source.</p>
<p id="p-0060" num="0066">The interface also provides developers with a mechanism for controlling the system's ability to define new operations associated with a particular service and add those new operations to the development process. For example, the developer may program a set of routines and add the routines to the default set of operations associated with each network service that has a use for such routines.</p>
<p id="p-0061" num="0067">In addition to having the ability to manipulate operations relating to a network service, the system also provides users with a way to handle properties associated with each defined operation. An available set of properties associated with each operation are depicted, for example, within one or more components of the graphical user interface. In the illustration contained herein, display region <b>410</b> depicts properties <b>406</b>, <b>407</b>, <b>408</b> and <b>409</b>. The properties are associated with a particular operation and define how the system behaves at runtime when executing the operation. An example of a simple property would be a property that indicates whether a particular operation is available or not. For example, if a data field in a database may not be altered or erased through the use of a web service, update operation <b>405</b>, and delete operation <b>404</b> are simply flagged as &#x201c;not available.&#x201d; The properties own attributes may not only affect the way a system handles a client's request, but also affect what type of response data is generated and how that data is transmitted to the client.</p>
<p id="p-0062" num="0068">C. Generating Rule Sets</p>
<p id="p-0063" num="0069">Once the data schema associated with the data source needed to perform a network service is obtained, a network service or set of network services are defined, and the developer sets the operations and properties relating to the service, the network services assistant generates a set of rules stored in rules store (e.g. flat files loaded by a rule engine). In one or more embodiments of the invention the process of generating the rule is made fully automatic.</p>
<p id="p-0064" num="0070"><figref idref="DRAWINGS">FIG. 5</figref> illustrates the steps involved in the process of generating rule sets that govern the creation and serving of network services. At step <b>510</b>, the network services assistant obtains the database schema associated with the target data source (see e.g., step <b>210</b> described above). In one or more embodiments of the invention, the network services assistant utilizes a graphical user interface or some other interface, as described in <figref idref="DRAWINGS">FIG. 3</figref>, to capture user input and integrate that input with information collected from one or more data sources (e.g., the schema data). At step <b>520</b>, the network services assistant analyzes the database information by checking the data type associated with each field of the database, identifying links between the database tables, and determining the hierarchical structure of the data in the database. The network services assistant may then generate a set of rules for querying the database (see e.g., step <b>530</b>) and for modifying or otherwise handling data fields in the database (see e.g. step <b>540</b>). The system embodying one or more aspects of the invention can also generate a set of operational rules for accessing the database. These rules are typically stored in the rule store and used at runtime to determine how and when to create one or more query objects in response to a client request. When the system elects to create a query object, information such as database specific, table specific and field specific privileges are typically examined. The operational rules define the type of information that may be embedded in a query object and utilized when accessing the database to add, retrieve or alter data.</p>
<p id="p-0065" num="0071">At step <b>560</b>, the network services assistant generates a set of operational rules for translating the data into a format compatible with one or more destination protocols serving data to a requesting client. The system can, for instance, translate the data served in response to a client request into Web Services Description Language. The data is further serialized for transmission to clients using one or more communication protocols. In one embodiment of the invention, the communication protocol of choice is SOAP. However, the system may utilize any protocol capable of providing network services to transmit data to the client.</p>
<p id="h-0009" num="0000">Providing Network Services</p>
<p id="p-0066" num="0072"><figref idref="DRAWINGS">FIG. 6</figref> is a block diagram illustrating the processes involved in providing network services utilizing one or more embodiments of the invention. In the example that is given, client <b>150</b> issues a request for data. A request converter <b>610</b> that utilizes one or more software modules to analyze the request, typically handles this request. The request converter may, for instance, verify the validity of a web service name and determine if the appropriate parameters are passed with the request and the requested operations. The request converter may also combine request information with data provided by the execution environment. The system may, for instance, integrate session information and/or information obtained from electronic cookies with the request analysis. In an embodiment of the invention, the request converter parses SOAP formatted data received as XML text to convert the request data into a request object.</p>
<p id="p-0067" num="0073">An example of a type of request object is an object orientated class (e.g. JAVA coded class object) capable of storing request data, and enabled with one or more operations (e.g. mutators) invoked to retrieve the request data from the request object.</p>
<p id="p-0068" num="0074">The request converter may utilize a rule engine <b>640</b> built using artificial intelligence tools. In one embodiment of the invention, the rule engine contains an inference engine capable of executing a chain of logical steps using rule data obtained from one or more rule data sources (e.g. <b>130</b>). The rule engine is configured to interface with multiple system components and thereby allows the system to invoke the rule engine at multiple levels and throughout different stages of the data processing event. Moreover, operators of the system (e.g. developers, maintainers or even the end user) can modify one or more rule stores which result in the changes to the system's behavior without requiring modifications to the rule engine's program code.</p>
<p id="p-0069" num="0075">After the request converter creates a request object, a query generator <b>630</b> generates a query to obtain data from its data source (e.g. <b>120</b>). The query generator invokes the rule engine to determine the conditions that apply to generating a query to a data source based on the data source's access privilege parameters and the content of the request object. For example, a request aimed at retrieving a person's personal data stored in a relational database would cause the query generator to invoke the rule engine to determine the client's access privileges and the access authorization parameters. The developer can explicitly set these authorization parameters or the system can automatically generate such parameters using access privileges stored in the database. In embodiments of the invention, the query is an object oriented class capable of storing data and enabled with operations. The system may invoke these operations to retrieve data from the object or access data sources associated with the object.</p>
<p id="p-0070" num="0076">Response generator <b>620</b> depicted in <figref idref="DRAWINGS">FIG. 6</figref>, represents a program module (or a set thereof) capable of converting the data obtained from a data source through the query object into response data suitable to be transmitted using one or more transmission protocols. Response generator <b>620</b> contains one or more mechanisms for invoking rule engine <b>640</b> which provides response generator <b>620</b> with conditions to generate a response. Rule engine <b>640</b> may, for instance, determine on behalf of response generator <b>620</b> that the responses for a specific network service are to be transmitted in a specific protocol (or data format). For example, rule engine <b>640</b> may determine that all requests for data having full read-access privileges in the database should be formatted in HTML. Response generator <b>620</b> could obtain data stored in object-oriented objects and convert that data into the format designed for transmission on a network.</p>
<p id="p-0071" num="0077">In an embodiment of the invention, data obtained from querying the data source is converted to one or more objects represented in Web Services Description Language format. The latter objects are then encoded using the SOAP format for transmission back to the client <b>150</b>.</p>
<p id="p-0072" num="0078"><figref idref="DRAWINGS">FIG. 7A</figref> and <figref idref="DRAWINGS">FIG. 7B</figref> illustrate the mechanism by which a system embodying the invention provides network services. <figref idref="DRAWINGS">FIG. 7A</figref> is a flowchart illustrating steps involved in the process of providing network services. The process begins by collecting information about the data source and receiving a developer's input at step <b>710</b>. This step is typically conducted using the network services assistant described above, although the system may manually obtain the information collected as well as the developer's input or use one or more other developer's tools.</p>
<p id="p-0073" num="0079">At step <b>720</b>, embodiments of the invention generate descriptors for the network services the system is capable of utilizing. These network service descriptors are a set of rules and templates that define aspects of the network services to be provided. Such network service descriptors may, for instance, define a network service name, one or more operations associated with the network service and rules that may define access privileges to the operations.</p>
<p id="p-0074" num="0080">At step <b>730</b> a system embodying the invention generates operational rules that allow, for example, an engine to generate database queries in response to a network services request and process response data as described above in FIG. <b>2</b>. When generating a response to a request, the rules are utilized to convert data from one representation (e.g. relational database) into a format such as Web Services Description Language designed for data communications. At step <b>740</b>, the system receives a request from client <b>150</b> (see e.g., <figref idref="DRAWINGS">FIG. 6</figref> description). In its one implementation, the invention utilizes an application server (e.g. <b>155</b>) that performs all steps of the present invention. However, alternative implementations are contemplated as within the scope of the invention defined herein. The invention may, for instance, make use of software modules (sometime called plug-in modules) designed for implementation in third party application servers or any other software program designed to provide network services.</p>
<p id="p-0075" num="0081">At step <b>750</b>, the system checks the operational rules discussed herein by invoking rule engine <b>640</b> and carrying out the processes, described in <figref idref="DRAWINGS">FIG. 6</figref>, for validating a request and converting that request into an object oriented representation. The rules are typically generated via a developer application such as the network services assistant described throughout. At step <b>760</b>, the system generates a query to access one or more data sources following a set of rules that associate data sources with network services. At step <b>770</b>, the system applies the rule set by retrieving the data from one or more data sources, converting the data in accordance with one or more communication protocols and transmitting the data to the client.</p>
<p id="p-0076" num="0082">Although the description set forth so far utilizes the term network services, the reader should note that one or more embodiments of the invention are applied to providing a type of network service(s) called Web Service(s).</p>
<p id="h-0010" num="0000">Handling a Request to a Web Service</p>
<p id="p-0077" num="0083"><figref idref="DRAWINGS">FIG. 8A</figref> and <figref idref="DRAWINGS">FIG. 8B</figref> illustrate the process by which a system embodying the invention handles requests made to a Web Service. At step <b>810</b>, the system receives a request from Web Service client <b>150</b>. A request to a Web Service is an XML coded message, typically, using SOAP. The system can submit the message directly to a server through a network socket or using HTTP. For example, the Web Service request may be received over HTTP as the following:
<ul id="ul0003" list-style="none">
    <li id="ul0003-0001" num="0000">
    <ul id="ul0004" list-style="none">
        <li id="ul0004-0001" num="0084">http://www.foo.ext/path/ServiceName?wsdl</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0078" num="0085">Upon receipt of the request, the request message is directed to a module (e.g., request handler <b>850</b>) configured to enable the system to communicate with rule system <b>852</b>. The rule system comprises a rule engine <b>640</b>, a rule store <b>130</b> and multiple components (not shown) that allow the rule system to interface with other components in the system (e.g. an Application Server), or to integrate (as an embedded applet or a plug-in) within third party applications. Utilizing the capabilities of the rule system <b>852</b>, the request handler <b>850</b> infers, using the name of requested Web Service and the arguments contained in the request, the component that is capable of generating the Web Service response. At step <b>820</b>, the system instantiates the WSDL-generating component. Block <b>854</b> represents the module that creates the WSDL-generating component. The latter is interfaced with the rule system <b>852</b>, and is capable of inferring the name of the operation to be invoked to generate a Web Service response. At step <b>830</b>, the WSDL-generating component instantiates one or more operations that allow the system to communicate with data sources. Block <b>856</b> represents a process that enables the WSDL-generating component to instantiate the operations required to generate the WSDL response. At step <b>840</b>, the system generates the WSDL, while utilizing the rule system to determine the conditions associated with the WSDL-generation. The WSDL-generating component then returns the WSDL data to the system that, in turn, forwards the data to the client.</p>
<p id="p-0079" num="0086"><figref idref="DRAWINGS">FIGS. 9A and 9B</figref> illustrate the process by which systems embodying the invention generate WSDL data. At step <b>910</b>, the system utilizes the rule system to infer the names of the components capable of handling the request, and the names of all the operations in the service. At step <b>920</b>, the system infers, for each operation's name, which component is to generate WSDL content. Modules <b>952</b> and <b>954</b> both interface with the rule system and are capable of invoking the rule system for inferring component names and operations. At step <b>930</b>, the system creates an instance for each operation class found at step <b>920</b>. At step <b>940</b>, the system infers the WSDL data content values such as input names and types, output names and types, parameter ordering, operation name, schema types, binding name and all other information that the system requires to execute the operations and generate the WSDL content. The latter step allows the system to condition the WSDL output without hard coding the WSDL generation specifications in the WSDL generation component itself as it is common use in prior art. In the invention WSDL generation rules are input in the rule system. The latter approach allows for a greater flexibility in the system's behavior. Thus, users of the system are not required to manually create WSDL to initiate a Web Service.</p>
<p id="p-0080" num="0087">At step <b>950</b>, the system executes the operations having content specific to each one of the operations. At step <b>960</b>, the WSDL-generating component merges the WSDL content from each component into a service wide WSDL document to be returned to the client.</p>
<p id="h-0011" num="0000">Handling a Web Service Invocation</p>
<p id="p-0081" num="0088"><figref idref="DRAWINGS">FIG. 10A</figref> and <figref idref="DRAWINGS">FIG. 10B</figref> illustrate the process by which a system embodying one or more aspects of the invention handles the invocation of a Web Service. Before invoking a Web Service operation the system receives a SOAP message, or an HTTP request, from a Web Services client (e.g., step <b>1010</b>). A typical example of an instance where Web Services are applicable involves a creating a request to search a database. The request may be a Uniform Resource Locator (URL) that contains the name of the Web Service and one or more parameters indicating, for instance, a search word or phrase. The request may also contain output parameters, such as sorting information or a search category. Block <b>1051</b> represents one or more application server modules for handling the receipt of network connections and forwarding of requests to the proper request handler. At step <b>1020</b>, the application server determines whether the request is destined to a Web Service. If the request does not target a Web Service, the application server forwards the request to the proper server component for handling requests of that type. If the request targets a Web Service, the application server routes the request to a SOAP processor <b>1052</b>. In one embodiment of the invention, SOAP processor <b>1052</b> is an application component capable of parsing the message encoded in accordance with SOAP (which utilizes XML), and converts the data into data structures, objects and classes (e.g., in an object oriented sense). In one embodiment of the invention, SOAP processor <b>1050</b> contains AXIS software (developed by the APACHE Group).</p>
<p id="p-0082" num="0089">SOAP processor <b>1050</b> extracts a SOAP message from the HTTP request (e.g., step <b>1030</b>) and converts the SOAP request message into request objects. The conversion process involves a rule-based serializer/deserializer <b>1054</b>, which is a module that is interfaced with the rule system. Serialization refers to the process that enables the system to convert blocks of structured data (e.g. data structures, classes etc) into streams of data. Systems frequently utilize the process of serialization to transfer data between the different nodes in a network. The deserialization process does the opposite by assembling streamed data into structured blocks of data. The deserializer of block <b>1054</b>, receives SOAP information and converts it into structured data under control of the rule system.</p>
<p id="p-0083" num="0090">At step <b>1050</b>, a system embodying the invention invokes a dynamic Web Service Handler <b>1056</b> while submitting arguments such as the service name, operation name, request objects created in the previous step, and other information provided by the application server (e.g., such as session information). At step <b>1060</b>, the system executes one or more operations and typically retrieves data from one or more data sources. The result of executing the operations is an array of model data object(s).</p>
<p id="p-0084" num="0091">Once obtained, the system returns these data objects to SOAP processor <b>1052</b> (e.g., step <b>1070</b>) which utilizes serializer <b>1054</b> to convert data from object based data to streamed data. SOAP processor <b>1052</b> handles the streamed data by converting that data into XML. SOAP processor <b>1054</b> has the ability to invoke the rule system and thereby allow the system to exert control over the way data in preparation for transmission over the network. At step <b>1080</b>, the system returns the data in its serialized form to one or more Web Services clients.</p>
<p id="p-0085" num="0092"><figref idref="DRAWINGS">FIGS. 11A and 11B</figref> illustrate the process by which a system embodying the invention dynamically handles Web Service objects as well as the creation and execution of operations objects. <figref idref="DRAWINGS">FIGS. 11A and 11B</figref> further expand upon the description relating to step <b>1050</b> shown in <figref idref="DRAWINGS">FIG. 10A</figref>. At step <b>1110</b>, the system invokes a dynamic Web Service handler <b>1152</b> with arguments as described above.</p>
<p id="p-0086" num="0093">At step <b>1120</b>, the Web Service handler infers the class name of the operation handler <b>1154</b> defined for this invocation and some environment settings (e.g., entity name, task and service name). At step <b>1130</b>, the system instantiates the corresponding class for one or more target operations. Operation handler <b>1154</b> interfaces with rule system <b>956</b> and can thereby utilize the rule system to supervise class instantiation and the execution of the various operations. Through the rule system, the operation handler <b>1154</b> has access to invocation parameters and variables such as the mapping between the public name of attributes (exposed as arguments) and the corresponding internal names used for data manipulation. Operation handler <b>1154</b> can also obtain the value of arguments used to invoke the operation.</p>
<p id="p-0087" num="0094">Rule system <b>956</b> also provides object entity types identifying the sort of objects the operation is intended to work with. Providing target entity types is important because it allows system components to utilize a single class to handle multiple different entity types. For example, in a system referred to as Direct to WebServices&#x2122;, one class a series of operations (e.g., search, insert, delete, and update) is invoked to automatically handle many different types of entities. Furthermore, operation handler <b>1154</b>, is able to determine, through the rule system, whether to immediately commit (or not commit) changes to its object graph. The system then executes the operations (e.g., step <b>1140</b>) and returns the results of the execution to the SOAP processor (e.g., step <b>1150</b>).</p>
<p id="p-0088" num="0095"><figref idref="DRAWINGS">FIG. 12A</figref> and <figref idref="DRAWINGS">FIG. 12B</figref> illustrate the process by which a system embodying the invention utilizes rule based serializers and deserializers. As was noted above, serialization is an important aspect for network communications. At step <b>1210</b>, the SOAP processor invokes a deserializer <b>1254</b> to unmarshall data objects referred to in one embodiment of the invention as Enterprise Objects. At The deserializer utilizes rule system <b>956</b> to infer a mapping between Web Service input part names and entity attributes (e.g., step <b>1220</b>) and returns the deserialized object models to the SOAP processor (e.g., at step <b>1230</b>).</p>
<p id="p-0089" num="0096">At step <b>1240</b>, the system invokes the dynamic Web Service handler with input part values (including deserialized model objects). At step <b>1250</b>, the result object(s) of the web service invocation are returned to the SOAP processor for serialization (e.g., step <b>1252</b>). Serializer <b>1252</b> is interfaced with the rule system and can thereby convert result objects into XML using a set of serialization rules. The rule-based serializer can infer the conditions for data serialization at multiple steps. For example, the serializer infers which attributes to serialize, the mapping of an entity attribute name to XML property name, the order in which to serialize properties, and any other serialization rule input by a developer or a user into the rule system. The SOAP processor has the ability to generate one or more SOAP messages (e.g., step <b>1260</b>) and can return generated SOAP messages to the client (e.g., step <b>1270</b>).</p>
<p id="p-0090" num="0097">Thus a method, system and apparatus for automatically providing network services (e.g. Web Services) has been described. The invention improves upon existing methods for providing network services by reducing the time and effort required to initiate use of these network services. A developer can, for instance, automatically generate several different types of rules and use those rules with a rule system interfaced with one or more application server components. Thus, the system provides a way to control how requests to network services are handled, data is retrieved from data sources and manipulated, and output is generated.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A network services assistant computer program embodied in a non-transitory storage medium and comprising computer program code which when executed causes a computer to:
<claim-text>receive a user input comprising a manually entered rule;</claim-text>
<claim-text>analyze a database schema of a database to determine a hierarchical structure of at least a portion of the database;</claim-text>
<claim-text>integrate the user input and hierarchical structure information determined from the analysis of the database schema;</claim-text>
<claim-text>generate based at least in part on both the user input and the analysis of the database schema a set of rules associated with the database;</claim-text>
<claim-text>store the set of rules in a manner that makes the set of rules available to a rule engine configured to implement them; and</claim-text>
<claim-text>receive a modification to the set of rules that results in a change in a behavior of the rule engine without requiring a modification to program code associated with the rule engine;</claim-text>
<claim-text>wherein the set of rules facilitates provisioning of one or more Web Services configured to at least in part communicate via a SOAP (Simple Object Access Protocol) messaging framework.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The network services assistant of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising computer program code which when executed causes a computer to provide an object description for building entities to store data.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The network services assistant of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising computer program code which when executed causes a computer to provide an object description for accessing data in the database.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The network services assistant of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising computer program code which when executed causes a computer to generate a hierarchical structure involving multiple database tables.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The network services assistant of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising computer program code which when executed causes a computer to provide a data type for each of at least a subset of database fields comprising the database.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The network services assistant of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising computer program code which when executed causes a computer to generate the set of rules based at least in part on user input and the analysis of the database schema.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The network services assistant of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the set of rules includes operation rules for utilizing the database.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The network services assistant of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the set of rules includes operation rules for translating an output of a query to the database into SOAP.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The network services assistant of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the set of rules includes operation rules for translating an output of a query to the database into Web Services Description Language.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The network services assistant of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the set of rules includes operation rules for querying the database.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The network services assistant of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the set of rules includes operation rules for modifying database fields of the database.</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The network services assistant of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the set of rules includes controls for handling database transactions.</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The network services assistant of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the set of rules includes operation rules for accessing at least a subset of database fields comprising the database.</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The network services assistant of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein operation rules for accessing include handling user privileges at run time.</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. A method, comprising:
<claim-text>receiving a user input comprising a manually entered rule;</claim-text>
<claim-text>analyzing a schema of a database using a processor to determine a hierarchical structure of at least a portion of the database;</claim-text>
<claim-text>integrating the user input and hierarchical structure information determined from the analysis of the database schema;</claim-text>
<claim-text>based at least in part on both the user input and the analyzed database schema, generating a plurality of descriptors for a plurality of Web Services configured to at least in part communicate via a SOAP (Simple Object Access Protocol) messaging framework;</claim-text>
<claim-text>generating a plurality of operational rules associated with the plurality of Web Services;</claim-text>
<claim-text>making the plurality of operational rules available to a rule engine configured to implement the plurality of operational rules, wherein a change in the plurality of operational rules results in a change in a behavior of the rule engine without requiring a modification to program code associated with the rule engine; and</claim-text>
<claim-text>providing one of the plurality of Web Services upon receiving a request containing at least a corresponding one of the plurality of descriptors including by executing one or more of the plurality of operational rules, building a request for accessing the database, accessing the database, and returning data.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The method of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the database comprises a relational database having a plurality of tables and a plurality of relationships linking the plurality of tables.</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The method of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the database uses directory services.</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The method of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein generating a plurality of descriptors comprises generating a publishable name to describe each one of the plurality of Web Services.</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. The method of <claim-ref idref="CLM-00015">claim 15</claim-ref>, further comprising automatically generating a set of operations for accessing the plurality of Web Services.</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. The method of <claim-ref idref="CLM-00019">claim 19</claim-ref>, wherein automatically generating the set of operations comprises automatically generating a set of functions for accessing the database.</claim-text>
</claim>
<claim id="CLM-00021" num="00021">
<claim-text>21. The method of <claim-ref idref="CLM-00020">claim 20</claim-ref>, wherein the set of functions comprises at least one function for adding data to the database.</claim-text>
</claim>
<claim id="CLM-00022" num="00022">
<claim-text>22. The method of <claim-ref idref="CLM-00020">claim 20</claim-ref>, wherein the set of functions comprises at least one function for deleting data from the database.</claim-text>
</claim>
<claim id="CLM-00023" num="00023">
<claim-text>23. The method of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein generating the plurality of operational rules comprises generating a set of conditional statements each of which is combined with an execution statement.</claim-text>
</claim>
<claim id="CLM-00024" num="00024">
<claim-text>24. The method of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the plurality of operational rules comprises a hierarchical structure defining a precedence of each rule within the plurality of operational rules. </claim-text>
</claim>
</claims>
</us-patent-grant>

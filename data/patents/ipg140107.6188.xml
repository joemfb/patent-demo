<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08627312-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08627312</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>12200497</doc-number>
<date>20080828</date>
</document-id>
</application-reference>
<us-application-series-code>12</us-application-series-code>
<us-term-of-grant>
<us-term-extension>1461</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>9</main-group>
<subgroup>455</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>13</main-group>
<subgroup>00</subgroup>
<symbol-position>L</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>718  1</main-classification>
<further-classification>711114</further-classification>
</classification-national>
<invention-title id="d2e53">Methods and systems for integrated storage and data management using a hypervisor</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>2002/0120789</doc-number>
<kind>A1</kind>
<name>Franklin et al.</name>
<date>20020800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709325</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>2006/0236094</doc-number>
<kind>A1</kind>
<name>Leung et al.</name>
<date>20061000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>713152</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>2008/0040458</doc-number>
<kind>A1</kind>
<name>Zimmer et al.</name>
<date>20080200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709220</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>2010/0037296</doc-number>
<kind>A1</kind>
<name>Silverstone</name>
<date>20100200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>726  3</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>2010/0306773</doc-number>
<kind>A1</kind>
<name>Lee et al.</name>
<date>20101200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>718  1</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>2011/0078682</doc-number>
<kind>A1</kind>
<name>Doan et al.</name>
<date>20110300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>718  1</main-classification></classification-national>
</us-citation>
</us-references-cited>
<number-of-claims>17</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>None</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>7</number-of-drawing-sheets>
<number-of-figures>7</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20100058335</doc-number>
<kind>A1</kind>
<date>20100304</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Weber</last-name>
<first-name>Bret S.</first-name>
<address>
<city>Wichita</city>
<state>KS</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Weber</last-name>
<first-name>Bret S.</first-name>
<address>
<city>Wichita</city>
<state>KS</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Haynes and Boone, LLP</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>NETAPP, Inc.</orgname>
<role>02</role>
<address>
<city>Sunnyvale</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Tang</last-name>
<first-name>Kenneth</first-name>
<department>2199</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">Methods and systems for integrated data management and block level storage management in a storage system having a controller with a multi-core processor. A hypervisor manages the multi-core processor such that at least one processor is used in a first virtual machine on which a block level storage management process is operable. The first virtual machine may also operate under the control of a real-time operating system. The hypervisor also defines a second virtual machine using one or more other processor cores and operates a data management application process optionally under control of a general purpose operating system. The optional general purpose operating system and the data management application process access storage devices by communicating through the hypervisor with the block level storage management process operable in the first virtual machine.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="229.70mm" wi="168.99mm" file="US08627312-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="236.30mm" wi="169.76mm" file="US08627312-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="219.29mm" wi="155.79mm" orientation="landscape" file="US08627312-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="237.07mm" wi="169.16mm" orientation="landscape" file="US08627312-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="191.85mm" wi="123.87mm" file="US08627312-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="171.62mm" wi="99.99mm" file="US08627312-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="152.74mm" wi="108.97mm" file="US08627312-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="217.00mm" wi="160.78mm" file="US08627312-20140107-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">BACKGROUND</heading>
<p id="p-0002" num="0001">1. Field of the Invention</p>
<p id="p-0003" num="0002">The invention relates generally to storage systems and applications thereof and more specifically relates to use of hypervisor technology to integrate block level storage management and one or more higher layer data management applications in a storage system with a multi-core processor architecture.</p>
<p id="p-0004" num="0003">2. Discussion of Related Art</p>
<p id="p-0005" num="0004">Storage systems coupled to computing environments often utilize Redundant Array of Independent Disks (RAID) storage management to provide both high performance and high reliability in block level storage and retrieval of information. Often in large computing environments, other higher level data management functions are provided as network appliances positioned between the computing systems and the RAID storage systems. Though they may be physically housed within the storage system (i.e., same enclosure or rack), these network appliances are external device in logical term using separate processors and memory and coupled to the controller(s) of the storage system through interconnecting communication paths and protocols. Such higher level data management functions may include, for example, Network File System (NFS) protocol management. Other examples of higher level data management includes: other Network Attached Storage (NAS) data management functionality, storage virtualization, object oriented storage devices, content addressable storage devices, virtual tape storage management, Web browser interface services, diagnostic and performance tuning tools, etc.</p>
<p id="p-0006" num="0005">These exemplary data management applications provide higher level data management functions useful in particular applications. As noted such higher level data management functions are typically provided as appliance devices external to the storage system and the computing system. The network appliance providing services and connectivity for computing systems to interact with the RAID storage subsystem.</p>
<p id="p-0007" num="0006">Although some storage vendors may physically integrate such data management servers within the same enclosures as the RAID storage subsystem, such physical integration presents difficulties where the processing capabilities of a present-day multi-core processor is utilized. In such multi-core computing environments multiple CPUs are tightly coupled in a single integrated circuit and may share access to cache memory and main memory components. Although some higher level data management applications may be well adapted to optimal utilization of such multi-core processing environments (e.g., adapted for optimal parallel operation distributed on multiple core processors), most block oriented RAID storage management control functions are not presently architected for effective utilization of such parallel processing features in a multi-core processor environment. In particular, block oriented RAID storage management or other low level block oriented storage management features typically require real-time response and functionality to maintain desired performance and reliability in access to the mass storage devices within the storage subsystem (e.g., disk drives). Further, real-time operating systems often used as a platform to support block oriented RAID storage management typically operate in a single processor architecture. Cooperation in sharing access to memory and peripheral devices in a multi-core processor environment often makes it difficult to achieve the required real-time response required for low level management of storage devices in a storage subsystem (such as a RAID storage subsystem). Still further, data management layer applications are typically designed to operate in a second processor complex totally separate and independent of the clock oriented RAID storage management features of a storage system. Such data management applications, as presently practiced, operate on servers or other compute nodes and appliances external to the storage system.</p>
<p id="p-0008" num="0007">Thus it is an ongoing challenge to effectively utilize multi-core processors in a single storage system controller to integrate higher level data management applications with lower level block oriented storage management features such as RAID storage management.</p>
<heading id="h-0002" level="1">SUMMARY</heading>
<p id="p-0009" num="0008">The present invention solves the above and other problems, thereby advancing the state of the useful arts, by providing methods and systems for allowing a real-time storage element to simultaneously reside along with general purpose data management layer applications all integral within a storage system. A hypervisor manages the multiple processors of a multi-core processor to define a first virtual machine for the block level storage management and one or more additional virtual machines for each of one or more data management layer applications. The hypervisor allows a single, multi-core processor to efficiently process low, block level storage operations in real-time while tightly integrating higher level data management applications all within the storage system.</p>
<p id="p-0010" num="0009">In one aspect hereof, a system including a plurality of storage devices and a storage controller coupled to the plurality of storage devices. The storage controller has a multi-core processor, each processor core operable in parallel. The system also includes a hypervisor operable in the storage controller to manage the multiple processor cores. The hypervisor is adapted to define a first virtual machine operable on a first processor core and to define a second virtual machine operable on a second processor core. The system also includes a block level storage management process operable on the first virtual machine and a data management application process operable on the second virtual machine and adapted to communicate with the block level storage management process.</p>
<p id="p-0011" num="0010">Another aspect hereof provides a method operable in a system having a multi-core processor coupled to host systems and coupled to storage devices. The method includes booting a real-time hypervisor in the multi-core processor in response to a reset of the multi-core processor. The method operates the real-time hypervisor to create a first virtual machine and a second virtual machine. The method operates the first virtual machine to initialize operation of a real-time operating system and a non-symmetric multi-processor (SMP) aware, real-time block level storage management process in the first virtual machine. The method also operates the second virtual machine to initialize operation of an industry standard general purpose operating system and a data management application in the second virtual machine. The method then operates the first virtual machine and the second virtual machine under control of the real-time hypervisor to provide data management application processing and block level storage management processing within the system.</p>
<p id="p-0012" num="0011">Still another aspect hereof provides a storage controller adapted for coupling one or more host system to a plurality of disk drives. The controller includes a multi-core processor, each processor core operable in parallel wherein the multi-core processing system is coupled to the plurality of storage devices. The storage controller also includes a hypervisor operable to manage the multiple processors and adapted to define a first virtual machine and to define a second virtual machine. The controller includes a real-time operating system operable in the first virtual machine and a Redundant Array of Independent Disks (RAID) storage management process operable on the first virtual machine under control of the real-time operating system. The controller also includes a general purpose operating system operable in the second virtual machine and a data management application process operable on the second virtual machine. The hypervisor further comprises a communication path coupling the second virtual machine with the RAID storage management process.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. 1</figref> is a block diagram of an exemplary storage system enhanced in accordance with features and aspects here to use a multi-core processor on the storage controller under the control of a real-time hypervisor to operate a data management application and a block level storage management both within the storage controller.</p>
<p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. 2</figref> is a block diagram providing exemplary additional details of the functional elements and modules within both the first and second virtual machines of <figref idref="DRAWINGS">FIG. 1</figref>.</p>
<p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. 3</figref> is a block diagram providing exemplary additional details of the functional elements and modules within both the first and second virtual machines of <figref idref="DRAWINGS">FIG. 1</figref>.</p>
<p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. 4</figref> is a flowchart describing an exemplary method in accordance with features and aspects hereof to operate a multi-core processor on a storage controller under control of a real-time hypervisor to enable operation of a data management application and block level storage management all within the same storage controller.</p>
<p id="p-0017" num="0016"><figref idref="DRAWINGS">FIGS. 5 through 7</figref> provide exemplary additional details of steps of the method of <figref idref="DRAWINGS">FIG. 4</figref>.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0004" level="1">DETAILED DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. 1</figref> is a block diagram of a storage system <b>100</b> enhanced in accordance with features and aspects hereof to provide a storage controller <b>102</b> utilizing a multi-core processor <b>103</b> under control of a real-time hypervisor <b>112</b>. Real-time hypervisor <b>112</b> is operable to manage the multi-core processor <b>103</b> to define multiple virtual machines each adapted for performing aspects of processing in the storage system <b>100</b>. Each virtual machine defines a virtual computing environment in which one or more computer programs may be executed. In particular, a first virtual machine <b>1</b> <b>104</b> is defined to perform real-time control operations for a block level storage management process. Virtual machine <b>1</b> <b>104</b> is initialized in cooperation with hypervisor <b>112</b> by booting a real-time operating system <b>124</b> and then commencing operation of block level storage management process <b>114</b>. Virtual machine <b>1</b> <b>104</b> is preferably configured by real-time hypervisor <b>112</b> to provide required real-time response for desired performance levels in operation of block level storage management process <b>114</b>. Block level storage management process <b>114</b> is then operable under control of the real-time operating system <b>124</b> in virtual machine <b>1</b> <b>104</b> to interact with storage devices <b>120</b> for purposes of processing I/O operations received from various sources. One source for such I/O operation requests may be one or more host systems <b>128</b> and <b>130</b> coupled to storage system <b>100</b> via any of several well-known communication media and protocols. Thus, in one aspect, virtual machine <b>1</b> <b>104</b> operating within storage controller <b>102</b> under supervision of real-time hypervisor <b>112</b> performs all standard processing for host generated requests for read and or write access to storage devices <b>120</b> as well as managerial requests to configure aspects of the storage system operation.</p>
<p id="p-0019" num="0018">Block level storage management process <b>114</b> represents any process performed within one of the core processors of the multi-core processor for managing block level operations on storage devices <b>120</b>. For example, block level storage management process <b>114</b> may provide RAID storage management features to manipulate one or more logical volumes distributed over the various storage devices <b>120</b>. As will be readily apparent to those of ordinary skill in the art, storage controller <b>102</b> may include various customized circuits for assisting in the block level storage management such as RAID storage management. For example, various direct memory access (DMA) circuits redundancy computation and check circuits may be utilized by operation a virtual machine <b>1</b> <b>104</b> to enhance the performance and reliability of block level storage management process <b>114</b> within virtual machine <b>1</b> <b>104</b>.</p>
<p id="p-0020" num="0019">A second virtual machine <b>2</b> <b>106</b> may be created by operation of real-time hypervisor <b>112</b> to perform other data management functions within the storage system <b>100</b>. Such data management features at present are provided by external components and appliances&#x2014;external to the storage system <b>100</b> or at least provided by computational means external to the storage controller <b>102</b> of the storage system <b>100</b>. By contrast, storage system <b>100</b> includes storage controller <b>102</b> wherein the multiple core processors are allocated under control of the real-time hypervisor <b>112</b> to provide both the lower level block level storage management features and higher level data management applications integrated within a single storage controller <b>102</b> of the storage system <b>100</b>. Second virtual machine <b>2</b> <b>106</b> is initialized by booting a general purpose operating system <b>126</b> and then initiating processing of data management application process &#x201c;A&#x201d; <b>116</b>. In an exemplary embodiment, the first virtual machine <b>1</b> <b>104</b> in conjunction with the hypervisor <b>112</b> provide a standard BIOS-like interface for all other virtual machines to initialize. Thus virtual machine <b>2</b> <b>106</b> may &#x201c;boot&#x201d; a general purpose operating system as though it has standard BIOS level support provided by the block level operations in virtual machine <b>1</b> <b>104</b>.</p>
<p id="p-0021" num="0020">Data management application process &#x201c;A&#x201d; <b>116</b> may provide a variety of higher level data management functions including, for example, a network file service (NFS) capability. Further, for example, data management application process &#x201c;A&#x201d; <b>116</b> may provide virtualization services, virtual tape services, network attached storage (NAS) services, etc.</p>
<p id="p-0022" num="0021">Still further virtual machines such as virtual machine N <b>108</b> may be created by operation of real-time hypervisor <b>112</b> for operation on further core processors of the multi-core processor of storage controller <b>102</b>. Similar to virtual machine <b>2</b> <b>106</b>, virtual machine N <b>108</b> is initialized by booting a general purpose operating system <b>128</b> and then commencing operation of data management application process N <b>118</b>. Thus, any number of additional virtual machines beyond the first virtual machine <b>1</b> <b>104</b> may be provided by operation of real-time hypervisor <b>112</b> each adapted for a particular data management application process.</p>
<p id="p-0023" num="0022">Those of ordinary skill in the art will readily recognize that additional virtual machines may also represent redundant virtual machines each running a redundant copy of a corresponding data management application.</p>
<p id="p-0024" num="0023">Real-time hypervisor <b>112</b> may also provide a common messaging layer <b>110</b> to provide streamlined communications and messaging means coupling each of the virtual machines <b>104</b>, <b>106</b>, and <b>108</b>. Thus, for example, virtual machine <b>2</b> <b>106</b>, by operation of its data management application process &#x201c;A&#x201d; <b>116</b> may exchange information with virtual machine one <b>104</b> and its block level storage management process <b>114</b> for purposes of performing data management operations relating to storage device <b>120</b>. Messaging layer <b>110</b> may also serve to support INT13 BIOS processing requests on behalf of other data management layer applications and associated general purpose operating systems operable in other virtual machines other than the first virtual machine. Messaging layer <b>110</b> represents any suitable communication means including, for example, a shared memory accessible to each of the core processors of the multi-core processor <b>103</b> in storage controller <b>102</b>. Utilizing such a shared memory, a messaging protocol may be provided by messaging layer <b>110</b> such that the operating system (<b>124</b>, <b>126</b>, and <b>128</b>) in each virtual machine (<b>104</b>, <b>106</b>, and <b>108</b>, respectively) may exchange information with another of the virtual machines utilizing a coupling driver structure integrated within each operating system. Alternatively, messaging layer <b>110</b> may represent, for example, a common bus structure coupled to each of the core processors of the multi-core processor <b>103</b> in storage controller <b>102</b>. Still further, by way of example, messaging layer <b>110</b> may represent a remote procedure call inter-process communication structure whereby each virtual machine (<b>104</b>, <b>106</b>, and <b>108</b>) may invoke function calls to perform a desired exchange of information with another virtual machine.</p>
<p id="p-0025" num="0024">Real-time hypervisor <b>112</b> may be any of several well-known, commercially available hypervisor products such as TenAsys (from TenAsys Corporation&#x2014;www.tenasys.com). Other hypervisor programs are generally available but do not offer some of the real-time features of TanAsys. Other exemplary hypervisors include: VMware (from VMware, Inc.&#x2014;www.vmware.com), Xensource (from Citrix Systems&#x2014;www.xensource.com), etc. Real-time hypervisor <b>112</b> generally provides real-time operational control in that it provides prioritization capabilities to assure that one virtual machine (e.g., first virtual machine <b>1</b> <b>104</b>) retains a higher priority relative to operation of other virtual machines to allow desired performance in processing I/O operations by block level storage management process <b>114</b>. General purpose operating systems <b>126</b> and <b>128</b> may be any of several well-known, commercially available operating system programs including, for example, Microsoft Windows, UNIX, Linux, etc. Real-time operating system <b>124</b> may be, for example, VxWorks (from Wind River&#x2014;www.windriver.com) or any other real-time operating system adapted for use in embedded system real-time control functions.</p>
<p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. 2</figref> is a block diagram of a system <b>200</b> similar to storage system <b>100</b> of <figref idref="DRAWINGS">FIG. 1</figref> in which two virtual machines have been created by a hypervisor (not shown). Virtual machine <b>1</b> <b>104</b>, as noted above, provides an environment for real-time operating system <b>124</b> to execute and thus an environment in which a block level storage management process <b>114</b> (e.g., RAID storage management) may operate. Further, system <b>200</b> includes a second virtual machine <b>2</b> <b>106</b> created by a hypervisor (not shown). Virtual machine <b>2</b> <b>106</b> provides an environment in which a general purpose operating system <b>126</b> is executed and thus an environment in which data management application <b>116</b> may be performed.</p>
<p id="p-0027" num="0026">Exemplary a real-time operating system <b>124</b> operable in virtual machine <b>1</b> <b>104</b> may include front-end interface driver <b>208</b> adapted to couple the RAID block level storage management <b>114</b> to host systems for direct interaction to process host system generated I/O requests for access to storage devices. In addition, real-time operating system <b>124</b> may include a back-end interface driver <b>210</b> adapted to permit RAID block level storage management <b>114</b> to interact with the storage devices (e.g., disk drives <b>120</b> of <figref idref="DRAWINGS">FIG. 1</figref>) for purposes of storing and retrieving information. General purpose operating system <b>126</b> operable in virtual machine <b>2</b> <b>106</b> may include front-end interface driver <b>202</b> to permit coupling of virtual machine <b>2</b> <b>106</b> to one or more attached host systems.</p>
<p id="p-0028" num="0027">In addition, both real-time operating system <b>124</b> and general purpose operating system <b>128</b> may include a coupling driver (<b>204</b> and <b>206</b>, respectively) to permit virtual machine <b>1</b> <b>104</b> and virtual machine <b>2</b> <b>106</b> to exchange information through the messaging layer <b>110</b>. Utilizing coupling drivers <b>204</b> and <b>206</b> and messaging layer <b>110</b>, data management administrative application <b>116</b> and RAID block level storage management <b>114</b> may exchange information in a manner similar to a host system exchanging information with virtual machine <b>1</b> <b>102</b> via front-end interface <b>208</b>. Thus, in accordance with features and aspects hereof, a data management application function may be integrated within the storage system on a virtual machine operable on one of the core processors of a multi-core processor storage controller where another processor of the multi-core processor is used to provide block level storage management.</p>
<p id="p-0029" num="0028"><figref idref="DRAWINGS">FIG. 3</figref> is a block diagram showing additional details an exemplary embodiment of virtual machine <b>1</b> <b>104</b> operable to perform block level storage management and of virtual machine <b>2</b> <b>106</b> operable to provide data management applications integrated within multiple core processors of storage controller <b>102</b>. Virtual machine <b>1</b> <b>104</b> (including block level storage management process <b>114</b> and real-time operating system <b>124</b> may include) may include I/O interfaces <b>310</b> for coupling virtual machine <b>1</b> <b>104</b> to one or more host systems. I/O interfaces <b>310</b> therefore includes appropriate circuitry for coupling virtual machine <b>1</b> <b>104</b> to one or more host systems as well as suitable programmed instructions or custom circuits for managing appropriate protocols and communication with attached host systems. RAID, cache, and interface module <b>312</b> represents RAID storage management features including cache memory management and storage device interfaces as is typical in most RAID storage controllers. Module <b>312</b> therefore includes suitable memory circuits, memory controller circuits, redundancy generation and checking circuits, and other programmed instructions and custom circuits suitable for providing RAID storage management. Further included within module <b>312</b> may be back-end interface circuits for coupling the RAID and cache management functions to one or more disks <b>120</b>. Admin server module <b>314</b> may provide administrative services such as for configuration and maintenance of the storage subsystem. Basic VxWorks services <b>322</b> represents basic operating system support of the VxWorks real-time operating system as well known to those of ordinary skill in the art. Associated with such basic services may be boot module <b>316</b> for effectuating boot of the VxWorks operating system in the virtual machine and initial operation thereof to commence block level storage management operation. Also associated with basic VxWorks services <b>322</b> may be debug module <b>318</b> and diagnostics module <b>320</b> providing support features for design engineers and field support engineers working on the storage system.</p>
<p id="p-0030" num="0029">Virtual machine <b>2</b> <b>106</b> (including data management application <b>116</b> and general purpose operating system <b>126</b> such as Linux) may operate to divide the memory space of the virtual machine <b>2</b> <b>106</b> into &#x201c;kernel&#x201d; or &#x201c;operating system&#x201d; memory space in which aspects of the general purpose operating system <b>126</b> are operable and &#x201c;user&#x201d; memory space in which the data management applications <b>332</b> are operable. General purpose operating system <b>126</b> (e.g. Linux) typically provides a filesystem interface <b>324</b> for access to an underlying storage system for purposes of the data management application functions <b>332</b> and for access to attached host systems desiring to interact with the data management application in virtual machine <b>2</b> <b>106</b>. Filesystem interface <b>324</b> generally interacts with a SCSI device (SD) driver <b>326</b> that abstracts host and storage devices for use by the filesystems <b>324</b>. Through this SCSI device driver <b>326</b>, the filesystem interface <b>324</b> on behalf of the data management application <b>332</b> may interact with host systems coupled through a host target driver <b>330</b> and may interact with a SCSI middle layer driver <b>328</b> for access to SCSI storage devices through the coupling driver <b>206</b> and the messaging layer <b>110</b>.</p>
<p id="p-0031" num="0030">In addition, as discussed above, virtual machine <b>1</b> <b>104</b> may include coupling driver <b>204</b> for controlling exchanges with virtual machine <b>2</b> <b>106</b> through its corresponding coupling driver <b>206</b>. Messaging layer <b>110</b> provides the communication medium through which coupling driver <b>204</b> and coupling driver <b>206</b> may exchange information. Virtual machine <b>2</b> <b>106</b> directs storage requests generated by data management applications <b>332</b> to coupling driver <b>206</b> through filesystem <b>324</b>, SCSI device driver <b>326</b>, and middle layer driver <b>328</b>. Similarly, RAID storage management in module <b>312</b> of virtual machine <b>1</b> <b>104</b> receives and responds to such requests via its corresponding coupling driver <b>206</b>. Thus a data management application (e.g., <b>332</b>) and RAID block level storage management (e.g., <b>312</b>) may operate on the same storage controller <b>102</b>&#x2014;each operating in its own virtual machine (<b>106</b> and <b>104</b>, respectively)&#x2014;each virtual machine operating on its own core processor of a multi-core processor of the storage controller <b>102</b>&#x2014;all under supervisory control of a real-time hypervisor.</p>
<p id="p-0032" num="0031">Those of ordinary skill in the art will readily recognize numerous additional and equivalent components and modules within a fully functional storage system. Such additional and equivalent components are omitted herein for simplicity and brevity of this discussion. Thus, the structures of <figref idref="DRAWINGS">FIGS. 1</figref>, <b>2</b>, and <b>3</b> are intended merely as a representative of exemplary embodiments of features and aspects hereof to provide data management applications integrated with block level storage management distributed on core processors of a multi-core processor in a storage controller.</p>
<p id="p-0033" num="0032"><figref idref="DRAWINGS">FIG. 4</figref> is a flowchart describing an exemplary method in accordance with features and aspects hereof to provide for coordination of one or more data management applications and block level storage management in virtual machines operable on various core processors of a multi-core processor storage controller. The method of <figref idref="DRAWINGS">FIG. 4</figref> may be operable, for example, in the structures described above in <figref idref="DRAWINGS">FIGS. 1 through 3</figref>. Step <b>400</b> represents processing to initialize or boot a hypervisor program on the multi-core processor storage controller. As noted above, in one exemplary embodiment, a real-time hypervisor program retains control over all the core processors of a multi-core processor in the storage controller. The real-time hypervisor then creates two or more virtual machines (each associated with a corresponding core processor) and distributes data management applications and block level storage management processes among the various virtual machines.</p>
<p id="p-0034" num="0033">Step <b>402</b> then represents processing of the hypervisor to create a first virtual machine in which block level storage management processes will be operable. In particular, the first virtual machine may be defined for optimal real-time control processing such as may be required for I/O interaction between the block level storage management process, attached host systems, and attached storage devices. For example, one processor of the multi-core processor may receive and process block level I/O requests from attached hosts. Other processors of the multi-core processor storage controller may be more general purpose in nature and thus less well adapted to the performance requirements of real-time control in processing of I/O requests. Step <b>404</b> then initializes or boots the block level storage management processing in the first virtual machine. Additional details of the processing of step <b>404</b> are discussed further herein below. In general, a real-time operating system may first be loaded or booted followed by initiation of the block level storage management process. Upon completion of processing of step <b>404</b>, the block level storage management features of the storage controller will be available both for interaction with attached host systems and for interaction with other virtual machines yet to be defined and initialized.</p>
<p id="p-0035" num="0034">Step <b>406</b> creates a second virtual machine intended for use by one or more data management application processes. As noted above, the second virtual machine may be associated with a core processor of the multi-core processor in the storage controller that is general purpose in nature as distinct from those core processors better tuned for real-time control as required in the block level storage management processing. Step <b>408</b> then initializes or boots the data management application for operation in the newly defined second virtual machine. Additional details of the processing of step <b>408</b> are discussed further herein below. In general, a general purpose operating system may be loaded or booted followed by commencement of the operation of the data management application operable in conjunction with the general purpose operating system.</p>
<p id="p-0036" num="0035">Those of ordinary skill in the art will further recognize that block level storage management operable in the first virtual machine may be loaded/booted and initialized in conjunction with a commercially available real-time operating system (such as VxWorks). Alternatively, the block level storage management process may be written as a customized process that does not require features and services of any particular operating system. Similarly, the data management application operable in the second virtual machine may be booted and initialized in conjunction with a commercially available general purpose operating system (such as Windows or Linux) or may be designed as a customized application/process that does not require the features and services of a commercially available operating system.</p>
<p id="p-0037" num="0036">Following completion of step <b>408</b>, both the data management application and the blocked level storage management processing will be available for normal operation within the storage controller as indicated by step <b>410</b>. Thus, attached host systems may interact directly with the block level storage management (e.g., RAID storage management) requesting access to storage devices coupled to the storage controller. Further, attached host systems may interact directly with the data management application requesting other higher level services. The data management application operable in the second virtual machine may then interact, as needed, with the block level storage management processing operable in the first virtual machine in order to perform requested processing on behalf of an attached host.</p>
<p id="p-0038" num="0037"><figref idref="DRAWINGS">FIG. 5</figref> is flowchart providing exemplary additional details of the processing of step <b>404</b> to initialize or boot block level storage management within the first virtual machine. Step <b>500</b> first boots a real-time operating system to provide real-time processing services for use by the block level storage management processing. For example, VxWorks real-time operating system may be booted in the first virtual machine defined by the hypervisor as discussed above. Step <b>502</b> then starts the block level storage management process (e.g., RAID storage management) operable in conjunction with the real-time operating system&#x2014;both executing within the first virtual machine under control of the hypervisor. Following initialization of the block level storage management, step <b>504</b> represents any processing required to make block level storage management fully operable to respond to storage requests from attached host systems. This may entail, for example, completing configuration processing to identify logical volumes distributed over one or more of the storage devices in the system. Lastly, step <b>506</b> represents processing to initialize the coupling driver associated with the real-time operating system of the first virtual machine for processing exchanges with other virtual machines. General purpose operating systems and data management applications that may operate in other virtual machines may then be booted/loaded by access (e.g., BIOS INT13 access) to the storage system through the fully initialized and operational block level storage management in the first virtual machine in cooperation with the hypervisor. Once so initialized, other virtual machines created by the hypervisor and operable on other core processors of the multi-core processor of the storage controller may issue I/O requests to the block level storage management (e.g., RAID storage management) through the coupling driver operable in the first virtual machine.</p>
<p id="p-0039" num="0038"><figref idref="DRAWINGS">FIG. 6</figref> is a flowchart providing exemplary additional details of the processing of step <b>408</b> of <figref idref="DRAWINGS">FIG. 4</figref> to initialize or boot data management applications in the second virtual machine (under control of the hypervisor). Step <b>600</b> establishes simulation capabilities within the real-time hypervisor to allow it to simulate BIOS INT13 features for use in booting or initializing operations in the second virtual machine. At step <b>602</b>, the general purposes operating system will be booted to start operation in the second virtual machine. The hypervisor messaging layer provides an interface to the general purpose operating system to be initialized and to the data management application operable in conjunction therewith. The boot process of the general purpose operating system generally utilizes standard BIOS INT13 function invocations. BIOS INT13 functions are well known to those of ordinary skill in the art and are often used for access to a storage device (e.g., a disk drive) through the BIOS of a standard personal computer/workstation. The simulation capabilities of the hypervisor and its messaging layer allow the BIOS INT13 function invocations to be intercepted during the boot and initialization processing of the general purpose operating system in the second virtual machine. The intercepted BIOS INT13 function invocations are forwarded by the messaging layer associated with the hypervisor to the first virtual machine to be processed as I/O requests within the block level storage management. Once the general purpose operating system is booted in the second virtual machine, step <b>604</b> initializes a coupling driver in the general purpose operating system to enable the operating system and data management applications in the second virtual machine to directly communicate storage requests to the block level storage management.</p>
<p id="p-0040" num="0039">Those of ordinary skill in the art will readily recognize that the steps of <figref idref="DRAWINGS">FIG. 6</figref> may be repeated for each additional virtual machine on which one or more data management applications may be operating under control of a general purpose operating system (or as a dedicated custom application built without the need for an underlying operating system).</p>
<p id="p-0041" num="0040"><figref idref="DRAWINGS">FIG. 7</figref> is a flowchart providing exemplary additional details of the processing of step <b>410</b> of <figref idref="DRAWINGS">FIG. 4</figref> to operate the storage controller under control of the hypervisor with the first virtual machine providing block level (e.g., RAID) storage management services and with a second and potentially other virtual machine providing higher level data management services. In particular, step <b>410</b> receives an I/O request from either of two (or more) sources. One source of requests is the data management application/applications operable under control of the hypervisor in the second virtual machine. Another source of such requests is one or more host systems attached to the storage controller. Step <b>700</b> represents processing that receives an I/O request in the block level storage management operable in the first virtual machine from any of the one or more data management applications operable in the other virtual machines. As noted, each data management application may be operable in cooperation with a general purpose operating system operable in the same virtual machine as the application. With or without the services of such a general purpose operating system, the data management application may communicate through a coupling driver module and a messaging layer provided by the hypervisor to the block level storage management process operating in the first virtual machine. Step <b>702</b> represents similar processing within the block level storage management operating in the first virtual machine to receive an I/O request from an attached host system. The first virtual machine may receive such host system generated I/O requests through any of several well known, commercially available communication media and protocols.</p>
<p id="p-0042" num="0041">In both cases, common processing in step <b>704</b> processes the received I/O request by performing the requested access to the storage devices identified in the request. Steps <b>706</b> and <b>708</b> then return the results of the completed I/O request to the requesting source. If the request was received from a data management application operating in the same storage controller in a virtual machine defined by the hypervisor, then the results are returned by step <b>706</b> through coupling drivers in the first virtual machine the requesting second or other virtual machine. A messaging layer associated with the hypervisor provides a communication medium for the coupling drivers to exchange the returned results of the I/O request. Where the I/O request was received from an attached host system, step <b>708</b> returns the results of the completed I/O request to the requesting host system.</p>
<p id="p-0043" num="0042">Those of ordinary skill in the art will readily recognize numerous additional and equivalent steps that may be performed in the methods of <figref idref="DRAWINGS">FIGS. 4 through 7</figref>. Such additional and equivalent steps are omitted herein merely for brevity and simplicity of this discussion.</p>
<p id="p-0044" num="0043">While the invention has been illustrated and described in the drawings and foregoing description, such illustration and description is to be considered as exemplary and not restrictive in character. One embodiment of the invention and minor variants thereof have been shown and described. Protection is desired for all changes and modifications that come within the spirit of the invention. Those skilled in the art will appreciate variations of the above-described embodiments that fall within the scope of the invention. As a result, the invention is not limited to the specific examples and illustrations discussed above, but only by the following claims and their equivalents.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A system comprising:
<claim-text>a plurality of storage devices;</claim-text>
<claim-text>a storage controller coupled to the plurality of storage devices and having a multi-core processor, each processor core operable in parallel;</claim-text>
<claim-text>a hypervisor operable in the storage controller to manage the multiple processor cores and adapted to define a first virtual machine operable on a first processor core and to define a second virtual machine operable on a second processor core;</claim-text>
<claim-text>a block level storage management process operable on the first virtual machine; and</claim-text>
<claim-text>a data management application process operable on the second virtual machine and adapted to communicate with the block level storage management process, wherein the hypervisor further includes a communication path coupling the second virtual machine with the block level storage management process, further wherein the communication path comprises an interrupt simulator to enable the second virtual machine on the second processor to communicate with the block level storage management process on the first virtual machine on the first processor to boot and initialize a general purpose operating system operable in the second virtual machine on the second processor.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>
<claim-text>wherein the multi-core processor comprises an Intel architecture multi-core processor.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref> further comprising:
<claim-text>a real-time control operating system operable in the first virtual machine adapted to control operation of the block level storage management process in the first virtual machine.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the general purpose operating system operable in the second virtual machine controls operation of the data management application process in the second virtual machine.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>
<claim-text>wherein the block level storage management process is a Redundant Array of Independent Disks (RAID) storage management process.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>
<claim-text>wherein the hypervisor is a real-time hypervisor, and</claim-text>
<claim-text>wherein the real-time hypervisor is adapted to manage the first virtual machine to provide real-time control and response capabilities to the block level storage management process operable in the first virtual machine.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>
<claim-text>wherein the one or more services including one or more of: Network File System (NFS) service, object storage management service, content addressable storage management service, virtual tape service, storage virtualizing service, storage replication service, storage copy service, storage clustering service, and storage security service.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>
<claim-text>wherein the data management application process provides Network File System (NFS) services to attached computing systems.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. A method operable in a system having a multi-core processor coupled to host systems and coupled to storage devices, the method comprising:
<claim-text>booting a real-time hypervisor in the multi-core processor in response to a reset of the multi-core processor;</claim-text>
<claim-text>operating the real-time hypervisor to create a first virtual machine on a first processor;</claim-text>
<claim-text>operating the first virtual machine to initialize operation of a block level storage management process in the first virtual machine;</claim-text>
<claim-text>operating the real-time hypervisor to create a second virtual machine on a second processor;</claim-text>
<claim-text>operating the second virtual machine to initialize operation of a data management application in the second virtual machine; and</claim-text>
<claim-text>operating the first virtual machine and the second virtual machine under control of the real-time hypervisor to provide data management application processing and block level storage management processing within the system,</claim-text>
<claim-text>wherein operating the second virtual machine to initialize further comprises operating the real-time hypervisor and the block level storage management process in first virtual machine to provide storage services to the second virtual machine,</claim-text>
<claim-text>wherein the hypervisor includes a communication path coupling the second virtual machine with the block level storage management process, further wherein the communication path comprises an interrupt simulator to enable the second virtual machine on the second processor to communicate with the block level storage management process on the first virtual machine on the first processor to boot and initialize an operating system operable in the second virtual machine on the second processor.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The method of <claim-ref idref="CLM-00009">claim 9</claim-ref>
<claim-text>wherein the step of operating the second virtual machine to initialize further comprises:
<claim-text>booting a general purpose operating system in the second virtual machine, the general purpose operating system including a coupling driver adapted to communicate through the hypervisor with the block level storage management process operable in the first virtual machine,</claim-text>
</claim-text>
<claim-text>wherein the step of operating the first and second virtual machines further comprises:
<claim-text>generating, within the data management application, a request for block level storage management operations;</claim-text>
<claim-text>directing the generated request using the coupling driver through the hypervisor to the block level storage management process;</claim-text>
<claim-text>processing the request in the block level storage management process; and</claim-text>
<claim-text>returning results from processing of the request through the hypervisor to the data management application using the coupling driver receiving results generated.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The method of <claim-ref idref="CLM-00009">claim 9</claim-ref>
<claim-text>wherein the step of operating the first and second virtual machines further comprises:</claim-text>
<claim-text>operating the data management application in the second virtual machine wherein the data management application provides one or more services to attached host systems, the one or more services including one or more of: Network File System (NFS) service, object storage management service, content addressable storage management service, virtual tape service, storage virtualizing service, storage replication service, storage copy service, storage clustering service, and storage security service.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. A storage controller adapted for coupling one or more host system to a plurality of disk drives, the controller comprising:
<claim-text>a multi-core processor, each processor core operable in parallel wherein the multi-core processing system is coupled to the plurality of storage devices;</claim-text>
<claim-text>a hypervisor operable to manage the multiple processors and adapted to define a first virtual machine on a first processor of the multi-core processor and to define a second virtual machine on a second processor of the multi-core processor;</claim-text>
<claim-text>a real-time operating system operable in the first virtual machine;</claim-text>
<claim-text>a Redundant Array of Independent Disks (RAID) storage management process operable on the first virtual machine under control of the real-time operating system;</claim-text>
<claim-text>a general purpose operating system operable in the second virtual machine; and</claim-text>
<claim-text>a data management application process operable on the second virtual machine,</claim-text>
<claim-text>wherein the hypervisor further comprises:
<claim-text>a communication path coupling the second virtual machine with the RAID storage management process, wherein the communication path comprises an interrupt simulator to enable the second virtual machine to communicate with the RAID storage management process on the first virtual machine on the first processor to boot and initialize the general purpose operating system on the second virtual machine on the second processor.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The storage controller of <claim-ref idref="CLM-00012">claim 12</claim-ref>
<claim-text>wherein the communication path further comprises a messaging means coupled between the first virtual machine and the second virtual machine,</claim-text>
<claim-text>wherein the general purpose operating system includes a coupling driver adapted to communicate with the messaging means,</claim-text>
<claim-text>wherein the real-time operating system includes a coupling driver adapted to communicate with the messaging means, and</claim-text>
<claim-text>wherein the data management application is adapted to use the coupling driver in the general purpose operating system to communicate with the RAID storage management process through the coupling driver in the real-time operating system.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The storage controller of <claim-ref idref="CLM-00012">claim 12</claim-ref>
<claim-text>wherein the data management application process is adapted to provide one or more services to attached host systems, the one or more services including one or more of: Network File System (NFS) service, object storage management service, content addressable storage management service, virtual tape service, storage virtualizing service, storage replication service, storage copy service, storage clustering service, and storage security service.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the interrupt simulator comprises a BIOS INT13 simulator.</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The method of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the intercepted interrupt comprises a BIOS INT13 interrupt.</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The storage controller of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the interrupt simulator comprises a BIOS INT13 simulator.</claim-text>
</claim>
</claims>
</us-patent-grant>

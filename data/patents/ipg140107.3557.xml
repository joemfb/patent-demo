<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08624622-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08624622</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>13276180</doc-number>
<date>20111018</date>
</document-id>
</application-reference>
<us-application-series-code>13</us-application-series-code>
<us-term-of-grant>
<disclaimer>
<text>This patent is subject to a terminal disclaimer.</text>
</disclaimer>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>H</section>
<class>03</class>
<subclass>K</subclass>
<main-group>19</main-group>
<subgroup>003</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>326  9</main-classification>
<further-classification>326 14</further-classification>
<further-classification>326 15</further-classification>
<further-classification>326 39</further-classification>
</classification-national>
<invention-title id="d2e51">Fault tolerant integrated circuit architecture</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>8067954</doc-number>
<kind>B2</kind>
<name>Kelem et al.</name>
<date>20111100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>326  9</main-classification></classification-national>
</us-citation>
</us-references-cited>
<number-of-claims>40</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>326  9- 10</main-classification>
<additional-info>unstructured</additional-info>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>326 14- 15</main-classification>
<additional-info>unstructured</additional-info>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>326 38- 41</main-classification>
<additional-info>unstructured</additional-info>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>19</number-of-drawing-sheets>
<number-of-figures>20</number-of-figures>
</figures>
<us-related-documents>
<continuation>
<relation>
<parent-doc>
<document-id>
<country>US</country>
<doc-number>12718986</doc-number>
<date>20100307</date>
</document-id>
<parent-grant-document>
<document-id>
<country>US</country>
<doc-number>8067954</doc-number>
</document-id>
</parent-grant-document>
</parent-doc>
<child-doc>
<document-id>
<country>US</country>
<doc-number>13276180</doc-number>
</document-id>
</child-doc>
</relation>
</continuation>
<continuation>
<relation>
<parent-doc>
<document-id>
<country>US</country>
<doc-number>12193015</doc-number>
<date>20080817</date>
</document-id>
<parent-grant-document>
<document-id>
<country>US</country>
<doc-number>7705624</doc-number>
<date>20100427</date>
</document-id>
</parent-grant-document>
</parent-doc>
<child-doc>
<document-id>
<country>US</country>
<doc-number>12718986</doc-number>
</document-id>
</child-doc>
</relation>
</continuation>
<continuation>
<relation>
<parent-doc>
<document-id>
<country>US</country>
<doc-number>11471832</doc-number>
<date>20060621</date>
</document-id>
<parent-grant-document>
<document-id>
<country>US</country>
<doc-number>7427871</doc-number>
<date>20080923</date>
</document-id>
</parent-grant-document>
</parent-doc>
<child-doc>
<document-id>
<country>US</country>
<doc-number>12193015</doc-number>
</document-id>
</child-doc>
</relation>
</continuation>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20120146685</doc-number>
<kind>A1</kind>
<date>20120614</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Kelem</last-name>
<first-name>Steven Hennick</first-name>
<address>
<city>Los Altos Hills</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Cummins</last-name>
<first-name>Jaime C.</first-name>
<address>
<city>Saratoga</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="003" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Watson</last-name>
<first-name>John L.</first-name>
<address>
<city>Edgewood</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="004" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Plunkett</last-name>
<first-name>Robert</first-name>
<address>
<city>Sunnyvale</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="005" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Wasson</last-name>
<first-name>Stephen L.</first-name>
<address>
<city>Marina</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="006" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Box</last-name>
<first-name>Brian A.</first-name>
<address>
<city>Seabrook</city>
<state>NH</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="007" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Wein</last-name>
<first-name>Enno</first-name>
<address>
<city>San Jose</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="008" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Furciniti</last-name>
<first-name>Charles A.</first-name>
<address>
<city>Bedford</city>
<state>NH</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Kelem</last-name>
<first-name>Steven Hennick</first-name>
<address>
<city>Los Altos Hills</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Cummins</last-name>
<first-name>Jaime C.</first-name>
<address>
<city>Saratoga</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="003" designation="us-only">
<addressbook>
<last-name>Watson</last-name>
<first-name>John L.</first-name>
<address>
<city>Edgewood</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="004" designation="us-only">
<addressbook>
<last-name>Plunkett</last-name>
<first-name>Robert</first-name>
<address>
<city>Sunnyvale</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="005" designation="us-only">
<addressbook>
<last-name>Wasson</last-name>
<first-name>Stephen L.</first-name>
<address>
<city>Marina</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="006" designation="us-only">
<addressbook>
<last-name>Box</last-name>
<first-name>Brian A.</first-name>
<address>
<city>Seabrook</city>
<state>NH</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="007" designation="us-only">
<addressbook>
<last-name>Wein</last-name>
<first-name>Enno</first-name>
<address>
<city>San Jose</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="008" designation="us-only">
<addressbook>
<last-name>Furciniti</last-name>
<first-name>Charles A.</first-name>
<address>
<city>Bedford</city>
<state>NH</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<last-name>Gamburd</last-name>
<first-name>Nancy R.</first-name>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
<agent sequence="02" rep-type="attorney">
<addressbook>
<orgname>Gamburd Law Group LLC</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>Element CXI, LLC</orgname>
<role>02</role>
<address>
<city>San Jose</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Tran</last-name>
<first-name>Anh</first-name>
<department>2819</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">The exemplary embodiments provide a resilient integrated circuit. An exemplary IC comprises a plurality of composite circuit elements, a state machine element (SME), and a plurality of communication elements. Each composite circuit element comprises an element interface and a selected circuit element which may vary by element type, and which may be configurable. The state machine element assigns various functions based on element type, such as assigning a first configuration to a first element type, assigning a second configuration to a second element type, and providing a first data link for the corresponding assignments. In response to detection of a fault or failure, the state machine element re-assigns the first configuration to another composite circuit element and creates a second data link for performance of the same function, providing for the IC to continue the same functioning despite defects which may arise during operation.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="177.04mm" wi="232.07mm" file="US08624622-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="232.58mm" wi="132.67mm" file="US08624622-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="246.72mm" wi="185.17mm" orientation="landscape" file="US08624622-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="235.20mm" wi="185.84mm" orientation="landscape" file="US08624622-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="92.29mm" wi="165.95mm" file="US08624622-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="235.80mm" wi="177.55mm" orientation="landscape" file="US08624622-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="242.23mm" wi="183.90mm" orientation="landscape" file="US08624622-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="235.80mm" wi="182.63mm" orientation="landscape" file="US08624622-20140107-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00008" num="00008">
<img id="EMI-D00008" he="242.91mm" wi="180.68mm" orientation="landscape" file="US08624622-20140107-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00009" num="00009">
<img id="EMI-D00009" he="239.01mm" wi="169.84mm" file="US08624622-20140107-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00010" num="00010">
<img id="EMI-D00010" he="249.26mm" wi="177.55mm" file="US08624622-20140107-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00011" num="00011">
<img id="EMI-D00011" he="246.72mm" wi="170.43mm" file="US08624622-20140107-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00012" num="00012">
<img id="EMI-D00012" he="241.55mm" wi="192.87mm" file="US08624622-20140107-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00013" num="00013">
<img id="EMI-D00013" he="244.18mm" wi="180.68mm" file="US08624622-20140107-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00014" num="00014">
<img id="EMI-D00014" he="245.45mm" wi="162.73mm" file="US08624622-20140107-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00015" num="00015">
<img id="EMI-D00015" he="250.53mm" wi="177.55mm" file="US08624622-20140107-D00015.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00016" num="00016">
<img id="EMI-D00016" he="220.47mm" wi="173.06mm" file="US08624622-20140107-D00016.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00017" num="00017">
<img id="EMI-D00017" he="226.82mm" wi="125.56mm" file="US08624622-20140107-D00017.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00018" num="00018">
<img id="EMI-D00018" he="247.40mm" wi="89.75mm" orientation="landscape" file="US08624622-20140107-D00018.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00019" num="00019">
<img id="EMI-D00019" he="223.69mm" wi="134.54mm" file="US08624622-20140107-D00019.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?RELAPP description="Other Patent Relations" end="lead"?>
<heading id="h-0001" level="1">CROSS-REFERENCE TO RELATED APPLICATIONS</heading>
<p id="p-0002" num="0001">This application is a continuation of and claims priority to Kelem, Steven Hennick et al., U.S. patent application Ser. No. 12/718,986, filed Mar. 7, 2010, entitled &#x201c;Fault Tolerant Integrated Circuit Architecture&#x201d;, which is a continuation of and claims priority to Kelem, Steven Hennick et al., U.S. patent application Ser. No. 12/193,015, filed Aug. 17, 2008 and issued Apr. 27, 2010 as U.S. Pat. No. 7,705,624, entitled &#x201c;Fault Tolerant Integrated Circuit Architecture&#x201d;, which is a continuation of and claims priority to Kelem, Steven Hennick et al., U.S. patent application Ser. No. 11/471,832, filed Jun. 21, 2006 and issued Sep. 23, 2008 as U.S. Pat. No. 7,427,871, entitled &#x201c;Fault Tolerant Integrated Circuit Architecture&#x201d;, which are commonly assigned herewith, the entire contents of both of which are incorporated herein by reference with the same full force and effect as if set forth in their entirety herein, and with priority claimed for all commonly disclosed subject matter.</p>
<?RELAPP description="Other Patent Relations" end="tail"?>
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0002" level="1">FIELD OF THE INVENTION</heading>
<p id="p-0003" num="0002">The present invention relates, in general, to integrated circuits and, more particularly, to integrated circuitry having distributed and configurable circuit elements, distributed communication circuit elements, and distributed control circuit elements, for transferable functionality, fault tolerance and resilience.</p>
<heading id="h-0003" level="1">BACKGROUND OF THE INVENTION</heading>
<p id="p-0004" num="0003">Historically, integrated circuits (&#x201c;ICs&#x201d;) which are configurable post-fabrication have been dominated by field programmable gate arrays (&#x201c;FPGAs&#x201d;), which provide an array of identical logic gates or other elements. In some integrated circuit embodiments, the gate array is also coupled to one or more microprocessor cores, for the FPGA components to provide configurable, application-specific acceleration of selected computations. The logic elements in an FPGA are typically very &#x201c;fine-grained&#x201d;, as gate arrays which can be connected through data inputs and outputs (&#x201c;I/O&#x201d;) to provide a more advanced function such as addition, subtraction or comparison, without separate hard-wired, application-specific components directly providing such advanced functions. The process for configuring the gate arrays of FPGAs is comparatively slow, typically through a serial configuration bus, so that FPGAs generally have not been capable of real-time re-configuration for immediate changes in functionality.</p>
<p id="p-0005" num="0004">In other circumstances, configurable ICs have involved large-scale (or &#x201c;coarse-grained&#x201d; configurable logic elements which are capable of significant functionality, such as multimedia processing, arithmetic processing, and communication functionality. While these large-scale configurable logic elements provide extremely capable acceleration, each group of configurable logic elements is typically different and requires separate programming to carry out its functions. In addition, such large-scale configurable logic elements are not translatable to other functions, exhibiting similar constraints of application-specific ICs (&#x201c;ASICs&#x201d;).</p>
<p id="p-0006" num="0005">Configurable capabilities have also been added to microprocessor, ASIC and memory ICs. For example, in memory ICs, extra or redundant rows and columns are fabricated; when subsequent testing may reveal that selected rows and columns have defects, those affected IC regions are disabled, with the balance of the memory IC being useable potentially and, with the redundancy, may still meet the memory capacity specification. In other circumstances, some amount of configurability may be added to correct for design errors and other defects after the IC has been fabricated, or to allow modification of inputs and outputs, such as for configurable I/O and configurable data path widths.</p>
<p id="p-0007" num="0006">In addition, after configuration and during operation, such FPGAs, ASICs, processors, and other configurable logic do not exhibit resiliency. For example, if a portion of the IC becomes defective during operation, the entire IC fails instantly, losing all functionality. While the IC may be taken off line or removed, diagnosed, and depending upon the damage, possibly reconfigured, such ICs are not capable of real-time reconfiguration and transferring of functionality to unaffected portions of the IC.</p>
<p id="p-0008" num="0007">Another technology created by IBM and referred to as &#x201c;eFuse&#x201d; utilizes electromigration to create microscopic electrical fuses which disable selected or defective portions of the IC, with software utilized to open or close gates to re-route chip logic to the remaining good portions of the IC, such as to correct design flaws, fabrication defects, and manage power consumption. For example, the eFuse technology can disable defective memory rows and columns, and eFuse software can change memory addresses so that data will be stored in the non-defective portions of the memory.</p>
<p id="p-0009" num="0008">None of these technologies, however, addresses the increasing number of defects which are now arising in sub-100 nm IC fabrication. More particularly, as IC feature size continues to decrease below 90 nm, there are increasing levels of defects and decreased IC yields. In addition, while an IC initially may be sufficiently free of defects to operate for its intended use, the smaller feature size also increases the probability of IC failure during operation, such as due to tunneling and electromigration effects.</p>
<p id="p-0010" num="0009">In addition, while each of these prior art technologies have their own advantages, such as an ability to correct design flaws and to work-around minor fabrication defects, none of these prior art technologies provide sustainable resiliency over time, during IC operation. Whether defects were created during fabrication or much later, during IC usage, these known technologies simply cannot accommodate both certain kinds of defects and certain levels of defects, and the entire IC fails completely. Such failure is often catastrophic, such that the entire IC fails instantly and without warning. For example, if a certain region of the IC fails, such as a significant component within a microprocessor, the entire microprocessor becomes instantly useless.</p>
<p id="p-0011" num="0010">To attempt to provide some level of resiliency, these various technologies have simply added some redundancy. For example, multiple processors will be placed on the same IC, such that if a defect causes one processor to fail, a redundant processor is available to take over. In these circumstances, however, either the redundant processor was previously completely idle and unused, or its prior functioning has been superseded and completely lost. In either event, this resiliency is at the expense of approximately twice the IC area and significantly increased manufacturing costs. In addition, such basic redundancy efforts do not account for defects which may occur within all redundant components, as even small defects may cause such components to fail.</p>
<p id="p-0012" num="0011">As a consequence, a need remains for an integrated circuit architecture which is significantly resilient and robust despite fabrication or usage defects which can affect any components, without the expense of otherwise unused redundancy. Such an IC should provide for ongoing adaptation, such that when a defect arises, functionality may be transferred to an unaffected region in real-time or near-real time. Such technology should provide for configuration (programming or other software) for the IC which allows such transferable functionality, without requiring the entire program to be transferred to a completely redundant processor. In addition, such an IC should provide for a graceful degradation with increasing defects or problems, rather than a catastrophic failure.</p>
<heading id="h-0004" level="1">SUMMARY OF THE INVENTION</heading>
<p id="p-0013" num="0012">The exemplary embodiments of the present invention provide an integrated circuit architecture which is capable of significant resiliency, without otherwise unused redundancy. The exemplary IC embodiment may be adapted on an ongoing basis, as may be necessary in the event of a defect, or as may be desirable for incorporation of a new program or function. For example, in the event a defect arises, functionality may be transferred to an unaffected region in real-time or near-real time. The exemplary architecture and software for the IC also allows such transferable functionality, without requiring the entire program to be transferred to a completely redundant processor or otherwise unused computational block. In addition, the exemplary IC embodiments provide for a graceful degradation and notification with increasing defects or problems, which may occur during use (in addition to fabrication), rather than a catastrophic failure.</p>
<p id="p-0014" num="0013">In an exemplary embodiment, an apparatus is provided which comprises a plurality of composite circuit elements, a plurality of communication elements coupled to the plurality of composite circuit elements; and a state machine element coupled to the plurality of composite circuit elements and to the plurality of communication elements. Each composite circuit element comprises a corresponding element interface and a corresponding circuit element of a plurality of circuit element types, with each composite circuit element having at least one input and at least one output, and with a first composite circuit element of the plurality of composite circuit elements having a first circuit element type of the plurality of circuit element types and a second composite circuit element of the plurality of composite circuit elements having a second circuit element type of the plurality of circuit element types. The state machine element is adapted to assign a first action to the first composite circuit element, to assign a second action to the second composite circuit element, and to provide for a first virtual data link through a selected communication element, of the plurality of communication elements, from the at least one output of the first composite circuit element to the at least one input of the second composite circuit element.</p>
<p id="p-0015" num="0014">In an exemplary embodiment, the plurality of circuit element types comprises at least one of the following circuit element types: a plurality of configurable element types, a memory element type, a plurality of communication element types; and a plurality of non-configurable element types. For example, the first circuit element type is a first configurable element type of the plurality of configurable element types, the second circuit element type is a second configurable element type of the plurality of configurable element types, and wherein the state machine element is further adapted to assign the first action as a first configuration of the first composite circuit element and assign the second action as a second configuration of the second composite circuit element. The state machine element may be further adapted to obtain the first configuration and first configurable element type from a first symbolic netlist element and to obtain the second configuration and second configurable circuit element type from a second symbolic netlist element during a run-time binding of the first action and the second action. In addition, the first symbolic netlist element further comprises a pointer designating the first virtual data link as a data communication to the at least one input of the second composite circuit element, and the second symbolic netlist element may further comprise a pointer designating the virtual data link as a data communication from the at least one output of the first composite circuit element.</p>
<p id="p-0016" num="0015">The state machine element may be further adapted to assign the first action to the first composite circuit element and assign the second action to the second composite circuit element following a determination that both the first composite circuit element and the second composite circuit element are operating properly. The operational determination is at least one of the following determinations: a periodic diagnostic performed by at least one composite circuit element of the plurality of composite circuit elements; a background diagnostic performed as a selected context of at least one composite circuit element of the plurality of composite circuit elements; or a comparison test performed by a plurality of composite circuit elements of the same circuit element type.</p>
<p id="p-0017" num="0016">The state machine element is further adapted, in response to a detected fault of the first composite circuit element, to assign the first action to a third composite circuit element of the plurality of composite circuit elements, the third composite circuit element having a circuit element of the first circuit element type, and the state machine element further adapted to provide for a second virtual data link through a communication element, of the plurality of communication elements, from the at least one output of the third composite circuit element to the at least one input of the second composite circuit element. Alternatively, the state machine element is further adapted, in response to a detected fault of the first circuit element, to assign the first action to a third composite circuit element of the plurality of composite circuit elements, the third composite circuit element having a circuit element of a third circuit element type, and the state machine element further adapted to provide for a third virtual data link through a communication element, of the plurality of communication elements, from the at least one output of the third composite circuit element to the at least one input of the second composite circuit element. In an exemplary embodiment, the state machine element is further adapted to use a stored transformation table having a reference to the third composite circuit element for transfer of the first action.</p>
<p id="p-0018" num="0017">The plurality of composite circuit elements also may be adapted to store periodically a then current state and, in response to a detected fault, to retrieve the stored state and recommence operation using the stored state.</p>
<p id="p-0019" num="0018">Also in an exemplary embodiment, each corresponding element interface comprises: a first memory coupled to the corresponding circuit element, the first memory adapted to store a plurality of configurations as corresponding contexts; an element controller coupled to the corresponding circuit element; and a second memory coupled to the corresponding circuit element, the second memory adapted to provide a plurality of input queues for data input to the corresponding circuit element. Each corresponding context defines a configuration of the corresponding circuit element, and either one or more data input sources or one or more data output destinations. The element interface may further comprise a third memory coupled to the circuit element, the third memory adapted to provide a plurality of output queues for data output from the circuit element. Alternatively, the element interface may include the third memory for output queues, without including the second memory for input queues. In an exemplary embodiment, the element controller is adapted, for a selected context of the plurality of contexts, to direct an execution of the selected context by the circuit element when a selected input queue corresponding to the selected context has input data, when a selected output queue corresponding to the selected context has capacity to store output data, and when a status bit corresponding to the selected context is set for execution. Also, the element controller may be further adapted to store a current state of a partial execution of a first context in the first memory, execute a second context, and retrieve the current state and resume execution of the first context.</p>
<p id="p-0020" num="0019">The element controller may be further adapted to arbitrate among a plurality of contexts which are ready for execution and to select a corresponding context for execution as a result of the arbitration. For example, the arbitration implements at least one of the following arbitration methods: a round-robin, a priority, a most recently executed, a least recently executed, or a scheduled execution.</p>
<p id="p-0021" num="0020">Similarly, in an exemplary embodiment, each communication element of the plurality of communication elements further comprises a corresponding element interface and a corresponding communication circuit element, and the state machine element further comprises a corresponding element interface and a corresponding state machine circuit element.</p>
<p id="p-0022" num="0021">In an exemplary embodiment, the plurality of communication elements further comprise: a plurality of first communication elements, the plurality of first communication elements adapted both to route at least one first data word and to switch at least one second data word; and a full interconnect element coupled to the plurality of composite circuit elements and to the plurality of first communication elements, the full interconnect element adapted to couple any output of a composite circuit element of the plurality of composite circuit elements to any input of another composite circuit element of the plurality of composite circuit elements or to the plurality of first communication elements. The full interconnect element may be distributed among a plurality of switches, pass transistors, multiplexers or demultiplexers. In other exemplary embodiments, the full interconnect element is a crossbar switch. Also, the full interconnect element may be adapted to provide at least one of the following physical data links: a plurality of one-to-one input and output data links, a one-to-many broadcast data link, a many-to-one data link.</p>
<p id="p-0023" num="0022">The state machine element may provide for the first virtual data link through either a selected first communication element of the plurality of first communication elements or through the full interconnect element. A selected communication element may be further adapted to determine from the first virtual data link at least one first physical data link, of a plurality of physical data links, from the at least one output of the first composite circuit element to the at least one input of the second composite circuit element. In addition, the selected communication element is further adapted to create the plurality of physical data links at a selected time or a selected clock cycle using a routing table stored in a corresponding memory.</p>
<p id="p-0024" num="0023">In exemplary embodiments, the plurality of communication elements further comprise a plurality of second communication elements which are adapted to route or switch at least one third data word between a first array of the plurality of composite circuit elements and a second array of the plurality of composite circuit elements. The plurality of communication elements may also comprise an intercluster queue adapted to buffer at least one third data word from a first array of the plurality of composite circuit elements and transfer the at least one third data word to an adjacent second array of the plurality of composite circuit elements</p>
<p id="p-0025" num="0024">Exemplary embodiments may also include a message manager circuit coupled to the state machine element, the message manager circuit adapted to provide a communication interface to an external bus or an external memory. In addition, the message manager circuit may also provide a uniform address space for a distributed plurality of memory composite circuit elements.</p>
<p id="p-0026" num="0025">In exemplary embodiments, the plurality of circuit element types may comprise any of the following circuit element types: a configurable arithmetic logic unit, a configurable multiplier, a configurable bit reordering element a configurable multiply and accumulate element, a configurable Galois multiplier, a configurable barrel shifter, a configurable look-up table, a programmable controller, a configurable controller, and a configurable plurality of arithmetic logic units.</p>
<p id="p-0027" num="0026">In exemplary embodiments, the state machine element may be coupled to the plurality of composite circuit elements either directly or through at least one communication element of the plurality of communication elements. In other exemplary embodiments, the state machine element is an external controller or external processor coupled to the plurality of composite circuit elements through at least one communication element of the plurality of communication elements. Typically, the state machine element further comprises: a finite state machine circuit and a memory adapted to store state information.</p>
<p id="p-0028" num="0027">In exemplary embodiments, another operating mode is provided. In this mode, the state machine element provides for a first physical data link through the selected communication element from the at least one output of the first composite circuit element to the at least one input of the second composite circuit element, and wherein the state machine element is further adapted to provide for execution of the first action and the second action.</p>
<p id="p-0029" num="0028">In another exemplary embodiment, an inventive apparatus comprises: (1) a plurality of circuit arrays, each circuit array of the plurality of circuit arrays comprising: (a) a plurality of composite circuit elements, each composite circuit element comprising an element interface and a circuit element of a plurality of circuit element types, each composite circuit element having at least one input and at least one output, the plurality of circuit element types comprising a plurality of configurable element types; (b) a full interconnect element coupled to the plurality of composite circuit elements, the full interconnect element adapted to couple any output of a first composite circuit element of the plurality of composite circuit elements to any input of a second composite circuit element of the plurality of composite circuit elements; (c) a plurality of first communication elements coupled to the full interconnect element; (d) a state machine element coupled to the plurality of composite circuit elements, to the full interconnect element, and to the plurality of first communication elements; and (2) an interconnect coupled to the plurality of circuit arrays, the interconnect comprising a plurality of second communication elements coupled to the plurality of first communication elements, the plurality of second communication elements adapted to transfer data from a first circuit array to a second circuit array of the plurality of circuit arrays.</p>
<p id="p-0030" num="0029">In another exemplary embodiment, an inventive apparatus comprises a plurality of circuit arrays, at least two circuit arrays of the plurality of circuit arrays comprising: (a) a plurality of configurable composite circuit elements, each composite circuit element comprising an element interface and a configurable circuit element of a plurality of configurable circuit element types, each composite circuit element having a plurality of inputs and a plurality of outputs; (b) an interconnect element coupled to the plurality of configurable composite circuit elements, the interconnect element adapted to couple an output of a first configurable composite circuit element of the plurality of configurable composite circuit elements to an input of a second configurable composite circuit element of the plurality of configurable composite circuit elements; (c) a plurality of first communication elements coupled to the interconnect element; and (d) a state machine element coupled to the plurality of configurable composite circuit elements, to the full interconnect element, and to the plurality of first communication elements, the state machine element adapted to assign a first action to a first configurable composite circuit element of a first circuit element type of the plurality of configurable circuit element types, to assign a second action to a second configurable composite circuit element of a second circuit element type of the plurality of configurable circuit element types, and to provide for a first data link from a first output of the plurality of outputs of the first composite circuit element to a first input of the plurality of inputs of the second composite circuit element, the first data link through the interconnect element or through a first communication element of the plurality of first communication elements.</p>
<p id="p-0031" num="0030">In another exemplary embodiment, an inventive integrated circuit comprises: (1) a plurality of circuit arrays, with each circuit array of the plurality of circuit arrays comprising: (a) a plurality of composite circuit elements, each composite circuit element comprising an element interface and a circuit element of a plurality of circuit element types, each composite circuit element having at least one input and at least one output, the plurality of circuit element types comprising a plurality of configurable element types; (b) a full interconnect element coupled to the plurality of composite circuit elements, the full interconnect element adapted to couple any output of a first composite circuit element of the plurality of composite circuit elements to any input of a second composite circuit element of the plurality of composite circuit elements; (c) a plurality of first communication elements coupled to the full interconnect element; (d) a state machine element coupled to the plurality of composite circuit elements, to the full interconnect element, and to the plurality of first communication elements, the state machine element adapted to assign a first action to a first composite circuit element of a first circuit element type of the plurality of circuit element types, to assign a second action to a second composite circuit element of a second circuit element type of the plurality of circuit element types, to provide for a first data link from the at least one output of the first composite circuit element to the at least one input of the second composite circuit element, and in response to a detected fault of the first composite circuit element, to assign the first action to a third composite circuit element of the plurality of composite circuit elements and provide for a second data link from the at least one output of the third composite circuit element to the at least one input of the second composite circuit element; and (2) an interconnect coupled to the plurality of circuit arrays, the interconnect comprising a plurality of second communication elements coupled to the plurality of first communication elements, the plurality of second communication elements adapted to transfer data from a first circuit array to a second circuit array of the plurality of circuit arrays.</p>
<p id="p-0032" num="0031">In another exemplary embodiment, an inventive apparatus comprises: a plurality of composite circuit elements, each composite circuit element comprising an element interface and a circuit element of a plurality of circuit element types, each composite circuit element having an input and an output; and a state machine element coupled to the plurality of composite circuit elements, the state machine element adapted to assign a first function to a first composite circuit element of a first element type of the plurality of element types, to assign a second function to a second composite circuit element of a second element type of the plurality of element types, and to provide a first data link from the output of the first composite circuit element to the input of the second composite circuit element.</p>
<p id="p-0033" num="0032">In another exemplary embodiment, an inventive apparatus comprises: a plurality of composite circuit elements, each composite circuit element comprising a corresponding element interface and a corresponding circuit element of a plurality of circuit element types, a first composite circuit element of the plurality of composite circuit elements having a first circuit element type of the plurality of circuit element types, a second composite circuit element of the plurality of composite circuit elements having a second circuit element type of the plurality of circuit element types; a plurality of communication elements coupled to the plurality of composite circuit elements; and a state machine element coupled to the plurality of communication elements, the state machine element adapted during run time to assign a first action to the first composite circuit element, to assign a second action to the second composite circuit element, and to provide for a first data link between the first composite circuit element and the second composite circuit element.</p>
<p id="p-0034" num="0033">In another exemplary embodiment, an inventive apparatus comprises: a plurality of composite circuit elements, each composite circuit element comprising an element interface and a circuit element of a plurality of circuit element types; and a state machine element coupled to the plurality of composite circuit elements, the state machine element adapted to assign a first function to a first composite circuit element, to assign a second function to a second composite circuit element, and to provide a first data link between the first composite circuit element and the second composite circuit element; the state machine element further adapted to, in response to an unavailability of the first composite circuit element, to assign the first function to a third composite circuit element of the plurality of composite circuit elements and to provide for a second data link between the third composite circuit element and the second composite circuit element.</p>
<p id="p-0035" num="0034">In another exemplary embodiment, an inventive apparatus comprises: a plurality of communication elements; a plurality of composite circuit elements coupled to the plurality of communication elements, each composite circuit element comprising an element interface and a circuit element of a plurality of circuit element types, a first composite circuit element of the plurality of composite circuit elements having an assigned first action, a second composite circuit element of the plurality of composite circuit elements having an assigned second action, the first composite circuit element having a first data link to the second composite circuit element; and a state machine element coupled to the plurality of communication elements, the state machine element adapted to, in response to an unavailability of the first composite circuit element, to assign the first action to a third composite circuit element of the plurality of composite circuit elements and to provide for a second data link between the third composite circuit element and the second composite circuit element.</p>
<p id="p-0036" num="0035">In exemplary embodiments, the first composite circuit element may be unavailable due to a detected fault. The fault may be detected by at least one of the following operational determinations: a periodic diagnostic performed by at least one composite circuit element of the plurality of composite circuit elements; a background diagnostic performed as a selected context of at least one composite circuit element of the plurality of composite circuit elements; or a comparison test performed by a plurality of composite circuit elements of the same circuit element type. In exemplary embodiments, the state machine element is further adapted to discontinue all activity of the first composite circuit element and to designate the first composite circuit element as unavailable in a stored availability table or map. In addition, the first composite circuit element may be unavailable due to an assignment by the state machine element of a third action having a higher priority than the first action.</p>
<p id="p-0037" num="0036">In exemplary embodiments, the first composite circuit element and the third composite circuit element each have a first configurable element type of the plurality of configurable element types, the second composite circuit element has a second configurable element type of the plurality of configurable element types, and the state machine element is further adapted to assign the first action as a first configuration of the third composite circuit element. The state machine element may be further adapted to obtain the first configuration and first configurable element type from a first symbolic netlist element. The first symbolic netlist element may further comprise a symbolic pointer designating the second data link as a virtual data communication between the third composite circuit element and the second composite circuit element</p>
<p id="p-0038" num="0037">In exemplary embodiments, the first composite circuit element has a first configurable element type of the plurality of configurable element types, the second composite circuit element has a second configurable element type of the plurality of configurable element types, the third composite circuit element has a third configurable element type of the plurality of configurable element types, and the state machine element is further adapted to assign the first action as a first configuration of the third composite circuit element. The state machine element may be further adapted to use a stored transformation table having a reference to the third composite circuit element for transfer of the first action.</p>
<p id="p-0039" num="0038">In another exemplary embodiment, an inventive apparatus comprises: a plurality of first communication elements; an interconnect element coupled to the plurality of first communication elements; a plurality of configurable composite circuit elements coupled to the plurality of first communication elements and to the interconnect element, each configurable composite circuit element comprising an element interface and a configurable circuit element of a plurality of configurable circuit element types, each composite circuit element having at least one input and at least one output, a first configurable composite circuit element of the plurality of configurable composite circuit elements having a first action, a second configurable composite circuit element of the plurality of configurable composite circuit elements having a second action, the at least one output of the first configurable composite circuit element having a first data link to the at least one input of the second configurable composite circuit element through the interconnect element or a selected communication element of the plurality of communication elements; and a state machine element coupled to the plurality of configurable composite circuit elements, to the interconnect element and to the plurality of communication elements, the state machine element adapted to, in response to a detected fault of the first configurable composite circuit element, to assign the first action to a third configurable composite circuit element of the plurality of composite circuit elements and to provide for a second data link from the at least one output of the third composite circuit element to the at least one input of the second composite circuit element through the interconnect element or a selected communication element of the plurality of communication elements.</p>
<p id="p-0040" num="0039">In exemplary embodiments, when the first configurable composite circuit element and the third configurable composite circuit element have the same configurable circuit element type, the state machine element is further adapted to transfer at least one configuration of the first configurable composite circuit element to the third configurable composite circuit element. In addition, the state machine element may be further adapted to maintain a count of available configurable composite circuit elements of the plurality of configurable composite circuit element, and in response to detection of the fault of the first configurable composite circuit element having a plurality of contexts for performance of corresponding functions, to provide the plurality of contexts to one or more available configurable composite circuit elements of the plurality of configurable composite circuit elements to perform the corresponding functions.</p>
<p id="p-0041" num="0040">In another exemplary embodiment, an inventive apparatus comprises: (1) a plurality of circuit arrays, each circuit array of the plurality of circuit arrays comprising: an interconnect element; a plurality of first communication elements coupled to the interconnect element; a plurality of composite circuit elements coupled to the interconnect element, each composite circuit element comprising an element interface and a circuit element of a plurality of circuit element types, a first composite circuit element of the plurality of composite circuit elements having a first action, a second composite circuit element of the plurality of composite circuit elements having a second action, the first composite circuit element having a first data link to the second configurable composite circuit element through the interconnect element or a selected first communication element of the plurality of first communication elements; and a state machine element coupled to the plurality of composite circuit elements, to the full interconnect element, and to the plurality of first communication elements, the state machine element adapted to, in response to an unavailability of the first composite circuit element, to assign the first action to a third composite circuit element of the plurality of composite circuit elements and to provide for a second data link between the third composite circuit element and the second composite circuit element through the interconnect element or a selected first communication element of the plurality of first communication elements; and (2) a plurality of second communication elements coupled to the plurality of first communication elements, the plurality of second communication elements adapted to transfer data from a first circuit array to a second circuit array of the plurality of circuit arrays.</p>
<p id="p-0042" num="0041">In exemplary embodiments, a first state machine element of the first circuit array is further adapted provide for the first data link by transferring a routing request, through a second communication element, to a plurality of other state machine elements of other circuit arrays of the plurality of circuit arrays and by routing the first data link to a first communication element.</p>
<p id="p-0043" num="0042">In another exemplary embodiment, an inventive self-healing integrated circuit is provided, the integrated circuit comprising: a first plurality of composite circuit elements, a first composite circuit element of the first plurality of composite circuit elements adapted to perform a first function; a plurality of communication elements coupled to the first plurality of composite circuit elements; a second plurality of composite circuit elements coupled to the first composite circuit element through a first plurality of data links through at least one communication element of the plurality of communication elements for performance of the first function; and a state machine element coupled to the first plurality of composite circuit elements and adapted, in response to an unavailability of the first composite circuit element, to adapt a second composite circuit element of the first plurality of composite circuit elements to provide the first function and to provide a second plurality of data links between the second composite circuit element and the second plurality of composite circuit elements for performance of the first function.</p>
<p id="p-0044" num="0043">In another exemplary embodiment, an inventive apparatus comprises: a plurality of composite circuit elements, each composite circuit element comprising an element interface and a circuit element of a plurality of circuit element types; and a state machine element coupled to the plurality of composite circuit elements, the state machine element adapted to assign a first function to a first composite circuit element, to assign a second function to a second composite circuit element, and to provide a first data link between the first composite circuit element and the second composite circuit element; the state machine element further adapted to, in response to a detected fault of the first composite circuit element, to assign the first function to a third composite circuit element of the plurality of composite circuit elements and to provide for a second data link between the third composite circuit element and the second composite circuit element.</p>
<p id="p-0045" num="0044">These and additional embodiments are discussed in greater detail below. Numerous other advantages and features of the present invention will become readily apparent from the following detailed description of the invention and the embodiments thereof, from the claims and from the accompanying drawings.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0005" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0046" num="0045">The objects, features and advantages of the present invention will be more readily appreciated upon reference to the following disclosure when considered in conjunction with the accompanying drawings and examples which form a portion of the specification, wherein like reference numerals are used to identify identical components in the various views, in which:</p>
<p id="p-0047" num="0046"><figref idref="DRAWINGS">FIG. 1</figref> is a diagram illustrating, at a high or conceptual level, resiliency of an exemplary apparatus embodiment in accordance with the teachings of the present invention.</p>
<p id="p-0048" num="0047"><figref idref="DRAWINGS">FIG. 2</figref> is a block diagram illustrating an exemplary first apparatus embodiment in accordance with the teachings of the present invention.</p>
<p id="p-0049" num="0048"><figref idref="DRAWINGS">FIG. 3</figref> is a block diagram illustrating an exemplary second apparatus embodiment in accordance with the teachings of the present invention.</p>
<p id="p-0050" num="0049"><figref idref="DRAWINGS">FIG. 4</figref> is a diagram illustrating an exemplary data packet and data word sequence in accordance with the teachings of the present invention.</p>
<p id="p-0051" num="0050"><figref idref="DRAWINGS">FIG. 5</figref> is a block diagram illustrating a first exemplary circuit cluster in accordance with the teachings of the present invention.</p>
<p id="p-0052" num="0051"><figref idref="DRAWINGS">FIG. 6</figref> is a block diagram illustrating a second exemplary circuit cluster in accordance with the teachings of the present invention.</p>
<p id="p-0053" num="0052"><figref idref="DRAWINGS">FIG. 7</figref> is a block diagram illustrating a third exemplary circuit cluster in accordance with the teachings of the present invention.</p>
<p id="p-0054" num="0053"><figref idref="DRAWINGS">FIG. 8</figref> is a block diagram illustrating in greater detail an exemplary composite circuit element within an exemplary circuit cluster in accordance with the teachings of the present invention.</p>
<p id="p-0055" num="0054"><figref idref="DRAWINGS">FIG. 9</figref> is a block diagram of an exemplary multiplier configurable element in accordance with the teachings of the present invention.</p>
<p id="p-0056" num="0055"><figref idref="DRAWINGS">FIG. 10</figref> is a block diagram of an exemplary triple-ALU configurable element in accordance with the teachings of the present invention.</p>
<p id="p-0057" num="0056"><figref idref="DRAWINGS">FIG. 11</figref> is a flow diagram illustrating at a high level an exemplary compilation process in accordance with the teachings of the present invention.</p>
<p id="p-0058" num="0057"><figref idref="DRAWINGS">FIG. 12</figref> is a flow diagram illustrating at a high level an exemplary operating system or process in accordance with the teachings of the present invention.</p>
<p id="p-0059" num="0058"><figref idref="DRAWINGS">FIG. 13</figref> is a block diagram illustrating exemplary combinational logic circuitry for context availability determination within an exemplary apparatus in accordance with the teachings of the present invention.</p>
<p id="p-0060" num="0059"><figref idref="DRAWINGS">FIG. 14</figref>, divided into <figref idref="DRAWINGS">FIG. 14A</figref>, <figref idref="DRAWINGS">FIG. 14B</figref>, <figref idref="DRAWINGS">FIG. 14C</figref> and <figref idref="DRAWINGS">FIG. 14D</figref>, is a flow diagram illustrating an exemplary algorithm or symbolic netlist run-time binding process in accordance with the teachings of the present invention.</p>
<p id="p-0061" num="0060"><figref idref="DRAWINGS">FIG. 15</figref> is a flow diagram illustrating a first exemplary re-assignment and re-binding process in accordance with the teachings of the present invention.</p>
<p id="p-0062" num="0061"><figref idref="DRAWINGS">FIG. 16</figref> is a diagram illustrating an exemplary configuration and control word in accordance with the teachings of the present invention.</p>
<p id="p-0063" num="0062"><figref idref="DRAWINGS">FIG. 17</figref> is a block diagram illustrating exemplary combinational logic circuitry for context readiness determination within an exemplary apparatus in accordance with the teachings of the present invention.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0006" level="1">DETAILED DESCRIPTION OF EXEMPLARY EMBODIMENTS</heading>
<p id="p-0064" num="0063">While the present invention is susceptible of embodiment in many different forms, there are shown in the drawings and will be described herein in detail specific examples and embodiments thereof, with the understanding that the present disclosure is to be considered as an exemplification of the principles of the invention and is not intended to limit the invention to the specific examples and embodiments illustrated, and that numerous variations or modifications from the described embodiments may be possible and are considered equivalent. In this respect, before explaining at least one embodiment consistent with the present invention in detail, it is to be understood that the invention is not limited in its application to the details of construction and to the arrangements of components set forth above and below, illustrated in the drawings, or as described in the examples. Methods, systems and apparatuses consistent with the present invention are capable of other embodiments and of being practiced and carried out in various ways. Also, it is to be understood that the phraseology and terminology employed herein, as well as the abstract included below, are for the purposes of description and should not be regarded as limiting.</p>
<p id="p-0065" num="0064">As indicated above, one of the most novel features of the IC architecture of the present invention is its resiliency, providing adaptation for manufacturing defects, flaws which may arise during usage of the IC, and adaptability for new features, services, algorithms, and other events. The resiliency and robustness of the inventive IC architecture allows for increasing yields from IC fabrication, as the inventive ICs fabricated with various defects will nonetheless be quite useable and fully functional.</p>
<p id="p-0066" num="0065">In addition, during operation, this resiliency may be described as &#x201c;neural&#x201d; or biological self-healing, because in the event a portion of the IC is damaged or otherwise becomes unusable, another portion of the IC is effectively &#x201c;recruited&#x201d; or reassigned to take over and perform the functions of the damaged portion. In addition, as discussed in greater detail below, as the functions are reassigned, new control and data pathways are also created, so that the transferred operations continue to perform seamlessly with other IC operations. Such adaptive resilience and self-healing may occur in real-time or near real-time, depending upon the selected embodiment. This allows the IC to continue to operate without disruption provided that sufficient computing resources remain operational. Such resiliency provides for a graceful degradation of performance in the event of damage to the IC, rather than a catastrophic failure, and is especially significant in health and safety applications.</p>
<p id="p-0067" num="0066">As discussed in greater detail below, several features of the exemplary embodiments of the present invention enable such resiliency, continued operation and eventual graceful degradation. First, the IC or other device is comprised of a plurality of &#x201c;composite&#x201d; circuit elements (which comprise various types of computational elements, a uniform I/O interface, and a uniform control structure); these composite circuit elements are effectively interchangeable or fungible, such that in the event of a loss of functionality of an element, its functions can be taken over by another composite circuit element (either identical or similar), when available. Second, the plurality of computational elements is selected to enable the performance of virtually any functionality, that is, they are computationally complete. Third, control functionality is distributed among a plurality of circuit &#x201c;cluster&#x201d; controllers, referred to herein as &#x201c;state machine elements&#x201d; or &#x201c;finite state machine elements&#x201d;, such that control functionality may be transferred between and among these distributed controllers, as needed. Fourth, the composite circuit elements and/or their interconnections are configurable, to aid in the transfer of functionality and any corresponding routing of data and control paths. Fifth, all selected operations are assigned and bound within the device at the initial run-time, and may be re-assigned and re-bound subsequently as may be needed to transfer corresponding functionality to other composite circuit elements and continue operations.</p>
<p id="p-0068" num="0067"><figref idref="DRAWINGS">FIG. 1</figref> is a diagram illustrating, at a high or conceptual level, such resiliency of an exemplary apparatus <b>100</b> embodiment in accordance with the teachings of the present invention. As illustrated in <figref idref="DRAWINGS">FIG. 1</figref>, various parts of the apparatus <b>100</b>, embodied as an IC, such as various matrices <b>150</b> illustrated and discussed with reference to <figref idref="DRAWINGS">FIGS. 2-3</figref>, are utilized to perform concurrently a plurality of functions, such as those which may be associated with a typical automobile, other vehicle, or computerized or complex system. During time period &#x201c;&#x3b1;&#x201d;, an IC portion <b>102</b> is providing anti-lock braking (ABS) functionality, an IC portion <b>104</b> is providing traction control functionality, an IC portion <b>106</b> is providing video or other multimedia functionality, and an IC portion <b>108</b> is providing navigation functionality, such as through a satellite or radio link.</p>
<p id="p-0069" num="0068">During time period &#x201c;&#x3b2;&#x201d;, a region <b>110</b> (marked with &#x201c;X's&#x201d;) of IC portion <b>102</b> has become unusable, such as due to physical wear or other damage to the IC. Such damage may be determined through self-testing or through other means discussed in greater detail below. As ABS is a high priority function, the functionality performed within region <b>110</b> is then reassigned (or bound) to region <b>112</b>, which previously had been performing video functionality, which has a lower priority for operation in a vehicle environment. As discussed in greater detail below, as part of this reassignment process, new data and control pathways will also be created, so that the newly assigned regions continue to communicate properly with other regions of the IC, transparently, as if the reassignment never occurred. Depending upon the nature and scope of the new functionality assigned to this region, IC portion <b>106</b> may or may not continue to perform its video functionality, or may perform this functionality with lower bandwidth or speed. In either case, in spite of damage to the IC <b>100</b>, the higher priority ABS functions continue to be operational, and no catastrophic failure has occurred.</p>
<p id="p-0070" num="0069">Subsequently, during time period &#x201c;&#x3b3;&#x201d;, regions <b>114</b> and <b>116</b> (marked with &#x201c;X's&#x201d;) of IC portion <b>108</b> have become unusable, and their functions are reassigned to regions <b>118</b> and <b>120</b>, respectively. In this case, as traction control (of region <b>104</b>) generally could have a higher priority than the operation of the navigational system, it is likely that region <b>118</b> was available and not being completely used by the traction control functions (e.g., one or more composite circuit elements and/or contexts were available, as discussed below). As more of the IC has degraded, however, a signal or other indication may be provided to the user, such as to have the vehicle serviced in the near future for IC replacement, for example. In addition, as mentioned above and as discussed in greater detail below, depending upon the availability of target destinations for the functionality to be reassigned and depending upon how the functionality is reassigned, the reassigned functions may no longer perform optimally (e.g., they may be slower or have less bandwidth), but still perform. Again, such decline in performance is gradual and not catastrophic, with the capability for ample warnings to be provided.</p>
<p id="p-0071" num="0070">Subsequently, during time period &#x201c;&#x3b4;&#x201d;, regions <b>122</b>, <b>124</b>, <b>126</b> and <b>128</b> (marked with &#x201c;X's&#x201d;) of IC portion <b>104</b> have become unusable, and their functions are reassigned to regions <b>132</b>, <b>138</b>, <b>134</b> and <b>136</b>, respectively. In this case, as traction control (of region <b>104</b>) generally would have a higher priority than the operation of the video system of IC portion <b>106</b>, those higher priority functions are reassigned to the unaffected areas of the IC. In this instance, it is plausible that the video functionality could cease entirely, as the remaining usable portions of the IC are performing these higher priority functions, such as braking and traction control. As more of the IC has degraded, however, a warning, signal or other indication also may be provided to the user, such as to have the vehicle serviced immediately for IC replacement, for example. Again, such decline in performance is gradual and not catastrophic, with the capability for high priority functions to continue to operate, despite significant failures within many portions of the IC that would cause a prior art IC to fail completely, suddenly, and potentially catastrophically.</p>
<p id="p-0072" num="0071">The biological parallels in the operation of the apparatus <b>100</b> are striking. As in a biological system which can heal itself, such as a neurological system, in the event of a damage such as a stroke with loss of neurons and corresponding neurological function, other existing neurons are recruited, with new connections (synapses) created, to take over and restore the functionality previously performed by the damaged neurons. In the case of the apparatus <b>100</b>, in the event of damage to one or more parts of the IC, other existing portions of the IC (circuit clusters and composite circuit elements (discussed below)) are recruited, with new connections created, to take over and restore the functionality previously performed by the damaged regions of the IC. As a consequence, as in a biological system, the apparatus <b>100</b> is self-healing, enabling ongoing functionality despite IC damage.</p>
<p id="p-0073" num="0072">A. Apparatus Architecture</p>
<p id="p-0074" num="0073"><figref idref="DRAWINGS">FIGS. 2-3</figref> are block diagrams illustrating, in increasing levels of detail, exemplary first and second apparatuses <b>100</b>, <b>140</b> in accordance with the teachings of the present invention, typically embodied as an IC or portion of an IC. As illustrated, the apparatus <b>100</b>, <b>140</b> is highly distributed and computationally &#x201c;flat&#x201d;, with all computation performed by the plurality of composite circuit elements <b>260</b>. An &#x201c;action&#x201d; is the type of function or activity to be performed by a composite circuit element <b>260</b> (through its incorporated computational or other type of circuit element <b>270</b>), such as multiplication or bit manipulation. As illustrated, there are various types of composite circuit elements <b>260</b>, illustrated as different types of composite circuit elements (equivalently referred to and abbreviated as &#x201c;composite elements&#x201d; (&#x201c;CE&#x201d;)) CE<sub>A</sub>, CE<sub>B</sub>, CE<sub>C</sub>, CE<sub>D</sub>, CE<sub>E</sub>, and CE<sub>M</sub>, which perform different actions and which may be configurable or non-configurable (illustrated and discussed with reference to <figref idref="DRAWINGS">FIGS. 5-8</figref>). The plurality of composite circuit elements <b>260</b>, with other circuit structures discussed below, as a first grouping, are grouped into a corresponding plurality of circuit &#x201c;clusters&#x201d; <b>200</b>. The various groupings may also be considered arrays of a plurality of composite circuit elements <b>260</b>, at corresponding levels.</p>
<p id="p-0075" num="0074">The apparatus <b>100</b>, <b>140</b> may then be logically divided into or comprised of a plurality of levels, with this lower level referred to as a &#x201c;cluster&#x201d; level (or a first array), with the plurality of circuit clusters <b>200</b> then grouped through various (second) communication elements <b>210</b> and a second channel (or bus structure) <b>220</b> into an intermediate level (or a second array), as a second grouping, referred to as a cluster-grouping or &#x201c;supercluster&#x201d; level (a plurality of superclusters <b>185</b>), which in turn are further grouped through various (third) communication elements <b>190</b> and third channel (or bus structure) <b>195</b> into a higher level, as a third grouping, referred to as a &#x201c;matrix&#x201d; level (a plurality of matrices <b>150</b>) or unit level (or a third array), which are further grouped through a fourth channel (or bus structure) <b>160</b> into the apparatus <b>100</b>, <b>140</b> or device level, as a fourth grouping or array.</p>
<p id="p-0076" num="0075">The various communication channels (e.g., busses or bus structures) <b>160</b>, <b>195</b>, <b>220</b> and communication elements <b>190</b>, <b>210</b>, <b>250</b> collectively may be referred to and defined as interconnect <b>155</b> of the present invention, allowing communication of data and control information between and among any of the various clusters <b>200</b> and other IC components.</p>
<p id="p-0077" num="0076">Each of the apparatuses <b>100</b>, <b>140</b> typically is embodied as an integrated circuit, and may be a separate IC or part of a larger system-on-a-chip (&#x201c;SOC&#x201d;) or part of a network of ICs, such as coupled to other ICs on a circuit board, wiring network, network mesh, and so on. The two apparatus embodiments <b>100</b>, <b>140</b> differ only in the location (and/or type) of the components within the various clusters <b>200</b> utilized to provide input and output (&#x201c;I/O&#x201d;) to other, external or non-integrated ICs or other devices, such as external memory (e.g., DDR-2) or external communication channels or busses (e.g., PCI or PCI-express (PCI-e)). For apparatus <b>140</b>, such external I/O has been concentrated within a selected matrix <b>150</b>, while for apparatus <b>100</b>, such external I/O has been distributed among a plurality of matrices <b>150</b>. In all other respects, the apparatuses <b>100</b>, <b>140</b> are identical. As a consequence, any reference to apparatus <b>100</b> will be understood to mean and include the second embodiment illustrated as apparatus <b>140</b>, and apparatus <b>140</b> otherwise will not be further discussed as a separate embodiment. Also, while <figref idref="DRAWINGS">FIGS. 2 and 3</figref> illustrate two matrices <b>150</b>, it should be understood that the apparatus <b>100</b>, <b>140</b> may include one or more matrices <b>150</b>, and that exemplary embodiments may include any number of matrices <b>150</b>, depending upon selected applications and various design parameters, such as IC area and power requirements.</p>
<p id="p-0078" num="0077">Referring to <figref idref="DRAWINGS">FIGS. 2-3</figref>, as indicated above, the apparatus <b>100</b> is logically divided into or comprised of a plurality of matrices <b>150</b>. Each matrix <b>150</b> is coupled through a corresponding plurality of third communication elements <b>190</b> and a fourth communication channel (or bus structure) <b>160</b>, and each has at least two input and two output data and control paths, separately illustrated as input and output (&#x201c;I/O&#x201d;) <b>170</b> and I/O <b>180</b> (of fourth channel (or bus structure) <b>160</b>). Depending upon the selected embodiment, the fourth channel (or bus structure) <b>160</b> (with I/O <b>170</b> and <b>180</b>) may have combined control and data I/O paths (as illustrated), with data, configuration and control information utilizing the same bus structures, or such data, configuration and control may be separated onto different bus or interconnect structures (not separately illustrated). In an exemplary embodiment, at this matrix <b>150</b> level, such a plurality of third communication elements <b>190</b> are implemented through exemplary communication circuitry such as packet routing or waypoint circuitry. In the event of a failure of a third communication element <b>190</b> and/or one of the I/O <b>170</b>, <b>180</b>, or any portions thereof, another third communication element <b>190</b> and the remaining I/O <b>170</b>, <b>180</b> are available to provide identical functionality, albeit potentially with a reduction in available communication bandwidth. In an exemplary embodiment, the third communication elements <b>190</b> are implemented as a single, combined circuit element having four independent up link channels and four independent down link channels (with corresponding bus structures); alternatively, the various channels may also be implemented to provide full duplex communication.</p>
<p id="p-0079" num="0078">This use of a plurality of (at least two) communication elements and corresponding I/O portions of the bus structures (having combined control and data I/O paths), in exemplary embodiments, is repeated at each of the various logical, hierarchical levels, providing corresponding resiliency in the event of a failure of any of the various communication elements or I/O paths. For selected embodiments requiring less resiliency or subject to other constraints, however, such one or more additional sets of communication elements and corresponding I/O are optional and may be omitted.</p>
<p id="p-0080" num="0079">Each matrix <b>150</b>, in turn, is logically divided into various hierarchical levels or subgroups, also with circuitry for communication between and among the various levels, such as the plurality of third communication elements <b>190</b> adapted to perform packet-based routing, self-routing, tunneling, or other types of data, configuration and control communication. More specifically, a matrix <b>150</b> is logically divided into a plurality of superclusters <b>185</b>, which are coupled to each other through the plurality of third communication elements <b>190</b> and third channel (or bus structure) <b>195</b>, and which further are coupled to superclusters <b>185</b> of other matrices <b>150</b> via fourth channel (or bus structure) <b>160</b> and other corresponding third communication elements <b>190</b>.</p>
<p id="p-0081" num="0080">The superclusters <b>185</b>, in turn, are logically divided into a corresponding plurality of circuit clusters <b>200</b> (abbreviated and referred to herein simply as &#x201c;clusters&#x201d; or a &#x201c;cluster&#x201d;), which in turn are comprised of a plurality of circuitry elements referred to as composite circuit elements <b>260</b> (or, equivalently referred to and abbreviated as &#x201c;composite elements&#x201d; (&#x201c;CE&#x201d;) <b>260</b>) and other components (including first communication elements <b>250</b> and state machine elements <b>290</b>) discussed below. The communication between and among these various clusters <b>200</b> is provided through a plurality of second communication elements <b>210</b> (which also may provide packet-based routing, self-routing, tunneling, or other types of data, configuration and control communication) and a second channel (or bus structure) <b>220</b>. The various clusters <b>200</b> within a supercluster <b>185</b> are then further coupled to other clusters <b>200</b> of other superclusters <b>185</b> of the same or other matrices <b>150</b> via second channel (or bus structure) <b>220</b>, second communication elements <b>210</b>, third channel (or bus structure) <b>195</b>, and third communication elements <b>190</b>, and then to other matrices via fourth channel (or bus structure) <b>160</b>. In addition, as an optional variation, &#x201c;fast path&#x201d; connections may be provided between adjacent clusters, illustrated as connections <b>215</b> in <figref idref="DRAWINGS">FIG. 2</figref>, and discussed in greater detail below.</p>
<p id="p-0082" num="0081">The various second and third communication elements <b>210</b>, <b>190</b> and levels of communication channels (bus structures) <b>160</b>, <b>195</b>, <b>220</b> collectively form an interconnect structure <b>155</b> of the present invention. As indicated above, the second and third communication elements <b>210</b>, <b>190</b> may be implemented as known or as becomes known in the art for transfer, routing or switching of data, configuration and control to and from addressable clusters <b>200</b>. The second and third communication elements <b>210</b>, <b>190</b> may be implemented as routing elements, self-routing elements, waypoints, circuit-switched, hybrid routing and circuit-switched elements, other switch-based communication elements, or other types of communication elements, and are considered equivalent. The various communication channels (bus structures) <b>160</b>, <b>195</b>, <b>220</b> may be implemented utilizing any conductive paths which may be available in IC fabrication and processing.</p>
<p id="p-0083" num="0082">In exemplary embodiments, this interconnect <b>155</b> (communication channels (bus structures) <b>160</b>, <b>195</b>, <b>220</b>) will generally be &#x201c;n&#x201d; bits wide, with the number &#x201c;n&#x201d; selected depending upon the objectives of the selected embodiment. For example, in an exemplary embodiment, &#x201c;n&#x201d; is 17 or more bits, providing for a 16 bit data word and one or more control or signaling bits. In addition to the interconnect <b>155</b> comprising one or more busses, wires, conductors, transmission media or connection structures as illustrated in <figref idref="DRAWINGS">FIGS. 2-3</figref>, the interconnect <b>155</b> also includes a plurality of communication elements (<b>190</b>, <b>210</b>) which accommodate the n-bit width and which provide routing or other transmission for data words (or packets), configuration words (or packets), and/or control words (or packets), between and among matrices <b>150</b>, superclusters <b>185</b>, and clusters <b>200</b>. In exemplary embodiments, these communication elements (<b>190</b>, <b>210</b>) may also provide arbitration or other routing conflict resolution, depending upon the degree of interconnectivity to be provided.</p>
<p id="p-0084" num="0083">Within the cluster <b>200</b> level, the first communication elements <b>250</b> provide cluster I/O, providing intra-cluster circuit-based (or circuit-switched) connection capability in addition to inter-cluster data, configuration and control routing, creating direct communication links or connections to and from components within a cluster <b>200</b> and data, configuration and control routing from and to components of other clusters <b>200</b>. In exemplary embodiments, a message manager <b>265</b> within a cluster <b>200</b> is also utilized to provide inter-cluster communication of configuration and control and external input and output communication of any type of data, configuration and control.</p>
<p id="p-0085" num="0084">It should be noted that the selection of the number of levels within the apparatus <b>100</b> may be varied in any given embodiment, as a balancing of the amount of physical interconnect to be utilized in comparison with routing complexity, for a given number of computational elements. In the exemplary embodiment, for the same number of composite circuit elements <b>260</b>, the use of four levels (matrix, supercluster, cluster, and composite circuit element levels) in comparison to three levels (with more components per level), for example, enables a substantial reduction in the amount of busses and wires of interconnect, resulting in a savings of area and capacitance, at the expense of additional routing complexity.</p>
<p id="p-0086" num="0085">Continuing to refer to <figref idref="DRAWINGS">FIGS. 2 and 3</figref>, as an option or alternative, depending upon the selected embodiment, one or more additional controllers <b>175</b> may be utilized, at any of the various matrix <b>150</b>, supercluster <b>185</b> or cluster <b>200</b> levels. For example, exemplary embodiments of run-time binding (discussed below with reference to <figref idref="DRAWINGS">FIG. 14</figref>) may utilize such additional controllers <b>175</b>, may instead utilize one or more state machine elements <b>290</b> (discussed below) as one or more controllers, or both. In addition, the apparatus <b>100</b> (or <b>140</b>) may also include other components, such as any other circuits or other devices which may be integrated or coupled with the apparatus, such as radio-frequency or cellular communication circuitry, memory circuitry, processors, microprocessors, etc., with all such variations considered within the scope of the present invention.</p>
<p id="p-0087" num="0086">As an introduction to the operation of the apparatus <b>100</b>, data computations and manipulations are performed within the plurality of clusters <b>200</b>, through composite circuit elements <b>260</b>. These circuit elements <b>260</b> are referred to as &#x201c;composite&#x201d; circuit elements <b>260</b> because in the exemplary embodiments, they are comprised of a first, constant or fixed portion, and a second, variable portion, which may be configurable or non-configurable (depending upon the type of composite circuit element <b>260</b>). More particularly, each composite circuit element <b>260</b> is comprised of: (1) a uniform or constant element interface and control <b>280</b>, which is the same for every composite circuit element <b>260</b>; and (2) a selected type of &#x201c;computational&#x201d; or other circuit element <b>270</b> from a plurality of types of computational elements <b>270</b> (configurable or non-configurable), which are illustrated and discussed in greater detail with reference to <figref idref="DRAWINGS">FIGS. 5-8</figref>.</p>
<p id="p-0088" num="0087">The computational circuit element <b>270</b> (also referred to more simply as an element <b>270</b> or circuit element <b>270</b>) within composite circuit elements <b>260</b> vary by type and configurability; the computational elements <b>270</b> are referred to as &#x201c;computational&#x201d; for ease of reference only, as the various types of circuit elements <b>270</b> may have functionality which is not computational in any strict sense, such as memory functions, finite state machine functions, communication functions, etc. For example, some circuit elements <b>270</b> may be static or configurable computational elements of a plurality of types, static or configurable memory elements of a plurality of types, static or configurable communication elements or interfaces of a plurality of types, static or configurable state machine elements, and so on, resulting in a plurality of types of composite circuit elements <b>260</b>, such as configurable composite circuit elements <b>260</b>, configurable or nonconfigurable memory composite circuit elements <b>260</b><sub>M</sub>, or configurable or nonconfigurable composite I/O or other communication circuit elements <b>260</b> (which may provide I/O interfaces for external communication, for example). Accordingly, any reference herein to a composite circuit element <b>260</b> will be understood to mean and include any of the various types, special cases or specific instances or instantiations of composite circuit elements <b>260</b>, such as configurable composite circuit elements <b>260</b>, state machine elements <b>290</b>, first communication elements <b>250</b>, and composite memory elements <b>260</b><sub>M</sub>, unless the context requires or indicates otherwise.</p>
<p id="p-0089" num="0088">Also for example, the first communication elements <b>250</b> (cluster I/O) may be implemented as a type of composite circuit element <b>260</b>, having an element interface and control <b>280</b> presented to other composite circuit elements <b>260</b>, and having a computational element <b>270</b> designed for communication functionality, and which may or may not be configurable. In addition, as discussed below, additional circuitry typically embodied as a state machine and referred to as a &#x201c;message manager&#x201d; circuit <b>265</b> is provided within various or selected clusters <b>200</b> to perform external communication functions, such as providing communication interfaces to external memory, busses and communication systems, e.g., providing interfaces which comply with various communication and other data transfer standards, and may also include interfaces for communication with other portions of an IC when the apparatus <b>100</b> is embodied as part of an SOC. For example, depending upon the selected embodiment, a message manager <b>265</b> (as dedicated hardware) or a composite circuit element <b>260</b> (having a computational element <b>270</b> adapted for a communication function) may be utilized for such external communication, such as providing an Ethernet interface, a PCI interface, a PCI Express interface, a USB or USB2 interface, a DDR SDRAM interface or other type of memory interface, a wireless interface, an interface to another IC, and so on. In exemplary embodiments, the message manager may also be utilized for communication within the apparatus <b>100</b>, such as communication between clusters <b>200</b> and communication between state machine elements <b>290</b>, as discussed in greater detail below, such as for configuration and control messaging.</p>
<p id="p-0090" num="0089">In another exemplary embodiment, the message manager circuit <b>265</b> is also configured or adapted to manage the memory-type composite circuit elements <b>260</b><sub>M </sub>distributed throughout the apparatus <b>100</b>. For example, the message manager circuit <b>265</b> is adapted to provide a uniform address space for the distributed plurality of memory composite circuit elements. Through this use of the message manager circuit <b>265</b>, the distributed plurality of memory-type composite circuit elements <b>260</b> appears to the other composite circuit elements <b>260</b> and may be managed as one large memory array.</p>
<p id="p-0091" num="0090">Each of the configurable computational elements <b>270</b> are comprised of combinational logic (i.e., a group of logic gates forming a functional unit, such as an adder, a multiplier, arithmetic logic unit (&#x201c;ALU&#x201d;) etc.) having input, output, and other internal connections which are adapted to be changeable or are otherwise capable of being modified. More specifically, each configurable computational element <b>270</b> is designed such that its logic gates or other functional units may be coupled or connected (or decoupled or disconnected), through switching circuits, elements or other switching structures such as switches, multiplexers, demultiplexers, pass transistors, crossbar switches, routing elements, or other transistor configurations, in any of a plurality of ways, to perform a corresponding plurality of functions. Each different way of connecting the various gates (or functional units) is a &#x201c;configuration&#x201d;, and a selected configuration may be represented as a plurality of bits which control the corresponding switches, multiplexers, demultiplexers, pass transistors, or other transistors or switching arrangements, creating the specific connections of the selected configuration. For example, adders, multipliers and registers may be coupled in any number of various ways to perform a wide variety of functions, from simple arithmetic to discrete cosine transformation. In other circumstances, a configuration may also indicate how input data is to be interpreted or used, such as signed or unsigned, a constant or a variable, consumable or non-consumable, etc. Other types of configurations and ways of configuring are known in the electronic arts, are considered equivalent and within the scope of the present invention.</p>
<p id="p-0092" num="0091">Each of the available or selected configurations for a configurable computational element <b>270</b> is stored locally within a memory of the element interface and control <b>280</b> of the composite circuit element <b>260</b>. As discussed in greater detail below, each of these configurations, in conjunction with other information such as selected inputs, output destinations and control information is defined as or comprises a corresponding &#x201c;context&#x201d;. For example, the same configuration of elements may have multiple contexts, with each context using different inputs and providing outputs to different locations, or utilizing different constants. Also for example, different configurations will also provide different contexts, even if the different configurations will utilize the same inputs and provide outputs to the same destinations. The operations and control of composite circuit elements <b>260</b> is discussed in greater detail below with reference to <figref idref="DRAWINGS">FIGS. 5-8</figref> and <b>16</b>, following the discussion of the internal and external communication and addressing utilized in exemplary embodiments of the invention.</p>
<p id="p-0093" num="0092">In exemplary embodiments, the various connections between composite circuit elements <b>260</b> within a cluster <b>200</b>, and routing or tunneling from one cluster to another (via communication elements <b>250</b>, <b>210</b>, or <b>190</b>), are established at run-time by the operating system of the apparatus <b>100</b>, for implementation of a selected program, algorithm or function. In addition, such connections may change over time, and depending upon the selected embodiment, generally will change over time as may be needed, as briefly discussed above with reference to <figref idref="DRAWINGS">FIG. 1</figref> and as discussed in greater detail below, for creation of new functionality, changing contexts and configurations, changing functionality, or resilient self-healing. In alternative embodiments within the scope of the invention, such as for applications which may not be subject to requirements for resiliency, the various connections also may be established prior to run-time and maintained in a memory within the apparatus <b>100</b>, with the potential for subsequent modification as may be necessary or desirable.</p>
<p id="p-0094" num="0093">Referring to <figref idref="DRAWINGS">FIGS. 2 and 3</figref>, a matrix <b>150</b> is logically divided into or comprises a plurality of superclusters <b>185</b> and one or more third communication elements <b>190</b>. The third communication elements <b>190</b> are communication circuitry (e.g., routers, waypoints, gateways, switches, or tunneling devices) which provide packet routing, switching, hybrid routing and switching, or tunneling of data and control into and out of a matrix <b>150</b>, for communication of data, configuration and control information, and may be considered to form part of interconnect <b>155</b>. The third communication elements <b>190</b> may also be considered waypoints or gateways, and are one of several communication structures utilized in accordance with the present invention. In a first selected embodiment utilizing at least two or more third communication elements <b>190</b>, each third communication element <b>190</b> is coupled to each supercluster <b>185</b> of a selected matrix <b>150</b> and to other third communication elements <b>190</b> (via bus structure <b>160</b>), such that communication to and from each supercluster <b>185</b> may occur through either third communication element <b>190</b>. As a result, in the event of a failure of any one of the third communication elements <b>190</b>, another third communication element <b>190</b> is available to each supercluster <b>185</b> of a selected matrix <b>150</b> to provide identical communication functionality. While illustrated as separate third communication elements <b>190</b>, it will be understood that these independent circuits may be combined into one or more larger circuit structures providing the same independent communication function. For example, in a selected embodiment, a single third communication element <b>190</b> is utilized, similarly connected to each supercluster <b>185</b> and to other third communication elements <b>190</b>, with each third communication element <b>190</b> providing multiple and independent communication pathways (e.g., 4 down links and 4 up links), such that additional links are available in the event of failure of one or more links. Again, in the event of such a failure, significant functionality is preserved, with graceful degradation and not catastrophic failure.</p>
<p id="p-0095" num="0094">Each supercluster <b>185</b> is further logically divided into or comprises a plurality of clusters <b>200</b> and one or more second communication elements <b>210</b>. The second communication elements <b>210</b> are also communication circuitry which provide packet routing, tunneling, switching or other transfer of data and control into and out of a supercluster <b>185</b>, for communication of data, configuration and control information, and also may be considered to form part of interconnect <b>155</b>. The second communication elements <b>210</b> also may also be considered waypoints or gateways, and are one of several communication structures utilized in accordance with the present invention. In a first selected embodiment utilizing at least two second communication elements <b>210</b>, each second communication element <b>210</b> is coupled to each cluster <b>200</b> of a selected supercluster <b>185</b>, such that communication to and from each cluster <b>200</b> may occur through either second communication element <b>210</b>. Also as a result, in the event of a failure of a second communication element <b>210</b>, another second communication element <b>210</b> is available to each cluster <b>200</b> of a selected supercluster <b>185</b> to provide identical communication functionality. In a selected embodiment, these independent circuits may be combined into one or more larger circuit structures providing the same independent communication function. Also for example, a single, combined second communication element <b>210</b> is utilized, similarly connected to each cluster <b>200</b> and to one or more third communication elements <b>190</b>. In this embodiment, each second communication element <b>210</b> provides multiple and independent communication pathways (e.g., 4 down links and 4 up links), such that additional links are available in the event of failure of one or more links. Again, in the event of such a failure, significant functionality is preserved, with graceful degradation and not catastrophic failure.</p>
<p id="p-0096" num="0095">As a consequence, moving from a matrix <b>150</b> level to a supercluster <b>185</b> level and to a cluster <b>200</b> level, the interconnect <b>155</b> provides packet routing, self-routing, tunneling, switching or other transfer of data, configuration and control information through a plurality of communication elements <b>190</b> and <b>210</b> and communication channels (bus structures) <b>160</b>, <b>195</b>, <b>220</b>. In addition, as discussed below, within a cluster <b>200</b>, the interconnect <b>155</b> also provides circuit-switched (or circuit-based) communication, through first communication elements <b>250</b>. Indeed, one of the novel features of the architecture of the present invention is the use of an interconnect structure <b>155</b> providing both packet-based and circuit-switched communication.</p>
<p id="p-0097" num="0096">Continuing to refer to <figref idref="DRAWINGS">FIGS. 2 and 3</figref>, the exemplary interconnect <b>155</b> comprises: (1) a plurality of routing (tunneling, waypoint or gateway) elements, namely, a plurality of third communication elements <b>190</b>, a plurality of second communication elements <b>210</b>, and a plurality of first communication elements <b>250</b>; (2) a plurality of circuit switching elements, namely, the plurality of first communication elements <b>250</b>; and (3) their corresponding busses, wires or other forms of physical connections or date transmission media (e.g., illustrated, for example, as busses or wires <b>160</b>, <b>195</b> and <b>220</b> which, as discussed above, are &#x201c;n&#x201d; bits wide). Within a matrix <b>150</b>, one or more third communication elements <b>190</b> provide packet routing, self-routing, tunneling, switching or other transfer of data, configuration and control information, to and from other matrices <b>150</b> (via first bus <b>160</b> and I/O <b>170</b>, <b>180</b>), and to and from a plurality of superclusters <b>185</b>, via one or more second communication elements <b>210</b> within each such supercluster <b>185</b>. In turn, one or more second communication elements <b>210</b> within such a supercluster <b>185</b> provides packet routing, self-routing, tunneling, switching or other transfer of data, configuration and control information, to and from the third communication elements <b>190</b>, and to and from a plurality of clusters <b>200</b> within the supercluster <b>185</b>, via one or more first communication elements <b>250</b> within each such cluster <b>200</b>.</p>
<p id="p-0098" num="0097">In turn, the one or more first communication elements <b>250</b> within a cluster <b>200</b> provides packet routing, self-routing, tunneling, switching or other transfer of data, configuration and control information to and from the cluster <b>200</b>, via the second communication elements <b>210</b>, such as to and from other clusters <b>200</b>, and provides circuit-switched communication for data and control within the cluster <b>200</b>, enabling communication between other clusters <b>200</b> and the composite circuit elements <b>260</b>, state machine element <b>290</b>, message manager <b>265</b>, memory elements <b>255</b> and/or other components within the cluster <b>200</b>. For example, data produced from a composite circuit element <b>260</b> within a cluster <b>200</b> may be output through a direct or a circuit-switched connection to one of the plurality of first communication elements <b>250</b>, which then converts the data to packet form and routes the data packet to the second communication element <b>210</b>, for transmission to another cluster <b>200</b>, another supercluster <b>185</b>, or another matrix <b>150</b>. Similarly, when a data packet arrives via a second communication element <b>210</b>, which may be from another cluster <b>200</b>, another supercluster <b>185</b>, or another matrix <b>150</b>, the first communication element <b>250</b> extracts the data and transfers the one or more data words to the corresponding composite circuit element <b>260</b>, state machine element <b>290</b>, memory elements <b>255</b> or other components within the cluster <b>200</b>.</p>
<p id="p-0099" num="0098">These various communication elements (third communication elements <b>190</b>, second communication elements <b>210</b>, first communication elements <b>250</b>, the full interconnect element <b>275</b> and the distributed full interconnect element <b>295</b> discussed below) may be designed to have any selected capacity, such as full interconnectivity to more limited interconnectivity. For example, instead of the full interconnect element <b>275</b> or the distributed full interconnect element <b>295</b> providing for any output of a composite circuit element <b>260</b> to be coupled concurrently to any input of a composite circuit element <b>260</b> in the exemplary embodiments (with the exception of conflicts or contentions for the same inputs or outputs), more limited or partial interconnections within the cluster <b>200</b> may be provided, such as by using a partial interconnect element or a distributed partial interconnect element (not separately illustrated). Also for example, in exemplary embodiments, the first communication elements <b>250</b> may provide 2 or more concurrent connections or routing, such as two up links to and two down links from second communication elements <b>210</b>, in addition to one or more concurrent connections to and from the composite circuit elements <b>260</b> and other components of a cluster <b>200</b>. More connectivity may also be provided in any given embodiment, as a trade-off of potential collisions with IC area. In addition, where less than full interconnectivity is provided, the various communication elements (third communication elements <b>190</b>, second communication elements <b>210</b>, and first communication elements <b>250</b>) may also provide an arbitration functionality, which may be based on priority, round robin, sequential, etc., selecting a connection or routing for data transfer at any given time.</p>
<p id="p-0100" num="0099">While illustrated having cluster <b>200</b>, supercluster <b>185</b>, matrix <b>150</b> and apparatus <b>100</b> levels, it will be understood by those of skill in the art that the number of levels may be extended or decreased in any selected embodiment. For example, a plurality of fourth communication elements (not illustrated), with the other interconnect <b>155</b>, may be utilized to create another level of hierarchy within the apparatus <b>100</b>, and so on, creating any selected number of levels within the hierarchy of the apparatus <b>100</b>.</p>
<p id="p-0101" num="0100"><figref idref="DRAWINGS">FIG. 4</figref> is a diagram illustrating an exemplary data transmission sequence in accordance with the teachings of the present invention. In the exemplary embodiments, data and/or control packets are routed over the interconnect <b>155</b> by the various routing elements (third communication elements <b>190</b>, second communication elements <b>210</b>, and first communication elements <b>250</b>) as a &#x201c;train&#x201d; or tunneling of data words, thereby reducing addressing overhead which would otherwise be associated with routing of individually addressed data words. More specifically, referring to <figref idref="DRAWINGS">FIG. 4</figref>, a data transmission sequence <b>300</b> is comprised of a plurality of words (fields or data structures) <b>305</b> and <b>310</b>, and is &#x201c;n&#x201d; bits wide. Each such word <b>305</b> or <b>310</b> is transmitted sequentially, one after the other. The first word or field <b>305</b> comprises the address header with a data start indicator. The address header may comprise a destination address, or may comprise both a destination address and a source address (which may require more than one word). Such an address, in the exemplary embodiments, has the form of [matrix number, supercluster number, cluster number], with the number of bits utilized to designate the address dependent upon the number of matrices <b>150</b>, superclusters <b>185</b> and clusters <b>200</b> implemented in the selected embodiment.</p>
<p id="p-0102" num="0101">For example, when eight or fewer matrices <b>150</b> are implemented, and with each matrix <b>150</b> containing eight or fewer superclusters <b>185</b>, and with each supercluster <b>185</b> containing eight or fewer clusters <b>200</b>, 9 bits are sufficient to provide addressing as [MMM,SSS,CCC]. The data start indicator within the first word or field <b>305</b>, which may comprise a first flag having a predetermined value (e.g., flag being set, or other first predetermined or predesignated bit being a selected value), indicates that the current word <b>305</b> is an address header and that all subsequent packets are data words to be routed to the same addressed destination. As a consequence, all of the &#x201c;m&#x201d; words or fields <b>310</b> of data following the first field <b>305</b> are designated and transmitted as data words, namely, data words <b>310</b><sub>0</sub>, <b>310</b><sub>1</sub>, <b>310</b><sub>2 </sub>through <b>310</b><sub>(m-1)</sub>, which are automatically routed to the same addressed destination, without any need for separate or additional headers or addresses for each data word. Additional flags or bits may also be utilized for other purposes, such as to designate that the subsequent data words are placeholder values, for use in synchronization, particularly for branching operations. The last data word, illustrated as word or field <b>310</b><sub>(m-1)</sub>, comprises both data and a data end indicator, to indicate that the current data word is the last data word being transferred, and may comprise a second flag having a predetermined value (or other second predesignated bit having a selected value).</p>
<p id="p-0103" num="0102">This tunneling of data is implemented in an exemplary embodiment as a combination or hybrid of both packet routing and circuit switching. More particularly, the various routing elements (third communication elements <b>190</b> and second communication elements <b>210</b>) provide for establishing one or more connections between and among clusters <b>200</b> using the address header of the first word or field <b>305</b>, and reserving and setting up a dedicated path from a source cluster <b>200</b> to a destination cluster <b>200</b>. The dedicated path may be formed by circuit-switching or other connections within, for example, a waypoint or gateway. The remaining data word (data words <b>310</b><sub>0</sub>, <b>310</b><sub>1</sub>, <b>310</b><sub>2 </sub>through <b>310</b><sub>(m-1)</sub>) arriving at the communication element (third communication elements <b>190</b>, second communication elements <b>210</b>), may be buffered and then transferred automatically as a packet on the switched or other dedicated path established within the communication element using the address header. The dedicated path is maintained until the complete packet has been transmitted, after which the various path elements are released for other communications. A plurality of paths may be used concurrently to support a broadcast mode. Also in the exemplary embodiment, a plurality of such data transmissions may occur concurrently between and among the same communication elements, such as by using the four uplinks and four downlinks previously mentioned for an exemplary embodiment, allowing transmission of multiple data streams concurrently. As a consequence, in the exemplary embodiments, the plurality of communication elements (including the first communication elements <b>250</b>) support any selected mode of communication, such as one-to-one input and output data links, one-to many (broadcast) data links, and many-to-one data links.</p>
<p id="p-0104" num="0103">In contrast, a first communication element <b>250</b> receives data words from the various components of the cluster <b>200</b>, typically sequentially (one data word per one or more clock cycles) via the full interconnect element <b>275</b>, provides an address header, and transmits the sequence to a second communication element <b>210</b> for transmission to another cluster <b>200</b>, generally transmitting the entire sequence as a packet burst. For data from other clusters <b>200</b>, the first communication element <b>250</b> receives and buffers the plurality of data words (<b>310</b><sub>0</sub>, <b>310</b><sub>1</sub>, <b>310</b><sub>2 </sub>through <b>310</b><sub>(m-1)</sub>), and sequentially provides them to the designated component of the cluster <b>200</b>, typically via the switching of the full interconnect element <b>275</b>. In exemplary embodiments, the source and/or destination addresses may be stored in any of a plurality of components, such as within any of the various routing elements (third communication elements <b>190</b>, second communication elements <b>210</b>, and first communication elements <b>250</b>), and established during the binding process (discussed below) for each context utilizing intercluster communication.</p>
<p id="p-0105" num="0104">More particularly, the one or more state machine elements (&#x201c;SMEs&#x201d;) <b>290</b> (or other controller(s) <b>175</b> or off-chip controller(s) or processor(s)) performing the binding process (the &#x201c;binder&#x201d;) assigns actions (i.e., functions or contexts) to the various composite circuit elements <b>260</b>, and establishes a &#x201c;virtual&#x201d; data linkage or routing between or among the composite circuit elements <b>260</b>, namely, assigning a data linkage between one or more composite circuit elements <b>260</b>, without necessarily specifying how that data linkage is to physically occur. The various communication elements (first communication element <b>250</b>, second communication elements <b>210</b>, third communication elements <b>190</b>, full interconnect element <b>275</b> and/or distributed full interconnect element <b>295</b>), either clock cycle-by-cycle or at any given time, then are adapted to determine the physical route for the corresponding data transfer, creating the physical data linkage. For example, via switching and/or routing, a first physical data path or link between or within communication elements may be established for one instance of a transfer of a data packet (e.g., a train of data words) between two clusters <b>200</b> (and subsequently released), with a different physical data path or link established for a subsequent instance of a transfer of a data packet between the two clusters <b>200</b>. Such physical data links may be stored and maintained, for example, within the various memories within the communication elements, such as stored as a routing table within the memories of the corresponding element interface and control <b>280</b> (discussed below), with any selected physical data link determined by the corresponding element controller <b>325</b> of the communication composite circuit element <b>260</b>. Similarly, at any instant in time or clock cycle, different physical data links may be established (and released) for data communication within the cluster <b>200</b>. In other exemplary embodiments, rather than establishing a virtual data link, the physical data linkages may also be established by the binder as part of the binding process.</p>
<p id="p-0106" num="0105"><figref idref="DRAWINGS">FIG. 5</figref> is a block diagram illustrating a first exemplary cluster <b>200</b> in accordance with the teachings of the present invention. <figref idref="DRAWINGS">FIG. 6</figref> is a block diagram illustrating a second exemplary cluster <b>200</b>A in accordance with the teachings of the present invention. In cluster <b>200</b>, a full interconnect element <b>275</b> (as a single or unitary circuit component) is utilized to provide complete interconnections between inputs and outputs of each of the composite circuit elements <b>260</b> and other cluster components as illustrated. For example, the full interconnect element <b>275</b> may be implemented as a crossbar switch. In cluster <b>200</b>A, a distributed full interconnect element <b>295</b> (as a distributed plurality of circuit components) is utilized to provide complete interconnections between inputs and outputs of each of the composite circuit elements <b>260</b> and other cluster components as illustrated. For example, the distributed full interconnect element <b>295</b> may be implemented as a plurality of multiplexers and/or demultiplexers, such as the multiplexer <b>335</b> illustrated in <figref idref="DRAWINGS">FIG. 8</figref> for a selected composite circuit element <b>260</b>. In all other respects, the clusters <b>200</b>, <b>200</b>A are identical. As a consequence, any reference to a cluster <b>200</b> will be understood to mean and include the second embodiment illustrated as cluster <b>200</b>A (and a third embodiment illustrated as cluster <b>200</b>B in <figref idref="DRAWINGS">FIG. 7</figref>), as one or more variations of a cluster <b>200</b>, and cluster <b>200</b>A (and cluster <b>200</b>B) otherwise will not be further discussed as a separate embodiment.</p>
<p id="p-0107" num="0106">As illustrated in <figref idref="DRAWINGS">FIGS. 5 and 6</figref>, the exemplary cluster <b>200</b> (<b>200</b>A) comprises a plurality of composite circuit elements <b>260</b> (or composite elements <b>260</b>); a plurality of communication elements, namely, one or more first communication elements <b>250</b> and a full interconnect element <b>275</b> or a distributed full interconnect element <b>295</b> (also referred to as a full communication element or full interconnect bus (&#x201c;FIBus&#x201d;)); a state machine element (SME) <b>290</b>; a message manager <b>265</b>; and various communication structures, such as busses or other types of communication media. It should be noted that a state machine element <b>290</b> and message manager <b>265</b> is not required in every cluster <b>200</b>; in various embodiments, depending upon the application to be run, selected clusters <b>200</b> may comprise predominantly composite circuit elements <b>260</b> (e.g., having digital signal processing (&#x201c;DSP&#x201d;) functions), with state machine and/or message management functionality provided by state machine elements <b>290</b> and message managers <b>265</b> of other clusters <b>200</b> (with corresponding communication via the first communication elements <b>250</b>). In other exemplary embodiments, rather than or in addition to including one or more state machine elements <b>290</b> within the clusters <b>200</b>, the corresponding functions may instead be implemented through the use of one or more external controllers <b>175</b> or other, off-chip controllers, state machines, or processors. In selected embodiments, the full interconnect element <b>275</b> may be implemented as a crossbar switch or pass-transistors (with or without arbitration capability), while the distributed full interconnect element <b>295</b> may be implemented as a plurality of switches, pass transistors, multiplexers and/or demultiplexers, for example.</p>
<p id="p-0108" num="0107">Also in selected embodiments, as various options or variations, an exemplary cluster <b>200</b> may also include additional memory, such as second memory element <b>255</b>, which may be a type of queue, such as a long queue, for example; may also include an intercluster queue <b>245</b>, such as a FIFO, buffer or other memory structure, for transfer of data, control and/or configuration information between adjacent clusters <b>200</b> without utilizing the various first communication elements <b>250</b> and second communication elements <b>210</b> (creating the &#x201c;fast path&#x201d; connections <b>215</b> illustrated in <figref idref="DRAWINGS">FIG. 2</figref>); and may also include a separate or additional communication structure for communication between the SME <b>290</b> and other components within the cluster <b>200</b>, illustrated as configuration/control bus <b>285</b>.</p>
<p id="p-0109" num="0108">Not separately illustrated in <figref idref="DRAWINGS">FIGS. 5 and 6</figref>, each element interface and control <b>280</b> also includes a memory, input queues, and an element controller (comprised of a plurality of conditional logic structures (gates)), discussed in greater detail with reference to <figref idref="DRAWINGS">FIG. 8</figref>. In addition, first communication elements <b>250</b> may also include a memory structure, to transfer incoming data to a selected composite circuit element <b>260</b>, and to address and route outgoing data from a selected composite circuit element <b>260</b>. While <figref idref="DRAWINGS">FIGS. 5 and 6</figref> illustrate a cluster <b>200</b> (<b>200</b>A) comprising six composite circuit elements <b>260</b>, two first communication elements <b>250</b>, one state machine element (&#x201c;SME&#x201d;) <b>290</b>, one message manager <b>265</b>, and one full interconnect element <b>275</b> or distributed full interconnect element <b>295</b>, with possible additional memory such as second memory element <b>255</b> and one or more various communication structures such as intercluster queue <b>245</b>, it will be understood by those of skill in the electronic arts that any amounts and combinations of these components may be utilized, and that any and all such amounts and combinations are considered equivalent and within the scope of the invention.</p>
<p id="p-0110" num="0109">Each composite circuit element <b>260</b> is comprised of a computational circuit element <b>270</b> and a uniform (constant or fixed) element interface and control <b>280</b>. While generally referred to as a &#x201c;computational&#x201d; circuit element <b>270</b>, it is to be understood that a circuit element <b>270</b> may perform functions other than computations, such as bit reordering, memory functions, control functions, state machine functions, communication functions, instruction processing, and all such non-computational or other functionality is considered within the scope of a circuit element <b>270</b> of the invention regardless of nomenclature.</p>
<p id="p-0111" num="0110">Within a cluster <b>200</b>, the composite circuit elements <b>260</b> have (computational) elements <b>270</b>, which may be of the same or different type, and may be included within the cluster <b>200</b> in any selected combination or mix, and may be static (nonconfigurable) or configurable. As illustrated in <figref idref="DRAWINGS">FIG. 5</figref>, the elements <b>270</b> are a configurable element (type &#x201c;A&#x201d;) <b>270</b><sub>A</sub>, two configurable elements (type &#x201c;B&#x201d;) <b>270</b><sub>B</sub>, a configurable element (type &#x201c;D&#x201d;) <b>270</b><sub>D</sub>, a configurable element (type &#x201c;E&#x201d;) <b>270</b><sub>E</sub>, and a configurable or non-configurable first memory circuit element <b>270</b><sub>M</sub>. A communication circuit element <b>270</b><sub>C </sub>is utilized in the first communication elements <b>250</b>, which is typically non-configurable but which could be implemented to be configurable. In addition, any selected elements <b>270</b> may also be implemented to be nonconfigurable, and all such variations are within the scope of the invention. The configurable computational elements <b>270</b> generally perform computation and/or bit manipulation and may be, for example, configurable arithmetic logic units (ALUs), configurable triple ALUs, configurable multiply and accumulate (MAC) units, configurable bit reordering elements (BREOs), configurable multipliers, configurable Galois multipliers, configurable barrel shifters, configurable look-up tables, configurable and programmable controllers, super or large ALUs (capable of a wide variety of arithmetic calculations, functions, comparisons and manipulations), and so on. The configurable computational elements <b>270</b> generally are comprised of combinatorial logic gates, but may also include conditional logic structures, as necessary or desirable, such as to evaluate the existence of a condition or event. Exemplary configurable elements <b>270</b> are illustrated in <figref idref="DRAWINGS">FIGS. 9 and 10</figref>.</p>
<p id="p-0112" num="0111">As mentioned above, elements <b>270</b> may also be implemented to provide communication functions, may be configurable or non-configurable, and may provide interfaces for internal communication, external communication, and memory access. In an exemplary embodiment, such external communication functions are provided through the message manager <b>265</b>, which provides a selected communication function of a plurality of communication functions, which typically differ between and among the various clusters. The plurality of communication functions may include, for example, providing an Ethernet interface, a PCI interface, a PCI Express interface, a USB or USB2 interface, a DDR SDRAM interface or other type of memory interface, a wireless interface, an interface to another IC, etc. Typically, the message manager <b>265</b> of a given cluster <b>200</b> provides one type of communication function, with the message managers <b>265</b> of other clusters <b>200</b> correspondingly providing other types of communication functions. For example, the message manager <b>265</b> of a first cluster <b>200</b> may provide a PCI Express interface, while the message manager <b>265</b> of a second cluster <b>200</b> may provide a DDR-2 interface, while the message manager <b>265</b> of a third cluster <b>200</b> may provide an Ethernet interface.</p>
<p id="p-0113" num="0112">In addition, the message manager <b>265</b> may also have a direct connection to the interconnect <b>155</b>, or more particularly, the second communication channel or bus <b>220</b>, for intercluster communication independently of the various first communication elements <b>250</b>, such as for communication of configuration and/or control information between or among the state machine elements <b>290</b> and other components. For example, during run-time binding, the various configurations and data routings may be transmitted to the state machine elements <b>290</b> as messages via the message manager <b>265</b>. As a consequence, the message manager <b>265</b> is illustrated as directly coupled to or part of the state machine element <b>290</b> (e.g., without intervening or separate bus or communication structures).</p>
<p id="p-0114" num="0113">The first memory circuit element <b>270</b><sub>M</sub>, second memory element <b>255</b> and/or memory within the element interface and control <b>280</b> may be any form of memory, machine-readable storage or memory media, whether volatile or non-volatile, including without limitation, RAM, FLASH, DRAM, SDRAM, SRAM, MRAM, FeRAM, ROM, EPROM or EPROM, or any other type of memory, storage medium, or data storage apparatus or circuit, which is known or which becomes known, or combinations thereof. In a first exemplary embodiment, the first memory element <b>270</b><sub>M </sub>and the memory within the element interface and control <b>280</b> are implemented as content addressable memories (&#x201c;CAMs&#x201d;). In a second exemplary embodiment, the first memory element <b>270</b><sub>M </sub>and the memory within the element interface and control <b>280</b> are implemented as SDRAM.</p>
<p id="p-0115" num="0114">The first communication elements <b>250</b> are similar to the composite circuit elements <b>260</b>, including an element interface and control <b>280</b>, and a circuit element <b>270</b> which, in this case, is a communication element <b>270</b><sub>C</sub>, which may be configurable or non-configurable, depending upon the selected embodiment. For example, configuration may occur to determine switching or routing paths within the communication element <b>270</b><sub>C</sub>. The communication element <b>270</b><sub>C </sub>provides for packet switched data transmission and reception to and from the interconnect <b>155</b>, and circuit-switched communication within the cluster <b>200</b>.</p>
<p id="p-0116" num="0115">Similarly, the state machine element <b>290</b> also comprises an element interface and control <b>280</b>, with its &#x201c;computational&#x201d; element (<b>270</b>) being the more specific case of a state machine element, which also may be configurable or non-configurable, depending upon the selected embodiment. The various memories <b>330</b> and input and output queues <b>326</b>, <b>315</b>, for a state machine embodiment, alternatively may be provided as internal registers. Using the element interface and control <b>280</b>, as discussed below, also provides for the state machine element <b>290</b> to have a plurality of contexts, such as for multithreading. In addition, the state machine element <b>290</b> is illustrated as having direct access to the element interface and control <b>280</b> of the composite circuit elements <b>260</b> (via configuration/control bus <b>285</b>) for ease of directly populating configurations, control, and receiving interrupts, and a direct connection to the first memory element <b>270</b><sub>M </sub>(and/or second memory element <b>255</b>) (e.g., through one port of a dual port RAM), to facilitate corresponding memory accesses for instruction/code processing and other data access. As mentioned above, the state machine element <b>290</b>, in conjunction with any of the available memories (e.g., a composite memory element <b>260</b><sub>M </sub>or second memory element <b>255</b>), constitutes a &#x201c;controller&#x201d; within the scope of the present invention, such as a cluster controller, a supercluster controller, a matrix controller, etc. Such a controller may also include the message manager <b>265</b> or similar functionality.</p>
<p id="p-0117" num="0116">By utilizing the same (or similar) element interface and control <b>280</b>, the first communication elements <b>250</b> and state machine element <b>290</b> appear to the composite circuit elements <b>260</b> within the cluster <b>200</b> as simply another composite circuit element <b>260</b>, with corresponding advantages discussed below. For example, the other composite circuit elements <b>260</b> then do not need to have any knowledge that their output is provided to or input is being received from a first communication element <b>250</b> or a state machine element <b>290</b>, and do not need to accommodate any different type of data reception or transmission.</p>
<p id="p-0118" num="0117">In exemplary embodiments, the composite circuit elements <b>260</b> may include some form of identification by type or kind of composite circuit element <b>260</b> (i.e., type of circuit element <b>270</b> within the composite circuit element <b>260</b>), to facilitate identification by a state machine element (&#x201c;SME&#x201d;) <b>290</b> (or a controller <b>175</b>). Such identification may be retained in an available memory within the cluster <b>200</b> in a wide variety of forms, such as hard-wired as a ROM within a composite circuit element <b>260</b> during fabrication, loaded into a memory during a boot process, and so on. Such type identification, for example, may be maintained in a memory composite element <b>260</b>, second memory <b>255</b>, or within the memory <b>330</b> of the element interface and control <b>280</b> discussed below.</p>
<p id="p-0119" num="0118">The element interface and control <b>280</b> provides both (1) a uniform interface for input to and output from each configurable circuit element <b>270</b>, memory element, communication element, or state machine element; and (2) a uniform control structure, and is discussed in greater detail below with reference to <figref idref="DRAWINGS">FIGS. 8 and 16</figref>. Because each element interface and control <b>280</b> has the same structure for every composite circuit element <b>260</b>, first communication element <b>250</b>, and state machine element <b>290</b> within every cluster <b>200</b>, every such element <b>260</b>, <b>250</b>, <b>290</b> may be controlled in a uniform, repeatable manner, without regard to the type of element, such as whether the element (<b>270</b>) is a configurable ALU, a configurable barrel shifter, a communication element, or a state machine element. In addition, every such composite circuit element <b>260</b>, first communication element <b>250</b>, and state machine element <b>290</b> may communicate with any other composite circuit element <b>260</b>, first communication element <b>250</b>, and state machine element <b>290</b> in a uniform, repeatable manner, without regard to the type of element (e.g., a configurable circuit element <b>270</b>). More particularly, every composite circuit element <b>260</b>, first communication element <b>250</b>, and state machine element <b>290</b> may be addressed in a uniform manner, through the addressing scheme discussed above.</p>
<p id="p-0120" num="0119">As a first result of such uniformity, no composite circuit element <b>260</b>, first communication element <b>250</b>, and state machine element <b>290</b> is required to know anything about any other composite circuit element <b>260</b>, first communication element <b>250</b>, and state machine element <b>290</b> from which it receives input or to which it provides output, i.e., each composite circuit element <b>260</b> and first communication element <b>250</b> may be generally ignorant about its surroundings and functions. (Depending upon the implementation, the state machine element <b>290</b> may have additional functionality for monitoring, testing and controlling other elements, so that it is knowledgeable about its surroundings and functions). As a second result of such uniformity, each composite circuit element <b>260</b>, first communication element <b>250</b>, and state machine element <b>290</b> may be configured, addressed and queried in a uniform manner, also without regard to the type of element (e.g., type of circuit element <b>270</b>).</p>
<p id="p-0121" num="0120">As a third and very significant result, each composite circuit element <b>260</b> having a selected type of circuit element <b>270</b> is virtually completely interchangeable with any other composite circuit element <b>260</b> having the same selected type of circuit element <b>270</b>, except to the extent of any locality (distance) constraints for the performance of a particular computation or algorithm. As a consequence, subject to such constraints, for execution of a given algorithm, the operations performed by any selected composite circuit element <b>260</b> having a selected type of circuit element <b>270</b> may be freely assigned or transferred to another composite circuit element <b>260</b> having the same selected type of circuit element <b>270</b>, without any detrimental effect. In the event of a failure or defect in a particular composite circuit element <b>260</b> having a selected type of circuit element <b>270</b>, its operations may be transferred to: (1) another available composite circuit element <b>260</b> having the same selected type of circuit element <b>270</b>; (2) a group of available composite circuit elements <b>260</b> which together are capable of performing the same operations; or (3) an otherwise unavailable composite circuit element <b>260</b> having the same selected type of circuit element <b>270</b> (or group of composite circuit elements <b>260</b>) which had been performing another or a lower priority operation. For example, in the event of a failure of a composite circuit element <b>260</b> having a triple ALU configurable element <b>270</b>, its operations may be transferred to three composite circuit elements <b>260</b> which each have a single ALU configurable element <b>270</b>, which may then be configured to perform the operations of the triple ALU. Similarly, the functions performed by a first communication element <b>250</b> or a state machine element <b>290</b> may also be transferred to other available first communication elements <b>250</b> and state machine elements <b>290</b>, as needed.</p>
<p id="p-0122" num="0121">The full interconnect element <b>275</b> and/or distributed full interconnect element <b>295</b>, which respectively may be implemented as a full crossbar switch or as another arrangement of switches, multiplexers, demultiplexers, or other transistor arrangements, provides for any output of any composite circuit element <b>260</b>, first communication element <b>250</b>, and state machine element <b>290</b> to be coupled to any input of any (other) composite circuit element <b>260</b>, first communication element <b>250</b>, and state machine element <b>290</b>, and/or to be coupled to any other component within its cluster <b>200</b> or, via intercluster queue <b>245</b>, to the full interconnect element <b>275</b> and/or distributed full interconnect element <b>295</b> of an adjacent cluster <b>200</b> (for input to any composite circuit element <b>260</b>, first communication element <b>250</b>, and state machine element <b>290</b> or other component of the adjacent cluster <b>200</b>). (Feedback of output to input within the same composite circuit element may, in selected embodiments, be accomplished internally within the composite circuit element <b>260</b>, such as through a multiplexer or other switching arrangement, not separately illustrated.) In an exemplary embodiment, any output of a composite circuit element <b>260</b>, first communication element <b>250</b>, and state machine element <b>290</b> may be provided as an input to any other composite circuit element <b>260</b>, first communication element <b>250</b>, and state machine element <b>290</b>, in parallel and concurrently, through full interconnect element <b>275</b> and/or distributed full interconnect element <b>295</b>, for each composite circuit element <b>260</b>, allowing complete and concurrent communication between and among all composite circuit elements <b>260</b>, first communication elements <b>250</b>, and state machine element <b>290</b> (with the exception of potential conflicts requiring arbitration or other resolution).</p>
<p id="p-0123" num="0122">Depending upon the selected embodiment, the outputs from a composite circuit element <b>260</b> may be switched in a plurality of ways, all of which are within the scope of the present invention. For example, an optional output switching element <b>380</b> (illustrated in <figref idref="DRAWINGS">FIG. 8</figref>) may be provided for every composite circuit element <b>260</b>, which may switch the outputs for internal feedback within the composite circuit element <b>260</b>, switch the outputs to the full interconnect element <b>275</b> or distributed full interconnect element <b>295</b>, switch the outputs directly to a first communication element <b>250</b>, or switch the outputs directly to the state machine element <b>290</b>. In the selected embodiment discussed below with reference to <figref idref="DRAWINGS">FIG. 8</figref>, internal feedback may be provided from any stage within a computational element <b>270</b>, and the computational element <b>270</b> outputs are provided to an output memory (or output queue or register) <b>315</b> and then directly to the full interconnect element <b>275</b>, for switching to other composite circuit elements <b>260</b>, to the state machine element <b>290</b>, or to the first communication elements <b>250</b>. Similarly, inputs to a composite circuit element <b>260</b> may be provided in a plurality of ways, such as from the full interconnect element <b>275</b> or distributed full interconnect element <b>295</b>, or directly from the full interconnect element <b>275</b> and other sources, such as from second memory element <b>255</b>, the state machine element <b>290</b>, and/or first communication elements <b>250</b>.</p>
<p id="p-0124" num="0123">This communication functionality may be implemented based upon either or both data sources and/or data destinations. For destination-based communication, destination addresses for each context are typically stored in a routing table of an output queue <b>315</b> (<figref idref="DRAWINGS">FIG. 8</figref>). Output is then provided for the corresponding address, with the full interconnect element <b>275</b> or distributed full interconnect element <b>295</b> configured for the corresponding destination address. For this embodiment, when one output from a composite circuit element <b>260</b> is to be applied as input to more than one composite circuit element <b>260</b>, these additional inputs may be provided sequentially. In other exemplary embodiments, additional output fan-out may be provided, such that an output of one composite circuit element <b>260</b> may be input concurrently into a plurality of other composite circuit elements <b>260</b>, also via full interconnect element <b>275</b>, distributed full interconnect element <b>295</b> or other communication structures. Handshaking protocols may also be utilized, with the destination sending or not sending an acknowledgement upon receipt of data.</p>
<p id="p-0125" num="0124">For source-based communication, implemented in an exemplary embodiment, source addresses for each context are typically stored in input queues <b>326</b>. Every source provides its output on a selected bus or communication lines of the full interconnect element <b>275</b> or distributed full interconnect element <b>295</b>. For incoming data, the corresponding input queue <b>326</b> determines whether the data is from a source designated for one or more of its contexts and, if so, when memory space is available, receives the corresponding data. This source-based communication provides ease of multicasting or broadcasting, as any and all destinations are enabled to concurrently receive any data of interest transmitted on the selected data lines. Handshaking protocols may also be utilized, with the destination sending or not sending a denial or other unavailability message when it is unable to receive the data transmitted (thereby providing for the source to resend the data at another time).</p>
<p id="p-0126" num="0125">In another exemplary embodiment, no handshaking or other type of communication acknowledgement is utilized. Physical data links may be established at run time, as part of the binding process, with all corresponding computational processes allowed to execute, without a need to determine input data availability or space availability for output data. Such an implementation is useful for pipelining, such as for inner kernels of various algorithms. In addition, such an implementation is useful to avoid data stalls or data back pressure, when one data process may be waiting for incoming data and thereby affecting data throughput of other processes. In addition, combinations of these implementations may also be utilized, such as various components utilizing data flow-based operations, and other components not utilizing data flow-based operations. For example, data flow-based operations may be utilized for operations within a cluster <b>200</b>, with other operations, such as communication operations, allowed to simply execute (e.g., route and switch).</p>
<p id="p-0127" num="0126">Continuing to refer to <figref idref="DRAWINGS">FIGS. 5 and 6</figref>, the full interconnect element <b>275</b> and distributed full interconnect element <b>295</b> are illustrated generally, for ease and clarity of illustration, to represent generally the types of communication within a cluster <b>200</b>, such as, for example: to provide for the input and output of any composite circuit element <b>260</b> to be coupled to other composite circuit elements <b>260</b>, to the state machine element <b>290</b>, to the message manager <b>265</b>, or to either (or both) first communication elements <b>250</b> or intercluster queue <b>245</b>, for data transfer to or from other clusters <b>200</b>; communication between the state machine element (SME) <b>290</b> and any composite circuit element <b>260</b> (including memory elements and communication elements); communication between the SME <b>290</b> and either or both first communication elements <b>250</b>, for transfer of control information, queries, query responses, and so on; communication between the message manager <b>265</b> and interconnect <b>155</b>; and communication between the first communication elements <b>250</b> and the various memories within the cluster <b>200</b> (e.g., second memory element <b>255</b> and the other memories within the various components of the cluster <b>200</b>); and any other communication between or among combinations of components within a cluster <b>200</b>. It will be understood by those of skill in the art that a wide variety of communication structures and communication media are available, and all such variations are considered equivalent and within the scope of the present invention.</p>
<p id="p-0128" num="0127">The state machine element (SME) <b>290</b> functions as a (comparatively small) microprocessor (or microcontroller), such as a RISC processor, for execution of instructions, determination of conditions and events, operating system management, and control of the composite circuit elements <b>260</b>. The SME <b>290</b> can be utilized to implement legacy C programs and implement state for otherwise stateless dataflow operations of the composite circuit elements <b>260</b>. The state machine element <b>290</b> is adapted to function as a sequential processor, and its operations are augmented by the composite circuit elements <b>260</b> within the same cluster <b>200</b>. The SME <b>290</b> also may have internal memory, may utilize the second memory element <b>255</b>, a memory composite circuit element <b>260</b><sub>M</sub>, or a memory <b>330</b> within a composite circuit element <b>260</b>, for storage of data and instructions (or actions). For example, the second memory element <b>255</b> may be implemented as a plurality of &#x201c;long&#x201d; queues, having sufficient depth to store instructions which may be utilized by the state machine element <b>290</b>. The SME <b>290</b> may utilize any of the composite circuit elements <b>260</b> to perform calculations or other functions which will be needed in its execution of its program, such as to add or to compare two numbers, for example. The state machine element <b>290</b> performs control functions of computations, such as determinations of conditionals, represented in programming languages using statements such as IF, CASE, WHILE, FOR, etc. The SME <b>290</b> may also have control registers or other types of internal memory, such as to define and keep track of its control functions. As previously mentioned, not every cluster <b>200</b> is required to have a state machine element <b>290</b>.</p>
<p id="p-0129" num="0128">In addition, the state machine element <b>290</b> is illustrated as having, in addition to direct access to the element interface and control <b>280</b> of the composite circuit elements <b>260</b> (via configuration/control bus <b>285</b>), a direct connection to the first memory element <b>270</b><sub>M </sub>(and/or second memory element <b>255</b>), to facilitate corresponding memory accesses for instruction/code processing and other data access. Alternatively to the use of the configuration/control bus <b>285</b>, such communication may be provided via the full interconnect element <b>275</b> or distributed full interconnect element <b>295</b>, for example.</p>
<p id="p-0130" num="0129">The state machine element <b>290</b> is utilized to implement a hardware operating system, and in a supervisory mode, has access to all of the resources within its cluster <b>200</b>, thereby able to program, control, and monitor all of the composite circuit elements <b>260</b> within the cluster <b>200</b>. For implementations in which one or more clusters <b>200</b> do not have a state machine element <b>290</b> included within the cluster <b>200</b>, one or more other state machine elements <b>290</b> of other clusters <b>200</b> will perform these functions and operations. In addition to task control, the state machine element <b>290</b> is utilized in self-testing of cluster resources, loading or assigning tasks (actions (or instructions)), binding actions (or instructions) (e.g., run-time binding) to the composite circuit elements <b>260</b>, and in creating the connections between and among the various composite circuit elements <b>260</b> and clusters <b>200</b>. The assigning and binding process is discussed in greater detail with reference to <figref idref="DRAWINGS">FIG. 14</figref>. Collectively, the SMEs <b>290</b> within the clusters <b>200</b> function as a highly distributed controller, running the operating system of the apparatus <b>100</b> (in conjunction with any needed composite circuit elements <b>260</b>), either with or without other controllers <b>175</b>. In exemplary embodiments, various SMEs <b>290</b> may take on additional functions, such performing a system boot process, operating as a master controller, and determining and mapping functional and nonfunctional composite circuit elements <b>260</b> and other components, for example. The operation of the SME <b>290</b> is also explained in greater detail below with reference to <figref idref="DRAWINGS">FIGS. 8-14</figref>.</p>
<p id="p-0131" num="0130">For example, the SME <b>290</b> may start a bound task of the composite circuit elements <b>260</b> within the cluster <b>200</b>, suspend a task, suspend an action or function of a composite circuit element <b>260</b> (as part of an overall task), halt a task and free its resources (such as to load and run a higher priority task), set a task to perform in a single-step mode, and move a task to another location (such as to perform self-testing of the composite circuit elements <b>260</b> currently performing the task).</p>
<p id="p-0132" num="0131">The message manager <b>265</b>, in the first cluster <b>200</b> and second cluster <b>200</b>A embodiments, is utilized for communication external to the apparatus <b>100</b>, such as for an Ethernet interface, a memory interface (e.g., DDR-2 SDRAM), a PCI-Express interface, etc. The message manager <b>265</b> is coupled directly to the SME <b>290</b>, and more generally, also may be coupled to the full interconnect element <b>275</b> or distributed full interconnect element <b>295</b>, the first communication elements <b>250</b>, and/or the composite circuit elements <b>260</b> (not separately illustrated). For example, data words provided by the full interconnect element <b>275</b> may be output by the message manager <b>265</b> for storage in an external memory. Similarly, also for example, incoming data, configuration or control may be transferred to the SME <b>290</b> (or stored in second memory element <b>255</b>), such as to provide instructions for the SME <b>290</b>, or transferred to a composite circuit element <b>260</b>, for use and consumption in computations. In addition, in an exemplary embodiment, the message manager <b>265</b> is also coupled to the second communication channel or bus <b>220</b> (of the interconnect <b>155</b>).</p>
<p id="p-0133" num="0132">In an exemplary embodiment, as an additional alternative, the message manager <b>265</b> is also utilized for communication within the apparatus <b>100</b>. In this embodiment, the message manager <b>265</b> is also utilized for cluster <b>200</b> to cluster <b>200</b> communication, and for SME <b>290</b> to SME <b>290</b> communication. For example, the message manager <b>265</b> is utilized for one composite circuit element <b>260</b> of a first cluster <b>200</b> to transfer information to another composite circuit element <b>260</b> of a second cluster <b>200</b>.</p>
<p id="p-0134" num="0133">Also, in an exemplary embodiment, not all message managers <b>265</b> in a matrix <b>150</b> are implemented to provide external communication. For example, in one alternative embodiment utilizing four matrices <b>150</b>, each matrix <b>150</b> is provided with a total of six PCI-express interfaces implemented through the message managers <b>265</b> of six corresponding clusters <b>200</b> (one per supercluster <b>185</b>, in an embodiment in which superclusters <b>185</b> are implemented identically). Similarly, in this four matrix example, each matrix <b>150</b> is provided with a total of one or two DDR-2 interfaces implemented through the message managers <b>265</b> of one or two corresponding clusters <b>200</b>. As a result, there are remaining clusters <b>200</b> which have corresponding message managers <b>265</b> which are not providing interfaces and control for external communication. For these remaining clusters <b>200</b>, their corresponding message managers <b>265</b> transfer data to these other clusters <b>200</b> having DDR-2 or PCI-express interfaces for storage in memory or external communication on a PCI-express bus, respectively, either through second communication elements <b>210</b> (supercluster-level) or third communication elements <b>190</b> (matrix-level).</p>
<p id="p-0135" num="0134">The message manager <b>265</b> may be implemented in a wide variety of ways, depending upon the selected embodiment. In a first selected embodiment, the message manager <b>265</b> is implemented as a finite state machine and implements communication standards, such as those mentioned above. When implemented as a state machine, the message manager <b>265</b> may be implemented separately or combined as a part of the SME <b>290</b>. In a second selected embodiment, the message manager <b>265</b> is implemented as dedicated computational logic gates, also for the provision of a communication interface, with the SME <b>290</b> utilized to perform any conditional logic or other state machine functions.</p>
<p id="p-0136" num="0135">In exemplary embodiments, as indicated above, the composite circuit elements <b>260</b> will include some form of identification by type or kind of composite circuit element <b>260</b> (i.e., type of circuit element <b>270</b> within the composite circuit element <b>260</b>), to facilitate identification by a state machine element (&#x201c;SME&#x201d;) <b>290</b>. Generally, a SME <b>290</b> will determine (and report to other SMEs <b>290</b>, as necessary) the types and context availability of the composite circuit elements <b>260</b> within its cluster <b>200</b>, for use in run-time binding. For example, for the illustrated cluster <b>200</b>, the SME <b>290</b> may determine that the cluster has one configurable barrel shifter-type element (corresponding to type &#x201c;A&#x201d;) <b>270</b><sub>A</sub>, two configurable triple-ALU-type elements (corresponding to type &#x201c;B&#x201d;) <b>270</b><sub>B</sub>, one configurable Galois multiplier-type element (corresponding to type &#x201c;C&#x201d;) <b>270</b><sub>C</sub>, one configurable bit reordering (&#x201c;BREO&#x201d;)-type element (corresponding to type &#x201c;D&#x201d;) <b>270</b><sub>D</sub>, and one content addressable memory element (corresponding to type &#x201c;M&#x201d;) <b>270</b><sub>M</sub>. The SME <b>290</b> may also determine and report at another time that the BREO-type element of its cluster <b>200</b> is no longer functioning properly, so that the operations of its BREO-type element may be transferred to a BREO-type element of another cluster <b>200</b>.</p>
<p id="p-0137" num="0136">Continuing to refer to <figref idref="DRAWINGS">FIGS. 5 and 6</figref>, the second memory element <b>255</b> may receive input and provide output (be written to and read from) either directly or indirectly via the full interconnect element <b>275</b> or distributed full interconnect element <b>295</b>, from a plurality of sources, such as: (1) to and from the first communication elements <b>250</b> (for input from other clusters <b>200</b>, such as input of data, instructions or other control information for use by the SME <b>290</b> or for queuing data for use by composite circuit elements <b>260</b>); (2) to and from one or more composite circuit elements <b>260</b> (including memory composite circuit element <b>260</b><sub>M</sub>) within the same cluster <b>200</b>; (3) to and from the SME <b>290</b>; or (4) to and from the message manager <b>265</b>.</p>
<p id="p-0138" num="0137"><figref idref="DRAWINGS">FIG. 7</figref> is a block diagram illustrating a third exemplary cluster <b>200</b>B embodiment in accordance with the teachings of the present invention, as another variation of a cluster <b>200</b>. In this embodiment, the cluster <b>200</b>B contains composite circuit elements <b>260</b> having communication functionality, such as to provide external communication functionality, e.g., for the communication functionality concentrated within a selected matrix <b>150</b> as illustrated in <figref idref="DRAWINGS">FIG. 3</figref>. Also in this embodiment, as an option, the message manager <b>265</b> is not utilized for such external communication, which instead is provided within dedicated communication composite circuit elements <b>260</b>, which may be configurable or nonconfigurable. In this embodiment, each communication composite element <b>260</b> is utilized to provide a standard I/O interface for (external) communication to and from the apparatus <b>100</b>, such as DDR-2 or PCI-e interfaces. In addition, the communication composite elements <b>260</b> may have additional input and output bus or media structures to provide such interfaces, and are not confined to communicating outside the cluster <b>201</b> through the first communication elements <b>250</b>. Depending upon the selected embodiment, additional communication composite elements <b>260</b> may be utilized for increased resiliency and immunity from catastrophic failure. In all other respects, the clusters <b>200</b>, <b>200</b>B are identical, and further differ from cluster <b>200</b>A in use of a full interconnect element <b>275</b> rather than a distributed full interconnect element <b>295</b>. As a consequence, any reference to a cluster <b>200</b> will be understood to mean and include the third embodiment illustrated as cluster <b>200</b>B, as a variation or more specific case of a cluster <b>200</b>, and cluster <b>200</b>B otherwise also will not be further discussed as a separate embodiment. It should be noted, however, that the first cluster <b>200</b> embodiment may also be utilized for the communication functionality concentrated within a selected matrix <b>150</b> as illustrated in <figref idref="DRAWINGS">FIG. 3</figref>.</p>
<p id="p-0139" num="0138">For the cluster embodiments, because of the same matrix, supercluster and cluster addressing, and because of the same element interface and control <b>280</b>, any other cluster <b>200</b> (or composite circuit element <b>260</b>) may communicate with the communication composite elements <b>260</b> and its cluster <b>201</b>, or communicate with a cluster <b>200</b> having a message manager <b>265</b> with an external communication interface, in same manner as any communication with any other composite circuit element <b>260</b> or cluster <b>200</b>. As a result, when a cluster <b>200</b> or composite circuit element <b>260</b> has a communication external to the apparatus <b>100</b>, all that is required is for that cluster <b>200</b> or composite circuit element <b>260</b> to have the address of the corresponding communication composite elements <b>260</b> (with the interface corresponding to the selected form of communication) and/or its cluster <b>201</b>, or the address of a cluster <b>200</b> having a message manager <b>265</b> with the interface corresponding to the selected form of communication. Such addressing may be provided by various components within the cluster <b>200</b>, such as the message manager <b>265</b>, the SME <b>290</b>, or the first communication elements <b>250</b>, for example. Such external communication is thereby provided through virtual addressing, e.g., via a message manager <b>265</b> or cluster <b>200</b>, or via a communication composite elements <b>260</b> or cluster <b>201</b>, and the composite element <b>260</b> does not need any further information concerning the location or type of the external interface. For example, a cluster <b>200</b> or composite circuit element <b>260</b> does not need any information concerning whether its external communication is with a DDR SDRAM or is via an Ethernet protocol, or where these interfaces may be located on the apparatus <b>100</b>. Similarly, for internal communication, a composite circuit element <b>260</b> also does not need any information concerning whether its communication is within another composite circuit element <b>260</b> within the same cluster <b>200</b> or a different cluster <b>200</b>.</p>
<p id="p-0140" num="0139"><figref idref="DRAWINGS">FIG. 8</figref> is a block diagram illustrating in greater detail an exemplary composite circuit element <b>260</b> within an exemplary cluster <b>200</b> in accordance with the teachings of the present invention. As illustrated in <figref idref="DRAWINGS">FIG. 8</figref>, the composite circuit element <b>260</b> comprises an element interface and control <b>280</b> and a circuit element <b>270</b> (also referred to as a computational element <b>270</b>), which is generally a configurable computational element, but which may also be a nonconfigurable computational element, a configurable or nonconfigurable communication element, a configurable or nonconfigurable finite state machine element, may be a configurable or nonconfigurable memory element, or may be other forms of circuitry selected for any particular application of an apparatus <b>100</b>.</p>
<p id="p-0141" num="0140">In an exemplary embodiment, the element interface and control <b>280</b> comprises: (1) an element controller <b>325</b>; (2) a memory <b>330</b> (such as a content addressable memory (&#x201c;CAM&#x201d;) or random access memory such as SDRAM) which stores contexts and control information (e.g., configuration words); (3) input queues <b>320</b> (as a form of memory); and (4) output queues (or registers) <b>315</b> (also as a form of memory). In other exemplary embodiments, the element interface and control <b>280</b> may include the element controller <b>325</b>, the memory <b>330</b>, and either the input queues <b>320</b> or the output queues <b>315</b>, but not both. In additional exemplary embodiments, the element interface and control <b>280</b> may include the memory <b>330</b>, and either the input queues <b>320</b> or the output queues <b>315</b>, but not the element controller <b>325</b>. In the latter embodiment, once a SME <b>290</b> has assigned actions and established the data routing, no separate or additional control is utilized within the composite circuit elements <b>260</b>, with the composite circuit elements <b>260</b> allowed to freely and/or continuously execute an assigned context.</p>
<p id="p-0142" num="0141">As mentioned above, in selected embodiments, the element interface and control <b>280</b> may also include an optional output switching element <b>380</b> such as one or more switches, transistors, multiplexers or demultiplexers, to provide direct switching capability for output data, such as for internal feedback within the composite circuit element <b>260</b>, or for providing output data to the SME <b>290</b>, to the message manager <b>265</b>, or to the first communication elements <b>250</b>, in addition to providing output data to the full interconnect element <b>275</b> or distributed full interconnect element <b>295</b>. As mentioned above, the memory <b>330</b>, input queues <b>320</b> and output queues <b>315</b> may be implemented as any form of memory, including without limitation any of the memory types mentioned previously, such as CAM or SDRAM.</p>
<p id="p-0143" num="0142">The input queues <b>320</b> provide a plurality of inputs <b>365</b> into the configurable circuit element <b>270</b>, illustrated as an exemplary four inputs each having a width of one 16-bit data word. Alternatively, the width may be wider, such as to include a bit designating a placeholder, for example. The input queues <b>320</b> may be independent from each other or may be dependent upon each other, such as using 2 inputs for a combined 32-bit data word. In exemplary embodiments, input queues <b>320</b> are provided for each of the inputs into the circuit element <b>270</b>, with each of the input queues <b>320</b> providing a separate queue for each context which may be utilized by the circuit element <b>270</b>. In addition, the input queues <b>320</b> may be implemented as &#x201c;short queues&#x201d;, having a depth of 1 or 2 data words, although deeper queues and other forms of memory are within the scope of the invention. For an exemplary embodiment, eight contexts are utilized, for each of 4 inputs, with a depth of at least 2 data words. Contexts may also be combined, such as to implement a larger queue, e.g., 16 words, for a selected context.</p>
<p id="p-0144" num="0143">The input queues <b>320</b> may receive data from any of a plurality of input sources, depending upon the switching arrangements, either directly or via the full interconnect element <b>275</b> or distributed full interconnect element <b>295</b>, such as: (1) from the first communication elements <b>250</b> (for input from other clusters <b>200</b>); (2) from one or more other composite circuit elements <b>260</b> (including memory composite element <b>260</b><sub>M</sub>) within the same cluster <b>200</b>; (3) from the second memory element <b>255</b>; (4) from the message manager <b>265</b>; or (5) from the SME <b>290</b> (e.g., when utilized by the SME <b>290</b> for calculation of a value or comparison of 2 values, such as to evaluate a condition or an event). As illustrated in <figref idref="DRAWINGS">FIG. 8</figref>, the input queues <b>320</b> receive data from either a full interconnect element <b>275</b> or a distributed full interconnect element <b>295</b>, illustrated as an exemplary multiplexer <b>335</b>. An output from a circuit element <b>270</b> also may be fed back to be provided as an input, through the input queues <b>320</b>, or directly within the circuitry of the element <b>270</b>, via an output switching element <b>380</b> mentioned above, or simply via the full interconnect element <b>275</b>.</p>
<p id="p-0145" num="0144">In an exemplary embodiment, two output queues (registers or other forms of memory) <b>315</b> are provided, each having the corresponding eight contexts, each having a width of one 16-bit data word, and having a selected depth of 1, 2 or more data words. Alternatively, the width may be wider, such as to include a bit designating a placeholder, for example. The output queues <b>315</b> also may be independent from each other or may be dependent upon each other, such as using 2 output queues <b>315</b> for a combined 32-bit data word. The contexts may also be combined, such as to implement a larger queue, e.g., 8-16 words, for a selected context. In addition to storing output data, the output queues <b>315</b> (utilizing an incorporated state machine) may also replicate output data, such as providing the same output data to additional contexts for distribution to additional destinations.</p>
<p id="p-0146" num="0145">A plurality of outputs <b>375</b> are provided from the output queues <b>315</b> of the circuit element <b>270</b>, illustrated as two outputs, also each having a width of one 16-bit data word (or wider, as discussed above, such as for inclusion of a placeholder bit, control information, or other data). The outputs <b>375</b> also may be independent from each other or may be dependent upon each other, such as using 2 outputs for a combined 32-bit data word. The outputs <b>375</b> are provided to the full interconnect element <b>275</b> or distributed full interconnect element <b>295</b> (or the optional output switching element <b>380</b>), which may independently provide each of the plurality of outputs <b>375</b> to any of the following (via corresponding communication structures or bus <b>350</b>): (1) to the first communication elements <b>250</b> (for output to other clusters <b>200</b>); (2) to one or more (other) composite circuit elements <b>260</b> (including memory composite element <b>260</b><sub>M</sub>) within the same cluster <b>200</b>; (3) to the SME <b>290</b> (such as when utilized by the SME <b>290</b> for calculation of a value or comparison of 2 values (e.g., to evaluate a condition or an event)); (4) to the message manager <b>265</b>; or (5) to an optional second memory element <b>255</b>, such as a long queue for input into the SME <b>290</b> or other components. As mentioned above, the optional output switching element <b>380</b> and other output switching arrangements are also available and will be apparent to those of skill in the electronic arts, are considered equivalent and are within the scope of the present invention.</p>
<p id="p-0147" num="0146">In a selected embodiment, the memory <b>330</b> is implemented as a CAM, to facilitate searching and identification of stored task identifiers (task IDs) and stored action identifiers (action IDs). In another embodiment, the memory <b>330</b> is implemented as RAM, with searching and identification performed utilizing other search methods, such as binary searching. Other types and combinations of memory may be utilized, however, and all are considered equivalent and within the scope of the present invention, whether volatile or non-volatile, including without limitation any type or combination of RAM, FLASH, DRAM, SDRAM, SRAM, MRAM, FeRAM, ROM, EPROM or EPROM, or any other type of memory, storage medium, or data storage apparatus or circuit, which is known or which becomes known, depending upon the selected embodiment.</p>
<p id="p-0148" num="0147">The memory <b>330</b> is utilized in the exemplary embodiments to store both contexts and control information, utilized to configure the configurable element <b>270</b> and direct its operations. Such contexts and control information is stored as a configuration word in the exemplary embodiments, as a plurality of information fields, and is discussed below with reference to <figref idref="DRAWINGS">FIG. 16</figref>. In addition, through the state machine element <b>290</b>, such configuration words may be altered, deleted, supplanted, added, and so on, and by modifying various bits within the configuration word, the execution of operations by the circuit element <b>270</b> may also be controlled. This local storage of contexts and control information provides for extremely fast execution capability, as configurations or instructions do not need to be fetched and read from a remote memory, but are instantly available as contexts for immediate configuration and control of the circuit element <b>270</b>. As such, the apparatus <b>100</b> is not subject to the &#x201c;von Neumann&#x201d; bottleneck which limits the execution capabilities of typical processors. Indeed, the various memories <b>330</b> function as a large, very highly distributed instruction memory which may be utilized advantageously, such as for distributed processing, distributed digital signal processing, distributed programming, and distributed rebinding of instructions (or actions) in the event of a component failure, for example.</p>
<p id="p-0149" num="0148">This use and local storage of contexts also allows for significant time multiplexing of operations of composite circuit elements <b>260</b>, first communication elements <b>250</b>, and state machine elements <b>290</b>. For example, while one context of a selected composite circuit element <b>260</b> may require input data which has not yet been created by another composite circuit element <b>260</b>, another context may be able to be executed on the selected composite circuit element <b>260</b>, rather than the composite circuit element <b>260</b> remaining idle. Similarly, the use of a plurality of contexts by a state machine element <b>290</b> allows multithreaded operation. For example, a SME <b>290</b> may commence execution of first code with a particular first data set for a first context, store interim results and a first code pointer, commence execution of second code with a second data set for a second context and provide an output, followed by returning to the first context for continued execution of the first code using the first code pointer and the stored, interim results. This use of time multiplexed contexts further allows interleaving of tasks and usage of resources which otherwise might be idle, allowing tasks to share resources and increasing the overall resource utilization of the IC.</p>
<p id="p-0150" num="0149">The element controller <b>325</b> may be implemented through combinational logic gates and/or as a finite state machine, and is utilized to control how the circuit element <b>270</b> is configured and when the circuit element <b>270</b> operates, utilizing the configuration word (contexts and control information) stored in memory <b>330</b>. More specifically, in exemplary embodiments, the circuit element <b>270</b> operates based on data flow, such that when it has data at its inputs, when it has an available destination to store or consume the output data to be produced, and when authorized by the element controller <b>325</b>, the circuit element <b>270</b> will commence operations (or fire) and perform its calculations or manipulations on the input data and provide the corresponding output data. The element controller <b>325</b> controls this data flow operation, based on a plurality of conditions and priorities (and other information stored as one or more configuration words in memory <b>330</b>). For example, when more than one context is ready for execution, the element controller <b>325</b> may arbitrate which runs first, such as through round-robin, or evaluation of one or more priorities, a scheduled execution of an activity, or when the activity last occurred (e.g., a most recently executed action may have a lower priority in the arbitration, while a least recently executed action may have a higher priority in the arbitration).</p>
<p id="p-0151" num="0150">The element controller <b>325</b> may be implemented with varying levels of sophistication. As mentioned above, in one embodiment, the element controller <b>325</b> is not implemented, with the composite circuit elements <b>260</b> essentially operating in a continuous mode, subject to other constraints (e.g., control from any of the various SMEs <b>290</b>). At the other extreme, the element controller <b>325</b> may provide multi-threaded operation of the circuit element <b>270</b>, such as by storing a current state of a partial execution of a first context in the (first) memory <b>330</b>, executing a second context (via the circuit element <b>270</b>), and retrieving the current state and resuming execution of the first context by the circuit element <b>270</b>.</p>
<p id="p-0152" num="0151">Exemplary configurable, computational elements <b>270</b> are illustrated in <figref idref="DRAWINGS">FIGS. 9 and 10</figref>. <figref idref="DRAWINGS">FIG. 9</figref> is a block diagram of an exemplary multiplier-type configurable element <b>270</b><sub>F</sub>, and <figref idref="DRAWINGS">FIG. 10</figref> is a block diagram of an exemplary triple-ALU-type configurable element <b>270</b><sub>G</sub>. As illustrated, each has four 16-bit inputs <b>365</b> and two 16-bit outputs <b>375</b>, and depending upon the context, each is capable of utilizing all inputs <b>365</b> and outputs <b>375</b>. The configuration corresponding to a selected context is provided for mode selection of corresponding multiplexers, demultiplexers, and other switching elements to implement the selected configuration.</p>
<p id="p-0153" num="0152">As illustrated in <figref idref="DRAWINGS">FIG. 9</figref>, the exemplary multiplier-type configurable element <b>270</b><sub>F </sub>is configurable for several operating modes, such as for 32-bit multiplication, 16-bit multiplication, accumulation, and mixtures of 16- and 32-bit arithmetic. As a brief, high-level explanation, the multiplier-type configurable element <b>270</b><sub>F </sub>may be configured using the 4 multiplexers <b>383</b>, <b>384</b>, <b>385</b>, <b>386</b>, using the 32-bit output select <b>387</b>, and using other configuration bits input into the adder/subtracter <b>382</b> and the multiplier <b>381</b>. The 32-bit output select <b>387</b> specifies whether the low 32 bits of the adder/subtracter <b>382</b> is output or which portion which portion of the 64-bit accumulation register <b>388</b> is output. The multiplexer <b>385</b> (A Select) specifies the A-input into the adder/subtracter <b>382</b>, as zero, I<sub>1</sub>, I<sub>2</sub>, or the accumulation register <b>388</b>; the multiplexer <b>386</b> (B Select) specifies the alignment of the B-input into the adder/subtracter <b>382</b>, as one of four 16-bit portions of a 64-bit output from the multiplier <b>381</b>; and configuration bits into the adder/subtracter <b>382</b> further specify whether the A-input is signed or unsigned and whether the B-input is added or subtracted. The multiplexer <b>383</b> (P Select) specifies the P-input into the multiplier <b>381</b>, as I<sub>3 </sub>or I<sub>2</sub>, and whether signed or unsigned. The multiplexer <b>384</b> (Q Select) specifies the Q-input into the multiplier <b>381</b>, as I<sub>1 </sub>or I<sub>0</sub>, and whether signed or unsigned. In addition, the multiplier-type configurable element <b>270</b><sub>F </sub>also illustrates output feedback within the element <b>270</b>, from the 64-bit accumulation register <b>388</b> to multiplexer <b>385</b>.</p>
<p id="p-0154" num="0153">As illustrated in <figref idref="DRAWINGS">FIG. 10</figref>, the exemplary triple-ALU-type configurable element <b>270</b><sub>G </sub>is configurable for a wide variety of functions in including multiplication, addition and subtraction (in signed arithmetic), masking, arithmetic averaging, and rounding, for example. In addition, the exemplary triple-ALU-type configurable element <b>270</b><sub>G </sub>may output a constant, pass one value (copying A or B to its output), perform logical functions (NOT, AND, OR, XOR), and may perform conditional or unconditional data flow. As illustrated in <figref idref="DRAWINGS">FIG. 10</figref>, depending upon the configuration bits, each of the shifters <b>393</b>, <b>394</b>, and <b>395</b> shift their corresponding inputs left (positive) or right (negative) by the designated amounts. The ABS blocks <b>389</b>, <b>399</b> either compute the absolute value of the input or pass the input, also depending on the configuration bits. The status multiplexer <b>396</b> generates a status word using flag bits from each of the ALUs <b>390</b>, <b>391</b> and <b>392</b>, which may be provided to the SME <b>290</b>, in which one flag bit designates a carry or comparison, a second flag bit indicates the result is the most significant bit, a third flag bit indicates the result is a negative one (&#x2212;1), and a fourth flag bit indicates the result is zero. The condition-swap multiplexers <b>397</b> and <b>398</b> are utilized to provide conditional execution on inputs I<sub>3</sub>, I<sub>2</sub>, and based on the result, passing I<sub>0 </sub>and/or I<sub>1 </sub>to outputs <b>375</b>, and further providing for swapping of inputs before being copied to outputs <b>375</b>.</p>
<p id="p-0155" num="0154">As mentioned above, in addition to these types of configurable elements <b>270</b>, other anticipated configurable elements <b>270</b> include bit re-ordering elements (&#x201c;BREOs&#x201d;), single ALU elements, &#x201c;super&#x201d; ALU elements (32-bit ALU), barrel shifter elements, look-up table elements, memory elements, programmable controller elements, communication elements, etc.</p>
<p id="p-0156" num="0155">B. Program Compilation for the Apparatus</p>
<p id="p-0157" num="0156"><figref idref="DRAWINGS">FIG. 11</figref> is a flow diagram illustrating at an exemplary compilation process in accordance with the teachings of the present invention. It should be understood that the following discussion is very high level for purposes of explaining the present invention. The compilation process may be performed using any computer system or network, workstation, processing device, one or more microprocessors, electronic design automation (&#x201c;EDA&#x201d;) tools, electronic system-level (&#x201c;ESL&#x201d;) tools, etc.</p>
<p id="p-0158" num="0157">Referring to <figref idref="DRAWINGS">FIG. 11</figref>, the method begins, start step <b>400</b>, with selection of an algorithm for compiling, step <b>405</b>. Such an algorithm may be expressed in a wide variety of ways, from a mathematical description to a source code or object code listing for a microprocessor, for example. The algorithm is converted or decomposed into a plurality of &#x201c;tasks&#x201d;, step <b>410</b>, which are high level descriptions of a function or process, such as performing an inverse Fast Fourier Transformation (IFFT). A task is then selected from the plurality of tasks and is assigned a task identifier (&#x201c;task ID&#x201d;), step <b>415</b>, which is typically a sufficiently unique identifier to differentiate the task from the other instances of tasks of the same algorithm or from tasks of other algorithms which will also be running concurrently on the apparatus <b>100</b>.</p>
<p id="p-0159" num="0158">The selected task is then converted or decomposed into one or more actions to be performed by a composite circuit element <b>260</b> (including computational, state machine, and/or communication composite elements <b>260</b>, <b>290</b>, <b>250</b>) to execute the task, step <b>420</b>. As mentioned above, an &#x201c;action&#x201d; is the type of function or activity to be performed by a composite circuit element <b>260</b>, such as multiplication, bit manipulation, and instruction processing, for example, and may be considered equivalent to an instruction which would be executed by a processor or a function performed by an ASIC or FPGA to achieve the same result. For example, an IFFT task may be decomposed into a plurality of &#x201c;butterfly&#x201d; steps such as multiplication, addition and accumulation steps, each or all of which would constitute an action (or instruction), such as &#x201c;multiply &#x2018;a&#x2019; times &#x2018;b&#x2019; (a&#xd7;b)&#x201d;, and which would correspond to one of the operational configurations of one of the composite circuit elements <b>260</b>. Accordingly, as used herein, the terms &#x201c;action&#x201d;, &#x201c;function&#x201d; or &#x201c;activity&#x201d; are used equivalently and interchangeably to mean any such circuit processes. (As a result, such actions (or instructions), once assigned and bound, will be on the IC in the form of a configuration of one or more of the elements <b>270</b>). Of the one or more actions (or instructions), an actions (or instructions) is selected and assigned an action identifier (&#x201c;action ID&#x201d;), step <b>425</b>, which is a sufficiently unique identifier to differentiate the action (or instruction) from other actions (or instructions) for the selected task. The task ID and action ID are utilized in the run-time binding process, discussed below with reference to <figref idref="DRAWINGS">FIG. 14</figref>.</p>
<p id="p-0160" num="0159">Each action (or instruction) is then mapped or assigned as one or more contexts of one or more composite circuit elements <b>260</b> by type of composite circuit element(s) to be utilized, step <b>430</b>, and not to any specific composite circuit elements <b>260</b> or specific addresses within the architecture, to create a &#x201c;symbolic&#x201d;, generic or non-specific compilation which is not tied to particular hardware components. For example, a multiplication and addition action (or instruction) may be mapped as a single context to an ALU-type composite element <b>260</b> (a composite element <b>260</b> having an ALU-type circuit element <b>270</b>), and not to a specific ALU-type composite element <b>260</b> within a specific cluster <b>200</b>. More complicated actions (or instructions) may be mapped to multiple contexts of multiple types of composite circuit elements <b>260</b>. Later, as part of the binding process, one or more specific composite circuit elements <b>260</b> of the selected type will be assigned to perform the action (or, equivalently, execute the instruction), as one or more of its (or their) available contexts. This distinction is important, as it allows the action (or instruction) to be assigned initially to one or more composite circuit elements <b>260</b> and then potentially reassigned to other composite circuit elements <b>260</b>, as may be needed, during operation of the apparatus <b>100</b>. In addition, as indicated, in exemplary embodiments, this separate binding process may assign the action (or instruction) as one or more contexts which are available for the selected types of composite circuit elements <b>260</b>, with other contexts potentially remaining available for assignment of other actions (or instructions).</p>
<p id="p-0161" num="0160">As part of this process, corresponding &#x201c;linkage&#x201d; for each action (or instruction) is also determined, also at this generic, symbolic or non-specific level, step <b>435</b>, namely, as generic or symbolic &#x201c;pointers&#x201d;: for each action, information is generated and retained concerning either sources for input data or destinations for data output, or both. For example, action number &#x201c;512&#x201d; of task &#x201c;418&#x201d; will, in addition to being mapped to an ALU-type composite element <b>260</b>, have associated information that it will receive its input from action number &#x201c;414&#x201d; of task &#x201c;229&#x201d;, or that it will provide its output to action number &#x201c;811&#x201d; of task &#x201c;319&#x201d; (or both). Only one such set of either input linkage or output linkage is required, provided the set of information is generated consistently for all actions (or instructions), as linking an input to its data source automatically is linking the output of the data source to this input (destination) which will utilize the data, and vice-versa. In selected embodiments, it may be useful to have both sets of I/O linkage information. This relationship or &#x201c;linkage&#x201d; between input and output, through generic or symbolic pointers, is also useful as part of the task and action (or instruction) binding process discussed below. This input or output linkage determination of step <b>435</b> may be performed in the compilation process in a wide variety of orders and following any of various steps. For example, this determination may be performed following either step <b>440</b> or <b>445</b>, such as when all actions (or instructions) for a task have been determined and mapped to the types of composite circuit elements <b>260</b>, or when all actions (or instructions) and tasks have been determined and mapped to the types of composite circuit elements <b>260</b>.</p>
<p id="p-0162" num="0161">The compilation process also determines any timing constraints in the program or algorithm which would correspondingly require a degree of proximity or locality of execution by the various composite circuit elements <b>260</b>, and provides corresponding regional constraints for the affected tasks and/or actions (or instructions), step <b>440</b>. For example, for various timing requirements, some processes may need to be executed within a single cluster <b>200</b> or within a group of clusters <b>200</b> within the same supercluster <b>185</b>, to avoid any delays which may be incurred from routing data packets on the interconnect <b>155</b> to and from other clusters <b>200</b> or other superclusters <b>185</b>. In these circumstances, a regional requirement is provided in the compiled output (the &#x201c;symbolic netlist&#x201d; discussed below), such as by a &#x201c;region&#x201d; command or instruction designation, for example, to provide that the actions (or instructions) which follow must be performed within a single cluster <b>200</b> or within a single supercluster <b>185</b>, followed by an &#x201c;end region&#x201d; indication for the actions (or instructions) confined to the single cluster <b>200</b> or single supercluster <b>185</b>.</p>
<p id="p-0163" num="0162">Following step <b>440</b>, the method determines whether there are additional actions (or instructions) to be assigned an identifier and mapped to types of composite circuit elements <b>260</b>, step <b>445</b>, and if so, the method returns to step <b>425</b> and iterates, to select the next action (or instruction) and proceed through steps <b>425</b>, <b>430</b> (potentially <b>435</b>) and <b>440</b>. When all actions (or instructions) for the task have been assigned an identifier and mapped to types of composite circuit elements <b>260</b> (and possibly input or output linked) in step <b>440</b>, the method proceeds to step <b>450</b>, and determines whether additional tasks are to be compiled. When additional tasks are to be compiled in step <b>450</b>, the method returns to step <b>415</b> and iterates, selecting the next task, assigning a task ID, and so on.</p>
<p id="p-0164" num="0163">When all tasks have been processed in step <b>450</b>, such that the selected algorithm has been converted into a plurality of tasks and actions (or instructions), which have then been symbolically (generically or non-specifically) mapped to types of composite circuit elements <b>260</b> and symbolically linked by either data input sources or data output destinations (or both) (e.g., using symbolic pointers), the method generates a composite circuit element and routing &#x201c;symbolic netlist&#x201d; or symbolic compilation, step <b>455</b>. This symbolic netlist, listing or compilation comprises a plurality of symbolic netlist elements, with each such symbolic netlist element corresponding to and containing information for execution of each action of each task of the algorithm or program. More particularly, each symbolic netlist element contains information concerning: (1) the task ID; (2) the action ID; (3) one or more types of composite circuit elements <b>260</b> and the number of contexts needed for each type of composite circuit element <b>260</b> for execution of the action (or instruction) of the corresponding task ID and action ID; (4) input or output (or both) linkage information; and (5) any regional (i.e., proximity) constraints for the corresponding tasks or actions (or instructions).</p>
<p id="p-0165" num="0164">As an alternative to mapping to one or more types of composite circuit elements <b>260</b> in step <b>430</b> and linking instructions in step <b>435</b>, actions (or instructions) may also be mapped to &#x201c;macro-definitions&#x201d; or &#x201c;libraries&#x201d;. Such &#x201c;macro-definitions&#x201d; or &#x201c;libraries&#x201d; are essentially pre-compiled tasks or actions, which have already been mapped to types of composite circuit elements <b>260</b> and which have been correspondingly linked (with regional constraints, if any), with a corresponding symbolic netlist. For example, an IFFT may be mapped to an IFFT library, which contains all of the composite element-type and composite element-linkage information to carry out an IFFT using the apparatus <b>100</b>. Such library creation may occur at any of various levels, such as mapping various algorithms of H.264 for streaming media, for example.</p>
<p id="p-0166" num="0165">Moreover, there may be multiple sets of such mappings and linkages for any selected action or task, which may be optimized for different goals, each of which may result in a different symbolic netlist. For example, as mentioned above, a task to be performed by a triple-ALU-type composite element <b>260</b> may instead be mapped to three single ALU-type composite elements <b>260</b>. While this could potentially decrease bandwidth or speed of performance, it may allow performance by the apparatus <b>100</b> when other, higher priority algorithms are utilizing all available contexts of all available triple-ALU-type composite elements <b>260</b>. Similarly, a task to be performed by an ALU-type composite element <b>260</b> may instead be mapped to a plurality of addition- and multiplication-type composite elements <b>260</b>, creating yet another mapping and linking variation.</p>
<p id="p-0167" num="0166">As a result of these mapping and linking variations which are available, any selected algorithm may have multiple symbolic netlists generated, each optimized or selected for a different goal, such as speed of performance, power minimization, ability to run with diminished resources, safety, redundancy, conflict resolution, and so on. For example, referring to <figref idref="DRAWINGS">FIG. 1</figref>, in the event a significant portion of the IC is damaged, such that the optimal algorithm for ABS no longer has sufficient IC resources to run, another (sub-optimal) version of the ABS functionality may be loaded and bound in the IC, enabling an important function to continue to operate and avoid potentially harmful consequences under circumstances in which another IC, such as a standard microprocessor, would fail completely.</p>
<p id="p-0168" num="0167">Following symbolic netlist generation in step <b>450</b>, the compilation method determines whether additional algorithms are to be compiled or, as discussed above, additional versions or alternatives for a selected algorithm are to be compiled, step <b>455</b>, and if so, the method returns to step <b>405</b> and iterates. When no further algorithms or versions of algorithms are to be compiled in step <b>455</b>, the method may end, return step <b>460</b>.</p>
<p id="p-0169" num="0168">C. Operating System</p>
<p id="p-0170" num="0169"><figref idref="DRAWINGS">FIG. 12</figref> is a flow diagram illustrating at a high level an exemplary operating system or process in accordance with the teachings of the present invention. It should be understood that the following discussion is very high level for purposes of explaining the present invention. In addition to being performed by the various SMEs <b>290</b>, alternatively, this operating system functionality could be performed by one or more additional controllers <b>175</b>.</p>
<p id="p-0171" num="0170">The process begins, starting with step <b>500</b>, with the apparatus <b>100</b> being powered on, such as part of an SOC or within another system, such as a vehicle, a computer, a complex system, a mobile telephone, a personal digital assistant, an MP3 player, and so on. A self-test is performed, step <b>505</b>, typically by each of the state machine elements <b>290</b>, which may test themselves and, in exemplary embodiments, the various composite circuit elements <b>260</b>, first communication elements <b>250</b>, full interconnect element(s) <b>275</b> or distributed full interconnect elements <b>295</b>, other state machine elements <b>290</b>, and other logic, communication or memory elements within their corresponding clusters <b>200</b> or other clusters <b>200</b> (e.g., for those clusters <b>200</b> implemented without corresponding SMEs <b>290</b>). There are a wide variety of methods to determine whether these various components are operating properly. In an exemplary embodiment, the operational determination is performed by a composite circuit element (with composite circuit element utilized in its inclusive sense, including of all of the various composite circuit elements <b>260</b>, first communication elements <b>250</b>, full interconnect element(s) <b>275</b> or distributed full interconnect elements <b>295</b>, other state machine elements <b>290</b>, and other logic, communication or memory elements within their corresponding clusters <b>200</b> or other clusters <b>200</b>), and is at least one of the following types of determinations: a periodic diagnostic performed by at least one composite circuit element of the plurality of composite circuit elements; a background diagnostic performed as a selected context of at least one composite circuit element of the plurality of composite circuit elements; or a comparison test performed by a plurality of composite circuit elements of the same circuit element type. For example, each of the various types of composite circuit elements, including the types of elements <b>270</b>, may each perform a diagnostic self-test, followed by comparing their corresponding results. If the results of a first composite circuit elements does not match the expected result, such as by comparison of the results of other composite circuit elements <b>260</b> of the same type, the first composite circuit element is deemed defective or not properly operational, and is not included within the map or list of available resources (step <b>515</b>, below).</p>
<p id="p-0172" num="0171">One or more of the SMEs <b>290</b> (or controllers <b>175</b>) will then obtain and execute a boot program, step <b>510</b>, such as a program designed and stored for the apparatus <b>100</b> in an associated memory (e.g., flash or other EEPROM memory) or other data storage device, such as a hard disk drive, an optical drive, etc., which may be part of the same IC or associated system.</p>
<p id="p-0173" num="0172">Two significant functions are performed as part of the boot process of the operating system in steps <b>515</b> and <b>520</b>. One or more of the SMEs <b>290</b> creates a map or list of available apparatus <b>100</b> resources, such as a list within a cluster <b>200</b> or supercluster <b>185</b> of which composite circuit elements <b>260</b>, first communication elements <b>250</b>, and other components are functioning properly, step <b>515</b> (e.g., similar to creating a bad or good sector map for a memory or disk drive). Step <b>515</b> may be performed, for example, by each SME <b>290</b> for its corresponding cluster <b>200</b>, or by one or more SMEs <b>290</b> (pre-designated or as determined in the boot program) for an entire supercluster <b>185</b> or matrix <b>150</b>. In an exemplary embodiment, step <b>515</b> is performed by combinational logic elements, as illustrated in and as discussed below with reference to <figref idref="DRAWINGS">FIG. 13</figref>, which may be located or distributed within a composite circuit element <b>260</b>, a cluster <b>200</b>, and throughout the matrix hierarchy. In addition, in step <b>520</b>, a master controller is determined, which may be one selected SME <b>290</b> or a plurality of SMEs <b>290</b> operating as a master controller, or may be one or more additional controllers <b>175</b> or other, off-chip controllers, processors, or state machines. In an exemplary embodiment, a master controller is determined as a SME <b>290</b> having the lowest address (at the time).</p>
<p id="p-0174" num="0173">The operating system, through one or more state machine elements <b>290</b> (or controllers <b>175</b>), potentially with user input, then determines or selects which programs, algorithms or functions are to be performed, step <b>525</b>, such as selecting the ABS, traction control, video and navigational programs previously discussed. Next, in step <b>530</b>, the operating system binds the symbolic netlist(s) of the selected programs to the available resources (determined in step <b>515</b>), by assigning a task and action(s) (or instruction(s)) to a selected composite circuit element <b>260</b> (as one or more contexts), by linking the inputs of the selected composite circuit element <b>260</b> to the other corresponding composite circuit elements <b>260</b> which are its data sources, to provide its input data (which also correspondingly links these data source outputs to the inputs of the selected composite circuit element <b>260</b> as data destinations), and/or by linking the outputs of the selected composite circuit element <b>260</b> (as data sources) to the other corresponding composite circuit elements <b>260</b> which are its data destinations, to utilize the data produced by the selected composite circuit elements <b>260</b> (which also correspondingly links the inputs of these data destinations to the outputs of the selected composite circuit element <b>260</b> (as a data source)).</p>
<p id="p-0175" num="0174">Once all tasks and actions (or instructions) are bound (assigned and linked), the apparatus <b>100</b> commences execution or running of the corresponding programs or operations, step <b>535</b>, such as operating the ABS and traction control systems, playing a video for passengers, and providing a real-time navigational display for the driver. The binding (assigning and linking) process is discussed in detail below with reference to <figref idref="DRAWINGS">FIG. 14</figref>. The control of the program (or operational) execution process in each composite circuit element <b>260</b> is discussed in greater detail below with reference to <figref idref="DRAWINGS">FIG. 16</figref>.</p>
<p id="p-0176" num="0175">The operating system may also determine that new or different functionality is needed, step <b>540</b>, such as when a user or operator selects an additional program, or circumstances require a change in functionality, such as through a sensor detecting a particular condition. For example, in a vehicle environment, a sensor may detect a change in driving or road conditions, and adjust various programs accordingly. When new or different functionality is needed in step <b>540</b>, the method rebinds (re-assigns and re-links) the affected tasks and actions (or instructions), step <b>545</b>, and the apparatus <b>100</b> continues to operate with these various changes. The tasks and actions (or instructions) may be moved to new locations, or existing or new tasks and actions (or instructions) may be loaded, assigned and bound. The operating system may also bind or re-bind an entire program or functionality de novo. This re-binding step <b>545</b> may also include unbinding, that is, completely removing an assigned functionality, such as by deleting its corresponding contexts from memory. Such unbinding may occur, for example, when the apparatus <b>100</b> is already at capacity, and room must be created for the new or different functionality. Such unbinding was illustrated in <figref idref="DRAWINGS">FIG. 1</figref>, when video functioning was removed as the apparatus <b>100</b> increasingly lost capacity through IC damage.</p>
<p id="p-0177" num="0176">The apparatus <b>100</b>, through one or more state machine elements <b>290</b> (or controllers <b>175</b>) performing the operating system (or as part of a built-in self test (&#x201c;BIST&#x201d;)), periodically performs a limited or full self-test, step <b>550</b>, to detect any changes in availability of resources, step <b>555</b>. For example, the self-test may reveal that a BREO-type circuit element <b>270</b> is no longer functioning properly, and therefore should no longer be available for use within the apparatus <b>100</b>. When such damage or loss of functionality occurs in step <b>555</b>, the operating system (through the SMEs <b>290</b> or controllers <b>175</b>) correspondingly modifies the map or list of available resources, step <b>560</b>, rebinds the affected tasks and actions (or instructions) using the modified list or map, step <b>565</b>, and the apparatus <b>100</b> continues to operate with these various changes.</p>
<p id="p-0178" num="0177">When no such damage or loss of functionality has occurred in step <b>555</b>, or following step <b>565</b>, the method proceeds to step <b>570</b>. In step <b>570</b>, the apparatus <b>100</b> may continue operating, returning to step <b>535</b>. In the event that operations are to cease in step <b>570</b>, such as by the user selecting to turn off the device having the apparatus <b>100</b>, the apparatus <b>100</b> may shut down or power off, return step <b>575</b>.</p>
<p id="p-0179" num="0178">Not separately illustrated in <figref idref="DRAWINGS">FIG. 12</figref>, in another exemplary embodiment, the plurality of composite circuit elements <b>260</b> may be implemented or adapted to store periodically a then current state, such as a &#x201c;snapshot&#x201d; of its current operations. Subsequently, in response to a detected fault, the composite circuit elements <b>260</b> are adapted to retrieve the stored state and recommence operation using the stored state.</p>
<p id="p-0180" num="0179">D. Symbolic Netlist Assignment and Run-Time Binding</p>
<p id="p-0181" num="0180">With this background in mind, the run-time binding process may now be explained. As indicated above, the inventive architecture in conjunction with the run-time binding of a symbolic netlist (or other program compilation) enable the self-healing and resiliency of the apparatus <b>100</b>. More particularly, when any of the composite circuit elements <b>260</b>, SMEs <b>290</b>, first communication elements <b>250</b>, full interconnect element(s) <b>275</b> or distributed full interconnect element(s) <b>295</b>, other cluster <b>200</b> components, or routing or other communications elements (<b>190</b>, <b>210</b>), either do not perform properly initially (as determined in step <b>515</b> during testing portions of the boot process) or during later operation (as determined during self-test or as determined by other components, steps <b>550</b>, <b>555</b>), they are not placed on or are removed from the map or list of available resources, respectively. If not performing properly initially, the affected component is never assigned any functionality in step <b>530</b>. If the affected component was originally functioning and is no longer (step <b>555</b>), it is removed from the list or map of available resources, and its assigned functionality is moved or loaded to another available component and re-routed, separately or as part of the rebinding of the corresponding tasks or instructions of step <b>565</b>. If it has been determined that the data has been corrupted, the controlling task is notified so that the appropriate action can be taken. This binding process is explained in detail below.</p>
<p id="p-0182" num="0181">1. Resource Availability</p>
<p id="p-0183" num="0182"><figref idref="DRAWINGS">FIG. 13</figref> is a block diagram illustrating exemplary combinational logic circuitry <b>600</b> for context availability determination within an exemplary apparatus <b>100</b> in accordance with the teachings of the present invention. Such circuitry <b>600</b> may be included within each composite circuit element <b>260</b>, such as within a circuit element <b>270</b>, an element controller <b>325</b>, within a SME <b>290</b>, or as separate combinational logic (not separately illustrated in <figref idref="DRAWINGS">FIG. 8</figref>). As mentioned above, the number of available contexts for each type of composite circuit element <b>260</b> is determined for use in binding (or re-binding) a program or algorithm for performance within the apparatus <b>100</b>. Such determination may be made by one or more SMEs <b>290</b>, controllers <b>175</b>, or as illustrated in <figref idref="DRAWINGS">FIG. 13</figref>, dedicated combinational logic circuitry <b>600</b>.</p>
<p id="p-0184" num="0183">Referring to <figref idref="DRAWINGS">FIG. 13</figref>, as part of the information stored in the memory <b>330</b> within each composite circuit element <b>260</b> is a state bit and a first condition bit, for each context. The state bit indicates whether the context has been assigned or allocated to an action (or instruction) or not, and is therefore free or available to be assigned (logic high or one), or is not free and available to be assigned (logic low or zero). Alternatively, the state may be determined by examining the memory <b>330</b> to determine whether the action ID and task ID fields are zero or non-zero for the selected context, indicating available (no assigned or allocated action ID and task ID) or unavailable (already assigned or allocated action ID and task ID), and then inverted to be utilized as the state bit in <figref idref="DRAWINGS">FIG. 13</figref>. The first condition bit indicates whether the composite circuit element <b>260</b> is operational (logic high or one) or non-operational (logic low or zero), as determined from the various exemplary self-test processes discussed above. For each context (of &#x201c;m&#x201d; contexts), a first AND operation is performed on the corresponding state bit and first condition bit, via AND gates <b>605</b> (illustrated as the plurality of AND gates <b>605</b><sub>0</sub>, <b>605</b><sub>1</sub>, through <b>605</b><sub>(m-1)</sub>, such that the result of the AND operation indicates that the context is both available and that the composite circuit element <b>260</b> is working properly (logic high or one), or that either the context is not available or that the composite circuit element <b>260</b> is not working properly (logic low or zero).</p>
<p id="p-0185" num="0184">A second, controller (SME <b>290</b>) condition bit is utilized to indicate whether the SME <b>290</b> (within the cluster <b>200</b>) is operational (logic high or one) or non-operational (logic low or zero), also as determined from the various exemplary self-test processes discussed above, and may be stored in any of the various memories within the composite circuit element <b>260</b> or cluster <b>200</b>. A second AND operation is performed using this first AND result (state and first condition bit) and the second, controller condition bit (via the plurality of AND gates <b>610</b><sub>0</sub>, <b>610</b><sub>1</sub>, through <b>610</b><sub>(m-1)</sub>), such that the result of the second AND operation indicates that the context is both available and that both the composite circuit element <b>260</b> and SME <b>290</b> are working properly (logic high or one), or that the context is not available, that the composite circuit element <b>260</b> is not working properly, or that the SME <b>290</b> is not working properly (logic low or zero). The first and second AND operations also may be performed as a single, combined AND operation having at least three inputs (state bit, first condition bit, and second condition bit). The results of the second AND operation for each context may be added, such as by using a &#x201c;one-hot&#x201d; adder <b>615</b> (or a SME <b>290</b> or other controller), providing the number of free contexts per composite circuit element <b>260</b> (with a working SME <b>290</b>).</p>
<p id="p-0186" num="0185">As illustrated, this process may continue up the matrix hierarchy, with the number of free contexts per composite circuit element <b>260</b> added together for each type of composite circuit element <b>260</b> within a cluster <b>200</b>, then added together for each type of composite circuit element <b>260</b> within a supercluster <b>185</b>, then added together for each type of composite circuit element <b>260</b> within a matrix <b>150</b>, and then added together for each type of composite circuit element <b>260</b> within the apparatus <b>100</b>. These additional ADD operations may be performed using dedicated ADDERs (e.g., <b>620</b>, <b>625</b>, <b>630</b>) or by using composite circuit elements <b>260</b> configured for ADD operations and under the control of their corresponding SMEs <b>290</b>. As a result, availability counts for each type of composite circuit element <b>260</b> may be determined and maintained at each level, namely, at a cluster <b>200</b> level, a supercluster <b>185</b> level, a matrix <b>150</b> level, and an apparatus level.</p>
<p id="p-0187" num="0186">Such counts at these various levels are particularly useful for determining whether a supercluster <b>185</b> or cluster <b>200</b> has availability to satisfy a regional constraint, such as when a number of operations must be performed with timing constraints using certain types of composite circuit elements <b>260</b> within a cluster <b>200</b> or supercluster <b>185</b>. In addition, using such combinational logic circuitry, composite circuit element <b>260</b> availability is determined and maintained rapidly, concurrently and in parallel for all clusters <b>200</b>, with delays only from several AND and ADD operations (e.g., two AND delays and four ADD delays total for an entire matrix <b>150</b>).</p>
<p id="p-0188" num="0187">As an alternative for availability determination, the SME <b>290</b> may be utilized to poll or examine the various registers of all of the memories <b>330</b> of the corresponding composite circuit elements <b>260</b> within the cluster <b>200</b>, and add up the results by type of composite circuit element <b>260</b> for each cluster, with one or more selected SMEs <b>290</b> then adding up results for each supercluster <b>185</b> and matrix <b>150</b>. Such availability determination may be top-down in the matrix hierarchy, such as initiated by a master controller (which may be a designated SME <b>290</b> or a controller <b>175</b>), or bottom-up in the matrix hierarchy, such as illustrated in <figref idref="DRAWINGS">FIG. 13</figref> or as provided by each of the SMEs <b>290</b> within each cluster <b>200</b>. It will be apparent to those of skill in the electronic arts that there are innumerable ways of providing this availability determination, using combinational, conditional or control logic, all of which are considered equivalent and within the scope of the present invention.</p>
<p id="p-0189" num="0188">2. Symbolic Netlist Assignment</p>
<p id="p-0190" num="0189"><figref idref="DRAWINGS">FIG. 14</figref>, divided into <figref idref="DRAWINGS">FIGS. 14A</figref>, <b>14</b>B, <b>14</b>C and <b>14</b>D, is a flow diagram illustrating an exemplary algorithm or symbolic netlist run-time binding process in accordance with the teachings of the present invention, and further illustrates significant functionality associated with the state machine elements <b>290</b> distributed throughout the apparatus <b>100</b>. Alternatively, this functionality could be performed by one or more additional controllers <b>175</b>, such as a controller <b>175</b> designated as a master controller for the apparatus <b>100</b>. In addition to the binding process illustrated, those of skill in the art will recognize that numerous variations of the methodology are available, and are considered equivalent and within the scope of the present invention. At least one such variation is also discussed below.</p>
<p id="p-0191" num="0190">As mentioned above, the apparatus <b>100</b> performs a run-time binding operation of an algorithm provided as a symbolic netlist, which may be considered similar to a place and route operation for programmable resources with programmable routing. In this case, the programmable resources themselves have been placed on the IC, and the binding process then assigns an action (or instruction) (as part of a task) to one or more contexts of one or more available resources, and provides the corresponding routing or linkage of inputs and outputs. In contrast with prior art place and route methodologies, which may take hours or days to run, the methodology of the invention operates quite rapidly, on the scale of microseconds or milliseconds to seconds.</p>
<p id="p-0192" num="0191">Referring to <figref idref="DRAWINGS">FIG. 14A</figref> (<figref idref="DRAWINGS">FIG. 14A</figref>), the method begins, start step <b>700</b>, with the determination and/or maintenance of the availability counts for each type of composite circuit element <b>260</b>, preferably at the cluster, supercluster, and matrix levels, as discussed above. The first (or next) action (i.e., function or instruction), as symbolic netlist elements, are provided to a master controller, step <b>705</b>, which may be one or more designated SMEs <b>290</b> or one or more controllers <b>175</b>, for example. The designated SME <b>290</b> or controller <b>175</b> then determines whether the action (function or instruction) includes a regional or proximity constraint, step <b>710</b>, and if so, proceeds to step <b>715</b>. When the action (or instruction) does not include a regional constraint in step <b>710</b>, the action (or instruction) is provided to a supercluster and a cluster level having sufficient availability of resources for the instruction, step <b>750</b>, such as a sufficient number of available contexts for the one or more types of composite circuit elements <b>260</b> provided in the symbolic netlist.</p>
<p id="p-0193" num="0192">The SME(s) <b>290</b> of the available cluster(s) <b>200</b> assign(s) the action (or instruction) to one or more available composite circuit elements <b>260</b> in the cluster(s) <b>200</b>, step <b>755</b>, by storing the corresponding information (configuration, the task ID, the action ID, and the source (or destination) task ID and action ID) in the corresponding memory <b>330</b> of each such composite circuit element <b>260</b>, or stored in a memory composite circuit element <b>260</b>, the second memory element <b>255</b>, or other memory accessible to the SME <b>290</b> and the composite circuit element <b>260</b>. The amount and location of the stored information may vary among selected embodiments. In an exemplary embodiment, the action (or instruction) is stored locally in the memory <b>330</b> (or otherwise within the cluster <b>200</b>) as a configuration, task ID, action ID, with corresponding linkage information (either data source for inputs or data destination for outputs, also by task ID and action ID). Following the assignment, the availability count is modified, step <b>760</b>, such as automatically modified as described above for <figref idref="DRAWINGS">FIG. 13</figref>, or by decrementing a count maintained in a register when, for example, the various counts are maintained by a designated SME <b>290</b> or controller <b>175</b>.</p>
<p id="p-0194" num="0193">The method then determines whether all actions (or instructions) have been assigned, step <b>765</b>. When there are actions (or instructions) remaining to be assigned, the method then determines whether there are available resources remaining, step <b>770</b>. When there are available resources remaining in step <b>770</b>, the method returns to step <b>705</b> and iterates, selecting and assigning the next action (or instruction). When there are no more actions (or instructions) remaining for assignment, the method proceeds to step <b>800</b> to commence with routing (i.e., linking) all of the assigned actions (or instructions).</p>
<p id="p-0195" num="0194">When there are actions (or instructions) remaining to be assigned in step <b>765</b>, but there are no more available resources in step <b>770</b>, indicating that the selected algorithm may not be able to operate on the apparatus <b>100</b> as currently configured (or available), an error or exception message is generated, step <b>775</b>, and the method may end, return step <b>780</b>, as the symbolic netlist of the selected program cannot be currently assigned. In that event, there are many potential courses of action. For example, the designated SME <b>290</b> or controller <b>175</b> may delete lower priority programs or operations which are consuming or utilizing resources, to make room for the selected program or operations and allow the selected program to execute on the apparatus <b>100</b>. In other instances, the designated SME <b>290</b> or controller <b>175</b> may select another version of the program which may be able to be assigned without removing such other programs. In other instances, it may indicate that a larger apparatus <b>100</b> with more resources is needed for the selected application.</p>
<p id="p-0196" num="0195">When the selected action (or instruction) includes a regional constraint in step <b>710</b>, the method proceeds to step <b>715</b>, as illustrated in <figref idref="DRAWINGS">FIG. 14B</figref>. Such a regional constraint may take the form of, for example:</p>
<p id="p-0197" num="0196">
<tables id="TABLE-US-00001" num="00001">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="3">
<colspec colname="offset" colwidth="28pt" align="left"/>
<colspec colname="1" colwidth="35pt" align="left"/>
<colspec colname="2" colwidth="154pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="2" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>&#x2003;</entry>
<entry>region 3 supercluster</entry>
</row>
<row>
<entry/>
<entry/>
<entry>&#x2003;region 1 cluster actions I1, I2</entry>
</row>
<row>
<entry/>
<entry/>
<entry>&#x2003;&#x2003;I1</entry>
</row>
<row>
<entry/>
<entry/>
<entry>&#x2003;&#x2003;I2</entry>
</row>
<row>
<entry/>
<entry/>
<entry>&#x2003;end region</entry>
</row>
<row>
<entry/>
<entry/>
<entry>&#x2003;region 2 cluster actions I3, I4</entry>
</row>
<row>
<entry/>
<entry/>
<entry>&#x2003;&#x2003;I3</entry>
</row>
<row>
<entry/>
<entry/>
<entry>&#x2003;&#x2003;I4</entry>
</row>
<row>
<entry/>
<entry/>
<entry>&#x2003;end region</entry>
</row>
<row>
<entry/>
<entry/>
<entry>end region</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="2" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
<br/>
in which a supercluster regional (proximity) constraint incorporates two cluster-level regional constraints, each of which has included actions (or instructions) subject to the constraint (&#x201c;constrained actions&#x201d;). As illustrated in this example, actions (or instructions) I1 and I2 (as symbolic netlist elements) must be assigned within the same cluster <b>200</b>, and actions (or instructions) I3 and I4 (as symbolic netlist elements) must be assigned within the same cluster <b>200</b> (as Region 2, which may be the same or a different cluster than the Region 1 cluster of I1 and I2). Both clusters <b>200</b>, however, must be in the same supercluster, as incorporated within the supercluster constraint (region 3).
</p>
<p id="p-0198" num="0197">In step <b>715</b>, the designated SME <b>290</b> or controller <b>175</b> determines whether the constraint is a supercluster constraint, which would require the set of constrained actions to be assigned within the same supercluster <b>185</b>. When the regional constraint is for a supercluster in step <b>715</b>, the designated SME <b>290</b> or controller <b>175</b> provides the supercluster constraint to all available superclusters <b>185</b> which meet the availability requirements of the constraint, and temporarily designates or marks those one or more superclusters as candidates, step <b>720</b>. Following step <b>720</b>, or when the constraint is not a supercluster constraint in step <b>715</b>, the constrained actions are provided to all available clusters <b>200</b> which meet the first cluster constraint (within one or more superclusters, if required by the previous constraint), such as the various clusters which meet the Region 1 constraint of the example, and those clusters <b>200</b> are temporarily designated as candidates, step <b>725</b>. The next set of cluster-level constrained actions, if any, are provided to all available clusters <b>200</b> which meet the next cluster constraint (within one or more superclusters, if required by the previous constraint), such as the various clusters which meet the Region 2 constraint of the example, and those clusters <b>200</b> are also temporarily designated as candidates, step <b>730</b>. In addition, those superclusters or clusters which had previously been candidates, but now do not contain sufficient available clusters to meet these additional constraints, may now be released and no longer designated as candidates for the regional constraints. When there are additional constraints to be processed, step <b>735</b>, the method returns to step <b>730</b>, and continues the temporary designation process.</p>
<p id="p-0199" num="0198">When no further constraints need to be processed in step <b>735</b>, the method determines whether one or more matches (supercluster and/or cluster levels) have been found, step <b>740</b>. When one or more matches have been found in step <b>740</b>, the designated SME <b>290</b> or controller <b>175</b> selects at least one such match, assigns the constrained actions (or instructions) to the selected candidate set, releases all the other tentative assignments, and proceeds to step <b>760</b>, to modify the availability counts and continue the assignment process, as discussed above. When no match has been found in step <b>740</b>, indicating that the selected algorithm may not be able to operate on the apparatus <b>100</b> as currently configured (or available), the method returns to step <b>775</b> and generates an error or exception message, and the method may end, return step <b>780</b>, as the symbolic netlist of the selected program with the constraints cannot be currently assigned. As mentioned above, in that event, there are many potential courses of action. For example, the designated SME <b>290</b> or controller <b>175</b> may delete lower priority programs or operations or may utilize another version of the program which may be assigned more readily.</p>
<p id="p-0200" num="0199">3. Run-Time Binding</p>
<p id="p-0201" num="0200">When all actions (or instructions) have been assigned in step <b>765</b>, the actions (or instructions) may be connected or routed, to establish all of the data communication paths which will be utilized during operation of the apparatus <b>100</b> to execute the selected program or algorithm. As indicated above, each action (or instruction) has input or output information stored symbolically with the configuration for the selected context of a selected composite circuit element <b>260</b>. More specifically, the input or output information is stored effectively as pointers, with one task ID and action ID pointing to another task ID and action ID as either its data source (for input data) or data destination (to provide output data). Such information is stored symbolically or generically, because until the action (or instruction) has been assigned, the actual address for the data source or data destination is unknown. Provided that either data source information is utilized consistently, or data destination information is utilized consistently, only one such set of information is needed, although both can be utilized to potentially increase resiliency. In accordance with the exemplary embodiments, such data source or data destination information is utilized to connect the data inputs (for the input queues <b>320</b>) of a composite circuit element <b>260</b>, for each context, with the data outputs <b>375</b> (via output queues <b>315</b>) of a context of another composite circuit element <b>260</b> (or the same composite circuit element <b>260</b>, for a feedback configuration). This creates either direct data connections (circuit-switched within a cluster <b>200</b>) or packet-routed (hybrid packet-routed and circuit switched between clusters) data connections for data flow and, in either case, data is provided without requiring intermediate or separate steps of data storage in a register and data fetching from a register.</p>
<p id="p-0202" num="0201">Following step <b>765</b>, the routing process begins, step <b>800</b>, as illustrated in <figref idref="DRAWINGS">FIG. 14C</figref>. In the exemplary embodiment illustrated in <figref idref="DRAWINGS">FIG. 14C</figref>, the process is &#x201c;bottom-up&#x201d;, beginning at the cluster <b>200</b> level and proceeding to higher levels (supercluster and matrix levels) as needed. Not separately illustrated, the process may also be initiated from a &#x201c;top-down&#x201d; perspective, such as by the designated SME <b>290</b> or controller <b>175</b> transmitting a request to the SMEs <b>290</b> of the clusters <b>200</b> to initiate the routing process of step <b>800</b>.</p>
<p id="p-0203" num="0202">Referring to <figref idref="DRAWINGS">FIG. 14C</figref>, step <b>800</b>, one or more SMEs <b>290</b> of the corresponding clusters <b>200</b> begin the routing process by selecting an action (or instruction) of a first context of a composite circuit element <b>260</b>, and determining the source (or destination) task and action identifiers stored as part of the selected action (or instruction). In exemplary embodiments, this process may be performed by each SME <b>290</b> of each cluster <b>200</b> as a parallel process, resulting in a very highly efficient binding routing process.</p>
<p id="p-0204" num="0203">As indicated above, these source (or destination) task and action IDs, in selected embodiments, are stored in the memory <b>330</b> of the element interface and control <b>280</b> of the composite circuit element <b>260</b>. In alternative embodiments, the source (or destination) task and action identifiers may be stored in other memory elements, such as a memory-type composite circuit element <b>260</b><sub>M</sub>, second memory element <b>255</b>, or other memory elements which may be included within a cluster <b>200</b>. To facilitate routing, the memory <b>330</b> (or other memory element) may be implemented as a content addressable memory (&#x201c;CAM&#x201d;), as mentioned above, or as any other type of memory. Consequently, in step <b>805</b>, for routing at a first level of hierarchy, a SME <b>290</b> may examine all of the memories (<b>330</b>, <b>255</b>, <b>260</b><sub>M</sub>, etc.) within its cluster <b>200</b> by these source (or destination) task and action identifiers of the first context (the composite circuit element <b>260</b> context to be routed) to find the corresponding action (or instruction) of another, second context which matches these source (or destination) task and action identifiers. When other forms of memory are utilized instead of a CAM, e.g., SDRAM, then the SME <b>290</b> may perform a search of the memory (<b>330</b>, <b>255</b>, <b>260</b><sub>M</sub>, or other memory storing the task ID and action ID), such as a binary search, to find the corresponding action (or instruction) of another, second context which matches these source (or destination) task and action identifiers.</p>
<p id="p-0205" num="0204">When the matching action (or instruction) (having the corresponding task and action identifiers) of a second context of a composite circuit element <b>260</b> has been found within a memory (<b>330</b>, <b>255</b>, <b>260</b><sub>M</sub>, etc.), in step <b>810</b>, the SME <b>290</b> then knows to route the selected, first context to this second context having the matching or corresponding action (or instruction). As a consequence, in step <b>815</b>, when source task and action identifiers are stored, the SME <b>290</b> routes the input(s) of the first context (as a data destination) to the corresponding output of the second context (as a data source), and when destination task and action identifiers are stored, the SME <b>290</b> routes the output(s) of the first context (as a data source) to the corresponding input(s) of the second context (as a data destination). Within the cluster <b>200</b>, the SME <b>290</b> establishes these internal cluster connections via the full interconnect element <b>275</b> or distributed full interconnect element <b>295</b>. Following step <b>815</b>, when there are additional actions (or instructions) to be routed in step <b>820</b>, the method continues iteratively, returning to step <b>800</b>, with a SME <b>290</b> or other controller selecting the next action (or instruction) to be routed.</p>
<p id="p-0206" num="0205">When the matching action (or instruction) (having the corresponding task and action identifiers) of a second context of a composite circuit element <b>260</b> has not been found within a memory (<b>330</b>, <b>255</b>, <b>260</b><sub>M</sub>, etc.) of its cluster <b>200</b>, in step <b>810</b>, the SME <b>290</b> then knows that the corresponding data source or destination is not within its cluster <b>200</b> (referred to as a first cluster <b>200</b>). As a consequence, in step <b>825</b>, the SME <b>290</b> both: (1) routes the selected, first context to the periphery of the first cluster <b>200</b> (to one of the first communication elements <b>250</b> for data transmission via interconnect <b>155</b>, through the full interconnect element <b>275</b>, distributed full interconnect element <b>295</b>, or the message manager <b>265</b>, or otherwise directly to the first communication element <b>250</b>); and (2) generates a routing request (query) to the supercluster-level controller (which may be a designated SME <b>290</b> or controller <b>175</b> having this assigned duty) to find a second context in another cluster <b>200</b> of its supercluster <b>185</b> which may have the matching or corresponding action (or instruction). From the perspective of the SME <b>290</b> of the first cluster <b>200</b>, its routing of the first context is complete, and it may proceed with routing of other contexts (actions (or instructions)), if any, returning to step <b>820</b>, with the supercluster controller (designated SME <b>290</b> or controller <b>175</b>) then proceeding to step <b>830</b>.</p>
<p id="p-0207" num="0206">Having received a routing request (designating the second context), in step <b>830</b>, the supercluster controller transmits a request or query to all (other) clusters <b>200</b> within its supercluster <b>185</b>, for those SMEs <b>290</b> to determine whether the corresponding action (or instruction) is located in one of their memories (<b>330</b>, <b>255</b>, <b>260</b><sub>M</sub>, etc.), for routing at a second level of hierarchy. When one of these other clusters <b>200</b>, as a second cluster <b>200</b>, has the matching or corresponding action (or instruction) (i.e., has the source (or destination) task and action identifiers of the first context) as a second context of one of its composite circuit elements <b>260</b>, step <b>835</b>, this second cluster <b>200</b> then knows that this second context is the source or destination for data which is to be routed to or from another, first cluster <b>200</b>. As a consequence, in step <b>840</b>, the second SME <b>290</b> of the second cluster <b>200</b> routes this second context to the periphery of the second cluster <b>200</b> (to one of the first communication elements <b>250</b> for data transmission via interconnect <b>155</b>, through the full interconnect element <b>275</b>, distributed full interconnect element <b>295</b>, the message manager <b>265</b>, or otherwise directly to the first communication element <b>250</b>), and transmits a corresponding message to the supercluster controller (designated SME <b>290</b> or controller <b>175</b>), indicating or providing information that it has the second context having the matching or corresponding action (or instruction). The supercluster controller, in turn, creates a corresponding linkage between the first cluster <b>200</b> and the second cluster <b>200</b>, for the corresponding contexts, step <b>845</b>, such as by storing corresponding routing information in a second communication element <b>210</b>, and the cluster-to-cluster routing is complete. From the perspective of the SME <b>290</b> of the second cluster <b>200</b>, its routing is also complete, and it may proceed with routing of its other contexts (actions (or instructions)), if any, also returning to step <b>820</b>.</p>
<p id="p-0208" num="0207">In step <b>835</b>, when none of these other clusters <b>200</b> within the selected, first supercluster <b>185</b> has the matching or corresponding action (or instruction) (with the source (or destination) task and action identifiers of the first context) in a second context of one of its composite circuit elements <b>260</b>, the supercluster controller then knows that the corresponding data source or destination is not within its supercluster <b>185</b> (referred to as a first supercluster <b>185</b>). As a consequence, in step <b>860</b> (illustrated in <figref idref="DRAWINGS">FIG. 14D</figref>), the first supercluster controller both: (1) routes the first context to the periphery of the first supercluster <b>185</b> (i.e., to one of the second communication elements <b>210</b>); and (2) generates a routing request to the matrix-level controller (which also may be a designated SME <b>290</b> or controller <b>175</b> having this assigned duty) to find a second context in another supercluster <b>185</b> of its matrix <b>150</b> which may have the matching or corresponding action (or instruction), for routing at a third level of hierarchy. From the perspective of the designated SME <b>290</b> or controller <b>175</b> of the first supercluster <b>185</b>, its routing is complete, and the method returns to step <b>820</b>, to continue the routing process for other actions, as may be needed, and also proceeds to step <b>865</b>.</p>
<p id="p-0209" num="0208">Having received a routing request (designating the second context), in step <b>865</b>, the matrix controller transmits a request or query to all (other) clusters <b>200</b> within its matrix <b>150</b>, for those SMEs <b>290</b> to determine whether the corresponding action (or instruction) is located in one of their memories (<b>330</b>, <b>255</b>, <b>260</b><sub>M</sub>, etc.), for routing at this third level of hierarchy. This routing request may be transmitted directly to SMEs <b>290</b> of the clusters <b>200</b>, or may be transmitted via supercluster controllers. When one of these other clusters <b>200</b>, as a second cluster <b>200</b>, has the matching or corresponding action (or instruction) (i.e., has the source (or destination) task and action identifiers of the first context) as a second context of one of its composite circuit elements <b>260</b>, step <b>870</b>, this second cluster <b>200</b> then knows that this second context is the source or destination for data which is to be routed to or from another, first cluster <b>200</b>. As a consequence, in step <b>875</b>, the second SME <b>290</b> of the second cluster <b>200</b> routes this second context to the periphery of the second cluster <b>200</b> (to one of the first communication elements <b>250</b> for data transmission via interconnect <b>155</b>, through the full interconnect element <b>275</b>, distributed full interconnect element <b>295</b>, the message manager <b>265</b>, or otherwise directly to the first communication element <b>250</b>), and transmits a corresponding message to the matrix controller (designated SME <b>290</b> or controller <b>175</b>), indicating or providing information that it has the second context having the matching or corresponding action (or instruction). The matrix controller, in turn, creates a corresponding linkage between the first cluster <b>200</b> and the second cluster <b>200</b>, for the corresponding contexts, step <b>880</b>, such as by storing corresponding routing information in a third communication element <b>190</b> and a second communication element <b>210</b>, and the supercluster-to-supercluster routing is complete. From the perspective of the SME <b>290</b> of the second cluster <b>200</b>, its routing is also complete, and it may proceed with routing of its other contexts (actions (or instructions)), if any, also returning to step <b>820</b>.</p>
<p id="p-0210" num="0209">In step <b>870</b>, when none of these other clusters <b>200</b> within the selected, first matrix <b>150</b> has the matching or corresponding action (or instruction) (with the source (or destination) task and action identifiers of the first context) in a second context of one of its composite circuit elements <b>260</b>, the matrix controller then knows that the corresponding data source or destination is not within the first matrix <b>150</b>. As a consequence, in step <b>885</b>, the first matrix <b>150</b> both: (1) routes the first context to the periphery of the first matrix <b>150</b> (i.e., to one of the third communication elements <b>190</b>); and (2) generates a routing request to the other matrix-level controllers (which also may be a designated SME <b>290</b> or controller <b>175</b> having this assigned duty) to find a second context in another matrix <b>150</b> of the device <b>100</b> which may have the matching or corresponding action (or instruction), for routing at a fourth level of hierarchy. From the perspective of the designated SME <b>290</b> or controller <b>175</b> of the first matrix <b>150</b>, its routing is complete, and the method returns both to step <b>820</b>, to continue the routing process for other actions, as may be needed, and the method iteratively repeats steps <b>865</b>-<b>880</b>, as needed, at the apparatus <b>100</b> level.</p>
<p id="p-0211" num="0210">As all actions (or instructions) had been assigned previously, the matching or corresponding action (or instruction) is in a second context of a composite circuit element <b>260</b> in a cluster <b>200</b> of a supercluster <b>185</b> of one of the matrices <b>150</b>, and the method searches up to the matrix or apparatus level, as needed, with those corresponding matrix- or apparatus-level controllers (designated SME <b>290</b> or controller <b>175</b>) routing to their corresponding peripheries (e.g., third communication elements <b>190</b> and any intervening second communication elements <b>210</b>) using interconnect <b>155</b> and transmitting queries to their corresponding lower-level superclusters <b>185</b> and clusters <b>200</b>.</p>
<p id="p-0212" num="0211">As a result, all actions (or instructions) become routed, connecting all data sources or data destinations with their corresponding data destinations or data sources, respectively, either within the same cluster <b>200</b> (step <b>815</b>), or between clusters <b>200</b> (steps <b>825</b>, <b>840</b>, and <b>845</b>) which are within the same supercluster <b>185</b>, or within the same matrix <b>150</b> (steps <b>875</b> and <b>880</b>), or just within the apparatus <b>100</b>. When all actions (or instructions) have been routed in step <b>820</b>, the designated SME <b>290</b> or controller <b>175</b> sets or enables the run status for the particular task ID, step <b>850</b>. When there are additional tasks of a program or algorithm which have actions remaining to be routed, step <b>855</b>, the method continues, returning to step <b>800</b>, and when there are no further tasks having actions to be routed, the method may end, return step <b>780</b>. It should also be noted that step <b>850</b>, which sets or enables the run status for the particular task, may also be performed following step <b>855</b>, when all of tasks have been routed.</p>
<p id="p-0213" num="0212">The run status, as discussed below, is a field utilized in the configuration word for a context (stored in memory <b>330</b>) and utilized by the element controller <b>325</b> to determine whether the circuit element <b>270</b> should execute a selected context (i.e., perform the corresponding action). In this case, it indicates that the task has been fully configured, with all actions (or instructions) assigned and routed, such that it may be ready to execute, provided that other conditions are also met, as discussed below. The run status may also be utilized to start or stop selected tasks, or to purge a selected task, such as to load a new task in its place.</p>
<p id="p-0214" num="0213">In addition, it will be apparent to those of skill in the electronic arts that a number of variations of the methodology of <figref idref="DRAWINGS">FIG. 14</figref> may be implemented equivalently and are within the scope of the present invention. For example, in the event that the actions (or instructions) are not stored locally in a memory <b>330</b>, or in a memory composite element <b>260</b>, or in second memory element <b>255</b>, but are stored centrally in a separate memory, a top-down approach may be utilized. Continuing with the example, a top-level controller such as a matrix-level controller (designated SME <b>290</b> or controller <b>175</b>) may initiate the routing process, examining the stored and linked actions (or instructions), determining the routing within and between the various clusters, and passing the various configurations (as contexts) to the affected composite circuit elements <b>260</b>. As another variation, the top-level controller such as a matrix-level controller (designated SME <b>290</b> or controller <b>175</b>) may simply transmit the corresponding actions (or instructions) to the clusters <b>200</b>, which then initiate the routing process as described above with reference to <figref idref="DRAWINGS">FIGS. 14C and 14D</figref>.</p>
<p id="p-0215" num="0214">Also, while one or more controllers <b>175</b> may be utilized to implement the assignment and routing processes, it is also apparent that the use of a designated SME <b>290</b> is a more robust and resilient solution. In these circumstances, any of the plurality of SMEs <b>290</b> (of the corresponding plurality of clusters <b>200</b>) may perform the various roles of supercluster <b>185</b> controller, matrix <b>150</b> controller, or apparatus <b>100</b> controller. In the event of harm or damage to a given SME <b>290</b>, innumerable other SMEs <b>290</b> are available to assume any of these roles.</p>
<p id="p-0216" num="0215">Significantly, the time involved for this assignment and routing process is linear with respect to the number of actions (or instructions) &#x201c;k&#x201d;, and proceeds quite rapidly, as it is performed concurrently in a massively parallel process within each cluster <b>200</b>. For example, depending upon the number of cluster-, supercluster- and matrix-levels &#x201c;n&#x201d; involved, the worst case amount of time per context (or instruction) is typically 3n+1 or 4n+1 clock or computation cycles, for messages to be transmitted and routing to be completed to the corresponding peripheries of each level. This is in sharp contrast with prior art routing methodologies in which the routing time, at a minimum, is a function of k<sup>2 </sup>and, if optimized, is non-deterministic and has an unpredictable routing time.</p>
<p id="p-0217" num="0216">Another advantage of this assignment and binding process of the present invention is the ability to assign and route tasks and actions (or instructions) to a plurality of heterogeneous clusters <b>200</b>. More particularly, clusters <b>200</b> are not required to be the same, and may be quite different, with different mixes of types of composite circuit elements <b>260</b>, without impacting the ability to program the resulting device. For example, any cluster <b>200</b> with many multiplier-type composite circuit elements <b>260</b> will simply have more availability for assignment of multiplication operations, such that those types of actions (or instructions) will automatically gravitate to those types of clusters <b>200</b>. In addition, the assignment and binding time would be the same for both homogeneous or heterogeneous clusters <b>200</b>.</p>
<p id="p-0218" num="0217">As discussed above with reference to <figref idref="DRAWINGS">FIG. 1</figref>, in the event of damage to or failure of one or more components within a cluster <b>200</b>, such as a composite circuit element <b>260</b> or SME <b>290</b>, the cluster <b>200</b> or the individual component may be designated or marked as unavailable. Under these circumstances, any tasks and/or actions (or instructions) assigned to an affected composite circuit element <b>260</b> should be placed with one or more other composite circuit elements <b>260</b>, and this may be performed in a wide variety of ways.</p>
<p id="p-0219" num="0218"><figref idref="DRAWINGS">FIG. 15</figref> is a flow diagram illustrating a first exemplary re-assignment and re-binding process in accordance with the teachings of the present invention. In this first approach, starting with step <b>900</b>, such as due to a failure indication during self-testing, one or more SMEs <b>290</b> (from within the same cluster <b>200</b> if unaffected by the damage or failure, or from another cluster <b>200</b>) marks or designates the affected composite circuit element <b>260</b> as unavailable, step <b>905</b>, and directs the element controller <b>325</b> of the affected composite circuit element <b>260</b> to stop executing all contexts, step <b>910</b>, typically utilizing the run status bit. The SME <b>290</b> would also transmit a message to the linked data source composite circuit elements <b>260</b>, to direct those composite circuit element(s) <b>260</b> to stop producing data and transferring it to the affected composite circuit element <b>260</b>, step <b>915</b>. The SME <b>290</b> then determines which (if any) other composite circuit elements <b>260</b> are available to take over the affected functionality (i.e., the functionality which had been performed by the affected and now unavailable composite circuit element <b>260</b>), and copies the contexts stored in the memory <b>330</b> of the affected composite circuit element <b>260</b> to one or more memories <b>330</b> of the available composite circuit element(s) <b>260</b> of the same type which have available contexts, step <b>920</b>. In an exemplary embodiment, the SME <b>290</b> may store and maintain a transformation table, which indicates which composite circuit elements <b>260</b> have availability and have the requisite type of circuit element <b>270</b> for such a transfer of functionality. The SME <b>290</b> may also copy the contents of the associated input queues <b>320</b> to the input queues <b>320</b> of the available composite circuit elements <b>260</b>, step <b>925</b>; alternatively, for certain types of real-time data, the input data may be discarded or, equivalently, allowed to remain in the associated input queues, with operations resuming at the available composite circuit element(s) <b>260</b> using newly produced data.</p>
<p id="p-0220" num="0219">The SME <b>290</b> then re-routes the connections to and from the available composite circuit elements <b>260</b>, step <b>930</b>, such as by doing source (or destination) task and action identifier searches as discussed above and, in addition, if both source and destination task and action identifier information is not stored, performing a search for the affected actions (or instructions) in other memories <b>330</b> of other composite circuit elements <b>260</b>, to determine the corresponding data destinations (or sources) to complete the routing. Other routing steps as discussed above also may be utilized as needed (e.g., for routing between clusters <b>200</b>). In step <b>935</b>, the SME <b>290</b> then resets the corresponding run status bits of the transferred contexts, to re-enable the execution of the affected actions (or instructions) by the available composite circuit element(s) <b>260</b>, and the re-assignment and re-binding process may end, return step <b>940</b>.</p>
<p id="p-0221" num="0220">In a second approach, the task may be re-assigned and re-bound (e.g., as illustrated in <figref idref="DRAWINGS">FIGS. 12-14</figref>) and, given the affected components are no longer available, no actions (or instructions) will be assigned to them. This approach also has the advantage of preserving any locality constraints, as such constraints will be included within the task actions (or instructions). In addition, as the duration of the assignment and binding process is linear with respect to the number of actions (or instructions), this re-assignment and re-binding process proceeds rapidly, with minimal disruption, particularly when the number of affected actions (or instructions) is comparatively small. As part of this process, one of the designated SMEs <b>290</b> may also direct the element controller <b>325</b> of the affected composite circuit element <b>260</b> to stop executing all contexts, transmit a message to the linked data source composite circuit element(s) <b>260</b> to direct the source composite circuit element(s) <b>260</b> to stop producing data and transferring it to the affected composite circuit element <b>260</b>, copy the contents of the associated input queues <b>320</b> to the newly assigned, available composite circuit elements <b>260</b>, and reset the run status bits for the transferred contexts of the available composite circuit elements <b>260</b>.</p>
<p id="p-0222" num="0221">As a consequence, a program or algorithm that has been compiled as a symbolic netlist for the apparatus <b>100</b> has been assigned and routed within the apparatus <b>100</b>, creating all of the composite circuit element <b>260</b> configurations (stored as contexts) and data path connections (via full interconnect element <b>275</b>, distributed full interconnect element <b>295</b>, or interconnect <b>155</b>). While the apparatus <b>100</b> has been designed to enable such assignment and routing in real time, it is not required to be performed in real-time and may be performed in advance, with all such assignment and routing within the scope of the present invention. With this background, the operation of and control of execution within the apparatus <b>100</b> may now be explained.</p>
<p id="p-0223" num="0222">E. Apparatus Operation and Control of Execution</p>
<p id="p-0224" num="0223"><figref idref="DRAWINGS">FIG. 16</figref> is a diagram illustrating an exemplary configuration and control word <b>1000</b> in accordance with the teachings of the present invention. As illustrated in <figref idref="DRAWINGS">FIG. 16</figref>, the exemplary configuration word <b>1000</b> is comprised of a plurality of data fields, and comprises at least two or more of the following data fields, in any order: an element configuration field <b>1010</b>; a task ID field <b>1015</b>; an action ID field <b>1020</b>; a destination (and/or source) address field <b>1025</b> (designating a destination (or source) composite circuit element <b>260</b>, a port, and context); an optional &#x201c;fork&#x201d; field <b>1030</b>; a significant inputs (&#x201c;SI&#x201d;) field <b>1035</b>; a significant outputs (&#x201c;SO&#x201d;) field <b>1040</b>; an optional cycles (&#x201c;CY&#x201d;) field <b>1045</b>; a run status field <b>1050</b>; an optional priority field <b>1055</b>; an optional state ready field <b>1060</b>; an optional next field <b>1065</b>; an optional last context field <b>1070</b>; an optional interrupts field <b>1075</b>; an optional single-step field <b>1080</b>; and an optional constant mode field <b>1085</b>. A corresponding configuration and control word <b>1000</b> it utilized for each context of the composite circuit element <b>260</b>. It will be apparent to those of skill in the electronic arts that additional or fewer fields may be utilized, depending upon the applications and objectives of the selected apparatus <b>100</b> and any incorporated system, and all such variations are within the scope of the present invention.</p>
<p id="p-0225" num="0224">A plurality of configuration words, one for each context, are utilized by the element controller <b>325</b> to control the configuration and execution of a configurable element <b>270</b>. Each configuration word is indexed by the context number. The one or more configuration bits which control how the configurable element <b>270</b> is to be configured or how data is to be interpreted is or are stored in element configuration field <b>1010</b>. Similarly, the assigned and routed (bound) actions (or instructions) are stored as the corresponding task ID, in field <b>1015</b>, and the action ID in field <b>1020</b>.</p>
<p id="p-0226" num="0225">The data output and/or data input locations, as bound destination (and/or source) addresses, are stored in field <b>1025</b>. Alternatively, the data input and/or data output pointers (as source/destination task IDs and action IDs) may be stored, depending upon the methodology implemented for potential re-routing. For example, when an entire task is re-assigned and re-bound de novo, new routing information will be generated, rather than utilizing the previously stored source and destination information. The remaining control fields are utilized to control whether and when a given context is executed (for a corresponding action to be performed by the circuit element <b>270</b>), how interrupts are serviced by the SME <b>290</b>, and how output data is provided to one or more destination addresses.</p>
<p id="p-0227" num="0226">The element controller <b>325</b>, in exemplary embodiments, comprises combinational logic gates or elements, such as AND, OR and INVERTER gates, which provide a result (a given context executes or does not execute), based upon the values of the bits stored in the various fields (e.g., <b>1035</b>, <b>1040</b>, <b>1050</b>, <b>1060</b>) of the exemplary configuration and control word <b>1000</b>. <figref idref="DRAWINGS">FIG. 17</figref> is a block diagram illustrating exemplary combinational logic circuitry <b>1100</b> for context readiness determination within an exemplary apparatus in accordance with the teachings of the present invention.</p>
<p id="p-0228" num="0227">As mentioned above, in a data flow environment, a context (task) may execute when it has sufficient input data and a sufficiently free or available destination for the resulting output data. As there are multiple inputs and corresponding multiple input queues <b>320</b> into the configurable element <b>270</b>, the significant input (SI) bits (<b>1035</b>) designate which of those inputs are to be utilized in the selected context. In addition, the input queues <b>320</b> are adapted to provide a first signal, referred to as &#x201c;enough input&#x201d; (&#x201c;EI&#x201d;), indicating that there is sufficient data in the corresponding input queues <b>320</b>. For example, in the element controller <b>325</b>, each of the SI bits are inverted, and each of the inverted SI bits and its corresponding EI signal are ORed (OR gates <b>1110</b><sub>0 </sub>through <b>1110</b><sub>n</sub>), with all of their corresponding OR results (four results for four inputs) then ANDed together (AND gate <b>1115</b>), to provide a &#x201c;data input ready&#x201d; signal, such that the AND result (data input ready) indicates that there is sufficient data available at the inputs which will be utilized by the selected context. More specifically, the data input ready signal is provided when (1) there is enough input data at the significant inputs, and (2) any other remaining input is not significant.</p>
<p id="p-0229" num="0228">Similarly, as there are multiple output queues <b>315</b> and outputs <b>375</b> from the configurable element <b>270</b>, the significant output (SO) bits (<b>1040</b>) designate which of those outputs and corresponding queues are to be utilized in the selected context. In addition, a second signal referred to as a &#x201c;room for more&#x201d; (&#x201c;RFM&#x201d;) signal is provided to indicate that the corresponding destination(s) have sufficient space available for output data, either from the output queues <b>315</b> or from the input queues <b>320</b> of the data destination, or potentially from an output register tracking output data consumption. Also for example, in the element controller <b>325</b>, the SO bits are inverted, and each of the inverted SO bits and its corresponding RFM signal are ORed (OR gates <b>1120</b><sub>0 </sub>through <b>1120</b><sub>n</sub>), with all of their corresponding OR results (two results for two outputs) then ANDed together (AND gate <b>1125</b>), to provide a &#x201c;data output ready&#x201d; signal, such that the AND result (data output ready) indicates that there is sufficient memory space available for data output by the selected context, namely, space available in the corresponding output queues <b>315</b> (or destination input queues <b>320</b> (or other memory)). More specifically, the data output ready signal is provided when (1) there is room for output data at the significant outputs, and (2) any other remaining output is not significant.</p>
<p id="p-0230" num="0229">These two results, the data input ready and data output ready then may be ANDed together (AND gate <b>1130</b>), to provide an overall data &#x201c;ready&#x201d; status for a selected context. For example, the ready status is equal to a logic one when both the data input(s) and data output(s) are ready, and is zero otherwise. Alternatively, as illustrated in <figref idref="DRAWINGS">FIG. 17</figref>, the data input ready and data output ready results may be ANDed with other fields (state ready and run status, discussed below), to provide an overall indication that the context is ready for execution (a &#x201c;context ready&#x201d; signal).</p>
<p id="p-0231" num="0230">The run status stored in field <b>1050</b> indicates whether the context has been enabled for execution, and may be set following data input-output routing in the binding process, or set (or reset) at other times by the SME <b>290</b>. For example, the task (of which the selected context is a part) may still be in the process of being configured and routed for other configurable elements <b>270</b>, and should not be enabled until such routing is complete. In other circumstances, one of the SMEs <b>290</b> may have halted a task, for possible resumption at another time, or may be in the process of deleting tasks. As a consequence, the element controller <b>325</b> will execute a context only when enabled, as indicated by the run status in field <b>1050</b>.</p>
<p id="p-0232" num="0231">The SME <b>290</b> may also utilize one or more state ready bits (stored in optional field <b>1060</b>) to control context execution based on various conditions or other events. For example, when a condition has been met, such as an initialization, a selected context may need to be run next, and is designated with the state ready bits. All of these bits (run status, state ready, data output ready signal, data input ready signal) may be ANDed (AND gate <b>1130</b>), and the result may also be stored within the run status field <b>1050</b> or another field accessible by the element controller <b>325</b>. As a consequence, the conjunction of the state ready bits, the data input ready, data output ready and run status indicators, provide an indication to cause the element controller <b>325</b> to allow execution of the selected context. Alternatively, operations may be controlled through use of the run status (of field <b>1050</b>), without the state ready bits, allowing the SME <b>290</b> to simply designate whether the context is or is not enabled for execution.</p>
<p id="p-0233" num="0232">The optional cycles field <b>1045</b> is utilized to designate the number of clock cycles required to execute the corresponding action. This field is utilized to avoid another, second context being executed while computations of a first context are still in progress.</p>
<p id="p-0234" num="0233">The optional single-step field <b>1080</b> is utilized to provide for a context to execute just once, such as for results to be examined by the SME <b>290</b>. Various testing contexts are often run in a single-step mode, with the SME <b>290</b> setting or clearing a single-step bit (e.g., for a test to be run at selected times, and to not be always available to run).</p>
<p id="p-0235" num="0234">In a selected embodiment, the optional context field <b>1070</b> may be utilized as part of arbitration among potential execution of a plurality of contexts. When a context has been executed, the last context bit is set (and the last context bits of the other contexts are reset to zero). In the event of competing contexts which are ready for execution, the last context bit is utilized to determine if one of the contexts just executed, and if so, allows the other context to execute, to avoid one context from completely dominating execution in the configurable element <b>270</b>. In addition, in the event of competing contexts which did not just execute, one or more optional priority bits (stored in field <b>1055</b>) may be utilized to arbitrate and allow the higher priority context to execute first.</p>
<p id="p-0236" num="0235">In an exemplary embodiment, the optional next indicator (stored in field <b>1065</b>), also referred to as a &#x201c;chain&#x201d; indicator, is utilized to determine the next context to execute, and is particularly useful for controlling the sequence in which contexts are executed, i.e., chaining together a sequence of operations. In this embodiment, the element controller <b>325</b> can commence execution of the &#x201c;chain lead&#x201d; context (the first context of the chain, also as designated within field <b>1065</b>), when the other conditions discussed above have been met. Thereafter, the element controller <b>325</b> will execute the next context in the sequence, as designated in the field <b>1065</b>, also when the other conditions (e.g., EI, RFM, etc.) have been met, and otherwise will wait for the next context to become available. If the next context is the same as the current context, then execution of the sequence has been completed. This field <b>1065</b> may also include a designation as to whether the data input(s) will be consumed.</p>
<p id="p-0237" num="0236">In another exemplary embodiment, when destination-based (rather than source-based) data transmission is utilized, the optional &#x201c;fork&#x201d; field <b>1030</b> is utilized for output replication, when the same output is to be provided (or replicated) to multiple destinations. Additional contexts are utilized to store these additional destinations. In this embodiment, the element controller <b>325</b> can commence execution of the &#x201c;fork lead&#x201d; context (the first context of the fork, also as designated within field <b>1030</b>), when the other conditions discussed above have been met. Thereafter, when the one or more bits of the fork field <b>1030</b> indicate another context, the current output will be provided (copied sequentially) as the output for that context, avoiding a need to re-execute a context based on the same data to provide the same output, just to a different location. Other contexts which are not part of the &#x201c;fork&#x201d; sequence are not executed during this sequential output replication. If the next context is the same as the current context, then execution of the forking (output duplication) has been completed. When no fork is indicated in field <b>1030</b>, the element controller <b>325</b> simply determines what other contexts may be ready for execution, and proceeds accordingly.</p>
<p id="p-0238" num="0237">In a selected embodiment, an optional &#x201c;interrupts&#x201d; field <b>1075</b> may also be provided. This field may designate, as part of the configuration word <b>1000</b>, the setting, masking, and detecting of interrupts, including when a context executes. These interrupts are serviced by the SME <b>290</b>.</p>
<p id="p-0239" num="0238">Also in a selected embodiment, an optional constant mode field <b>1085</b> may be utilized, to designate that one or more of the input data words is a constant. For such a constant, it is generally maintained (until changed), so the constant is not consumed during data operations. In this embodiment, selected bits of the constant mode field <b>1085</b> are also utilized to indicate the next data read location (e.g., which data word in a two word input queue <b>320</b>), such as for toggling or switching between two or more constant values.</p>
<p id="p-0240" num="0239">As a consequence, as discussed above, the element controller <b>325</b> may be implemented using a plurality of combinational logic gates, which evaluate the various fields of the configuration and control word <b>1000</b> (and other control signals) for each context. When the various fields and other signal indicate that a context is both ready and should be run, the element controller <b>325</b> loads the configuration of the context, and the corresponding task or action (or instruction) is executed.</p>
<p id="p-0241" num="0240">In summary, the present invention provides resilient and adaptive integrated circuitry with self-healing capabilities. Numerous advantages of the exemplary embodiments are readily apparent. The IC architecture of the present invention is resilient, providing adaptation for manufacturing defects, flaws which may arise during usage of the IC, and adaptability for new features, services, algorithms, and other events. This IC architecture is self-healing, because in the event a portion of the IC is damaged or otherwise becomes unusable, another portion of the IC is effectively &#x201c;recruited&#x201d; or reassigned to take over and perform the functions of the damaged portion. The present invention allows a single component to be switched out, and does not have the fixed wiring of the prior art. In addition, as the functions are reassigned, new control and data pathways are also created, so that the transferred operations continue to perform seamlessly with other IC operations. Such adaptive resilience and self-healing may occur in real-time or near real-time, depending upon the selected embodiment. Such resiliency provides for a graceful degradation of performance in the event of damage to the IC, rather than a catastrophic failure, and is especially significant in health and safety applications.</p>
<p id="p-0242" num="0241">It is to be understood that this application discloses a system, apparatus, software and method for resilient and adaptive integrated circuitry with self-healing capabilities. While the invention is particularly illustrated and described with reference to exemplary embodiments, it will be understood by those skilled in the art that numerous variations and modifications in form, details, and applications may be made therein without departing from the spirit and scope of the novel concept of the invention. Some of these various alternative implementations are noted in the text. It is to be understood that no limitation with respect to the specific methods and apparatus illustrated herein is intended or should be inferred. It is, of course, intended to cover by the appended claims all such modifications as fall within the scope of the claims.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>It is claimed:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. An apparatus comprising:
<claim-text>a sequential processor;</claim-text>
<claim-text>a first communication bus coupled to the sequential processor, the first communication bus for configuration and control information; and</claim-text>
<claim-text>a plurality of circuit arrays coupled to the first communication bus, each circuit array of the plurality of circuit arrays comprising:</claim-text>
<claim-text>a plurality of composite circuit elements, each composite circuit element comprising an element interface and a circuit element of a plurality of different circuit element types, each element interface comprising at least one data input queue and at least one data output queue, a first composite circuit element of the plurality of composite circuit elements to perform a first function, a second composite circuit element of the plurality of composite circuit elements to perform a second function, a third composite circuit element of the plurality of composite circuit elements configurable to perform the second function and a third function; and</claim-text>
<claim-text>a second communication bus coupling each at least one data input queue to each at least one data output queue for a plurality of configurable data links, the first composite circuit element having a first configurable data link of the plurality of configurable data links to the second composite circuit element for performance of a first data operation and a second configurable data link of the plurality of configurable data links to the third composite circuit element for performance of the first data operation or performance of a second data operation.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The apparatus of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the first configurable data link or the second configurable data link are configured in a binding process substantially during run-time, or at run-time, or before run-time.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The apparatus of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the plurality of composite circuit elements are configurable and wherein the first composite circuit element is configured for the first function, the second composite circuit element is configured for the second function, and the third composite circuit element is configured for the second function or the third function in a binding process substantially during run-time, or at run-time, or before run-time.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The apparatus of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the first configurable data link and the second configurable data link are configured during compilation of an executable program.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The apparatus of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the plurality of composite circuit elements are configurable and wherein the configurations of the first composite circuit element, the second composite circuit element and the third composite circuit element are determined during compilation of an executable program.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The apparatus of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the plurality of composite circuit elements are configurable and wherein the configurations of the first composite circuit element, the second composite circuit element and the third composite circuit element are determined in an executable program.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The apparatus of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the first configurable data link or the second configurable data link is configured dynamically during execution of an executable program.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The apparatus of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the plurality of composite circuit elements are configurable and wherein the first composite circuit element is configured for the first function, the second composite circuit element is configured for the second function, and the third composite circuit element is configured for the second function or the third function dynamically during execution of an executable program.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The apparatus of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the sequential processor is to provide for configuring the third composite circuit element for the second function and configuring the second configurable data link in response to an unavailability of the second composite circuit element.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The apparatus of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the second composite circuit element is unavailable due to a detected fault.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The apparatus of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the fault is detected by at least one of the following: a periodic diagnostic performed by at least one composite circuit element of the plurality of composite circuit elements; a background diagnostic performed as a selected context of at least one composite circuit element of the plurality of composite circuit elements; or a comparison test performed by a plurality of composite circuit elements of the same circuit element type.</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The apparatus of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the second composite circuit element is unavailable due to performance of another function having a higher priority than the second function.</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The apparatus of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the plurality of circuit element types comprises at least one of the following circuit element types: a plurality of configurable element types, a memory element type, a plurality of communication element types; and a plurality of non-configurable element types.</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The apparatus of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the first composite circuit element has a first configurable element type of the plurality of configurable element types, the second and third composite circuit elements each have a second configurable element type of the plurality of configurable element types, and the third composite circuit element is configurable to perform the second function and configurable to perform the third function.</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The apparatus of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the first composite circuit element has a first configurable element type of the plurality of configurable element types, the second composite circuit element has a second configurable element type of the plurality of configurable element types, the third composite circuit element has a third configurable element type of the plurality of configurable element types, and wherein the third composite circuit element is configurable to perform the second function and configurable to perform the third function.</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The apparatus of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein each element interface further comprises:
<claim-text>an element controller coupled to a circuit element;</claim-text>
<claim-text>a plurality of input queues to store input data for the corresponding circuit element; and</claim-text>
<claim-text>a plurality of output queues to store data output from the circuit element.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The apparatus of <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein each element interface further comprises:
<claim-text>a memory to store at least one configuration of the corresponding circuit element.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The apparatus of <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein each element interface further comprises:
<claim-text>a memory to store a plurality of contexts, each context of the plurality of contexts specifying a configuration of a plurality of configurations of a circuit element, and to store one or more designations of either or both a data input source or a data output destination.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. The apparatus of <claim-ref idref="CLM-00018">claim 18</claim-ref>, wherein one or more input queues of the plurality of input queues of the first composite circuit element are configurable to receive data over the second communication bus from one or more output queues of the plurality of output queues of the second composite circuit element to provide the first configurable data link for a first context of the plurality of contexts of the first composite circuit element.</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. The apparatus of <claim-ref idref="CLM-00018">claim 18</claim-ref>, wherein one or more output queues of the plurality of output queues of the first composite circuit element are configurable to output data over the second communication bus to one or more input queues of the plurality of input queues of the second composite circuit element to provide the first configurable data link for a first context of the plurality of contexts of the first composite circuit element.</claim-text>
</claim>
<claim id="CLM-00021" num="00021">
<claim-text>21. The apparatus of <claim-ref idref="CLM-00018">claim 18</claim-ref>, wherein the element controller further is to store in the memory a current state of a partial execution of a first context of the plurality of contexts, provide for execution by the corresponding circuit element of a second context of the plurality of contexts, and retrieve the current state and resume execution of the first context.</claim-text>
</claim>
<claim id="CLM-00022" num="00022">
<claim-text>22. The apparatus of <claim-ref idref="CLM-00018">claim 18</claim-ref>, wherein the element controller further is to direct an execution of a first context of the plurality of contexts by the circuit element when all input queues of the plurality of input queues required by the first context have input data, when all output queues of the plurality of output queues required by the first context have room to accept output data, and when a status bit for the first context is set for execution.</claim-text>
</claim>
<claim id="CLM-00023" num="00023">
<claim-text>23. The apparatus of <claim-ref idref="CLM-00022">claim 22</claim-ref>, wherein the element controller further is to arbitrate among a plurality of contexts which are ready for execution and to select a corresponding context for execution as a result of the arbitration.</claim-text>
</claim>
<claim id="CLM-00024" num="00024">
<claim-text>24. The apparatus of <claim-ref idref="CLM-00023">claim 23</claim-ref>, wherein the arbitration is selected from the group consisting of: round-robin, priority, most recently executed, least recently executed, scheduled execution; and combinations thereof.</claim-text>
</claim>
<claim id="CLM-00025" num="00025">
<claim-text>25. The apparatus of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:
<claim-text>a communication element coupled to the second communication bus.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00026" num="00026">
<claim-text>26. The apparatus of <claim-ref idref="CLM-00025">claim 25</claim-ref>, wherein the communication element comprises a queue to store a data word for transfer between adjacent circuit arrays of the plurality of circuit arrays.</claim-text>
</claim>
<claim id="CLM-00027" num="00027">
<claim-text>27. The apparatus of <claim-ref idref="CLM-00025">claim 25</claim-ref>, wherein the communication element is to route or switch at least one data word between a first circuit array of the plurality of circuit arrays and a second circuit array of the plurality of circuit arrays.</claim-text>
</claim>
<claim id="CLM-00028" num="00028">
<claim-text>28. The apparatus of <claim-ref idref="CLM-00025">claim 25</claim-ref>, wherein the communication element is to buffer at least one data word from a first circuit array of the plurality of circuit arrays and to transfer the at least one data word to an adjacent second circuit array of the plurality of circuit arrays.</claim-text>
</claim>
<claim id="CLM-00029" num="00029">
<claim-text>29. The apparatus of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:
<claim-text>a plurality of data queues coupled to the second communication bus of a first circuit array of the plurality of circuit arrays, a first queue of the plurality of queues to transfer a first data word to an adjacent second circuit array of the plurality of circuit arrays and a second queue of the plurality of queues to receive a second data word from an adjacent third circuit array of the plurality of circuit arrays.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00030" num="00030">
<claim-text>30. The apparatus of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:
<claim-text>a message manager circuit coupled to the first communication bus, the message manager circuit to provide a communication interface to an external bus or an external memory.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00031" num="00031">
<claim-text>31. The apparatus of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the apparatus is embodied in an integrated circuit.</claim-text>
</claim>
<claim id="CLM-00032" num="00032">
<claim-text>32. An apparatus comprising:
<claim-text>a communication interface circuit to an external bus or an external memory;</claim-text>
<claim-text>a sequential processor;</claim-text>
<claim-text>a first communication bus coupled to the sequential processor, the first communication bus for configuration and control information; and</claim-text>
<claim-text>a plurality of circuit arrays coupled to the first communication bus, each circuit array of the plurality of circuit arrays comprising:</claim-text>
<claim-text>a plurality of composite circuit elements, each composite circuit element comprising an element interface and a circuit element of a plurality of different circuit element types, each element interface comprising a plurality of data input queues and a plurality of data output queues, a first composite circuit element of the plurality of composite circuit elements to perform a first function, a second composite circuit element of the plurality of composite circuit elements to perform a second function, a third composite circuit element of the plurality of composite circuit elements configurable to perform the second function and a third function;</claim-text>
<claim-text>a second communication bus coupling each data input queue of the plurality of data input queues to each data output queue of the plurality of data output queues for a plurality of configurable data links, the first composite circuit element having a first configurable data link of the plurality of configurable data links to the second composite circuit element for performance of a first data operation and a second configurable data link of the plurality of configurable data links to the third composite circuit element for performance of the first data operation or performance of a second data operation; and</claim-text>
<claim-text>a plurality of data queues coupled to the second communication bus, a first data queue of the plurality of data queues to transfer a first data word to an adjacent first circuit array of the plurality of circuit arrays and a second data queue of the plurality of data queues to receive a second data word from an adjacent second circuit array of the plurality of circuit arrays.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00033" num="00033">
<claim-text>33. The apparatus of <claim-ref idref="CLM-00032">claim 32</claim-ref>, wherein each element interface further comprises:
<claim-text>an element controller; and</claim-text>
<claim-text>a memory to store a plurality of contexts, each context of the plurality of contexts specifying either or both a data input source or a data output destination.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00034" num="00034">
<claim-text>34. The apparatus of <claim-ref idref="CLM-00032">claim 32</claim-ref>, wherein one or more input queues of the plurality of input queues of the first composite circuit element are configurable to receive data over the second communication bus from one or more output queues of the plurality of output queues of the second composite circuit element to provide the first configurable data link for a first context of the plurality of contexts of the first composite circuit element.</claim-text>
</claim>
<claim id="CLM-00035" num="00035">
<claim-text>35. The apparatus of <claim-ref idref="CLM-00032">claim 32</claim-ref>, wherein one or more output queues of the plurality of output queues of the first composite circuit element are configurable to output data over the second communication bus to one or more input queues of the plurality of input queues of the second composite circuit element to provide the first configurable data link for a first context of the plurality of contexts of the first composite circuit element.</claim-text>
</claim>
<claim id="CLM-00036" num="00036">
<claim-text>36. The apparatus of <claim-ref idref="CLM-00032">claim 32</claim-ref>, wherein the element controller is, for a selected context of the plurality of contexts, to direct an execution of the selected context by the circuit element when a selected input queue corresponding to the selected context has input data, a selected output queue corresponding to the selected context has room for output data, and a status bit corresponding to the selected context is set for execution.</claim-text>
</claim>
<claim id="CLM-00037" num="00037">
<claim-text>37. The apparatus of <claim-ref idref="CLM-00032">claim 32</claim-ref>, wherein the sequential processor is to provide for configuring the third composite circuit element for the second function and configuring the second configurable data link in response to a detected fault of the second composite circuit element or in response to the second composite circuit element being unavailable due to performance of another function having a higher priority than the second function.</claim-text>
</claim>
<claim id="CLM-00038" num="00038">
<claim-text>38. The apparatus of <claim-ref idref="CLM-00032">claim 32</claim-ref>, wherein the first configurable data link or the second configurable data link are configured in a binding process substantially during run-time, or at run-time, or before run-time, or during compilation of an executable program; or dynamically during execution of an executable program.</claim-text>
</claim>
<claim id="CLM-00039" num="00039">
<claim-text>39. The apparatus of <claim-ref idref="CLM-00032">claim 32</claim-ref>, further comprising:
<claim-text>a memory composite circuit element.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00040" num="00040">
<claim-text>40. An apparatus comprising:
<claim-text>a first plurality of composite circuit elements to perform a data operation, each composite circuit element comprising a configurable circuit, a plurality of data input queues and a plurality of data output queues;</claim-text>
<claim-text>a first data bus coupled to the first plurality of composite circuit elements to couple any output queue of a composite circuit element of the first plurality of composite circuit elements to any input queue of another composite circuit element of the first plurality of composite circuit elements;</claim-text>
<claim-text>a second, adjacent plurality of composite circuit elements having at least one configurable data link to the first plurality of composite circuit elements for performance of the data operation;</claim-text>
<claim-text>a second data bus coupled to the second plurality of composite circuit elements to couple any output queue of a composite circuit element of the second plurality of composite circuit elements to any input queue of another composite circuit element of the second plurality of composite circuit elements; and</claim-text>
<claim-text>a plurality of data queues coupled to the first data bus and to the second data bus to transfer a data word between the first plurality of composite circuit elements and the second, adjacent plurality of composite circuit elements.</claim-text>
</claim-text>
</claim>
</claims>
</us-patent-grant>

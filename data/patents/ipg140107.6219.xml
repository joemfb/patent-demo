<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08627343-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08627343</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>12160565</doc-number>
<date>20070330</date>
</document-id>
</application-reference>
<us-application-series-code>12</us-application-series-code>
<priority-claims>
<priority-claim sequence="01" kind="national">
<country>JP</country>
<doc-number>2006-100194</doc-number>
<date>20060331</date>
</priority-claim>
</priority-claims>
<us-term-of-grant>
<us-term-extension>1202</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>13</main-group>
<subgroup>00</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>719327</main-classification>
<further-classification>717168</further-classification>
<further-classification>717174</further-classification>
</classification-national>
<invention-title id="d2e71">Information processing apparatus and data output managing system</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>6418555</doc-number>
<kind>B2</kind>
<name>Mohammed</name>
<date>20020700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717169</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>6674767</doc-number>
<kind>B1</kind>
<name>Kadyk et al.</name>
<date>20040100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>370466</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>2002/0161936</doc-number>
<kind>A1</kind>
<name>Minagawa</name>
<date>20021000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>710  1</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>2003/0043396</doc-number>
<kind>A1</kind>
<name>Klosterman et al.</name>
<date>20030300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>358  113</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>2003/0090704</doc-number>
<kind>A1</kind>
<name>Hansen</name>
<date>20030500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>358  115</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>2003/0200289</doc-number>
<kind>A1</kind>
<name>Kemp et al.</name>
<date>20031000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709221</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>2003/0217193</doc-number>
<kind>A1</kind>
<name>Thurston et al.</name>
<date>20031100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709321</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>2004/0223182</doc-number>
<kind>A1</kind>
<name>Minagawa</name>
<date>20041100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>358  115</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>2004/0263900</doc-number>
<kind>A1</kind>
<name>Nguyen et al.</name>
<date>20041200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>358  115</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>2005/0162678</doc-number>
<kind>A1</kind>
<name>Nakata</name>
<date>20050700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
<classification-national><country>US</country><main-classification>358  113</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00011">
<document-id>
<country>JP</country>
<doc-number>63-268031</doc-number>
<date>19881100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
<classification-cpc-text>G06F 9/06</classification-cpc-text>
</us-citation>
<us-citation>
<patcit num="00012">
<document-id>
<country>JP</country>
<doc-number>10-124435</doc-number>
<date>19980500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
<classification-cpc-text>G06F 13/10</classification-cpc-text>
</us-citation>
<us-citation>
<patcit num="00013">
<document-id>
<country>JP</country>
<doc-number>2005-050062</doc-number>
<date>20050200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00014">
<document-id>
<country>JP</country>
<doc-number>2005-208895</doc-number>
<date>20050800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
<classification-cpc-text>G06F 13/10</classification-cpc-text>
</us-citation>
<us-citation>
<patcit num="00015">
<document-id>
<country>JP</country>
<doc-number>2006-085529</doc-number>
<date>20060300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
<classification-cpc-text>G06F 9/445</classification-cpc-text>
</us-citation>
</us-references-cited>
<number-of-claims>17</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>719327</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>717168</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>717174</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>18</number-of-drawing-sheets>
<number-of-figures>23</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20100235846</doc-number>
<kind>A1</kind>
<date>20100916</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Yamamichi</last-name>
<first-name>Masaki</first-name>
<address>
<city>Yokohama</city>
<country>JP</country>
</address>
</addressbook>
<residence>
<country>JP</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Yamamichi</last-name>
<first-name>Masaki</first-name>
<address>
<city>Yokohama</city>
<country>JP</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Fitzpatrick, Cella, Harper &#x26; Scinto</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>Canon Kabushiki Kaisha</orgname>
<role>03</role>
<address>
<city>Tokyo</city>
<country>JP</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Ho</last-name>
<first-name>Andy</first-name>
<department>2194</department>
</primary-examiner>
</examiners>
<pct-or-regional-filing-data>
<document-id>
<country>WO</country>
<doc-number>PCT/JP2007/057713</doc-number>
<kind>00</kind>
<date>20070330</date>
</document-id>
<us-371c124-date>
<date>20080710</date>
</us-371c124-date>
</pct-or-regional-filing-data>
<pct-or-regional-publishing-data>
<document-id>
<country>WO</country>
<doc-number>WO2007/114513</doc-number>
<kind>A </kind>
<date>20071011</date>
</document-id>
</pct-or-regional-publishing-data>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">A setup method of an information processing apparatus in which a module as a control program for expanding a printer driver has been installed. A plurality of modules are detected and the information processing apparatus is set up so that the plurality of detected modules execute processes in predetermined operating order.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="179.75mm" wi="155.62mm" file="US08627343-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="212.60mm" wi="155.53mm" file="US08627343-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="206.50mm" wi="158.92mm" file="US08627343-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="224.71mm" wi="144.36mm" file="US08627343-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="202.86mm" wi="133.27mm" file="US08627343-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="203.54mm" wi="148.25mm" file="US08627343-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="241.30mm" wi="158.33mm" file="US08627343-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="135.55mm" wi="157.40mm" file="US08627343-20140107-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00008" num="00008">
<img id="EMI-D00008" he="235.71mm" wi="153.08mm" file="US08627343-20140107-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00009" num="00009">
<img id="EMI-D00009" he="191.85mm" wi="150.20mm" file="US08627343-20140107-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00010" num="00010">
<img id="EMI-D00010" he="126.75mm" wi="150.28mm" file="US08627343-20140107-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00011" num="00011">
<img id="EMI-D00011" he="209.30mm" wi="159.09mm" file="US08627343-20140107-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00012" num="00012">
<img id="EMI-D00012" he="200.41mm" wi="154.35mm" file="US08627343-20140107-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00013" num="00013">
<img id="EMI-D00013" he="227.67mm" wi="146.64mm" file="US08627343-20140107-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00014" num="00014">
<img id="EMI-D00014" he="191.85mm" wi="123.02mm" file="US08627343-20140107-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00015" num="00015">
<img id="EMI-D00015" he="202.69mm" wi="135.55mm" file="US08627343-20140107-D00015.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00016" num="00016">
<img id="EMI-D00016" he="199.73mm" wi="120.65mm" file="US08627343-20140107-D00016.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00017" num="00017">
<img id="EMI-D00017" he="143.59mm" wi="119.89mm" file="US08627343-20140107-D00017.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00018" num="00018">
<img id="EMI-D00018" he="226.57mm" wi="138.85mm" file="US08627343-20140107-D00018.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">TECHNICAL FIELD</heading>
<p id="p-0002" num="0001">The present invention relates to a method of providing an expanding function of a printer driver by mainly adding a function expanding module to the printer driver.</p>
<heading id="h-0002" level="1">BACKGROUND ART</heading>
<p id="p-0003" num="0002">In recent years, in order to raise an additional value of a print result, there is such a tendency that advanced novel additional functions such as copy guarding function, form overlay, digital watermark, job tracing function, and the like are added to the printer driver. In many cases, those additional functions have additional values more than normal printing, it is presumed that they are provided as onerous options without packaged together with a basic printer driver set.</p>
<p id="p-0004" num="0003">In order to suppress dependency on versions of a plurality of printer drivers and a model of a printing apparatus as much as possible, those functions are provided as additional add-in (plug-in) modules having a common expanding interface.</p>
<p id="p-0005" num="0004">There is such an advantage that if a system corresponds to the common expanding interface, even in a combination with a basic printer driver set which was released in the past, merely by providing the add-in module, the novel additional function can be realized. In other words, by providing the novel function by the add-in, the function which is not presumed at the beginning of the sale of the printing apparatus and cannot be recognized by the printing apparatus can be also additionally added to the printer driver later.</p>
<p id="p-0006" num="0005">In Japanese Patent Application Laid-Open No. 2005-208895, there has been disclosed a detailed method of adding and deleting function expanding modules such as program file, data file, and the like to a printer driver corresponding to the common expanding interface as mentioned above.</p>
<p id="p-0007" num="0006">In Japanese Patent Application Laid-Open No. H10-124435, there has been disclosed the following technique. A file searching program <b>7</b> searches for a printer driver registered in a registry file <b>12</b>. A check program <b>6</b> confirms whether or not a printer driver of the same line-up as that of a driver of a second printer <b>11</b> has already been registered in the registry file <b>12</b>. The check program discriminates the presence or absence of competition between resources of the driver of the second printer <b>11</b> to be newly registered and resources of a driver of a first printer which has already been registered. That is, if an I/O port address which is allocated to the second printer <b>11</b> and that allocated to the first printer compete, the processing routine advances to step <b>106</b>. If they do not compete, step <b>105</b> follows. The driver of the second printer <b>11</b> is registered into the registry file <b>12</b> by a file writing program <b>5</b> and the printer driver is written into an auxiliary storing device such as a hard disk or the like of a computer, thereby executing installation. If the I/O port address compete, in step <b>106</b>, in order to notify the user that the installing order is incorrect, a predetermined warning is displayed onto a monitor <b>13</b> by an alarm displaying program <b>9</b>. The driver is deleted and the installing order is changed.</p>
<p id="p-0008" num="0007">However, in the conventional techniques, when the module is added, nothing is considered with respect to operating order of the modules which have already been installed. Therefore, there is such a problem that when the function expanding module is optionally added to the modules constructing the existing printer driver, there is a case where the function expanding module does not operate or does not operate normally.</p>
<p id="p-0009" num="0008">Further, according to Japanese Patent Application Laid-Open No. H10-124435, in the case where the driver is installed once and a setting of a port competes, the installing order is exchanged.</p>
<p id="p-0010" num="0009">The above problem is not limited to the printer driver but can occur in the whole program to which modules can be added.</p>
<heading id="h-0003" level="1">DISCLOSURE OF THE INVENTION</heading>
<p id="p-0011" num="0010">There is disclosed a setup method of an information processing apparatus in which a module as a control program for expanding a printer driver has been installed, comprising: detecting a plurality of the modules as control programs each for expanding the printer driver; and setting up the information processing apparatus so that the plurality of detected modules execute processes in predetermined operating order.</p>
<p id="p-0012" num="0011">Further features of the present invention will become apparent from the following description of exemplary embodiments with reference to the attached drawings.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. 1</figref> is a block diagram illustrating an example of an information processing apparatus to which the invention can be applied.</p>
<p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. 2</figref> is a block diagram illustrating a constructional example of a print system according to the first embodiment of the invention.</p>
<p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. 3</figref> is a data constructional diagram showing a data construction of an add-in module information file illustrated in <figref idref="DRAWINGS">FIG. 2</figref>.</p>
<p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. 4</figref> is a flowchart showing an example of a first control processing procedure in the invention.</p>
<p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. 5</figref> is a flowchart showing an example of a second control processing procedure in the invention.</p>
<p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. 6</figref> is a flowchart showing an example of a third control processing procedure in the invention.</p>
<p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. 7</figref> is a flowchart showing an example of a fourth control processing procedure in the invention.</p>
<p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. 8</figref> is a flowchart showing an example of a fifth control processing procedure in the invention.</p>
<p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. 9</figref> is a schematic diagram illustrating an example of a display screen at the time of a UI displaying process upon add-in installation by an add-in installer.</p>
<p id="p-0022" num="0021"><figref idref="DRAWINGS">FIGS. 10A and 10B</figref> are schematic diagrams each illustrating an example of a display screen at the time of the UI displaying process upon add-in installation by the add-in installer.</p>
<p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. 11</figref> is a schematic diagram illustrating an example of a display screen at the time of the UI displaying process upon add-in installation by the add-in installer.</p>
<p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. 12</figref> is a schematic diagram illustrating an example of a display screen at the time of the UI displaying process upon add-in installation by the add-in installer.</p>
<p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. 13</figref> is a schematic diagram illustrating an example of a display screen at the time of the UI displaying process upon add-in installation by the add-in installer.</p>
<p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. 14</figref> is a flowchart showing an example of a sixth control processing procedure in the invention.</p>
<p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. 15</figref> is a block diagram illustrating a constructional example of a print system according to the second embodiment of the invention.</p>
<p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. 16</figref> is a data constructional diagram showing a data construction of a filter module information file illustrated in <figref idref="DRAWINGS">FIG. 15</figref>.</p>
<p id="p-0029" num="0028"><figref idref="DRAWINGS">FIG. 17</figref> is a flowchart showing an example of a seventh control processing procedure in the invention.</p>
<p id="p-0030" num="0029"><figref idref="DRAWINGS">FIG. 18</figref> is a flowchart showing an example of a eighth control processing procedure in the invention.</p>
<p id="p-0031" num="0030"><figref idref="DRAWINGS">FIG. 19</figref> is a flowchart showing an example of a ninth control processing procedure in the invention.</p>
<p id="p-0032" num="0031"><figref idref="DRAWINGS">FIG. 20</figref> is a flowchart showing an example of a tenth control processing procedure in the invention.</p>
<p id="p-0033" num="0032"><figref idref="DRAWINGS">FIG. 21</figref> is a flowchart showing an example of an eleventh control processing procedure in the invention.</p>
<p id="p-0034" num="0033"><figref idref="DRAWINGS">FIG. 22</figref> is a diagram for describing a memory map in a storing medium (recording medium) for storing various data processing programs which can be read by the information processing apparatus (computer) according to the invention.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0005" level="1">BEST MODE FOR CARRYING OUT THE INVENTION</heading>
<p id="p-0035" num="0034">One aspect of the embodiment is made to solve the foregoing problems. It is an object of the invention to provide a feature in which when a module is added to a program such as a printer driver or the like, operating order of the module to be added and existing modules constructing the program is correctly controlled, thereby enabling the modules constructing the program to operate properly upon execution of a printing process.</p>
<p id="p-0036" num="0035">As another object of the invention, there is another aspect to provide a feature in which a proper installing procedure is previously determined according to the operating order and installed.</p>
<heading id="h-0006" level="1">First Embodiment</heading>
<p id="p-0037" num="0036">An exemplary embodiment to which the invention is applied will be described hereinbelow.</p>
<p id="p-0038" num="0037"><figref idref="DRAWINGS">FIG. 1</figref> is a block diagram illustrating an example of an information processing apparatus to which the invention can be applied.</p>
<p id="p-0039" num="0038">In <figref idref="DRAWINGS">FIG. 1</figref>, a computer as an information processing apparatus (for example, personal computer) <b>100</b> is provided. In a print system of the invention, the computer <b>100</b> and a printer <b>30</b> are connected by one of an interface such as Centronics and a network such as Ethernet (registered trademark). Although a case where the computer <b>100</b> and the printer <b>30</b> are connected by a network <b>20</b> has been illustrated in <figref idref="DRAWINGS">FIG. 1</figref>, it is also possible to use a construction in which they are connected via an interface (not shown) (for example, USB, Centronics, or the like).</p>
<p id="p-0040" num="0039">A CPU <b>1</b> controls each device connected to a system bus <b>4</b> on the basis of a program (BIOS, OS, application program, various installers including an add-in installer, which will be described hereinafter, or the like) stored in one of a program ROM in a ROM <b>3</b> and an external memory <b>12</b> and integratedly controls the whole apparatus.</p>
<p id="p-0041" num="0040">Font data and the like are stored into a font ROM in the ROM <b>3</b>. Various kinds of data is stored into a data ROM in the ROM <b>3</b>. A RAM <b>2</b> functions as a main memory, a work area, or the like of the CPU <b>1</b>.</p>
<p id="p-0042" num="0041">A keyboard controller (KBC) <b>5</b> controls an input from a pointing device <b>9</b> (for example, mouse), a keyboard (KB) <b>10</b>, or the like. A display controller (DC) <b>6</b> controls a display of a display <b>11</b>. The display <b>11</b> may be a CRT, an LCD, or a display apparatus of another type.</p>
<p id="p-0043" num="0042">A memory controller (MC) <b>7</b> controls an access to the external memory <b>12</b> (hard disk (HD), a flexible disk (FD) (not shown), a CD-ROM, or the like). A network interface (NW I/F) <b>8</b> controls communication with the printer <b>30</b> through the network <b>20</b>.</p>
<p id="p-0044" num="0043">&#x3c;Construction of System&#x3e;</p>
<p id="p-0045" num="0044">A printer driver, an add-in module, and another construction necessary to realize the invention will be described hereinbelow with respect to the computer <b>100</b> illustrated in <figref idref="DRAWINGS">FIG. 1</figref> as an example.</p>
<p id="p-0046" num="0045"><figref idref="DRAWINGS">FIG. 2</figref> is a block diagram illustrating a constructional example of the print system according to the first embodiment of the invention. The same component elements as those in <figref idref="DRAWINGS">FIG. 1</figref> are designated by the same reference numerals.</p>
<p id="p-0047" num="0046">In <figref idref="DRAWINGS">FIG. 2</figref>, a printer driver <b>101</b> is a program for allowing the computer <b>100</b> to instruct the printer <b>30</b> to print. The printer driver <b>101</b> inputs a print command from an application <b>108</b> or the like of the computer <b>100</b> through a graphic engine <b>109</b> in the OS. The printer driver <b>101</b> converts the input print command into a control command which can be recognized by the printer <b>30</b> and transfers to the printer through a print service <b>105</b>.</p>
<p id="p-0048" num="0047">The printer driver <b>101</b> is installed by a printer driver installer <b>107</b> or a printer driver installing method (not shown) which is provided by the OS and can be used.</p>
<p id="p-0049" num="0048">An add-in module <b>102</b> is a file group including a program file such as DLL (Dynamic Link Library) and the like. The add-in module <b>102</b> is installed by one of an add-in installer <b>106</b> and the printer driver <b>101</b>, so that it can communicate by using a common interface of the printer driver, thereby realizing a function expansion. That is, the add-in installer <b>106</b> is a program which can be executed in the state where the printer driver <b>101</b> has been installed. The add-in module <b>102</b> operates as a part of the printer driver.</p>
<p id="p-0050" num="0049">An add-in module information file <b>103</b> will now be described.</p>
<p id="p-0051" num="0050">The add-in module information file <b>103</b> is one of the group of files constructing the add-in module and has information as illustrated in an example in <figref idref="DRAWINGS">FIG. 3</figref>. A file format of the add-in module information file <b>103</b> may be one of readable text format and XML format or a non-readable format such as a binary file. A data construction of the add-in module information file <b>103</b> will now be described with reference to <figref idref="DRAWINGS">FIG. 3</figref>.</p>
<p id="p-0052" num="0051"><figref idref="DRAWINGS">FIG. 3</figref> is a data constructional diagram showing the data construction of the add-in module information file <b>103</b> illustrated in <figref idref="DRAWINGS">FIG. 2</figref>.</p>
<p id="p-0053" num="0052">In <figref idref="DRAWINGS">FIG. 3</figref>, add-in module construction file information <b>201</b> is an area where a file construction of the add-in module <b>102</b> has been described. Version information of the add-in module <b>102</b> has been described in an area <b>202</b>. A date of release of the add-in module <b>102</b> has been described in an area <b>203</b>. Product name information of the add-in module <b>102</b> has been described in an area <b>204</b>. Detailed information of the add-in module <b>102</b> has been described in an area <b>205</b>.</p>
<p id="p-0054" num="0053">A priority number (PriorityNumber) <b>206</b> is an area where an unconditional number which decides order of the operation has been described. An area <b>207</b> is an area where Copyright information of the add-in module <b>102</b> has been described.</p>
<p id="p-0055" num="0054">Description will be made hereinbelow by returning to <figref idref="DRAWINGS">FIG. 2</figref>.</p>
<p id="p-0056" num="0055">Printer driver file information <b>104</b> is one management information (construction information) for allowing the OS to use the printer driver by using the print service <b>105</b>. The printer driver file information <b>104</b> has been registered in a predetermined area (predetermined storing area which is managed by the OS) in the external memory <b>12</b>. For example, in Windows (registered trademark), &#x201c;DependentFiles&#x201d; in a registry corresponds to the printer driver file information <b>104</b>. If a plurality of printer drivers have been installed, the printer driver file information <b>104</b> is registered into the external memory <b>12</b> every printer driver.</p>
<p id="p-0057" num="0056">In <figref idref="DRAWINGS">FIG. 2</figref>, the add-in module <b>102</b> has been installed and add-in module file information <b>111</b> has been registered in the printer driver file information <b>104</b>. Information (for example, add-in module information file name) <b>112</b> to specify the add-in module information file is included in the add-in module file information <b>111</b>.</p>
<p id="p-0058" num="0057">Although not shown, even if an add-in module different from the add-in module <b>102</b> has separately been installed, the printer driver <b>101</b> can operate. If a plurality of add-in modules have been installed in the printer driver <b>101</b>, the add-in module file information <b>111</b> (including the information <b>112</b> to specify the add-in module information file) is registered every add-in module.</p>
<p id="p-0059" num="0058">The print service <b>105</b> is a service program to control one of the printing and the installation of the printer driver <b>101</b> on the operating system (OS).</p>
<p id="p-0060" num="0059">The add-in installer <b>106</b> is a center device to accomplish the object of the invention and is a program for additionally installing the add-in module into the installed printer driver <b>101</b>. It is now assumed that the add-in module file to be additionally installed has been stored in one of the add-in installer <b>106</b> and another storing area in the external memory <b>12</b>.</p>
<p id="p-0061" num="0060">The add-in installer <b>106</b> mainly has the following functions (1) to (5).</p>
<p id="p-0062" num="0061">Construction module detecting function for detecting one or a plurality of modules constructing one or a plurality of printer drivers.</p>
<p id="p-0063" num="0062">Module proper operating order discriminating function for discriminating the order of the proper operations of the add-in module to be added and one or a plurality of modules (installed add-in module <b>102</b>) constructing the printer driver <b>101</b> (order adapted to make the plurality of add-in modules operative).</p>
<p id="p-0064" num="0063">File adding function for adding the add-in module file.</p>
<p id="p-0065" num="0064">File registering function for registering the added additional file into the printer driver file information <b>104</b> according to the operating order determined by the foregoing module proper operating order discriminating function.</p>
<p id="p-0066" num="0065">Recognizing function for allowing the print service <b>105</b> to recognize the change in module construction.</p>
<p id="p-0067" num="0066">A flow for processes in the add-in installer <b>106</b> will be described in detail with reference to <figref idref="DRAWINGS">FIG. 4</figref> and subsequent drawings, which will be described hereinafter.</p>
<p id="p-0068" num="0067">The printer driver installer <b>107</b> is a program for installing the printer driver <b>101</b> into the computer <b>100</b>.</p>
<p id="p-0069" num="0068">The add-in installer <b>106</b> and the printer driver installer <b>107</b> are realized by a method whereby the programs stored in the external memory <b>12</b> is executed in the RAM <b>2</b> by the CPU <b>1</b> illustrated in <figref idref="DRAWINGS">FIG. 1</figref>.</p>
<p id="p-0070" num="0069">&#x3c;Flow for the Processes in the Add-in Installer <b>106</b>&#x3e;</p>
<p id="p-0071" num="0070"><figref idref="DRAWINGS">FIG. 4</figref> is a flowchart showing an example of a first control processing procedure in the invention and corresponds to the detailed flow for the processes in the add-in installer <b>106</b>. That is, the processes in this flowchart are realized by a method whereby the program which corresponds to the add-in installer <b>106</b> and has been stored in the external memory <b>12</b> is executed in the RAM <b>2</b> by the CPU <b>1</b>. In the flowchart, S<b>3000</b> to S<b>3400</b> indicate processing steps.</p>
<p id="p-0072" num="0071">First, in step S<b>3000</b>, the add-in installer <b>106</b> detects the installed add-in module with respect to the addition target printer driver of the add-in module. The addition target printer driver of the add-in module is a printer driver which has been installed in the computer <b>100</b>. The printer driver selected as an addition target of the add-in module by the user corresponds to such an addition target printer driver. It is assumed here that the printer driver <b>101</b> in <figref idref="DRAWINGS">FIG. 2</figref> is the addition target printer driver. Details of the process of step S<b>3000</b> will be described in <figref idref="DRAWINGS">FIG. 5</figref>.</p>
<p id="p-0073" num="0072">Subsequently, in step S<b>3100</b>, the add-in installer <b>106</b> forms add-in module order information. According to this process, in a printing process by both of the installed add-in module <b>102</b> detected in step S<b>3000</b> and the add-in module to be added by the add-in installer <b>106</b>, add-in module order information which holds proper order information (order adapted to make the plurality of add-in modules operative) is formed. The add-in module order information is formed only when the order in which the add-in modules can operate properly (order adapted to make the plurality of add-in modules operative) exists.</p>
<p id="p-0074" num="0073">As a holding format of the add-in module order information, although a format such as file format or format in which such information is held in the RAM <b>2</b> is not limited, description will be made here on the assumption that such information is held in the RAM <b>2</b>. In the add-in module order information, the number showing the order and a module name are held as a minimum information construction. Details of the process of step S<b>3100</b> will be described in <figref idref="DRAWINGS">FIG. 6</figref>.</p>
<p id="p-0075" num="0074">Subsequently, in step S<b>3200</b>, the add-in installer <b>106</b> discriminates whether or not the add-in module order information exists in the RAM <b>2</b>. If it is determined that the add-in module order information does not exist in the RAM <b>2</b>, the add-in installer <b>106</b> advances a processing routine to step S<b>3400</b>.</p>
<p id="p-0076" num="0075">The add-in installer <b>106</b> stops the add-in module installing process in step S<b>3400</b> and finishes the processing routine of this flowchart.</p>
<p id="p-0077" num="0076">If it is determined in step S<b>3200</b> that the add-in module order information exists in the RAM <b>2</b>, the add-in installer <b>106</b> advances the processing routine to step S<b>3300</b>.</p>
<p id="p-0078" num="0077">The add-in installer <b>106</b> executes the add-in module installing process in step S<b>3300</b> and finishes the processing routine of this flowchart. Details of the process in step S<b>3300</b> will be described in <figref idref="DRAWINGS">FIG. 7</figref>.</p>
<p id="p-0079" num="0078"><figref idref="DRAWINGS">FIG. 5</figref> is a flowchart showing an example of a second control processing procedure in the invention and corresponds to the detailed flow for the add-in module detecting process shown in step S<b>3000</b> in <figref idref="DRAWINGS">FIG. 4</figref>. That is, the processes in this flowchart are realized by a method whereby the program which corresponds to the add-in installer <b>106</b> and has been stored in the external memory <b>12</b> is executed in the RAM <b>2</b> by the CPU <b>1</b>. In the flowchart, S<b>4000</b> to S<b>4600</b> indicate processing steps.</p>
<p id="p-0080" num="0079">First, in step S<b>4000</b>, the add-in installer <b>106</b> obtains the construction information regarding the printer driver <b>101</b> with reference to the printer driver file information <b>104</b>.</p>
<p id="p-0081" num="0080">Subsequently, in step S<b>4100</b>, the add-in installer <b>106</b> discriminates whether or not the add-in module information file <b>103</b> exists. In this discriminating step, when at least one file information (add-in module file information <b>111</b>) regarding the add-in module information file <b>103</b> is included in the construction information obtained in step S<b>4000</b>, it is determined that the add-in module information file <b>103</b> exists. If none of the add-in module file information <b>111</b> is included in the construction information, it is determined that the add-in module information file <b>103</b> does not exist.</p>
<p id="p-0082" num="0081">If it is determined in step S<b>4100</b> that the add-in module information file <b>103</b> does not exist, the add-in installer <b>106</b> finishes the processing routine of this flowchart as it is and advances the processing routine to step S<b>3100</b> in <figref idref="DRAWINGS">FIG. 4</figref>.</p>
<p id="p-0083" num="0082">If it is determined in step S<b>4100</b> that the add-in module information file <b>103</b> exists, the add-in installer <b>106</b> advances the processing routine to step S<b>4200</b>.</p>
<p id="p-0084" num="0083">In step S<b>4200</b>, the add-in installer <b>106</b> discriminates whether or not the reference to all of the add-in module information files <b>103</b> registered in the construction information obtained in step S<b>4000</b> has been finished.</p>
<p id="p-0085" num="0084">If it is determined in step S<b>4200</b> that the reference to all of the add-in module information files <b>103</b> is not finished yet, the add-in installer <b>106</b> advances the processing routine to step S<b>4300</b>.</p>
<p id="p-0086" num="0085">In step S<b>4300</b>, the add-in installer <b>106</b> selects one of the add-in module information files <b>103</b> which have been registered in the construction information obtained in step S<b>4000</b> and are not referred to yet, and refers to the information in the selected add-in module information file <b>103</b>.</p>
<p id="p-0087" num="0086">In next step S<b>4400</b>, the add-in installer <b>106</b> discriminates whether or not the information in the add-in module information file <b>103</b> has normally been referred to in step S<b>4300</b>.</p>
<p id="p-0088" num="0087">If it is determined in step S<b>4400</b> that the information in the add-in module information file <b>103</b> is not normally referred to in step S<b>4300</b>, the add-in installer <b>106</b> advances the processing routine to step S<b>4500</b>.</p>
<p id="p-0089" num="0088">In step S<b>4500</b>, the add-in installer <b>106</b> regards that this add-in module is not normally operating, that is, the add-in of this add-in module is not performed, and advances the processing routine to step S<b>4600</b>.</p>
<p id="p-0090" num="0089">If it is determined in step S<b>4400</b> that the information in the add-in module information file <b>103</b> has normally been referred to in step S<b>4300</b>, the add-in installer <b>106</b> advances the processing routine to step S<b>4600</b>.</p>
<p id="p-0091" num="0090">In step S<b>4600</b>, the add-in installer <b>106</b> advances the processing routine to the reference to the next add-in module information file <b>103</b> and returns the processing routine to step S<b>4200</b>.</p>
<p id="p-0092" num="0091">If it is determined in step S<b>4200</b> that the reference to all of the add-in module information files <b>103</b> registered in the construction information has been finished, the add-in installer <b>106</b> finishes the processing routine of this flowchart and advances the processing routine to step S<b>3100</b> in <figref idref="DRAWINGS">FIG. 4</figref>.</p>
<p id="p-0093" num="0092">In this manner, the detailed operation of the add-in module detecting process shown in step S<b>3000</b> in <figref idref="DRAWINGS">FIG. 4</figref> is executed. If a plurality of printer drivers to which the add-in module is added are selected, processes similar to those mentioned above are repeated the number of times corresponding to the number of printer drivers which are selected.</p>
<p id="p-0094" num="0093"><figref idref="DRAWINGS">FIG. 6</figref> is a flowchart showing an example of a third control processing procedure in the invention and corresponds to the detailed flow for the add-in module order information forming process shown in step S<b>3100</b> in <figref idref="DRAWINGS">FIG. 4</figref>. That is, the processes in this flowchart are realized by a method whereby the program which corresponds to the add-in installer <b>106</b> and has been stored in the external memory <b>12</b> is executed in the RAM <b>2</b> by the CPU <b>1</b>. In the flowchart, S<b>5000</b> to S<b>5800</b> indicate processing steps.</p>
<p id="p-0095" num="0094">First, in step S<b>5000</b>, the add-in installer <b>106</b> executes an initializing process such as a process to newly form add-in module order information and the like.</p>
<p id="p-0096" num="0095">In step S<b>5100</b>, the add-in installer <b>106</b> discriminates whether or not the obtainment of the add-in module information files of all of the add-in modules detected in step S<b>3000</b> in <figref idref="DRAWINGS">FIG. 4</figref> and all of the add-in modules to be added from now on has been finished with respect to the addition target printer drivers of the add-in modules. That is, the add-in installer <b>106</b> discriminates whether or not the forming process of the add-in module order information has been completed.</p>
<p id="p-0097" num="0096">If it is determined in step S<b>5100</b> that the obtainment of the add-in module information files of all of the add-in modules detected in step S<b>3000</b> in <figref idref="DRAWINGS">FIG. 4</figref> and all of the add-in modules to be added from now on is not finished yet, the add-in installer <b>106</b> advances the processing routine to step S<b>5200</b>.</p>
<p id="p-0098" num="0097">In step S<b>5200</b>, the add-in installer <b>106</b> obtains one of the add-in module information files <b>103</b> which are not obtained yet among the add-in modules detected in step S<b>3000</b> in <figref idref="DRAWINGS">FIG. 4</figref> and the add-in modules to be added from now on. The add-in module corresponding to the obtained add-in module information file <b>103</b> is called an &#x201c;add-in module which is highlighted at present&#x201d;.</p>
<p id="p-0099" num="0098">In step S<b>5300</b>, the add-in installer <b>106</b> obtains the PriorityNumber <b>206</b> from the add-in module information file <b>103</b> obtained in step S<b>5200</b>. The PriorityNumber denotes, for example, an integer of 1 or more and defines the operating order according to a magnitude of a numerical value. By this PriorityNumber, it is also possible to cope with the case where the module has newly been added.</p>
<p id="p-0100" num="0099">In step S<b>5400</b>, the add-in installer <b>106</b> compares the PriorityNumbers of the add-in modules which have already been written in the add-in module order information until this processing step with the PriorityNumber of the add-in module which is highlighted at present. The add-in installer <b>106</b> determines the order (writing positions into the add-in module order information) so as to become the ascending order of the PriorityNumbers.</p>
<p id="p-0101" num="0100">Subsequently, in step S<b>5500</b>, the add-in installer <b>106</b> discriminates whether or not the PriorityNumbers can be written to the writing positions determined in step S<b>5400</b>. As a case where the PriorityNumbers cannot be written, a case where the PriorityNumbers are the same or such a competition that the modules cannot coexist or the like has occurred is considered.</p>
<p id="p-0102" num="0101">If it is determined in step S<b>5500</b> that the writing is impossible, the add-in installer <b>106</b> advances the processing routine to step S<b>5800</b>.</p>
<p id="p-0103" num="0102">In step S<b>5800</b>, the add-in installer <b>106</b> determines that the proper order (operating order adapted to make operative the add-in modules which have previously been added and the add-in modules which are added from now on) does not exist, and deletes the add-in module order information held in the RAM <b>2</b> at present. The add-in installer <b>106</b> displays a message to the display <b>11</b> in a step (not shown) in order to notify the user that the proper order (order adapted to make the add-in modules operative) to which the modules are applied does not exist because the PriorityNumbers are the same or such a competition that the modules cannot coexist or the like has occurred. The add-in installer <b>106</b> finishes the processing routine of this flowchart and advances the processing routine to step S<b>3200</b> in <figref idref="DRAWINGS">FIG. 4</figref>.</p>
<p id="p-0104" num="0103">If it is determined in step S<b>5500</b> that the writing is possible, the add-in installer <b>106</b> advances the processing routine to step S<b>5600</b>.</p>
<p id="p-0105" num="0104">In step S<b>5600</b>, the add-in installer <b>106</b> writes the name of the add-in module which is highlighted at present to the writing position in the add-in module order information decided in step S<b>5400</b>. In the embodiment, the number showing the order and the add-in module name are written.</p>
<p id="p-0106" num="0105">Subsequently, in step S<b>5700</b>, the add-in installer <b>106</b> advances the processing routine to the next add-in module information file and returns the processing routine to step S<b>5100</b>.</p>
<p id="p-0107" num="0106">If it is determined in step S<b>5100</b> that the obtainment of the add-in module information files of all of the add-in modules detected in step S<b>3000</b> in <figref idref="DRAWINGS">FIG. 4</figref> and all of the add-in modules to be added from now on has been finished, the add-in installer <b>106</b> finishes the processes in this flowchart and advances the processing routine to step S<b>3200</b> in <figref idref="DRAWINGS">FIG. 4</figref>.</p>
<p id="p-0108" num="0107">In this manner, the detailed operation of the add-in module order information forming process shown in step S<b>3100</b> in <figref idref="DRAWINGS">FIG. 4</figref> is executed. If a plurality of printer drivers to which the add-in module is added are selected, processes similar to those mentioned above are repeated the number of times corresponding to the number of printer drivers which are selected.</p>
<p id="p-0109" num="0108">Although each add-in module holds the PriorityNumber and the add-in module order information is formed in <figref idref="DRAWINGS">FIG. 6</figref>, the add-in module order information can be provided as file information from the outside. For example, it is also possible to construct the system in such a manner that the add-in module order information is opened as file information on the Web and it is obtained and provided from the Web.</p>
<p id="p-0110" num="0109">The add-in module order information may have a text format such as XML or a non-readable binary format and its data format is not limited.</p>
<p id="p-0111" num="0110"><figref idref="DRAWINGS">FIG. 7</figref> is a flowchart showing an example of a fourth control processing procedure in the invention and corresponds to the detailed flow for the add-in module installing process shown in step S<b>3300</b> in <figref idref="DRAWINGS">FIG. 4</figref>. That is, the processes in this flowchart are realized by a method whereby the program which corresponds to the add-in installer <b>106</b> and has been stored in the external memory <b>12</b> is executed in the RAM <b>2</b> by the CPU <b>1</b>. In the flowchart, S<b>6000</b> to S<b>6600</b> indicate processing steps.</p>
<p id="p-0112" num="0111">First, in step S<b>6000</b>, the add-in installer <b>106</b> initializes the add-in module file information <b>111</b> registered in the printer driver file information <b>104</b>.</p>
<p id="p-0113" num="0112">Subsequently, in step S<b>6100</b>, the add-in installer <b>106</b> obtains the add-in module order information formed in step S<b>3100</b>.</p>
<p id="p-0114" num="0113">In next step S<b>6200</b>, the add-in installer <b>106</b> discriminates whether or not the installing process of all of the add-in modules written in the add-in module order information obtained in step S<b>6100</b> has been completed.</p>
<p id="p-0115" num="0114">If it is determined in step S<b>6200</b> that the installing process of all of the add-in modules written in the add-in module order information obtained in step S<b>6100</b> is not completed, the add-in installer <b>106</b> advances a processing routine to step S<b>6300</b>.</p>
<p id="p-0116" num="0115">In step S<b>6300</b>, the add-in installer <b>106</b> obtains one add-in module (add-in module construction file) from the smaller operating order according to the add-in module order information.</p>
<p id="p-0117" num="0116">Subsequently, in step S<b>6400</b>, the add-in installer <b>106</b> adds the add-in module construction file obtained in step S<b>6300</b> to a predetermined area in the external memory <b>12</b> (storing area in the OS). It is assumed that this processing step is executed only to the add-in module which is newly additionally installed this time and it is skipped with respect to the add-in modules which have previously been added.</p>
<p id="p-0118" num="0117">In next step S<b>6500</b>, the add-in installer <b>106</b> registers the add-in module file information <b>111</b> (including the information <b>112</b> to specify the add-in module information file) into the printer driver construction information (printer driver file information <b>104</b>).</p>
<p id="p-0119" num="0118">In next step S<b>6600</b>, the add-in installer <b>106</b> advances the processing routine to the next add-in module written in the add-in module order information and returns the processing routine to step S<b>6200</b>.</p>
<p id="p-0120" num="0119">If it is determined in step S<b>6200</b> that the installing process of all of the add-in modules written in the add-in module order information has been completed, the add-in installer <b>106</b> finishes the processes of this flowchart.</p>
<p id="p-0121" num="0120">By executing the installing process as mentioned above, the new add-in module can be registered in such a manner that the add-in modules which have previously been added and the add-in modules which were newly added can execute the processes in the operating order decided in step S<b>3100</b> in <figref idref="DRAWINGS">FIG. 4</figref>.</p>
<p id="p-0122" num="0121">&#x3c;With Respect to Add-in Installer UI&#x3e;</p>
<p id="p-0123" num="0122"><figref idref="DRAWINGS">FIG. 8</figref> is a flowchart showing an example of a fifth control processing procedure in the invention and corresponds to the detailed flow for the UI display at the time of the add-in installation by the add-in installer <b>106</b>. That is, the processes in this flowchart are realized by a method whereby the program which corresponds to the add-in installer <b>106</b> and stored in the external memory <b>12</b> is executed in the RAM <b>2</b> by the CPU <b>1</b>. In the flowchart, S<b>7000</b> to S<b>7400</b> indicate processing steps.</p>
<p id="p-0124" num="0123"><figref idref="DRAWINGS">FIGS. 9 to 13</figref> are schematic diagrams each illustrating an example of a display screen at the time of the UI displaying process upon add-in installation by the add-in installer <b>106</b>.</p>
<p id="p-0125" num="0124">First, when an add-in setup wizard is started, the add-in installer <b>106</b> displays a start display screen as illustrated in <figref idref="DRAWINGS">FIG. 9</figref> onto the display <b>11</b> in step S<b>7000</b>.</p>
<p id="p-0126" num="0125">In the start display screen illustrated in <figref idref="DRAWINGS">FIG. 9</figref>, when a &#x201c;Next&#x201d; button <b>801</b> is instructed (clicked by the PD <b>9</b>), the add-in installer <b>106</b> advances the processing routine to step S<b>7100</b> in <figref idref="DRAWINGS">FIG. 8</figref>.</p>
<p id="p-0127" num="0126">Although not shown in the flowchart of <figref idref="DRAWINGS">FIG. 8</figref>, if a &#x201c;Cancel&#x201d; button <b>802</b> is instructed (clicked by the PD <b>9</b>) in the start display screen illustrated in <figref idref="DRAWINGS">FIG. 9</figref>, the add-in installer <b>106</b> stops the processing routine of the flowchart of <figref idref="DRAWINGS">FIG. 8</figref>.</p>
<p id="p-0128" num="0127">Subsequently, the add-in installer <b>106</b> displays a driver type selecting display screen as illustrated in <figref idref="DRAWINGS">FIG. 10A</figref> onto the display <b>11</b> in step S<b>7100</b> in <figref idref="DRAWINGS">FIG. 8</figref>.</p>
<p id="p-0129" num="0128">In the driver type selecting display screen as illustrated in <figref idref="DRAWINGS">FIG. 10A</figref>, a list of the printer drivers which are at present the installation targets of the add-in module is displayed as shown by <b>901</b>.</p>
<p id="p-0130" num="0129">If an &#x201c;Add and delete&#x201d; button <b>902</b> is instructed (clicked by the PD <b>9</b>) in the driver type selecting display screen, the add-in installer <b>106</b> displays a display screen as illustrated in <figref idref="DRAWINGS">FIG. 10B</figref> onto the display <b>11</b>.</p>
<p id="p-0131" num="0130">In the display screen illustrated in <figref idref="DRAWINGS">FIG. 10B</figref>, a list of the printer drivers to which the add-in module can be installed is displayed as shown by <b>906</b>.</p>
<p id="p-0132" num="0131">If an &#x201c;Add to list of drivers to be installed&#x201d; button <b>907</b> is instructed (clicked by the PD <b>9</b>) in the display screen illustrated in <figref idref="DRAWINGS">FIG. 10B</figref>, the add-in installer <b>106</b> adds the printer driver selected in <b>906</b> to a list <b>910</b> of the printer drivers which are the installation targets of the add-in module.</p>
<p id="p-0133" num="0132">If a &#x201c;Delete&#x201d; button <b>908</b> is instructed (clicked by the PD <b>9</b>) in the display screen illustrated in <figref idref="DRAWINGS">FIG. 10B</figref>, the add-in installer <b>106</b> deletes the printer driver selected in <b>910</b> from the installation targets.</p>
<p id="p-0134" num="0133">If an &#x201c;OK&#x201d; button <b>909</b> is instructed (clicked by the PD <b>9</b>) in the display screen illustrated in <figref idref="DRAWINGS">FIG. 10B</figref>, the add-in installer <b>106</b> closes the display screen of <figref idref="DRAWINGS">FIG. 10B</figref>, reflects the contents of the list <b>910</b> to the list <b>901</b>, and returns to the display screen of <figref idref="DRAWINGS">FIG. 10A</figref>.</p>
<p id="p-0135" num="0134">If a &#x201c;Cancel&#x201d; button <b>911</b> is instructed (clicked by the PD <b>9</b>) in the display screen illustrated in <figref idref="DRAWINGS">FIG. 10B</figref>, the add-in installer <b>106</b> closes the display screen of <figref idref="DRAWINGS">FIG. 10B</figref> and returns to the display screen of <figref idref="DRAWINGS">FIG. 10A</figref>.</p>
<p id="p-0136" num="0135">If a &#x201c;Back&#x201d; button <b>903</b> is instructed (clicked by the PD <b>9</b>) in the display screen illustrated in <figref idref="DRAWINGS">FIG. 10A</figref>, the add-in installer <b>106</b> returns the processing routine to step S<b>7000</b> in <figref idref="DRAWINGS">FIG. 8</figref>.</p>
<p id="p-0137" num="0136">If a &#x201c;Start&#x201d; button <b>904</b> is instructed (clicked by the PD <b>9</b>) in the display screen illustrated in <figref idref="DRAWINGS">FIG. 10A</figref>, the add-in installer <b>106</b> advances the processing routine to step S<b>7200</b> in <figref idref="DRAWINGS">FIG. 8</figref>.</p>
<p id="p-0138" num="0137">Although not shown in the flowchart of <figref idref="DRAWINGS">FIG. 8</figref>, if a &#x201c;Cancel&#x201d; button <b>905</b> is instructed (clicked by the PD <b>9</b>) in the display screen illustrated in <figref idref="DRAWINGS">FIG. 10A</figref>, the add-in installer <b>106</b> stops the processing routine of the flowchart in <figref idref="DRAWINGS">FIG. 8</figref>.</p>
<p id="p-0139" num="0138">In step S<b>7200</b> in <figref idref="DRAWINGS">FIG. 8</figref>, the add-in installer <b>106</b> displays an installation warning display screen illustrated in <figref idref="DRAWINGS">FIG. 11</figref> onto the display <b>11</b>.</p>
<p id="p-0140" num="0139">If a &#x201c;No&#x201d; button <b>1005</b> is instructed (clicked by the PD <b>9</b>) in the display screen of <figref idref="DRAWINGS">FIG. 11</figref>, the add-in installer <b>106</b> stops the processing routine of the flowchart in <figref idref="DRAWINGS">FIG. 8</figref> although not shown in the flowchart of <figref idref="DRAWINGS">FIG. 8</figref>.</p>
<p id="p-0141" num="0140">If a &#x201c;Yes&#x201d; button <b>1001</b> is instructed (clicked by the PD <b>9</b>) in the display screen of <figref idref="DRAWINGS">FIG. 11</figref>, the add-in installer <b>106</b> advances the processing routine to step S<b>7300</b>.</p>
<p id="p-0142" num="0141">In step S<b>7300</b> in <figref idref="DRAWINGS">FIG. 8</figref>, the add-in installer <b>106</b> displays a status display screen as illustrated in <figref idref="DRAWINGS">FIG. 12</figref> onto the display <b>11</b> and executes the processes (installing process) shown in the flowchart of <figref idref="DRAWINGS">FIG. 4</figref>.</p>
<p id="p-0143" num="0142">After completion of the installing process shown in <figref idref="DRAWINGS">FIG. 4</figref>, the add-in installer <b>106</b> advances the processing routine to step S<b>7400</b> in <figref idref="DRAWINGS">FIG. 8</figref>.</p>
<p id="p-0144" num="0143">In step S<b>7400</b> in <figref idref="DRAWINGS">FIG. 8</figref>, the add-in installer <b>106</b> displays an installation result display screen as illustrated in <figref idref="DRAWINGS">FIG. 13</figref> onto the display <b>11</b>, thereby indicating whether or not the add-in installation is successful. The example illustrated in <figref idref="DRAWINGS">FIG. 13</figref> corresponds to the case where the add-in installation is successful (has been completed) in the processing routine shown in <figref idref="DRAWINGS">FIG. 4</figref>.</p>
<p id="p-0145" num="0144">If the proper installing order in the operation does not exist in the processing routine shown in <figref idref="DRAWINGS">FIG. 4</figref>, or the like, the add-in installer <b>106</b> displays a message showing that the add-in installation has failed onto the installation result display screen.</p>
<p id="p-0146" num="0145">If an instruction <b>1201</b> is selected by the PD <b>9</b> and an &#x201c;Finish&#x201d; button <b>1203</b> is instructed (clicked by the PD <b>9</b>) in the installation result display screen illustrated in <figref idref="DRAWINGS">FIG. 13</figref>, the add-in installer <b>106</b> closes the display screen of <figref idref="DRAWINGS">FIG. 13</figref> and restarts the computer <b>100</b>. Thus, the change of the printer driver <b>101</b> performed by the add-in installer <b>106</b> is reflected to the computer <b>100</b>.</p>
<p id="p-0147" num="0146">If an instruction <b>1202</b> is selected by the PD <b>9</b> and the &#x201c;Finish&#x201d; button <b>1203</b> is instructed (clicked by the PD <b>9</b>) in the installation result display screen illustrated in <figref idref="DRAWINGS">FIG. 13</figref>, the add-in installer <b>106</b> closes the display screen of <figref idref="DRAWINGS">FIG. 13</figref>.</p>
<p id="p-0148" num="0147">&#x3c;Flow for Calling Process of Add-in Module <b>102</b>&#x3e;</p>
<p id="p-0149" num="0148">Details of the printing process of the printer driver having the installed add-in module according to the embodiment will now be described with reference to <figref idref="DRAWINGS">FIGS. 1</figref>, <b>2</b>, and <b>14</b>.</p>
<p id="p-0150" num="0149">The application <b>108</b>, graphic engine <b>109</b>, printer driver <b>101</b>, and print service <b>105</b> exist as files stored in the external memory <b>12</b>. They are program modules which are loaded into the RAM <b>2</b> and executed by the OS which is executed by the CPU <b>1</b> or by the module which uses those modules and are executed.</p>
<p id="p-0151" num="0150">The application <b>108</b> and the printer driver <b>101</b> can be added into one of the FD and the CD-ROM of the external memory <b>12</b> or into the HD of the external memory <b>12</b> through the network <b>20</b> (not shown).</p>
<p id="p-0152" num="0151">The application <b>108</b> stored in the external memory <b>12</b> is loaded into the RAM <b>2</b> and executed by the CPU <b>1</b>. However, when the application <b>108</b> instructs the printer <b>30</b> to print, the output (drawing) is executed by using the graphic engine <b>109</b> which has similarly been loaded into the RAM <b>2</b> and can be executed.</p>
<p id="p-0153" num="0152">The graphic engine <b>109</b> loads the printer driver <b>101</b> prepared every printing apparatus such as a printer into the RAM <b>2</b> from the external memory <b>12</b> and sets the output of the application <b>108</b> into the printer driver <b>101</b>. The graphic engine <b>109</b> converts a GDI (Graphic Device Interface) function received from the application <b>108</b> into a DDI (Device Driver Interface) function and outputs to the printer driver <b>101</b>.</p>
<p id="p-0154" num="0153">The printer driver <b>101</b> converts the DDI function received from the graphic engine <b>109</b> into a control command which can be recognized by the printer, for example, a PDL (Page Description Language). The converted printer control command is output as print data to the printer <b>30</b> through the print service <b>105</b> loaded into the RAM <b>2</b> by the OS.</p>
<p id="p-0155" num="0154">The print system of the embodiment has an add-in module processing unit <b>110</b> in the printer driver <b>101</b>.</p>
<p id="p-0156" num="0155">When executing the add-in module <b>102</b>, the printer driver <b>101</b> calls the add-in module <b>102</b> through the add-in module processing unit <b>110</b> and executes the process. Details of the calling process of the add-in module <b>102</b> will be described with reference to <figref idref="DRAWINGS">FIG. 14</figref>.</p>
<p id="p-0157" num="0156"><figref idref="DRAWINGS">FIG. 14</figref> is a flowchart showing an example of a sixth control processing procedure in the invention and corresponds to the detailed flow for the calling process of the add-in module by the printer driver <b>101</b>. That is, the processes in this flowchart are realized by a method whereby the program which corresponds to the add-in installer <b>106</b> and has been stored in the external memory <b>12</b> is executed in the RAM <b>2</b> by the CPU <b>1</b>. In the flowchart, S<b>13000</b> to S<b>13700</b> indicate processing steps.</p>
<p id="p-0158" num="0157">First, in step S<b>13000</b>, the printer driver <b>101</b> obtains the construction information regarding the printer driver <b>101</b> with reference to the printer driver file information <b>104</b>.</p>
<p id="p-0159" num="0158">Subsequently, in step S<b>13100</b>, the printer driver <b>101</b> discriminates whether or not the add-in module information file <b>103</b> exists. In this discriminating step, when at least one file information (add-in module file information <b>111</b>) regarding the add-in module information file <b>103</b> is included in the construction information obtained in step S<b>13000</b>, it is determined that the add-in module information file <b>103</b> exists. If none of the add-in module file information <b>111</b> is included in the construction information, it is determined that the add-in module information file <b>103</b> does not exist. In the embodiment, if the processing routine of <figref idref="DRAWINGS">FIG. 7</figref> is executed, the add-in module file information <b>111</b> has been registered in the printer driver file information <b>104</b> in order from the smaller operating order.</p>
<p id="p-0160" num="0159">If it is determined in step S<b>13100</b> that the add-in module information file <b>103</b> does not exist, the printer driver <b>101</b> finishes the processing routine of this flowchart as it is.</p>
<p id="p-0161" num="0160">If it is determined in step S<b>13100</b> that the add-in module information file <b>103</b> exists, the printer driver <b>101</b> advances the processing routine to step S<b>13200</b>.</p>
<p id="p-0162" num="0161">In step S<b>13200</b>, the printer driver <b>101</b> discriminates whether or not the reference to all of the add-in module information files registered in the construction information obtained in step S<b>13000</b> has been finished.</p>
<p id="p-0163" num="0162">If it is determined in step S<b>13200</b> that the reference to all of the add-in module information files <b>103</b> is not finished yet, the printer driver <b>101</b> advances the processing routine to step S<b>13300</b>.</p>
<p id="p-0164" num="0163">In step S<b>13300</b>, the printer driver <b>101</b> selects one of the add-in module information files <b>103</b> which have been registered in the construction information obtained in step S<b>13000</b> and are not referred to yet, and refers to the information in the selected add-in module information file <b>103</b>.</p>
<p id="p-0165" num="0164">In next step S<b>13400</b>, the printer driver <b>101</b> discriminates whether or not the information in the add-in module information file has normally been referred to in step S<b>13300</b>.</p>
<p id="p-0166" num="0165">If it is determined in step S<b>13400</b> that the information in the add-in module information file is not normally referred to in step S<b>13300</b>, the printer driver <b>101</b> advances the processing routine to step S<b>13500</b>.</p>
<p id="p-0167" num="0166">In step S<b>13500</b>, the printer driver <b>101</b> regards that this add-in module is not normally operating, that is, the add-in of this add-in module is not performed, and advances the processing routine to step S<b>13700</b>.</p>
<p id="p-0168" num="0167">If it is determined in step S<b>13400</b> that the information in the add-in module information file has normally been referred to in step S<b>13300</b>, the printer driver <b>101</b> advances the processing routine to step S<b>13600</b>.</p>
<p id="p-0169" num="0168">In step S<b>13600</b>, the printer driver <b>101</b> calls the add-in module which has been referred to in step S<b>13300</b>.</p>
<p id="p-0170" num="0169">The printer driver <b>101</b> confirms the presence or absence of other add-in modules which are inconvenient to the operation of the target add-in module called in step S<b>13600</b>. If there are the inconvenient add-in modules, precision of the order control can be also raised by displaying a warning display screen onto the display <b>11</b>. For example, if the module which intends to limit the function is called as a target module, the target module adds a hash value to the data as alteration detection in order to prevent that the function limitation due to the rewriting from the module at the post stage is invalidated. The hash value is a value representing data calculated according to a certain rule. For example, the alteration can be detected by comparing a hash value embedded on the host side with a hash value obtained on the device side.</p>
<p id="p-0171" num="0170">There is considered a case where a module such as an encrypted module has been found as a calling module at the post stage in the add-in module information file <b>103</b>; that is, such an encrypted module that the rewriting is performed by further executing an encryption by using a key serving as an encryption table to the print data. In this manner, if the encrypted module as mentioned above is executed after the hash value as mentioned above was calculated, the hash value which is obtained by the encryption also becomes a different value, so that it is detected that the alteration has been performed. Therefore, a message to stop the printing and uninstall the relevant module, a message to change the order of the encrypted module and the function limiting module including the alteration detection and install, or the like is displayed.</p>
<p id="p-0172" num="0171">That is, after the process of the alteration detecting module of a job, if the encrypted module operates and encrypts the job, there is a case where in spite of the fact that the data before the encryption is not altered, it is detected that the data has been altered. In such a case, it is proper to execute the process of the alteration detecting module of the job after the encrypting process.</p>
<p id="p-0173" num="0172">Description will be returned to the flowchart hereinbelow.</p>
<p id="p-0174" num="0173">When the process of step S<b>13600</b> is finished, the printer driver <b>101</b> advances the processing routine to step S<b>13700</b>.</p>
<p id="p-0175" num="0174">In step S<b>13700</b>, the printer driver <b>101</b> advances the processing routine to the reference to the next add-in module information file and returns the processing routine to step S<b>13200</b>.</p>
<p id="p-0176" num="0175">If it is determined in step S<b>13200</b> that the reference to all of the add-in module information files has been finished, the printer driver <b>101</b> finishes the processing routine of this flowchart.</p>
<p id="p-0177" num="0176">As described above, according to the embodiment, when the add-in module is added to the printer driver, the setup control can be made so that the operating order (applying order) of the add-in module to be added and the existing add-in modules constructing the printer driver is made correct.</p>
<p id="p-0178" num="0177">Therefore, upon execution of the printing process, the printer driver can apply the add-in modules constructing the printer driver to the proper order (order adapted to make the add-in modules operative) and enables the add-in modules to properly operate.</p>
<heading id="h-0007" level="1">Second Embodiment</heading>
<p id="p-0179" num="0178">Although the first embodiment has been described with respect to the case where the add-in module is added to the printer driver, in the second embodiment, a case where a filter module which is provided by a filter construction in &#x201c;Filer Pipeline&#x201d; of Windows (registered trademark) Vista is added to the printer driver will now be described. It is assumed that a hardware construction is similar to that in the first embodiment.</p>
<p id="p-0180" num="0179">&#x3c;System Construction&#x3e;</p>
<p id="p-0181" num="0180"><figref idref="DRAWINGS">FIG. 15</figref> is a block diagram illustrating a constructional example of a print system according to the second embodiment of the invention and the same component elements as those in <figref idref="DRAWINGS">FIG. 2</figref> are designated by the same reference numerals.</p>
<p id="p-0182" num="0181">In <figref idref="DRAWINGS">FIG. 15</figref>, layout information <b>1401</b> of a filter module is provided by a filter construction in the printer driver <b>101</b>. The layout information <b>1401</b> specifies calling order of a filter module <b>1404</b>. In Windows (registered trademark) Vista, the filter module layout information file <b>1401</b> corresponds to &#x201c;Filter Configuration File&#x201d;.</p>
<p id="p-0183" num="0182">The filter module <b>1404</b> constructs the printer driver and includes a filter module information file <b>1405</b>. A data construction of the filter module information file <b>1405</b> will now be described with reference to <figref idref="DRAWINGS">FIG. 16</figref>.</p>
<p id="p-0184" num="0183"><figref idref="DRAWINGS">FIG. 16</figref> is a data constructional diagram showing the data construction of the filter module information file <b>1405</b> illustrated in <figref idref="DRAWINGS">FIG. 15</figref>.</p>
<p id="p-0185" num="0184">In <figref idref="DRAWINGS">FIG. 16</figref>, a file construction of the filter module <b>1404</b> has been described in an area <b>1501</b>. Version information of the filter module <b>1404</b> has been described in an area <b>1502</b>. A release date of the filter module <b>1404</b> has been described in an area <b>1503</b>. Product name information of the filter module <b>1404</b> has been described in an area <b>1504</b>. Detailed information of the filter module <b>1404</b> has been described in an area <b>1505</b>.</p>
<p id="p-0186" num="0185">PriorityNumber (priority number), that is, the unconditional number which decides the operating order has been described in an area <b>1506</b>. Copyright information of the filter module <b>1404</b> has been described in an area <b>1507</b>.</p>
<p id="p-0187" num="0186">The Printer driver file information <b>104</b> is one management information for allowing the OS to use the printer driver by using the print service <b>105</b>. For example, in Windows (registered trademark), &#x201c;DependentFiles&#x201d; in the registry corresponds to the printer driver file information <b>104</b>.</p>
<p id="p-0188" num="0187">Description will be returned to <figref idref="DRAWINGS">FIG. 15</figref> hereinbelow.</p>
<p id="p-0189" num="0188">The printer driver <b>101</b> can hold zero or one or more filter modules. The filter module <b>1404</b> is a file group including program files such as a DLL (Dynamic Link Library) and the like.</p>
<p id="p-0190" num="0189">In <figref idref="DRAWINGS">FIG. 15</figref>, the filter module <b>1404</b> has been installed and the filter module layout information file <b>1401</b> has been registered in the printer driver file information <b>104</b>. Information (for example, filter module information file name) <b>1402</b> to specify the filter module information file is included in the filter module layout information file <b>1401</b>.</p>
<p id="p-0191" num="0190">In the case where a plurality of filter modules have been installed in the printer driver <b>101</b>, the information <b>1402</b> to specify the filter module information file is included in the filter module layout information file <b>1401</b> every filter module (calling order).</p>
<p id="p-0192" num="0191">A filter add-in installer <b>1403</b> is a main device to accomplish the object of the invention and is a program for additionally installing the filter module <b>1404</b> into the installed printer driver <b>101</b>. It is assumed that the filter module file which is additionally installed has been stored in the filter add-in installer <b>1403</b> or in another storing area in the external memory <b>12</b>.</p>
<p id="p-0193" num="0192">The filter add-in installer <b>1403</b> mainly has the following functions (1) to (6).</p>
<p id="p-0194" num="0193">Construction filter module detecting function for detecting one or a plurality of filter modules constructing one or a plurality of printer drivers.</p>
<p id="p-0195" num="0194">Filter module proper operating order discriminating function for discriminating the order of the proper operations of the filter module and one or a plurality of filter modules constructing the printer driver (order adapted to make the plurality of filter modules operative).</p>
<p id="p-0196" num="0195">File adding function for adding the filter module file.</p>
<p id="p-0197" num="0196">Filter module layout information changing function for changing filter module layout information according to the above operating order (so that the filter modules operate in the above operating order.</p>
<p id="p-0198" num="0197">File registering function for registering the added additional file into the printer driver file information <b>104</b>.</p>
<p id="p-0199" num="0198">Recognizing function for allowing the print service to recognize the change in module construction.</p>
<p id="p-0200" num="0199">A flow for processes in the filter add-in installer <b>1403</b> will be described in detail with reference to <figref idref="DRAWINGS">FIG. 17</figref> and subsequent diagrams, which will be described hereinafter.</p>
<p id="p-0201" num="0200">&#x3c;Flow for Process in the Filter Add-in Installer <b>1403</b>&#x3e;</p>
<p id="p-0202" num="0201"><figref idref="DRAWINGS">FIG. 17</figref> is a flowchart showing an example of a seventh control processing procedure in the invention and corresponds to the detailed flow for the process of the filter add-in installer <b>1403</b>. That is, the processes in this flowchart are realized by a method whereby the program which corresponds to the add-in installer <b>106</b> and has been stored in the external memory <b>12</b> is executed in the RAM <b>2</b> by the CPU <b>1</b>. In the flowchart, S<b>16000</b> to S<b>16400</b> indicate processing steps.</p>
<p id="p-0203" num="0202">First, in step S<b>16000</b>, the filter add-in installer <b>1403</b> detects the installed filter module with respect to the additional target printer driver of the filter module. The additional target printer driver of the filter module is a printer driver which has already been installed in the computer <b>100</b>. The driver selected by the user as an additional target of the filter module corresponds to the additional target printer driver of the filter module. It is assumed here that the printer driver <b>101</b> in <figref idref="DRAWINGS">FIG. 15</figref> corresponds to such a driver. Details of the process of step S<b>16000</b> will be described in <figref idref="DRAWINGS">FIG. 18</figref>.</p>
<p id="p-0204" num="0203">Subsequently, in step S<b>16100</b>, the filter add-in installer <b>1403</b> forms filter module order information. According to this process, in a printing process in which the installed filter module <b>1404</b> detected in step S<b>16000</b> and the filter module to be added by the filter add-in installer <b>1403</b>, filter module order information which holds proper order information (order adapted to make the plurality of filter modules operative) is formed. The filter module order information is formed only when the order in which the filter modules can operate properly (order adapted to make the plurality of filter modules operative) exists.</p>
<p id="p-0205" num="0204">As a holding format of the filter module order information, although a format such as file format or format in which such information is held in the RAM <b>2</b> is not limited, description will be made here on the assumption that such information is held in the RAM <b>2</b>. In the filter module order information, the number showing the order and a module name are held as a minimum information construction. Details of the process of step S<b>16100</b> will be described in <figref idref="DRAWINGS">FIG. 19</figref>.</p>
<p id="p-0206" num="0205">Subsequently, in step S<b>16200</b>, the filter add-in installer <b>1403</b> discriminates whether or not the filter module order information exists in the RAM <b>2</b>. If it is determined that the filter module order information does not exist in the RAM <b>2</b>, the filter add-in installer <b>1403</b> advances a processing routine to step S<b>16400</b>.</p>
<p id="p-0207" num="0206">The filter add-in installer <b>1403</b> stops the filter module installing process in step S<b>16400</b> and finishes the processing routine of this flowchart.</p>
<p id="p-0208" num="0207">If it is determined in step S<b>16200</b> that the filter module order information exists in the RAM <b>2</b>, the filter add-in installer <b>1403</b> advances the processing routine to step S<b>16300</b>.</p>
<p id="p-0209" num="0208">The filter add-in installer <b>1403</b> executes the filter module installing process in step S<b>16300</b> and finishes the processing routine of this flowchart. Details of the process in step S<b>16300</b> will be described in <figref idref="DRAWINGS">FIG. 20</figref>.</p>
<p id="p-0210" num="0209"><figref idref="DRAWINGS">FIG. 18</figref> is a flowchart showing an example of an eighth control processing procedure in the invention and corresponds to the detailed flow for the filter module detecting process shown in step S<b>16000</b>. That is, the processes in this flowchart are realized by a method whereby the program which corresponds to the filter add-in installer <b>1403</b> and has been stored in the external memory <b>12</b> is executed in the RAM <b>2</b> by the CPU <b>1</b>. In the flowchart, S<b>17000</b> to S<b>17600</b> indicate processing steps.</p>
<p id="p-0211" num="0210">First, in step S<b>17000</b>, the filter add-in installer <b>1403</b> obtains the construction information regarding the printer driver <b>101</b> with reference to the printer driver file information <b>104</b>.</p>
<p id="p-0212" num="0211">Subsequently, in step S<b>17100</b>, the filter add-in installer <b>1403</b> discriminates whether or not the filter module layout information file <b>1401</b> exists in the construction information obtained in step S<b>17000</b>.</p>
<p id="p-0213" num="0212">If it is determined in step S<b>17100</b> that the filter module layout information file <b>1401</b> does not exist, the filter add-in installer <b>1403</b> finishes the processing routine of this flowchart as it is and advances the processing routine to step S<b>16100</b> in <figref idref="DRAWINGS">FIG. 17</figref>.</p>
<p id="p-0214" num="0213">If it is determined in step S<b>17100</b> that the filter module layout information file <b>1401</b> exists, the filter add-in installer <b>1403</b> advances the processing routine to step S<b>17200</b>.</p>
<p id="p-0215" num="0214">In step S<b>17200</b>, the filter add-in installer <b>1403</b> discriminates whether or not the reference to all of the filter module information files <b>1405</b> registered in the filter module layout information file <b>1401</b> has been finished.</p>
<p id="p-0216" num="0215">If it is determined in step S<b>17200</b> that the reference to all of the filter module information files <b>1405</b> is not finished yet, the filter add-in installer <b>1403</b> advances the processing routine to step S<b>17300</b>.</p>
<p id="p-0217" num="0216">In step S<b>17300</b>, the filter add-in installer <b>1403</b> selects one of the filter module information files <b>1405</b> which have been registered in the filter module layout information file <b>1401</b> and are not referred to yet, and refers to the information in the selected filter module information file <b>1405</b>.</p>
<p id="p-0218" num="0217">In next step S<b>17400</b>, the filter add-in installer <b>1403</b> discriminates whether or not the information in the filter module information file <b>1405</b> has normally been referred to in step S<b>17300</b>.</p>
<p id="p-0219" num="0218">If it is determined in step S<b>17400</b> that the information in the filter module information file <b>1405</b> is not normally referred to in step S<b>17300</b>, the filter add-in installer <b>1403</b> advances the processing routine to step S<b>17500</b>.</p>
<p id="p-0220" num="0219">In step S<b>17500</b>, the filter add-in installer <b>1403</b> regards that this filter module is not normally operating, that is, it is not installed, and advances the processing routine to step S<b>17600</b>.</p>
<p id="p-0221" num="0220">If it is determined in step S<b>17400</b> that the information in the filter module information file <b>1405</b> has normally been referred to in step S<b>17300</b>, the filter add-in installer <b>1403</b> advances the processing routine to step S<b>17600</b>.</p>
<p id="p-0222" num="0221">In step S<b>17600</b>, the filter add-in installer <b>1403</b> advances the processing routine to the reference to the next filter module information file <b>1405</b> and returns the processing routine to step S<b>17200</b>.</p>
<p id="p-0223" num="0222">If it is determined in step S<b>17200</b> that the reference to all of the filter module information files <b>1405</b> registered in the filter module layout information file <b>1401</b> has been finished, the filter add-in installer <b>1403</b> finishes the processing routine of this flowchart and advances the processing routine to step S<b>16100</b> in <figref idref="DRAWINGS">FIG. 17</figref>.</p>
<p id="p-0224" num="0223">In this manner, the detailed operation of the filter module detecting process shown in step S<b>16000</b> in <figref idref="DRAWINGS">FIG. 17</figref> is executed. If a plurality of printer drivers to which the filter module is added are selected, processes similar to those mentioned above are repeated the number of times corresponding to the number of printer drivers which are selected.</p>
<p id="p-0225" num="0224"><figref idref="DRAWINGS">FIG. 19</figref> is a flowchart showing an example of a ninth control processing procedure in the invention and corresponds to the detailed flow for the filter module order information forming process shown in step S<b>16100</b> in <figref idref="DRAWINGS">FIG. 17</figref>. That is, the processes in this flowchart are realized by a method whereby the program which corresponds to the filter add-in installer <b>1403</b> and has been stored in the external memory <b>12</b> is executed in the RAM <b>2</b> by the CPU <b>1</b>. In the flowchart, S<b>18000</b> to S<b>18800</b> indicate processing steps.</p>
<p id="p-0226" num="0225">First, in step S<b>18000</b>, the filter add-in installer <b>1403</b> executes an initializing process such as a process to newly form filter module order information and the like.</p>
<p id="p-0227" num="0226">In step S<b>18100</b>, the filter add-in installer <b>1403</b> discriminates whether or not the obtainment of the filter information files of all of the filter modules detected in step S<b>16000</b> in <figref idref="DRAWINGS">FIG. 17</figref> and all of the filter modules to be added from now on has been finished for the addition target printer drivers of the filter modules. That is, the filter installer <b>1403</b> discriminates whether or not the forming process of the filter module order information has been completed.</p>
<p id="p-0228" num="0227">If it is determined in step S<b>18100</b> that the obtainment of the filter module information files of all of the filter modules detected in step S<b>16000</b> in <figref idref="DRAWINGS">FIG. 17</figref> and all of the filter modules to be added from now on is not finished yet, the filter add-in installer <b>1403</b> advances the processing routine to step S<b>18200</b>.</p>
<p id="p-0229" num="0228">In step S<b>18200</b>, the filter add-in installer <b>1403</b> obtains one of the filter module information files <b>1405</b> which are not obtained yet among the filter modules detected in step S<b>16000</b> in <figref idref="DRAWINGS">FIG. 17</figref> and the filter modules to be added from now on. The filter module corresponding to the obtained filter module information file <b>1405</b> is hereinbelow called a &#x201c;filter module which is highlighted at present&#x201d;.</p>
<p id="p-0230" num="0229">In step S<b>18300</b>, the filter add-in installer <b>1403</b> obtains the PriorityNumber <b>1506</b> from the filter module information file <b>1405</b> obtained in step S<b>18200</b>. The PriorityNumber denotes, for example, an integer of 1 or more and defines the operating order according to a magnitude of a numerical value. By this PriorityNumber, it is also possible to cope with the case where the module has newly been added.</p>
<p id="p-0231" num="0230">In step S<b>18400</b>, the file add-in installer <b>1403</b> compares the PriorityNumbers of the filter modules which have already been written in the filter module order information until this processing step with the PriorityNumber of the filter module which is highlighted at present. The filter add-in installer <b>1403</b> determines the order (writing positions into the filter module order information) so as to become the ascending order of the PriorityNumbers.</p>
<p id="p-0232" num="0231">Subsequently, in step S<b>18500</b>, the filter add-in installer <b>1403</b> discriminates whether or not the PriorityNumbers can be written to the writing positions determined in step S<b>18400</b>. As a case where the PriorityNumbers cannot be written, a case where the PriorityNumbers are the same or a competition of the modules which cannot coexist or the like has occurred is considered.</p>
<p id="p-0233" num="0232">If it is determined in step S<b>18500</b> that the writing is impossible, the filter add-in installer <b>1403</b> advances the processing routine to step S<b>18800</b>.</p>
<p id="p-0234" num="0233">In step S<b>18800</b>, the filter add-in installer <b>1403</b> determines that the proper order (operating order adapted to make operative the filter modules which have previously been added and the filter modules which are added from now on) does not exist, and deletes the filter module order information held in the RAM <b>2</b> at present. The filter add-in installer <b>1403</b> displays a message to the display <b>11</b> in a step (not shown) in order to notify the user that the proper order (order adapted to make the filter modules operative) to which the modules are applied does not exist because PriorityNumbers are the same or such a competition that the modules cannot coexist or the like has occurred. The filter add-in installer <b>1403</b> finishes the processing routine of this flowchart and advances the processing routine to step S<b>16200</b> in <figref idref="DRAWINGS">FIG. 17</figref>.</p>
<p id="p-0235" num="0234">If it is determined in step S<b>18500</b> that the writing is possible, the filter add-in installer <b>1403</b> advances the processing routine to step S<b>18600</b>.</p>
<p id="p-0236" num="0235">In step S<b>18600</b>, the filter add-in installer <b>1403</b> writes the name of the filter module which is highlighted at present to the writing position in the filter module order information decided in step S<b>18400</b>. In the embodiment, the number showing the order and the filter module name are written.</p>
<p id="p-0237" num="0236">Subsequently, in step S<b>18700</b>, the filter add-in installer <b>1403</b> advances the processing routine to the next filter module information file and returns the processing routine to step S<b>18100</b>.</p>
<p id="p-0238" num="0237">If it is determined in step S<b>18100</b> that the obtainment of the filter module information files of all of the filter modules detected in step S<b>16000</b> in <figref idref="DRAWINGS">FIG. 17</figref> and all of the filter modules to be added from now on has been finished, the filter add-in installer <b>1403</b> finishes the processes in this flowchart and advances the processing routine to step S<b>16200</b> in <figref idref="DRAWINGS">FIG. 17</figref>.</p>
<p id="p-0239" num="0238">In this manner, the detailed operation of the filter module order information forming process shown in step S<b>16100</b> in <figref idref="DRAWINGS">FIG. 17</figref> is executed. If a plurality of printer drivers to which the filter module is added are selected, processes similar to those mentioned above are repeated the number of times corresponding to the number of printer drivers which are selected.</p>
<p id="p-0240" num="0239">Although each filter module holds the PriorityNumber and the filter module order information is formed in <figref idref="DRAWINGS">FIG. 19</figref>, the filter module order information can be provided as file information from the outside. For example, it is also possible to construct the system in such a manner that the filter module order information is opened as file information on the Web and it is obtained and provided from the Web.</p>
<p id="p-0241" num="0240">The filter module order information may have a text format such as XML or a non-readable binary format and its data format is not limited.</p>
<p id="p-0242" num="0241"><figref idref="DRAWINGS">FIG. 20</figref> is a flowchart showing an example of a tenth control processing procedure in the invention and corresponds to the detailed flow for the filter module add-in installing process shown in step S<b>16300</b> in <figref idref="DRAWINGS">FIG. 17</figref>. That is, the processes in this flowchart are realized by a method whereby the program which corresponds to the filter add-in installer <b>1403</b> and has been stored in the external memory <b>12</b> is executed in the RAM <b>2</b> by the CPU <b>1</b>. In the flowchart, S<b>19000</b> to S<b>19700</b> indicate processing steps.</p>
<p id="p-0243" num="0242">First, in step S<b>19000</b>, the filter add-in installer <b>1403</b> initializes the filter module layout information file <b>1401</b> registered in the printer driver file information <b>104</b>. In this step, the information <b>1402</b> to specify each filter module information file described in the filter module layout information file <b>1401</b> is deleted once.</p>
<p id="p-0244" num="0243">Subsequently, in step S<b>19100</b>, the filter add-in installer <b>1403</b> obtains the filter module order information formed in step S<b>16100</b>.</p>
<p id="p-0245" num="0244">In next step S<b>19200</b>, the filter add-in installer <b>1403</b> discriminates whether or not the add-in installing process of all of the filter modules written in the filter module order information obtained in step S<b>19100</b> has been completed.</p>
<p id="p-0246" num="0245">If it is determined in step S<b>19200</b> that the add-in installing process of all of the filter modules written in the filter module order information obtained in step S<b>19100</b> is not completed, the filter add-in installer <b>1403</b> advances a processing routine to step S<b>19300</b>.</p>
<p id="p-0247" num="0246">In step S<b>19300</b>, the filter add-in installer <b>1403</b> obtains one filter module (filter module construction file) from the smaller operating order according to the filter module order information.</p>
<p id="p-0248" num="0247">Subsequently, in step S<b>19400</b>, the filter add-in installer <b>1403</b> adds the filter module construction file obtained in step S<b>19300</b> to a predetermined area in the external memory <b>12</b> (storing area in the OS). It is assumed that this processing step is executed only to the filter module which is newly additionally installed this time and it is skipped with respect to the filter modules which have previously been added.</p>
<p id="p-0249" num="0248">In next step S<b>19500</b>, the filter add-in installer <b>1403</b> registers the filter module into the printer driver construction information (printer driver file information <b>104</b>) obtained in step S<b>6400</b>.</p>
<p id="p-0250" num="0249">In next step S<b>19600</b>, the filter add-in installer <b>1403</b> adds the information <b>1402</b> to specify the filter module information file of the added filter module to a termination of the filter construction of the present filter module layout information file.</p>
<p id="p-0251" num="0250">In next step S<b>19700</b>, the filter add-in installer <b>1403</b> advances the processing routine to the next filter module written in the filter module order information and returns the processing routine to step S<b>19200</b>.</p>
<p id="p-0252" num="0251">If it is determined in step S<b>19200</b> that the installing process of all of the filter modules written in the filter module order information has been completed, the filter add-in installer <b>1403</b> finishes the processes of this flowchart.</p>
<p id="p-0253" num="0252">By executing the installing process as mentioned above, the new filter module can be registered in such a manner that the filter modules which have previously been added and the filter modules which were newly added can execute the processes in the operating order decided in step S<b>16100</b> in <figref idref="DRAWINGS">FIG. 17</figref>.</p>
<p id="p-0254" num="0253">&#x3c;With Respect to Filter Add-in Installer UI&#x3e;</p>
<p id="p-0255" num="0254">A filter add-in installer UI is similar to the add-in installer UI in the foregoing first embodiment. It is now assumed that as for the add-in installing process itself, the processes of <figref idref="DRAWINGS">FIG. 4</figref> are replaced by the processes of <figref idref="DRAWINGS">FIG. 17</figref>.</p>
<p id="p-0256" num="0255">&#x3c;Flow for Calling Process of Filter Module <b>1404</b>&#x3e;</p>
<p id="p-0257" num="0256">Details of the printing process of the printer driver having the filter module installed by the embodiment will be described with reference to <figref idref="DRAWINGS">FIGS. 1</figref>, <b>15</b>, and <b>21</b>. The same component elements as those in the drawings used in the first embodiment are designated by the same reference numerals.</p>
<p id="p-0258" num="0257">In &#x201c;XPS (XML Paper Specification) Print Path&#x201d; of Windows (registered trademark) Vista, the graphic engine <b>109</b> outputs one of a drawing command and an XPS document which are received from the application <b>108</b> to the printer driver <b>101</b> as an XPS document.</p>
<p id="p-0259" num="0258">The printer driver <b>101</b> converts the XPS document received from the graphic engine <b>109</b> into a control command which can be recognized by the printer, for example, a PDL (Page Description Language). In the print system of the embodiment, the OS calls the filter module <b>1404</b> in the printer driver <b>101</b>, so that the printing is executed. When executing the filter module <b>1404</b>, the printer driver <b>101</b> calls the filter module <b>1404</b> through the OS and executes the process. Details of the calling process of the filter module will be described with reference to <figref idref="DRAWINGS">FIG. 21</figref>.</p>
<p id="p-0260" num="0259"><figref idref="DRAWINGS">FIG. 21</figref> is a flowchart showing an example of an eleventh control processing procedure in the invention and corresponds to the detailed flow for the calling process of the filter module by the printer driver <b>101</b>. That is, the processes in this flowchart are realized by a method whereby the program which corresponds to the add-in installer <b>106</b> and has been stored in the external memory <b>12</b> is executed in the RAM <b>2</b> by the CPU <b>1</b>. In the flowchart, S<b>20000</b> to S<b>20400</b> indicate processing steps.</p>
<p id="p-0261" num="0260">First, in step S<b>20000</b>, the printer driver <b>101</b> obtains the construction information regarding the printer driver <b>101</b> with reference to the printer driver file information <b>104</b>.</p>
<p id="p-0262" num="0261">Subsequently, in step S<b>20100</b>, the printer driver <b>101</b> discriminates whether or not the filter module layout information file <b>1401</b> exists in the construction information obtained in step S<b>20000</b>. In the embodiment, as for the filter module layout information file <b>1401</b>, the information <b>1402</b> to specify the filter module information file is registered in order from the smaller operating order by the processes shown in <figref idref="DRAWINGS">FIG. 20</figref>.</p>
<p id="p-0263" num="0262">If it is determined in step S<b>20100</b> that the filter module layout information file <b>1401</b> does not exist, the printer driver <b>101</b> finishes the processing routine of this flowchart as it is.</p>
<p id="p-0264" num="0263">If it is determined in step S<b>20100</b> that the filter module layout information file <b>1401</b> exists, the printer driver <b>101</b> advances the processing routine to step S<b>20200</b>.</p>
<p id="p-0265" num="0264">In step S<b>20200</b>, the printer driver <b>101</b> discriminates whether or not the calling of all of the filter modules <b>1404</b> registered in the filter module layout information file <b>1401</b> has been finished.</p>
<p id="p-0266" num="0265">If it is determined in step S<b>20200</b> that the calling of all of the filter modules <b>1404</b> is not finished yet, the printer driver <b>101</b> advances the processing routine to step S<b>20300</b>.</p>
<p id="p-0267" num="0266">In step S<b>20300</b>, the printer driver <b>101</b> selects one of the filter modules <b>1404</b> which have been registered in the filter module layout information file <b>1401</b> and are not called yet, and calls the selected filter module <b>1404</b>.</p>
<p id="p-0268" num="0267">As described above, according to the embodiment, when the filter module is added to the printer driver, the setup control can be made so that the operating order (applying order) upon printing process of the filter module to be added and the existing filter modules constructing the printer driver is made correct.</p>
<p id="p-0269" num="0268">Therefore, upon execution of the printing process, the printer driver can apply the filter modules constructing the printer driver to the proper order (order adapted to make the filter modules operative) and enables the filter modules to properly operate.</p>
<p id="p-0270" num="0269">Although the first and second embodiments have been described with respect to the construction in which when the new module is added to the printer driver, the new module is added in such a manner that the operating order (applying order) at the time of the printing process of the module to be added and the existing modules constructing the printer driver is made correct and the registration state of the existing modules is changed and controlled.</p>
<p id="p-0271" num="0270">However, by executing the processes of the flowcharts shown in <figref idref="DRAWINGS">FIGS. 4 to 8</figref> or <figref idref="DRAWINGS">FIGS. 17 to 20</figref> in the state where there are no modules to be newly added, the registration of the existing modules can be changed and controlled so that the operating order (applying order) at the time of the printing process of the existing modules is made correct.</p>
<p id="p-0272" num="0271">For example, in the case where the user added the new module by the conventional method without executing the processes of the flowcharts shown in <figref idref="DRAWINGS">FIGS. 4 to 8</figref> or <figref idref="DRAWINGS">FIGS. 17 to 20</figref>, the operating order of the new module compared with that of the modules which have already been installed is not considered, so that there is a case where the new module does not normally operate.</p>
<p id="p-0273" num="0272">In such a case, since the modules themselves have already been added, the processes of the flowcharts shown in <figref idref="DRAWINGS">FIGS. 17 to 20</figref> are executed in the state where there are no modules to be newly added. Thus, although the installer does not add any new module but changes and controls the registration of the existing modules so that the operating order (applying order) of the modules which have already been installed is made correct.</p>
<p id="p-0274" num="0273">Each of the above embodiments has been described with respect to the application control of the module by the installer and the printer driver for adding one or a plurality of add-in modules (filter modules) to one or a plurality of printer drivers installed into the computer.</p>
<p id="p-0275" num="0274">However, the target to which the add-in module or the like is added is not limited to the printer driver but any other application program may be used so long as it is an application program to which the add-in module or the like can be added. That is, the invention can be also applied to application control of the module in the installer and application program for adding one or a plurality of add-in modules (filter modules) to one or a plurality of application programs installed into the computer.</p>
<p id="p-0276" num="0275">In the embodiment, the construction and contents of the foregoing various kinds of data are not limited to those mentioned above but, naturally, they are constructed by various constructions and contents according to the application and object.</p>
<p id="p-0277" num="0276">Although one embodiment has been shown above, the invention can have an embodiment as, for example, a system, an apparatus, a method, a program, a storing medium, or the like. Specifically speaking, the invention may be applied to a system constructed by a plurality of apparatuses or to an apparatus constructed by one device.</p>
<p id="p-0278" num="0277">A construction of a memory map in a storing medium which stores various data processing programs which can be read by the information processing apparatus (computer <b>100</b>) according to the invention will be described hereinbelow with reference to the memory map illustrated in <figref idref="DRAWINGS">FIG. 22</figref>.</p>
<p id="p-0279" num="0278"><figref idref="DRAWINGS">FIG. 22</figref> is a diagram for describing the memory map in a storing medium (recording medium) for storing various data processing programs which can be read by the information processing apparatus (computer <b>100</b>) according to the invention.</p>
<p id="p-0280" num="0279">Although not shown in particular, there is also a case where information for managing a group of programs which are stored into the storing medium, for example, version information, implementors, and the like are also stored and information depending on the OS or the like on the program reading side, for example, icons or the like which identify and display the programs are also stored.</p>
<p id="p-0281" num="0280">Further, data which depends on the various kinds of programs is also managed in the directory. There is also a case where a program for installing various programs into the computer and, if the program for installing has been compressed, a program for decoding such a program, and the like are stored.</p>
<p id="p-0282" num="0281">The functions shown in <figref idref="DRAWINGS">FIGS. 4</figref>, <b>5</b>, <b>6</b>, <b>7</b>, <b>8</b>, <b>14</b>, <b>17</b>, <b>18</b>, <b>19</b>, <b>20</b>, and <b>21</b> in the embodiments may be executed by a host computer according to a program which is installed from the outside. In such a case, the invention is also applied to a case where an information group including the program is supplied to an output apparatus by a storing medium such as CD-ROM, flash memory, or FD or from an external storing medium through the network.</p>
<p id="p-0283" num="0282">Naturally, the object of the invention is accomplished by a method whereby a storing medium in which program codes of software for realizing the functions of the foregoing embodiments have been recorded as mentioned above is supplied to a system or an apparatus and a computer (or a CPU or an MPU) of the system or apparatus reads out and executes the program codes stored in the storing medium.</p>
<p id="p-0284" num="0283">In this case, the program codes themselves read out of the storing medium realize the novel functions of the invention and the storing medium in which the program codes have been stored constructs the invention.</p>
<p id="p-0285" num="0284">Therefore, it is possible to use any one of an object code, a program which is executed by an interpreter, script data which is supplied to the OS, and the like so long as it has the function of the program, and the format of the program is not limited.</p>
<p id="p-0286" num="0285">As a storing medium for supplying the program, for example, a flexible disk, a hard disk, an optical disc, a magnetooptic disk, an MO, a CD-ROM, CD-R, CD-RW, a magnetic tape, a non-volatile memory card, a ROM, a DVD, or the like can be used.</p>
<p id="p-0287" num="0286">In this case, the program codes themselves read out of the storing medium realize the functions of the embodiments mentioned above and the storing medium in which the program codes have been stored constructs the invention.</p>
<p id="p-0288" num="0287">As another program supplying method, the program can be also supplied by a method whereby a client computer is connected to a Home page of the Internet by using a browser of the client computer and the program itself of the invention is downloaded from the Home page into a storing medium such as a hard disk. The program can be also supplied by a method whereby a compressed file including an automatic installing function is downloaded from the Home page onto the storing medium such as a hard disk. The program supplying method can be also realized by a method whereby the program codes constructing the program of the invention are divided into a plurality of files and the respective files are downloaded from different Home pages. That is, a WWW server, an FTP server, or the like for allowing a program file to realize the functional processes of the invention by the computer to be downloaded to a plurality of users is also incorporated in the scope of claims of the invention.</p>
<p id="p-0289" num="0288">The program of the invention is encrypted, stored into the storing medium such as a CD-ROM, and distributed to the user. Further, the users who can satisfy predetermined conditions are allowed to download key information for decrypting the encryption from the Home page through the Internet. Moreover, the encrypted program is executed by using the key information and installed into the computer and can be realized.</p>
<p id="p-0290" num="0289">Naturally, the invention incorporates not only a construction in which the computer executes the read-out program codes, so that the functions of the foregoing embodiments are realized, but also the following construction. For example, the OS (operating system) or the like which is operating on the computer executes a part or all of actual processes based on the instructions of the program codes and the functions of the foregoing embodiments are realized by those processes.</p>
<p id="p-0291" num="0290">Further, naturally, the invention incorporates a case where the program codes read out of the storing medium are written into a memory provided for a function expanding board inserted into the computer or a function expanding unit connected to the computer, a CPU or the like provided for the function expanding board or the function expanding unit executes a part or all of actual processes based on the instructions of the program codes written in the memory and the functions of the foregoing embodiments are realized by those processes.</p>
<p id="p-0292" num="0291">The invention can be applied to a system constructed by a plurality of apparatuses or may be applied to an apparatus constructed by one device. Naturally, the invention can be also applied to the case where the object of the invention is accomplished by supplying the program to the system or apparatus. In this case, the storing medium in which the program expressed by the software for accomplishing the present invention has been stored is supplied to the system or apparatus and read out, so that the system or apparatus can obtain the effects of the invention.</p>
<p id="p-0293" num="0292">The invention is not limited to the foregoing embodiments but various modifications (including an organic combination of the embodiments) are possible based on the essence of the present invention and they are not excluded from the scope of the invention.</p>
<p id="p-0294" num="0293">Although the invention has been described above while showing various embodiments, it will be understood to those skilled in the art that the essence and scope of the invention are not limited to the specific description in the specification.</p>
<p id="p-0295" num="0294">All constructions obtained by combining the foregoing embodiments and their modifications are also incorporated in the present invention.</p>
<p id="p-0296" num="0295">As described above, the invention relates to the installer which can add the module to the printer driver installed in the information processing apparatus. When the module is added, the modules which have been installed at present are detected, and the module is installed in consideration of the operating order of the module to be added and the installed modules. Therefore, when the module is added to the printer driver, the setting control can be made so that the operating order of the module to be added and the existing modules constructing the printer driver is made correct.</p>
<p id="p-0297" num="0296">The invention also incorporates the printer driver for making the modules installed in the proper order (order adapted to make the modules operative) operative based on the installing method when executing the printing. Therefore, upon execution of the printing process, the printer driver can properly apply the modules constructing the printer driver and make them operative.</p>
<p id="p-0298" num="0297">As mentioned above, by providing the novel functions by the add-in module or the filter module, it is possible to construct the flexible new-function providing environment of the printer driver which can add, in the correct operating order, the function which is not presumed at the beginning of the sale of the printing apparatus or the function which the user wants to optionally add.</p>
<p id="p-0299" num="0298">While the present invention has been described with reference to exemplary embodiments, it is to be understood that the invention is not limited to the disclosed exemplary embodiments. The scope of the following claims is to be accorded the broadest interpretation so as to encompass all such modifications and equivalent structures and functions.</p>
<p id="p-0300" num="0299">This application claims the benefit of Japanese Patent Application No. 2006-100194, filed Mar. 31, 2006, which is hereby incorporated by reference herein in its entirety.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>The invention claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A setup method of an information processing apparatus in which a module as a control program for expanding a printer driver has been installed and a set-up is executed in response to an installing instruction for the printer driver, comprising the steps of:
<claim-text>receiving an instruction indicative of adding a new module;</claim-text>
<claim-text>detecting the module installed in the information processing apparatus, in response to the received instruction; and</claim-text>
<claim-text>setting up the information processing apparatus such that the new module and the detected module execute processes in an operating order,</claim-text>
<claim-text>wherein, in said setting-up step, if the operating order related to the new module and the detected module is not determined, a warning is issued and an installing process of the new module is stopped.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. A method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein, in said setting-up step, registration of modules into construction information of the printer driver is changed to reflect that the new module and the detected module execute the processes in the operating order.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. A method according to <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the printer driver sequentially calls the modules in the information processing apparatus in the operating order based on the construction information of the printer driver.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. A method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising the step of displaying a message showing whether or not the set-up has been completed in the operating order.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. A method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein, when an encryption module and an alteration detection module are included in a plurality of modules including the new module and the detected module, the information processing apparatus is set up such that, as the operating order, a process by the alteration detection module is executed after a process by the encryption module.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. An information processing apparatus in which a module as a control program for expanding a printer driver has been installed and a set-up is executed in response to an installing instruction for the printer driver, comprising:
<claim-text>a receiving unit which receives an instruction indicative of adding a new module;</claim-text>
<claim-text>a detecting unit adapted to detect the module installed in the information processing apparatus in response to the received instruction; and</claim-text>
<claim-text>a set-up unit adapted to set up the information processing apparatus such that the new module and the detected module execute processes in an operating order,</claim-text>
<claim-text>wherein said set-up unit, if the operating order related to the new module and the detected module is not determined, issues a warning and stops an installing process of the new module.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. An apparatus according to <claim-ref idref="CLM-00006">claim 6</claim-ref>, wherein said set-up unit changes registration of modules into construction information of the printer driver to reflect that the new module and the detected module execute the processes in the operating order.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. An apparatus according to <claim-ref idref="CLM-00007">claim 7</claim-ref>, further comprising a control unit adapted to call the modules in the information processing apparatus in the operating order based on the construction information of the printer driver.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. An apparatus according to <claim-ref idref="CLM-00006">claim 6</claim-ref>, further comprising a display unit adapted to display a message showing whether or not the set-up has been completed in the operating order.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. An apparatus according to <claim-ref idref="CLM-00006">claim 6</claim-ref>, wherein, when an encryption module and an alteration detection module are included in a plurality of modules including the new module and the detected module, said set-up unit sets up the information processing apparatus such that, as the operating order, a process by the alteration detection module is executed after a process by the encryption module.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. A non-transitory computer-readable storage medium storing a computer program for causing a computer to execute a method of setting up an information processing apparatus in which and a module as a control program for expanding a printer driver has been installed and a set-up is executed in response to an installing instruction for the printer driver, the method comprising the steps of:
<claim-text>receiving an instruction indicative of adding a new module;</claim-text>
<claim-text>detecting the module installed in the information processing apparatus, in response to the received instruction; and</claim-text>
<claim-text>setting up the information processing apparatus such that the new module and the detected module execute processes in an operating order,</claim-text>
<claim-text>wherein, in said setting-up step, if the operating order related to the new module and the detected module is not determined, a warning is issued and an installing process of the new module is stopped.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. A set-up method of an information processing apparatus in which a module has been installed which serves as a control program for expanding a printer driver and a set-up is executed in response to an installing instruction for the printer driver, the method comprising the steps of:
<claim-text>detecting a plurality of modules to be installed in the information processing apparatus as add-in modules to the printer driver for expanding the function of the printer driver; and</claim-text>
<claim-text>setting up the information processing apparatus by determining priorities of the plurality of modules in response to the detection in said detecting step and by installing the plurality of modules, such that the plurality of modules execute respective processes in a sequential order based on the determined priorities.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. An information processing apparatus in which a module has been installed which serves as a control program for expanding a printer driver and a set-up is executed in response to an installing instruction for the printer driver, comprising:
<claim-text>a detecting unit which detects a plurality of modules to be installed in the information processing apparatus as add-in modules to the printer driver for expanding the function of the printer driver; and</claim-text>
<claim-text>a set-up unit which sets up the information processing apparatus by determining priorities of the plurality of modules in response to the detection by said detecting unit and by installing the plurality of modules, such that the plurality of modules execute respective processes in a sequential order based on the determined priorities.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. A non-transitory computer-readable storage medium storing, in executable form, a program for causing an information processing apparatus to execute a method, the method comprising the steps of:
<claim-text>detecting a plurality of modules to be installed in the information processing apparatus as add-in modules to the printer driver for expanding the function of the printer driver; and</claim-text>
<claim-text>setting up the information processing apparatus by determining priorities of the plurality of modules in response to the detection in said detecting step and by installing the plurality of modules, such that the plurality of modules execute respective processes in a sequential order based on the determined priorities.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. A set-up method of an information processing apparatus in which a module as a control program for expanding a printer driver has been installed and a set-up is executed in response to an installing instruction for the printer driver, comprising the steps of:
<claim-text>receiving an instruction indicative of adding a new module;</claim-text>
<claim-text>detecting the module installed in the information processing apparatus, in response to the received instruction; and</claim-text>
<claim-text>setting up the information processing apparatus such that the new module and the detected module execute processes in an operating order,</claim-text>
<claim-text>wherein, when an encryption module and an alteration detection module are included in a plurality of modules including the new module and the detected module, the information processing apparatus is set up such that, as the operating order, a process by the alteration detection module is executed after a process by the encryption module.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. An information processing apparatus in which a module as a control program for expanding a printer driver has been installed and a set-up is executed in response to an installing instruction for the printer driver, comprising:
<claim-text>a receiving unit which receives an instruction indicative of adding a new module;</claim-text>
<claim-text>a detecting unit which detects the module installed in the information processing apparatus, in response to the received instruction; and</claim-text>
<claim-text>a setting unit which sets up the information processing apparatus such that the new module and the detected module execute processes in an operating order,</claim-text>
<claim-text>wherein, when an encryption module and an alteration detection module are included in a plurality of modules including the new module and the detected module, said setting unit sets up the information processing apparatus such that, as the operating order, a process by the alteration detection module is executed after a process by the encryption module.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. A non-transitory computer-readable storage medium storing an executable program for causing a computer to execute a method of an information processing apparatus in which a module as a control program for expanding a printer driver has been installed and a set-up is executed in response to an installing instruction for the printer driver, the method comprising the steps of:
<claim-text>receiving an instruction indicative of adding a new module;</claim-text>
<claim-text>detecting the module installed in the information processing apparatus, in response to the received instruction; and</claim-text>
<claim-text>setting up the information processing apparatus such that the new module and the detected module execute processes in an operating order,</claim-text>
<claim-text>wherein, when an encryption module and an alteration detection module are included in a plurality of modules including the new module and the detected module, the information processing apparatus is set up such that, as the operating order, a process by the alteration detection module is executed after a process by the encryption module.</claim-text>
</claim-text>
</claim>
</claims>
</us-patent-grant>

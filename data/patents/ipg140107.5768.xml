<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08626873-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08626873</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>13288799</doc-number>
<date>20111103</date>
</document-id>
</application-reference>
<us-application-series-code>13</us-application-series-code>
<us-term-of-grant>
<us-term-extension>118</us-term-extension>
<disclaimer>
<text>This patent is subject to a terminal disclaimer.</text>
</disclaimer>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>15</main-group>
<subgroup>16</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>709218</main-classification>
<further-classification>709202</further-classification>
<further-classification>709223</further-classification>
<further-classification>709225</further-classification>
</classification-national>
<invention-title id="d2e55">Systems and methods for managing a provider's online status in a distributed network</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>6222856</doc-number>
<kind>B1</kind>
<name>Krishnan et al.</name>
<date>20010400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>6498795</doc-number>
<kind>B1</kind>
<name>Zhang et al.</name>
<date>20021200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>7275104</doc-number>
<kind>B1</kind>
<name>Martinez et al.</name>
<date>20070900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709224</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>7464142</doc-number>
<kind>B2</kind>
<name>Flurry et al.</name>
<date>20081200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>7831693</doc-number>
<kind>B2</kind>
<name>Lai</name>
<date>20101100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>7853643</doc-number>
<kind>B1</kind>
<name>Martinez et al.</name>
<date>20101200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709203</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>8073929</doc-number>
<kind>B2</kind>
<name>Eastham</name>
<date>20111200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>2002/0062357</doc-number>
<kind>A1</kind>
<name>Srinivasan</name>
<date>20020500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>2002/0110084</doc-number>
<kind>A1</kind>
<name>Butt et al.</name>
<date>20020800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>2002/0143819</doc-number>
<kind>A1</kind>
<name>Han et al.</name>
<date>20021000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>2002/0165727</doc-number>
<kind>A1</kind>
<name>Greene et al.</name>
<date>20021100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>2003/0144894</doc-number>
<kind>A1</kind>
<name>Robertson et al.</name>
<date>20030700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00013">
<document-id>
<country>US</country>
<doc-number>2004/0044780</doc-number>
<kind>A1</kind>
<name>Eastham</name>
<date>20040300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00014">
<document-id>
<country>US</country>
<doc-number>2004/0243483</doc-number>
<kind>A1</kind>
<name>Baumann et al.</name>
<date>20041200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00015">
<document-id>
<country>US</country>
<doc-number>2005/0004914</doc-number>
<kind>A1</kind>
<name>Wollrath et al.</name>
<date>20050100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00016">
<document-id>
<country>US</country>
<doc-number>2005/0091374</doc-number>
<kind>A1</kind>
<name>Ganesan et al.</name>
<date>20050400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709225</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00017">
<document-id>
<country>US</country>
<doc-number>2005/0132086</doc-number>
<kind>A1</kind>
<name>Flurry et al.</name>
<date>20050600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00018">
<document-id>
<country>US</country>
<doc-number>2006/0010236</doc-number>
<kind>A1</kind>
<name>Meiser et al.</name>
<date>20060100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00019">
<document-id>
<country>US</country>
<doc-number>2006/0095576</doc-number>
<kind>A1</kind>
<name>Perry et al.</name>
<date>20060500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00020">
<document-id>
<country>US</country>
<doc-number>2006/0200381</doc-number>
<kind>A1</kind>
<name>Elkholy et al.</name>
<date>20060900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00021">
<document-id>
<country>US</country>
<doc-number>2007/0127371</doc-number>
<kind>A1</kind>
<name>Eastham et al.</name>
<date>20070600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00022">
<document-id>
<country>US</country>
<doc-number>2007/0233690</doc-number>
<kind>A1</kind>
<name>Bruchlos et al.</name>
<date>20071000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707 10</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00023">
<document-id>
<country>US</country>
<doc-number>2008/0117917</doc-number>
<kind>A1</kind>
<name>Balay et al.</name>
<date>20080500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00024">
<document-id>
<country>WO</country>
<doc-number>02/056566</doc-number>
<date>20020700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00025">
<othercit>Prashant Jain, Michael Ki Rcher: &#x201c;Leasing&#x201d;Internet Article, pp. 1-14, http://www.kircherschwanninger.de/michael/publications/Leasing.pdf, accessed Apr. 25, 2001.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00026">
<othercit>Shorshita et al., &#x201c;A Large-scale Contents Distribution Architecture Based on Reliable Multicast,&#x201d; Feb. 18-22, 1999. Internet Workshop, 1999. IWS 99. ISBN: 0-7803-5925-9, pp. 75-80.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>13</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>709201-202</main-classification>
<additional-info>unstructured</additional-info>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709217-220</main-classification>
<additional-info>unstructured</additional-info>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>12</number-of-drawing-sheets>
<number-of-figures>15</number-of-figures>
</figures>
<us-related-documents>
<continuation>
<relation>
<parent-doc>
<document-id>
<country>US</country>
<doc-number>11324025</doc-number>
<date>20051229</date>
</document-id>
<parent-grant-document>
<document-id>
<country>US</country>
<doc-number>8073929</doc-number>
</document-id>
</parent-grant-document>
</parent-doc>
<child-doc>
<document-id>
<country>US</country>
<doc-number>13288799</doc-number>
</document-id>
</child-doc>
</relation>
</continuation>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20120047198</doc-number>
<kind>A1</kind>
<date>20120223</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Eastham</last-name>
<first-name>Bryant</first-name>
<address>
<city>Draper</city>
<state>UT</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Eastham</last-name>
<first-name>Bryant</first-name>
<address>
<city>Draper</city>
<state>UT</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Austin Rapp &#x26; Hardman</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>Panasonic Corporation</orgname>
<role>03</role>
<address>
<city>Osaka</city>
<country>JP</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Edwards</last-name>
<first-name>Linglan</first-name>
<department>2491</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">A system manages communications between a provider and a requestor in a distributed network. A requestor is implemented on a computing device and provides a stay online binding. The stay online binding identifies a binding that is desired by the requestor. A provider is implemented on a computing device and provides a binding. The provider receives the stay online binding from the requestor and continues providing the binding because the provider became aware of the stay online binding.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="89.75mm" wi="171.96mm" file="US08626873-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="259.00mm" wi="175.68mm" file="US08626873-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="224.11mm" wi="167.22mm" file="US08626873-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="209.30mm" wi="118.11mm" file="US08626873-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="151.13mm" wi="163.66mm" file="US08626873-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="248.84mm" wi="144.27mm" file="US08626873-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="206.25mm" wi="169.33mm" file="US08626873-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="197.10mm" wi="189.74mm" file="US08626873-20140107-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00008" num="00008">
<img id="EMI-D00008" he="251.12mm" wi="139.28mm" file="US08626873-20140107-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00009" num="00009">
<img id="EMI-D00009" he="113.20mm" wi="127.34mm" file="US08626873-20140107-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00010" num="00010">
<img id="EMI-D00010" he="234.27mm" wi="168.15mm" file="US08626873-20140107-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00011" num="00011">
<img id="EMI-D00011" he="227.50mm" wi="172.47mm" file="US08626873-20140107-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00012" num="00012">
<img id="EMI-D00012" he="232.83mm" wi="166.88mm" file="US08626873-20140107-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?RELAPP description="Other Patent Relations" end="lead"?>
<heading id="h-0001" level="1">RELATED APPLICATIONS</heading>
<p id="p-0002" num="0001">This application is a Continuation of U.S. patent application Ser. No. 11/324,025 filed Dec. 29, 2005 for &#x201c;Systems and Methods for Managing a Provider's Online Status in a Distributed Network,&#x201d; with inventor Bryant Eastham, which is incorporated herein by reference.</p>
<?RELAPP description="Other Patent Relations" end="tail"?>
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0002" level="1">TECHNICAL FIELD</heading>
<p id="p-0003" num="0002">The present invention relates generally to computers and computer-related technology. More specifically, the present invention relates to systems and methods for managing a provider's online status in a distributed network.</p>
<heading id="h-0003" level="1">BACKGROUND</heading>
<p id="p-0004" num="0003">Computer and communication technologies continue to advance at a rapid pace. Indeed, computer and communication technologies are involved in many aspects of a person's day. For example, many devices being used today by consumers have a small computer inside of the device. These small computers come in varying sizes and degrees of sophistication. These small computers include everything from one microcontroller to a fully-functional complete computer system. For example, these small computers may be a one-chip computer, such as a microcontroller, a one-board type of computer, such as a controller, a typical desktop computer, such as an IBM-PC compatible, etc.</p>
<p id="p-0005" num="0004">Computers typically have one or more processors at the heart of the computer. The processor(s) usually are interconnected to different external inputs and outputs, and function to manage the particular computer or device. For example, a processor in a thermostat may be connected to buttons used to select the temperature setting, to the furnace or air conditioner to change the temperature, and to temperature sensors to read and display the current temperature on a display.</p>
<p id="p-0006" num="0005">Many appliances, devices, etc., include one or more small computers. For example, thermostats, furnaces, air conditioning systems, refrigerators, telephones, typewriters, automobiles, vending machines, and many different types of industrial equipment now typically have small computers, or processors, inside of them. Computer software runs the processors of these computers and instructs the processors how to carry out certain tasks. For example, the computer software running on a thermostat may cause an air conditioner to stop running when a particular temperature is reached or may cause a heater to turn on when needed.</p>
<p id="p-0007" num="0006">These types of small computers that are a part of a device, appliance, tool, etc., are often referred to as embedded systems. The term &#x201c;embedded system&#x201d; usually refers to computer hardware and software that is part of a larger system. Embedded systems may not have typical input and output devices such as a keyboard, mouse, and/or monitor. Usually, at the heart of each embedded system is one or more processor(s).</p>
<p id="p-0008" num="0007">A lighting system may incorporate an embedded system. The embedded system may be used to monitor and control the effects of the lighting system. For example, the embedded system may provide controls to dim the brightness of the lights within the lighting system. Alternatively, the embedded system may provide controls to increase the brightness of the lights. The embedded system may provide controls to initiate a specific lighting pattern among the individual lights within the lighting system. Embedded systems may be coupled to individual switches within the lighting system. These embedded systems may instruct the switches to power up or power down individual lights or the entire lighting system. Similarly, embedded systems may be coupled to individual lights within the lighting system. The brightness or power state of each individual light may be controlled by the embedded system.</p>
<p id="p-0009" num="0008">A security system may also incorporate an embedded system. The embedded system may be used to control the individual security sensors that comprise the security system. For example, the embedded system may provide controls to power up each of the security sensors automatically. Embedded systems may be coupled to each of the individual security sensors. For example, an embedded system may be coupled to a motion sensor. The embedded system may power up the individual motion sensor automatically and provide controls to activate the motion sensor if motion is detected. Activating a motion sensor may include providing instructions to power up an LED located within the motion sensor, output an alarm from the output ports of the motion sensor, and the like. Embedded systems may also be coupled to sensors monitoring a door. The embedded system may provide instructions to the sensor monitoring the door to activate when the door is opened or closed. Similarly, embedded systems may be coupled to sensors monitoring a window. The embedded system may provide instructions to activate the sensor monitoring the window if the window is opened or closed.</p>
<p id="p-0010" num="0009">Some embedded systems may also be used to control wireless products such as cell phones. The embedded system may provide instructions to power up the LED display of the cell phone. The embedded system may also activate the audio speakers within the cell phone to provide the user with an audio notification relating to the cell phone.</p>
<p id="p-0011" num="0010">Home appliances may also incorporate an embedded system. Home appliances may include appliances typically used in a conventional kitchen, e.g., stove, refrigerator, microwave, etc. Home appliances may also include appliances that relate to the health and well-being of the user. For example, a massage recliner may incorporate an embedded system. The embedded system may provide instructions to automatically recline the back portion of the chair according to the preferences of the user. The embedded system may also provide instructions to initiate the oscillating components within the chair that cause vibrations within the recliner according to the preferences of the user.</p>
<p id="p-0012" num="0011">Additional products typically found in homes may also incorporate embedded systems. For example, an embedded system may be used within a toilet to control the level of water used to refill the container tank. Embedded systems may be used within a jetted bathtub to control the outflow of air.</p>
<p id="p-0013" num="0012">As stated, embedded systems may be used to monitor or control many different systems, resources, products, etc. With the growth of the Internet and the World Wide Web, embedded systems are increasingly connected to the Internet so that they can be remotely monitored and/or controlled. Other embedded systems may be connected to computer networks including local area networks, wide area networks, etc.</p>
<p id="p-0014" num="0013">Some embedded systems may provide data and/or services to other computing devices using a computer network. Alternatively, there may be typical computers or computing devices that provide data and/or services to other computing devices using a computer network. Sometimes it is beneficial for a provider to know whether the services that it provides are desired by a requestor. Lack of this knowledge can cause additional traffic on the network. These situations, as well as others, may cause inefficiencies in communication across the network. Benefits may be realized if systems and methods were provided to manage a provider's online status in a distributed network.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0015" num="0014">Exemplary embodiments of the invention will become more fully apparent from the following description and appended claims, taken in conjunction with the accompanying drawings. Understanding that these drawings depict only exemplary embodiments and are, therefore, not to be considered limiting of the invention's scope, the exemplary embodiments of the invention will be described with additional specificity and detail through use of the accompanying drawings in which:</p>
<p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. 1</figref> is a network block diagram illustrating two intervening access nodes in a computer network;</p>
<p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. 2</figref> is a network block diagram illustrating several intervening access nodes in a computer network;</p>
<p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. 3</figref> is a block diagram of one embodiment of an intervening access node network with a requestor and a provider;</p>
<p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. 4</figref> is a timing diagram illustrating a method for establishing communication between a provider and a requestor in a network;</p>
<p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. 5</figref> is a block diagram of an embodiment of an intervening access node;</p>
<p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. 6</figref> is a block diagram of an intervening access node network that includes one or more intervening access nodes and two providers;</p>
<p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. 7</figref> is a block diagram of a requestor sending out two request signals and two stay online bindings;</p>
<p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. 8</figref> is a block diagram of a provider sending out two bindings and two stay online request signals;</p>
<p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. 9</figref> is a block diagram of a provider and two requestors, that may be connected to an intervening access node network;</p>
<p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. 10</figref> is a flow diagram of an embodiment of a method of a provider communicating with a network;</p>
<p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. 11</figref> is a flow diagram of an embodiment of a method of a requestor establishing communication with a provider in a network;</p>
<p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. 12</figref> is a block diagram of hardware components that may be used in an embodiment of an embedded device which may be used as either an embedded provider or as an embedded requestor;</p>
<p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. 13</figref> illustrates one embodiment of a system wherein the present systems and methods may be implemented;</p>
<p id="p-0029" num="0028"><figref idref="DRAWINGS">FIG. 14</figref> is an additional embodiment of a system wherein the present systems and methods of the present invention may be implemented; and</p>
<p id="p-0030" num="0029"><figref idref="DRAWINGS">FIG. 15</figref> is a block diagram illustrating one embodiment of a home system.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0005" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0031" num="0030">Embodiments disclosed herein relate generally to a system for managing communications between a provider and a requestor in a distributed network. In accordance with an embodiment, a requestor is implemented on a computing device. The requestor provides a stay online binding. The stay online binding identifies at least one binding that is desired by the requestor. The requestor provides the stay online binding. Also in accordance with an embodiment, a provider is implemented on a computing device. The provider provides at least one binding. The provider receives the stay online binding from the requestor and continues providing the binding(s) because the provider became aware of the stay online binding.</p>
<p id="p-0032" num="0031">In some embodiments, the system includes an intervening access node network. The communications between the requestor and the provider in the system are sent via the intervening access node network.</p>
<p id="p-0033" num="0032">In other embodiments, the provider computing device includes a processor in electronic communication with the memory. Instructions are stored in the memory that implement a method. The provider computing device monitors communications from an intervening access node network for any stay online bindings that concern the provider. The provider computing device also discontinues the providing of the binding when it is determined that no stay online bindings concerning the provider are being communicated over the intervening access node network.</p>
<p id="p-0034" num="0033">In alternative embodiments, the provider computing device queries for any stay online bindings that concern the provider. The provider also provides the binding again. In another embodiment, the provider computing device queries for any stay online bindings that concern the provider using a connectionless protocol.</p>
<p id="p-0035" num="0034">In still other embodiments, the requestor computing device includes a processor in electronic communication with the memory. Instructions are stored in the memory that implement a method. The requestor computing device determines whether at least one binding concerning the requestor exists. The requestor computing device may also use the binding to receive data or services from the provider.</p>
<p id="p-0036" num="0035">A method for managing communications between a provider and a requestor in a distributed network is also disclosed. The method provides the stay online binding from the requestor to the provider. The method provides at least one binding by the provider because the provider became aware of the stay online binding. The method determines whether any stay online bindings exist that concern the provider. In some embodiments, the communications between the requestor and the provider are sent via an intervening access node network. The method monitors communications from an intervening access node network for any stay online bindings that concern the provider. The method may also use a connectionless protocol for monitoring the presence of the stay online bindings that concern the provider.</p>
<p id="p-0037" num="0036">In an alternative embodiment, the method discontinues the providing of the binding(s) to the requestor when it is determined that no stay online bindings concerning the provider are being communicated over the intervening access node network. The method, in some embodiments, discontinues the providing of the binding(s) to the requestor when it is determined that no stay online bindings concerning the provider are being communicated over the intervening access node network by disconnecting from the network. The method disclosed may wait a predetermined period of time after discontinuing the providing of the binding(s) to the requestor before querying for a stay online binding that concerns the provider. Where at least one stay online binding exists that concerns the provider, according to the method, the provider continues again to provide the binding(s). The method also uses the binding(s) to receive data or services from the provider.</p>
<p id="p-0038" num="0037">A computing device that is configured to implement a method for managing communications of a provider in a distributed network is also disclosed. The computing device includes a processor in electronic communication with the memory. Instructions are stored in the memory that implement a method. The method provides at least one binding. The method also receives the stay online binding from the requestor. The method continues to provide the binding(s) because the provider became aware of the stay online binding.</p>
<p id="p-0039" num="0038">In a distributed network where clients and devices may connect and disconnect frequently, there may be issues concerning when to establish connections and for how long the connections should be established. In some systems, the client may actively request a connection, and then may &#x201c;own&#x201d; the connection until it releases it. This type of system may work well for direct connections, but is difficult in a distributed environment. In a distributed environment, the actual connection that the client &#x201c;owns&#x201d; may be to an intervening node, and not to the device. Problems in this case may include how the connection between the device and the intervening node is established and when it can be closed.</p>
<p id="p-0040" num="0039">A solution to these problems may be to keep a &#x201c;connection count&#x201d;, and release the connections when the &#x201c;connection count&#x201d; is zero. This may present difficulties because the distributed nature of the system may make it hard to decide who keeps the count. Any errors in the count often result in persistent connections and additional load on the distributed network.</p>
<p id="p-0041" num="0040">As mentioned above, a related issue is determining who establishes the connection on the device side. In the &#x201c;direct connect from client&#x201d; situation discussed above, the device may never open the connection. In the distributed case, it may be hard to determine whether a device should open the connection.</p>
<p id="p-0042" num="0041">Once the clients and devices are connected, there may be further problems related to the multiple services that a device may provide. For example, the connected clients may not require all the services that can be provided, but lack a direct method of identifying which services are of interest. All of the problems associated with knowing whether the connections should exist also relate to the problems of which services should be provided.</p>
<p id="p-0043" num="0042">There may be benefits to having the device start the connection. One benefit may include the system correctly &#x201c;cleaning up&#x201d; if a client disconnects without properly closing the connection. A further benefit may include that this solution may work in a distributed environment with no centralized knowledge of which connections should exist.</p>
<p id="p-0044" num="0043">Various embodiments of the invention are now described with reference to the Figures, where like reference numbers indicate identical or functionally similar elements. The embodiments of the present invention, as generally described and illustrated in the Figures herein, could be arranged and designed in a wide variety of different configurations. Thus, the following more detailed description of several exemplary embodiments of the present invention, as represented in the Figures, is not intended to limit the scope of the invention, as claimed, but is merely representative of the embodiments of the invention.</p>
<p id="p-0045" num="0044">The word &#x201c;exemplary&#x201d; is used exclusively herein to mean &#x201c;serving as an example, instance, or illustration.&#x201d; Any embodiment described herein as &#x201c;exemplary&#x201d; is not necessarily to be construed as preferred or advantageous over other embodiments. While the various aspects of the embodiments are presented in drawings, the drawings are not necessarily drawn to scale unless specifically indicated.</p>
<p id="p-0046" num="0045">Many features of the embodiments disclosed herein may be implemented as computer software, electronic hardware, or combinations of both. To clearly illustrate this interchangeability of hardware and software, various components will be described generally in terms of their functionality. Whether such functionality is implemented as hardware or software depends upon the particular application and design constraints imposed on the overall system. Skilled artisans may implement the described functionality in varying ways for each particular application, but such implementation decisions should not be interpreted as causing a departure from the scope of the present invention.</p>
<p id="p-0047" num="0046">Where the described functionality is implemented as computer software, such software may include any type of computer instruction or computer executable code located within a memory device and/or transmitted as electronic signals over a system bus or network. Software that implements the functionality associated with components described herein may comprise a single instruction, or many instructions, and may be distributed over several different code segments, among different programs, and across several memory devices.</p>
<p id="p-0048" num="0047"><figref idref="DRAWINGS">FIG. 1</figref> is a network block diagram illustrating two intervening access nodes in the network <b>100</b>. A provider <b>102</b> is in electronic communication with the network <b>100</b>. The network embodiment <b>100</b> of <figref idref="DRAWINGS">FIG. 1</figref> includes two requestors <b>104</b> in electronic communication with the network <b>100</b>. The intervening access nodes <b>106</b> are also on the network <b>100</b>. There may be more nodes on the network <b>100</b>.</p>
<p id="p-0049" num="0048">An intervening access node <b>106</b> is a network node that provides features and services to the network <b>100</b>. An intervening access node <b>106</b> may be used in a variety of ways. For example, an intervening access node <b>106</b> may be present on a network <b>100</b> to provide services to computers, applications and/or objects on the network <b>100</b>. An intervening access node <b>106</b> may also be used to provide a protocol converter. An intervening access node <b>106</b> may be embedded or it <b>106</b> may be large enough to handle enterprise traffic.</p>
<p id="p-0050" num="0049">One feature that an intervening access node <b>106</b> may include relates to object refinement. Object refinement refers to the situation where an intervening access node <b>106</b> places itself in place of an object and provides different implementations of the same interfaces. This allows, among other things, for problems in the implementation of an interface to be fixed without changing the actual end provider of the interface.</p>
<p id="p-0051" num="0050">An additional feature of an intervening access node <b>106</b> is that of object augmentation. For object augmentation, the intervening access node <b>106</b> adds new interfaces to an object that the end provider does not support.</p>
<p id="p-0052" num="0051">In current design, the intervening access node <b>106</b> does not differentiate between clients and devices, so any service added is available to any (authorized) connected entity or node.</p>
<p id="p-0053" num="0052">The network <b>100</b> as shown in <figref idref="DRAWINGS">FIG. 1</figref> may inherit many features of web services. Web services are accessed using web protocols, usually HTTP and SOAP. The architecture is based on the peer-to-peer paradigm of networking.</p>
<p id="p-0054" num="0053">Multiple intervening access nodes <b>106</b> in communication with one another form an intervening access node network <b>110</b>. To requestors <b>104</b> and/or providers <b>102</b>, the one or more intervening access nodes <b>106</b> of the intervening access node network <b>110</b> appear as a single intervening access node <b>106</b>. The size or number included in the intervening access node network <b>110</b> is transparent to providers <b>102</b> and/or requestors <b>104</b>.</p>
<p id="p-0055" num="0054">A provider <b>102</b> is a node on the network <b>100</b> that is the source of a service <b>108</b>. A requestor <b>104</b> is a node on the network <b>100</b> that is the user of the service <b>108</b>. A requestor <b>104</b> is a software entity implemented on a node that may directly discover a service <b>108</b> to control or interact with it.</p>
<p id="p-0056" num="0055">The service <b>108</b> may be any kind of service that may be provided by a computing device. Some possible examples of services <b>108</b> include providing temperature data from a location, providing surveillance data, providing weather information, providing an audio stream, providing a video stream, etc. Many different kinds of services and/or data may be provided over a computer network <b>100</b> from a provider <b>102</b>.</p>
<p id="p-0057" num="0056">The service <b>108</b> is accessed through one or more bindings <b>112</b>. A binding <b>112</b> includes an object identifier <b>114</b> and an interface identifier <b>116</b>. Typically, the object <b>114</b> and the interface <b>116</b> are in pairs. A provider <b>102</b> can provide a plurality of bindings <b>112</b>. It is possible that multiple providers <b>102</b> can be providing the same service <b>108</b>, binding <b>112</b>, object <b>114</b> or interface <b>116</b>.</p>
<p id="p-0058" num="0057">The provider <b>102</b> may be an embedded provider. An embedded provider is a provider <b>102</b> being implemented on an embedded device. An embedded device is a type of computing device that does not include all the same components associated with a typical desktop computer. For example, some embedded devices do not include monitors, others do not include a keyboard or a mouse, and some embedded devices do not include either a monitor or a keyboard/mouse. Many embedded devices are microcontroller-based devices, i.e., the central processor for the embedded device is a microcontroller.</p>
<p id="p-0059" num="0058">The roles of requestor and provider may be taken on by devices and software nodes connected to intervening access nodes <b>106</b>. In addition, an intervening access node <b>106</b> may be a requestor and/or a provider. For example, the intervening access node <b>106</b> may be a requestor/provider when setting up the communication between intervening access nodes <b>106</b>. An intervening access node <b>106</b> serves as a requestor when it <b>106</b> requests information about providers when it <b>106</b> connects to another intervening access node <b>106</b>. An intervening access node <b>106</b> serves as provider when it is providing information about other providers to other intervening access nodes <b>106</b>.</p>
<p id="p-0060" num="0059">The term &#x201c;network&#x201d; as used herein refers to a system in which a series of nodes are interconnected by a communications path. A node is a physical computing device that communicates with other nodes. The specific behavior of a node is determined by the applications or software it executes. Applications running on nodes of a network communicate with each other through software modules that implement protocols, formalized rules for how data is sent over a network. Some protocols deal with the timing, sequencing, and error checking of data transmission. Others deal more with how the data is formatted and the commands and responses that the nodes exchange. A set of protocols that work together is called a protocol stack, with each protocol acting as a layer in the stack that is built on top of another layer. The top layer of a protocol stack is used by an application, the middle layers deal with transferring groups (packets and frames) of data between nodes, and the bottom layer deals directly with the networking hardware that transfers data.</p>
<p id="p-0061" num="0060">Physical networks consist of nodes that are connected by some sort of physical medium (e.g., electrical wire, optical fiber, air). This physical connection may sometimes be referred to as a link. A physical network limited to two nodes may be referred to as point-to-point, while a physical network that may support more than two nodes may be referred to as multiple-access. Each node on a multiple-access network has a physical address that is used to distinguish it from the other nodes on the network.</p>
<p id="p-0062" num="0061">Logical networks may be superimposed onto physical networks to specify a unique group of nodes. Each node in a logical network has a logical address that is mapped by a protocol to the node's physical address. A sub-network, or subnet, is a physically or logically independent portion of a network, distinguished by a subnet number.</p>
<p id="p-0063" num="0062">Most protocols deal with logical networks because most physical network issues already have many well-defined implementations and defining new physical layers is not required. Logical networks also have the benefit of being insulated from the physical network, and are therefore more generally useful. For example, TCP/IP is defined on top of a logical network (IP). IP can run on many physical networks (Ethernet, serial, wireless, etc.). This makes TCP/IP a more generic solution than had it been defined only in terms of some specific physical network.</p>
<p id="p-0064" num="0063">Any number of intervening access nodes <b>106</b> may be used in a network <b>100</b>. <figref idref="DRAWINGS">FIG. 2</figref> illustrates a network <b>200</b> that includes a number of intervening access nodes <b>206</b> as shown. Three requestors <b>204</b>, <b>205</b> are in electronic communication with the intervening access nodes <b>206</b>. In the network embodiment <b>200</b> shown in <figref idref="DRAWINGS">FIG. 2</figref>, the three requestors <b>204</b>, <b>205</b> all request the services <b>208</b>, <b>228</b>, <b>248</b> being provided by the providers <b>202</b>, <b>205</b>, <b>206</b><i>e</i>. The data from the services <b>208</b>, <b>228</b>, <b>248</b> is sent through the intervening access node network <b>210</b>.</p>
<p id="p-0065" num="0064">The intervening access node network <b>210</b> of <figref idref="DRAWINGS">FIG. 2</figref> operates similarly to the intervening access node network <b>110</b> of <figref idref="DRAWINGS">FIG. 1</figref>. In typical operation, the requestors <b>104</b>, <b>204</b>, <b>205</b> and the providers <b>102</b>, <b>202</b>, <b>205</b>, <b>206</b><i>e </i>would not distinguish between the intervening access node network <b>110</b> of <figref idref="DRAWINGS">FIG. 1</figref> and the intervening access node network <b>210</b> of <figref idref="DRAWINGS">FIG. 2</figref>. <figref idref="DRAWINGS">FIG. 2</figref> also illustrates that a node may serve as both a requestor and a provider, as shown by the illustrated requestor/provider <b>205</b>. This requestor/provider <b>205</b> provides a service <b>228</b> and binding <b>232</b>. <figref idref="DRAWINGS">FIG. 2</figref> also illustrates that a service/binding may be provided by an intervening access node <b>206</b><i>e. </i></p>
<p id="p-0066" num="0065">As shown above, there may be many services and many bindings that are available on a network. It would be beneficial to allow these services to be &#x201c;signaled&#x201d; to provide a binding rather than always providing it. Additionally, when the connection used between the provider <b>102</b> and the intervening access node network <b>110</b> is transitory, it may be beneficial to provide a method of signaling the provider <b>102</b> whether an established connection is no longer needed, or when a connection that is not established is desired. Through the systems and methods disclosed herein, requests are allowed to propagate through the network in an efficient manner, allowing for both loops in the connections, and also allowing for a high number of disinterested providers (meaning providers that may not be connected or may not be currently providing a binding <b>112</b>).</p>
<p id="p-0067" num="0066">The intervening access nodes <b>106</b>, <b>206</b> may be connected in an arbitrary way, which includes loops. In <figref idref="DRAWINGS">FIGS. 1 and 2</figref>, requestors <b>104</b>, <b>204</b>, <b>205</b> and providers <b>102</b>, <b>202</b>, <b>205</b>, <b>206</b><i>e </i>were illustrated. Requestors and providers may be separate nodes or may coexist on an intervening access node. The methods used by the intervening access node network <b>110</b> allow for requestors <b>104</b>, <b>204</b>, <b>205</b> to sense the addition and removal of bindings <b>112</b> by providers <b>102</b>, <b>202</b>, <b>205</b>, <b>206</b><i>e</i>. They also allow the query for availability of bindings <b>112</b> on the network <b>100</b>. Additional details about intervening access node networks are described in the following copending patent applications: U.S. patent application Ser. No. 11/302,306, titled &#x201c;Systems and Methods for Handling Failover in a Distributed Routing Environment,&#x201d; filed Dec. 13, 2005, with inventors Bryant Eastham and Tom Milligan; U.S. patent application Ser. No. 11/292,944, titled &#x201c;Systems and Methods for Efficient Electronic Communication in a Distributed Routing Environment,&#x201d; filed Dec. 2, 2005, with inventors Bryant Eastham and Tom Milligan; and U.S. patent application Ser. No. 11,320,498, titled &#x201c;Systems and Methods for Discovering and Interacting with Services,&#x201d; filed Dec. 28, 2005, with inventor Bryant Eastham. These copending U.S. patent applications, which are assigned to the assignee of the present invention, are hereby incorporated by reference in their entirety.</p>
<p id="p-0068" num="0067">The query by a node regarding a binding <b>112</b> may be done either using a connection-oriented protocol such as TCP/IP or over a connectionless protocol such as UDP/IP. The benefits of using a connectionless protocol include lower overhead on the intervening access nodes <b>106</b>, <b>206</b> as fewer connections are required.</p>
<p id="p-0069" num="0068"><figref idref="DRAWINGS">FIG. 3</figref> is a block diagram of one embodiment of an intervening access node network <b>310</b> with a requestor <b>304</b> and a provider <b>302</b>. As discussed above, a requestor <b>304</b> may act as both a provider and a requestor. In the present embodiment, the requestor <b>304</b> acts as both a provider and a requestor by providing a binding <b>320</b> and by using the service <b>108</b> of a provider <b>302</b> over the intervening access node network <b>310</b>.</p>
<p id="p-0070" num="0069">The binding that is provided by the requestor <b>304</b> is a stay online binding <b>320</b>. A stay online binding <b>320</b> may serve the purpose of notifying all providers <b>102</b> that provide the desired service <b>108</b> that a requestor <b>304</b> is connected to the network <b>310</b> that desires the services <b>108</b> that the providers <b>102</b> are providing. In this case, the object ID <b>314</b><i>b </i>of the stay online binding <b>320</b> is equal to at least one of objects <b>114</b> provided by the services <b>108</b>.</p>
<p id="p-0071" num="0070">A stay online binding <b>320</b> is similar to a regular binding <b>112</b> because it typically includes an object ID <b>314</b><i>b </i>and an interface ID <b>322</b><i>a</i>. A stay online binding <b>320</b> may be treated like any other binding <b>112</b>, because it may include the same or similar information that may be included in any other binding <b>112</b> sent over the intervening access node network <b>110</b>.</p>
<p id="p-0072" num="0071">The provider <b>302</b> may also act as both a provider and a requestor, as discussed above. In the present embodiment, the provider <b>302</b> acts as both a provider and a requestor by providing a binding <b>312</b> and watching for the stay online binding <b>320</b> that may be transmitted over the intervening access node network <b>310</b> from a requestor <b>304</b>.</p>
<p id="p-0073" num="0072">The binding <b>312</b> provided by the provider <b>302</b> may include an object ID <b>314</b><i>a </i>and an interface ID <b>316</b><i>a</i>. Unlike the stay online binding <b>320</b>, the binding <b>312</b> of the present embodiment, may identify interfaces used to interact with the desired service <b>108</b>.</p>
<p id="p-0074" num="0073"><figref idref="DRAWINGS">FIG. 4</figref> is a timing diagram <b>400</b> illustrating a method for establishing communication between a provider <b>402</b> and a requestor <b>404</b> in a network. The time axis <b>401</b> is shown. A requestor <b>404</b> may be searching for a service <b>108</b> on the network <b>100</b>. At some point after connecting to the network <b>100</b>, at time t<b>1</b>, the requestor <b>404</b> may provide <b>410</b> a stay online binding <b>320</b>. The stay online binding <b>320</b> is a way that the requestor <b>404</b> asks any providers of a compatible binding <b>312</b> to establish a connection, provide its bindings <b>112</b>, and stay online. Compatible bindings <b>312</b> are bindings <b>312</b> where the object ID <b>314</b><i>b </i>of the stay online binding <b>320</b> is equal to the object <b>314</b><i>a </i>of the binding <b>312</b> provided by the service <b>108</b> through the provider <b>402</b>. In the present embodiment, at some point after connecting to the network <b>100</b>, at time t<b>2</b>, a provider <b>402</b> may provide <b>420</b> a binding <b>312</b>. In an alternative embodiment, the provider <b>402</b> may provide <b>420</b> a binding <b>312</b> before the requestor <b>404</b> provides <b>410</b> its stay online binding <b>320</b>.</p>
<p id="p-0075" num="0074">A provider <b>402</b> has a binding <b>312</b> added into the network <b>100</b>. At time t<b>3</b>, some point after sending <b>420</b> a binding <b>312</b>, the requestor <b>404</b> may remove <b>430</b> the stay online binding <b>320</b>. This removal <b>430</b> may reach the provider <b>402</b>. After the provider <b>402</b> senses the removal <b>430</b>, at time t<b>4</b>, the provider <b>402</b> may remove <b>440</b> the binding <b>312</b>.</p>
<p id="p-0076" num="0075"><figref idref="DRAWINGS">FIG. 5</figref> is a block diagram of an embodiment of an intervening access node <b>506</b>. The intervening access node <b>506</b> may include the information necessary to enable it to determine whether a stay online binding <b>320</b> should be forwarded on, for example, to a provider <b>102</b>. Likewise, the intervening access node <b>506</b> may also include the information necessary to enable it to determine whether a binding <b>112</b> should be forwarded on, for example, to a requestor <b>104</b>.</p>
<p id="p-0077" num="0076">The intervening access node <b>506</b> may include a database of bindings <b>526</b> that may include all of the bindings <b>112</b> on the network <b>110</b> of which it is aware. These bindings <b>526</b> may include bindings <b>512</b> and stay online bindings <b>520</b>, each of which may also include an object ID <b>114</b> and interface ID <b>116</b>. Each node in the network may know whether a particular binding <b>112</b>, <b>320</b> exists, although it may not know the total count of providers <b>102</b> for that binding <b>112</b>. If there are multiple providers <b>102</b> that provide a particular binding <b>112</b>, then the binding <b>112</b> may not cease to exist, from the perspective of a node, until all providers <b>102</b> disconnect from the network <b>110</b> or remove their binding <b>112</b>. The database of bindings <b>526</b> may be queried by providers <b>102</b> both over a connection-oriented protocol like TCP/IP or a connectionless protocol like UDP/IP. The query may be for any binding <b>112</b>, <b>320</b> that is present. The database may also be monitored by a provider <b>102</b> so that changes in the contents are determined.</p>
<p id="p-0078" num="0077"><figref idref="DRAWINGS">FIG. 6</figref> is a block diagram <b>800</b> of an intervening access node network <b>810</b> that includes one or more intervening access nodes and two providers <b>802</b><i>a</i>, <b>802</b><i>b </i>that are providing the same binding <b>812</b>. Bindings <b>112</b> are considered the same if their object IDs <b>114</b> are the same and their interfaces <b>116</b> are the same. As providers <b>802</b> connect and disconnect, the network <b>810</b> may determine which provider <b>802</b> to use. Provider A <b>802</b><i>a </i>may include a first binding <b>812</b><i>a</i>. Provider B <b>802</b><i>b </i>may include a first binding <b>812</b><i>b</i>. Thus, both providers <b>802</b> may provide the same binding, the first binding <b>812</b>. The network <b>810</b> and the providers <b>802</b><i>a</i>, <b>802</b><i>b </i>may negotiate and determine which provider <b>802</b> may provide the binding <b>112</b> and which one will be held in reserve to provide the binding <b>112</b> at a later time, if necessary. This situation typically occurs when two or more providers <b>102</b> connect to a network <b>810</b> at approximately the same time such that each of the providers <b>102</b> may not become aware of the other provider <b>102</b> until after they have already advertised their bindings <b>112</b>. In the present embodiment, applying this logic to the stay online binding <b>320</b> may ensure that the binding <b>320</b> will exist in the network <b>810</b> until the last provider <b>802</b> disconnects or removes the binding <b>812</b>.</p>
<p id="p-0079" num="0078">Referring now to <figref idref="DRAWINGS">FIG. 7</figref>, when particular bindings <b>112</b> are desired by a requestor <b>904</b>, the requestor <b>904</b> may provide its stay online bindings <b>920</b><i>a</i>, <b>920</b><i>b </i>by adding a first stay online binding A <b>920</b><i>a </i>and adding a second stay online binding B <b>920</b><i>b </i>to the intervening access node network <b>110</b>. The first stay online binding A <b>920</b><i>a </i>may notify whoever receives the binding <b>920</b><i>a </i>that bindings <b>112</b> with object IDs <b>914</b><i>a </i>are desired. The stay online binding A <b>920</b><i>a</i>, of the present embodiment, may include an object ID A <b>914</b><i>a </i>and the interface ID stay online <b>922</b>. The stay online identifier may notify a provider <b>102</b> with a matching object ID <b>114</b> that the provider <b>102</b> should provide its binding <b>112</b> and remain online. The second stay online binding B <b>920</b><i>b </i>may notify whoever receives the binding that bindings <b>112</b> with object IDs <b>914</b><i>b </i>are desired.</p>
<p id="p-0080" num="0079"><figref idref="DRAWINGS">FIG. 8</figref> is a block diagram of a provider <b>1002</b> providing two bindings <b>1012</b><i>a</i>, <b>1012</b><i>b</i>. When the provider <b>1002</b> connects to an intervening access node network <b>110</b>, it may determine the presence of stay online binding A <b>920</b><i>a </i>and stay online binding B <b>920</b><i>b</i>. In an alternative embodiment, the provider <b>1002</b> queries the network <b>110</b> without connecting to determine the presence of an applicable stay online binding <b>520</b>, and only establishes a connection when an applicable stay online binding <b>520</b> is detected.</p>
<p id="p-0081" num="0080">Upon sensing stay online bindings <b>920</b> and after establishing a connection, the provider <b>1002</b> may add its bindings <b>1012</b><i>a</i>, <b>1012</b><i>b </i>by adding a first binding A <b>1012</b><i>a </i>and a second binding B <b>1012</b><i>b</i>. Adding the first binding <b>1012</b><i>a </i>notifies whoever receives it that the first binding A <b>1012</b><i>a </i>is available. Adding the second binding B <b>1012</b><i>b </i>notifies whoever receives it that the second binding B <b>1012</b><i>b </i>is available. With this information requestors <b>104</b> can use the bindings <b>1012</b><i>a</i>, <b>1012</b><i>b </i>from the provider <b>1002</b>.</p>
<p id="p-0082" num="0081"><figref idref="DRAWINGS">FIG. 9</figref> is a block diagram of a provider <b>102</b> and two requestors <b>104</b><i>a</i>, <b>104</b><i>b </i>that may be connected to an intervening access node network <b>110</b>. Requestor A <b>104</b><i>a </i>may provide stay online binding A <b>1120</b><i>a</i>. Requestor B <b>104</b><i>b </i>may provide stay online binding B <b>1120</b><i>b</i>. The provider <b>102</b> may receive stay online binding A <b>1120</b><i>a </i>and/or stay online binding B <b>1120</b><i>b</i>. If the provider <b>102</b> continues to receive either stay online binding <b>1120</b><i>a</i>, <b>1120</b><i>b</i>, the provider <b>102</b> may provide its available bindings <b>1112</b>, binding A <b>1112</b><i>a </i>and binding B <b>1112</b><i>b</i>. After the provider <b>102</b> adds its available bindings <b>1112</b>, the requestors <b>104</b><i>a</i>, <b>104</b><i>b </i>may use their desired bindings <b>1112</b><i>a</i>, <b>1112</b><i>b </i>respectively. The provider <b>102</b> may then continue to provide the bindings <b>1112</b> to the requestors <b>104</b><i>a</i>, <b>104</b><i>b</i>. Specifically, the provider <b>102</b> may provide binding A <b>1112</b><i>a </i>to requestor A <b>104</b><i>a </i>and binding B <b>1112</b><i>b </i>to requestor B <b>104</b><i>b. </i></p>
<p id="p-0083" num="0082">If only one of the requestors <b>104</b> removes its stay online binding <b>1120</b>, the provider <b>102</b> may remain connected to the intervening access node network <b>110</b> and may continue to provide its available bindings <b>1112</b>. For example, if requestor A <b>104</b><i>a </i>were to remove its stay online binding A <b>1120</b><i>a</i>, the provider <b>102</b> may then stop providing binding A <b>1112</b><i>a </i>to requestor A <b>104</b><i>a</i>. However, because requestor B <b>104</b><i>b </i>is still adding its stay online binding B <b>1120</b><i>b</i>, the provider <b>102</b> may continue to provide its available bindings <b>1112</b> and may continue providing binding B <b>1112</b><i>b </i>to requestor B <b>104</b><i>b</i>. If both requestor A <b>104</b><i>a </i>and requestor B <b>104</b><i>b </i>were to stop remove their stay online bindings <b>1120</b><i>a</i>, <b>1120</b><i>b </i>such that no requestor <b>104</b> connected to the intervening access node network <b>110</b> was providing a stay online binding <b>1120</b> that concerned the provider <b>102</b>, for example, then the provider <b>102</b> may disconnect from the <b>110</b> network for a time. This may eliminate the challenges involved with cleaning up a disconnected device, because the ability to make this determination may allow a provider to disconnect from the network when its services are not required.</p>
<p id="p-0084" num="0083"><figref idref="DRAWINGS">FIG. 10</figref> is a flow diagram of an embodiment of a method <b>1200</b> of a provider <b>102</b> communicating with an intervening access node network <b>110</b>. The provider <b>102</b> may connect <b>1202</b> to the intervening access node network <b>110</b>. After the provider <b>102</b> is connected <b>1202</b> to the intervening access node network <b>110</b>, the provider <b>102</b> may determine <b>1206</b> whether any stay online bindings <b>320</b> exist on the intervening access node network <b>110</b> that identify any bindings <b>112</b> that the provider <b>102</b> may provide <b>1210</b>. If the provider <b>102</b> determines <b>1206</b> that there are stay online bindings <b>320</b> that identify at least one binding <b>112</b> provided by the provider <b>102</b>, then the provider <b>102</b> may provide <b>1210</b> its bindings <b>112</b> to network <b>110</b>. If the provider <b>102</b> determines <b>1206</b> that there are not any stay online bindings <b>320</b> that identify at least one binding <b>112</b> provided <b>1210</b> by the provider <b>102</b>, then the provider <b>102</b> may disconnect <b>1214</b> from the intervening access node network <b>110</b>. In an alternate embodiment, the determination <b>1206</b> may utilize a connectionless protocol and precede the connection to the network <b>1202</b>.</p>
<p id="p-0085" num="0084">After the provider <b>102</b> has provided <b>1210</b> its bindings <b>112</b>, the provider <b>102</b> may wait <b>1212</b> for a period of time before determining <b>1206</b> whether the stay online binding <b>320</b> is still present. Additionally, the provider <b>102</b>, after disconnecting <b>1214</b> from the network <b>100</b>, may wait <b>1216</b> for a period of time before reconnecting <b>1202</b> to the network <b>100</b> and determining <b>1206</b> whether applicable stay online bindings <b>320</b> are present. These periods of time may be the same period of time or may differ in length.</p>
<p id="p-0086" num="0085"><figref idref="DRAWINGS">FIG. 11</figref> is a flow diagram of an embodiment of a method <b>1300</b> of a requestor <b>104</b> establishing communication with a provider <b>102</b> in a network <b>100</b>. The requestor <b>104</b> may connect <b>1302</b> to the network <b>100</b>. The requestor <b>104</b> may determine <b>1304</b> which bindings <b>112</b> are needed. For example, the requestor <b>104</b> may determine <b>1304</b> that it needs data from a service <b>108</b>. The requestor <b>104</b> may then determine <b>1304</b> which bindings <b>112</b> are needed to obtain the data.</p>
<p id="p-0087" num="0086">The requestor <b>104</b> may package <b>1306</b> new stay online bindings <b>320</b>. Packaging <b>1306</b> new stay online bindings <b>320</b> may include packaging <b>1306</b> the appropriate object ID <b>114</b> with an interface ID <b>322</b> that is the stay online identifier. Packaging <b>1306</b> new stay online bindings <b>320</b> may also include not packaging <b>1306</b> previously packaged or no longer required stay online bindings <b>320</b> as discussed below.</p>
<p id="p-0088" num="0087">The requestor <b>104</b> may provide <b>1308</b> the stay online bindings <b>320</b>. Providing <b>1308</b> the stay online bindings <b>320</b> may include sending a stay online binding <b>320</b> over the network <b>100</b>. The requestor <b>104</b> may receive <b>1312</b> bindings <b>112</b> from a provider <b>102</b>. The requestor <b>104</b> may determine <b>1314</b> whether to remove at least one stay online binding <b>320</b>. If the requestor <b>104</b> determines <b>1314</b> that it should not remove at least one stay online binding <b>320</b>, the requestor <b>104</b> may wait <b>1322</b> for a period of time before again determining which bindings <b>112</b> are needed. If the requestor <b>104</b> determines <b>1314</b> that it should remove at least one stay online binding <b>320</b>, the requestor <b>104</b> may remove <b>1316</b> the stay online binding <b>320</b>. In the present embodiment, the requestor <b>104</b> only removes <b>1316</b> the stay online bindings <b>320</b> that are no longer needed. For example, after the requestor <b>104</b> has received the desired services <b>108</b>, the requestor <b>104</b> may no longer need the bindings <b>112</b> and may therefore remove <b>1316</b> the stay online binding <b>320</b> for that service <b>108</b>.</p>
<p id="p-0089" num="0088">The requestor <b>104</b> may determine <b>1318</b> whether any remaining bindings <b>112</b> are needed. If the requestor <b>104</b> determines <b>1318</b> that there are remaining bindings <b>112</b> that are needed, the requestor <b>104</b> may again determine <b>1304</b> which bindings <b>112</b> are needed. If the requestor <b>104</b> determines <b>1304</b> that there are not any remaining bindings <b>112</b> that are needed, the requestor <b>104</b> may wait <b>1320</b> for a period of time and again determine <b>1304</b> which bindings <b>112</b> are needed.</p>
<p id="p-0090" num="0089"><figref idref="DRAWINGS">FIG. 12</figref> is a block diagram of hardware components that may be used in an embodiment of a computing device or an embedded device. A computing device and/or an embedded device may be used as a provider, a requestor and/or an intervening access node. A CPU <b>1410</b> or processor may be provided to control the operation of the device <b>1402</b>, including the other components thereof, which are coupled to the CPU <b>1410</b> via a bus <b>1412</b>. The CPU <b>1410</b> may be embodied as a microprocessor, microcontroller, digital signal processor or other device known in the art. The CPU <b>1410</b> performs logical and arithmetic operations based on program code stored within the memory <b>1414</b>. In certain embodiments, the memory <b>1414</b> may be on-board memory included with the CPU <b>1410</b>. For example, microcontrollers often include a certain amount of on-board memory.</p>
<p id="p-0091" num="0090">The computing or embedded device <b>1402</b> may also include a network interface <b>1416</b>. The network interface <b>1416</b> facilitates communication between the device <b>1402</b> and other devices connected to the network <b>100</b>. The network <b>100</b> may be a pager network, a cellular network, a global communications network, the Internet, a computer network, a telephone network, etc. The network interface <b>1416</b> operates according to standard protocols for the applicable network <b>100</b>.</p>
<p id="p-0092" num="0091">The device <b>1402</b> may also include memory <b>1414</b>. The memory <b>1414</b> may include a random access memory (RAM) for storing temporary data. Alternatively, or in addition, the memory <b>1414</b> may include a read-only memory (ROM) for storing more permanent data, such as fixed code and configuration data. The memory <b>1414</b> may also be embodied as a magnetic storage device, such as a hard disk drive. The memory <b>1414</b> may be any type of electronic device capable of storing electronic information.</p>
<p id="p-0093" num="0092">The device <b>1402</b> may also include communication ports <b>1418</b>, which facilitate communication with other devices. The device <b>1402</b> may also include input/output devices <b>1420</b>, such as a keyboard, a mouse, a joystick, a touchscreen, a monitor, speakers, a printer, etc.</p>
<p id="p-0094" num="0093">The present systems and methods may be used in several contexts. <figref idref="DRAWINGS">FIG. 13</figref> illustrates one embodiment of a system wherein the present systems and methods may be implemented. <figref idref="DRAWINGS">FIG. 13</figref> is a block diagram that illustrates one embodiment of a lighting system <b>1200</b> that includes a lighting controller system <b>1508</b>. The lighting system <b>1500</b> of <figref idref="DRAWINGS">FIG. 13</figref> may be incorporated in various rooms in a home. As illustrated, the system <b>1500</b> includes a room A <b>1502</b>, a room B <b>1504</b>, and a room C <b>1506</b>. Although three rooms are shown in <figref idref="DRAWINGS">FIG. 13</figref>, the system <b>1500</b> may be implemented in any number and variety of rooms within a home, dwelling, or other environment.</p>
<p id="p-0095" num="0094">The lighting controller system <b>1508</b> may monitor and control additional embedded systems and components within the system <b>1500</b>. In one embodiment, the room A <b>1502</b> and the room B <b>1504</b> each include a switch component <b>1514</b>, <b>1518</b>. The switch components <b>1514</b>, <b>1518</b> may also include a secondary embedded system <b>1516</b>, <b>1520</b>. The secondary embedded systems <b>1516</b>, <b>1520</b> may receive instructions from the lighting controller system <b>1508</b>. The secondary embedded systems <b>1516</b>, <b>1520</b> may then execute these instructions. The instructions may include powering on or powering off various light components <b>1510</b>, <b>1512</b>, <b>1522</b>, <b>1524</b>. The instructions may also include dimming the brightness or increasing the brightness of the various light components <b>1510</b>, <b>1512</b>, <b>1522</b>, <b>1524</b>. The instructions may further include arranging the brightness of the light components <b>1510</b>, <b>1512</b>, <b>1522</b>, <b>1524</b> in various patterns. The secondary embedded systems <b>1516</b>, <b>1520</b> facilitate the lighting controller system <b>1508</b> to monitor and control each light component <b>1510</b>, <b>1512</b>, <b>1522</b>, <b>1524</b> located in the room A <b>1502</b> and the room B <b>1504</b>.</p>
<p id="p-0096" num="0095">The lighting controller system <b>1508</b> might also provide instructions directly to a light component <b>1526</b> that includes a secondary embedded system <b>1528</b> in the depicted room C <b>1506</b>. The lighting controller system <b>1508</b> may instruct the secondary embedded system <b>1528</b> to power down or power up the individual light component <b>1526</b>. Similarly, the instructions received from the lighting controller system <b>1508</b> may include dimming the brightness or increasing the brightness of the individual light component <b>1526</b>.</p>
<p id="p-0097" num="0096">The lighting controller system <b>1508</b> may also monitor and provide instructions directly to individual light components <b>1530</b> <b>1532</b> within the system <b>1500</b>. These instructions may include similar instructions as described previously.</p>
<p id="p-0098" num="0097">In the embodiment of <figref idref="DRAWINGS">FIG. 13</figref>, the light components <b>1510</b>, <b>1512</b>, <b>1522</b>, <b>1524</b>, <b>1526</b>, <b>1530</b>, <b>1532</b> may be treated as a provider. These components may provide data regarding their status, for example whether a light component is on or off or the current or past wattage passing through the light component. Similarly, secondary embedded systems <b>1516</b>, <b>1520</b>, <b>1528</b> may act as both a provider and a requestor. For example, the secondary embedded systems <b>1516</b>, <b>1520</b>, <b>1528</b> may request data or services from the light components <b>1510</b>, <b>1512</b>, <b>1522</b>, <b>1524</b>, <b>1526</b>, <b>1530</b>, <b>1532</b>. The secondary embedded systems <b>1516</b>, <b>1520</b>, <b>1528</b> may also provide data received from the light components <b>1510</b>, <b>1512</b>, <b>1522</b>, <b>1524</b>, <b>1526</b>, <b>1530</b>, <b>1532</b> to the lighting controller system <b>1508</b>, which may act as a requestor.</p>
<p id="p-0099" num="0098"><figref idref="DRAWINGS">FIG. 14</figref> is an additional embodiment of a system wherein the present systems and methods of the present invention may be implemented. <figref idref="DRAWINGS">FIG. 14</figref> is a block diagram illustrating a security system <b>1600</b>. The security system <b>1600</b> in the depicted embodiment is implemented in a room A <b>1602</b>, a room B <b>1604</b>, and a room C <b>1606</b>. These rooms may be in the confines of a home or other enclosed environment. The system <b>1600</b> may also be implemented in an open environment where the rooms A, B and C, <b>1602</b>, <b>1604</b>, <b>1606</b> respectively represent territories or boundaries.</p>
<p id="p-0100" num="0099">The system <b>1600</b> includes a security controller system <b>1608</b>. The security controller system <b>1608</b> monitors and receives information from the various components within the system <b>1600</b>. For example, a motion sensor <b>1614</b>, <b>1618</b> may include a secondary embedded system <b>1616</b>, <b>1620</b>. The motion sensors <b>1614</b>, <b>1618</b> may monitor an immediate space for motion and alert the security controller system <b>1608</b> when motion is detected via the secondary embedded system <b>1616</b>, <b>1620</b>. The security controller system <b>1608</b> may also provide instructions to the various components within the system <b>1600</b>. For example, the security controller system <b>1608</b> may provide instructions to the secondary embedded systems <b>1616</b>, <b>1620</b> to power up or power down a window sensor <b>1610</b>, <b>1622</b> and a door sensor <b>1612</b>, <b>1624</b>. In one embodiment, the secondary embedded systems <b>1616</b>, <b>1620</b> notify the security controller system <b>1608</b> when the window sensors <b>1610</b>, <b>1622</b> detect movement of a window. Similarly, the secondary embedded systems <b>1616</b>, <b>1620</b> notify the security controller system <b>1608</b> when the door sensors <b>1612</b>, <b>1624</b> detect movement of a door. The secondary embedded systems <b>1616</b>, <b>1620</b> may instruct the motion sensors <b>1614</b>, <b>1618</b> to activate the LED (not shown) located within the motion sensors <b>1614</b>, <b>1618</b>.</p>
<p id="p-0101" num="0100">The security controller system <b>1608</b> may also monitor and provide instructions directly to individual components within the system <b>1600</b>. For example, the security controller system <b>1608</b> may monitor and provide instructions to power up or power down to a motion sensor <b>1630</b> or a window sensor <b>1632</b>. The security controller system <b>1608</b> may also instruct the motion sensor <b>1630</b> and the window sensor <b>1632</b> to activate the LED (not shown) or audio alert notifications within the sensors <b>1630</b>, <b>1632</b>.</p>
<p id="p-0102" num="0101">Each individual component comprising the system <b>1600</b> may also include a secondary embedded system. For example, <figref idref="DRAWINGS">FIG. 14</figref> illustrates a door sensor <b>1626</b> including a secondary embedded system <b>1628</b>. The security controller system <b>1608</b> may monitor and provide instructions to the secondary embedded system <b>1628</b> in a similar manner as previously described.</p>
<p id="p-0103" num="0102">In the embodiment of <figref idref="DRAWINGS">FIG. 14</figref>, the sensors <b>1610</b>, <b>1612</b>, <b>1622</b>, <b>1624</b>, <b>1626</b>, <b>1630</b>, <b>1632</b> may be treated as providers. These sensors <b>1610</b>, <b>1612</b>, <b>1622</b>, <b>1624</b>, <b>1626</b>, <b>1630</b>, <b>1632</b> may provide data regarding their status. For example, the window sensors <b>1610</b>, <b>1622</b>, <b>1632</b> may provide data regarding whether they are open or closed. Similarly, secondary embedded systems <b>1616</b>, <b>1620</b>, <b>1628</b> may act as both a provider and a requestor. For example, the secondary embedded systems <b>1616</b>, <b>1620</b>, <b>1628</b> may request data or services from the sensors <b>1610</b>, <b>1612</b>, <b>1622</b>, <b>1624</b>, <b>1626</b>, <b>1630</b>, <b>1632</b>. The secondary embedded systems <b>1616</b>, <b>1620</b>, <b>1628</b> may also provide data received from the sensors <b>1610</b>, <b>1612</b>, <b>1622</b>, <b>1624</b>, <b>1626</b>, <b>1630</b>, <b>1632</b> to the security controller system <b>1608</b>, which may act as a requestor.</p>
<p id="p-0104" num="0103"><figref idref="DRAWINGS">FIG. 15</figref> is a block diagram illustrating one embodiment of a home system <b>1700</b>. The home system <b>1700</b> includes a home controller <b>1708</b> that facilitates the monitoring of various systems such as the lighting system <b>1500</b>, the security system <b>1600</b>, and the like. The home system <b>1700</b> allows a user to control various components and systems through one or more embedded systems. In one embodiment, the home controller system <b>1708</b> monitors and provides information in the same manner as previously described in relation to <figref idref="DRAWINGS">FIGS. 13 and 14</figref>. In the depicted embodiment, the home controller <b>1708</b> provides instructions to a heating component <b>1724</b> via a secondary embedded system <b>1720</b>. The heating component <b>1724</b> may include a furnace or other heating device typically found in resident locations or offices. The home controller system <b>1708</b> may provide instructions to power up or power down the heating component <b>1724</b> via the secondary embedded system <b>1720</b>.</p>
<p id="p-0105" num="0104">Similarly, the home controller <b>1708</b> may monitor and provide instructions directly to a component within the home system <b>1700</b> such as a cooling component <b>1730</b>. The cooling component <b>1730</b> may include an air conditioner or other cooling device typically found in resident locations or offices. The central home controller <b>1708</b> may instruct the cooling component <b>1730</b> to power up or power down depending on the temperature reading collected by the central embedded system <b>1708</b>. The home system <b>1700</b> functions in a similar manner as previously described in relation to <figref idref="DRAWINGS">FIGS. 13 and 14</figref>.</p>
<p id="p-0106" num="0105">In the embodiment of <figref idref="DRAWINGS">FIG. 15</figref>, the window sensor <b>1710</b>, door sensor <b>1712</b>, heating component <b>1724</b>, cooling component <b>1730</b>, and lighting components <b>1722</b>, <b>1726</b>, <b>1732</b> may be treated as providers. These elements <b>1710</b>, <b>1712</b>, <b>1722</b>, <b>1724</b>, <b>1726</b>, <b>1730</b>, <b>1732</b> may provide data regarding their status. For example, the heating and cooling components <b>1724</b>, <b>1730</b> may provide data regarding the present temperature in their respective rooms <b>1704</b>, <b>1706</b>. The heating and cooling components <b>1724</b>, <b>1730</b> may provide data regarding the status of the component, whether it is on or off, its recent power usage, any system errors, etc. Similarly, secondary embedded systems <b>1716</b>, <b>1720</b>, <b>1728</b> may act as both a provider and a requestor. For example, the secondary embedded systems <b>1716</b>, <b>1720</b>, <b>1728</b> may request data or services from these elements <b>1710</b>, <b>1712</b>, <b>1722</b>, <b>1724</b>, <b>1726</b>, <b>1730</b>, <b>1732</b>. The secondary embedded systems <b>1716</b>, <b>1720</b>, <b>1728</b> may also provide data received from the elements <b>1710</b>, <b>1712</b>, <b>1722</b>, <b>1724</b>, <b>1726</b>, <b>1730</b>, <b>1732</b> to the home controller system <b>1708</b>, which may act as a requestor.</p>
<p id="p-0107" num="0106">There are many types of embedded devices and many reasons for creating device networks. Several examples of device networking applications will be set forth. It will be appreciated by those skilled in the art that the examples discussed are not exhaustive.</p>
<p id="p-0108" num="0107">One example of a device networking application is remote monitoring. Many useful device networks involve remote monitoring, the one-way transfer of information from one node to another. In these applications, providers typically act as small servers that report certain information in response to a requestor. Providers can also be set up to publish their state information to subscribers. A requestor may ask for periodic reports or for updates whenever the state changes, perhaps with some means of limiting how often updates are to be sent. Providers can be set up to notify requestors when some event or exceptional condition occurs.</p>
<p id="p-0109" num="0108">Another example of a device network application is remote control, where requestors are able to send commands to providers to invoke some specific action. In most cases, remote control involves some sort of feedback.</p>
<p id="p-0110" num="0109">A still further example of a device networking application is distributed control systems. The functions and data associated with individual providers can be combined and coordinated through a network to create a distributed system that provides additional value. Sometimes these distributed control systems can be established more or less automatically. In many cases, a more sophisticated device joins a peer-to-peer network to perform configuration, monitoring or diagnostic duties. Such systems may be created by objects that communicate as peers or through a master-slave configuration, in which each object in the system communicates with a single, central node that contains all of the control logic.</p>
<p id="p-0111" num="0110">With each category of networking application, there are a variety of ways in which requestors may connect to providers. When a relatively small number of providers are involved, a requestor may use a web browser, pager or even a WAP-enabled cell phone to communicate with a provider in a more or less interactive manner. As the number of providers grows, however, these methods may become unworkable and requestors may employ more general data management techniques such as a spreadsheet or database application.</p>
<p id="p-0112" num="0111">As a variety of networks are implemented over time and with different technologies, the situation can arise in which multiple networks might sit in the same home or facility, each using their own protocols and unable to communicate with the others. In this case the various networks and protocols can be bridged to create a single, larger network. This can allow a single application to access each provider, simplifying the interaction with all of the providers.</p>
<p id="p-0113" num="0112">Information and signals may be represented using any of a variety of different technologies and techniques. For example, data, instructions, commands, information, signals, bits, symbols, and chips that may be referenced throughout the above description may be represented by voltages, currents, electromagnetic waves, magnetic fields or particles, optical fields or particles, or any combination thereof.</p>
<p id="p-0114" num="0113">The various illustrative logical blocks, modules, circuits, and algorithm steps described in connection with the embodiments disclosed herein may be implemented as electronic hardware, computer software, or combinations of both. To clearly illustrate this interchangeability of hardware and software, various illustrative components, blocks, modules, circuits, and steps have been described above generally in terms of their functionality. Whether such functionality is implemented as hardware or software depends upon the particular application and design constraints imposed on the overall system. Skilled artisans may implement the described functionality in varying ways for each particular application, but such implementation decisions should not be interpreted as causing a departure from the scope of the present invention.</p>
<p id="p-0115" num="0114">The various illustrative logical blocks, modules, and circuits described in connection with the embodiments disclosed herein may be implemented or performed with a general purpose processor, a digital signal processor (DSP), an application specific integrated circuit (ASIC), a field programmable gate array signal (FPGA) or other programmable logic device, discrete gate or transistor logic, discrete hardware components, or any combination thereof designed to perform the functions described herein. A general purpose processor may be a microprocessor, but in the alternative, the processor may be any conventional processor, controller, microcontroller, or state machine. A processor may also be implemented as a combination of computing devices, e.g., a combination of a DSP and a microprocessor, a plurality of microprocessors, one or more microprocessors in conjunction with a DSP core, or any other such configuration.</p>
<p id="p-0116" num="0115">The steps of a method or algorithm described in connection with the embodiments disclosed herein may be embodied directly in hardware, in a software module executed by a processor, or in a combination of the two. A software module may reside in RAM memory, flash memory, ROM memory, EPROM memory, EEPROM memory, registers, hard disk, a removable disk, a CD-ROM, or any other form of storage medium known in the art. An exemplary storage medium is coupled to the processor such that the processor can read information from, and write information to, the storage medium. In the alternative, the storage medium may be integral to the processor. The processor and the storage medium may reside in an ASIC. The ASIC may reside in a user terminal. In the alternative, the processor and the storage medium may reside as discrete components in a user terminal.</p>
<p id="p-0117" num="0116">The methods disclosed herein comprise one or more steps or actions for achieving the described method. The method steps and/or actions may be interchanged with one another without departing from the scope of the present invention. In other words, unless a specific order of steps or actions is required for proper operation of the embodiment, the order and/or use of specific steps and/or actions may be modified without departing from the scope of the present invention.</p>
<p id="p-0118" num="0117">While specific embodiments and applications of the present invention have been illustrated and described, it is to be understood that the invention is not limited to the precise configuration and components disclosed herein. Various modifications, changes, and variations which will be apparent to those skilled in the art may be made in the arrangement, operation, and details of the methods and systems of the present invention disclosed herein without departing from the spirit and scope of the invention.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A system in a distributed network, comprising:
<claim-text>a requestor,</claim-text>
<claim-text>a provider comprising a processor, and a memory that stores instructions executed by the processor for providing a service to the requestor according to a request sent from the requestor; and</claim-text>
<claim-text>an intervening access node that intervenes between the requestor and the provider in electronic communication with the requestor and the provider,</claim-text>
<claim-text>wherein the requestor sends a stay online binding including a first identifier to the intervening access node,</claim-text>
<claim-text>the intervening access node holds the stay online binding,</claim-text>
<claim-text>the instructions executed by the processor being executable to monitor communications between the provider and the intervening access node, so as to determine whether the first identifier in the stay online binding is identical to a second identifier included in a binding of the provider that exists in the intervening access node,</claim-text>
<claim-text>when the provider determines that the first identifier is identical to the second identifier, the provider sends the binding including the second identifier to the intervening access node, so as to establish connections between the provider and the intervening access node, and</claim-text>
<claim-text>when the provider determines that the first identifier is not identical to the second identifier, the provider is disconnected from the intervening access node.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The system according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein
<claim-text>the instructions are executable to monitor the stay online binding including the identical first identifier sent from the intervening access node in order to monitor the communications.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The system according to any one of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the instructions executed by a processor of the requestor are also executable to:
<claim-text>allow the requestor to receive data or services from the provider using the binding.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The system according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein
<claim-text>the intervening access node has a database including the stay online binding, and</claim-text>
<claim-text>the instructions are executable to monitor the stay online binding including the identical first identifier in such a manner that changes in contents of the database are determined in order to monitor the communications.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The system according to any one of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the instructions executed by the processor are also executable to:
<claim-text>wait a predetermined period of time after the provider is disconnected from the intervening access node; and</claim-text>
<claim-text>have the provider to make a query on the intervening access node as to what the intervening access node has the stay online binding including the identical first identifier.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The system according to <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein the provider makes the query using a connectionless-type protocol.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. A method for managing communications of a system in a distributed network comprising a requestor, a provider that provides a service to the requestor according to a request sent from the requestor, and an intervening access node that intervenes between the requestor and the provider in electronic communication with the requestor and the provider, the method comprising:
<claim-text>sending a stay online binding including a first identifier to the intervening access node by the requestor;</claim-text>
<claim-text>holding the stay online binding by the intervening access node;</claim-text>
<claim-text>monitoring communications between the provider and the intervening access node by the provider, so as to determine whether the first identifier in the stay online binding is identical to a second identifier included in a binding of the provider that exists in the intervening access node;</claim-text>
<claim-text>when the provider determines that the first identifier is identical to the second identifier, sending the binding including the second identifier to the intervening access node by the provider, so as to establish connections between the provider and the intervening access node; and</claim-text>
<claim-text>when the provider determines that the first identifier is not identical to the second identifier, disconnecting the provider from the intervening access node.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The method according to <claim-ref idref="CLM-00007">claim 7</claim-ref>, further comprising:
<claim-text>monitoring the stay online binding including the identical first identifier sent from the intervening access node in order to monitor the communications by the provider.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The method according to <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the monitoring is executed by a connectionless-type protocol.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The method according to <claim-ref idref="CLM-00007">claim 7</claim-ref>, further comprising:
<claim-text>monitoring the stay online binding including the identical first identifier in such a manner that changes in contents of a database are determined in order to monitor the communications by the provider.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The method according to any one of <claim-ref idref="CLM-00007">claim 7</claim-ref>, further comprising:
<claim-text>waiting a predetermined period of time after the provider is disconnected from the intervening access node; and</claim-text>
<claim-text>making a query on the intervening access node by the provider as to what the intervening access node has the stay online binding including the identical first identifier.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The method according to any one of <claim-ref idref="CLM-00007">claim 7</claim-ref>, further comprising:
<claim-text>allowing the requestor to receive data or services from the provider using the binding.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. An embedded device in electronic communication with a requestor via an intervening access node in a distributed network so as to provide a service to the requestor according to a request sent from the requestor, the device comprising:
<claim-text>a processor; and</claim-text>
<claim-text>a memory that stores instructions executed by the processor,</claim-text>
<claim-text>wherein the device receives a stay online binding including a first identifier from the requestor via the intervening access node,</claim-text>
<claim-text>the device monitors communications with the intervening access node, so as to determine whether the first identifier in the stay online binding is identical to a second identifier included in a binding of the device that exists in the intervening access node,</claim-text>
<claim-text>when the device determines that the first identifier is identical to the second identifier, the device sends the binding including the second identifier to the intervening access node, so as to establish connections between the device and the intervening access node, and</claim-text>
<claim-text>when the device determines that the first identifier is not identical to the second identifier, the device is disconnected from the intervening access node. </claim-text>
</claim-text>
</claim>
</claims>
</us-patent-grant>

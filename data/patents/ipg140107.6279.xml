<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08627426-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08627426</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>12767010</doc-number>
<date>20100426</date>
</document-id>
</application-reference>
<us-application-series-code>12</us-application-series-code>
<us-term-of-grant>
<us-term-extension>356</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>7</main-group>
<subgroup>04</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>726  7</main-classification>
<further-classification>726 14</further-classification>
<further-classification>726 19</further-classification>
<further-classification>726 24</further-classification>
<further-classification>726 25</further-classification>
<further-classification>713180</further-classification>
<further-classification>713189</further-classification>
<further-classification>70799901</further-classification>
<further-classification>4554561</further-classification>
</classification-national>
<invention-title id="d2e53">Cloud platform architecture</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>7275244</doc-number>
<kind>B1</kind>
<name>Bell et al.</name>
<date>20070900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>7356679</doc-number>
<kind>B1</kind>
<name>Le et al.</name>
<date>20080400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>7370322</doc-number>
<kind>B1</kind>
<name>Matena et al.</name>
<date>20080500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>7874008</doc-number>
<kind>B2</kind>
<name>Chang et al.</name>
<date>20110100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>726 27</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>7971059</doc-number>
<kind>B2</kind>
<name>Calman et al.</name>
<date>20110600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>713168</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>8108912</doc-number>
<kind>B2</kind>
<name>Ferris</name>
<date>20120100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>726  3</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>8176094</doc-number>
<kind>B2</kind>
<name>Friedman</name>
<date>20120500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707803</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>8176559</doc-number>
<kind>B2</kind>
<name>Mathur et al.</name>
<date>20120500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>726 24</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>8201237</doc-number>
<kind>B1</kind>
<name>Doane et al.</name>
<date>20120600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>726 15</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>8225093</doc-number>
<kind>B2</kind>
<name>Fok et al.</name>
<date>20120700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>713168</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>8375360</doc-number>
<kind>B2</kind>
<name>I'Anson</name>
<date>20130200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717120</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>8407689</doc-number>
<kind>B2</kind>
<name>Dournov et al.</name>
<date>20130300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00013">
<document-id>
<country>US</country>
<doc-number>8429630</doc-number>
<kind>B2</kind>
<name>Nickolov et al.</name>
<date>20130400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00014">
<document-id>
<country>US</country>
<doc-number>2002/0178254</doc-number>
<kind>A1</kind>
<name>Brittenham et al.</name>
<date>20021100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00015">
<document-id>
<country>US</country>
<doc-number>2003/0061247</doc-number>
<kind>A1</kind>
<name>Renaud</name>
<date>20030300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00016">
<document-id>
<country>US</country>
<doc-number>2005/0198303</doc-number>
<kind>A1</kind>
<name>Knauerhase et al.</name>
<date>20050900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00017">
<document-id>
<country>US</country>
<doc-number>2005/0289536</doc-number>
<kind>A1</kind>
<name>Nayak et al.</name>
<date>20051200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00018">
<document-id>
<country>US</country>
<doc-number>2006/0079356</doc-number>
<kind>A1</kind>
<name>Kodama et al.</name>
<date>20060400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>474 28</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00019">
<document-id>
<country>US</country>
<doc-number>2006/0136897</doc-number>
<kind>A1</kind>
<name>Laxminarayan et al.</name>
<date>20060600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00020">
<document-id>
<country>US</country>
<doc-number>2007/0209035</doc-number>
<kind>A1</kind>
<name>Sonderegger et al.</name>
<date>20070900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00021">
<document-id>
<country>US</country>
<doc-number>2008/0163171</doc-number>
<kind>A1</kind>
<name>Chess et al.</name>
<date>20080700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00022">
<document-id>
<country>US</country>
<doc-number>2008/0209016</doc-number>
<kind>A1</kind>
<name>Karve et al.</name>
<date>20080800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00023">
<document-id>
<country>US</country>
<doc-number>2009/0070752</doc-number>
<kind>A1</kind>
<name>Alpern et al.</name>
<date>20090300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00024">
<document-id>
<country>US</country>
<doc-number>2009/0070853</doc-number>
<kind>A1</kind>
<name>Chung et al.</name>
<date>20090300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>726  1</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00025">
<document-id>
<country>US</country>
<doc-number>2009/0172781</doc-number>
<kind>A1</kind>
<name>Masuoka et al.</name>
<date>20090700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00026">
<document-id>
<country>US</country>
<doc-number>2010/0131590</doc-number>
<kind>A1</kind>
<name>Coleman et al.</name>
<date>20100500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709203</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00027">
<document-id>
<country>US</country>
<doc-number>2010/0251328</doc-number>
<kind>A1</kind>
<name>Syed et al.</name>
<date>20100900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>726  1</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00028">
<document-id>
<country>US</country>
<doc-number>2010/0257605</doc-number>
<kind>A1</kind>
<name>McLaughlin et al.</name>
<date>20101000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>726 23</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00029">
<document-id>
<country>US</country>
<doc-number>2010/0281166</doc-number>
<kind>A1</kind>
<name>Buyya et al.</name>
<date>20101100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709226</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00030">
<document-id>
<country>US</country>
<doc-number>2010/0318649</doc-number>
<kind>A1</kind>
<name>Moore et al.</name>
<date>20101200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709224</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00031">
<document-id>
<country>US</country>
<doc-number>2011/0004916</doc-number>
<kind>A1</kind>
<name>Schiffman et al.</name>
<date>20110100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>726  1</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00032">
<document-id>
<country>US</country>
<doc-number>2011/0055714</doc-number>
<kind>A1</kind>
<name>Vemulapalli et al.</name>
<date>20110300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00033">
<document-id>
<country>US</country>
<doc-number>2011/0107411</doc-number>
<kind>A1</kind>
<name>McClain et al.</name>
<date>20110500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00034">
<document-id>
<country>US</country>
<doc-number>2011/0126197</doc-number>
<kind>A1</kind>
<name>Larsen et al.</name>
<date>20110500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00035">
<document-id>
<country>US</country>
<doc-number>2011/0145836</doc-number>
<kind>A1</kind>
<name>Wheeler et al.</name>
<date>20110600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>719314</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00036">
<document-id>
<country>US</country>
<doc-number>2011/0153727</doc-number>
<kind>A1</kind>
<name>Li</name>
<date>20110600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709203</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00037">
<document-id>
<country>US</country>
<doc-number>2011/0153824</doc-number>
<kind>A1</kind>
<name>Chikando et al.</name>
<date>20110600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709226</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00038">
<document-id>
<country>US</country>
<doc-number>2011/0167469</doc-number>
<kind>A1</kind>
<name>Letca et al.</name>
<date>20110700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>726  1</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00039">
<document-id>
<country>US</country>
<doc-number>2011/0214124</doc-number>
<kind>A1</kind>
<name>Ferris et al.</name>
<date>20110900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>718  1</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00040">
<document-id>
<country>US</country>
<doc-number>2012/0102481</doc-number>
<kind>A1</kind>
<name>Mani et al.</name>
<date>20120400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00041">
<document-id>
<country>EP</country>
<doc-number>2 299 360</doc-number>
<kind>A1</kind>
<date>20110300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00042">
<document-id>
<country>EP</country>
<doc-number>2 381 363</doc-number>
<kind>A2</kind>
<date>20111000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00043">
<document-id>
<country>JP</country>
<doc-number>2007-507046</doc-number>
<kind>A</kind>
<date>20070300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00044">
<othercit>Leitner P, Application Level Performance Monitoring of Cloud services, Dec. 2012, vol. 9, pp. 1-8.</othercit>
</nplcit>
<category>cited by examiner</category>
</us-citation>
<us-citation>
<nplcit num="00045">
<othercit>International Search Report and Written Opinion, Application No. PCT/US2012/033356, filed Apr. 12, 2012, 14 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00046">
<othercit>Changhua Sun et al.: &#x201c;Simplifying Service Deployment with Virtual Appliances&#x201d;, Services Computing, 2008. SCC '08. IEEE International Conference on, IEEE, Piscataway, NJ, USA, Jul. 7, 2008, pp. 265-272, XP031291269, ISBN: 978-0-7695-3283-7.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00047">
<othercit>Partial European Search Report dated Jul. 1, 2011, Application No. 11163533.0, filed Apr. 21, 2011, 6 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00048">
<othercit>Goodwill, James: &#x201c;Java Web Applications&#x201d;, O'Reilly, Mar. 15, 2001, pp. 1-3, XP002646828, Retrieved from the Internet: URL: http://onjava.com/lpt/a/671 [retrieved on Jun. 30, 2011].</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00049">
<othercit>Goodwill, James: &#x201c;Deploying Web applications to Tomcat&#x201d;, O'Reilly, Apr. 19, 2001, pp. 1-11, XP002646829, Retrieved from the Internet: URL: http://oreilly.com/lpt/a/780 [retrieved on Jun. 30, 2011].</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00050">
<othercit>Laurent Tonon: &#x201c;Tomcat Architecture Diagram&#x201d;, Apr. 26, 2011, p. 1, XP002646830, Retrieved from the Internet: URL: http://marakana.com/forums/tomcat/genera1/106.html [retrieved on Jul. 1, 2011].</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>20</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>726  2-  6</main-classification>
<additional-info>unstructured</additional-info>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>726 27- 30</main-classification>
<additional-info>unstructured</additional-info>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>726 14</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>726  7</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>726 24- 26</main-classification>
<additional-info>unstructured</additional-info>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>713170</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>713180</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>7</number-of-drawing-sheets>
<number-of-figures>7</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20110265164</doc-number>
<kind>A1</kind>
<date>20111027</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Lucovsky</last-name>
<first-name>Mark</first-name>
<address>
<city>Carpinteria</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Collison</last-name>
<first-name>Derek</first-name>
<address>
<city>Atherton</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="003" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Spivak</last-name>
<first-name>Vadim</first-name>
<address>
<city>San Francisco</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="004" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Chen</last-name>
<first-name>Gerald C.</first-name>
<address>
<city>San Francisco</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="005" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Laddad</last-name>
<first-name>Ramnivas</first-name>
<address>
<city>San Jose</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Lucovsky</last-name>
<first-name>Mark</first-name>
<address>
<city>Carpinteria</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Collison</last-name>
<first-name>Derek</first-name>
<address>
<city>Atherton</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="003" designation="us-only">
<addressbook>
<last-name>Spivak</last-name>
<first-name>Vadim</first-name>
<address>
<city>San Francisco</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="004" designation="us-only">
<addressbook>
<last-name>Chen</last-name>
<first-name>Gerald C.</first-name>
<address>
<city>San Francisco</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="005" designation="us-only">
<addressbook>
<last-name>Laddad</last-name>
<first-name>Ramnivas</first-name>
<address>
<city>San Jose</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>VMware, Inc.</orgname>
<role>02</role>
<address>
<city>Palo Alto</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Flynn</last-name>
<first-name>Nathan</first-name>
<department>2431</department>
</primary-examiner>
<assistant-examiner>
<last-name>Lakhia</last-name>
<first-name>Viral</first-name>
</assistant-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">A cloud computing environment provides the ability to deploy a web application that has been developed using one of a plurality of application frameworks and is configured to execute within one of a plurality of runtime environments. The cloud computing environment receives the web application in a package compatible with the runtime environment (e.g., a WAR file to be launched in an application server, for example) and dynamically binds available services by appropriately inserting service provisioning data (e.g., service network address, login credentials, etc.) into the package. The cloud computing environment then packages an instance of the runtime environment, a start script and the package into a web application deployment package, which is then transmitted to an application (e.g., container virtual machine, etc.). The application container unpacks the web application deployment package, installs the runtime environment, loads the web application package into the runtime environment and starts the start script, thereby deploying the web application in the application container.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="173.31mm" wi="252.39mm" file="US08627426-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="256.03mm" wi="175.77mm" orientation="landscape" file="US08627426-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="252.56mm" wi="176.28mm" orientation="landscape" file="US08627426-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="252.56mm" wi="172.30mm" orientation="landscape" file="US08627426-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="259.00mm" wi="178.31mm" orientation="landscape" file="US08627426-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="255.02mm" wi="177.80mm" orientation="landscape" file="US08627426-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="184.74mm" wi="162.39mm" orientation="landscape" file="US08627426-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="258.49mm" wi="172.80mm" orientation="landscape" file="US08627426-20140107-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">BACKGROUND</heading>
<p id="p-0002" num="0001">&#x201c;Platform-as-a-Service&#x201d; (also commonly referred to has &#x201c;PaaS&#x201d;) generally describes a suite of technologies provided by a service provider as an integrated solution that enables a web developer (or any other application developer) to build, deploy and manage the life cycle of a web application (or any other type of networked application). One primary component of PaaS is a &#x201c;cloud-computing platform&#x201d; which is a network (e.g., Internet, etc.) infrastructure run and maintained by the service provider upon which developed web applications may be deployed. By providing the hardware resources and software layers required to robustly run a web application, the cloud computing platform enables developers to focus on the development of the web application, itself, and leave the logistics of scalability and other computing and storage resource requirements (e.g., data storage, database access, processing power, facilities, power and bandwidth, etc.) to the cloud computing platform (e.g., at a cost charged by the service provider). A service provider may additionally provide a plug-in component to a traditional IDE (i.e., integrated development environment) that assists a developer who creates web applications using the IDE to properly structure, develop and test such applications in a manner that is compatible with the service provider's cloud computing platform. Once the developer completes a web application using the IDE, the plug-in component assists the developer in deploying the web application into the cloud computing platform.</p>
<p id="p-0003" num="0002">However, due to complexities in providing flexible and scalable cloud computing platforms, PaaS is offered by few service providers. Current offerings of cloud computing platforms provide limited choices in the computer languages, application frameworks, runtime environments, available services and other technology options that may be selected to create a web application that can be launched in the cloud computing platform. For example, a cloud computing platform that only supports Microsoft's .NET runtime environment would not be suitable for an enterprise with a technology development policy that requires development of web applications using an open source runtime environment such as the Apache Tomcat application server. Furthermore, software layers of current cloud computing platforms are inextricably coupled to the hardware resources (e.g., servers, storage, data centers, etc.) upon which they are built, making any enterprise requested customization, modification and/or portability of functionality prohibitive. Such inflexibility and limited choices make adoption of current PaaS more suitable for small start-up companies than for sophisticated enterprises that need to address issues such as governance, security, privacy and higher levels of control over web applications (service level requirements, scalability, fault tolerance etc.).</p>
<heading id="h-0002" level="1">SUMMARY</heading>
<p id="p-0004" num="0003">One or more embodiments of the present invention provide a cloud computing environment for deployment of web applications that can be developed utilizing any choice of application framework (e.g., Ruby on Rails, Spring, etc.), any choice of runtime environment (e.g., Apache Tomcat application server, Microsoft .NET, etc.) and any choice of programming language (e.g., Java, Ruby, Scala, Python, etc.). The cloud computing environment further decouples the software-based components of the cloud computing environment that provide web application deployment functionality from any hardware-based infrastructure platform upon which the software-based components might be built. As such, instances of the cloud computing environment can be launched on top of any type of hardware resource, from a single laptop to an enterprise-wide data center. The flexibility of such a cloud computing environment can lead to increased adoption at all levels, from the single developer to the entire enterprise. At least one embodiment leverages the ability to easily scale resources for the cloud computing environment by utilizing virtual machines that can be dynamically instantiated to provide additional computing resource capacity.</p>
<p id="p-0005" num="0004">One method, according to an embodiment, deploys a web application in a hosting environment, wherein the web application is developed using one of a plurality of application frameworks and is configured to execute within one of a plurality of runtime environments. According to the method, the hosting environment first receives the web application in the form of a package compatible with the runtime environment. An example of such a package may be a WAR file that is compatible with the Apache Tomcat runtime environment. The hosting environment then determines a selection of available services (e.g., databases, etc.) accessible by the hosting environment to bind to the web application and receives service provisioning data for each of the available services, wherein the service provisioning data for each of the available services comprises network addressing information relating to the corresponding available service. Upon receiving such service provisioning data, the hosting environment inserts the received service provisioning data for each of the available services into the package in accordance with a data organization structure imposed by the application framework on the package, thereby binding the available service to the web application. For example, if the web application is developed using a Spring framework, then service provisioning data for available services (e.g., network addressing information, login credentials, etc.) may be inserted into the WAR file in a manner consistent with the organizational structure of a Spring framework organized WAR file. The hosting environment then generates a start script for starting the runtime environment and launching the web application and then packages the runtime environment, start script and package into a web application deployment package. In one embodiment, for example, the web application deployment package may be a simple tarball. The hosting environment then fetches the web application deployment package for an application container indicating availability to deploy the web application and then unpacks the web application deployment package into the application container, thereby installing the runtime environment and loading the package into the runtime environment. One example of an application container, as further discussed herein, is a virtual machine (referred to as a &#x201c;container VM&#x201d;). The hosting environment then executes the start script in the application container to start the runtime environment and launch the web application and, upon successful launch of the web application, notifies a router of network address information for the application container, thereby enabling the router to route web browser requests for the web application to the application container.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0006" num="0005"><figref idref="DRAWINGS">FIG. 1A</figref> depicts one embodiment of a cloud computing architecture for a service provider.</p>
<p id="p-0007" num="0006"><figref idref="DRAWINGS">FIG. 1B</figref> depicts a second embodiment of a cloud computing architecture for a service provider.</p>
<p id="p-0008" num="0007"><figref idref="DRAWINGS">FIG. 2A</figref> depicts a component architecture for a service provisioner of a cloud computing environment.</p>
<p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. 2B</figref> depicts a service provisioner layer of a cloud computing environment.</p>
<p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. 3</figref> depicts a flow diagram for preparing a web application for deployment by a cloud controller.</p>
<p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. 4</figref> depicts container virtual machines for hosting a web application in a cloud computing architecture.</p>
<p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. 5</figref> depicts a flow diagram for deploying a web application in a container virtual machine.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0004" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. 1A</figref> depicts one embodiment of a cloud computing architecture for a service provider. An enterprise <b>100</b> desires to develop a web application to be deployed by service provider <b>102</b>. For example, service provider <b>102</b> may have certain services (e.g., accessible, for example, via REST (Representational State Transfer) APIs (Application Programming Interface) or any other client-server communication protocol such as custom database <b>104</b> or CRM (Customer Relationship Management) service <b>106</b> (or any other service offered by service provider <b>102</b>) that enterprise <b>100</b> desires to access through its developed web application. Service provider <b>102</b>, in turn, utilizes resources provided by cloud computing platform provider <b>108</b> to provide a cloud computing environment in which enterprise <b>100</b> can deploy its web application.</p>
<p id="p-0014" num="0013">Cloud computing platform provider <b>108</b> provides service provider <b>102</b> an infrastructure platform <b>110</b> upon which a cloud computing environment <b>112</b> may be executed. In the particular embodiment of <figref idref="DRAWINGS">FIG. 1A</figref>, infrastructure platform <b>110</b> comprises hardware resources <b>114</b>, such as servers <b>116</b><sub>1 </sub>to <b>116</b><sub>n </sub>and one or more storage array networks (SAN), such as SAN <b>118</b>, which are configured in a manner to provide a virtualization environment <b>120</b> that supports the execution of a plurality of virtual machines across servers <b>116</b><sub>1 </sub>to <b>116</b><sub>n</sub>. As further detailed below, these virtual machines provide the various services and functions that make up cloud computing environment <b>112</b>.</p>
<p id="p-0015" num="0014">Virtualization environment <b>120</b> of <figref idref="DRAWINGS">FIG. 1A</figref> additionally includes an orchestration component <b>122</b> (e.g., implemented as a process running in a virtual machine in one embodiment) that monitors the infrastructure resource consumption levels and requirements of cloud computing environment <b>112</b> (e.g., by monitoring communications routed through addressing and discovery layer <b>132</b> as further detailed below) and provides additional infrastructure resources to cloud computing environment as needed or desired. For example, if cloud computing environment <b>112</b> requires additional virtual machines to host newly deployed web applications or to scale currently running web applications to support peak demands, orchestration component <b>122</b> can initiate and manage the instantiation of virtual machines on servers <b>116</b><sub>1 </sub>to <b>116</b><sub>n </sub>to support such needs. In one example implementation of an embodiment similar to that of <figref idref="DRAWINGS">FIG. 1A</figref>, virtualization environment <b>120</b> may be implemented by running VMware ESX&#x2122; based hypervisor technologies on servers <b>116</b><sub>1 </sub>to <b>116</b><sub>n </sub>provided by VMware, Inc. of Palo Alto, Calif. (although it should be recognized that any other virtualization technologies, including Xen&#xae; and Microsoft Hyper-V virtualization technologies may be utilized consistent with the teachings herein).</p>
<p id="p-0016" num="0015">In the embodiment of <figref idref="DRAWINGS">FIG. 1A</figref>, cloud computing environment <b>112</b> supports an application execution space <b>124</b> that comprises a plurality of virtual machines (referred to as container VMs <b>126</b><sub>1 </sub>to <b>126</b><sub>m</sub>) instantiated to host deployed web applications. For example, the deployment by enterprise <b>100</b> of a web application <b>125</b> on the cloud computing platform of service provider <b>102</b> results in the hosting of web application <b>125</b> in container VM <b>126</b><sub>1 </sub>of application execution space <b>124</b> at cloud computing platform provider <b>108</b>.</p>
<p id="p-0017" num="0016">Web application <b>125</b> can access a set of base services <b>128</b> (e.g., run in one or more virtual machines) provided by cloud computing environment <b>112</b> as well as third-party services such as those that may be provided directly by service provider <b>102</b> (e.g., custom database <b>104</b>, CRM service <b>106</b>, etc.). For example, a relational database service (e.g., MySQL, etc.), monitoring service, background task scheduler, logging service, messaging service, memory object caching service and the like may comprise base services <b>128</b> in one embodiment. A service provisioner <b>130</b> (e.g., run in one or more virtual machines) serves as a communications intermediary between these available services (e.g., base services <b>128</b> and other third party provided services such as custom database <b>104</b> and CRM service <b>106</b>) and other components of cloud computing environment <b>112</b> (e.g., cloud controller <b>134</b>, health manager <b>138</b>, router <b>136</b>, container VMs <b>126</b><sub>1 </sub>to <b>126</b><sub>m</sub>, etc.) and assists with the task of provisioning or binding such available services to web applications during the web application deployment process. <figref idref="DRAWINGS">FIG. 2A</figref> depicts a component architecture for service provisioner <b>130</b> of cloud computing environment <b>112</b>, according to one embodiment. In the embodiment of <figref idref="DRAWINGS">FIG. 2A</figref>, service provisioner <b>130</b> maintains a shim or similar stub component for each service available in cloud computing environment <b>112</b> (see, e.g., shims <b>200</b><sub>a</sub>, <b>200</b><sub>b </sub>and <b>200</b><sub>x</sub>, respectively, for base services <b>128</b><sub>a </sub>and <b>128</b><sub>b</sub>, and CRM service <b>106</b>). Each shim component itself maintains service provisioning data for its corresponding service, such as a description of the service type, service characteristics (e.g., multi-tenancy versus single tenancy, etc.), login credentials for the service (e.g., root username, password, etc.), network address and port number of the service, and the like. Each shim component is configured to communicate with its corresponding service utilizing an API or other similar communications protocol that is supported by such service. For example, in order to bind web application <b>125</b> to base service <b>128</b><sub>a </sub>during deployment, service provisioner <b>130</b> may direct shim <b>200</b><sub>a </sub>to log into base service <b>128</b><sub>a </sub>and generate new credentials (e.g., a new username and password) specifically for web application <b>125</b> so that web application <b>125</b> can directly log into and access base service <b>128</b><sub>a </sub>with such credentials during its execution. Service provisioner <b>130</b> further comprises an addressing and discovery layer communications client <b>205</b> that enables service provisioner <b>130</b> to communicate with other components of cloud computing environment <b>112</b> through addressing and discovery layer <b>132</b>.</p>
<p id="p-0018" num="0017">It should be recognized that service provisioner <b>130</b> as depicted in <figref idref="DRAWINGS">FIG. 2A</figref> is only one embodiment of a communications intermediary between available services and other components of cloud computing environment <b>112</b> and that alternative embodiments may be implemented consistent with the teachings herein. For example, <figref idref="DRAWINGS">FIG. 2B</figref> depicts an alternative embodiment of service provisioner <b>130</b>, as an abstraction layer of independently operating shim components. Each shim component (e.g., <b>210</b><sub>a </sub>to <b>210</b><sub>b </sub>to <b>210</b><sub>x</sub>) operates, for example, as an independent process and comprises its own addressing and discovery layer communications client (e.g., <b>215</b><sub>a</sub>, <b>215</b><sub>b </sub>and <b>210</b><sub>x</sub>, respectively) to interact with addressing and discovery layer <b>132</b>. In an embodiment similar to that of <figref idref="DRAWINGS">FIG. 2B</figref>, shim components may be implemented in different locations, so long as they are able to effectively communicate with address and discovery layer <b>132</b>. For example, shim <b>210</b><sub>x </sub>for CRM service <b>106</b> may be implemented as a process running on a server at service provider <b>102</b> while shim components <b>210</b><sub>a </sub>and <b>210</b><sub>b </sub>for base services <b>128</b><sub>a </sub>and <b>128</b><sub>b</sub>, respectively, may be implemented as processes running within allocated virtual machines at cloud computing service provider <b>108</b>.</p>
<p id="p-0019" num="0018">Returning to <figref idref="DRAWINGS">FIG. 1A</figref>, addressing and discovery layer <b>132</b> provides a common interface through which components of cloud computing environment <b>112</b>, such as service provisioner <b>130</b>, cloud controller <b>134</b>, health manager <b>138</b>, router <b>136</b> and container VMs <b>126</b><sub>1 </sub>to <b>126</b><sub>m </sub>in application execution space <b>124</b>, can communicate and receive notifications. For example, service provisioner <b>130</b> may communicate through addressing and discovery layer <b>132</b> to broadcast the availability of services and to propagate service provisioning data for such services during deployment of web applications in cloud computing environment <b>112</b>. Similarly, container VM <b>126</b><sub>1 </sub>may broadcast a notification through addressing and discovery layer <b>132</b> to indicate the successful deployment of web application <b>125</b> and to provide routing information (e.g., hostname and network address information, bound port number, etc.) for the successfully deployed web application <b>125</b>. In one embodiment, addressing and discovery layer <b>132</b> is implemented as a message brokering service (e.g., running in one or more virtual machines) that defines a common protocol and message format through which components of cloud computing environment <b>112</b> can exchange messages and broadcast notifications and other information. In such an embodiment, the components of cloud computing environment <b>112</b> establish a connection with the message brokering service (e.g., also sometimes referred to as &#x201c;subscribing&#x201d; to the message brokering service), for example, through known authentication techniques (e.g., passwords, etc.) and, once connected to the message brokering service, can provide, receive and request messages, notifications and other similar information to and from other components that have also subscribed to the message brokering system. One example of a message brokering service that may be used in an embodiment is RabbitMQ&#x2122; which is based upon the AMPQ (Advanced Message Queuing Protocol) open protocol standard. It should be recognized, however, that alternative interfaces and communication schemes may be implemented for addressing and discovery layer <b>132</b> other than such a message brokering service.</p>
<p id="p-0020" num="0019">Cloud controller <b>134</b> (e.g., run in one or more virtual machines) orchestrates the deployment process for web applications that are submitted to cloud computing environment <b>112</b> for deployment. Cloud controller <b>134</b> receives web applications submitted to cloud computing environment <b>112</b> and, as further detailed below, interacts with other components of cloud computing environment <b>112</b> to bind available services required by submitted web applications and package web applications for transmission to available container VMs (e.g., container VMs <b>126</b><sub>1 </sub>to <b>126</b><sub>m</sub>) for deployment. In the embodiment depicted in <figref idref="DRAWINGS">FIG. 1A</figref>, web applications, such as web application <b>125</b>, received by cloud controller <b>134</b> may be developed by an application developer <b>140</b> in enterprise <b>100</b> using an integrated development environment (IDE) <b>142</b> installed on the developer's laptop or terminal IDE <b>142</b> includes an installed plug-in provided by service provider <b>102</b> that facilitates the development and submission of web application <b>125</b> to cloud computing environment <b>112</b>. In order to provide enterprise <b>100</b> the ability to impose enterprise-wide rules on web applications (e.g., permitted accessible services, computing resource consumption limitations, etc.), service provider <b>102</b> may also provide to enterprise <b>100</b> a policy engine <b>144</b> to be run, for example, as a proxy server within enterprise <b>100</b>. As depicted in the embodiment of <figref idref="DRAWINGS">FIG. 1A</figref>, policy engine <b>144</b> is situated in the communications path between the cloud controller <b>134</b> and entities that communicate with cloud computing environment <b>112</b> through cloud controller <b>134</b>), such as application developer <b>140</b> or an administrator <b>146</b>, as further discussed below. For example, policy engine <b>144</b> intercepts web applications submitted for deployment by developer <b>140</b> and reviews the requested requirements of such submitted web applications, prior to releasing them to cloud computing environment <b>112</b> for deployment. Administrator <b>146</b> in enterprise <b>100</b> is able to set policies for policy engine <b>144</b> as well as review analytics for web applications currently deployed in cloud computing environment <b>112</b> through a policy engine user interface <b>148</b> that communicates with policy engine <b>144</b> and can be accessed via a web browser or other client application. In one embodiment, policy engine <b>144</b> is further able to provide the same or similar functions as cloud controller <b>134</b> locally within enterprise <b>100</b>. It should be recognized that policy engine <b>144</b> is an optional feature that may be provided by service provider <b>102</b> to enterprise <b>100</b> and that alternative embodiments or implementations may not utilize or include policy engine <b>144</b>. For example, as depicted in <figref idref="DRAWINGS">FIG. 1A</figref>, application developer <b>140</b> and administrator <b>146</b> may communicate directly with cloud controller <b>134</b>, without utilizing policy engine <b>144</b>. Furthermore, it should be recognized that in alternative embodiments, policy engine <b>144</b> may be situated at any location within the communications path to cloud controller <b>134</b>, for example, within service provider <b>102</b> or cloud platform provider <b>108</b> rather than enterprise <b>100</b>, as is depicted in <figref idref="DRAWINGS">FIG. 1A</figref>. It should further be recognized that multiple policy engines <b>144</b>, enforcing policies for different organizations, may be situated between in communications paths to cloud controller <b>134</b>, for example, both within enterprise <b>100</b> and service provider <b>102</b>. Cloud computing environment <b>134</b> further comprises a health manager <b>138</b> (e.g., run in one or more virtual machines) that tracks and maintains the &#x201c;health&#x201d; of cloud computing environment <b>112</b> by monitoring messages broadcast on addressing and discovery layer <b>132</b> by other components of cloud computing environment <b>112</b>. For example, health manager <b>138</b> may notice the failure of an instance of a deployed web application and automatically broadcast a request to cloud controller <b>134</b> to re-start the web application. Similarly, health manager <b>138</b> may be further configured to itself initiate the re-starting of failed available services or other components of cloud computing environment <b>112</b> (e.g., cloud controller <b>134</b>, service provisioner <b>130</b>, router <b>136</b>, etc.).</p>
<p id="p-0021" num="0020">Once cloud controller <b>134</b> successfully orchestrates the deployment of web application <b>125</b> in container VM <b>126</b><sub>1</sub>, an enterprise customer <b>150</b> can access web application <b>125</b>, for example, through a web browser or any other appropriate client application residing on a computer laptop or other computer terminal. Router <b>136</b> (e.g., run in one or more virtual machines) receives the web browser's access request (e.g., a uniform resource locator or URL) and routes the request to container VM <b>126</b><sub>1 </sub>which hosts web application <b>125</b>. More generally, router <b>136</b> maintains mappings in internal routing tables between URLs and deployed web applications in order to properly route URL requests from customers to the appropriate container VMs hosting the requested web applications (as well as maintain load balancing among web application instances, etc.). These mappings are received by router <b>136</b> through address and discovery layer <b>132</b>, as detailed further below, when a container VM successfully deploys a web application and thus broadcasts routing information (e.g., hostname, network address information, port number, etc.) for the web application through addressing and discovery layer <b>132</b>.</p>
<p id="p-0022" num="0021">It should be recognized that the embodiment of <figref idref="DRAWINGS">FIG. 1A</figref> is merely exemplary and that alternative cloud computing architectures may be implemented consistent with the teachings herein. For example, while <figref idref="DRAWINGS">FIG. 1A</figref> implements cloud computing environment <b>112</b> on an infrastructure platform <b>110</b> hosted by cloud computing platform provider <b>108</b>, it should be recognized that cloud computing environment <b>112</b> may be implemented by entities other than cloud computing platform provider <b>108</b>, on top of any type of hardware infrastructure. <figref idref="DRAWINGS">FIG. 1B</figref> depicts an alternative embodiment of a cloud computing architecture in which infrastructure platform <b>110</b> is provided by service provider <b>102</b> itself. Furthermore, unlike <figref idref="DRAWINGS">FIG. 1A</figref>, in which infrastructure platform <b>110</b> comprises a virtualization environment <b>120</b> in which components of cloud computing environment <b>112</b> are implemented as processes or daemons running in one or more virtual machines, the components of cloud computing environment <b>112</b> in <figref idref="DRAWINGS">FIG. 1B</figref> are run in a non-virtualized infrastructure platform <b>110</b>, as processes or daemons directly on hardware resources <b>114</b>, such as servers <b>116</b><sub>1 </sub>to <b>116</b><sub>n</sub>. It should be recognized that embodiments may configure cloud computing environment <b>112</b> and infrastructure platform <b>110</b> in a loosely coupled manner with communication between computing environment <b>112</b> and infrastructure <b>110</b> only occurring through orchestration component <b>122</b> of infrastructure platform <b>110</b> which monitors hardware resource consumption by connecting to addressing and discovery layer <b>132</b>). In such loosely coupled embodiments, it should be recognized that cloud computing environment <b>112</b> may be implemented on any infrastructure platform, including on a laptop or personal computer (e.g., in which case, each component of cloud computer environment <b>112</b> runs as a separate process or daemon on the laptop or personal computer).</p>
<p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. 3</figref> depicts a flow diagram for preparing a web application for deployment by cloud controller <b>134</b>. In step <b>300</b>, the plug-in of IDE <b>142</b> analyzes the web application developed by developer <b>140</b> to determine &#x201c;set-up&#x201d; characteristics, such as the name of the web application and the application framework used to develop the web application (e.g., Spring, Ruby On Rails, etc.). For example, in one embodiment, the plug-in of IDE <b>142</b> determines the application framework used to develop the web application (e.g., Spring, Ruby on Rails, etc.) by analyzing the organizational structure of the various files (as well as possibly the contents of the files themselves) that make up the web application to identify characteristics that are specific to such application framework. In step <b>302</b>, the IDE plug-in transmits the set-up characteristics to cloud controller <b>134</b> and cloud controller <b>134</b> receives such set-up characteristics in step <b>304</b>. In step <b>306</b>, the IDE plug-in <b>134</b> further submits the web application (or portions thereof) to cloud controller <b>134</b>, which, in turn, receives the submitted web application in step <b>308</b>. In one embodiment, the submitted web application takes the form of a Java web application archive or &#x201c;WAR&#x201d; file comprising dynamic (e.g., JavaServer Pages, etc.) web pages, static web pages, Java servlets, Java classes, and other property, configuration and resources files that make up a Java web application. It should recognized, however, that a web application may be submitted by IDE plug-in as any other type of package that is compatible with the runtime environment (e.g., Apache Tomcat application server, etc.) in which the web application is to be deployed. For example, in an alternative embodiment, the submitted web application comprise a plurality of files, similar to those in a WAR file, organized into a tape archive file or a &#x201c;tar&#x201d; file (also referred to as a tarball). Furthermore, it should be recognized that, rather than submitting the web application itself, alternative embodiments may submit web application in step <b>306</b> by providing a reference to download or otherwise access the web application, for example, by providing a uniform resource locator (&#x201c;URL&#x201d;), Git repository or other similar reference to web application. In such embodiments, the step of receiving the web application in step <b>308</b> would thus utilize the provided reference to fetch the web application. In step <b>310</b>, the IDE plug-in then transmits a request to cloud controller <b>134</b> to identify the available services in cloud computing environment <b>112</b>. For example, if the web application requires access to a database, the IDE plug-in may specifically request a list of database services (e.g., MySQL, Oracle, etc.) that are available in cloud computer environment <b>112</b>. Upon receiving such request, in step <b>312</b>, cloud controller <b>134</b> propagates its own request for service provisioning data relating to available services onto addressing and discovery layer <b>132</b>. Upon receipt by service provisioner <b>130</b> of this request in step <b>314</b>, the shim components of service provisioner <b>130</b> (see, e.g., <figref idref="DRAWINGS">FIGS. 2A and 2B</figref>) provide service provisioning data for their corresponding services via addressing and discovery layer <b>132</b> in step <b>316</b>.</p>
<p id="p-0024" num="0023">Upon receipt of such service provisioning data, in step <b>318</b>, cloud controller <b>134</b> is then able to transmit the identity of available services to IDE <b>142</b> as requested in step <b>310</b>. Upon receipt of the identity of available services, in step <b>320</b>, the IDE plug-in then determines and transmits a selection of desired available services to bind to the submitted web application. It should be recognized that such a selection process may, in certain embodiments, be automated, in accordance with pre-configured preferences set in the IDE, or may involve manual selection by developer <b>140</b> in other embodiments. Upon receipt of the selection of services, in step <b>322</b>, cloud controller <b>134</b> begins a &#x201c;staging process&#x201d; to stage, or otherwise modify the contents of the WAR file (or other package) of the submitted web application to bind the selected services to the web application. In one embodiment, this staging process involves unpacking the WAR file or extracting its constituent directory structure and files, accordingly inserting new files and/or modifying existing files to bind the selected services, and repacking the WAR file (e.g., or otherwise creating a new WAR file that replaces the previous WAR file). For example, in step <b>324</b>, cloud controller <b>134</b> and the shim components of service provisioner <b>130</b> for the selected services may exchange messages through addressing and discovery layer <b>132</b> to establish or otherwise obtain additional service provisioning data such as service login credentials (e.g., username/password combinations), hostname, network address and port number to access the service and any requisite software drivers/libraries that may be needed to enable the submitted web application to communicate with the services upon deployment. Cloud controller <b>134</b> is then able to incorporate such service provisioning data into the contents of the WAR file as part of the staging process. In one embodiment, set-up information identifying the application framework utilized to develop the submitted web application (i.e., that was received by cloud controller <b>134</b> in step <b>300</b>) enables cloud controller <b>134</b> to properly insert service provisioning data into the contents of the WAR file to bind selected services based upon a data organization structure of the WAR file that is imposed by the application framework (e.g., inserting additional environmental variables, entries in configuration files, additional system parameters and the like reflecting, for example, the hostname, network address, port number and login credentials for the service, etc.). For example, if the application framework is the Spring framework, cloud controller <b>134</b> inserts service provisioning data into the contents of the WAR file in accordance with how a Spring framework developed web application organizes its data within the WAR file. Once the contents of the WAR file have been modified to bind selected services to the submitted web application, in step <b>326</b>, cloud controller <b>134</b> generates a start script file that can be executed by a container VM to start a runtime environment and launch the submitted web application in the runtime environment. For example, if the WAR file is intended to be deployed in a runtime environment such as Apache Tomcat application server, the start script file may include commands to start Apache Tomcat and then start the servlet (or servlets) that comprises web application <b>125</b> (e.g., via a net start command, etc.).</p>
<p id="p-0025" num="0024">In step <b>328</b>, cloud controller <b>134</b> then creates a web application deployment package that can be unpacked by any available container VM. In one embodiment, such a web application deployment package is a &#x201c;tar&#x201d; file (also referred to as a tarball) that includes the start script file, an instance of the runtime environment (e.g., Apache Tomcat, etc.) to be installed and started in a container VM, and the WAR file for web application <b>125</b> (e.g., embedded in an appropriate directory within the directory structure of the instance of the runtime environment). Alternative embodiments may include further optimizations to streamline the communication (and utilized network bandwidth) between the IDE plug-in at enterprise <b>100</b> and cloud controller <b>134</b>. For example, in one embodiment, in step <b>302</b>, IDE plug-in may include as part of the transmission of set-up characteristics, a &#x201c;fingerprint&#x201d; list of hash values (e.g., SHA-1 values, etc.) and file sizes for each file in the WAR file. Cloud controller <b>134</b>, in turn, maintains its own table of fingerprint entries for hash value/file size pairs, with each entry associated with a stored file. Upon receipt of the list from the IDE plug-in, cloud controller <b>134</b> determines whether it already has any of the files in the WAR file by reviewing its table. In such manner, cloud controller <b>134</b> can specifically request only those files with associated hash values and file sizes for which cloud controller <b>134</b> does not have an entry in its table. Such an optimization can significantly reduce the amount of data transmitted by IDE plug-in to cloud controller <b>134</b>. For example, if only a few lines of code have been changed in a single library file of an already uploaded web application, the foregoing fingerprinting process enables the IDE plug-in to transmit only the library file itself, rather than the entire WAR file. Similarly, since different web applications often share common application framework files, the foregoing fingerprinting process can further significantly reduce the uploading times for different web applications. It should be recognized that although an IDE (or IDE plug-in) is described in <figref idref="DRAWINGS">FIG. 3</figref>, alternative embodiments may initiate the flow in <figref idref="DRAWINGS">FIG. 3</figref> performed by the IDE plug-in using other non-IDE environments. For example, developer <b>140</b> may interact with cloud controller <b>134</b> through a command line interface (&#x201c;CLI&#x201d;), other applications, or any other similar process or tool capable of initiating a network request (e.g., HTTP request) to communicate with cloud controller <b>134</b>. Furthermore, it should be recognized that embodiments may include a policy engine <b>144</b> that intercepts communication between IDE plug-in (or CLI or other similar tool) and cloud controller <b>134</b>, altering communications in order to adhere to set policies and/or performing steps on behalf of the IDE plug-in (e.g., selecting services in step <b>320</b> according to pre-defined policies, etc). It should also be recognized that functionalities described herein as provided in a plug-in IDE (or CLI or other application or tool) may be alternatively provided inside the cloud computing environment <b>112</b>, for example, in cloud controller <b>134</b>, in alternative embodiments. For example, in one alternative embodiment, determination of the application framework as part of the &#x201c;set-up&#x201d; characteristics in step <b>300</b> may be performed by cloud controller <b>134</b> upon its receipt of the web application.</p>
<p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. 4</figref> depicts container virtual machines for hosting a web application in a cloud computing architecture. Such container virtual machines are provided to a cloud computing architecture, for example, by virtualization platform <b>120</b>, as previously discussed in the context of <figref idref="DRAWINGS">FIG. 1A</figref>. Container VM <b>126</b><sub>1 </sub>is hosted on one of servers <b>116</b><sub>1 </sub>to <b>116</b><sub>n </sub>(e.g., server <b>116</b><sub>1 </sub>as depicted in <figref idref="DRAWINGS">FIG. 4</figref>) comprising a server grade hardware platform <b>402</b> such as an x86 architecture platform. Such a hardware platform may include a local storage unit <b>404</b>, such as a hard drive, network adapter (NIC <b>406</b>), system memory <b>408</b>, processor <b>410</b> and other I/O devices such as, for example and without limitation, a mouse and keyboard (not shown in <figref idref="DRAWINGS">FIG. 4</figref>).</p>
<p id="p-0027" num="0026">A virtualization software layer, also referred to hereinafter as hypervisor <b>412</b>, is installed on top of hardware platform <b>402</b>. Hypervisor <b>412</b> supports virtual machine execution space <b>414</b> within which multiple container VMs for hosting web applications may be concurrently instantiated and executed. As shown, virtual execution space <b>414</b> supports container VMs <b>126</b><sub>1 </sub>to <b>126</b><sub>x</sub>. For each of container VMs <b>126</b><sub>1 </sub>to <b>126</b><sub>x</sub>, hypervisor <b>412</b> manages a corresponding virtual hardware platform (i.e., virtual hardware platforms <b>416</b><sub>1</sub>-<b>416</b><sub>x</sub>) that includes emulated hardware such as virtual hard drive <b>418</b><sub>1</sub>, virtual NIC <b>420</b><sub>x</sub>, virtual CPU <b>422</b><sub>1 </sub>and RAM <b>424</b><sub>1 </sub>for VM <b>126</b><sub>1</sub>. For example, virtual hardware platform <b>416</b><sub>1 </sub>may function as an equivalent of a standard x86 hardware architecture such that any x86 supported operating system, e.g., Microsoft Windows&#xae;, Linux&#xae;, Solaris&#xae; x86, NetWare, FreeBSD, etc., may be installed as guest operating system <b>426</b> to execute web application <b>125</b> for container VM <b>126</b><sub>1</sub>, although it should be recognized that, in alternative, embodiments, each of container VMs <b>126</b><sub>1 </sub>to <b>126</b><sub>x </sub>may support the execution of multiple web applications rather than a single web application. Hypervisor <b>412</b> is responsible for transforming I/O requests from guest operating system <b>426</b> to virtual platform <b>416</b><sub>1 </sub>into corresponding requests to hardware platform <b>402</b>. In the embodiment of <figref idref="DRAWINGS">FIG. 4</figref>, guest operating system <b>426</b> of container VM <b>126</b><sub>1 </sub>supports the execution of a deployment agent <b>428</b>, which is a process or daemon that communicates (e.g., via addressing and discovery layer <b>132</b>) with cloud controller <b>134</b> to receive and unpack web application deployment packages, and with router <b>136</b> to provide network routing information for web applications that have been successfully deployed in container VM <b>126</b><sub>1</sub>. Deployment agent <b>428</b> is automatically launched upon the instantiation of a container VM in certain embodiments. Guest operating system <b>426</b> further supports the installation and execution of runtime environment <b>430</b> within which web application <b>125</b> runs. For example, in one embodiment, runtime environment <b>430</b> may be a Java application server (e.g., Apache Tomcat, etc.) that includes a Java virtual machine and various API libraries that support the deployment of Java-based web applications. As described in the context of <figref idref="DRAWINGS">FIG. 3</figref>, such a runtime environment <b>430</b> may be received by a container VM as part of a web application deployment package created by cloud controller <b>134</b>.</p>
<p id="p-0028" num="0027">It should be recognized that the various terms, layers and categorizations used to describe the virtualization components in <figref idref="DRAWINGS">FIG. 4</figref> may be referred to differently without departing from their functionality or the spirit or scope of the invention. For example, virtual hardware platforms <b>416</b><sub>1</sub>-<b>416</b><sub>x </sub>may be considered to be part of virtual machine monitors (VMM) <b>434</b><sub>1</sub>-<b>434</b><sub>x </sub>which implement the virtual system support needed to coordinate operations between hypervisor <b>412</b> and their respective container VMs. Alternatively, virtual hardware platforms <b>416</b><sub>1</sub>-<b>416</b><sub>x </sub>may also be considered to be separate from VMMs <b>434</b><sub>1</sub>-<b>434</b><sub>x</sub>, and VMMs <b>434</b><sub>1</sub>-<b>434</b><sub>x </sub>may be considered to be separate from hypervisor <b>412</b>. One example of hypervisor <b>412</b> that may be used is included as a component of VMware's ESX&#x2122; product, which is commercially available from VMware, Inc. It should further be recognized that other virtualized computer system architectures may be used consistent with the teachings herein, such as hosted virtual machine systems, where the hypervisor is designed to run on top of a host operating system. It should further be recognized, as previously discussed in the context of <figref idref="DRAWINGS">FIG. 1A</figref>, that virtualized platform <b>120</b> which provides container VMs, such as those in <figref idref="DRAWINGS">FIG. 4</figref>, may be supported by hardware resources <b>114</b> that comprise any number of physical computers and data storage systems in one or more data centers connected by networking, with each of the physical computers hosting one or more of container VMs <b>126</b><sub>1 </sub>to <b>126</b><sub>m</sub>, and possibly other VMs that run one or more processes carrying out the functions of other components of cloud computing environment <b>112</b>, such as router <b>136</b>, cloud controller <b>134</b>, heath manager <b>138</b>, various base services <b>128</b>, service provisioner <b>130</b>, address and discovery layer <b>132</b> and the like. As discussed in the context of <figref idref="DRAWINGS">FIG. 4</figref> with respect to container VMs, each VM supporting such other components is a virtual computer system that may have a guest operating system and one or more guest applications that can include any of the above processes.</p>
<p id="p-0029" num="0028"><figref idref="DRAWINGS">FIG. 5</figref> depicts a flow diagram for deploying a web application in a container virtual machine. The steps set forth in <figref idref="DRAWINGS">FIG. 5</figref> take place, for example, after cloud controller <b>134</b> has received and prepared web application <b>125</b> for deployment in accordance with the steps set forth in <figref idref="DRAWINGS">FIG. 3</figref>. In step <b>500</b>, cloud controller <b>134</b> receives a request from enterprise <b>100</b> (e.g., from developer <b>140</b>) to launch web application <b>125</b>. In step <b>502</b>, cloud controller <b>134</b> broadcasts a request (via addressing and discovery layer <b>132</b>) for an available container VM. In one embodiment, such a broadcast request may &#x201c;flavored&#x201d; by cloud controller <b>134</b> to request specific characteristics desired in a container VM, such as guest operating system type (e.g., Windows, Linux, MacOS, etc.), computing resource requirements (e.g., memory requirements, etc.) and the like. In step <b>504</b>, deployment agent <b>428</b> of container VM <b>126</b><sub>1 </sub>responds (via addressing and discovery layer <b>132</b>) indicating the availability of container VM <b>126</b><sub>1 </sub>to host web application <b>125</b>. In step <b>506</b>, cloud controller <b>134</b> (via addressing and discovery layer <b>132</b>) provides deployment agent <b>428</b> a link (e.g., URL) or otherwise establishes a connection with container VM <b>126</b><sub>1 </sub>to download a web application deployment package for web application <b>125</b> (e.g., as created in step <b>328</b> of <figref idref="DRAWINGS">FIG. 3</figref>), and in step <b>508</b>, deployment agent <b>428</b> fetches or otherwise receives the web application deployment package. In step <b>510</b>, deployment agent <b>428</b> unpacks the web application deployment package and installs runtime environment <b>430</b> (e.g., Apache Tomcat application server, etc), including loading the WAR file (or other package) associated web application <b>125</b> into the appropriate directory of the runtime environment. In step <b>512</b>, deployment agent <b>428</b> executes the start script file of the web application deployment package thereby spawning a new process in container VM <b>126</b><sub>1 </sub>that launches the runtime environment (e.g., Apache Tomcat) and starts web application <b>125</b> within the runtime environment. Once deployment agent <b>428</b> recognizes that web application <b>125</b> has successfully launched (e.g., by confirming the successful binding of a port number to web application <b>125</b> in one embodiment), deployment agent <b>428</b> broadcasts the hostname, network address information of container VM <b>126</b><sub>1 </sub>and the bound port number of deployed web application <b>125</b>, in step <b>514</b>, through addressing and discovery layer <b>132</b>. In turn, router <b>136</b> retrieves the broadcast hostname, network address information and bound port number though the addressing and discovery layer <b>132</b> in step <b>516</b> and updates its internal routing table in step <b>518</b>, thereby enabling router <b>136</b> to properly route URL requests received from enterprise customer <b>144</b> for web application <b>125</b> to container VM <b>126</b><sub>1</sub>. It should be recognized that the process of dynamically updating routing information in router <b>136</b> upon successful deployment of a web application through steps <b>514</b> to <b>518</b> provides cloud computing environment <b>112</b> flexibility to more easily migrate, move or otherwise re-deploy web applications to different containers VM <b>126</b><sub>1 </sub>to <b>126</b><sub>m </sub>for any of a number of reasons (e.g., during hardware failures, for load balancing purposes, etc.). For example, in one exemplary scenario, health manager <b>138</b> may recognize that web application <b>125</b> has stopped running because server <b>116</b><sub>1 </sub>that hosts container VM <b>126</b><sub>1 </sub>in which web application <b>125</b> has been deployed has suffered a hardware failure. Upon such recognition, health manager <b>138</b> may initiate a request to cloud controller <b>134</b> to re-deploy web application <b>125</b> in a different container VM running on a different server. Once web application <b>125</b> has been successfully re-deployed by cloud controller <b>134</b>, as a result of steps <b>514</b> to <b>518</b>, router <b>136</b> will be automatically updated with new routing information to properly route requests to web application <b>125</b> which is now deployed on a different container VM on a different server (and therefore is associated with new network routing information). It should be recognized that although the foregoing description utilizes hostnames, network addresses and port numbers to generally describe network address information for a web application, any type of network information may be utilized as network address information in embodiments, depending upon the structure of the connected network and communications protocols implemented by cloud computing environment <b>112</b>. Additionally, in step <b>520</b>, deployment agent <b>428</b> also identifies a process identifier for the deployed web application <b>125</b> and generates a stop script file, in the event that cloud controller <b>134</b> receives a command to stop web application <b>125</b> in the future (e.g., by request of administrator <b>146</b>, etc.).</p>
<p id="p-0030" num="0029">It should be recognized that various modifications and changes may be made to the specific embodiments described herein without departing from the broader spirit and scope of the invention as set forth in the appended claims. For example, while the foregoing description has discussed embodiments using web applications or Internet applications, it should be recognized that any network utilizing application can leverage the techniques disclosed herein, and as such, &#x201c;web application&#x201d; as used herein shall be interpreted to include any type of client-server based application that employs network based communications. Furthermore, although the foregoing embodiments have focused on the use of container VMs to host deployed web applications, it should be recognized that any &#x201c;application container&#x201d; may be used to host web applications, including such container VMs, processes in virtual machines, kernel level containers, processes in traditional non-virtualized operating systems and any other execution environment that provides an isolated environment capable of running application level code. Similarly, while the various components of cloud computing environment <b>112</b> have been generally described as being implemented in one or more virtual machines (e.g., for load balancing and scalability purposes), it should be recognized that any type of &#x201c;application container&#x201d; (as previously discussed above) can also implement such components, including, for example, traditional non-virtualized computing environment background processes, threads or daemons. Furthermore, any combination of different types of &#x201c;application containers&#x201d; to host web applications and implement other components (e.g., cloud controller <b>134</b>, router <b>136</b>, health manager <b>138</b>, base services <b>128</b>, service provisioner <b>130</b>, addressing and discovery layer <b>132</b>, etc.) can comprise any particular cloud computing environment <b>112</b> implementation. It should further be recognized that multiple instances of the various components of cloud computing environment <b>112</b> (e.g., cloud controller <b>134</b>, router <b>136</b>, health monitor <b>138</b>, service provisioner <b>130</b>, etc.) may be implemented in alternative embodiments, for example, for scalability purposes.</p>
<p id="p-0031" num="0030">The various embodiments described herein may employ various computer-implemented operations involving data stored in computer systems. For example, these operations may require physical manipulation of physical quantities usually, though not necessarily, these quantities may take the form of electrical or magnetic signals where they, or representations of them, are capable of being stored, transferred, combined, compared, or otherwise manipulated. Further, such manipulations are often referred to in terms, such as producing, identifying, determining, or comparing. Any operations described herein that form part of one or more embodiments of the invention may be useful machine operations. In addition, one or more embodiments of the invention also relate to a device or an apparatus for performing these operations. The apparatus may be specially constructed for specific required purposes, or it may be a general purpose computer selectively activated or configured by a computer program stored in the computer. In particular, various general purpose machines may be used with computer programs written in accordance with the teachings herein, or it may be more convenient to construct a more specialized apparatus to perform the required operations.</p>
<p id="p-0032" num="0031">The various embodiments described herein may be practiced with other computer system configurations including hand-held devices, microprocessor systems, microprocessor-based or programmable consumer electronics, minicomputers, mainframe computers, and the like.</p>
<p id="p-0033" num="0032">One or more embodiments of the present invention may be implemented as one or more computer programs or as one or more computer program modules embodied in one or more computer readable media. The term computer readable medium refers to any data storage device that can store data which can thereafter be input to a computer system computer readable media may be based on any existing or subsequently developed technology for embodying computer programs in a manner that enables them to be read by a computer. Examples of a computer readable medium include a hard drive, network attached storage (NAS), read-only memory, random-access memory (e.g., a flash memory device), a CD (Compact Discs) CD-ROM, a CD-R, or a CD-RW, a DVD (Digital Versatile Disc), a magnetic tape, and other optical and non-optical data storage devices. The computer readable medium can also be distributed over a network coupled computer system so that the computer readable code is stored and executed in a distributed fashion.</p>
<p id="p-0034" num="0033">Although one or more embodiments of the present invention have been described in some detail for clarity of understanding, it will be apparent that certain changes and modifications may be made within the scope of the claims. Accordingly, the described embodiments are to be considered as illustrative and not restrictive, and the scope of the claims is not to be limited to details given herein, but may be modified within the scope and equivalents of the claims. In the claims, elements and/or steps do not imply any particular order of operation, unless explicitly stated in the claims.</p>
<p id="p-0035" num="0034">Plural instances may be provided for components, operations or structures described herein as a single instance. Finally, boundaries between various components, operations and data stores are somewhat arbitrary, and particular operations are illustrated in the context of specific illustrative configurations. Other allocations of functionality are envisioned and may fall within the scope of the invention(s). In general, structures and functionality presented as separate components in exemplary configurations may be implemented as a combined structure or component. Similarly, structures and functionality presented as a single component may be implemented as separate components. These and other variations, modifications, additions, and improvements may fall within the scope of the appended claims(s).</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>We claim:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A method for deploying a web application in a hosting environment, wherein the web application is developed using one of a plurality of application frameworks and is configured to execute within one of a plurality of runtime environments, the method, by operation of a computer processor, comprising the steps of:
<claim-text>receiving the web application in the form of a package compatible with the runtime environment;</claim-text>
<claim-text>determining a selection of available services accessible by the hosting environment to bind to the web application;</claim-text>
<claim-text>receiving service provisioning data for each of the available services, wherein the service provisioning data for each of the available services comprises network addressing information relating to the corresponding available service;</claim-text>
<claim-text>inserting the received service provisioning data for each of the available services into the package in accordance with a data organization structure imposed by the application framework on the package, thereby binding the available service to the web application;</claim-text>
<claim-text>generating a start script for starting the runtime environment and launching the web application;</claim-text>
<claim-text>packaging the runtime environment, start script and package into a web application deployment package;</claim-text>
<claim-text>fetching the web application deployment package for an application container indicating availability to deploy the web application;</claim-text>
<claim-text>unpacking the web application deployment package into the application container, thereby installing the runtime environment and loading the package into the runtime environment;</claim-text>
<claim-text>executing the start script in the application container to start the runtime environment and launch the web application; and</claim-text>
<claim-text>notifying a router, upon a successful launch of the web application, of network address information for the application container, thereby enabling the router to route web browser requests for the web application to the application container.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein service provisioning data for each of the available services further comprises login credentials to log into the corresponding available service.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein service provisioning data for each of the available services is received from a shim component configured to communicate with the corresponding available service.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the package is a WAR file, the web application deployment package is a tar file and the application container is a virtual machine.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising the step of generating a stop script file for stopping the launched web application.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising the steps of receiving a request to launch the web application and broadcasting a request for an available application container to deploy the web application.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the receiving, determining, receiving inserting, generating and packaging steps are executed by a cloud controller process in the hosting environment, and the fetching, unpacking, executing and notifying steps are executed by a deployment agent process running in the application container.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. A non-transitory computer-readable storage medium including instructions that, when executed on a computer processor, causes the computer processor to prepare a web application for deployment in a hosting environment, wherein the web application is developed using one of a plurality of application frameworks and is configured to execute within one of a plurality of runtime environments, by performing the steps of:
<claim-text>receiving the web application in the form of a package compatible with the runtime environment;</claim-text>
<claim-text>determining a selection of available services accessible by the hosting environment to bind to the web application;</claim-text>
<claim-text>receiving service provisioning data for each of the available services, wherein the service provisioning data for each of the available services comprises network addressing information relating to the corresponding available service;</claim-text>
<claim-text>inserting the received service provisioning data for each of the available services into the package in accordance with a data organization structure imposed by the application framework on the package, thereby binding the available service to the web application;</claim-text>
<claim-text>generating a start script for starting the runtime environment and launching the web application; and</claim-text>
<claim-text>packaging the runtime environment, start script and package into a web application deployment package.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The non-transitory computer-readable storage medium of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein service provisioning data for each of the available services further comprises login credentials to log into the corresponding available service.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The non-transitory computer-readable storage medium of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein service provisioning data for each of the available services is received from a shim component configured to communicate with the corresponding available service.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The non-transitory computer-readable storage medium of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the package is a WAR file and the web application deployment package is a tape archive file.</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The non-transitory computer-readable storage medium of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the computer processor is a virtual processor of a virtual machine running a cloud controller component of the hosting environment.</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The non-transitory computer-readable storage medium of <claim-ref idref="CLM-00008">claim 8</claim-ref>, further including instructions that, when executed on a computer processor, causes the computer processor to deploy a web application in the hosting environment by performing the steps of:
<claim-text>fetching the web application deployment package for an application container indicating availability to deploy the web application;</claim-text>
<claim-text>unpacking the web application deployment package into the application container, thereby installing the runtime environment and loading the package into the runtime environment;</claim-text>
<claim-text>executing the start script in the application container to start the runtime environment and launch the web application; and</claim-text>
<claim-text>notifying a router, upon a successful launch of the web application, of network address information for the application container, thereby enabling the router to route web browser requests for the web application to the application container.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The non-transitory computer-readable storage medium of <claim-ref idref="CLM-00013">claim 13</claim-ref>, the application container is a second virtual machine, wherein the computer processor is a virtual processor of the second virtual machine, and the fetching, unpacking, executing and notifying steps are performed by a deployment agent process running in the second virtual machine.</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. A cloud computing platform for deploying a web application, wherein the web application is developed using one of a plurality of application frameworks and is configured to execute within one of a plurality of runtime environments, the cloud computing platform comprising:
<claim-text>a hardware infrastructure platform comprising a plurality of servers, wherein each of the plurality of servers supports the running of virtual machines; and</claim-text>
<claim-text>a cloud computing environment implemented on a plurality of virtual machines running on the servers, the cloud computing environment comprising:
<claim-text>a router component configured to receive and route requests to access the web application;</claim-text>
<claim-text>a cloud controller component configured to perform the steps of receiving the web application in the form of a package compatible with the runtime environment, inserting service provisioning data for a selection the available services into the package in accordance with a data organization structure imposed by the application framework on the package to bind the available services to the web application, generating a start script for starting the runtime environment and launching the web application; and packaging the runtime environment, start script and package into a web application deployment package; and</claim-text>
<claim-text>a container virtual machine comprising a deployment agent process configured to perform the steps of fetching the web application deployment package for the container virtual machine, unpacking the web application deployment package into the container virtual machine, thereby installing the runtime environment and loading the package into the runtime environment, executing the start script in the container virtual machine to start the runtime environment and launch the web application, and notifying the router component, upon a successful launch of the web application, of network address information for the container virtual machine and a port number bound to the launched web application, thereby enabling the router component to route request to access the web application to the container virtual machine.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The cloud computing platform of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the cloud computing environment further comprises an addressing and discovery component configured to broadcast messages transmitted by components of the cloud computing environment to other components of the cloud computing environment.</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The cloud computing platform of <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein the hardware infrastructure platform further comprises an orchestration component configured to receive broadcast messages from the addressing and discovery component and instantiate additional container virtual machines for the cloud computing environment upon receiving a broadcast message through the addressing and discovery component requesting additional container virtual machines.</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The cloud computing platform of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the cloud computing environment further comprises a plurality of base services available for access by the web application and a service provisioner component comprising a plurality of shim components for each of the plurality of base services.</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. The cloud computing platform of <claim-ref idref="CLM-00018">claim 18</claim-ref>, wherein each shim component is configured to communicate with its corresponding base service to obtain the service provisioning data for the cloud controller component.</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. The cloud computing platform of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the cloud computing environment further comprises a health manager process that monitors the health of other components in the cloud computing environment. </claim-text>
</claim>
</claims>
</us-patent-grant>

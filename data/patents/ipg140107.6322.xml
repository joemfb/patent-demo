<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08627478-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08627478</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>13887610</doc-number>
<date>20130506</date>
</document-id>
</application-reference>
<us-application-series-code>13</us-application-series-code>
<priority-claims>
<priority-claim sequence="01" kind="national">
<country>KR</country>
<doc-number>10-2012-0050156</doc-number>
<date>20120511</date>
</priority-claim>
</priority-claims>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>H</section>
<class>04</class>
<subclass>L</subclass>
<main-group>9</main-group>
<subgroup>00</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>726 24</main-classification>
<further-classification>717127</further-classification>
</classification-national>
<invention-title id="d2e61">Method and apparatus for inspecting non-portable executable files</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>7340777</doc-number>
<kind>B1</kind>
<name>Szor</name>
<date>20080300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>726 26</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>8166545</doc-number>
<kind>B2</kind>
<name>Kim et al.</name>
<date>20120400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>2009/0126012</doc-number>
<kind>A1</kind>
<name>Treadwell et al.</name>
<date>20090500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>726 22</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>2009/0254992</doc-number>
<kind>A1</kind>
<name>Schultz et al.</name>
<date>20091000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>726 24</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>KR</country>
<doc-number>1020040098902</doc-number>
<date>20041100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>KR</country>
<doc-number>100850361</doc-number>
<date>20080700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>KR</country>
<doc-number>1020100005518</doc-number>
<date>20100100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>KR</country>
<doc-number>1020110046850</doc-number>
<date>20110500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>WO</country>
<doc-number>WO2012091488</doc-number>
<date>20120500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
</us-citation>
<us-citation>
<nplcit num="00010">
<othercit>Wei Yan, &#x201c;CAS: A framework of online detecting advance malware families for cloud-based Security&#x201d;, 2012, IEEE, pp. 220-225.</othercit>
</nplcit>
<category>cited by examiner</category>
</us-citation>
<us-citation>
<nplcit num="00011">
<othercit>Ding et al., &#x201c;Heap Taichi: Exploiting Memory Allocation Granularity in Heap-Spraying Attacks&#x201d;, Dec. 2010, ACM, pp. 327-336.</othercit>
</nplcit>
<category>cited by examiner</category>
</us-citation>
</us-references-cited>
<number-of-claims>20</number-of-claims>
<us-exemplary-claim>12</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>726 24</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>717127</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>4</number-of-drawing-sheets>
<number-of-figures>4</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20130305373</doc-number>
<kind>A1</kind>
<date>20131114</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only" applicant-authority-category="assignee">
<addressbook>
<orgname>Ahnlab, Inc.</orgname>
<address>
<city>Gyeonggi-do</city>
<country>KR</country>
</address>
</addressbook>
<residence>
<country>KR</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Lim</last-name>
<first-name>Cha Sung</first-name>
<address>
<city>Gyeonggi-do</city>
<country>KR</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Lee</last-name>
<first-name>Ju Seok</first-name>
<address>
<city>Gangwon-do</city>
<country>KR</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Bacon &#x26; Thomas, PLLC</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>Ahnlab, Inc.</orgname>
<role>03</role>
<address>
<country>KR</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Smithers</last-name>
<first-name>Matthew</first-name>
<department>2437</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">An apparatus for inspecting a non-PE file includes a data loading unit configured to load candidate malicious address information related to a malicious code of the non-PE file; and a program link unit configured to acquire normal address range information of a module being loaded on a memory when an application program adapted for the non-PE file is executed and set up a candidate malicious address corresponding to the candidate malicious address information to be a breakpoint of the application program. Further, the apparatus includes a malicious code determination unit configured to determine whether a next execution address is within the normal address range information when there occurs an event derived from the breakpoint.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="205.32mm" wi="146.13mm" file="US08627478-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="151.21mm" wi="161.12mm" file="US08627478-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="222.08mm" wi="158.83mm" file="US08627478-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="220.13mm" wi="172.30mm" file="US08627478-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="212.85mm" wi="168.66mm" file="US08627478-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">FIELD OF THE INVENTION</heading>
<p id="p-0002" num="0001">The present invention relates to an apparatus and method for inspecting non-PE (non-Portable Executable) files. More particularly, the present invention relates to an apparatus and method for inspecting whether non-PE files contain a malicious shell code by using candidate malicious address information related to the malicious code of the non-PE files, and a computer-readable storage medium including computer executable instructions to perform the method.</p>
<heading id="h-0002" level="1">BACKGROUND OF THE INVENTION</heading>
<p id="p-0003" num="0002">As is well known, with the spread of the Internet and wireless communication devices, routes of infection of malicious codes are becoming more diverse and the extent of damage caused by the malicious codes increases every year. The term &#x201c;malicious codes&#x201d; used herein refers to as the software that has been intentionally produced to perform vicious behavior contrary to the intention and interests of a user, such as destroying the computer system and leaking information. There are various kinds of malicious codes such as virus, worms, Trojan, backdoor, logic bomb, trap doors, etc. used as a hacking tool, vicious spyware, vicious ad ware and the like. The malicious codes, through self-replication or automatic breeding, cause problems such as the leakage of personal information such as a password and an identifier (ID) of a user, system control, change/deletion of files, destruction of the system, denial of service of application/system, leakage of core data and installation of the other hacking programs, which results in extremely diverse and serious damages.</p>
<p id="p-0004" num="0003">On the other hand, an APT (Advanced Persistent Threat), which is one of the issues in recent, persistently utilizes various types of malicious codes with high attacking techniques in order to steal information targeted by an attacker. Particularly, the APT attack is nearly not detected in an early invasion phase, and it typically uses non-PE files including the malicious codes. It is because that the programs for running the non-PE files, such as word-processors or imaging programs, essentially have some degree of security vulnerability and that variant malicious codes can be easily made with the change in the non-PE files if the malicious codes are included in the non-PE files.</p>
<p id="p-0005" num="0004">Owing to the above properties, there are many cases where the APT attack uses a malicious non-PE file exploit to achieve the Zero-day attack. For example, if a recipient inadvertently opens the malicious non-PE file attached to email, the computer system of the recipient is then infected with a malicious file, such that the malicious file can attack other computer systems and invade the computer systems to steal key data. In addition, since the non-PE file has a variety of formats, needed are the substantial amount of time and effort that an expert examines whether the non-PE file is malicious and analyzes the vicious activities done by the non-PE file. Moreover, from the standpoint of almost all the conventional techniques, it is not easy to find a countermeasure against some variant malware deformed and newly created even for the analysis duration.</p>
<p id="p-0006" num="0005">A study of a malware treating system (or vaccine program) has continued in order to detect and treat the malicious codes. Most malware treating systems (vaccine program), known so far, are made to detect a malicious code within an executable file.</p>
<p id="p-0007" num="0006">As such, the reason why the malware treating system detects the malicious code from the executable file results from the fact that most malicious codes take a type of executable files in a particular system so that it can be run on the particular system. For example, file extensions of the malicious code that are required to be executed in the Windows system are exe, cpl, ocx, dll, vxd, sys, scr, drv, etc.</p>
<p id="p-0008" num="0007">However, a malicious shell code, which attracts attention in recent, is inserted in different files having a format of a non-PE file so that it can bypass the malware treating system and the expert. By way of example, the file extensions of the non-PE file taken by the malicious code in the Windows system are HWP, DOG, XLS, JS, HTML, JPG, etc.</p>
<p id="p-0009" num="0008">In order to inspect whether the non-PE file is malicious, the expert needs to determine whether every file has a malicious code. In particular, for a non-PE file employing the exploit, the substantial amount of time and effort are needed that an expert examines whether the non-PE file is malicious and analyzes the vicious activities. Moreover, in view of almost all the conventional techniques, it is nearly impossible to find a countermeasure against some variant malware deformed and newly created even for the analysis duration.</p>
<p id="p-0010" num="0009">Therefore, as described above, there strongly needs the development of techniques to defense a situation employing the malicious non-executable exploit in order for achieving an APT attack scenario.</p>
<p id="p-0011" num="0010">A malicious code inspecting method of a related art includes a signature-based malicious code inspecting method. However, the signature-based method cannot properly defense the Zero-day exploit for a large amount of signature databases is necessary to identify different types of attacks.</p>
<p id="p-0012" num="0011">Another method for detecting the malicious code within the non-PE file includes a method to detect behaviors that are varied depending on how an attacker designs the shell code contained in the malicious non-PE file. However, this method requires obtaining information such as design methods for different attackers, which leads to a false positive and false negative.</p>
<heading id="h-0003" level="1">SUMMARY OF THE INVENTION</heading>
<p id="p-0013" num="0012">In view of the above, the present invention provides an apparatus and method for inspecting non-PE files, which is capable of determining whether the non-PE files contains a malicious shell code by using candidate malicious address information related to the malicious code of the non-PE file.</p>
<p id="p-0014" num="0013">Further, the present invention provides an apparatus and method for inspecting non-PE files, which is capable of detecting malicious non-PE files in bulk trying the same exploit by using a Relative Virtual Address (RVA) of a module which has a former example where an instruction execution address points out a malicious code area.</p>
<p id="p-0015" num="0014">Further, the present invention provides an apparatus and method for inspecting non-PE files, which is capable of effectively defending an APT attack that uses the Zero-day exploit utilizing a malicious non-PE file.</p>
<p id="p-0016" num="0015">The present invention will not be limited to the above, and another object, which has not been described, will be clearly understood to those skilled in the art from the following description.</p>
<p id="p-0017" num="0016">In accordance with a first aspect of the present invention, there is provided an apparatus for inspecting a non-PE file. The apparatus includes a data loading unit configured to load candidate malicious address information related to a malicious code of the non-PE file; a program link unit configured to acquire normal address range information of a module being loaded on a memory when an application program adapted for the non-PE file is executed and set up a candidate malicious address corresponding to the candidate malicious address information to be a breakpoint of the application program; and a malicious code determination unit configured to determine whether a next execution address is within the normal address range information when there occurs an event derived from the breakpoint.</p>
<p id="p-0018" num="0017">Further, when it is determined that the execution address is not within the normal address range information, the malicious code determination unit may be configured to determine that the non-PE file is malicious.</p>
<p id="p-0019" num="0018">Further, when it is determined that the execution address is not within the normal address range information, the malicious code determination unit may be configured to check whether a memory area pointed out by the execution address has an execution attribute and may determine whether the non-PE file is malicious depending the check result.</p>
<p id="p-0020" num="0019">Further, when the memory area pointed out by the execution address has not the execution attribute, the malicious code determination unit may be configured to check whether there occurs an abnormal event due to the execution of a code stored in the memory area pointed out by the execution address and may determine whether the non-PE file is malicious depending on the check result.</p>
<p id="p-0021" num="0020">Further, when the memory area pointed out by the execution address has the execution attribute, the malicious code determination unit may be configured to determine that the PE-file is normal.</p>
<p id="p-0022" num="0021">Further, the apparatus may further comprise a database unit that stores a set of the candidate malicious address information, wherein the candidate malicious address information may include information on a relative virtual address (RVA) of a module having a former case where an instruction execution address has pointed out a malicious shell code area.</p>
<p id="p-0023" num="0022">Further, the apparatus may further comprise a malicious code extraction unit configured to extract the malicious code of the non-PE file that has been determined as the malicious file in a format of an execution file or an executable file.</p>
<p id="p-0024" num="0023">The apparatus may further comprise a cause analysis unit configured to analyze the occurrence reason of an exploit by comparing the RVA with vulnerability information.</p>
<p id="p-0025" num="0024">Further, the normal address range information may comprise a start address and an end address of a module loaded with the execution of the application program.</p>
<p id="p-0026" num="0025">Further, the execution address may be obtained from an EIP (Extended Instruction Pointer) register of a central processing unit.</p>
<p id="p-0027" num="0026">Further, the malicious code determination unit may be configured to store an execution address of an instruction executed immediately before the execution address beyond the normal address range information.</p>
<p id="p-0028" num="0027">In accordance with a second aspect of the present invention, there is provided a method for inspecting a non-PE file. The method includes loading candidate malicious address information related to a malicious code of the non-PE file; acquiring normal address range information of a module being loaded on a memory when an application program adapted for the non-PE file is executed; setting up a candidate malicious address corresponding to the candidate malicious address information to be a breakpoint of the application program; and determining whether a next execution address is within the normal address range information when there occurs an event derived from the breakpoint.</p>
<p id="p-0029" num="0028">Further, said determining whether a next execution address is within the normal address range information may comprise when it is determined that the next execution address is not within the normal address range information, determining that the non-PE file is malicious.</p>
<p id="p-0030" num="0029">Further, said determining whether a next execution address is within the normal address range information may comprise: when it is determined that the execution address is not within the normal address range information, determining whether a memory area pointed out by the execution address has an execution attribute; and determining whether the non-PE file is malicious depending on whether the memory area pointed out by the execution address has an execution attribute.</p>
<p id="p-0031" num="0030">Further, said determining whether a memory area pointed out by the execution address has an execution attribute may comprise: when the memory area pointed out by the execution address has not the execution attribute, checking whether there occurs an abnormal event due to the execution of a code stored in the memory area pointed out by the execution address; and when there occurs an abnormal event, determining that the non-PE file is malicious.</p>
<p id="p-0032" num="0031">Further, the method may further comprise storing a set of the candidate malicious address information, wherein the candidate malicious address information includes information on a relative virtual address (RVA) of a module having a former case where an instruction execution address has pointed out a malicious shell code area.</p>
<p id="p-0033" num="0032">Further, the method may further comprise extracting the malicious code of the non-PE file that has been determined as the malicious file in a form of an execution file or an executable file.</p>
<p id="p-0034" num="0033">Further, the normal address range information may comprise a start address and an end address of a module loaded with the execution of the application program.</p>
<p id="p-0035" num="0034">Further, the execution address may be obtained from an EIP (Extended Instruction Pointer) register of a central processing unit.</p>
<p id="p-0036" num="0035">Further, said determining whether a next execution address is within the normal address range information may comprise determining whether the execution address is within the normal address range information depending on a kind of the instruction of the application program under execution.</p>
<p id="p-0037" num="0036">In accordance with the exemplary embodiment of the present invention, it is possible to detect a number of malicious non-PE files in bulk trying the same exploit using a particular RVA to do a malicious act by storing a set of relative virtual addresses (RVAs) of a module having a former case where an execution address of an instruction being loaded with the execution of a program adapted for the non-PE file has pointed out a malicious code area, loading an RVA corresponding to a format of the non-PE file, setting up a breakpoint to the RVA, and determining whether the non-PE file is malicious when there occurs a breakpoint even.</p>
<p id="p-0038" num="0037">Further, it is possible quickly to detect all sorts of variant malicious non-PE files since the detection is achieve only through the determination on whether to move from a particular RVA to a malicious shell code by setting up a breakpoint to an RVA of a module having a former case where an instruction execution address have pointed out a malicious code area and checking whether a next execution file points out a malicious shell code out of a normal address range to inspect whether the non-PE file is a malicious file containing the malicious shell code.</p>
<p id="p-0039" num="0038">In addition, it is possible to effectively defending an APT attack using the Zero-day exploit utilizing a malicious non-PE file.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0040" num="0039">The above and other objects and features of the present invention will become apparent from the following description of the embodiments given in conjunction with the accompanying drawings, in which:</p>
<p id="p-0041" num="0040"><figref idref="DRAWINGS">FIG. 1</figref> is a block diagram of an apparatus for inspecting non-PE files in accordance with an exemplary embodiment of the present invention;</p>
<p id="p-0042" num="0041"><figref idref="DRAWINGS">FIG. 2</figref> is a flow chart illustrating a method for inspecting non-PE files in accordance with an exemplary embodiment of the present invention;</p>
<p id="p-0043" num="0042"><figref idref="DRAWINGS">FIG. 3</figref> illustrates a conceptual diagram to help understand the method of inspecting non-PE files in accordance with an exemplary embodiment of the present invention; and</p>
<p id="p-0044" num="0043"><figref idref="DRAWINGS">FIG. 4</figref> is a flowchart illustrating a process performed by the non-PE file inspection apparatus in a case where an execution address points out an area beyond normal address range information in accordance with another exemplary embodiment of the present invention.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0005" level="1">DETAILED DESCRIPTION OF THE EMBODIMENTS</heading>
<p id="p-0045" num="0044">The advantages and features of embodiments and methods of accomplishing the present invention will be clearly understood from the following described description of the embodiments taken in conjunction with the accompanying drawings. However, the present invention is not limited to those embodiments and may be implemented in various forms. It should be noted that the embodiments are provided to make a full disclosure and also to allow those skilled in the art to know the full scope of the present invention. Therefore, the present invention will be defined only by the scope of the appended claims.</p>
<p id="p-0046" num="0045">In the following description, well-known functions or constitutions will not be described in detail if they would unnecessarily obscure the embodiments of the invention. Further, the terminologies to be described below are defined in consideration of functions in the invention and may vary depending on a user's or operator's intention or practice. Accordingly, the definition may be made on a basis of the content throughout the specification.</p>
<p id="p-0047" num="0046">The term &#x201c;a non-PE file&#x201d; used herein refers to as a file, having a concept opposite to an execution file or an executable file, which cannot be run by itself. For example, the non-PE file may include, but not limited to, a document file such as a Hanword file, MS-word file, an image file including as a JPEG file, a moving image file, a JavaScript file, an HTML file and the like.</p>
<p id="p-0048" num="0047">A malicious non-PE file containing a malicious code may be used in an APT (Advanced Persistent Threat) attack and the like via a way of being attached to an e-mail or of transferring the malicious non-PE file itself through a network. In these cases, the malicious code may be a shell code, which may be executed when a program having the type (or format) of the non-PE file is executed. The non-PE file, for example, may include, files having a file extension such as hwp, doc, pdf, jpg, js, html and the like.</p>
<p id="p-0049" num="0048">In particular, the apparatus and method for inspecting a non-PE file obtains in advance an RVA (Relative Virtual Address) of a module having a former case where an instruction execution address has pointed out a malicious shell code area and stores the obtained RVA in a data base unit so that it can be utilized in the inspection of the non-PE file, which results in achieving a speedy and effective detection of a malicious non-PE file.</p>
<p id="p-0050" num="0049">In relation to the above, it will be explained on a process of obtaining the RAV as follows.</p>
<p id="p-0051" num="0050">A malicious non-PE file may include a malicious shell code, and the malicious non-PE file including the malicious codes move to a malicious code area by any means when an instruction is executed. The movement to the malicious code area may be predicted through the identification of the execution address of the instruction. For example, an execution address of an instruction to be executed in a next sequence can be obtained by identifying a value stored in an EIP (Extended Instruction Pointer) register, which is one of a plurality of registers of a central processing unit (CPU). Therefore, it can be classified or determined that the malicious file having the instruction moving to the malicious shell code area beyond a normal address range is malicious. Further, by using this information, it is possible to obtain in advance a virtual address of a module having a former case that a command execution address has pointed out the malicious shell code area. In this regard, since the value of the virtual address may vary with the change in a running environment such as the change in hardware, it is necessary to convert the virtual address into a relative virtual address (RVA) and thus the RVA will be used in inspecting whether the non-PE file is malicious in an exemplary embodiment of the present invention.</p>
<p id="p-0052" num="0051">Hereinafter, the exemplary embodiments of the present invention will be described in detail with reference to the accompanying drawings.</p>
<p id="p-0053" num="0052"><figref idref="DRAWINGS">FIG. 1</figref> is a block diagram of an apparatus for inspecting non-PE files in accordance with an exemplary embodiment of the present invention.</p>
<p id="p-0054" num="0053">As illustrated in <figref idref="DRAWINGS">FIG. 1</figref>, the apparatus <b>100</b> for inspecting non-PE files may include a data loading unit <b>110</b>, a program link unit <b>120</b>, a malicious code determination unit <b>130</b>, a malicious shell code extraction unit <b>140</b>, a cause analysis unit <b>150</b>, a database unit <b>160</b> and a memory <b>170</b>.</p>
<p id="p-0055" num="0054">The database unit <b>160</b> stores a set of RVAs of modules having a former example where an instruction execution address has pointed out a malicious shell code area, wherein the RVA information will be used as a candidate malicious address. In other words, the term &#x201c;a set of RVAs&#x201d; used herein refers to as a set of RVAs of modules having a former example that have tried to move a malicious cell code area. In this case, the modules may be dynamic linking libraries (DLL).</p>
<p id="p-0056" num="0055">Also, the database unit the database unit <b>160</b> stores vulnerability information mapped with the respective RVAs. The vulnerability information may be used to perceive the occurrence reason of the exploit having a particular RVA by comparing to the RVAs. In accordance with an exemplary embodiment of the present invention, the database unit <b>160</b> may store a set of plural candidate malicious address information that are different by file formats of the non-PE files.</p>
<p id="p-0057" num="0056">The data loading unit <b>110</b> loads the candidate malicious address information based on the RVAs from the database unit <b>160</b> when an inspection is made on whether the non-PE file is malicious. In accordance with an exemplary embodiment, the data loading unit <b>110</b> checks the file format of the non-PE file and then loads the candidate malicious address information that meets the file format of the non-PE file from among the plurality of sets of the candidate malicious address information in order for setting a breakpoint.</p>
<p id="p-0058" num="0057">When an application program adapted for the non-PE file to be inspected is executed, the program link unit <b>120</b> acquires normal address range information specified by a start address and an end address and sets up a candidate malicious address corresponding to the candidate malicious address information in accordance with the candidate malicious address information loaded by the data loading unit <b>110</b> to be a breakpoint of an application program. In accordance with an exemplary embodiment, the program link unit <b>120</b> may directly execute the application program or may request a separate program executor (not shown) to execute the application program.</p>
<p id="p-0059" num="0058">The malicious code determination unit <b>130</b> determines whether a next execution address is within the normal address range information when there occurs an event derived from the breakpoint that is set up by the program link unit <b>120</b>. When it is determined that the next execution address falls within the normal address range information, the malicious code determination unit <b>130</b> determines that the non-PE file is normal. Otherwise, when the next execution address is out of the normal address range information, the malicious code determination unit <b>130</b> determines that the non-PE file is malicious. In this regard, the malicious code determination unit <b>130</b> may utilize a next execution address stored in an EIP (Extended Instruction Pointer) register in a central processing unit (CPU). In accordance with an exemplary embodiment, the malicious code determination unit <b>130</b> determines whether a next execution address is within the normal address range information in one step ahead depending on a kind of instruction, or immediately determines whether a next execution address is within the normal address range information without one step ahead. For example, in a case where the instruction is a SEH (Structured Exception Handling), the malicious code determination unit <b>130</b> may perform a comparison between a chain value of the SEH and the normal address range information. Further, for the instruction such as return, call or jump, it may be determined whether a next execution address is within the normal address range information in one step ahead. Herein, the chain value of the SEH represents an address to be executed.</p>
<p id="p-0060" num="0059">However, the malicious code determination unit <b>130</b> may exceptionally handle a situation that a normal program executes an instruction out of the normal address range information in order to load the non-PE file.</p>
<p id="p-0061" num="0060">In the explanation of an exception handling, if the execution address is out of the normal address range information, the malicious code determination unit <b>130</b> checks the attribute of an area of the memory <b>170</b> pointed out by the execution address. As a result of the check, when the attribute of the area of the memory <b>170</b> is not an execution attribute, the malicious code determination unit <b>130</b> determines whether the event caused by the execution of the code stored in the area of the memory <b>170</b> pointed by the execution address is an abnormal event.</p>
<p id="p-0062" num="0061">In this regard, the abnormal event may include, but is not limited to, as follows:</p>
<p id="p-0063" num="0062">Access Violation;</p>
<p id="p-0064" num="0063">EXCEPTION_ARRAY_BOUNDS_EXCEEDED;</p>
<p id="p-0065" num="0064">EXCEPTION_DATATYPE_MISALIGNMENT;</p>
<p id="p-0066" num="0065">EXCEPTION_FLT_DENORMAL_OPERAND;</p>
<p id="p-0067" num="0066">EXCEPTION_FLT_DIVIDE_BY_ZERO;</p>
<p id="p-0068" num="0067">EXCEPTION_FLT_INEXACT_RESULT;</p>
<p id="p-0069" num="0068">EXCEPTION_FLT_INVALID_OPERATION;</p>
<p id="p-0070" num="0069">EXCEPTION_FLT_OVERFLOW;</p>
<p id="p-0071" num="0070">EXCEPTION_FLT_STACK_CHECK;</p>
<p id="p-0072" num="0071">EXCEPTION_FLT_UNDERFLOW;</p>
<p id="p-0073" num="0072">EXCEPTION_GUARD_PAGE;</p>
<p id="p-0074" num="0073">EXCEPTION_ILLEGAL_INSTRUCTION;</p>
<p id="p-0075" num="0074">EXCEPTION_IN_PAGE_ERROR;</p>
<p id="p-0076" num="0075">EXCEPTION_INT_DIVIDE_BY_ZERO;</p>
<p id="p-0077" num="0076">EXCEPTION_INT_OVERFLOW;</p>
<p id="p-0078" num="0077">EXCEPTION_INVALID_DISPOSITION;</p>
<p id="p-0079" num="0078">EXCEPTION_INVALID_HANDLE;</p>
<p id="p-0080" num="0079">EXCEPTION_NONCONTINUABLE_EXCEPTION;</p>
<p id="p-0081" num="0080">EXCEPTION_PRIV_INSTRUCTION; and</p>
<p id="p-0082" num="0081">EXCEPTION_STACK_OVERFLOW</p>
<p id="p-0083" num="0082">When there occurs the abnormal event, the malicious code determination unit <b>130</b> determines that the non-PE file contains a malicious code and stores in a virtual memory the execution address of the instruction that has been executed immediately before executing the instruction of the execution address out of the normal address range information.</p>
<p id="p-0084" num="0083">Otherwise, when there occurs not the abnormal event, the malicious code determination unit <b>130</b> compares the execution address of the instruction up to predetermined steps, e.g., subsequent three to five steps with the normal address range information to determine whether the non-PE file is malicious. That is, the malicious code determination unit <b>130</b> determines that the non-PE file is malicious when the execution address of the instruction up to the predetermined step is out of the normal address range information and determines that the non-PE file is normal when the execution address of the instruction prior to the predetermined step is within the normal address range information so that an instruction can be executed from a subsequent step.</p>
<p id="p-0085" num="0084">The malicious code extraction unit <b>140</b> extracts the malicious shell code that the application program for the non-PE file has decoded in a virtual memory in an execution file format or executable file format. For example, the malicious shell code extraction unit <b>140</b> may extract the decoded malicious shell code in a file format having any one of the file extensions such as exe, cpl, ocx, dll, vxd, sys, scr, dry and the like. However, the file extensions of the file format that can be extracted are not limited thereto.</p>
<p id="p-0086" num="0085">Further, the malicious shell code extraction unit <b>140</b> may request the analysis of the code extracted in the execution file format or executable file format to a server, that is connected to a communication network (not shown), for inspecting and analyzing malicious codes.</p>
<p id="p-0087" num="0086">The cause analysis unit <b>150</b> analyzes the occurrence reason of the exploit by comparing the RVA of the non-PE file determined as the malicious file by the malicious code determination unit <b>130</b> with the vulnerability information stored in the database unit <b>160</b> and reports the analyzed occurrence reason of the exploit.</p>
<p id="p-0088" num="0087">Although the exemplary embodiment of the present invention <b>130</b> has been described that the cause analysis unit <b>150</b> is disposed in the non-PE file inspecting apparatus, it is noted that the cause analysis unit may be disposed in a separate server for inspecting a non-PE file, which is connected via the communication network.</p>
<p id="p-0089" num="0088">When a user selects a directory having a plurality of the non-PE files, the apparatus for inspecting a non-PE file in accordance with an exemplary embodiment of the present invention may perform the inspection of the respective non-PE files stored in a directory.</p>
<p id="p-0090" num="0089">In addition, the apparatus for inspecting a non-PE file in accordance with another exemplary embodiment of the present invention may monitor in real time whether the non-PE file forwarded through a communication network is malicious.</p>
<p id="p-0091" num="0090"><figref idref="DRAWINGS">FIG. 2</figref> is a flow diagram illustrating a method for inspecting the non-PE file in accordance with an exemplary embodiment of the present invention.</p>
<p id="p-0092" num="0091">As illustrated in <figref idref="DRAWINGS">FIG. 2</figref>, the method for inspecting the non-PE files, wherein the method obtains in advance an RVA of a module having a former case where an instruction execution address has pointed out a malicious shell code area, includes acquiring normal address range information of a module loaded with the execution of an application program adapted for a non-PE file to be inspected, in operations S<b>201</b> to S<b>207</b>; setting up a breakpoint of the application program to candidate malicious address information based on the RVA, in operation S<b>209</b>; checking whether a next execution address is within the normal address range information when there occurs an event derived from the breakpoint, in operations S<b>211</b> and S<b>213</b>; determining that the non-PE file is malicious when it is checked that the next execution address is out of the normal address range information, in operation S<b>215</b>; extracting the malicious shell code that has been decoded in a virtual memory by the application program in an execution file format or an executable file format, in operation S<b>217</b>; analyzing the occurrence reason of the exploit by comparing the RVA with the vulnerability information to report the occurrence reason, in operation S<b>219</b>; when it is checked, in the operation S<b>213</b>, that the next execution address is within the normal address range information, monitoring the occurrence of the breakpoint event in operation S<b>211</b> until the inspection of the remaining non-PE files is completed, in operation S<b>221</b>.</p>
<p id="p-0093" num="0092">Hereinafter, before explaining a non-PE file inspection method performed by the apparatus for inspecting the non-PE file, in order to help understand the exemplary embodiment of the present invention, a description will be made on a process of obtaining the set of RVAs stored in the database unit <b>160</b> of the non-PE file inspection apparatus <b>100</b> (i.e., the RVAs of modules having a former example where an instruction execution address has tried to point out a malicious shell code area). Hereinafter, a process of obtaining the RVAs will be illustrated by way of an example where it is performed at first hand by the non-PE file inspection apparatus.</p>
<p id="p-0094" num="0093">First, when a directory having one or more non-PE files stored therein is selected through the use of a user interface by a user, the data loading unit <b>110</b> determines a format of a non-PE file in the directory selected by the user and provides the non-PE file to the program link unit <b>120</b>.</p>
<p id="p-0095" num="0094">The program link unit <b>120</b> directly executes the application program adapted for the non-PE file or requests a separate system (not shown) to execute the application program. The information on the execution addresses for each instruction of a module loaded during the execution of the application program is then provided to the malicious code determination unit <b>130</b>. Herein, the execution address information may be the address on the virtual memory when the instructions within the module are executed or may be the address information that is stored in the EIP register.</p>
<p id="p-0096" num="0095">Further, the program link unit <b>120</b> stores the normal address range including the start address and the end address that are loaded in the virtual memory with the execution of the application program.</p>
<p id="p-0097" num="0096">Thereafter, the malicious code determination unit <b>130</b> compares the execution address information, provided from the program link unit <b>120</b>, with the normal address range information to determine whether the execution address information is within the normal address range.</p>
<p id="p-0098" num="0097">In this case, when the execution address information is within the normal address range, the malicious code determination unit <b>130</b> receives execution address information for a next instruction from the program link unit <b>120</b> and determines whether the execution address of the next instruction is within the normal address range.</p>
<p id="p-0099" num="0098">What the execution address is out of the normal address range represents that the EIP, which is one of values of CPU registers moves to the malicious shell code area and, therefore, the malicious code determination unit <b>130</b> classifies the non-PE file as a malicious file to suspend the execution of the application program under execution.</p>
<p id="p-0100" num="0099">Subsequently, the malicious code determination unit <b>130</b> temporally stores information on the execution address before moving to the malicious shell code area and information on the corresponding module (i.e., the module having vulnerability) in the application program and provides the information to the cause analysis unit <b>150</b>.</p>
<p id="p-0101" num="0100">Meanwhile, the malicious shell code extraction unit <b>140</b> extracts the code stored in the area of the memory <b>170</b>, which is pointed out by the execution address out of the normal address range, i.e., the malicious shell code area, in an execution file format or an executable file format. The extracted code is then stored in the virtual memory.</p>
<p id="p-0102" num="0101">The cause analysis unit <b>150</b> compares the information on the execution address and module, provided from the malicious code determination unit <b>130</b>, with the pre-stored vulnerability information to catch the occurrence reason for the vulnerability. The caught occurrence reason is then handed to the user or an analyzer so that the analysis result about the corresponding non-PE file can be reported.</p>
<p id="p-0103" num="0102">After that, if another non-PE file remains in the directory, the non-PE file inspection apparatus <b>100</b> repetitively performs the inspection process with respect to the remaining non-PE files.</p>
<p id="p-0104" num="0103">As known from the explanation on the inspection process for the non-PE files performed by the non-PE file inspection apparatus hitherto, the non-PE files commonly contain a malicious code, e.g., a malicious shell code, and a malicious non-PE file containing the malicious shell code move eventually to a malicious shell code area in any way when the instruction for the malicious shell code is executed.</p>
<p id="p-0105" num="0104">The movement of the malicious non-PE file to the malicious shell code area may be predicted beforehand by examining a next execution address. For example, the next execution address may be ascertained from a value stored in an EIP register, which is one of registers in a central processing unit (CPU). Therefore, the non-PE file having the instruction that moves it to the malicious shell code area out of the normal address range can be regarded and classified as the malicious file. Further, such information enables the user to obtain in advance the virtual addresses of the modules having a former example where the instruction execution address points out the malicious shell code area. In this regard, since the virtual addresses onto which modules are loaded vary each time the loading of the modules with the change in a program execution environment, the virtual addresses need to be substituted with RVAs. The non-PE file inspection apparatus <b>100</b> of the exemplary embodiment stores the RVAs in advance in the database unit <b>160</b> in order to inspect whether the non-PE file is malicious.</p>
<p id="p-0106" num="0105">Hereinafter, the process of inspecting the non-PE files performed by the non-PE file inspection apparatus will be explained in detail with reference to <figref idref="DRAWINGS">FIGS. 1 and 3</figref>. Herein, the program link unit <b>120</b> in accordance with an exemplary embodiment of the present invention may directly execute a particular application program to be executed. This indicates that the non-PE file inspection apparatus <b>100</b> of the exemplary embodiment may store the particular application program or all sorts of programs including the particular application program in a memory device such as a program storage unit.</p>
<p id="p-0107" num="0106">First, a case where the non-PE file inspection apparatus <b>100</b> directly executes the particular application program will be described in accordance with an exemplary embodiment of the present invention.</p>
<p id="p-0108" num="0107">In operation S<b>201</b>, when a directory having one or more non-PE files to be inspected is selected through the use of a user interface, the data loading unit <b>110</b> checks a format of a non-PE file on a basis of file format information <b>303</b> for the non-PE file stored in the directory. For example, as illustrated in <figref idref="DRAWINGS">FIG. 3</figref>, when a root folder-2 <b>301</b> is selected from among a root folder-1 to a root folder-N located under a drive-1 via the user interface, the data loading unit <b>110</b> determines the format of a non-PE file by checking a file format of the non-PE file stored in the root folder-2 <b>301</b>.</p>
<p id="p-0109" num="0108">In operation S<b>203</b>, the data loading unit <b>110</b> loads candidate malicious address information <b>305</b> that meets the file format of the non-PE file from among the set of the plurality of candidate malicious address information stored in the database unit <b>160</b>.</p>
<p id="p-0110" num="0109">The program link unit <b>120</b> executes an application program <b>307</b> adapted for executing the non-PE file that is to be subjected to the malicious inspection, in operation S<b>205</b>, and the program link unit <b>120</b> acquires the normal address range information of the module loaded with the execution of the application program and stores the acquired normal address range information in operation S<b>207</b>. In this case, the module, for example, may be a dynamic link library (DLL). By way of example, the program link unit <b>120</b> may load a corresponding application program from among the application programs stored in a memory device such as a program storage unit (not shown) and executes the same in a virtual environment.</p>
<p id="p-0111" num="0110">Also, in operation S<b>209</b>, the program link unit <b>120</b> sets up a candidate malicious address corresponding to the candidate malicious address information <b>305</b> to be a breakpoint <b>311</b> of the application program in accordance with the candidate malicious address information <b>305</b> loaded by the data loading unit <b>110</b>.</p>
<p id="p-0112" num="0111">Thereafter, when it is checked, in operation S<b>211</b> that a breakpoint exception event occurs due to the breakpoint set up in the operation S<b>209</b>, it is determined, in operation S<b>213</b>, whether a next execution address is within the normal address range information acquired in the operation S<b>207</b>. When it is determined that the next execution address is out of the normal address range information, it is classified and determined that the non-PE file is a malicious file <b>313</b> in operation S<b>215</b>. Herein, the malicious code determination unit <b>130</b> may determine whether a corresponding instruction moves the non-PE file to the malicious shell code area beyond the normal address range information through the use of a next execution address stored in an EIP register in a CPU.</p>
<p id="p-0113" num="0112">Meanwhile, in the operation S<b>213</b>, the malicious code determination unit <b>130</b> may determine whether a next execution address is within the normal address range information in one step ahead or immediately determine whether a next execution address is within the normal address range information without one step ahead. For example, for the instruction such as RETURN, CALL or JUMP, the malicious code determination unit <b>130</b> may determine whether the next execution address is within the normal address range information in one step ahead. However, for the instruction such as a SEH, the malicious code determination unit <b>130</b> may determine whether a chain value of the SEH is within the normal address range.</p>
<p id="p-0114" num="0113">Subsequently, in operation S<b>217</b>, the malicious shell code extraction unit <b>140</b> extracts the malicious shell code that the application program adapted for the non-PE file has been decoded in the virtual memory in an execution file or executable file. For example, the malicious shell code extraction unit <b>140</b> may extract the decoded malicious shell code in an execution file or executable file. In this case, the execution file or executable file may be extracted in any one format of the file extensions such as exe, cpl, ocx, dll, vxd, sys, scr, and dry. However, these file extensions of the file formats that can be extracted are not limited to the above. The execution file of the extracted malicious code execution file will be used to analyze the execution scheme of the malicious shell code.</p>
<p id="p-0115" num="0114">In operation S<b>219</b>, the cause analysis unit <b>150</b> analyzes the occurrence reason of the exploit by comparing the RVA of the non-PE file classified as the malicious file by the malicious code determination unit <b>130</b> with the vulnerability information stored previously in the database unit <b>160</b> and reports the analyzed exploit occurrence reason. The vulnerability information may be, but not limited to, the information provided from CVE (Common Vulnerabilities and Exposures), Microsoft Security Bulletin (for example, MS11-002), NVD (National Vulnerability Database), US-CERT Bulletin, and so on.</p>
<p id="p-0116" num="0115">When it is determined, in the operation S<b>213</b>, that the next execution address is within the normal address range information, the non-PE file is classified as a normal file <b>315</b>, and the breakpoint exception event in the operation S<b>211</b> is continued to be monitored until the inspection of the non-PE file is completed in operation S<b>221</b>. When the inspection of the non-PE file is completed, a subsequent inspection for another non-PE file within the same directory will be repetitively performed.</p>
<p id="p-0117" num="0116">Further, as described above, in accordance with another exemplary embodiment of the present invention, the non-PE file inspection apparatus <b>100</b> may request a separate system (not shown) to perform the process of inspecting the non-PE file without directly executing the particular application program. In this case, the example of the system may be a user terminal in which the malicious code inspection method is installed or a program provider server which is connected via a communication network, but it is not limited thereto.</p>
<p id="p-0118" num="0117">Meanwhile, although the embodiment as set forth above has exemplarily explained that the non-PE file that the execution address is out of the normal address range is determined as the malicious file, it may exceptionally handle a case where the area of the memory <b>170</b>, which is pointed out by an execution address has an execution attribute. The related explanation will be given as follows.</p>
<p id="p-0119" num="0118"><figref idref="DRAWINGS">FIG. 4</figref> is a flowchart illustrating a process performed by the non-PE file inspection apparatus in a case where an execution address points out an area beyond the normal address range information.</p>
<p id="p-0120" num="0119">As illustrated in <figref idref="DRAWINGS">FIG. 4</figref>, when a first execution address points out an area of the memory <b>170</b> beyond the normal address range information, the malicious code determination unit <b>130</b> sets a value of a counter to a predetermined initial value, e.g., &#x2018;0&#x2019; in operation S<b>400</b>, and inspects the attribute of the area of the memory <b>170</b>, which is pointed out by the first execution address to check whether the attribute is an execution attribute in operation S<b>402</b>.</p>
<p id="p-0121" num="0120">As a result of the operation S<b>402</b>, when it is checked that the attribute is not an execution attribute, a code in the area of the memory <b>170</b>, which is pointed out by the first execution address is executed in operation S<b>404</b> and it is checked whether an event occurred owing to the execution of the code is an abnormal event in operation S<b>406</b>.</p>
<p id="p-0122" num="0121">Meanwhile, when it is checked, in the operation S<b>402</b>, that the attribute is an execution attribute, the malicious code determination unit <b>130</b> determines that the non-PE file is normal in operation S<b>408</b>, and thereafter, the process advances to operation S<b>416</b> where a next execution address, i.e., a second execution address is compared with the normal address range information. Further, as a result of the operation S<b>406</b>, the malicious code determination unit <b>130</b> also determines that the non-PE file is malicious when the event is an abnormal event in operation S<b>410</b>.</p>
<p id="p-0123" num="0122">As a result of the operation S<b>406</b>, when it is checked that the abnormal event is not occurring, the malicious code determination unit <b>130</b> increases the value of the counter by &#x2018;1&#x2019; in operation S<b>412</b>. Thereafter, the process goes to the operation S<b>414</b> where it is checked whether the value of the counter is lower than or equal to a threshold.</p>
<p id="p-0124" num="0123">As a result of the operation S<b>414</b>, when the value of the counter is lower than or equal to a threshold, the malicious code determination unit <b>130</b> determines whether a next execution address provided from the program link unit <b>120</b>, i.e., a second execution address to be executed at a next sequence is out of the normal address range information in operation S<b>416</b>.</p>
<p id="p-0125" num="0124">As a result of the operation S<b>416</b>, when the second execution address is out of the normal address range information, the process returns to the operation S<b>402</b> where the malicious code determination unit <b>130</b> continues to perform the above described operations.</p>
<p id="p-0126" num="0125">Meanwhile, as a result of the operation S<b>414</b>, when the value of the counter exceeds the threshold, the malicious code determination unit <b>130</b> determines that the non-PE file is malicious.</p>
<p id="p-0127" num="0126">Further, as a result of the operation S<b>416</b>, when the second execution address for the next sequence instruction points out the normal address range information, the malicious code determination unit <b>130</b> compares a third execution address of a next instruction with the normal address range information.</p>
<p id="p-0128" num="0127">In accordance with the exemplary embodiment of the present invention, it is possible to detect a number of malicious non-PE files in bulk trying the same exploit using a particular RVA to do a malicious act by storing a set of relative virtual addresses (RVAs) of a module having a former case where an execution address of an instruction being loaded with the execution of a program adapted for the non-PE file has pointed out a malicious code area, loading an RVA corresponding to a format of the non-PE file, setting up a breakpoint to the RVA, and determining whether the non-PE file is malicious when there occurs a breakpoint even.</p>
<p id="p-0129" num="0128">Further, it is possible quickly to detect all sorts of variant malicious non-PE files since the detection is achieve only through the determination on whether to move from a particular RVA to a malicious shell code by setting up a breakpoint to an RVA of a module having a former case where an instruction execution address have pointed out a malicious code area and checking whether a next execution file points out a malicious shell code out of a normal address range to inspect whether the non-PE file is a malicious file containing the malicious shell code.</p>
<p id="p-0130" num="0129">In addition, it is possible to effectively defending an APT attack using the Zero-day exploit utilizing a malicious non-PE file.</p>
<p id="p-0131" num="0130">The combinations of the each block of the block diagram and each step of the flow chart may be performed by computer program instructions. Because the computer program instructions may be loaded on a general purpose computer, a special purpose computer, or other processor of programmable data processing equipment, the instructions performed through the computer or other processor of programmable data processing equipment may generate the means performing functions described in the each block of the block diagram and each step of the flow chart. Because the computer program instructions may be stored in the computer available memory or computer readable memory which is capable of intending to a computer or other programmable data processing equipment in order to embody a function in a specific way, the instructions stored in the computer available memory or computer readable may produce a manufactured item involving the instruction means performing functions described in the each block of the block diagram and each step of the flow chart. Because the computer program instructions may be loaded on the computer or other programmable data processing equipment, the instructions performing the computer or programmable data processing equipment may provide the steps to execute the functions described in the each block of the block diagram and each step of the flow chart by a series of operational steps being performed on the computer or programmable data processing equipment, thereby a process executed by a computer being generated.</p>
<p id="p-0132" num="0131">Moreover, the respective blocks or the respective sequences may indicate modules, segments, or some of codes including at least one executable instruction for executing a specific logical function(s). In several alternative embodiments, it is noticed that the functions described in the blocks or the sequences may run out of order. For example, two successive blocks and sequences may be substantially executed simultaneously or often in reverse order according to corresponding functions.</p>
<p id="p-0133" num="0132">The explanation as set forth above is merely described a technical idea of the exemplary embodiments of the present invention, and it will be understood by those skilled in the art to which this invention belongs that various changes and modifications may be made without departing from the scope of essential characteristics of the embodiments of the present invention. Therefore, the exemplary embodiments disclosed herein are not used to limit the technical idea of the present invention, but to explain the present invention, and the scope of the technical idea of the present invention are not limited to these embodiments. Therefore, the scope of protection of the present invention should be construed as defined in the following claims and changes, modifications and equivalents that fall within the technical idea of the present invention are intended to be embraced by the scope of the claims of the present invention.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. An apparatus for inspecting a non-PE file, the apparatus comprising:
<claim-text>a data loading unit configured to load candidate malicious address information related to a malicious code of the non-PE file;</claim-text>
<claim-text>a program link unit configured to acquire normal address range information of a module being loaded on a memory when an application program adapted for the non-PE file is executed and set up a candidate malicious address corresponding to the candidate malicious address information to be a breakpoint of the application program; and</claim-text>
<claim-text>a malicious code determination unit configured to determine whether a next execution address is within the normal address range information when there occurs an event derived from the breakpoint.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The apparatus of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein when it is determined that the execution address is not within the normal address range information, the malicious code determination unit is configured to determine that the non-PE file is malicious.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The apparatus of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein when it is determined that the execution address is not within the normal address range information, the malicious code determination unit is configured to check whether a memory area pointed out by the execution address has an execution attribute and determine whether the non-PE file is malicious depending the check result.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The apparatus of <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein when the memory area pointed out by the execution address has not the execution attribute, the malicious code determination unit is configured to check whether there occurs an abnormal event due to the execution of a code stored in the memory area pointed out by the execution address and determine whether the non-PE file is malicious depending on the check result.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The apparatus of <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein when the memory area pointed out by the execution address has the execution attribute, the malicious code determination unit is configured to determine that the PE-file is normal.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The apparatus of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising a database unit that stores a set of the candidate malicious address information,
<claim-text>wherein the candidate malicious address information includes information on a relative virtual address (RVA) of a module having a former case where an instruction execution address has pointed out a malicious shell code area.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The apparatus of <claim-ref idref="CLM-00002">claim 2</claim-ref>, further comprising a malicious code extraction unit configured to extract the malicious code of the non-PE file that has been determined as the malicious file in a format of an execution file or an executable file.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The apparatus of <claim-ref idref="CLM-00006">claim 6</claim-ref>, further comprising a cause analysis unit configured to analyze the occurrence reason of an exploit by comparing the RVA with vulnerability information.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The apparatus of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the normal address range information comprises a start address and an end address of a module loaded with the execution of the application program.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The apparatus of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the execution address is obtained from an EIP (Extended Instruction Pointer) register of a central processing unit.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The apparatus of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the malicious code determination unit is configured to store an execution address of an instruction executed immediately before the execution address beyond the normal address range information.</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. A method for inspecting a non-PE file, the method comprising:
<claim-text>loading candidate malicious address information related to a malicious code of the non-PE file;</claim-text>
<claim-text>acquiring normal address range information of a module being loaded on a memory when an application program adapted for the non-PE file is executed;</claim-text>
<claim-text>setting up a candidate malicious address corresponding to the candidate malicious address information to be a breakpoint of the application program; and</claim-text>
<claim-text>determining whether a next execution address is within the normal address range information when there occurs an event derived from the breakpoint.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The method of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein said determining whether a next execution address is within the normal address range information comprises:
<claim-text>when it is determined that the next execution address is not within the normal address range information, determining that the non-PE file is malicious.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The method of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein said determining whether a next execution address is within the normal address range information comprises:
<claim-text>when it is determined that the execution address is not within the normal address range information, determining whether a memory area pointed out by the execution address has an execution attribute; and</claim-text>
<claim-text>determining whether the non-PE file is malicious depending on whether the memory area pointed out by the execution address has an execution attribute.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The method of <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein said determining whether a memory area pointed out by the execution address has an execution attribute comprises:
<claim-text>when the memory area pointed out by the execution address has not the execution attribute, checking whether there occurs an abnormal event due to the execution of a code stored in the memory area pointed out by the execution address; and</claim-text>
<claim-text>when there occurs an abnormal event, determining that the non-PE file is malicious.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The method of <claim-ref idref="CLM-00012">claim 12</claim-ref>, further comprising:
<claim-text>storing a set of the candidate malicious address information,</claim-text>
<claim-text>wherein the candidate malicious address information includes information on a relative virtual address (RVA) of a module having a former case where an instruction execution address has pointed out a malicious shell code area.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The method of <claim-ref idref="CLM-00013">claim 13</claim-ref>, further comprising extracting the malicious code of the non-PE file that has been determined as the malicious file in a form of an execution file or an executable file.</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The method of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the normal address range information comprises a start address and an end address of a module loaded with the execution of the application program.</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. The method of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the execution address is obtained from an EIP (Extended Instruction Pointer) register of a central processing unit.</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. The method of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein said determining whether a next execution address is within the normal address range information comprises:
<claim-text>determining whether the execution address is within the normal address range information depending on a kind of the instruction of the application program under execution.</claim-text>
</claim-text>
</claim>
</claims>
</us-patent-grant>

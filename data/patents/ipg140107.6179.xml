<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08627303-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08627303</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>12627206</doc-number>
<date>20091130</date>
</document-id>
</application-reference>
<us-application-series-code>12</us-application-series-code>
<us-term-of-grant>
<us-term-extension>784</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>9</main-group>
<subgroup>45</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>717159</main-classification>
</classification-national>
<invention-title id="d2e53">Memory optimization of virtual machine code by partitioning extraneous information</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>7475214</doc-number>
<kind>B2</kind>
<name>Hwang</name>
<date>20090100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>2004/0243989</doc-number>
<kind>A1</kind>
<name>Owens et al.</name>
<date>20041200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>2008/0028179</doc-number>
<kind>A1</kind>
<name>Mannarswamy et al.</name>
<date>20080100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>2009/0055821</doc-number>
<kind>A1</kind>
<name>Grcevski et al.</name>
<date>20090200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>2009/0172648</doc-number>
<kind>A1</kind>
<name>Gerginov et al.</name>
<date>20090700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717141</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>CN</country>
<doc-number>1499363</doc-number>
<kind>A</kind>
<date>20040500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>CN</country>
<doc-number>1531680</doc-number>
<kind>A</kind>
<date>20040900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>CN</country>
<doc-number>101042671</doc-number>
<kind>A</kind>
<date>20070900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>CN</country>
<doc-number>101162439</doc-number>
<kind>A</kind>
<date>20080400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>EP</country>
<doc-number>1387265</doc-number>
<kind>A1</kind>
<date>20040200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00011">
<document-id>
<country>EP</country>
<doc-number>1491999</doc-number>
<kind>A2</kind>
<date>20041200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00012">
<othercit>Shiel et al., &#x201c;A Translation-Facilitated Comparison Between the Common Language Runtime and the Java Virtual Machine&#x201d;, 2005, Electronic Notes in Theoretical Computer Science, pp. 35-52.</othercit>
</nplcit>
<category>cited by examiner</category>
</us-citation>
<us-citation>
<nplcit num="00013">
<othercit>Lenovo, &#x201c;Hypervisor Service to Create Process in Another Virtual Machine,&#x201d; ip.com/ibm TDB: Sep. 26, 2006.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00014">
<othercit>Goguen et al., &#x201c;Virtual Machine Debugging Module,&#x201d; ip.com/ibm TDB; Jul. 29, 2009.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00015">
<othercit>Auerbach et al., &#x201c;Low Latency Time-Portable Real-Time Programming with Exotasks,&#x201d; ACM Digital Library; vol. 8, No. 2, Article 15, Jan. 2009.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00016">
<othercit>Gummaraju et al., &#x201c;Streamware: Programming General Purpose Multicore Processors Using Streams,&#x201d; ACM Digital Library; pp. 297-310, Mar. 2008.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00017">
<othercit>Bhadra et al., &#x201c;An Experimental Study of Methods for Executing Test Suites in Memory Constrained Environments,&#x201d; AST '09 May 18-19, 2009, Vancouver, Canada, pp. 27-35.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00018">
<othercit>Chinese Office Action dated Mar. 22, 2013, 5 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>25</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>717126-133</main-classification>
<additional-info>unstructured</additional-info>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>717145-148</main-classification>
<additional-info>unstructured</additional-info>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>717159-161</main-classification>
<additional-info>unstructured</additional-info>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>7</number-of-drawing-sheets>
<number-of-figures>9</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20110131561</doc-number>
<kind>A1</kind>
<date>20110602</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Adams, III</last-name>
<first-name>Henry Walton</first-name>
<address>
<city>Durham</city>
<state>NC</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Foley</last-name>
<first-name>Sean Christopher</first-name>
<address>
<city>Ottawa</city>
<country>CA</country>
</address>
</addressbook>
<residence>
<country>CA</country>
</residence>
</us-applicant>
<us-applicant sequence="003" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Hrischuk</last-name>
<first-name>Curtis E.</first-name>
<address>
<city>Durham</city>
<state>NC</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="004" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Low</last-name>
<first-name>Andrew Russell</first-name>
<address>
<city>Ottawa</city>
<country>CA</country>
</address>
</addressbook>
<residence>
<country>CA</country>
</residence>
</us-applicant>
<us-applicant sequence="005" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Shipton</last-name>
<first-name>Peter Duncan</first-name>
<address>
<city>Ottawa</city>
<country>CA</country>
</address>
</addressbook>
<residence>
<country>CA</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Adams, III</last-name>
<first-name>Henry Walton</first-name>
<address>
<city>Durham</city>
<state>NC</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Foley</last-name>
<first-name>Sean Christopher</first-name>
<address>
<city>Ottawa</city>
<country>CA</country>
</address>
</addressbook>
</inventor>
<inventor sequence="003" designation="us-only">
<addressbook>
<last-name>Hrischuk</last-name>
<first-name>Curtis E.</first-name>
<address>
<city>Durham</city>
<state>NC</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="004" designation="us-only">
<addressbook>
<last-name>Low</last-name>
<first-name>Andrew Russell</first-name>
<address>
<city>Ottawa</city>
<country>CA</country>
</address>
</addressbook>
</inventor>
<inventor sequence="005" designation="us-only">
<addressbook>
<last-name>Shipton</last-name>
<first-name>Peter Duncan</first-name>
<address>
<city>Ottawa</city>
<country>CA</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<last-name>Johnson</last-name>
<first-name>Prentiss</first-name>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
<agent sequence="02" rep-type="attorney">
<addressbook>
<orgname>SVL IP Law Edell, Shapiro &#x26; Finnan, LLC</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>International Business Machines Corporation</orgname>
<role>02</role>
<address>
<city>Armonk</city>
<state>NY</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Vo</last-name>
<first-name>Ted T</first-name>
<department>2191</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">A method, computer program product, and system for memory optimization by partitioning extraneous information from executable virtual machine code or interpreted code. The extraneous information may be stored separately, or accessed from the original code if needed for debugging or servicing the code in the field. This approach optimizes memory usage by reducing memory footprint while maintaining accessibility of the non-executable information for debugging and other processes necessary for servicing code in the field.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="179.49mm" wi="61.30mm" file="US08627303-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="202.52mm" wi="157.23mm" file="US08627303-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="210.57mm" wi="136.74mm" file="US08627303-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="208.96mm" wi="156.89mm" file="US08627303-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="209.63mm" wi="148.67mm" file="US08627303-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="209.21mm" wi="96.10mm" file="US08627303-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="205.91mm" wi="173.31mm" file="US08627303-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="210.23mm" wi="147.40mm" file="US08627303-20140107-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">BACKGROUND</heading>
<p id="p-0002" num="0001">1. Technical Field</p>
<p id="p-0003" num="0002">The present invention relates generally to virtual machine code, and more particularly to memory optimization of virtual machine code by partitioning extraneous information from executable code.</p>
<p id="p-0004" num="0003">2. Discussion of Related Art</p>
<p id="p-0005" num="0004">The advantages of virtual machine technology have become widely recognized. Among these advantages is the ability to run multiple virtual machines on a single host platform, which makes better use of the capacity of the hardware while ensuring that each user enjoys the features of a &#x201c;complete&#x201d; computer. With the growing complexity of computer software and the growing reliance on software systems in everyday life and business, high performance in software execution has become expected by users. Performance of virtual machine software is particularly important because this software is often run on systems that are memory constrained, for example on wireless devices such as PDAs and smartphones that tend to have less memory than a traditional computer system. Thus, efforts to reduce memory usage by virtual machine code during runtime have been made, such as minimizing native function calls, restricting the type of functionality offered in the native code, reducing application size, and requiring efficient coding. The reduction of memory usage remains a key goal for optimal software performance.</p>
<heading id="h-0002" level="1">BRIEF SUMMARY</heading>
<p id="p-0006" num="0005">Accordingly, embodiments of the present invention include a method, computer program product and a system for optimizing virtual machine or interpreted code comprising receiving code comprising a plurality of program instructions and first extraneous information, where the code is written in a language for execution by a virtual machine and where the first extraneous information is a first type of non-executable information, modifying the code by removing the first extraneous information and replacing it with a key that references a location of the first extraneous information, and executing the modified code and, if an event requesting the first extraneous information occurs during execution, using the key to locate the first extraneous information in the location in response to the event, and loading the first extraneous information from the location.</p>
<p id="p-0007" num="0006">The above and still further features and advantages of embodiments of the present invention will become apparent upon consideration of the following detailed description thereof, particularly when taken in conjunction with the accompanying drawings wherein like reference numerals in the various figures are utilized to designate like components.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE SEVERAL VIEWS OF THE DRAWINGS</heading>
<p id="p-0008" num="0007"><figref idref="DRAWINGS">FIG. 1</figref> is a block diagram illustrating an exemplary computer system comprising a virtual machine according to an embodiment of the present invention.</p>
<p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. 2</figref> is a block diagram illustrating an exemplary partitioning and memory optimization process according to a first embodiment of the present invention.</p>
<p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. 3</figref> is a block diagram illustrating the effects of the partitioning process of <figref idref="DRAWINGS">FIG. 2</figref> on an exemplary Java class file according to a first embodiment of the present invention.</p>
<p id="p-0011" num="0010"><figref idref="DRAWINGS">FIGS. 4A</figref> and B are flowcharts depicting a partitioning and memory optimization process according to a first embodiment of the present invention.</p>
<p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. 5</figref> is a block diagram illustrating an exemplary partitioning and memory optimization process according to a second embodiment of the present invention.</p>
<p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. 6</figref> is a block diagram illustrating the effects of the partitioning process of <figref idref="DRAWINGS">FIG. 5</figref> on an exemplary Java class file according to a second embodiment of the present invention.</p>
<p id="p-0014" num="0013"><figref idref="DRAWINGS">FIGS. 7A</figref> and B are flowcharts depicting a partitioning and memory optimization process according to a second embodiment of the present invention.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0004" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0015" num="0014">Referring now to the Figures, an exemplary computer system according to embodiments of the present invention is illustrated in <figref idref="DRAWINGS">FIG. 1</figref>. <figref idref="DRAWINGS">FIG. 1</figref> shows a computer system <b>10</b> comprising processor <b>12</b>, memory <b>14</b>, network adapter <b>16</b>, and a Java virtual machine <b>20</b>, all communicatively coupled together by system bus <b>18</b>. Memory <b>14</b> may be implemented by any conventional or other memory or storage device (e.g., RAM, cache, flash, etc.), and may include any suitable storage capacity. The network adapter <b>16</b> may be implemented so that the computer system <b>10</b> can communicate with one or more other systems by any quantity of any suitable communications media (e.g., WAN, LAN, Internet, Intranet, wired, wireless, etc.), through a shared memory, or in any other suitable fashion. The computer systems of the present embodiments may include any conventional or other communications devices to communicate over networks or other communications channels via any conventional or other protocols, and may utilize any type of connection (e.g., wired, wireless, etc.) for access.</p>
<p id="p-0016" num="0015">The Java virtual machine <b>20</b> comprises various components such as class loader <b>21</b>, exception handler module <b>22</b>, error reporting module <b>23</b>, execution engine <b>24</b>, which comprises interpreter <b>25</b> and Just-in-Time compiler <b>26</b>, class library <b>27</b> and memory <b>28</b>. It should be understood that although the virtual machine <b>20</b> is discussed herein as a Java virtual machine, the present invention is not limited to Java technology, and may be implemented in conjunction with other technology and virtual machines such as a CPython virtual machine, .NET and Common Language Runtime, a Parrot virtual machine, a Rubinius virtual machine, or any other suitable virtual machine.</p>
<p id="p-0017" num="0016">The class loader <b>21</b> loads code, for example a bytecode file such as a Java class (.class) or Java Archive (.jar) file, or a CIL bytecode file. The code comprises program instructions that have been compiled from any language suitable for use with a virtual machine, for example languages suitable for use with a CPython virtual machine include Python, languages suitable for use with a Java Virtual Machine (JVM) include Java, Clojure, Fan, Groovy, IBM NetRexx, JavaFX Script, JavaScript, JRuby, Jython, JScheme, Macromedia ColdFusion, Rhino, Scala, etc., languages suitable for use with a .NET Common Language Runtime (CLR) include C#, C++/CLI, Cobra, F#, Fan, IronPython, IronRuby, J#, JScript.NET, Managed JScript, Mondrian, Nemerle, VB.NET, etc., languages suitable for use with a Parrot virtual machine include Perl 6, and languages suitable for use with a Rubinius virtual machine include Ruby. The language may be an interpreted language or a compiled language, for example a language for use with a JVM may be JavaScript, which is generally interpreted, or Groovy, which is generally compiled.</p>
<p id="p-0018" num="0017">The computer system <b>10</b> may be implemented in the form of a processing system, or may be in the form of software. The computer system <b>10</b> may be implemented by any quantity of conventional or other computer systems or devices (e.g., computer terminals, personal computers (e.g., IBM-compatible, Apple MacIntosh, tablet, laptop, etc.), etc.), cellular telephones, personal data assistants (e.g., Palm Pre, Treo, iPhone, etc.), etc., and may include any commercially available operating system (e.g., AIX, Linux, OSX, Sun Solaris, Unix, Windows, etc.) and any commercially available or custom software (e.g., browser software, communications software, word processing software, etc.). These systems may include types of displays and input devices (e.g., keyboard, mouse, voice recognition, etc.) to enter and/or view information. If embodied in software (e.g., as a virtual image), the computer system <b>10</b> may be available on a recordable medium (e.g., magnetic, optical, floppy, DVD, CD, etc.) or in the form of a carrier wave or signal for downloading from a source via a communication medium (e.g., bulletin board, network, LAN, WAN, Intranet, Internet, etc.).</p>
<p id="p-0019" num="0018"><figref idref="DRAWINGS">FIGS. 2 through 4</figref> depict various aspects of a first embodiment of the present invention. In this embodiment, code is partitioned by separating extraneous information from the executable code, and storing the extraneous information separately so that the executable code may be loaded as normal, and the extraneous information may be lazy-loaded only when needed. This approach optimizes memory usage by reducing the memory footprint while maintaining accessibility of the extraneous information for debugging and other processes necessary for servicing code in the field.</p>
<p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. 2</figref> illustrates an exemplary partitioning and memory optimization process that may be performed by the system of <figref idref="DRAWINGS">FIG. 1</figref> according to a first embodiment of the present invention. In this process, code <b>30</b> such as a Java class file or CIL code file is received by a post-compilation module <b>40</b>, where extraneous information in the code <b>30</b> is identified. The extraneous information is non-executable information, for example debug information <b>221</b>, annotation information <b>222</b>, or source information <b>223</b>. The code <b>30</b> is modified by removing the extraneous information to yield modified code <b>35</b>, and storing the extraneous information in a data storage location such as database <b>60</b>, a shared class cache, or as a nested inner-class or as a separate, binary object. A unique identification key that identifies the storage location is inserted into the modified code <b>35</b>.</p>
<p id="p-0021" num="0020">At run-time, the modified code <b>35</b> is loaded as normal into the virtual machine <b>20</b>. If there is a need for the extraneous information during run-time, then the system may locate and load only the appropriate type of extraneous information needed for the particular task. For example, if a fault occurs, the exception handling process <b>22</b> and error reporting mechanism <b>23</b> request the debug information <b>221</b> in order to throw an exception and report the error, but have no need for the annotation information <b>222</b> and the source information <b>223</b>. Similarly, if the code uses reflection, a reflection process may request the source information <b>223</b>, but not the debug information <b>221</b>. In the illustrated example, the error reporting mechanism <b>23</b> is a Java stack trace reporting method that requests four pieces of information to produce a stack trace <b>70</b>: the class, method, file and line number. Normally, this information is populated by the virtual machine when an exception is constructed, but in these embodiments the file and line number were removed as part of the debug information <b>221</b>, which was stored in the database <b>60</b>. Accordingly, the exception handling process <b>22</b> and error reporting mechanism <b>23</b> use the key to find the storage location <b>60</b> in which the debug information <b>221</b> is stored, and then load the debug information <b>221</b> so that the stack trace <b>70</b> can be populated.</p>
<p id="p-0022" num="0021">Referring now to <figref idref="DRAWINGS">FIG. 3</figref>, an exemplary Java class file <b>30</b> is shown, having ten primary components: magic number <b>201</b>, version <b>202</b>, constant pool <b>203</b>, access flags <b>204</b>, this class <b>205</b>, super class <b>206</b>, interfaces <b>207</b>, fields <b>208</b>, methods <b>209</b> and attributes <b>210</b>. The attributes may include debug information <b>221</b>, annotation information <b>222</b> and source information <b>223</b>. The exemplary Java class file <b>30</b> is modified by having its extraneous information, in this case debug information <b>221</b>, annotation information <b>222</b> and source information <b>223</b>, partitioned from the program instructions and stored in storage location <b>60</b>. The extraneous information is replaced by a key <b>224</b> in the modified Java class file <b>35</b>, which key identifies the storage location where the extraneous information is stored.</p>
<p id="p-0023" num="0022">In the context of Java technology, the debug information <b>221</b> may include attributes such as the following:
<ul id="ul0001" list-style="none">
    <li id="ul0001-0001" num="0000">
    <ul id="ul0002" list-style="none">
        <li id="ul0002-0001" num="0023">SourceFile: (per class) the source file name with no path e.g., ClassName.java;</li>
        <li id="ul0002-0002" num="0024">SourceDebugExtension: typically unused;</li>
        <li id="ul0002-0003" num="0025">LineNumberTable: (per method) line numbers for the debugger to step through and for exception stack traces to print line numbers (maps bytecode index to line number in the source file);</li>
        <li id="ul0002-0004" num="0026">LocalVariableTable: (per method) names of local variables for the debugger while stepping; and</li>
        <li id="ul0002-0005" num="0027">LocalVariableTypeTable: (per method) in the cases of generic types (and only generics) the type of a local variable in the source file is different from the type in the VM. For example, the virtual machine will see Hashtable while the source file type may be generic Hashtable&#x3c;Integer, String&#x3e;.
<br/>
This information is unnecessary for normal execution of the program instructions in the code, because it is typically used only for debugging and stack traces, and nothing else in a running program.
</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0024" num="0028">In the context of Java technology, the annotation information <b>222</b> may include attributes such as the following:
<ul id="ul0003" list-style="none">
    <li id="ul0003-0001" num="0000">
    <ul id="ul0004" list-style="none">
        <li id="ul0004-0001" num="0029">AnnotationDefault;</li>
        <li id="ul0004-0002" num="0030">RuntimeVisibleAnnotations;</li>
        <li id="ul0004-0003" num="0031">RuntimeInvisibleAnnotations;</li>
        <li id="ul0004-0004" num="0032">RuntimeVisibleParameterAnnotations; and</li>
        <li id="ul0004-0005" num="0033">RuntimelnvisibleParameterAnnotations.
<br/>
Also in the context of Java technology, the source information <b>223</b> may include attributes such as the following:
</li>
        <li id="ul0004-0006" num="0034">EnclosingMethod: identifies the enclosing method of local classes;</li>
        <li id="ul0004-0007" num="0035">Signature: Identifies generic signatures for classes, field types and method signatures;</li>
        <li id="ul0004-0008" num="0036">Deprecated: Identifies deprecated items;</li>
        <li id="ul0004-0009" num="0037">Synthetic: Identifies a compiler-generated item; and</li>
        <li id="ul0004-0010" num="0038">InnerClasses: Identifies inner and outer class relationships (including nested and anonymous).
<br/>
This information is unnecessary for normal execution of the program instructions in the code, because a running virtual machine does not need this information. This information is typically used only for reflection. Accordingly, while a program that makes extensive use of reflection might be affected by removal of this information, in general most programs will be unaffected by removal.
</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0025" num="0039">Turning now to <figref idref="DRAWINGS">FIGS. 4A and 4B</figref>, processes <b>300</b> and <b>400</b> for a partitioning and memory optimization process of a first embodiment are shown generally. Process <b>300</b> may be carried out at a time other than run-time (for example when a class is loaded), and process <b>400</b> is generally performed at run-time. In process <b>300</b>, the system, for example the system of <figref idref="DRAWINGS">FIG. 1</figref>, receives code in step <b>310</b>, for example by being parsed by a post-processor, and in step <b>320</b> identifies extraneous information in the code. In step <b>330</b> the system removes the extraneous information from the code, and in step <b>340</b> stores the removed extraneous information in a data storage location. In step <b>350</b> the system inserts a key into the code to reference the location of the extraneous information. In a system such as an IBM J9 system, this process may be performed by a tool such as the Java Optimizer (JAPT) class manipulation tool.</p>
<p id="p-0026" num="0040">In optional step <b>360</b>, the system rewrites the code so that it indirectly, instead of directly, accesses the extraneous information, for example by modifying one or more of the plurality of program instructions to intercept an exception handling process and redirect it to the storage location using the key. This step is optional, because the process may be performed in other ways, for example by modifying the class library to alter the operation of native functions to transparently load the stored extraneous information, such as Throwable.getStackTrace( ), Class.getDeclaredAnnotations( ) and Class.getGenericInterfaces( ). For example, in the case of a stack trace, the class library may be modified to store the program counter in the StackTraceElement. The program counter is the index into the bytecode instructions at which the method call represented by the StackTraceElement occurs, and is used to find the line number in the line number debug info structure. In optional step <b>370</b>, the modified code may be stored in cache memory such as the shared class cache, so that subsequent loads of the class may be from the shared class cache to reduce any load time penalty.</p>
<p id="p-0027" num="0041">As shown in <figref idref="DRAWINGS">FIG. 4B</figref>, during run-time, the system loads the modified code in step <b>410</b>, and then in step <b>420</b> determines if an event requiring extraneous information occurs, for example a fault or a reflection process. If not, this process <b>400</b> ends. If yes, the system in step <b>430</b> uses the key to locate the desired extraneous information in the storage location, and loads it in step <b>440</b>. The memory optimization process then ends, and the system may perform any desired actions with the retrieved extraneous information. The located and loaded extraneous information may be one or more types of extraneous information, for example the debug information, annotation information, and source information previously described. The system may load only the extraneous information desired for a particular purpose, for example, if the system is creating a stack trace, it may locate and load only debug information needed to populate the stack trace, or, if the system uses reflection, it may locate and load only source information needed to perform reflection.</p>
<p id="p-0028" num="0042"><figref idref="DRAWINGS">FIGS. 5 through 7</figref> depict various aspects of a second embodiment of the present invention. In this embodiment, code is partitioned by separating extraneous information from the executable code and discarding the extraneous information. If needed, the extraneous information may be loaded from the original code. This approach optimizes memory usage by reducing the memory footprint while maintaining accessibility of the extraneous information for debugging and other processes necessary for servicing code in the field.</p>
<p id="p-0029" num="0043"><figref idref="DRAWINGS">FIG. 5</figref> illustrates an exemplary partitioning and memory optimization process that may be performed by the system of <figref idref="DRAWINGS">FIG. 1</figref> according to a second embodiment of the present invention. In this process, code <b>30</b> such as a Java class file or CIL code file is received by a custom class loader <b>21</b> in virtual machine <b>20</b>, where extraneous information in the code <b>30</b> is identified. The extraneous information is non-executable information, for example debug information, annotation information, or source information. The code <b>30</b> is modified by removing the extraneous information to yield modified code <b>35</b>, and a unique identification key that identifies the location of the original code <b>30</b> is inserted into the modified code <b>35</b>.</p>
<p id="p-0030" num="0044">At run-time, the modified code <b>35</b> is loaded as normal into the virtual machine <b>20</b>. If there is a need for the extraneous information during run-time, then the system may locate and load only the appropriate type of extraneous information needed for the particular task. For example, if a fault occurs, the exception handling process <b>22</b> and error reporting mechanism <b>23</b> request the debug information in order to throw an exception and report the error, but have no need for the annotation information and the source information. The exception handling process <b>22</b> and error reporting mechanism <b>23</b> use the key to find the storage location in which the original code <b>30</b> is stored, and load the debug information from the file so that the stack trace can be populated. Similarly, if the code uses reflection, a reflection process may request the source information, but not the debug information. If the original code was generated or downloaded from a server and does not exist locally, it may be regenerated or downloaded again.</p>
<p id="p-0031" num="0045">Referring now to <figref idref="DRAWINGS">FIG. 6</figref>, an exemplary Java class file <b>30</b> is shown, having ten primary components: magic number <b>201</b>, version <b>202</b>, constant pool <b>203</b>, access flags <b>204</b>, this class <b>205</b>, super class <b>206</b>, interfaces <b>207</b>, fields <b>208</b>, methods <b>209</b> and attributes <b>210</b>. The attributes may include debug information <b>221</b>, annotation information <b>222</b> and source information <b>223</b>. The exemplary Java class file <b>30</b> is modified by having its extraneous information, in this case debug information <b>221</b>, annotation information <b>222</b> and source information <b>223</b>, partitioned from the program instructions and discarded in trash <b>80</b> or garbage collected. The extraneous information is replaced by a key <b>224</b> in the modified Java class file <b>35</b>, which identifies the location where the original code <b>30</b> is stored or from where it is retrievable, e.g., by download.</p>
<p id="p-0032" num="0046">Turning now to <figref idref="DRAWINGS">FIGS. 7A</figref> and B, processes <b>500</b> and <b>600</b> for a partitioning and memory optimization process of a second embodiment are shown generally. Process <b>500</b> may be carried out at a time other than run-time or may be carried out by the system at run-time (for example when a class is loaded). Process <b>600</b> is generally performed at run-time. In process <b>500</b>, the system, for example the system of <figref idref="DRAWINGS">FIG. 1</figref>, loads original code in step <b>510</b>, for example by being loaded by a class loader, and in step <b>520</b> identifies extraneous information in the code. In step <b>530</b> the system removes the extraneous information from the code, and in step <b>540</b> inserts a key into the code to reference the location where the original code comprising the extraneous information is stored or from where it is retrievable. In a system such as an IBM J9 system, this process may be performed by a tool such as the Java Optimizer (JAPT) class manipulation tool, or at run-time it may be performed by the run-time J9 system as part of an extended loading process. When performed by the run-time system, the modified code is the representation of the code that is stored within the virtual machine, and optionally stored within the cache.</p>
<p id="p-0033" num="0047">In optional step <b>550</b>, the system rewrites the code so that it indirectly, instead of directly, accesses the extraneous information, for example by modifying one or more of the plurality of program instructions to intercept an exception handling process and redirect it to the stored code using the key. This step is optional, because the process may be performed in other ways, for example by modifying the class library to alter the operation of native functions to transparently load the extraneous information from the stored code, such as Throwable.getStackTrace( ), Class.getDeclaredAnnotations( ) and Class.getGenericInterfaces( ). For example, in the case of a stack trace, the class library may be modified to store the program counter in the StackTraceElement. The program counter is the index into the bytecode instructions at which the method call represented by the StackTraceElement occurs, and is used to find the line number in the line number debug info structure. In optional step <b>560</b>, the modified code may be stored in cache memory such as the shared class cache, so that subsequent loads of the class may be from the shared class cache to reduce any load time penalty.</p>
<p id="p-0034" num="0048">As shown in <figref idref="DRAWINGS">FIG. 7B</figref>, during run-time, the system loads the modified code in step <b>610</b>, and then in step <b>620</b> determines if an event requiring extraneous information occurs, for example a fault or a reflection process. If not, this process <b>600</b> ends. If yes, the system in step <b>630</b> uses the key to locate the desired extraneous information in location where the original code is stored or from where it is retrievable, and loads it in step <b>640</b>. The memory optimization process then ends, and the system may perform any desired actions with the retrieved extraneous information. The located and loaded extraneous information may be one or more types of extraneous information, for example the debug information, annotation information, and source information previously described. The system may load only the extraneous information desired for a particular purpose, for example, if the system is creating a stack trace, it may locate and load only debug information needed to populate the stack trace, or, if the system uses reflection, it may locate and load only source information needed to perform reflection.</p>
<p id="p-0035" num="0049">As will be appreciated by one skilled in the art, aspects of the present invention may be embodied as a system, method or computer program product. Accordingly, aspects of the present invention may take the form of an entirely hardware embodiment, an entirely software embodiment (including firmware, resident software, micro-code, etc.) or an embodiment combining software and hardware aspects that may all generally be referred to herein as a &#x201c;circuit,&#x201d; &#x201c;module&#x201d; or &#x201c;system.&#x201d; Furthermore, aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium(s) having computer readable program code embodied thereon.</p>
<p id="p-0036" num="0050">Any combination of one or more computer readable medium(s) may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable medium may be, for example, but is not limited to, an electronic, magnetic, optical, electromagnetic, infrared, or semiconductor system, apparatus, or device, or any suitable combination of the foregoing. More specific examples (a non-exhaustive list) of the computer readable storage medium would include the following: an electrical connection having one or more wires, a portable computer diskette, a hard disk, a random access memory (RAM), a read-only memory (ROM), an erasable programmable read-only memory (EPROM or Flash memory), an optical fiber, a portable compact disc read-only memory (CD-ROM), an optical storage device, a magnetic storage device, or any suitable combination of the foregoing. In the context of this document, a computer readable storage medium may be any tangible medium that can contain, or store a program for use by or in connection with an instruction execution system, apparatus, or device.</p>
<p id="p-0037" num="0051">A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein, for example, in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms, including, but not limited to, electro-magnetic, optical, or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate, propagate, or transport a program for use by or in connection with an instruction execution system, apparatus, or device. Program code embodied on a computer readable medium may be transmitted using any appropriate medium, including but not limited to wireless, wireline, optical fiber cable, RF, etc., or any suitable combination of the foregoing.</p>
<p id="p-0038" num="0052">Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages, including an object oriented programming language such as Java, Smalltalk, C++ or the like and conventional procedural programming languages, such as the &#x201c;C&#x201d; programming language or similar programming languages. The program code may execute entirely on the user's computer, partly on the user's computer, as a stand-alone software package, partly on the user's computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario, the remote computer may be connected to the user's computer through any type of network, including a local area network (LAN) or a wide area network (WAN), or the connection may be made to an external computer (for example, through the Internet using an Internet Service Provider).</p>
<p id="p-0039" num="0053">It is to be understood that the software for the computer systems of the present invention embodiments may be implemented in any desired computer language and could be developed by one of ordinary skill in the computer arts based on the functional descriptions contained in the specification and flow charts illustrated in the drawings. By way of example only, the software may be implemented in the C#, C++, Python, Java, or PHP programming languages. Further, any references herein of software performing various functions generally refer to computer systems or processors performing those functions under software control.</p>
<p id="p-0040" num="0054">The computer systems of the present invention embodiments may alternatively be implemented by any type of hardware and/or other processing circuitry. The various functions of the computer systems may be distributed in any manner among any quantity of software modules or units, processing or computer systems and/or circuitry, where the computer or processing systems may be disposed locally or remotely of each other and communicate via any suitable communications medium (e.g., LAN, WAN, Intranet, Internet, hardwire, modem connection, wireless, etc.).</p>
<p id="p-0041" num="0055">Aspects of the present invention are described with reference to flowchart illustrations and/or block diagrams of methods, apparatus (systems) and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and/or block diagrams, and combinations of blocks in the flowchart illustrations and/or block diagrams, can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer, special purpose computer, or other programmable data processing apparatus to produce a machine, such that the instructions, which execute via the processor of the computer or other programmable data processing apparatus, create means for implementing the functions/acts specified in the flowchart and/or block diagram block or blocks.</p>
<p id="p-0042" num="0056">These computer program instructions may also be stored in a computer readable medium that can direct a computer, other programmable data processing apparatus, or other devices to function in a particular manner, such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function/act specified in the flowchart and/or block diagram block or blocks. The computer program instructions may also be loaded onto a computer, other programmable data processing apparatus, or other devices to cause a series of operation steps to be performed on the computer, other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions/acts specified in the flowchart and/or block diagram block or blocks.</p>
<p id="p-0043" num="0057">A processing system suitable for storing and/or executing program code may be implemented by any conventional or other computer or processing systems preferably equipped with a display or monitor, a base (e.g., including the processor, memories and/or internal or external communications devices (e.g., modem, network cards, etc.) and optional input devices (e.g., a keyboard, mouse or other input device)). The system can include at least one processor coupled directly or indirectly to memory elements through a system bus. The memory elements can include local memory employed during actual execution of the program code, bulk storage, and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution. Input/output or I/O devices (including but not limited to keyboards, displays, pointing devices, etc.) can be coupled to the system either directly or through intervening I/O controllers. Network adapters may also be coupled to the system to enable the system to become coupled to other processing systems or remote printers or storage devices through intervening private or public networks. Modems, cable modem and Ethernet cards are just a few of the currently available types of network adapters.</p>
<p id="p-0044" num="0058">The flowchart and block diagrams in the Figures illustrate the architecture, functionality, and operation of possible implementations of systems, method and computer program products according to various embodiments of the present invention. In this regard, each block in the flowchart or block diagrams may represent a module, segment, or portion of code, which comprises one or more executable instructions for implementing the specified logical function(s). It should also be noted that, in some alternative implementations, the functions noted in the block may occur out of the order noted in the Figures. For example, two blocks shown in succession may, in fact, be executed substantially concurrently, or the blocks may sometime be executed in the reverse order, depending on the functionality involved. It will also be noted that each block of the block diagrams and/or flowchart illustration, and combinations of blocks in the block diagrams and/or flowchart illustration, can be implemented by special purpose hardware-based systems that perform the specified functions or acts, or combinations of special purpose hardware and computer instructions.</p>
<p id="p-0045" num="0059">The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein, the singular forms &#x201c;a&#x201d;, &#x201c;an&#x201d; and &#x201c;the&#x201d; are intended to include the plural forms as well, unless the context clearly indicates otherwise. It will be further understood that the terms &#x201c;comprises&#x201d; and/or &#x201c;comprising,&#x201d; when used in this specification, specify the presence of stated features, integers, steps, operations, elements, and/or components, but do not preclude the presence or addition of one or more features, integers, steps, operations, elements, components, and/or groups thereof.</p>
<p id="p-0046" num="0060">The corresponding structures, materials, acts, and equivalents of all means or step plus function elements in the claims below are intended to include any structure, material, or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present invention has been presented for purposes of illustration and description, but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiment was chosen and described in order to best explain the principles of the invention and the practical application, and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A method for optimizing virtual machine or interpreted code comprising:
<claim-text>receiving code comprising a plurality of program instructions and first extraneous information, wherein the code is written in a language for execution by a virtual machine and wherein the first extraneous information is a first type of non-executable information;</claim-text>
<claim-text>modifying the code by removing the first extraneous information and replacing it with a key that references a location of the first extraneous information; and</claim-text>
<claim-text>executing the modified code and, if an event requesting the first extraneous information occurs during execution, using the key to locate the first extraneous information in the location in response to the event, and loading the first extraneous information from the location.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the event is a fault and the first type of information is debug information.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, further comprising:
<claim-text>modifying one or more of the plurality of program instructions to intercept an exception handling process and redirect the exception handling process to the location of the first extraneous information using the key.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the code comprises second extraneous information, wherein the second extraneous information is a second type of non-executable information, and the first and second types of information are different.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method of <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein the second type of information is source information or annotation information.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the code is a Java class file or a Java Archive (JAR) file, and the plurality of program instructions are Java bytecode instructions.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the code is a .NET code file, and the plurality of program instructions are Common Intermediate Language (CIL) bytecode instructions.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the language is an interpreted language.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the location is a storage location, and further comprising:
<claim-text>storing the removed first extraneous information in the storage location.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the location is a storage location where the code is stored, and wherein said loading comprises loading the code from the storage location.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the location is a location from where the code can be retrieved, and wherein said loading comprises retrieving the code from the location.</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. A computer program product comprising a computer readable storage medium having a computer readable program, wherein the computer readable program when executed on a computer causes the computer to:
<claim-text>receive code comprising a plurality of program instructions and first extraneous information in a virtual machine environment, wherein the code is written in a language for execution by the virtual machine and wherein the first extraneous information is a first type of non-executable information;</claim-text>
<claim-text>modify the code by removing the first extraneous information and replacing it with a key that references a location of the first extraneous information; and</claim-text>
<claim-text>execute the modified code and, if an event requesting the first extraneous information occurs during execution, use the key to locate the first extraneous information in the location in response to the event, and load the first extraneous information from the location.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The computer program product of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the event is a fault and the first type of information is debug information, and wherein the computer readable program when executed on a computer further causes the computer to:
<claim-text>modify one or more of the plurality of program instructions to intercept an exception handling process and redirect the exception handling process to the location of the first extraneous information using the key.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The computer program product of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the location is a storage location and wherein the computer readable program when executed on a computer further causes the computer to:
<claim-text>store the removed first extraneous information in the storage location.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The computer program product of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the location is a location where the code is stored or from where the code is retrievable, and wherein said loading comprises loading the code comprising the first extraneous information from the location.</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The computer program product of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the virtual machine is a Common Language Runtime (CLR) virtual machine.</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The computer program product of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the virtual machine is a Java Virtual Machine (JVM).</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The computer program product of <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein the language is JavaScript.</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. The computer program product of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the computer program product is stored on a computer useable optical storage medium.</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. The computer program product of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the computer program product is stored on a hard disk.</claim-text>
</claim>
<claim id="CLM-00021" num="00021">
<claim-text>21. A system comprising:
<claim-text>a processor configured with logic to
<claim-text>load code comprising a plurality of program instructions and first extraneous information in a virtual machine environment, wherein the code is written in a language for execution by the virtual machine and wherein the first extraneous information is a first type of non-executable information,</claim-text>
<claim-text>modify the code by removing the first extraneous information and replacing it with a key that references a location of the first extraneous information, and</claim-text>
<claim-text>execute the modified code and, if an event requesting the first extraneous information occurs during execution, use the key to locate the first extraneous information in the location in response to the event, and load the first extraneous information from the location.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00022" num="00022">
<claim-text>22. The system of <claim-ref idref="CLM-00021">claim 21</claim-ref>, wherein the event is a fault and the first type of information is debug information, and wherein the processor is further configured with the logic to:
<claim-text>modify one or more of the plurality of program instructions to intercept an exception handling process and redirect the exception handling process to the location of the first extraneous information using the key.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00023" num="00023">
<claim-text>23. The system of <claim-ref idref="CLM-00021">claim 21</claim-ref>, wherein the location is a storage location and wherein the processor is further configured with the logic to:
<claim-text>store the removed first extraneous information in the storage location.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00024" num="00024">
<claim-text>24. The system of <claim-ref idref="CLM-00021">claim 21</claim-ref>, wherein the location is a location where the code is stored or from where the code is retrievable, and wherein said loading comprises loading the code comprising the first extraneous information from the location.</claim-text>
</claim>
<claim id="CLM-00025" num="00025">
<claim-text>25. The system of <claim-ref idref="CLM-00021">claim 21</claim-ref>, wherein the virtual machine is a Common Language Runtime (CLR) virtual machine or a Java Virtual Machine (JVM). </claim-text>
</claim>
</claims>
</us-patent-grant>
